/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 23 20:02:01 GMT 2019
 */

package us.codecraft.webmagic.utils;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.HashMap;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import us.codecraft.webmagic.utils.DoubleKeyMap;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DoubleKeyMap_ESTest extends DoubleKeyMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      HashMap<HashMap<Object, Object>, Map<Object, String>> hashMap0 = new HashMap<HashMap<Object, Object>, Map<Object, String>>();
      HashMap<Object, Object> hashMap1 = new HashMap<Object, Object>();
      HashMap<Object, String> hashMap2 = new HashMap<Object, String>();
      hashMap0.put(hashMap1, hashMap2);
      DoubleKeyMap<HashMap<Object, Object>, Object, String> doubleKeyMap0 = new DoubleKeyMap<HashMap<Object, Object>, Object, String>(hashMap0);
      Map<Object, String> map0 = doubleKeyMap0.remove(hashMap1);
      assertTrue(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Class<HashMap> class0 = HashMap.class;
      DoubleKeyMap<Object, Integer, HashMap<String, Integer>> doubleKeyMap0 = new DoubleKeyMap<Object, Integer, HashMap<String, Integer>>(class0);
      HashMap<String, Integer> hashMap0 = doubleKeyMap0.remove((Object) "Y%GikClV'QW<sLEWv4", (Integer) null);
      assertNull(hashMap0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DoubleKeyMap<Integer, Object, Object> doubleKeyMap0 = new DoubleKeyMap<Integer, Object, Object>();
      Object object0 = new Object();
      Object object1 = doubleKeyMap0.remove((Integer) null, object0);
      assertNull(object1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DoubleKeyMap<Object, Map<Object, HashMap<Object, String>>, String> doubleKeyMap0 = new DoubleKeyMap<Object, Map<Object, HashMap<Object, String>>, String>();
      Object object0 = new Object();
      HashMap<Object, HashMap<Object, String>> hashMap0 = new HashMap<Object, HashMap<Object, String>>();
      String string0 = doubleKeyMap0.remove(object0, (Map<Object, HashMap<Object, String>>) hashMap0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DoubleKeyMap<Object, String, HashMap<Object, Integer>> doubleKeyMap0 = new DoubleKeyMap<Object, String, HashMap<Object, Integer>>();
      Map<String, HashMap<Object, Integer>> map0 = doubleKeyMap0.remove((Object) null);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Class<HashMap> class0 = HashMap.class;
      DoubleKeyMap<Object, String, String> doubleKeyMap0 = new DoubleKeyMap<Object, String, String>(class0);
      Map<Object, Map<Object, Object>> map0 = doubleKeyMap0.newMap();
      DoubleKeyMap<Object, Object, Object> doubleKeyMap1 = new DoubleKeyMap<Object, Object, Object>(map0);
      Object object0 = new Object();
      Map<Object, Object> map1 = doubleKeyMap1.remove(object0);
      assertNull(map1);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DoubleKeyMap<Integer, String, Integer> doubleKeyMap0 = new DoubleKeyMap<Integer, String, Integer>();
      HashMap<Object, Map<Object, HashMap<String, String>>> hashMap0 = new HashMap<Object, Map<Object, HashMap<String, String>>>();
      DoubleKeyMap<Object, Object, HashMap<String, String>> doubleKeyMap1 = new DoubleKeyMap<Object, Object, HashMap<String, String>>(hashMap0);
      HashMap<String, String> hashMap1 = doubleKeyMap1.put((Object) doubleKeyMap0, (Object) doubleKeyMap0, (HashMap<String, String>) null);
      assertNull(hashMap1);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DoubleKeyMap<Integer, Object, Object> doubleKeyMap0 = new DoubleKeyMap<Integer, Object, Object>();
      Map<Integer, Map<Object, HashMap<Object, Map<Object, HashMap<Object, String>>>>> map0 = doubleKeyMap0.newMap();
      Class<Map> class0 = Map.class;
      DoubleKeyMap<Integer, Object, HashMap<Object, Map<Object, HashMap<Object, String>>>> doubleKeyMap1 = new DoubleKeyMap<Integer, Object, HashMap<Object, Map<Object, HashMap<Object, String>>>>(map0, class0);
      Object object0 = doubleKeyMap0.put((Integer) null, (Object) class0, (Object) doubleKeyMap1);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DoubleKeyMap<Integer, Object, Object> doubleKeyMap0 = new DoubleKeyMap<Integer, Object, Object>();
      DoubleKeyMap<Object, Integer, Map<Object, HashMap<Object, String>>> doubleKeyMap1 = new DoubleKeyMap<Object, Integer, Map<Object, HashMap<Object, String>>>();
      Integer integer0 = new Integer(0);
      HashMap<Object, HashMap<Object, String>> hashMap0 = new HashMap<Object, HashMap<Object, String>>();
      doubleKeyMap1.put((Object) doubleKeyMap0, integer0, (Map<Object, HashMap<Object, String>>) hashMap0);
      Map<Integer, Map<Object, HashMap<Object, String>>> map0 = doubleKeyMap1.get((Object) doubleKeyMap0);
      assertEquals(1, map0.size());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DoubleKeyMap<String, HashMap<Object, Object>, Object> doubleKeyMap0 = new DoubleKeyMap<String, HashMap<Object, Object>, Object>();
      Object object0 = doubleKeyMap0.get("1z{5-3wQN5OfX TX", (HashMap<Object, Object>) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Class<Map> class0 = Map.class;
      HashMap<Integer, Map<Object, Object>> hashMap0 = new HashMap<Integer, Map<Object, Object>>();
      DoubleKeyMap<Integer, Object, Object> doubleKeyMap0 = new DoubleKeyMap<Integer, Object, Object>(hashMap0, class0);
      Object object0 = new Object();
      Object object1 = doubleKeyMap0.get((Integer) null, object0);
      assertNull(object1);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Class<HashMap> class0 = HashMap.class;
      DoubleKeyMap<String, Object, String> doubleKeyMap0 = new DoubleKeyMap<String, Object, String>(class0);
      Map<Object, Map<Object, String>> map0 = doubleKeyMap0.newMap();
      DoubleKeyMap<Object, Object, String> doubleKeyMap1 = new DoubleKeyMap<Object, Object, String>(map0);
      Object object0 = new Object();
      String string0 = doubleKeyMap1.get(object0, (Object) class0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DoubleKeyMap<Map<Object, String>, String, String> doubleKeyMap0 = new DoubleKeyMap<Map<Object, String>, String, String>();
      Map<String, String> map0 = doubleKeyMap0.get((Map<Object, String>) null);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      HashMap<Integer, Map<String, HashMap<Integer, Object>>> hashMap1 = new HashMap<Integer, Map<String, HashMap<Integer, Object>>>();
      Class<Map> class0 = Map.class;
      DoubleKeyMap<Integer, String, HashMap<Integer, Object>> doubleKeyMap0 = new DoubleKeyMap<Integer, String, HashMap<Integer, Object>>(hashMap1, class0);
      Integer integer0 = new Integer((-1));
      // Undeclared exception!
      try { 
        doubleKeyMap0.put(integer0, (String) null, hashMap0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      HashMap<HashMap<String, Object>, Map<String, String>> hashMap0 = new HashMap<HashMap<String, Object>, Map<String, String>>();
      DoubleKeyMap<HashMap<String, Object>, String, String> doubleKeyMap0 = new DoubleKeyMap<HashMap<String, Object>, String, String>(hashMap0);
      HashMap<String, Object> hashMap1 = new HashMap<String, Object>();
      doubleKeyMap0.put(hashMap1, (String) null, "");
      doubleKeyMap0.remove(hashMap1, "W<Wyj");
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      HashMap<HashMap<String, Object>, Map<String, String>> hashMap0 = new HashMap<HashMap<String, Object>, Map<String, String>>();
      DoubleKeyMap<HashMap<String, Object>, String, String> doubleKeyMap0 = new DoubleKeyMap<HashMap<String, Object>, String, String>(hashMap0);
      HashMap<String, Object> hashMap1 = new HashMap<String, Object>();
      DoubleKeyMap<String, String, Integer> doubleKeyMap1 = new DoubleKeyMap<String, String, Integer>();
      Map<String, String> map0 = doubleKeyMap1.newMap();
      hashMap0.put(hashMap1, map0);
      String string0 = doubleKeyMap0.put(hashMap1, (String) null, "");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      HashMap<String, Map<Object, Map<String, String>>> hashMap0 = new HashMap<String, Map<Object, Map<String, String>>>();
      HashMap<String, Map<Object, String>> hashMap1 = new HashMap<String, Map<Object, String>>();
      DoubleKeyMap<String, Object, String> doubleKeyMap0 = new DoubleKeyMap<String, Object, String>(hashMap1);
      Map<Object, Map<String, String>> map0 = doubleKeyMap0.newMap();
      hashMap0.put("", map0);
      DoubleKeyMap<String, Object, Map<String, String>> doubleKeyMap1 = new DoubleKeyMap<String, Object, Map<String, String>>(hashMap0);
      Map<String, String> map1 = doubleKeyMap1.get("", (Object) hashMap0);
      assertNull(map1);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Class<Map> class0 = Map.class;
      DoubleKeyMap<String, String, Object> doubleKeyMap0 = null;
      try {
        doubleKeyMap0 = new DoubleKeyMap<String, String, Object>(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      HashMap<HashMap<String, Object>, Map<String, String>> hashMap0 = new HashMap<HashMap<String, Object>, Map<String, String>>();
      DoubleKeyMap<HashMap<String, Object>, String, String> doubleKeyMap0 = new DoubleKeyMap<HashMap<String, Object>, String, String>(hashMap0);
      HashMap<String, Object> hashMap1 = new HashMap<String, Object>();
      HashMap<String, Map<String, Integer>> hashMap2 = new HashMap<String, Map<String, Integer>>();
      DoubleKeyMap<String, String, Integer> doubleKeyMap1 = new DoubleKeyMap<String, String, Integer>(hashMap2);
      Map<String, String> map0 = doubleKeyMap1.newMap();
      hashMap0.put(hashMap1, map0);
      doubleKeyMap0.remove(hashMap1, "us.codecraft.webmagic.utils.DoubleKeyMap");
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
  }
}
