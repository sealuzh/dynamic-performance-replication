/*
 * This file was automatically generated by EvoSuite
 * Tue Jul 17 03:18:17 GMT 2018
 */

package weka.gui.beans;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.AWTEventMulticaster;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.Rectangle;
import java.awt.event.ContainerListener;
import java.awt.event.HierarchyListener;
import java.awt.event.InputEvent;
import java.awt.event.MouseEvent;
import java.awt.event.MouseWheelListener;
import java.beans.EventSetDescriptor;
import java.beans.VetoableChangeListener;
import java.io.IOException;
import java.net.URL;
import java.util.Locale;
import java.util.Vector;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import javax.swing.ImageIcon;
import javax.swing.JComponent;
import javax.swing.JDialog;
import javax.swing.JLayeredPane;
import javax.swing.JOptionPane;
import javax.swing.JToolTip;
import javax.swing.table.DefaultTableModel;
import javax.swing.text.DefaultCaret;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.lang.MockThread;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import weka.classifiers.CostMatrix;
import weka.classifiers.Evaluation;
import weka.classifiers.functions.supportVector.RBFKernel;
import weka.classifiers.meta.FilteredClassifier;
import weka.classifiers.misc.SerializedClassifier;
import weka.core.BinarySparseInstance;
import weka.core.Capabilities;
import weka.core.DenseInstance;
import weka.core.FindWithCapabilities;
import weka.core.Instance;
import weka.core.Instances;
import weka.core.SparseInstance;
import weka.core.TestInstances;
import weka.core.converters.DatabaseSaver;
import weka.core.converters.JSONLoader;
import weka.core.converters.LibSVMLoader;
import weka.core.converters.TextDirectoryLoader;
import weka.filters.AllFilter;
import weka.filters.MultiFilter;
import weka.filters.supervised.attribute.AttributeSelection;
import weka.filters.supervised.attribute.NominalToBinary;
import weka.filters.supervised.instance.Resample;
import weka.filters.supervised.instance.SpreadSubsample;
import weka.filters.supervised.instance.StratifiedRemoveFolds;
import weka.filters.unsupervised.attribute.Add;
import weka.gui.Logger;
import weka.gui.SysErrLog;
import weka.gui.beans.Appender;
import weka.gui.beans.Associator;
import weka.gui.beans.AttributeSummarizer;
import weka.gui.beans.BeanVisual;
import weka.gui.beans.ClassAssigner;
import weka.gui.beans.Classifier;
import weka.gui.beans.ClassifierPerformanceEvaluator;
import weka.gui.beans.Clusterer;
import weka.gui.beans.ConfigurationListener;
import weka.gui.beans.DataSetEvent;
import weka.gui.beans.DataSourceListener;
import weka.gui.beans.DataVisualizer;
import weka.gui.beans.Filter;
import weka.gui.beans.ImageSaver;
import weka.gui.beans.InstanceEvent;
import weka.gui.beans.InstanceStreamToBatchMaker;
import weka.gui.beans.MetaBean;
import weka.gui.beans.PredictionAppender;
import weka.gui.beans.Saver;
import weka.gui.beans.ScatterPlotMatrix;
import weka.gui.beans.SerializedModelSaver;
import weka.gui.beans.Sorter;
import weka.gui.beans.SubstringLabeler;
import weka.gui.beans.SubstringReplacer;
import weka.gui.beans.TestSetEvent;
import weka.gui.beans.TrainTestSplitMaker;
import weka.gui.beans.TrainingSetEvent;
import weka.gui.beans.TrainingSetListener;
import weka.gui.beans.TrainingSetMaker;
import weka.gui.explorer.ClassifierErrorsPlotInstances;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Filter_ESTest extends Filter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Filter filter0 = new Filter();
      ImageSaver imageSaver0 = new ImageSaver();
      BeanVisual beanVisual0 = imageSaver0.getVisual();
      filter0.setVisual(beanVisual0);
      filter0.stop();
      filter0.getFilter();
      imageSaver0.getMaximumSize();
      LibSVMLoader libSVMLoader0 = new LibSVMLoader();
      try { 
        libSVMLoader0.getStructure();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No source has been specified
         //
         verifyException("weka.core.converters.LibSVMLoader", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Filter filter0 = new Filter();
      Sorter sorter0 = new Sorter();
      filter0.removeTestSetListener(sorter0);
      // Undeclared exception!
      try { 
        filter0.setWrappedAlgorithm(sorter0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // class weka.gui.beans.Sorter : incorrect type of algorithm (Filter)
         //
         verifyException("weka.gui.beans.Filter", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Filter filter0 = new Filter();
      // Undeclared exception!
      try { 
        filter0.performRequest("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         //  not supported (Filter)
         //
         verifyException("weka.gui.beans.Filter", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Filter filter0 = new Filter();
      FilteredClassifier filteredClassifier0 = new FilteredClassifier();
      weka.filters.Filter filter1 = filteredClassifier0.getFilter();
      weka.filters.Filter.makeCopy(filter1);
      filter0.setFilter(filter1);
      boolean boolean0 = filter0.connectionAllowed("T\"qy");
      assertEquals("Discretize", filter0.getCustomName());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Filter filter0 = new Filter();
      boolean boolean0 = filter0.eventGeneratable("e4XpgTK^yVV$`");
      assertFalse(boolean0);
      
      filter0.connectionNotification("(0[ZZ1e", "(0[ZZ1e");
      filter0.getFilter();
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Filter filter0 = new Filter();
      ClassAssigner classAssigner0 = new ClassAssigner();
      classAssigner0.setDebugGraphicsOptions(2807);
      filter0.removeTrainingSetListener(classAssigner0);
      filter0.connectionNotification("LBJ\" NSt1fjUO@", classAssigner0);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Filter filter0 = new Filter();
      DataVisualizer dataVisualizer0 = new DataVisualizer();
      DefaultCaret defaultCaret0 = new DefaultCaret();
      filter0.addFocusListener(defaultCaret0);
      dataVisualizer0.setBounds((Rectangle) defaultCaret0);
      dataVisualizer0.removeVetoableChangeListener((VetoableChangeListener) null);
      filter0.removeTestSetListener(dataVisualizer0);
      filter0.globalInfo();
      MetaBean metaBean0 = new MetaBean();
      BeanVisual beanVisual0 = metaBean0.m_visual;
      filter0.setVisual(beanVisual0);
      Classifier classifier0 = new Classifier();
      CostMatrix costMatrix0 = new CostMatrix(0);
      CostMatrix costMatrix1 = new CostMatrix(costMatrix0);
      TrainingSetMaker trainingSetMaker0 = new TrainingSetMaker();
      trainingSetMaker0.getStructure("");
      MockRandom mockRandom0 = new MockRandom();
      try { 
        costMatrix1.applyCostMatrix((Instances) null, mockRandom0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.CostMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Filter filter0 = new Filter();
      filter0.getCustomName();
      BeanVisual beanVisual0 = filter0.getVisual();
      assertEquals("weka/gui/beans/icons/DefaultFilter_animated.gif", beanVisual0.getAnimatedIconPath());
      assertEquals("weka/gui/beans/icons/DefaultFilter.gif", beanVisual0.getIconPath());
      
      Saver saver0 = new Saver();
      saver0.requestFocusInWindow();
      Locale locale0 = Locale.CANADA_FRENCH;
      Locale locale1 = Locale.FRENCH;
      locale0.getDisplayLanguage(locale1);
      locale0.getDisplayCountry(locale1);
      locale0.toLanguageTag();
      JComponent.setDefaultLocale(locale0);
      filter0.addTestSetListener(saver0);
      String string0 = filter0.getCustomName();
      assertEquals("AllFilter", string0);
      
      filter0.removeTrainingSetListener(saver0);
      boolean boolean0 = filter0.eventGeneratable("AllFilter");
      assertFalse(boolean0);
      
      SubstringLabeler substringLabeler0 = new SubstringLabeler();
      InstanceEvent instanceEvent0 = substringLabeler0.m_ie;
      filter0.acceptInstance(instanceEvent0);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Filter filter0 = new Filter();
      MouseWheelListener mouseWheelListener0 = mock(MouseWheelListener.class, new ViolatedAssumptionAnswer());
      MouseWheelListener mouseWheelListener1 = AWTEventMulticaster.add(mouseWheelListener0, mouseWheelListener0);
      MouseEvent mouseEvent0 = new MouseEvent(filter0, 3422, 4256L, 2, 2, 2, 2103, false, 2);
      InputEvent.getMaskForButton(2);
      filter0.dispatchEvent(mouseEvent0);
      AWTEventMulticaster.remove(mouseWheelListener1, mouseWheelListener1);
      filter0.addMouseWheelListener((MouseWheelListener) null);
      Classifier classifier0 = new Classifier();
      filter0.addTrainingSetListener(classifier0);
      ConfigurationListener configurationListener0 = mock(ConfigurationListener.class, new ViolatedAssumptionAnswer());
      filter0.removeConfigurationListener(configurationListener0);
      filter0.setCustomName("model");
      filter0.stop();
      Resample resample0 = new Resample();
      RBFKernel rBFKernel0 = new RBFKernel();
      Capabilities capabilities0 = rBFKernel0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate("Te*");
      resample0.setInputFormat(instances0);
      weka.filters.Filter filter1 = weka.filters.Filter.makeCopy(resample0);
      filter0.setFilter(filter1);
      // Undeclared exception!
      try { 
        filter0.performRequest("model");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // model not supported (Filter)
         //
         verifyException("weka.gui.beans.Filter", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Filter filter0 = new Filter();
      filter0.connectionNotification("Jv@Rr@C", "Jv@Rr@C");
      filter0.resetKeyboardActions();
      filter0.getMinimumSize();
      ClassAssigner classAssigner0 = new ClassAssigner();
      Logger logger0 = classAssigner0.m_logger;
      filter0.setLog((Logger) null);
      filter0.getFilter();
      filter0.isDoubleBuffered();
      filter0.useDefaultVisual();
      filter0.addTrainingSetListener((TrainingSetListener) null);
      filter0.getFilter();
      filter0.getVisual();
      filter0.getVisual();
      Clusterer clusterer0 = new Clusterer();
      filter0.addTestSetListener(clusterer0);
      classAssigner0.setFocusCycleRoot(true);
      filter0.globalInfo();
      // Undeclared exception!
      try { 
        filter0.setWrappedAlgorithm("Jv@Rr@C");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // class java.lang.String : incorrect type of algorithm (Filter)
         //
         verifyException("weka.gui.beans.Filter", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Filter filter0 = new Filter();
      Appender appender0 = new Appender();
      Logger logger0 = appender0.m_log;
      boolean boolean0 = filter0.connectionAllowed("f|sANqLaSZ/");
      assertTrue(boolean0);
      
      filter0.enumerateRequests();
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Filter filter0 = new Filter();
      MetaBean metaBean0 = new MetaBean();
      Sorter sorter0 = new Sorter();
      sorter0.getMouseWheelListeners();
      ThreadGroup threadGroup0 = new ThreadGroup("J");
      ThreadGroup threadGroup1 = new ThreadGroup(threadGroup0, "");
      MockThread mockThread0 = new MockThread("p;Mg1/,Ct$MMz:@");
      MockThread mockThread1 = new MockThread(mockThread0);
      MockThread mockThread2 = new MockThread(threadGroup1, mockThread1);
      filter0.m_filterThread = (Thread) mockThread2;
      JToolTip jToolTip0 = filter0.createToolTip();
      sorter0.getStructure("");
      InstanceEvent instanceEvent0 = new InstanceEvent(metaBean0, (Instances) null);
      Thread[] threadArray0 = new Thread[8];
      threadArray0[0] = (Thread) mockThread1;
      threadArray0[1] = filter0.m_filterThread;
      threadArray0[2] = (Thread) mockThread1;
      threadArray0[3] = (Thread) mockThread0;
      threadArray0[4] = (Thread) mockThread1;
      threadArray0[5] = (Thread) mockThread0;
      threadArray0[6] = (Thread) mockThread1;
      threadArray0[7] = (Thread) mockThread0;
      threadGroup0.enumerate(threadArray0, true);
      threadGroup0.setDaemon(true);
      filter0.notifyInstanceListeners(instanceEvent0);
      filter0.enumerateRequests();
      TestSetEvent testSetEvent0 = new TestSetEvent(jToolTip0, (Instances) null);
      filter0.acceptTestSet(testSetEvent0);
      filter0.useDefaultVisual();
      TrainingSetMaker trainingSetMaker0 = new TrainingSetMaker();
      TrainingSetEvent trainingSetEvent0 = new TrainingSetEvent(trainingSetMaker0, (Instances) null, 2, 2);
      filter0.acceptTrainingSet(trainingSetEvent0);
      // Undeclared exception!
      try { 
        filter0.performRequest("Filter");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Filter not supported (Filter)
         //
         verifyException("weka.gui.beans.Filter", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Filter filter0 = new Filter();
      Appender appender0 = new Appender();
      Instances instances0 = appender0.m_completeHeader;
      TestSetEvent testSetEvent0 = new TestSetEvent(filter0, (Instances) null, (-529), 127);
      filter0.acceptTestSet(testSetEvent0);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Filter filter0 = new Filter();
      TrainingSetEvent trainingSetEvent0 = new TrainingSetEvent(filter0, (Instances) null);
      trainingSetEvent0.m_setNumber = 1;
      filter0.acceptTrainingSet(trainingSetEvent0);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Filter filter0 = new Filter();
      Appender appender0 = new Appender();
      filter0.addInstanceListener(appender0);
      filter0.addInstanceListener(appender0);
      AttributeSummarizer attributeSummarizer0 = new AttributeSummarizer();
      filter0.removeTrainingSetListener(attributeSummarizer0);
      MultiFilter multiFilter0 = new MultiFilter();
      filter0.setWrappedAlgorithm(multiFilter0);
      ConfigurationListener configurationListener0 = mock(ConfigurationListener.class, new ViolatedAssumptionAnswer());
      filter0.removeConfigurationListener(configurationListener0);
      filter0.isBusy();
      JSONLoader jSONLoader0 = new JSONLoader();
      appender0.setFocusable(false);
      appender0.createVolatileImage((-2963), (-1479));
      try { 
        jSONLoader0.getDataSet();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No source has been specified
         //
         verifyException("weka.core.converters.JSONLoader", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Filter filter0 = new Filter();
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      DataSetEvent dataSetEvent0 = new DataSetEvent(findWithCapabilities0, (Instances) null);
      filter0.acceptDataSet(dataSetEvent0);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Filter filter0 = new Filter();
      SubstringReplacer substringReplacer0 = new SubstringReplacer();
      Associator associator0 = new Associator();
      associator0.getStructure(" test set interrupted!");
      DataSetEvent dataSetEvent0 = new DataSetEvent(substringReplacer0, (Instances) null);
      filter0.acceptDataSet(dataSetEvent0);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Filter filter0 = new Filter();
      Integer integer0 = JLayeredPane.POPUP_LAYER;
      filter0.connectionNotification("hMN1xU>t", integer0);
      SubstringLabeler substringLabeler0 = new SubstringLabeler();
      InstanceEvent instanceEvent0 = substringLabeler0.m_ie;
      filter0.acceptInstance(instanceEvent0);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Filter filter0 = new Filter();
      filter0.m_visual = null;
      Classifier classifier0 = new Classifier();
      BeanVisual beanVisual0 = classifier0.getVisual();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "model");
      filter0.setVisual(beanVisual0);
      filter0.useDefaultVisual();
      SubstringLabeler substringLabeler0 = new SubstringLabeler();
      InstanceEvent instanceEvent0 = substringLabeler0.m_ie;
      filter0.notifyInstanceListeners(instanceEvent0);
      Classifier classifier1 = new Classifier();
      classifier1.setFocusTraversalKeysEnabled(false);
      classifier1.getAncestorListeners();
      filter0.connectionNotification("(S)qz(5( ", classifier1);
      filter0.getCustomName();
      substringLabeler0.setComponentZOrder(classifier0, 1);
      filter0.connectionNotification("() rz3g_R~r?_j0w8", beanVisual0);
      filter0.acceptInstance(instanceEvent0);
      SerializedModelSaver serializedModelSaver0 = new SerializedModelSaver();
      StratifiedRemoveFolds stratifiedRemoveFolds0 = new StratifiedRemoveFolds();
      // Undeclared exception!
      try { 
        serializedModelSaver0.add((Component) filter0, (Object) stratifiedRemoveFolds0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot add to layout: constraint must be a string (or null)
         //
         verifyException("java.awt.BorderLayout", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Filter filter0 = new Filter();
      ClassAssigner classAssigner0 = new ClassAssigner();
      MetaBean metaBean0 = new MetaBean();
      Vector vector0 = metaBean0.getInputs();
      DefaultTableModel defaultTableModel0 = new DefaultTableModel(vector0, vector0);
      filter0.connectionNotification("", defaultTableModel0);
      ScatterPlotMatrix scatterPlotMatrix0 = new ScatterPlotMatrix();
      filter0.addDataSourceListener(scatterPlotMatrix0);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
          Filter filter0 = new Filter();
          filter0.setEnabled(false);
          filter0.getCustomName();
          System.setCurrentTimeMillis(753L);
          filter0.enumerateRequests();
          Resample resample0 = new Resample();
          TrainTestSplitMaker trainTestSplitMaker0 = new TrainTestSplitMaker();
          int int0 = 749;
          URL uRL0 = MockURL.getHttpExample();
          ImageIcon imageIcon0 = null;
          try {
            imageIcon0 = new ImageIcon(uRL0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.net.URLPermission\" \"http://www.someFakeButWellFormedURL.org/fooExample\" \"*:*\")
             // java.lang.Thread.getStackTrace(Thread.java:1556)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:434)
             // sun.awt.SunToolkit.checkPermissions(SunToolkit.java:936)
             // sun.awt.SunToolkit.getImageFromHash(SunToolkit.java:723)
             // sun.awt.SunToolkit.getImage(SunToolkit.java:759)
             // sun.awt.HeadlessToolkit.getImage(HeadlessToolkit.java:371)
             // javax.swing.ImageIcon.<init>(ImageIcon.java:198)
             // javax.swing.ImageIcon.<init>(ImageIcon.java:217)
             // sun.reflect.GeneratedConstructorAccessor168.newInstance(Unknown Source)
             // sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
             // java.lang.reflect.Constructor.newInstance(Constructor.java:423)
             // org.evosuite.testcase.statements.ConstructorStatement$1.execute(ConstructorStatement.java:233)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:169)
             // org.evosuite.testcase.statements.ConstructorStatement.execute(ConstructorStatement.java:188)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:307)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:213)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:55)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
             // java.lang.Thread.run(Thread.java:745)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Filter filter0 = new Filter();
      filter0.disconnectionNotification("weka/gui/beans/icons/", "weka/gui/beans/icons/");
      filter0.getBorder();
      filter0.setLog((Logger) null);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Filter filter0 = new Filter();
      HierarchyListener hierarchyListener0 = mock(HierarchyListener.class, new ViolatedAssumptionAnswer());
      HierarchyListener hierarchyListener1 = mock(HierarchyListener.class, new ViolatedAssumptionAnswer());
      HierarchyListener hierarchyListener2 = AWTEventMulticaster.add(hierarchyListener0, hierarchyListener1);
      AWTEventMulticaster.remove(hierarchyListener2, hierarchyListener2);
      filter0.removeHierarchyListener((HierarchyListener) null);
      ClassAssigner classAssigner0 = new ClassAssigner();
      filter0.setLog((Logger) null);
      filter0.useDefaultVisual();
      filter0.getWrappedAlgorithm();
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Filter filter0 = new Filter();
      Random.setNextRandom(32000);
      Associator associator0 = new Associator();
      associator0.getStructure("weka/gui/weka_icon_new.png");
      DatabaseSaver databaseSaver0 = new DatabaseSaver();
      Capabilities capabilities0 = databaseSaver0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      DataSetEvent dataSetEvent0 = new DataSetEvent(testInstances0, (Instances) null);
      Filter filter1 = new Filter();
      filter1.acceptDataSet(dataSetEvent0);
      assertEquals("AllFilter", filter1.getCustomName());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Filter filter0 = new Filter();
      filter0.getComponentPopupMenu();
      filter0.getCustomName();
      Clusterer clusterer0 = new Clusterer();
      clusterer0.requestFocusInWindow();
      filter0.removeTestSetListener(clusterer0);
      filter0.list();
      filter0.removeDataSourceListener((DataSourceListener) null);
      filter0.setCustomName("Momentum = ");
      filter0.getCustomName();
      SubstringLabeler substringLabeler0 = new SubstringLabeler();
      InstanceEvent instanceEvent0 = substringLabeler0.m_ie;
      filter0.notifyInstanceListeners(instanceEvent0);
      ConfigurationListener configurationListener0 = mock(ConfigurationListener.class, new ViolatedAssumptionAnswer());
      filter0.addConfigurationListener(configurationListener0);
      assertEquals("Momentum = ", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Filter filter0 = new Filter();
      AllFilter allFilter0 = new AllFilter();
      ClassAssigner classAssigner0 = new ClassAssigner();
      Associator associator0 = new Associator();
      classAssigner0.getConnectedFormat();
      Clusterer clusterer0 = new Clusterer();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      DataSetEvent dataSetEvent0 = new DataSetEvent(associator0, instances0);
      Filter filter1 = new Filter();
      filter1.acceptDataSet(dataSetEvent0);
      filter0.disconnectionNotification("configuration", associator0);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Filter filter0 = new Filter();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      TrainingSetEvent trainingSetEvent0 = new TrainingSetEvent(textDirectoryLoader0, instances0);
      filter0.acceptTrainingSet(trainingSetEvent0);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Filter filter0 = new Filter();
      // Undeclared exception!
      try { 
        filter0.connectionAllowed((EventSetDescriptor) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.gui.beans.Filter", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Filter filter0 = new Filter();
      filter0.getAutoscrolls();
      filter0.isOpaque();
      AttributeSelection attributeSelection0 = new AttributeSelection();
      filter0.connectionNotification(")6<ow\"~A{twfk?;", attributeSelection0);
      filter0.eventGeneratable(")6<ow\"~A{twfk?;");
      Random.setNextRandom((-9000));
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Filter filter0 = new Filter();
      filter0.acceptTrainingSet((TrainingSetEvent) null);
      filter0.acceptTrainingSet((TrainingSetEvent) null);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Filter filter0 = new Filter();
      Integer integer0 = JLayeredPane.POPUP_LAYER;
      filter0.connectionNotification("weka.classifiers.Evaluation", "weka.classifiers.Evaluation");
      boolean boolean0 = filter0.eventGeneratable("WARNING: Filter is currently batch processing.");
      assertFalse(boolean0);
      
      filter0.connectionNotification("weka.classifiers.Evaluation", integer0);
      Sorter sorter0 = new Sorter();
      filter0.removeInstanceListener(sorter0);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Filter filter0 = new Filter();
      boolean boolean0 = filter0.eventGeneratable("configuration");
      assertTrue(boolean0);
      
      Class<Appender> class0 = Appender.class;
      filter0.getListeners(class0);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Filter filter0 = new Filter();
      Add add0 = new Add();
      filter0.setFilter(add0);
      SpreadSubsample spreadSubsample0 = new SpreadSubsample();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      TrainingSetEvent trainingSetEvent0 = new TrainingSetEvent(add0, instances0);
      Sorter sorter0 = new Sorter();
      TrainingSetEvent trainingSetEvent1 = new TrainingSetEvent(sorter0, instances0, (-5), (-1884834736), (-1884834736), (-2198));
      filter0.acceptTrainingSet(trainingSetEvent1);
      filter0.setCustomName(".arff");
      Appender appender0 = new Appender();
      InstanceEvent instanceEvent0 = appender0.m_ie;
      filter0.acceptInstance(instanceEvent0);
      assertEquals(".arff", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Filter filter0 = new Filter();
      Clusterer clusterer0 = new Clusterer();
      filter0.connectionNotification("j;s", clusterer0);
      boolean boolean0 = filter0.eventGeneratable("j;s");
      assertTrue(boolean0);
      
      InstanceStreamToBatchMaker instanceStreamToBatchMaker0 = new InstanceStreamToBatchMaker();
      filter0.addInstanceListener(instanceStreamToBatchMaker0);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Filter filter0 = new Filter();
      SubstringReplacer substringReplacer0 = new SubstringReplacer();
      filter0.connectionNotification("hMN>t", substringReplacer0);
      boolean boolean0 = filter0.eventGeneratable("hMN>t");
      assertEquals("AllFilter", filter0.getCustomName());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Filter filter0 = new Filter();
      Add add0 = new Add();
      filter0.setFilter(add0);
      Sorter sorter0 = new Sorter();
      InstanceEvent instanceEvent0 = sorter0.m_ie;
      instanceEvent0.setStatus(2189);
      filter0.acceptInstance(instanceEvent0);
      assertEquals("Add", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Filter filter0 = new Filter();
      Saver saver0 = new Saver();
      Filter filter1 = new Filter();
      filter1.addInstanceListener(filter0);
      PredictionAppender predictionAppender0 = new PredictionAppender();
      PredictionAppender predictionAppender1 = new PredictionAppender();
      InstanceEvent instanceEvent0 = predictionAppender1.m_instanceEvent;
      filter1.notifyInstanceListeners((InstanceEvent) null);
      filter0.useDefaultVisual();
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Add add0 = new Add();
      Filter filter0 = new Filter();
      filter0.setFilter(add0);
      Sorter sorter0 = new Sorter();
      Appender appender0 = new Appender();
      InstanceEvent instanceEvent0 = appender0.m_ie;
      instanceEvent0.setStatus(2);
      filter0.acceptInstance(instanceEvent0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      boolean boolean0 = filter0.isBusy();
      assertEquals("Add", filter0.getCustomName());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Filter filter0 = new Filter();
      filter0.connectionNotification("instance", "instance");
      boolean boolean0 = filter0.eventGeneratable("H^npJQ6wpgl)?L");
      assertFalse(boolean0);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Filter filter0 = new Filter();
      TrainingSetEvent trainingSetEvent0 = new TrainingSetEvent(filter0, (Instances) null);
      filter0.acceptTrainingSet(trainingSetEvent0);
      boolean boolean0 = filter0.eventGeneratable("(G)iJ.");
      assertEquals("AllFilter", filter0.getCustomName());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Filter filter0 = new Filter();
      TestSetEvent testSetEvent0 = new TestSetEvent(instances0, instances0);
      filter0.acceptTestSet(testSetEvent0);
      SubstringLabeler substringLabeler0 = new SubstringLabeler();
      filter0.addTestSetListener(substringLabeler0);
      filter0.acceptTestSet(testSetEvent0);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Filter filter0 = new Filter();
      SysErrLog sysErrLog0 = new SysErrLog();
      filter0.setLog(sysErrLog0);
      Sorter sorter0 = new Sorter();
      InstanceEvent instanceEvent0 = sorter0.m_ie;
      filter0.acceptInstance(instanceEvent0);
      filter0.getFilter();
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Filter filter0 = new Filter();
      Add add0 = new Add();
      filter0.setFilter(add0);
      Sorter sorter0 = new Sorter();
      InstanceEvent instanceEvent0 = sorter0.m_ie;
      DenseInstance denseInstance0 = new DenseInstance(2189);
      instanceEvent0.setInstance(denseInstance0);
      instanceEvent0.setStatus(2189);
      filter0.acceptInstance(instanceEvent0);
      assertEquals("Add", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Filter filter0 = new Filter();
      Add add0 = new Add();
      filter0.setFilter(add0);
      Sorter sorter0 = new Sorter();
      InstanceEvent instanceEvent0 = sorter0.m_ie;
      DenseInstance denseInstance0 = new DenseInstance(2);
      instanceEvent0.setInstance(denseInstance0);
      instanceEvent0.setStatus(2);
      filter0.acceptInstance(instanceEvent0);
      assertEquals("Add", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Filter filter0 = new Filter();
      Add add0 = new Add();
      filter0.setFilter(add0);
      filter0.connectionNotification("instance", add0);
      assertEquals("Add", filter0.getCustomName());
  }
}
