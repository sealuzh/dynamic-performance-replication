/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 23 22:23:54 GMT 2019
 */

package org.apache.commons.jxpath.ri.parser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.FileDescriptor;
import java.io.IOException;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.io.PushbackInputStream;
import java.io.Reader;
import java.io.StringReader;
import java.io.UnsupportedEncodingException;
import org.apache.commons.jxpath.ri.parser.SimpleCharStream;
import org.apache.commons.jxpath.ri.parser.Token;
import org.apache.commons.jxpath.ri.parser.XPathParserTokenManager;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class XPathParserTokenManager_ESTest extends XPathParserTokenManager_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      StringReader stringReader0 = new StringReader("..");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader("..");
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotNull(stringReader1);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader1, (-1102), (-1102));
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream0);
      
      simpleCharStream0.ReInit((Reader) stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertNotSame(stringReader1, stringReader0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(2, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(2, simpleCharStream0.getColumn());
      assertEquals("..", token0.toString());
      assertNotSame(stringReader1, stringReader0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, simpleCharStream0.bufpos);
      assertEquals(1, token0.beginLine);
      assertEquals(83, token0.kind);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.endLine);
      assertEquals(2, token0.endColumn);
      assertNotNull(token0);
      
      xPathParserTokenManager0.setDebugStream((PrintStream) null);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(2, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(2, simpleCharStream0.getColumn());
      assertNotSame(stringReader1, stringReader0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, simpleCharStream0.bufpos);
      
      Token token1 = xPathParserTokenManager0.getNextToken();
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(token1.equals((Object)token0));
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(2, simpleCharStream0.getEndColumn());
      assertEquals(2, simpleCharStream0.getBeginColumn());
      assertEquals(2, simpleCharStream0.getColumn());
      assertEquals("", token1.toString());
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(token1, token0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, simpleCharStream0.bufpos);
      assertEquals(1, token1.beginLine);
      assertEquals(0, token1.kind);
      assertEquals(1, token1.endLine);
      assertEquals(2, token1.beginColumn);
      assertEquals(2, token1.endColumn);
      assertNotNull(token1);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      StringReader stringReader0 = new StringReader("\"and\"");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(5, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(5, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals("\"and\"", token0.toString());
      assertEquals(4, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, token0.endLine);
      assertEquals(5, token0.endColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(18, token0.kind);
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      StringReader stringReader0 = new StringReader("format-number");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader("string-length");
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotNull(stringReader1);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertEquals(13, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(13, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals("string-length", token0.toString());
      assertNotSame(stringReader1, stringReader0);
      assertEquals(12, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(13, token0.endColumn);
      assertEquals(63, token0.kind);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginColumn);
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      StringReader stringReader0 = new StringReader("U5yI:P`");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader("U5yI:P`");
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotNull(stringReader1);
      
      StringReader stringReader2 = new StringReader("U5yI:P`");
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertNotNull(stringReader2);
      
      long long0 = stringReader2.skip(208L);
      assertEquals(7L, long0);
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertNotSame(stringReader2, stringReader0);
      assertNotSame(stringReader2, stringReader1);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader1, 999, 85);
      assertFalse(stringReader1.equals((Object)stringReader2));
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertFalse(stringReader1.equals((Object)stringReader2));
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertFalse(stringReader1.equals((Object)stringReader2));
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertEquals(85, simpleCharStream0.getBeginColumn());
      assertEquals(88, simpleCharStream0.getEndColumn());
      assertEquals(999, simpleCharStream0.getEndLine());
      assertEquals(88, simpleCharStream0.getColumn());
      assertEquals(999, simpleCharStream0.getBeginLine());
      assertEquals(999, simpleCharStream0.getLine());
      assertEquals("U5yI", token0.toString());
      assertNotSame(stringReader1, stringReader2);
      assertNotSame(stringReader1, stringReader0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(3, simpleCharStream0.bufpos);
      assertEquals(999, token0.endLine);
      assertEquals(85, token0.beginColumn);
      assertEquals(999, token0.beginLine);
      assertEquals(88, token0.endColumn);
      assertEquals(78, token0.kind);
      assertNotNull(token0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(xPathParserTokenManager0.debugStream, false);
      assertFalse(stringReader1.equals((Object)stringReader2));
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(3, simpleCharStream0.bufpos);
      assertNotNull(mockPrintStream0);
      
      PrintStream printStream0 = mockPrintStream0.printf("", (Object[]) xPathParserTokenManager0.jjstrLiteralImages);
      assertFalse(stringReader1.equals((Object)stringReader2));
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertEquals(85, simpleCharStream0.getBeginColumn());
      assertEquals(88, simpleCharStream0.getEndColumn());
      assertEquals(999, simpleCharStream0.getEndLine());
      assertEquals(88, simpleCharStream0.getColumn());
      assertEquals(999, simpleCharStream0.getBeginLine());
      assertEquals(999, simpleCharStream0.getLine());
      assertNotSame(stringReader1, stringReader2);
      assertNotSame(stringReader1, stringReader0);
      assertSame(mockPrintStream0, printStream0);
      assertSame(printStream0, mockPrintStream0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(3, simpleCharStream0.bufpos);
      assertNotNull(printStream0);
      
      xPathParserTokenManager0.setDebugStream(printStream0);
      assertFalse(stringReader1.equals((Object)stringReader2));
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertEquals(85, simpleCharStream0.getBeginColumn());
      assertEquals(88, simpleCharStream0.getEndColumn());
      assertEquals(999, simpleCharStream0.getEndLine());
      assertEquals(88, simpleCharStream0.getColumn());
      assertEquals(999, simpleCharStream0.getBeginLine());
      assertEquals(999, simpleCharStream0.getLine());
      assertNotSame(stringReader1, stringReader2);
      assertNotSame(stringReader1, stringReader0);
      assertSame(mockPrintStream0, printStream0);
      assertSame(printStream0, mockPrintStream0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(3, simpleCharStream0.bufpos);
      
      Token token1 = xPathParserTokenManager0.getNextToken();
      assertFalse(stringReader1.equals((Object)stringReader2));
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(token1.equals((Object)token0));
      assertEquals(89, simpleCharStream0.getBeginColumn());
      assertEquals(89, simpleCharStream0.getEndColumn());
      assertEquals(999, simpleCharStream0.getEndLine());
      assertEquals(89, simpleCharStream0.getColumn());
      assertEquals(999, simpleCharStream0.getBeginLine());
      assertEquals(999, simpleCharStream0.getLine());
      assertEquals(":", token1.toString());
      assertNotSame(stringReader1, stringReader2);
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(token1, token0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(4, simpleCharStream0.bufpos);
      assertEquals(999, token1.beginLine);
      assertEquals(89, token1.endColumn);
      assertEquals(89, token1.beginColumn);
      assertEquals(79, token1.kind);
      assertEquals(999, token1.endLine);
      assertNotNull(token1);
      
      // Undeclared exception!
      try { 
        xPathParserTokenManager0.ReInit(simpleCharStream0, 10);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 10. State unchanged.
         //
         verifyException("org.apache.commons.jxpath.ri.parser.XPathParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      StringReader stringReader0 = new StringReader("7m.");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader("7m.");
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotNull(stringReader1);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader1, (-1106), (-1106));
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(simpleCharStream0);
      
      simpleCharStream0.ReInit((Reader) stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertNotSame(stringReader1, stringReader0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(xPathParserTokenManager0);
      
      StringReader stringReader2 = new StringReader("w[>");
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertNotNull(stringReader2);
      
      SimpleCharStream simpleCharStream1 = new SimpleCharStream(stringReader2, (-4270), (-1106));
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertFalse(simpleCharStream1.equals((Object)simpleCharStream0));
      assertEquals(0, simpleCharStream1.getBeginColumn());
      assertEquals(0, simpleCharStream1.getBeginLine());
      assertEquals((-1), simpleCharStream1.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream1);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (-4270);
      intArray0[1] = (-1);
      intArray0[2] = (-1);
      simpleCharStream1.bufline = intArray0;
      assertEquals(0, simpleCharStream1.getBeginColumn());
      assertEquals((-4270), simpleCharStream1.getBeginLine());
      
      XPathParserTokenManager xPathParserTokenManager1 = new XPathParserTokenManager(simpleCharStream1);
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertFalse(simpleCharStream1.equals((Object)simpleCharStream0));
      assertFalse(xPathParserTokenManager1.equals((Object)xPathParserTokenManager0));
      assertEquals(0, simpleCharStream1.getBeginColumn());
      assertEquals((-4270), simpleCharStream1.getBeginLine());
      assertEquals((-1), simpleCharStream1.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(xPathParserTokenManager1);
      
      Token token0 = xPathParserTokenManager1.getNextToken();
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertFalse(simpleCharStream1.equals((Object)simpleCharStream0));
      assertFalse(xPathParserTokenManager1.equals((Object)xPathParserTokenManager0));
      assertEquals((-1106), simpleCharStream1.getEndColumn());
      assertEquals((-4270), simpleCharStream1.getLine());
      assertEquals((-1106), simpleCharStream1.getColumn());
      assertEquals((-4270), simpleCharStream1.getBeginLine());
      assertEquals((-1106), simpleCharStream1.getBeginColumn());
      assertEquals((-4270), simpleCharStream1.getEndLine());
      assertEquals("w", token0.toString());
      assertNotSame(stringReader2, stringReader0);
      assertNotSame(stringReader2, stringReader1);
      assertNotSame(simpleCharStream1, simpleCharStream0);
      assertNotSame(xPathParserTokenManager1, xPathParserTokenManager0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream1.bufpos);
      assertEquals(78, token0.kind);
      assertEquals((-1106), token0.beginColumn);
      assertEquals((-1106), token0.endColumn);
      assertEquals((-4270), token0.endLine);
      assertEquals((-4270), token0.beginLine);
      assertNotNull(token0);
      
      Token token1 = xPathParserTokenManager0.getNextToken();
      assertFalse(stringReader1.equals((Object)stringReader2));
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(simpleCharStream0.equals((Object)simpleCharStream1));
      assertFalse(xPathParserTokenManager0.equals((Object)xPathParserTokenManager1));
      assertFalse(token1.equals((Object)token0));
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getColumn());
      assertEquals("7", token1.toString());
      assertNotSame(stringReader1, stringReader2);
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(simpleCharStream0, simpleCharStream1);
      assertNotSame(xPathParserTokenManager0, xPathParserTokenManager1);
      assertNotSame(token1, token0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.bufpos);
      assertEquals(1, token1.endLine);
      assertEquals(1, token1.beginColumn);
      assertEquals(1, token1.endColumn);
      assertEquals(20, token1.kind);
      assertEquals(1, token1.beginLine);
      assertNotNull(token1);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(C9hb@|O");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getEndColumn());
      assertEquals("(", token0.toString());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.bufpos);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(80, token0.kind);
      assertEquals(1, token0.endLine);
      assertNotNull(token0);
      
      Token token1 = xPathParserTokenManager0.getNextToken();
      assertFalse(token1.equals((Object)token0));
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(5, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(2, simpleCharStream0.getBeginColumn());
      assertEquals(5, simpleCharStream0.getEndColumn());
      assertEquals("C9hb", token1.toString());
      assertNotSame(token1, token0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(4, simpleCharStream0.bufpos);
      assertEquals(2, token1.beginColumn);
      assertEquals(1, token1.endLine);
      assertEquals(5, token1.endColumn);
      assertEquals(1, token1.beginLine);
      assertEquals(78, token1.kind);
      assertNotNull(token1);
      
      Token token2 = xPathParserTokenManager0.getNextToken();
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
      assertEquals(6, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(6, simpleCharStream0.getEndColumn());
      assertEquals(6, simpleCharStream0.getBeginColumn());
      assertEquals("@", token2.toString());
      assertNotSame(token2, token0);
      assertNotSame(token2, token1);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(5, simpleCharStream0.bufpos);
      assertEquals(1, token2.endLine);
      assertEquals(86, token2.kind);
      assertEquals(1, token2.beginLine);
      assertEquals(6, token2.endColumn);
      assertEquals(6, token2.beginColumn);
      assertNotNull(token2);
      
      Token token3 = xPathParserTokenManager0.getNextToken();
      assertFalse(token3.equals((Object)token0));
      assertFalse(token3.equals((Object)token1));
      assertFalse(token3.equals((Object)token2));
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(7, simpleCharStream0.getEndColumn());
      assertEquals(7, simpleCharStream0.getBeginColumn());
      assertEquals(7, simpleCharStream0.getColumn());
      assertEquals("|", token3.toString());
      assertNotSame(token3, token0);
      assertNotSame(token3, token1);
      assertNotSame(token3, token2);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(6, simpleCharStream0.bufpos);
      assertEquals(1, token3.endLine);
      assertEquals(1, token3.beginLine);
      assertEquals(7, token3.endColumn);
      assertEquals(8, token3.kind);
      assertEquals(7, token3.beginColumn);
      assertNotNull(token3);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      StringReader stringReader0 = new StringReader("I7!&>nn8)");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 109, (-1148));
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(xPathParserTokenManager0);
      
      StringReader stringReader1 = new StringReader("2n>z@Gu[L");
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotNull(stringReader1);
      
      SimpleCharStream simpleCharStream1 = new SimpleCharStream(stringReader1, 29, 83);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(simpleCharStream1.equals((Object)simpleCharStream0));
      assertEquals(0, simpleCharStream1.getBeginColumn());
      assertEquals(0, simpleCharStream1.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream1.bufpos);
      assertNotNull(simpleCharStream1);
      
      XPathParserTokenManager xPathParserTokenManager1 = new XPathParserTokenManager(simpleCharStream1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(simpleCharStream1.equals((Object)simpleCharStream0));
      assertFalse(xPathParserTokenManager1.equals((Object)xPathParserTokenManager0));
      assertEquals(0, simpleCharStream1.getBeginColumn());
      assertEquals(0, simpleCharStream1.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream1.bufpos);
      assertNotNull(xPathParserTokenManager1);
      
      Token token0 = xPathParserTokenManager1.getNextToken();
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(simpleCharStream1.equals((Object)simpleCharStream0));
      assertFalse(xPathParserTokenManager1.equals((Object)xPathParserTokenManager0));
      assertEquals(83, simpleCharStream1.getColumn());
      assertEquals(29, simpleCharStream1.getEndLine());
      assertEquals(29, simpleCharStream1.getLine());
      assertEquals(29, simpleCharStream1.getBeginLine());
      assertEquals(83, simpleCharStream1.getEndColumn());
      assertEquals(83, simpleCharStream1.getBeginColumn());
      assertEquals("2", token0.toString());
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(simpleCharStream1, simpleCharStream0);
      assertNotSame(xPathParserTokenManager1, xPathParserTokenManager0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream1.bufpos);
      assertEquals(83, token0.beginColumn);
      assertEquals(20, token0.kind);
      assertEquals(83, token0.endColumn);
      assertEquals(29, token0.endLine);
      assertEquals(29, token0.beginLine);
      assertNotNull(token0);
      
      simpleCharStream1.ReInit((Reader) stringReader0);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(simpleCharStream1.equals((Object)simpleCharStream0));
      assertEquals(29, simpleCharStream1.getBeginLine());
      assertEquals(83, simpleCharStream1.getBeginColumn());
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(simpleCharStream1, simpleCharStream0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream1.bufpos);
      
      StringReader stringReader2 = new StringReader("\\");
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertNotNull(stringReader2);
      
      SimpleCharStream simpleCharStream2 = new SimpleCharStream(stringReader2);
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertFalse(simpleCharStream2.equals((Object)simpleCharStream1));
      assertFalse(simpleCharStream2.equals((Object)simpleCharStream0));
      assertEquals(0, simpleCharStream2.getBeginColumn());
      assertEquals(0, simpleCharStream2.getBeginLine());
      assertEquals((-1), simpleCharStream2.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream2);
      
      StringReader stringReader3 = new StringReader("`9=IU2\"hO}l3dnE");
      assertFalse(stringReader3.equals((Object)stringReader0));
      assertFalse(stringReader3.equals((Object)stringReader1));
      assertFalse(stringReader3.equals((Object)stringReader2));
      assertNotNull(stringReader3);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'p';
      charArray0[1] = 'i';
      charArray0[2] = 'r';
      charArray0[3] = 'p';
      charArray0[4] = 'O';
      int int0 = stringReader3.read(charArray0);
      assertEquals(5, int0);
      assertArrayEquals(new char[] {'`', '9', '=', 'I', 'U'}, charArray0);
      assertFalse(stringReader3.equals((Object)stringReader0));
      assertFalse(stringReader3.equals((Object)stringReader1));
      assertFalse(stringReader3.equals((Object)stringReader2));
      assertNotSame(stringReader3, stringReader0);
      assertNotSame(stringReader3, stringReader1);
      assertNotSame(stringReader3, stringReader2);
      assertEquals(5, charArray0.length);
      
      Token token1 = xPathParserTokenManager0.getNextToken();
      assertFalse(stringReader0.equals((Object)stringReader3));
      assertFalse(stringReader0.equals((Object)stringReader2));
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(simpleCharStream0.equals((Object)simpleCharStream2));
      assertFalse(simpleCharStream0.equals((Object)simpleCharStream1));
      assertFalse(token1.equals((Object)token0));
      assertFalse(xPathParserTokenManager0.equals((Object)xPathParserTokenManager1));
      assertEquals(109, simpleCharStream0.getEndLine());
      assertEquals((-1147), simpleCharStream0.getEndColumn());
      assertEquals((-1148), simpleCharStream0.getBeginColumn());
      assertEquals((-1147), simpleCharStream0.getColumn());
      assertEquals(109, simpleCharStream0.getBeginLine());
      assertEquals(109, simpleCharStream0.getLine());
      assertEquals("I7", token1.toString());
      assertNotSame(stringReader0, stringReader3);
      assertNotSame(stringReader0, stringReader2);
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(simpleCharStream0, simpleCharStream2);
      assertNotSame(simpleCharStream0, simpleCharStream1);
      assertNotSame(token1, token0);
      assertNotSame(xPathParserTokenManager0, xPathParserTokenManager1);
      assertEquals(1, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1148), token1.beginColumn);
      assertEquals((-1147), token1.endColumn);
      assertEquals(78, token1.kind);
      assertEquals(109, token1.endLine);
      assertEquals(109, token1.beginLine);
      assertNotNull(token1);
      
      XPathParserTokenManager xPathParserTokenManager2 = new XPathParserTokenManager(simpleCharStream0);
      assertFalse(stringReader0.equals((Object)stringReader3));
      assertFalse(stringReader0.equals((Object)stringReader2));
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(simpleCharStream0.equals((Object)simpleCharStream2));
      assertFalse(simpleCharStream0.equals((Object)simpleCharStream1));
      assertFalse(xPathParserTokenManager2.equals((Object)xPathParserTokenManager0));
      assertFalse(xPathParserTokenManager2.equals((Object)xPathParserTokenManager1));
      assertEquals(109, simpleCharStream0.getEndLine());
      assertEquals((-1147), simpleCharStream0.getEndColumn());
      assertEquals((-1148), simpleCharStream0.getBeginColumn());
      assertEquals((-1147), simpleCharStream0.getColumn());
      assertEquals(109, simpleCharStream0.getBeginLine());
      assertEquals(109, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(xPathParserTokenManager2);
      
      // Undeclared exception!
      try { 
        xPathParserTokenManager2.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 109, column -1145.  Encountered: \"&\" (38), after : \"!\"
         //
         verifyException("org.apache.commons.jxpath.ri.parser.XPathParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Error: Ignoring invalid lexical state : ");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, (-1283), 29);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(29, simpleCharStream0.getBeginColumn());
      assertEquals((-1283), simpleCharStream0.getLine());
      assertEquals(33, simpleCharStream0.getColumn());
      assertEquals((-1283), simpleCharStream0.getEndLine());
      assertEquals((-1283), simpleCharStream0.getBeginLine());
      assertEquals(33, simpleCharStream0.getEndColumn());
      assertEquals("Error", token0.toString());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(4, simpleCharStream0.bufpos);
      assertEquals((-1283), token0.beginLine);
      assertEquals((-1283), token0.endLine);
      assertEquals(33, token0.endColumn);
      assertEquals(78, token0.kind);
      assertEquals(29, token0.beginColumn);
      assertNotNull(token0);
      
      Token token1 = xPathParserTokenManager0.jjFillToken();
      assertFalse(token1.equals((Object)token0));
      assertEquals(29, simpleCharStream0.getBeginColumn());
      assertEquals((-1283), simpleCharStream0.getLine());
      assertEquals(33, simpleCharStream0.getColumn());
      assertEquals((-1283), simpleCharStream0.getEndLine());
      assertEquals((-1283), simpleCharStream0.getBeginLine());
      assertEquals(33, simpleCharStream0.getEndColumn());
      assertEquals("Error", token1.toString());
      assertNotSame(token1, token0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(4, simpleCharStream0.bufpos);
      assertEquals(33, token1.endColumn);
      assertEquals((-1283), token1.endLine);
      assertEquals(29, token1.beginColumn);
      assertEquals(78, token1.kind);
      assertEquals((-1283), token1.beginLine);
      assertNotNull(token1);
      
      String string0 = "ancestor::";
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream("ancestor::", "");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // 
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(C9h}b@|O");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(simpleCharStream0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)111;
      byteArray0[1] = (byte) (-24);
      byteArray0[2] = (byte)122;
      byteArray0[3] = (byte)106;
      byteArray0[4] = (byte)42;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertArrayEquals(new byte[] {(byte)111, (byte) (-24), (byte)122, (byte)106, (byte)42}, byteArray0);
      assertEquals(5, byteArrayInputStream0.available());
      assertEquals(5, byteArray0.length);
      assertNotNull(byteArrayInputStream0);
      
      simpleCharStream0.ReInit((InputStream) byteArrayInputStream0, (int) (byte) (-24), (-1767));
      assertArrayEquals(new byte[] {(byte)111, (byte) (-24), (byte)122, (byte)106, (byte)42}, byteArray0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(5, byteArrayInputStream0.available());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertEquals(5, byteArray0.length);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals((-24), simpleCharStream0.getLine());
      assertEquals((-24), simpleCharStream0.getBeginLine());
      assertEquals((-24), simpleCharStream0.getEndLine());
      assertEquals((-1767), simpleCharStream0.getBeginColumn());
      assertEquals((-1767), simpleCharStream0.getColumn());
      assertEquals((-1767), simpleCharStream0.getEndColumn());
      assertEquals("o", token0.toString());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.bufpos);
      assertEquals((-24), token0.endLine);
      assertEquals(78, token0.kind);
      assertEquals((-1767), token0.endColumn);
      assertEquals((-1767), token0.beginColumn);
      assertEquals((-24), token0.beginLine);
      assertNotNull(token0);
      
      // Undeclared exception!
      try { 
        xPathParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line -24, column -1766.  Encountered: \"\\ufffd\" (65533), after : \"\"
         //
         verifyException("org.apache.commons.jxpath.ri.parser.XPathParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      StringReader stringReader0 = new StringReader("U5yI:P`");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 11, 11);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream0);
      
      stringReader0.reset();
      simpleCharStream0.backup(0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getEndColumn());
      assertEquals(0, simpleCharStream0.getEndLine());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getLine());
      assertEquals(0, simpleCharStream0.getColumn());
      assertEquals(4095, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getEndColumn());
      assertEquals(0, simpleCharStream0.getEndLine());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getLine());
      assertEquals(0, simpleCharStream0.getColumn());
      assertEquals(4095, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(xPathParserTokenManager0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(xPathParserTokenManager0.debugStream, false);
      assertEquals(4095, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(mockPrintStream0);
      
      xPathParserTokenManager0.setDebugStream(mockPrintStream0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getEndColumn());
      assertEquals(0, simpleCharStream0.getEndLine());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getLine());
      assertEquals(0, simpleCharStream0.getColumn());
      assertEquals(4095, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      // Undeclared exception!
      try { 
        xPathParserTokenManager0.getNextToken();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4096
         //
         verifyException("org.apache.commons.jxpath.ri.parser.SimpleCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      StringReader stringReader0 = new StringReader("string-length");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(xPathParserTokenManager0);
      
      simpleCharStream0.backup(0);
      assertEquals(0, simpleCharStream0.getEndLine());
      assertEquals(0, simpleCharStream0.getEndColumn());
      assertEquals(0, simpleCharStream0.getColumn());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getLine());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(4095, simpleCharStream0.bufpos);
      
      // Undeclared exception!
      try { 
        xPathParserTokenManager0.getNextToken();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4096
         //
         verifyException("org.apache.commons.jxpath.ri.parser.SimpleCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      assertNotNull(pipedOutputStream0);
      
      pipedOutputStream0.flush();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = pipedInputStream0.markSupported();
      assertFalse(boolean0);
      assertEquals(0, pipedInputStream0.available());
      
      int int0 = pipedInputStream0.read(byteArray0, 0, 0);
      assertEquals(0, int0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, byteArray0.length);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(pipedInputStream0, 0, 0, 0);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream0);
      
      simpleCharStream0.ReInit((InputStream) pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      int int1 = stringReader0.read();
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      boolean boolean1 = stringReader0.ready();
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      pipedOutputStream0.write(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      
      simpleCharStream0.ReInit((Reader) stringReader0, 2371, 2048);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getColumn());
      assertEquals(0, simpleCharStream0.getLine());
      assertEquals(0, simpleCharStream0.getEndLine());
      assertEquals(0, simpleCharStream0.getEndColumn());
      assertEquals("", token0.toString());
      assertEquals(4095, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, token0.kind);
      assertEquals(0, token0.beginLine);
      assertEquals(0, token0.endLine);
      assertEquals(0, token0.beginColumn);
      assertEquals(0, token0.endColumn);
      assertNotNull(token0);
      
      xPathParserTokenManager0.jjmatchedKind = 0;
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getColumn());
      assertEquals(0, simpleCharStream0.getLine());
      assertEquals(0, simpleCharStream0.getEndLine());
      assertEquals(0, simpleCharStream0.getEndColumn());
      
      xPathParserTokenManager0.ReInit(simpleCharStream0);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getColumn());
      assertEquals(0, simpleCharStream0.getLine());
      assertEquals(0, simpleCharStream0.getEndLine());
      assertEquals(0, simpleCharStream0.getEndColumn());
      assertEquals(4095, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      PrintStream printStream0 = xPathParserTokenManager0.debugStream;
      assertNotNull(printStream0);
      
      xPathParserTokenManager0.setDebugStream(printStream0);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getColumn());
      assertEquals(0, simpleCharStream0.getLine());
      assertEquals(0, simpleCharStream0.getEndLine());
      assertEquals(0, simpleCharStream0.getEndColumn());
      assertEquals(4095, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      SimpleCharStream simpleCharStream1 = null;
      Token token1 = xPathParserTokenManager0.getNextToken();
      assertFalse(token1.equals((Object)token0));
      assertEquals(0, pipedInputStream0.available());
      assertEquals("", token1.toString());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getColumn());
      assertEquals(0, simpleCharStream0.getLine());
      assertEquals(0, simpleCharStream0.getEndLine());
      assertEquals(0, simpleCharStream0.getEndColumn());
      assertNotSame(token1, token0);
      assertEquals(0, token1.endLine);
      assertEquals(0, token1.endColumn);
      assertEquals(0, token1.kind);
      assertEquals(0, token1.beginColumn);
      assertEquals(0, token1.beginLine);
      assertEquals(4095, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(token1);
      
      // Undeclared exception!
      try { 
        xPathParserTokenManager0.ReInit((SimpleCharStream) null, 2371);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 2371. State unchanged.
         //
         verifyException("org.apache.commons.jxpath.ri.parser.XPathParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      StringReader stringReader0 = new StringReader("4)qzIBx|)#sxB");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals("4", token0.toString());
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.endLine);
      assertEquals(20, token0.kind);
      assertEquals(1, token0.endColumn);
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertFalse(fileDescriptor0.valid());
      assertNotNull(fileDescriptor0);
      
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      assertNotNull(mockFileInputStream0);
      
      int int0 = (-161);
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(mockFileInputStream0, (-161), (-161));
      assertFalse(fileDescriptor0.valid());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertFalse(fileDescriptor0.valid());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(xPathParserTokenManager0);
      
      StringReader stringReader0 = new StringReader("count");
      assertNotNull(stringReader0);
      
      simpleCharStream0.inputStream = (Reader) stringReader0;
      assertFalse(fileDescriptor0.valid());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertFalse(fileDescriptor0.valid());
      assertEquals((-161), simpleCharStream0.getBeginColumn());
      assertEquals((-161), simpleCharStream0.getBeginLine());
      assertEquals((-161), simpleCharStream0.getLine());
      assertEquals((-161), simpleCharStream0.getEndLine());
      assertEquals((-157), simpleCharStream0.getColumn());
      assertEquals((-157), simpleCharStream0.getEndColumn());
      assertEquals("count", token0.toString());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(4, simpleCharStream0.bufpos);
      assertEquals((-161), token0.beginLine);
      assertEquals((-161), token0.endLine);
      assertEquals(50, token0.kind);
      assertEquals((-161), token0.beginColumn);
      assertEquals((-157), token0.endColumn);
      assertNotNull(token0);
      
      try { 
        simpleCharStream0.readChar();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      StringReader stringReader0 = new StringReader("X> t");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, (-2383), 112);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(xPathParserTokenManager0);
      
      StringReader stringReader1 = new StringReader("X> t");
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotNull(stringReader1);
      
      simpleCharStream0.ReInit((Reader) stringReader0);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertNotSame(stringReader0, stringReader1);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      XPathParserTokenManager xPathParserTokenManager1 = new XPathParserTokenManager(simpleCharStream0);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(xPathParserTokenManager1.equals((Object)xPathParserTokenManager0));
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(xPathParserTokenManager1);
      
      Token token0 = xPathParserTokenManager1.getNextToken();
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(xPathParserTokenManager1.equals((Object)xPathParserTokenManager0));
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals("X", token0.toString());
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(xPathParserTokenManager1, xPathParserTokenManager0);
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(78, token0.kind);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.endColumn);
      assertNotNull(token0);
      
      Token token1 = xPathParserTokenManager0.getNextToken();
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(xPathParserTokenManager0.equals((Object)xPathParserTokenManager1));
      assertFalse(token1.equals((Object)token0));
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(2, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(2, simpleCharStream0.getBeginColumn());
      assertEquals(2, simpleCharStream0.getColumn());
      assertEquals(">", token1.toString());
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(xPathParserTokenManager0, xPathParserTokenManager1);
      assertNotSame(token1, token0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, simpleCharStream0.bufpos);
      assertEquals(2, token1.beginColumn);
      assertEquals(1, token1.endLine);
      assertEquals(2, token1.endColumn);
      assertEquals(15, token1.kind);
      assertEquals(1, token1.beginLine);
      assertNotNull(token1);
      
      Token token2 = xPathParserTokenManager1.getNextToken();
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(xPathParserTokenManager1.equals((Object)xPathParserTokenManager0));
      assertFalse(token2.equals((Object)token1));
      assertFalse(token2.equals((Object)token0));
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(4, simpleCharStream0.getEndColumn());
      assertEquals(4, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(4, simpleCharStream0.getColumn());
      assertEquals("t", token2.toString());
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(xPathParserTokenManager1, xPathParserTokenManager0);
      assertNotSame(token2, token1);
      assertNotSame(token2, token0);
      assertEquals(3, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, token2.endLine);
      assertEquals(4, token2.beginColumn);
      assertEquals(4, token2.endColumn);
      assertEquals(78, token2.kind);
      assertEquals(1, token2.beginLine);
      assertNotNull(token2);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      StringReader stringReader0 = new StringReader("4h6U");
      assertNotNull(stringReader0);
      
      int int0 = stringReader0.read();
      assertEquals(52, int0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(3, simpleCharStream0.getColumn());
      assertEquals(3, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals("h6U", token0.toString());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(2, simpleCharStream0.bufpos);
      assertEquals(1, token0.beginLine);
      assertEquals(78, token0.kind);
      assertEquals(3, token0.endColumn);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginColumn);
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      StringReader stringReader0 = new StringReader("..");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, (-403), 112);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(113, simpleCharStream0.getEndColumn());
      assertEquals((-403), simpleCharStream0.getLine());
      assertEquals((-403), simpleCharStream0.getBeginLine());
      assertEquals((-403), simpleCharStream0.getEndLine());
      assertEquals(112, simpleCharStream0.getBeginColumn());
      assertEquals(113, simpleCharStream0.getColumn());
      assertEquals("..", token0.toString());
      assertEquals(1, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-403), token0.beginLine);
      assertEquals((-403), token0.endLine);
      assertEquals(83, token0.kind);
      assertEquals(112, token0.beginColumn);
      assertEquals(113, token0.endColumn);
      assertNotNull(token0);
      
      StringReader stringReader1 = new StringReader("yy+?zvUrnmc\"Nd!=yC5");
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotNull(stringReader1);
      
      simpleCharStream0.ReInit((Reader) stringReader1);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertEquals((-403), simpleCharStream0.getBeginLine());
      assertEquals(112, simpleCharStream0.getBeginColumn());
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(stringReader1, stringReader0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      
      SimpleCharStream simpleCharStream1 = new SimpleCharStream(stringReader0);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(simpleCharStream1.equals((Object)simpleCharStream0));
      assertEquals(0, simpleCharStream1.getBeginLine());
      assertEquals(0, simpleCharStream1.getBeginColumn());
      assertEquals((-1), simpleCharStream1.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream1);
      
      char[] charArray0 = new char[0];
      int int0 = stringReader0.read(charArray0);
      assertEquals(0, int0);
      assertArrayEquals(new char[] {}, charArray0);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertNotSame(stringReader0, stringReader1);
      assertEquals(0, charArray0.length);
      
      Token token1 = xPathParserTokenManager0.getNextToken();
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(simpleCharStream0.equals((Object)simpleCharStream1));
      assertFalse(token1.equals((Object)token0));
      assertEquals(2, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(2, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals("yy", token1.toString());
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(simpleCharStream0, simpleCharStream1);
      assertNotSame(token1, token0);
      assertEquals(1, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, token1.endLine);
      assertEquals(1, token1.beginLine);
      assertEquals(2, token1.endColumn);
      assertEquals(1, token1.beginColumn);
      assertEquals(78, token1.kind);
      assertNotNull(token1);
      
      XPathParserTokenManager xPathParserTokenManager1 = new XPathParserTokenManager(simpleCharStream0);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(simpleCharStream0.equals((Object)simpleCharStream1));
      assertFalse(xPathParserTokenManager1.equals((Object)xPathParserTokenManager0));
      assertEquals(2, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(2, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(xPathParserTokenManager1);
      
      Token token2 = xPathParserTokenManager0.getNextToken();
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(simpleCharStream0.equals((Object)simpleCharStream1));
      assertFalse(xPathParserTokenManager0.equals((Object)xPathParserTokenManager1));
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
      assertEquals(3, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(3, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(3, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals("+", token2.toString());
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(simpleCharStream0, simpleCharStream1);
      assertNotSame(xPathParserTokenManager0, xPathParserTokenManager1);
      assertNotSame(token2, token0);
      assertNotSame(token2, token1);
      assertEquals(2, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(9, token2.kind);
      assertEquals(3, token2.endColumn);
      assertEquals(1, token2.endLine);
      assertEquals(3, token2.beginColumn);
      assertEquals(1, token2.beginLine);
      assertNotNull(token2);
      
      // Undeclared exception!
      try { 
        xPathParserTokenManager1.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 4.  Encountered: \"?\" (63), after : \"\"
         //
         verifyException("org.apache.commons.jxpath.ri.parser.XPathParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      StringReader stringReader0 = new StringReader("concat");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(6, simpleCharStream0.getEndColumn());
      assertEquals(6, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals("concat", token0.toString());
      assertEquals(5, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(6, token0.endColumn);
      assertEquals(57, token0.kind);
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      StringReader stringReader0 = new StringReader("..");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 112, 112);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(112, simpleCharStream0.getLine());
      assertEquals(112, simpleCharStream0.getBeginLine());
      assertEquals(113, simpleCharStream0.getColumn());
      assertEquals(112, simpleCharStream0.getBeginColumn());
      assertEquals(113, simpleCharStream0.getEndColumn());
      assertEquals(112, simpleCharStream0.getEndLine());
      assertEquals("..", token0.toString());
      assertEquals(1, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(112, token0.beginColumn);
      assertEquals(112, token0.endLine);
      assertEquals(112, token0.beginLine);
      assertEquals(83, token0.kind);
      assertEquals(113, token0.endColumn);
      assertNotNull(token0);
      
      Token token1 = xPathParserTokenManager0.jjFillToken();
      assertFalse(token1.equals((Object)token0));
      assertEquals(112, simpleCharStream0.getLine());
      assertEquals(112, simpleCharStream0.getBeginLine());
      assertEquals(113, simpleCharStream0.getColumn());
      assertEquals(112, simpleCharStream0.getBeginColumn());
      assertEquals(113, simpleCharStream0.getEndColumn());
      assertEquals(112, simpleCharStream0.getEndLine());
      assertEquals("..", token1.toString());
      assertNotSame(token1, token0);
      assertEquals(1, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(112, token1.beginColumn);
      assertEquals(112, token1.beginLine);
      assertEquals(112, token1.endLine);
      assertEquals(83, token1.kind);
      assertEquals(113, token1.endColumn);
      assertNotNull(token1);
      
      String string0 = null;
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream("..", "..");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // ..
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Error: Ignoring invalid lexical state : ");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, (-1283), (-1283));
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream0);
      
      stringReader0.reset();
      simpleCharStream0.backup((-1283));
      assertEquals(0, simpleCharStream0.getEndLine());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getEndColumn());
      assertEquals(0, simpleCharStream0.getLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1282, simpleCharStream0.bufpos);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getEndLine());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getEndColumn());
      assertEquals(0, simpleCharStream0.getLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1282, simpleCharStream0.bufpos);
      assertNotNull(xPathParserTokenManager0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(xPathParserTokenManager0.debugStream, false);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1282, simpleCharStream0.bufpos);
      assertNotNull(mockPrintStream0);
      
      xPathParserTokenManager0.setDebugStream(mockPrintStream0);
      assertEquals(0, simpleCharStream0.getEndLine());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getEndColumn());
      assertEquals(0, simpleCharStream0.getLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1282, simpleCharStream0.bufpos);
      
      // Undeclared exception!
      try { 
        xPathParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line -1283, column -1282.  Encountered: <EOF> after : \"\"
         //
         verifyException("org.apache.commons.jxpath.ri.parser.XPathParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      assertNotNull(pipedOutputStream0);
      
      pipedOutputStream0.flush();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = pipedInputStream0.markSupported();
      assertFalse(boolean0);
      assertEquals(0, pipedInputStream0.available());
      
      int int0 = pipedInputStream0.read(byteArray0, 0, 0);
      assertEquals(0, int0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, byteArray0.length);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(pipedInputStream0, 0, 0, 0);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(simpleCharStream0);
      
      simpleCharStream0.ReInit((InputStream) pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      int int1 = 2371;
      int int2 = stringReader0.read();
      assertEquals((-1), int2);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      
      boolean boolean1 = stringReader0.ready();
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      pipedOutputStream0.write(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      
      simpleCharStream0.ReInit((Reader) stringReader0, 2371, 2048);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, simpleCharStream0.getLine());
      assertEquals(0, simpleCharStream0.getEndLine());
      assertEquals(0, simpleCharStream0.getEndColumn());
      assertEquals(0, simpleCharStream0.getColumn());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals("", token0.toString());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(4095, simpleCharStream0.bufpos);
      assertEquals(0, token0.endLine);
      assertEquals(0, token0.endColumn);
      assertEquals(0, token0.beginColumn);
      assertEquals(0, token0.kind);
      assertEquals(0, token0.beginLine);
      assertNotNull(token0);
      
      xPathParserTokenManager0.jjmatchedKind = 0;
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, simpleCharStream0.getLine());
      assertEquals(0, simpleCharStream0.getEndLine());
      assertEquals(0, simpleCharStream0.getEndColumn());
      assertEquals(0, simpleCharStream0.getColumn());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      
      // Undeclared exception!
      try { 
        xPathParserTokenManager0.ReInit(simpleCharStream0, 37);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 37. State unchanged.
         //
         verifyException("org.apache.commons.jxpath.ri.parser.XPathParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      StringReader stringReader0 = new StringReader("%0 IIlp");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(xPathParserTokenManager0);
      
      // Undeclared exception!
      try { 
        xPathParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 1.  Encountered: \"%\" (37), after : \"\"
         //
         verifyException("org.apache.commons.jxpath.ri.parser.XPathParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      StringReader stringReader0 = new StringReader("yE5C>, 8");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)116;
      byteArray0[1] = (byte)104;
      byteArray0[2] = (byte)83;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertArrayEquals(new byte[] {(byte)116, (byte)104, (byte)83, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(7, byteArrayInputStream0.available());
      assertEquals(7, byteArray0.length);
      assertNotNull(byteArrayInputStream0);
      
      SimpleCharStream simpleCharStream1 = new SimpleCharStream(byteArrayInputStream0, 1638, 4390, (byte)83);
      assertArrayEquals(new byte[] {(byte)116, (byte)104, (byte)83, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(simpleCharStream1.equals((Object)simpleCharStream0));
      assertEquals(7, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream1.getBeginColumn());
      assertEquals(0, simpleCharStream1.getBeginLine());
      assertEquals((-1), simpleCharStream1.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(7, byteArray0.length);
      assertNotNull(simpleCharStream1);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream1);
      assertArrayEquals(new byte[] {(byte)116, (byte)104, (byte)83, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(simpleCharStream1.equals((Object)simpleCharStream0));
      assertEquals(7, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream1.getBeginColumn());
      assertEquals(0, simpleCharStream1.getBeginLine());
      assertEquals((-1), simpleCharStream1.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(7, byteArray0.length);
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertArrayEquals(new byte[] {(byte)116, (byte)104, (byte)83, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(simpleCharStream1.equals((Object)simpleCharStream0));
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(4392, simpleCharStream1.getEndColumn());
      assertEquals(1638, simpleCharStream1.getEndLine());
      assertEquals(1638, simpleCharStream1.getBeginLine());
      assertEquals(1638, simpleCharStream1.getLine());
      assertEquals(4392, simpleCharStream1.getColumn());
      assertEquals(4390, simpleCharStream1.getBeginColumn());
      assertEquals("thS", token0.toString());
      assertNotSame(simpleCharStream1, simpleCharStream0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(2, simpleCharStream1.bufpos);
      assertEquals(78, token0.kind);
      assertEquals(4392, token0.endColumn);
      assertEquals(1638, token0.endLine);
      assertEquals(4390, token0.beginColumn);
      assertEquals(1638, token0.beginLine);
      assertEquals(7, byteArray0.length);
      assertNotNull(token0);
      
      // Undeclared exception!
      try { 
        xPathParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1638, column 4393.  Encountered: \"\" (0), after : \"\"
         //
         verifyException("org.apache.commons.jxpath.ri.parser.XPathParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertFalse(fileDescriptor0.valid());
      assertNotNull(fileDescriptor0);
      
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      assertNotNull(mockFileInputStream0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(mockFileInputStream0, 1892, 1892);
      assertFalse(fileDescriptor0.valid());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertFalse(fileDescriptor0.valid());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(xPathParserTokenManager0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)66;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)114;
      byteArray0[5] = (byte)89;
      byteArray0[6] = (byte) (-59);
      int int0 = mockFileInputStream0.read(byteArray0, 0, 0);
      assertEquals(0, int0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-1), (byte)66, (byte)0, (byte)114, (byte)89, (byte) (-59)}, byteArray0);
      assertFalse(fileDescriptor0.valid());
      assertEquals(7, byteArray0.length);
      
      xPathParserTokenManager0.ReInit(simpleCharStream0);
      assertFalse(fileDescriptor0.valid());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      
      // Undeclared exception!
      try { 
        xPathParserTokenManager0.ReInit(simpleCharStream0, (-664));
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : -664. State unchanged.
         //
         verifyException("org.apache.commons.jxpath.ri.parser.XPathParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(C9h}b@|O");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals("(", token0.toString());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.bufpos);
      assertEquals(1, token0.beginLine);
      assertEquals(80, token0.kind);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.endLine);
      assertNotNull(token0);
      
      Token token1 = xPathParserTokenManager0.getNextToken();
      assertFalse(token1.equals((Object)token0));
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(4, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(2, simpleCharStream0.getBeginColumn());
      assertEquals(4, simpleCharStream0.getColumn());
      assertEquals("C9h", token1.toString());
      assertNotSame(token1, token0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(3, simpleCharStream0.bufpos);
      assertEquals(4, token1.endColumn);
      assertEquals(78, token1.kind);
      assertEquals(2, token1.beginColumn);
      assertEquals(1, token1.endLine);
      assertEquals(1, token1.beginLine);
      assertNotNull(token1);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      String string0 = "div";
      StringReader stringReader0 = new StringReader("div");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 72, 72);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(72, simpleCharStream0.getBeginLine());
      assertEquals(72, simpleCharStream0.getBeginColumn());
      assertEquals(72, simpleCharStream0.getLine());
      assertEquals(74, simpleCharStream0.getEndColumn());
      assertEquals(72, simpleCharStream0.getEndLine());
      assertEquals(74, simpleCharStream0.getColumn());
      assertEquals("div", token0.toString());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(2, simpleCharStream0.bufpos);
      assertEquals(30, token0.kind);
      assertEquals(74, token0.endColumn);
      assertEquals(72, token0.beginColumn);
      assertEquals(72, token0.endLine);
      assertEquals(72, token0.beginLine);
      assertNotNull(token0);
      
      Token token1 = xPathParserTokenManager0.jjFillToken();
      assertFalse(token1.equals((Object)token0));
      assertEquals(72, simpleCharStream0.getBeginLine());
      assertEquals(72, simpleCharStream0.getBeginColumn());
      assertEquals(72, simpleCharStream0.getLine());
      assertEquals(74, simpleCharStream0.getEndColumn());
      assertEquals(72, simpleCharStream0.getEndLine());
      assertEquals(74, simpleCharStream0.getColumn());
      assertEquals("div", token1.toString());
      assertNotSame(token1, token0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(2, simpleCharStream0.bufpos);
      assertEquals(30, token1.kind);
      assertEquals(74, token1.endColumn);
      assertEquals(72, token1.endLine);
      assertEquals(72, token1.beginColumn);
      assertEquals(72, token1.beginLine);
      assertNotNull(token1);
      
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream("div", "div");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // div
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertFalse(fileDescriptor0.valid());
      assertNotNull(fileDescriptor0);
      
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      assertNotNull(mockFileInputStream0);
      
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(mockFileInputStream0);
      assertFalse(fileDescriptor0.valid());
      assertNotNull(pushbackInputStream0);
      
      mockFileInputStream0.mark(53);
      assertFalse(fileDescriptor0.valid());
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(pushbackInputStream0, 129, 73, 20);
      assertFalse(fileDescriptor0.valid());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertFalse(fileDescriptor0.valid());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(xPathParserTokenManager0);
      
      xPathParserTokenManager0.ReInit(simpleCharStream0, 0);
      assertFalse(fileDescriptor0.valid());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      
      xPathParserTokenManager0.ReInit(simpleCharStream0);
      assertFalse(fileDescriptor0.valid());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      StringReader stringReader0 = new StringReader("!=");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(2, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(2, simpleCharStream0.getColumn());
      assertEquals("!=", token0.toString());
      assertEquals(1, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(2, token0.endColumn);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
      assertEquals(12, token0.kind);
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      StringReader stringReader0 = new StringReader("/");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 1440, 1440, 46);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(1440, simpleCharStream0.getColumn());
      assertEquals(1440, simpleCharStream0.getLine());
      assertEquals(1440, simpleCharStream0.getBeginLine());
      assertEquals(1440, simpleCharStream0.getBeginColumn());
      assertEquals(1440, simpleCharStream0.getEndLine());
      assertEquals(1440, simpleCharStream0.getEndColumn());
      assertEquals("/", token0.toString());
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1440, token0.endColumn);
      assertEquals(1440, token0.beginColumn);
      assertEquals(6, token0.kind);
      assertEquals(1440, token0.endLine);
      assertEquals(1440, token0.beginLine);
      assertNotNull(token0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(bufferedInputStream0);
      
      int int0 = 91;
      int int1 = 527;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-87);
      try { 
        pipedInputStream0.read(byteArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      StringReader stringReader0 = new StringReader("strin9-length");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(13, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(13, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals("strin9-length", token0.toString());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(12, simpleCharStream0.bufpos);
      assertEquals(78, token0.kind);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
      assertEquals(13, token0.endColumn);
      assertEquals(1, token0.beginColumn);
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      StringReader stringReader0 = new StringReader("EovHP_{tHNLF|(~wu");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream0);
      
      StringReader stringReader1 = new StringReader("EovHP_{tHNLF|(~wu");
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotNull(stringReader1);
      
      SimpleCharStream simpleCharStream1 = new SimpleCharStream(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(simpleCharStream1.equals((Object)simpleCharStream0));
      assertEquals(0, simpleCharStream1.getBeginColumn());
      assertEquals(0, simpleCharStream1.getBeginLine());
      assertEquals((-1), simpleCharStream1.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream1);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(simpleCharStream0.equals((Object)simpleCharStream1));
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(simpleCharStream0.equals((Object)simpleCharStream1));
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(6, simpleCharStream0.getEndColumn());
      assertEquals(6, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals("EovHP_", token0.toString());
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(simpleCharStream0, simpleCharStream1);
      assertEquals(5, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(78, token0.kind);
      assertEquals(6, token0.endColumn);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertNotNull(token0);
      
      // Undeclared exception!
      try { 
        xPathParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 7.  Encountered: \"{\" (123), after : \"\"
         //
         verifyException("org.apache.commons.jxpath.ri.parser.XPathParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      StringReader stringReader0 = new StringReader("2JxZqO;:'");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getEndColumn());
      assertEquals("2", token0.toString());
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, token0.endLine);
      assertEquals(20, token0.kind);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.endColumn);
      assertNotNull(token0);
      
      Token token1 = xPathParserTokenManager0.getNextToken();
      assertFalse(token1.equals((Object)token0));
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(6, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(6, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(2, simpleCharStream0.getBeginColumn());
      assertEquals("JxZqO", token1.toString());
      assertNotSame(token1, token0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(5, simpleCharStream0.bufpos);
      assertEquals(6, token1.endColumn);
      assertEquals(1, token1.endLine);
      assertEquals(78, token1.kind);
      assertEquals(1, token1.beginLine);
      assertEquals(2, token1.beginColumn);
      assertNotNull(token1);
      
      // Undeclared exception!
      try { 
        xPathParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 7.  Encountered: \";\" (59), after : \"\"
         //
         verifyException("org.apache.commons.jxpath.ri.parser.XPathParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      StringReader stringReader0 = new StringReader("..");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader("\"<=\"");
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotNull(stringReader1);
      
      StringReader stringReader2 = new StringReader("^.bq$H[5UQ#gjmCx");
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertNotNull(stringReader2);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader2));
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertFalse(stringReader1.equals((Object)stringReader2));
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(xPathParserTokenManager0);
      
      boolean boolean0 = stringReader1.ready();
      assertTrue(boolean0);
      assertFalse(stringReader1.equals((Object)stringReader2));
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotSame(stringReader1, stringReader2);
      assertNotSame(stringReader1, stringReader0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertFalse(stringReader1.equals((Object)stringReader2));
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(4, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(4, simpleCharStream0.getColumn());
      assertEquals("\"<=\"", token0.toString());
      assertNotSame(stringReader1, stringReader2);
      assertNotSame(stringReader1, stringReader0);
      assertEquals(3, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, token0.endLine);
      assertEquals(4, token0.endColumn);
      assertEquals(18, token0.kind);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.beginLine);
      assertNotNull(token0);
      
      Token token1 = xPathParserTokenManager0.getNextToken();
      assertFalse(stringReader1.equals((Object)stringReader2));
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(token1.equals((Object)token0));
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(4, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(4, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(4, simpleCharStream0.getColumn());
      assertEquals("", token1.toString());
      assertNotSame(stringReader1, stringReader2);
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(token1, token0);
      assertEquals(3, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, token1.beginLine);
      assertEquals(0, token1.kind);
      assertEquals(4, token1.beginColumn);
      assertEquals(1, token1.endLine);
      assertEquals(4, token1.endColumn);
      assertNotNull(token1);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      StringReader stringReader0 = new StringReader("ZugQ93#A?");
      assertNotNull(stringReader0);
      
      String string0 = "4@r1!#%R)U";
      StringReader stringReader1 = new StringReader("4@r1!#%R)U");
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotNull(stringReader1);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader1, 100, 2340);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertEquals(2340, simpleCharStream0.getBeginColumn());
      assertEquals(100, simpleCharStream0.getLine());
      assertEquals(2340, simpleCharStream0.getEndColumn());
      assertEquals(2340, simpleCharStream0.getColumn());
      assertEquals(100, simpleCharStream0.getEndLine());
      assertEquals(100, simpleCharStream0.getBeginLine());
      assertEquals("4", token0.toString());
      assertNotSame(stringReader1, stringReader0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.bufpos);
      assertEquals(100, token0.endLine);
      assertEquals(2340, token0.beginColumn);
      assertEquals(20, token0.kind);
      assertEquals(100, token0.beginLine);
      assertEquals(2340, token0.endColumn);
      assertNotNull(token0);
      
      Token token1 = xPathParserTokenManager0.jjFillToken();
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(token1.equals((Object)token0));
      assertEquals(2340, simpleCharStream0.getBeginColumn());
      assertEquals(100, simpleCharStream0.getLine());
      assertEquals(2340, simpleCharStream0.getEndColumn());
      assertEquals(2340, simpleCharStream0.getColumn());
      assertEquals(100, simpleCharStream0.getEndLine());
      assertEquals(100, simpleCharStream0.getBeginLine());
      assertEquals("4", token1.toString());
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(token1, token0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.bufpos);
      assertEquals(100, token1.beginLine);
      assertEquals(100, token1.endLine);
      assertEquals(20, token1.kind);
      assertEquals(2340, token1.beginColumn);
      assertEquals(2340, token1.endColumn);
      assertNotNull(token1);
      
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream("4", "");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // 
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      StringReader stringReader0 = new StringReader("org.apache.commons.jxpath.ri.parser.Token");
      assertNotNull(stringReader0);
      
      int int0 = stringReader0.read();
      assertEquals(111, int0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(40, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(40, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals("rg.apache.commons.jxpath.ri.parser.Token", token0.toString());
      assertEquals(39, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
      assertEquals(78, token0.kind);
      assertEquals(40, token0.endColumn);
      assertEquals(1, token0.beginColumn);
      assertNotNull(token0);
      
      Token token1 = xPathParserTokenManager0.getNextToken();
      assertFalse(token1.equals((Object)token0));
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(40, simpleCharStream0.getBeginColumn());
      assertEquals(40, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(40, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals("", token1.toString());
      assertNotSame(token1, token0);
      assertEquals(39, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, token1.beginLine);
      assertEquals(0, token1.kind);
      assertEquals(40, token1.beginColumn);
      assertEquals(1, token1.endLine);
      assertEquals(40, token1.endColumn);
      assertNotNull(token1);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      StringReader stringReader0 = new StringReader("normalize-space");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(xPathParserTokenManager0);
      
      xPathParserTokenManager0.jjmatchedKind = (-1);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      
      XPathParserTokenManager xPathParserTokenManager1 = new XPathParserTokenManager(simpleCharStream0);
      assertFalse(xPathParserTokenManager1.equals((Object)xPathParserTokenManager0));
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(xPathParserTokenManager1);
      
      Token token0 = xPathParserTokenManager1.getNextToken();
      assertFalse(xPathParserTokenManager1.equals((Object)xPathParserTokenManager0));
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(15, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(15, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals("normalize-space", token0.toString());
      assertNotSame(xPathParserTokenManager1, xPathParserTokenManager0);
      assertEquals(14, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, token0.endLine);
      assertEquals(15, token0.endColumn);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(64, token0.kind);
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      StringReader stringReader0 = new StringReader("GX4U>n[U8 1j");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 75, (-1518));
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0, 0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(75, simpleCharStream0.getLine());
      assertEquals(75, simpleCharStream0.getBeginLine());
      assertEquals((-1518), simpleCharStream0.getBeginColumn());
      assertEquals(75, simpleCharStream0.getEndLine());
      assertEquals((-1517), simpleCharStream0.getColumn());
      assertEquals((-1517), simpleCharStream0.getEndColumn());
      assertEquals("GX", token0.toString());
      assertEquals(1, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1517), token0.endColumn);
      assertEquals((-1518), token0.beginColumn);
      assertEquals(78, token0.kind);
      assertEquals(75, token0.endLine);
      assertEquals(75, token0.beginLine);
      assertNotNull(token0);
      
      Token token1 = xPathParserTokenManager0.jjFillToken();
      assertFalse(token1.equals((Object)token0));
      assertEquals(75, simpleCharStream0.getLine());
      assertEquals(75, simpleCharStream0.getBeginLine());
      assertEquals((-1518), simpleCharStream0.getBeginColumn());
      assertEquals(75, simpleCharStream0.getEndLine());
      assertEquals((-1517), simpleCharStream0.getColumn());
      assertEquals((-1517), simpleCharStream0.getEndColumn());
      assertEquals("GX", token1.toString());
      assertNotSame(token1, token0);
      assertEquals(1, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(75, token1.endLine);
      assertEquals(78, token1.kind);
      assertEquals((-1518), token1.beginColumn);
      assertEquals((-1517), token1.endColumn);
      assertEquals(75, token1.beginLine);
      assertNotNull(token1);
      
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream("GX", "GX");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // GX
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      StringReader stringReader0 = new StringReader("T1_Fx0H@C71|\"(&");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 126, 113);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(126, simpleCharStream0.getEndLine());
      assertEquals(119, simpleCharStream0.getEndColumn());
      assertEquals(126, simpleCharStream0.getLine());
      assertEquals(113, simpleCharStream0.getBeginColumn());
      assertEquals(119, simpleCharStream0.getColumn());
      assertEquals(126, simpleCharStream0.getBeginLine());
      assertEquals("T1_Fx0H", token0.toString());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(6, simpleCharStream0.bufpos);
      assertEquals(78, token0.kind);
      assertEquals(126, token0.beginLine);
      assertEquals(119, token0.endColumn);
      assertEquals(126, token0.endLine);
      assertEquals(113, token0.beginColumn);
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(C9hb@|O");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(xPathParserTokenManager0);
      
      xPathParserTokenManager0.jjround = (-1);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals("(", token0.toString());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.bufpos);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
      assertEquals(80, token0.kind);
      assertNotNull(token0);
      
      Token token1 = xPathParserTokenManager0.getNextToken();
      assertFalse(token1.equals((Object)token0));
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(2, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(2, simpleCharStream0.getBeginColumn());
      assertEquals(2, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals("C", token1.toString());
      assertNotSame(token1, token0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, simpleCharStream0.bufpos);
      assertEquals(78, token1.kind);
      assertEquals(1, token1.beginLine);
      assertEquals(1, token1.endLine);
      assertEquals(2, token1.endColumn);
      assertEquals(2, token1.beginColumn);
      assertNotNull(token1);
      
      Token token2 = xPathParserTokenManager0.getNextToken();
      assertFalse(token2.equals((Object)token1));
      assertFalse(token2.equals((Object)token0));
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(3, simpleCharStream0.getColumn());
      assertEquals(3, simpleCharStream0.getBeginColumn());
      assertEquals(3, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals("9", token2.toString());
      assertNotSame(token2, token1);
      assertNotSame(token2, token0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(2, simpleCharStream0.bufpos);
      assertEquals(20, token2.kind);
      assertEquals(1, token2.endLine);
      assertEquals(1, token2.beginLine);
      assertEquals(3, token2.beginColumn);
      assertEquals(3, token2.endColumn);
      assertNotNull(token2);
      
      Token token3 = xPathParserTokenManager0.getNextToken();
      assertFalse(token3.equals((Object)token1));
      assertFalse(token3.equals((Object)token0));
      assertFalse(token3.equals((Object)token2));
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(5, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(4, simpleCharStream0.getBeginColumn());
      assertEquals(5, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals("hb", token3.toString());
      assertNotSame(token3, token1);
      assertNotSame(token3, token0);
      assertNotSame(token3, token2);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(4, simpleCharStream0.bufpos);
      assertEquals(78, token3.kind);
      assertEquals(5, token3.endColumn);
      assertEquals(1, token3.endLine);
      assertEquals(4, token3.beginColumn);
      assertEquals(1, token3.beginLine);
      assertNotNull(token3);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      StringReader stringReader0 = new StringReader("i_N+dw?Bu^+D");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(simpleCharStream0);
      
      SimpleCharStream simpleCharStream1 = new SimpleCharStream(stringReader0);
      assertFalse(simpleCharStream1.equals((Object)simpleCharStream0));
      assertEquals(0, simpleCharStream1.getBeginColumn());
      assertEquals(0, simpleCharStream1.getBeginLine());
      assertEquals((-1), simpleCharStream1.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream1);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertFalse(simpleCharStream0.equals((Object)simpleCharStream1));
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertFalse(simpleCharStream0.equals((Object)simpleCharStream1));
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(3, simpleCharStream0.getEndColumn());
      assertEquals(3, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals("i_N", token0.toString());
      assertNotSame(simpleCharStream0, simpleCharStream1);
      assertEquals(2, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(3, token0.endColumn);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(78, token0.kind);
      assertNotNull(token0);
      
      Token token1 = xPathParserTokenManager0.getNextToken();
      assertFalse(simpleCharStream0.equals((Object)simpleCharStream1));
      assertFalse(token1.equals((Object)token0));
      assertEquals(4, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(4, simpleCharStream0.getEndColumn());
      assertEquals(4, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals("+", token1.toString());
      assertNotSame(simpleCharStream0, simpleCharStream1);
      assertNotSame(token1, token0);
      assertEquals(3, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, token1.beginLine);
      assertEquals(4, token1.endColumn);
      assertEquals(4, token1.beginColumn);
      assertEquals(9, token1.kind);
      assertEquals(1, token1.endLine);
      assertNotNull(token1);
      
      Token token2 = xPathParserTokenManager0.getNextToken();
      assertFalse(simpleCharStream0.equals((Object)simpleCharStream1));
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
      assertEquals(5, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(6, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(6, simpleCharStream0.getEndColumn());
      assertEquals("dw", token2.toString());
      assertNotSame(simpleCharStream0, simpleCharStream1);
      assertNotSame(token2, token0);
      assertNotSame(token2, token1);
      assertEquals(5, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, token2.endLine);
      assertEquals(78, token2.kind);
      assertEquals(1, token2.beginLine);
      assertEquals(6, token2.endColumn);
      assertEquals(5, token2.beginColumn);
      assertNotNull(token2);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "(C9hb@|O");
      assertFalse(boolean0);
      
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader("child::");
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotNull(stringReader1);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(7, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(7, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals("child::", token0.toString());
      assertNotSame(stringReader1, stringReader0);
      assertEquals(6, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(36, token0.kind);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(7, token0.endColumn);
      assertNotNull(token0);
      
      Token token1 = xPathParserTokenManager0.jjFillToken();
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(token1.equals((Object)token0));
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(7, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(7, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals("child::", token1.toString());
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(token1, token0);
      assertEquals(6, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(7, token1.endColumn);
      assertEquals(36, token1.kind);
      assertEquals(1, token1.beginColumn);
      assertEquals(1, token1.endLine);
      assertEquals(1, token1.beginLine);
      assertNotNull(token1);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      StringReader stringReader0 = new StringReader("U5yI:P`");
      assertNotNull(stringReader0);
      
      int int0 = stringReader0.read();
      assertEquals(85, int0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(simpleCharStream0);
      
      StringReader stringReader1 = new StringReader("51G72GL/");
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotNull(stringReader1);
      
      SimpleCharStream simpleCharStream1 = new SimpleCharStream(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(simpleCharStream1.equals((Object)simpleCharStream0));
      assertEquals(0, simpleCharStream1.getBeginLine());
      assertEquals(0, simpleCharStream1.getBeginColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream1.bufpos);
      assertNotNull(simpleCharStream1);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(simpleCharStream1.equals((Object)simpleCharStream0));
      assertEquals(0, simpleCharStream1.getBeginLine());
      assertEquals(0, simpleCharStream1.getBeginColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream1.bufpos);
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(simpleCharStream1.equals((Object)simpleCharStream0));
      assertEquals(1, simpleCharStream1.getLine());
      assertEquals(2, simpleCharStream1.getColumn());
      assertEquals(1, simpleCharStream1.getBeginLine());
      assertEquals(2, simpleCharStream1.getEndColumn());
      assertEquals(1, simpleCharStream1.getEndLine());
      assertEquals(1, simpleCharStream1.getBeginColumn());
      assertEquals("51", token0.toString());
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(simpleCharStream1, simpleCharStream0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, simpleCharStream1.bufpos);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.endLine);
      assertEquals(20, token0.kind);
      assertEquals(2, token0.endColumn);
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      StringReader stringReader0 = new StringReader("U5yI:P`");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader("mNsB,@H_s");
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotNull(stringReader1);
      
      StringReader stringReader2 = new StringReader("mNsB,@H_s");
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertNotNull(stringReader2);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader2, 8, 112);
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(xPathParserTokenManager0);
      
      XPathParserTokenManager xPathParserTokenManager1 = new XPathParserTokenManager(simpleCharStream0);
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertFalse(xPathParserTokenManager1.equals((Object)xPathParserTokenManager0));
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(xPathParserTokenManager1);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertFalse(xPathParserTokenManager0.equals((Object)xPathParserTokenManager1));
      assertEquals(112, simpleCharStream0.getBeginColumn());
      assertEquals(8, simpleCharStream0.getEndLine());
      assertEquals(8, simpleCharStream0.getBeginLine());
      assertEquals(115, simpleCharStream0.getColumn());
      assertEquals(8, simpleCharStream0.getLine());
      assertEquals(115, simpleCharStream0.getEndColumn());
      assertEquals("mNsB", token0.toString());
      assertNotSame(stringReader2, stringReader0);
      assertNotSame(stringReader2, stringReader1);
      assertNotSame(xPathParserTokenManager0, xPathParserTokenManager1);
      assertEquals(3, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(78, token0.kind);
      assertEquals(112, token0.beginColumn);
      assertEquals(8, token0.beginLine);
      assertEquals(8, token0.endLine);
      assertEquals(115, token0.endColumn);
      assertNotNull(token0);
      
      Token token1 = xPathParserTokenManager1.getNextToken();
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertFalse(xPathParserTokenManager1.equals((Object)xPathParserTokenManager0));
      assertFalse(token1.equals((Object)token0));
      assertEquals(8, simpleCharStream0.getEndLine());
      assertEquals(8, simpleCharStream0.getBeginLine());
      assertEquals(116, simpleCharStream0.getColumn());
      assertEquals(8, simpleCharStream0.getLine());
      assertEquals(116, simpleCharStream0.getBeginColumn());
      assertEquals(116, simpleCharStream0.getEndColumn());
      assertEquals(",", token1.toString());
      assertNotSame(stringReader2, stringReader0);
      assertNotSame(stringReader2, stringReader1);
      assertNotSame(xPathParserTokenManager1, xPathParserTokenManager0);
      assertNotSame(token1, token0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(4, simpleCharStream0.bufpos);
      assertEquals(116, token1.endColumn);
      assertEquals(116, token1.beginColumn);
      assertEquals(8, token1.endLine);
      assertEquals(8, token1.beginLine);
      assertEquals(87, token1.kind);
      assertNotNull(token1);
      
      Token token2 = xPathParserTokenManager1.getNextToken();
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertFalse(xPathParserTokenManager1.equals((Object)xPathParserTokenManager0));
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
      assertEquals(8, simpleCharStream0.getEndLine());
      assertEquals(8, simpleCharStream0.getBeginLine());
      assertEquals(8, simpleCharStream0.getLine());
      assertEquals(117, simpleCharStream0.getBeginColumn());
      assertEquals(117, simpleCharStream0.getColumn());
      assertEquals(117, simpleCharStream0.getEndColumn());
      assertEquals("@", token2.toString());
      assertNotSame(stringReader2, stringReader0);
      assertNotSame(stringReader2, stringReader1);
      assertNotSame(xPathParserTokenManager1, xPathParserTokenManager0);
      assertNotSame(token2, token0);
      assertNotSame(token2, token1);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(5, simpleCharStream0.bufpos);
      assertEquals(117, token2.endColumn);
      assertEquals(8, token2.beginLine);
      assertEquals(117, token2.beginColumn);
      assertEquals(8, token2.endLine);
      assertEquals(86, token2.kind);
      assertNotNull(token2);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      StringReader stringReader0 = new StringReader("GX4U>n[U8 3j");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream0);
      
      StringReader stringReader1 = new StringReader(" n4|");
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotNull(stringReader1);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'J';
      charArray0[1] = '(';
      charArray0[2] = '(';
      int int0 = stringReader1.read(charArray0);
      assertEquals(3, int0);
      assertArrayEquals(new char[] {' ', 'n', '4'}, charArray0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotSame(stringReader1, stringReader0);
      assertEquals(3, charArray0.length);
      
      StringReader stringReader2 = new StringReader("$IoK~7l7cuz@euZO");
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertNotNull(stringReader2);
      
      simpleCharStream0.ReInit((Reader) stringReader2);
      assertFalse(stringReader0.equals((Object)stringReader2));
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertNotSame(stringReader0, stringReader2);
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(stringReader2, stringReader1);
      assertNotSame(stringReader2, stringReader0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertFalse(stringReader0.equals((Object)stringReader2));
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertFalse(stringReader0.equals((Object)stringReader2));
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals("$", token0.toString());
      assertNotSame(stringReader0, stringReader2);
      assertNotSame(stringReader0, stringReader1);
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
      assertEquals(17, token0.kind);
      assertEquals(1, token0.beginColumn);
      assertNotNull(token0);
      
      Token token1 = xPathParserTokenManager0.getNextToken();
      assertFalse(stringReader0.equals((Object)stringReader2));
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(token1.equals((Object)token0));
      assertEquals(2, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(4, simpleCharStream0.getEndColumn());
      assertEquals(4, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals("IoK", token1.toString());
      assertNotSame(stringReader0, stringReader2);
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(token1, token0);
      assertEquals(3, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(78, token1.kind);
      assertEquals(2, token1.beginColumn);
      assertEquals(4, token1.endColumn);
      assertEquals(1, token1.endLine);
      assertEquals(1, token1.beginLine);
      assertNotNull(token1);
      
      // Undeclared exception!
      try { 
        xPathParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 5.  Encountered: \"~\" (126), after : \"\"
         //
         verifyException("org.apache.commons.jxpath.ri.parser.XPathParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      StringReader stringReader0 = new StringReader("VaW0L");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 8, 8);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream0);
      
      stringReader0.reset();
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(8, simpleCharStream0.getBeginColumn());
      assertEquals(11, simpleCharStream0.getEndColumn());
      assertEquals(11, simpleCharStream0.getColumn());
      assertEquals(8, simpleCharStream0.getEndLine());
      assertEquals(8, simpleCharStream0.getBeginLine());
      assertEquals(8, simpleCharStream0.getLine());
      assertEquals("VaW0", token0.toString());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(3, simpleCharStream0.bufpos);
      assertEquals(8, token0.beginLine);
      assertEquals(8, token0.endLine);
      assertEquals(11, token0.endColumn);
      assertEquals(8, token0.beginColumn);
      assertEquals(78, token0.kind);
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      StringReader stringReader0 = new StringReader("\"ad\"");
      assertNotNull(stringReader0);
      
      int int0 = stringReader0.read();
      assertEquals(34, int0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(2, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(2, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals("ad", token0.toString());
      assertEquals(1, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, token0.beginColumn);
      assertEquals(2, token0.endColumn);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
      assertEquals(78, token0.kind);
      assertNotNull(token0);
      
      // Undeclared exception!
      try { 
        xPathParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 4.  Encountered: <EOF> after : \"\"
         //
         verifyException("org.apache.commons.jxpath.ri.parser.XPathParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      StringReader stringReader0 = new StringReader("boolerQ");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(7, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(7, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals("boolerQ", token0.toString());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(6, simpleCharStream0.bufpos);
      assertEquals(1, token0.beginColumn);
      assertEquals(7, token0.endColumn);
      assertEquals(78, token0.kind);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      StringReader stringReader0 = new StringReader("ZugQ93#A?");
      assertNotNull(stringReader0);
      
      long long0 = stringReader0.skip((-1L));
      assertEquals(0L, long0);
      
      StringReader stringReader1 = new StringReader("ZugQ93#A?");
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotNull(stringReader1);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader1, 25, 25);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertEquals(25, simpleCharStream0.getBeginLine());
      assertEquals(25, simpleCharStream0.getLine());
      assertEquals(30, simpleCharStream0.getColumn());
      assertEquals(30, simpleCharStream0.getEndColumn());
      assertEquals(25, simpleCharStream0.getBeginColumn());
      assertEquals(25, simpleCharStream0.getEndLine());
      assertEquals("ZugQ93", token0.toString());
      assertNotSame(stringReader1, stringReader0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(5, simpleCharStream0.bufpos);
      assertEquals(25, token0.beginColumn);
      assertEquals(78, token0.kind);
      assertEquals(30, token0.endColumn);
      assertEquals(25, token0.endLine);
      assertEquals(25, token0.beginLine);
      assertNotNull(token0);
      
      // Undeclared exception!
      try { 
        xPathParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 25, column 31.  Encountered: \"#\" (35), after : \"\"
         //
         verifyException("org.apache.commons.jxpath.ri.parser.XPathParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      StringReader stringReader0 = new StringReader("U5yI:P`");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader("mNsB,@H_s");
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotNull(stringReader1);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(4, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(4, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals("mNsB", token0.toString());
      assertNotSame(stringReader1, stringReader0);
      assertEquals(3, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(78, token0.kind);
      assertEquals(1, token0.beginColumn);
      assertEquals(4, token0.endColumn);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
      assertNotNull(token0);
      
      StringReader stringReader2 = new StringReader("@Hui@");
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertNotNull(stringReader2);
      
      simpleCharStream0.ReInit((Reader) stringReader2);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(stringReader1.equals((Object)stringReader2));
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(stringReader1, stringReader2);
      assertNotSame(stringReader2, stringReader0);
      assertNotSame(stringReader2, stringReader1);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      SimpleCharStream simpleCharStream1 = new SimpleCharStream(stringReader0);
      assertFalse(stringReader0.equals((Object)stringReader2));
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(simpleCharStream1.equals((Object)simpleCharStream0));
      assertEquals(0, simpleCharStream1.getBeginLine());
      assertEquals(0, simpleCharStream1.getBeginColumn());
      assertEquals((-1), simpleCharStream1.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream1);
      
      char[] charArray0 = new char[7];
      charArray0[0] = '2';
      charArray0[1] = '_';
      charArray0[2] = '_';
      charArray0[3] = ' ';
      charArray0[4] = 'v';
      charArray0[5] = '4';
      charArray0[6] = 'o';
      int int0 = stringReader1.read(charArray0);
      assertEquals((-1), int0);
      assertArrayEquals(new char[] {'2', '_', '_', ' ', 'v', '4', 'o'}, charArray0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(stringReader1.equals((Object)stringReader2));
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(stringReader1, stringReader2);
      assertEquals(7, charArray0.length);
      
      Token token1 = xPathParserTokenManager0.getNextToken();
      assertFalse(token1.equals((Object)token0));
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(stringReader1.equals((Object)stringReader2));
      assertFalse(simpleCharStream0.equals((Object)simpleCharStream1));
      assertEquals("@", token1.toString());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertNotSame(token1, token0);
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(stringReader1, stringReader2);
      assertNotSame(simpleCharStream0, simpleCharStream1);
      assertEquals(1, token1.endLine);
      assertEquals(1, token1.endColumn);
      assertEquals(86, token1.kind);
      assertEquals(1, token1.beginLine);
      assertEquals(1, token1.beginColumn);
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(token1);
      
      XPathParserTokenManager xPathParserTokenManager1 = new XPathParserTokenManager(simpleCharStream1);
      assertFalse(stringReader0.equals((Object)stringReader2));
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(xPathParserTokenManager1.equals((Object)xPathParserTokenManager0));
      assertFalse(simpleCharStream1.equals((Object)simpleCharStream0));
      assertEquals(0, simpleCharStream1.getBeginLine());
      assertEquals(0, simpleCharStream1.getBeginColumn());
      assertEquals((-1), simpleCharStream1.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(xPathParserTokenManager1);
      
      Token token2 = xPathParserTokenManager1.getNextToken();
      assertFalse(stringReader0.equals((Object)stringReader2));
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(xPathParserTokenManager1.equals((Object)xPathParserTokenManager0));
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
      assertFalse(simpleCharStream1.equals((Object)simpleCharStream0));
      assertEquals("U5yI", token2.toString());
      assertEquals(4, simpleCharStream1.getColumn());
      assertEquals(1, simpleCharStream1.getEndLine());
      assertEquals(4, simpleCharStream1.getEndColumn());
      assertEquals(1, simpleCharStream1.getBeginLine());
      assertEquals(1, simpleCharStream1.getBeginColumn());
      assertEquals(1, simpleCharStream1.getLine());
      assertNotSame(stringReader0, stringReader2);
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(xPathParserTokenManager1, xPathParserTokenManager0);
      assertNotSame(token2, token0);
      assertNotSame(token2, token1);
      assertNotSame(simpleCharStream1, simpleCharStream0);
      assertEquals(4, token2.endColumn);
      assertEquals(1, token2.beginColumn);
      assertEquals(78, token2.kind);
      assertEquals(1, token2.endLine);
      assertEquals(1, token2.beginLine);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(3, simpleCharStream1.bufpos);
      assertNotNull(token2);
      
      Token token3 = xPathParserTokenManager0.getNextToken();
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(stringReader1.equals((Object)stringReader2));
      assertFalse(simpleCharStream0.equals((Object)simpleCharStream1));
      assertFalse(xPathParserTokenManager0.equals((Object)xPathParserTokenManager1));
      assertFalse(token3.equals((Object)token1));
      assertFalse(token3.equals((Object)token2));
      assertFalse(token3.equals((Object)token0));
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(4, simpleCharStream0.getColumn());
      assertEquals(2, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(4, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals("Hui", token3.toString());
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(stringReader1, stringReader2);
      assertNotSame(simpleCharStream0, simpleCharStream1);
      assertNotSame(xPathParserTokenManager0, xPathParserTokenManager1);
      assertNotSame(token3, token1);
      assertNotSame(token3, token2);
      assertNotSame(token3, token0);
      assertEquals(3, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, token3.endLine);
      assertEquals(2, token3.beginColumn);
      assertEquals(1, token3.beginLine);
      assertEquals(78, token3.kind);
      assertEquals(4, token3.endColumn);
      assertNotNull(token3);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      StringReader stringReader0 = new StringReader("U5yI:P`");
      assertNotNull(stringReader0);
      
      int int0 = 11;
      StringReader stringReader1 = new StringReader("U5yI:P`");
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotNull(stringReader1);
      
      StringReader stringReader2 = new StringReader("U5yI:P`");
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertNotNull(stringReader2);
      
      long long0 = stringReader2.skip(208L);
      assertEquals(7L, long0);
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertNotSame(stringReader2, stringReader1);
      assertNotSame(stringReader2, stringReader0);
      
      StringReader stringReader3 = new StringReader("U5yI:P`");
      assertFalse(stringReader3.equals((Object)stringReader1));
      assertFalse(stringReader3.equals((Object)stringReader0));
      assertFalse(stringReader3.equals((Object)stringReader2));
      assertNotNull(stringReader3);
      
      int int1 = 85;
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader1, 85, 999);
      assertFalse(stringReader1.equals((Object)stringReader2));
      assertFalse(stringReader1.equals((Object)stringReader3));
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertFalse(stringReader1.equals((Object)stringReader2));
      assertFalse(stringReader1.equals((Object)stringReader3));
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertFalse(stringReader1.equals((Object)stringReader2));
      assertFalse(stringReader1.equals((Object)stringReader3));
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertEquals(1002, simpleCharStream0.getEndColumn());
      assertEquals(1002, simpleCharStream0.getColumn());
      assertEquals(85, simpleCharStream0.getEndLine());
      assertEquals(999, simpleCharStream0.getBeginColumn());
      assertEquals(85, simpleCharStream0.getBeginLine());
      assertEquals(85, simpleCharStream0.getLine());
      assertEquals("U5yI", token0.toString());
      assertNotSame(stringReader1, stringReader2);
      assertNotSame(stringReader1, stringReader3);
      assertNotSame(stringReader1, stringReader0);
      assertEquals(3, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(85, token0.beginLine);
      assertEquals(999, token0.beginColumn);
      assertEquals(85, token0.endLine);
      assertEquals(78, token0.kind);
      assertEquals(1002, token0.endColumn);
      assertNotNull(token0);
      
      char char0 = '1';
      File file0 = MockFile.createTempFile("U5yI:P`", "");
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canExecute());
      assertEquals("/tmp", file0.getParent());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.canWrite());
      assertEquals("U5yI:P`0", file0.getName());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals("/tmp/U5yI:P`0", file0.toString());
      assertTrue(file0.isFile());
      assertTrue(file0.exists());
      assertTrue(file0.canRead());
      assertNotNull(file0);
      
      try { 
        MockFile.createTempFile("U5yI", "", file0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager((SimpleCharStream) null);
      assertNotNull(xPathParserTokenManager0);
      
      // Undeclared exception!
      try { 
        xPathParserTokenManager0.jjFillToken();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.parser.XPathParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      StringReader stringReader0 = new StringReader("nu!b");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(xPathParserTokenManager0);
      
      XPathParserTokenManager xPathParserTokenManager1 = new XPathParserTokenManager(simpleCharStream0);
      assertFalse(xPathParserTokenManager1.equals((Object)xPathParserTokenManager0));
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(xPathParserTokenManager1);
      
      XPathParserTokenManager xPathParserTokenManager2 = new XPathParserTokenManager(simpleCharStream0);
      assertFalse(xPathParserTokenManager2.equals((Object)xPathParserTokenManager0));
      assertFalse(xPathParserTokenManager2.equals((Object)xPathParserTokenManager1));
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(xPathParserTokenManager2);
      
      Token token0 = xPathParserTokenManager2.getNextToken();
      assertFalse(xPathParserTokenManager2.equals((Object)xPathParserTokenManager0));
      assertFalse(xPathParserTokenManager2.equals((Object)xPathParserTokenManager1));
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(2, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(2, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals("nu", token0.toString());
      assertNotSame(xPathParserTokenManager2, xPathParserTokenManager0);
      assertNotSame(xPathParserTokenManager2, xPathParserTokenManager1);
      assertEquals(1, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, token0.endLine);
      assertEquals(78, token0.kind);
      assertEquals(1, token0.beginLine);
      assertEquals(2, token0.endColumn);
      assertEquals(1, token0.beginColumn);
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      StringReader stringReader0 = new StringReader("boolean");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 1325, 1325);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(1325, simpleCharStream0.getEndLine());
      assertEquals(1325, simpleCharStream0.getLine());
      assertEquals(1325, simpleCharStream0.getBeginColumn());
      assertEquals(1331, simpleCharStream0.getColumn());
      assertEquals(1325, simpleCharStream0.getBeginLine());
      assertEquals(1331, simpleCharStream0.getEndColumn());
      assertEquals("boolean", token0.toString());
      assertEquals(6, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1325, token0.beginColumn);
      assertEquals(1325, token0.beginLine);
      assertEquals(66, token0.kind);
      assertEquals(1331, token0.endColumn);
      assertEquals(1325, token0.endLine);
      assertNotNull(token0);
      
      Token token1 = xPathParserTokenManager0.getNextToken();
      assertFalse(token1.equals((Object)token0));
      assertEquals(1325, simpleCharStream0.getEndLine());
      assertEquals(1325, simpleCharStream0.getLine());
      assertEquals(1331, simpleCharStream0.getBeginColumn());
      assertEquals(1331, simpleCharStream0.getColumn());
      assertEquals(1325, simpleCharStream0.getBeginLine());
      assertEquals(1331, simpleCharStream0.getEndColumn());
      assertEquals("", token1.toString());
      assertNotSame(token1, token0);
      assertEquals(6, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1325, token1.endLine);
      assertEquals(1331, token1.beginColumn);
      assertEquals(1331, token1.endColumn);
      assertEquals(1325, token1.beginLine);
      assertEquals(0, token1.kind);
      assertNotNull(token1);
      
      Token token2 = xPathParserTokenManager0.getNextToken();
      assertFalse(token2.equals((Object)token1));
      assertFalse(token2.equals((Object)token0));
      assertEquals(1325, simpleCharStream0.getEndLine());
      assertEquals(1325, simpleCharStream0.getLine());
      assertEquals(1331, simpleCharStream0.getBeginColumn());
      assertEquals(1331, simpleCharStream0.getColumn());
      assertEquals(1325, simpleCharStream0.getBeginLine());
      assertEquals(1331, simpleCharStream0.getEndColumn());
      assertEquals("", token2.toString());
      assertNotSame(token2, token1);
      assertNotSame(token2, token0);
      assertEquals(6, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1325, token2.beginLine);
      assertEquals(0, token2.kind);
      assertEquals(1331, token2.beginColumn);
      assertEquals(1325, token2.endLine);
      assertEquals(1331, token2.endColumn);
      assertNotNull(token2);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      StringReader stringReader0 = new StringReader("following::");
      assertNotNull(stringReader0);
      
      int int0 = stringReader0.read();
      assertEquals(102, int0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(simpleCharStream0);
      
      SimpleCharStream simpleCharStream1 = new SimpleCharStream(stringReader0);
      assertFalse(simpleCharStream1.equals((Object)simpleCharStream0));
      assertEquals(0, simpleCharStream1.getBeginColumn());
      assertEquals(0, simpleCharStream1.getBeginLine());
      assertEquals((-1), simpleCharStream1.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream1);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream1);
      assertFalse(simpleCharStream1.equals((Object)simpleCharStream0));
      assertEquals(0, simpleCharStream1.getBeginColumn());
      assertEquals(0, simpleCharStream1.getBeginLine());
      assertEquals((-1), simpleCharStream1.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertFalse(simpleCharStream1.equals((Object)simpleCharStream0));
      assertEquals(8, simpleCharStream1.getEndColumn());
      assertEquals(1, simpleCharStream1.getEndLine());
      assertEquals(1, simpleCharStream1.getBeginColumn());
      assertEquals(1, simpleCharStream1.getLine());
      assertEquals(1, simpleCharStream1.getBeginLine());
      assertEquals(8, simpleCharStream1.getColumn());
      assertEquals("ollowing", token0.toString());
      assertNotSame(simpleCharStream1, simpleCharStream0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(7, simpleCharStream1.bufpos);
      assertEquals(78, token0.kind);
      assertEquals(1, token0.beginColumn);
      assertEquals(8, token0.endColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.endLine);
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager((SimpleCharStream) null);
      assertNotNull(xPathParserTokenManager0);
      
      xPathParserTokenManager0.jjnewStateCnt = 1243;
      xPathParserTokenManager0.ReInit((SimpleCharStream) null);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      StringReader stringReader0 = new StringReader("node");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 3569, 3569);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(xPathParserTokenManager0);
      
      StringReader stringReader1 = new StringReader("");
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotNull(stringReader1);
      
      XPathParserTokenManager xPathParserTokenManager1 = new XPathParserTokenManager(simpleCharStream0);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(xPathParserTokenManager1.equals((Object)xPathParserTokenManager0));
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(xPathParserTokenManager1);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(xPathParserTokenManager0.equals((Object)xPathParserTokenManager1));
      assertEquals(3569, simpleCharStream0.getLine());
      assertEquals(3569, simpleCharStream0.getBeginColumn());
      assertEquals(3569, simpleCharStream0.getBeginLine());
      assertEquals(3572, simpleCharStream0.getEndColumn());
      assertEquals(3569, simpleCharStream0.getEndLine());
      assertEquals(3572, simpleCharStream0.getColumn());
      assertEquals("node", token0.toString());
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(xPathParserTokenManager0, xPathParserTokenManager1);
      assertEquals(3, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(31, token0.kind);
      assertEquals(3569, token0.endLine);
      assertEquals(3572, token0.endColumn);
      assertEquals(3569, token0.beginColumn);
      assertEquals(3569, token0.beginLine);
      assertNotNull(token0);
      
      XPathParserTokenManager xPathParserTokenManager2 = new XPathParserTokenManager(simpleCharStream0);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(xPathParserTokenManager2.equals((Object)xPathParserTokenManager0));
      assertFalse(xPathParserTokenManager2.equals((Object)xPathParserTokenManager1));
      assertEquals(3569, simpleCharStream0.getLine());
      assertEquals(3569, simpleCharStream0.getBeginColumn());
      assertEquals(3569, simpleCharStream0.getBeginLine());
      assertEquals(3572, simpleCharStream0.getEndColumn());
      assertEquals(3569, simpleCharStream0.getEndLine());
      assertEquals(3572, simpleCharStream0.getColumn());
      assertEquals(3, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(xPathParserTokenManager2);
      
      Token token1 = xPathParserTokenManager2.getNextToken();
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(xPathParserTokenManager2.equals((Object)xPathParserTokenManager0));
      assertFalse(xPathParserTokenManager2.equals((Object)xPathParserTokenManager1));
      assertFalse(token1.equals((Object)token0));
      assertEquals(3572, simpleCharStream0.getBeginColumn());
      assertEquals(3569, simpleCharStream0.getLine());
      assertEquals(3569, simpleCharStream0.getBeginLine());
      assertEquals(3572, simpleCharStream0.getEndColumn());
      assertEquals(3569, simpleCharStream0.getEndLine());
      assertEquals(3572, simpleCharStream0.getColumn());
      assertEquals("", token1.toString());
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(xPathParserTokenManager2, xPathParserTokenManager0);
      assertNotSame(xPathParserTokenManager2, xPathParserTokenManager1);
      assertNotSame(token1, token0);
      assertEquals(3, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(3572, token1.beginColumn);
      assertEquals(3572, token1.endColumn);
      assertEquals(3569, token1.beginLine);
      assertEquals(3569, token1.endLine);
      assertEquals(0, token1.kind);
      assertNotNull(token1);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      StringReader stringReader0 = new StringReader("i_N+dw?Bu^+D");
      assertNotNull(stringReader0);
      
      int int0 = stringReader0.read();
      assertEquals(105, int0);
      
      StringReader stringReader1 = new StringReader("q_");
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotNull(stringReader1);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(2, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(2, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals("q_", token0.toString());
      assertNotSame(stringReader1, stringReader0);
      assertEquals(1, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, token0.endLine);
      assertEquals(78, token0.kind);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(2, token0.endColumn);
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      StringReader stringReader0 = new StringReader("vo-!]2");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(3, simpleCharStream0.getColumn());
      assertEquals(3, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals("vo-", token0.toString());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(2, simpleCharStream0.bufpos);
      assertEquals(78, token0.kind);
      assertEquals(1, token0.beginColumn);
      assertEquals(3, token0.endColumn);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      StringReader stringReader0 = new StringReader("A\"[)wW|=&a.;0;/");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 3569, 3569);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(simpleCharStream0);
      
      SimpleCharStream simpleCharStream1 = new SimpleCharStream(stringReader0, (-2461), 11);
      assertFalse(simpleCharStream1.equals((Object)simpleCharStream0));
      assertEquals(0, simpleCharStream1.getBeginColumn());
      assertEquals(0, simpleCharStream1.getBeginLine());
      assertEquals((-1), simpleCharStream1.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream1);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream1);
      assertFalse(simpleCharStream1.equals((Object)simpleCharStream0));
      assertEquals(0, simpleCharStream1.getBeginColumn());
      assertEquals(0, simpleCharStream1.getBeginLine());
      assertEquals((-1), simpleCharStream1.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(xPathParserTokenManager0);
      
      StringReader stringReader1 = new StringReader("");
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotNull(stringReader1);
      
      simpleCharStream0.ReInit((Reader) stringReader1);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(simpleCharStream0.equals((Object)simpleCharStream1));
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(simpleCharStream0, simpleCharStream1);
      assertNotSame(stringReader1, stringReader0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      
      XPathParserTokenManager xPathParserTokenManager1 = new XPathParserTokenManager(simpleCharStream1);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(simpleCharStream1.equals((Object)simpleCharStream0));
      assertFalse(xPathParserTokenManager1.equals((Object)xPathParserTokenManager0));
      assertEquals(0, simpleCharStream1.getBeginColumn());
      assertEquals(0, simpleCharStream1.getBeginLine());
      assertEquals((-1), simpleCharStream1.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(xPathParserTokenManager1);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(simpleCharStream1.equals((Object)simpleCharStream0));
      assertFalse(xPathParserTokenManager0.equals((Object)xPathParserTokenManager1));
      assertEquals(11, simpleCharStream1.getEndColumn());
      assertEquals(11, simpleCharStream1.getBeginColumn());
      assertEquals((-2461), simpleCharStream1.getLine());
      assertEquals(11, simpleCharStream1.getColumn());
      assertEquals((-2461), simpleCharStream1.getBeginLine());
      assertEquals((-2461), simpleCharStream1.getEndLine());
      assertEquals("A", token0.toString());
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(simpleCharStream1, simpleCharStream0);
      assertNotSame(xPathParserTokenManager0, xPathParserTokenManager1);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream1.bufpos);
      assertEquals(11, token0.beginColumn);
      assertEquals(11, token0.endColumn);
      assertEquals(78, token0.kind);
      assertEquals((-2461), token0.endLine);
      assertEquals((-2461), token0.beginLine);
      assertNotNull(token0);
      
      XPathParserTokenManager xPathParserTokenManager2 = new XPathParserTokenManager(simpleCharStream0);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(simpleCharStream0.equals((Object)simpleCharStream1));
      assertFalse(xPathParserTokenManager2.equals((Object)xPathParserTokenManager0));
      assertFalse(xPathParserTokenManager2.equals((Object)xPathParserTokenManager1));
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(xPathParserTokenManager2);
      
      Token token1 = xPathParserTokenManager2.getNextToken();
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(simpleCharStream0.equals((Object)simpleCharStream1));
      assertFalse(xPathParserTokenManager2.equals((Object)xPathParserTokenManager0));
      assertFalse(xPathParserTokenManager2.equals((Object)xPathParserTokenManager1));
      assertFalse(token1.equals((Object)token0));
      assertEquals(0, simpleCharStream0.getEndLine());
      assertEquals(0, simpleCharStream0.getEndColumn());
      assertEquals(0, simpleCharStream0.getColumn());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getLine());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals("", token1.toString());
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(simpleCharStream0, simpleCharStream1);
      assertNotSame(xPathParserTokenManager2, xPathParserTokenManager0);
      assertNotSame(xPathParserTokenManager2, xPathParserTokenManager1);
      assertNotSame(token1, token0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(4095, simpleCharStream0.bufpos);
      assertEquals(0, token1.beginLine);
      assertEquals(0, token1.endLine);
      assertEquals(0, token1.endColumn);
      assertEquals(0, token1.kind);
      assertEquals(0, token1.beginColumn);
      assertNotNull(token1);
      
      // Undeclared exception!
      try { 
        xPathParserTokenManager1.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line -2461, column 26.  Encountered: <EOF> after : \"\\\"[)wW|=&a.;0;/\"
         //
         verifyException("org.apache.commons.jxpath.ri.parser.XPathParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      StringReader stringReader0 = new StringReader("comment");
      assertNotNull(stringReader0);
      
      boolean boolean0 = stringReader0.markSupported();
      assertTrue(boolean0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(7, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(7, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals("comment", token0.toString());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(6, simpleCharStream0.bufpos);
      assertEquals(1, token0.beginColumn);
      assertEquals(7, token0.endColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(33, token0.kind);
      assertEquals(1, token0.endLine);
      assertNotNull(token0);
      
      Token token1 = xPathParserTokenManager0.getNextToken();
      assertFalse(token1.equals((Object)token0));
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(7, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(7, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(7, simpleCharStream0.getColumn());
      assertEquals("", token1.toString());
      assertNotSame(token1, token0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(6, simpleCharStream0.bufpos);
      assertEquals(7, token1.beginColumn);
      assertEquals(1, token1.endLine);
      assertEquals(1, token1.beginLine);
      assertEquals(0, token1.kind);
      assertEquals(7, token1.endColumn);
      assertNotNull(token1);
      
      Token token2 = xPathParserTokenManager0.getNextToken();
      assertFalse(token2.equals((Object)token1));
      assertFalse(token2.equals((Object)token0));
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(7, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(7, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(7, simpleCharStream0.getColumn());
      assertEquals("", token2.toString());
      assertNotSame(token2, token1);
      assertNotSame(token2, token0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(6, simpleCharStream0.bufpos);
      assertEquals(7, token2.endColumn);
      assertEquals(1, token2.beginLine);
      assertEquals(0, token2.kind);
      assertEquals(1, token2.endLine);
      assertEquals(7, token2.beginColumn);
      assertNotNull(token2);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      StringReader stringReader0 = new StringReader("org.apache.commons.jxpath.ri.parser.zNken");
      assertNotNull(stringReader0);
      
      int int0 = stringReader0.read();
      assertEquals(111, int0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream0);
      
      char char0 = simpleCharStream0.BeginToken();
      assertEquals('r', char0);
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.bufpos);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.bufpos);
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(40, simpleCharStream0.getEndColumn());
      assertEquals(40, simpleCharStream0.getColumn());
      assertEquals(2, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals("g.apache.commons.jxpath.ri.parser.zNken", token0.toString());
      assertEquals(39, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, token0.endLine);
      assertEquals(2, token0.beginColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(78, token0.kind);
      assertEquals(40, token0.endColumn);
      assertNotNull(token0);
      
      Token token1 = xPathParserTokenManager0.getNextToken();
      assertFalse(token1.equals((Object)token0));
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(40, simpleCharStream0.getBeginColumn());
      assertEquals(40, simpleCharStream0.getEndColumn());
      assertEquals(40, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals("", token1.toString());
      assertNotSame(token1, token0);
      assertEquals(39, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, token1.endLine);
      assertEquals(1, token1.beginLine);
      assertEquals(0, token1.kind);
      assertEquals(40, token1.beginColumn);
      assertEquals(40, token1.endColumn);
      assertNotNull(token1);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      StringReader stringReader0 = new StringReader("boo*ean");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(3, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(3, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals("boo", token0.toString());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(2, simpleCharStream0.bufpos);
      assertEquals(1, token0.beginLine);
      assertEquals(78, token0.kind);
      assertEquals(3, token0.endColumn);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginColumn);
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      StringReader stringReader0 = new StringReader("org.apache.commons.jxpath.ri.parser.XPathParserTokenManager");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(59, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(59, simpleCharStream0.getEndColumn());
      assertEquals("org.apache.commons.jxpath.ri.parser.XPathParserTokenManager", token0.toString());
      assertEquals(58, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, token0.beginColumn);
      assertEquals(78, token0.kind);
      assertEquals(1, token0.beginLine);
      assertEquals(59, token0.endColumn);
      assertEquals(1, token0.endLine);
      assertNotNull(token0);
      
      Token token1 = xPathParserTokenManager0.getNextToken();
      assertFalse(token1.equals((Object)token0));
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(59, simpleCharStream0.getColumn());
      assertEquals(59, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(59, simpleCharStream0.getEndColumn());
      assertEquals("", token1.toString());
      assertNotSame(token1, token0);
      assertEquals(58, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, token1.beginLine);
      assertEquals(0, token1.kind);
      assertEquals(59, token1.endColumn);
      assertEquals(1, token1.endLine);
      assertEquals(59, token1.beginColumn);
      assertNotNull(token1);
      
      Token token2 = xPathParserTokenManager0.getNextToken();
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(59, simpleCharStream0.getColumn());
      assertEquals(59, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(59, simpleCharStream0.getEndColumn());
      assertEquals("", token2.toString());
      assertNotSame(token2, token0);
      assertNotSame(token2, token1);
      assertEquals(58, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, token2.beginLine);
      assertEquals(0, token2.kind);
      assertEquals(59, token2.beginColumn);
      assertEquals(59, token2.endColumn);
      assertEquals(1, token2.endLine);
      assertNotNull(token2);
      
      xPathParserTokenManager0.ReInit(simpleCharStream0, 0);
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(59, simpleCharStream0.getColumn());
      assertEquals(59, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(59, simpleCharStream0.getEndColumn());
      assertEquals(58, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertFalse(fileDescriptor0.valid());
      assertNotNull(fileDescriptor0);
      
      StringReader stringReader0 = new StringReader("number");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(6, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(6, simpleCharStream0.getEndColumn());
      assertEquals("number", token0.toString());
      assertEquals(5, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(6, token0.endColumn);
      assertEquals(72, token0.kind);
      assertEquals(1, token0.endLine);
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "(C9hb@|O");
      assertFalse(boolean0);
      
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)75;
      byteArray0[1] = (byte) (-34);
      byteArray0[2] = (byte)119;
      byteArray0[3] = (byte) (-23);
      byteArray0[4] = (byte)53;
      byteArray0[5] = (byte) (-26);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertArrayEquals(new byte[] {(byte)75, (byte) (-34), (byte)119, (byte) (-23), (byte)53, (byte) (-26)}, byteArray0);
      assertEquals(6, byteArrayInputStream0.available());
      assertEquals(6, byteArray0.length);
      assertNotNull(byteArrayInputStream0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)75, (byte) (-34), (byte)119, (byte) (-23), (byte)53, (byte) (-26)}, byteArray0);
      assertEquals(6, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(6, byteArray0.length);
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertArrayEquals(new byte[] {(byte)75, (byte) (-34), (byte)119, (byte) (-23), (byte)53, (byte) (-26)}, byteArray0);
      assertEquals(6, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(6, byteArray0.length);
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertArrayEquals(new byte[] {(byte)75, (byte) (-34), (byte)119, (byte) (-23), (byte)53, (byte) (-26)}, byteArray0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals("K", token0.toString());
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
      assertEquals(78, token0.kind);
      assertEquals(1, token0.beginColumn);
      assertEquals(6, byteArray0.length);
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream(103);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(pipedInputStream0, 103, 103);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream0);
      
      simpleCharStream0.ReInit((InputStream) pipedInputStream0, 103, 0, 0);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(xPathParserTokenManager0);
      
      xPathParserTokenManager0.ReInit(simpleCharStream0);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      // Undeclared exception!
      try { 
        xPathParserTokenManager0.ReInit(simpleCharStream0, 103);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 103. State unchanged.
         //
         verifyException("org.apache.commons.jxpath.ri.parser.XPathParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      StringReader stringReader0 = new StringReader("m.");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader("m.");
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotNull(stringReader1);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader1, (-1106), (-1106));
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream0);
      
      simpleCharStream0.ReInit((Reader) stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertNotSame(stringReader1, stringReader0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(xPathParserTokenManager0);
      
      StringReader stringReader2 = new StringReader("w[>");
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertNotNull(stringReader2);
      
      SimpleCharStream simpleCharStream1 = new SimpleCharStream(stringReader2, (-4270), (-1106));
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertFalse(simpleCharStream1.equals((Object)simpleCharStream0));
      assertEquals(0, simpleCharStream1.getBeginLine());
      assertEquals(0, simpleCharStream1.getBeginColumn());
      assertEquals((-1), simpleCharStream1.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream1);
      
      XPathParserTokenManager xPathParserTokenManager1 = new XPathParserTokenManager(simpleCharStream1);
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertFalse(simpleCharStream1.equals((Object)simpleCharStream0));
      assertFalse(xPathParserTokenManager1.equals((Object)xPathParserTokenManager0));
      assertEquals(0, simpleCharStream1.getBeginLine());
      assertEquals(0, simpleCharStream1.getBeginColumn());
      assertEquals((-1), simpleCharStream1.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(xPathParserTokenManager1);
      
      Token token0 = xPathParserTokenManager1.getNextToken();
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertFalse(simpleCharStream1.equals((Object)simpleCharStream0));
      assertFalse(xPathParserTokenManager1.equals((Object)xPathParserTokenManager0));
      assertEquals((-4270), simpleCharStream1.getEndLine());
      assertEquals((-1106), simpleCharStream1.getEndColumn());
      assertEquals((-4270), simpleCharStream1.getBeginLine());
      assertEquals((-4270), simpleCharStream1.getLine());
      assertEquals((-1106), simpleCharStream1.getColumn());
      assertEquals((-1106), simpleCharStream1.getBeginColumn());
      assertEquals("w", token0.toString());
      assertNotSame(stringReader2, stringReader1);
      assertNotSame(stringReader2, stringReader0);
      assertNotSame(simpleCharStream1, simpleCharStream0);
      assertNotSame(xPathParserTokenManager1, xPathParserTokenManager0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream1.bufpos);
      assertEquals(78, token0.kind);
      assertEquals((-1106), token0.beginColumn);
      assertEquals((-4270), token0.endLine);
      assertEquals((-1106), token0.endColumn);
      assertEquals((-4270), token0.beginLine);
      assertNotNull(token0);
      
      Token token1 = xPathParserTokenManager0.getNextToken();
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(stringReader1.equals((Object)stringReader2));
      assertFalse(simpleCharStream0.equals((Object)simpleCharStream1));
      assertFalse(xPathParserTokenManager0.equals((Object)xPathParserTokenManager1));
      assertFalse(token1.equals((Object)token0));
      assertEquals(2, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(2, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals("m.", token1.toString());
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(stringReader1, stringReader2);
      assertNotSame(simpleCharStream0, simpleCharStream1);
      assertNotSame(xPathParserTokenManager0, xPathParserTokenManager1);
      assertNotSame(token1, token0);
      assertEquals(1, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(78, token1.kind);
      assertEquals(1, token1.beginLine);
      assertEquals(1, token1.beginColumn);
      assertEquals(2, token1.endColumn);
      assertEquals(1, token1.endLine);
      assertNotNull(token1);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-28);
      StringReader stringReader0 = new StringReader("24e@c0/}o");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(2, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(2, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals("24", token0.toString());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, simpleCharStream0.bufpos);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(20, token0.kind);
      assertEquals(1, token0.endLine);
      assertEquals(2, token0.endColumn);
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      StringReader stringReader0 = new StringReader("-");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(1, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals("-", token0.toString());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.bufpos);
      assertEquals(1, token0.endColumn);
      assertEquals(10, token0.kind);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(C_9c9h}b@|O");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(xPathParserTokenManager0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-44);
      byteArray0[1] = (byte)24;
      byteArray0[2] = (byte)60;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-44), (byte)24, (byte)60}, byteArray0);
      assertEquals(3, byteArrayInputStream0.available());
      assertEquals(3, byteArray0.length);
      assertNotNull(byteArrayInputStream0);
      
      SimpleCharStream simpleCharStream1 = new SimpleCharStream(byteArrayInputStream0, 12, 63, (byte) (-44));
      assertArrayEquals(new byte[] {(byte) (-44), (byte)24, (byte)60}, byteArray0);
      assertFalse(simpleCharStream1.equals((Object)simpleCharStream0));
      assertEquals(3, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream1.getBeginColumn());
      assertEquals(0, simpleCharStream1.getBeginLine());
      assertEquals((-1), simpleCharStream1.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(3, byteArray0.length);
      assertNotNull(simpleCharStream1);
      
      XPathParserTokenManager xPathParserTokenManager1 = new XPathParserTokenManager(simpleCharStream1);
      assertArrayEquals(new byte[] {(byte) (-44), (byte)24, (byte)60}, byteArray0);
      assertFalse(simpleCharStream1.equals((Object)simpleCharStream0));
      assertFalse(xPathParserTokenManager1.equals((Object)xPathParserTokenManager0));
      assertEquals(3, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream1.getBeginColumn());
      assertEquals(0, simpleCharStream1.getBeginLine());
      assertEquals((-1), simpleCharStream1.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(3, byteArray0.length);
      assertNotNull(xPathParserTokenManager1);
      
      // Undeclared exception!
      try { 
        xPathParserTokenManager1.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 12, column 63.  Encountered: \"\\ufffd\" (65533), after : \"\"
         //
         verifyException("org.apache.commons.jxpath.ri.parser.XPathParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      StringReader stringReader0 = new StringReader("..");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 112, 112);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(112, simpleCharStream0.getBeginColumn());
      assertEquals(112, simpleCharStream0.getLine());
      assertEquals(113, simpleCharStream0.getEndColumn());
      assertEquals(113, simpleCharStream0.getColumn());
      assertEquals(112, simpleCharStream0.getBeginLine());
      assertEquals(112, simpleCharStream0.getEndLine());
      assertEquals("..", token0.toString());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, simpleCharStream0.bufpos);
      assertEquals(112, token0.endLine);
      assertEquals(112, token0.beginLine);
      assertEquals(113, token0.endColumn);
      assertEquals(83, token0.kind);
      assertEquals(112, token0.beginColumn);
      assertNotNull(token0);
      
      StringReader stringReader1 = new StringReader("xIf*&.Wt4wWJo4SkY?M");
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotNull(stringReader1);
      
      simpleCharStream0.ReInit((Reader) stringReader1);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertEquals(112, simpleCharStream0.getBeginColumn());
      assertEquals(112, simpleCharStream0.getBeginLine());
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(stringReader1, stringReader0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      
      XPathParserTokenManager xPathParserTokenManager1 = new XPathParserTokenManager(simpleCharStream0);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(xPathParserTokenManager1.equals((Object)xPathParserTokenManager0));
      assertEquals(112, simpleCharStream0.getBeginColumn());
      assertEquals(112, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(xPathParserTokenManager1);
      
      Token token1 = xPathParserTokenManager1.getNextToken();
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(xPathParserTokenManager1.equals((Object)xPathParserTokenManager0));
      assertFalse(token1.equals((Object)token0));
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(3, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(3, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals("xIf", token1.toString());
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(xPathParserTokenManager1, xPathParserTokenManager0);
      assertNotSame(token1, token0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(2, simpleCharStream0.bufpos);
      assertEquals(1, token1.beginLine);
      assertEquals(1, token1.beginColumn);
      assertEquals(1, token1.endLine);
      assertEquals(78, token1.kind);
      assertEquals(3, token1.endColumn);
      assertNotNull(token1);
      
      Token token2 = xPathParserTokenManager0.getNextToken();
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(xPathParserTokenManager0.equals((Object)xPathParserTokenManager1));
      assertFalse(token2.equals((Object)token1));
      assertFalse(token2.equals((Object)token0));
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(4, simpleCharStream0.getColumn());
      assertEquals(4, simpleCharStream0.getBeginColumn());
      assertEquals(4, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals("*", token2.toString());
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(xPathParserTokenManager0, xPathParserTokenManager1);
      assertNotSame(token2, token1);
      assertNotSame(token2, token0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(3, simpleCharStream0.bufpos);
      assertEquals(1, token2.endLine);
      assertEquals(1, token2.beginLine);
      assertEquals(4, token2.endColumn);
      assertEquals(88, token2.kind);
      assertEquals(4, token2.beginColumn);
      assertNotNull(token2);
      
      // Undeclared exception!
      try { 
        xPathParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 5.  Encountered: \"&\" (38), after : \"\"
         //
         verifyException("org.apache.commons.jxpath.ri.parser.XPathParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      StringReader stringReader0 = new StringReader("f=ormat|number");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals("f", token0.toString());
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(78, token0.kind);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.endColumn);
      assertNotNull(token0);
      
      Token token1 = xPathParserTokenManager0.jjFillToken();
      assertFalse(token1.equals((Object)token0));
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals("f", token1.toString());
      assertNotSame(token1, token0);
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, token1.endLine);
      assertEquals(1, token1.endColumn);
      assertEquals(1, token1.beginColumn);
      assertEquals(78, token1.kind);
      assertEquals(1, token1.beginLine);
      assertNotNull(token1);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)27;
      byteArray0[1] = (byte)4;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)6;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 39, (byte)6);
      assertArrayEquals(new byte[] {(byte)27, (byte)4, (byte)0, (byte) (-1), (byte)0, (byte)6}, byteArray0);
      assertEquals((-33), byteArrayInputStream0.available());
      assertEquals(6, byteArray0.length);
      assertNotNull(byteArrayInputStream0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(byteArrayInputStream0, (-2), 2727);
      assertArrayEquals(new byte[] {(byte)27, (byte)4, (byte)0, (byte) (-1), (byte)0, (byte)6}, byteArray0);
      assertEquals((-33), byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertEquals(6, byteArray0.length);
      assertNotNull(simpleCharStream0);
      
      String string0 = simpleCharStream0.GetImage();
      assertArrayEquals(new byte[] {(byte)27, (byte)4, (byte)0, (byte) (-1), (byte)0, (byte)6}, byteArray0);
      assertEquals((-33), byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertEquals(6, byteArray0.length);
      assertNotNull(string0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertArrayEquals(new byte[] {(byte)27, (byte)4, (byte)0, (byte) (-1), (byte)0, (byte)6}, byteArray0);
      assertEquals((-33), byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertEquals(6, byteArray0.length);
      assertNotNull(xPathParserTokenManager0);
      
      try { 
        simpleCharStream0.FillBuff();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.parser.SimpleCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      StringReader stringReader0 = new StringReader("descendant-or-self::");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(20, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(20, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals("descendant-or-self::", token0.toString());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(19, simpleCharStream0.bufpos);
      assertEquals(1, token0.beginColumn);
      assertEquals(47, token0.kind);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
      assertEquals(20, token0.endColumn);
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      StringReader stringReader0 = new StringReader("4edU");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader("4edU");
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotNull(stringReader1);
      
      StringReader stringReader2 = new StringReader("preceding-sibling::");
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertNotNull(stringReader2);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader2);
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(xPathParserTokenManager0);
      
      XPathParserTokenManager xPathParserTokenManager1 = new XPathParserTokenManager(simpleCharStream0);
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertFalse(xPathParserTokenManager1.equals((Object)xPathParserTokenManager0));
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(xPathParserTokenManager1);
      
      Token token0 = xPathParserTokenManager1.getNextToken();
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertFalse(xPathParserTokenManager1.equals((Object)xPathParserTokenManager0));
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(19, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(19, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals("preceding-sibling::", token0.toString());
      assertNotSame(stringReader2, stringReader0);
      assertNotSame(stringReader2, stringReader1);
      assertNotSame(xPathParserTokenManager1, xPathParserTokenManager0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(18, simpleCharStream0.bufpos);
      assertEquals(1, token0.beginColumn);
      assertEquals(46, token0.kind);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
      assertEquals(19, token0.endColumn);
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      StringReader stringReader0 = new StringReader("I7!&>nn8)");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 109, (-1148));
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(xPathParserTokenManager0);
      
      StringReader stringReader1 = new StringReader("2n>z@Gu[L");
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotNull(stringReader1);
      
      SimpleCharStream simpleCharStream1 = new SimpleCharStream(stringReader1, 29, 83);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(simpleCharStream1.equals((Object)simpleCharStream0));
      assertEquals(0, simpleCharStream1.getBeginLine());
      assertEquals(0, simpleCharStream1.getBeginColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream1.bufpos);
      assertNotNull(simpleCharStream1);
      
      XPathParserTokenManager xPathParserTokenManager1 = new XPathParserTokenManager(simpleCharStream1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(simpleCharStream1.equals((Object)simpleCharStream0));
      assertFalse(xPathParserTokenManager1.equals((Object)xPathParserTokenManager0));
      assertEquals(0, simpleCharStream1.getBeginLine());
      assertEquals(0, simpleCharStream1.getBeginColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream1.bufpos);
      assertNotNull(xPathParserTokenManager1);
      
      Token token0 = xPathParserTokenManager1.getNextToken();
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(simpleCharStream1.equals((Object)simpleCharStream0));
      assertFalse(xPathParserTokenManager1.equals((Object)xPathParserTokenManager0));
      assertEquals(29, simpleCharStream1.getLine());
      assertEquals(83, simpleCharStream1.getEndColumn());
      assertEquals(29, simpleCharStream1.getEndLine());
      assertEquals(29, simpleCharStream1.getBeginLine());
      assertEquals(83, simpleCharStream1.getColumn());
      assertEquals(83, simpleCharStream1.getBeginColumn());
      assertEquals("2", token0.toString());
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(simpleCharStream1, simpleCharStream0);
      assertNotSame(xPathParserTokenManager1, xPathParserTokenManager0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream1.bufpos);
      assertEquals(29, token0.beginLine);
      assertEquals(83, token0.beginColumn);
      assertEquals(29, token0.endLine);
      assertEquals(20, token0.kind);
      assertEquals(83, token0.endColumn);
      assertNotNull(token0);
      
      SimpleCharStream simpleCharStream2 = new SimpleCharStream(stringReader1, 1, 100);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(simpleCharStream2.equals((Object)simpleCharStream0));
      assertFalse(simpleCharStream2.equals((Object)simpleCharStream1));
      assertEquals(0, simpleCharStream2.getBeginColumn());
      assertEquals(0, simpleCharStream2.getBeginLine());
      assertEquals((-1), simpleCharStream2.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream2);
      
      XPathParserTokenManager xPathParserTokenManager2 = new XPathParserTokenManager((SimpleCharStream) null);
      assertFalse(xPathParserTokenManager2.equals((Object)xPathParserTokenManager0));
      assertFalse(xPathParserTokenManager2.equals((Object)xPathParserTokenManager1));
      assertNotNull(xPathParserTokenManager2);
      
      XPathParserTokenManager xPathParserTokenManager3 = new XPathParserTokenManager(simpleCharStream1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(simpleCharStream1.equals((Object)simpleCharStream2));
      assertFalse(simpleCharStream1.equals((Object)simpleCharStream0));
      assertFalse(xPathParserTokenManager3.equals((Object)xPathParserTokenManager2));
      assertFalse(xPathParserTokenManager3.equals((Object)xPathParserTokenManager1));
      assertFalse(xPathParserTokenManager3.equals((Object)xPathParserTokenManager0));
      assertEquals(29, simpleCharStream1.getLine());
      assertEquals(83, simpleCharStream1.getEndColumn());
      assertEquals(29, simpleCharStream1.getEndLine());
      assertEquals(29, simpleCharStream1.getBeginLine());
      assertEquals(83, simpleCharStream1.getColumn());
      assertEquals(83, simpleCharStream1.getBeginColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream1.bufpos);
      assertNotNull(xPathParserTokenManager3);
      
      Token token1 = xPathParserTokenManager1.getNextToken();
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(simpleCharStream1.equals((Object)simpleCharStream2));
      assertFalse(simpleCharStream1.equals((Object)simpleCharStream0));
      assertFalse(xPathParserTokenManager1.equals((Object)xPathParserTokenManager0));
      assertFalse(xPathParserTokenManager1.equals((Object)xPathParserTokenManager2));
      assertFalse(xPathParserTokenManager1.equals((Object)xPathParserTokenManager3));
      assertFalse(token1.equals((Object)token0));
      assertEquals(29, simpleCharStream1.getLine());
      assertEquals(84, simpleCharStream1.getBeginColumn());
      assertEquals(84, simpleCharStream1.getEndColumn());
      assertEquals(29, simpleCharStream1.getEndLine());
      assertEquals(29, simpleCharStream1.getBeginLine());
      assertEquals(84, simpleCharStream1.getColumn());
      assertEquals("n", token1.toString());
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(simpleCharStream1, simpleCharStream2);
      assertNotSame(simpleCharStream1, simpleCharStream0);
      assertNotSame(xPathParserTokenManager1, xPathParserTokenManager0);
      assertNotSame(xPathParserTokenManager1, xPathParserTokenManager2);
      assertNotSame(xPathParserTokenManager1, xPathParserTokenManager3);
      assertNotSame(token1, token0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, simpleCharStream1.bufpos);
      assertEquals(84, token1.endColumn);
      assertEquals(84, token1.beginColumn);
      assertEquals(78, token1.kind);
      assertEquals(29, token1.endLine);
      assertEquals(29, token1.beginLine);
      assertNotNull(token1);
      
      Token token2 = xPathParserTokenManager3.getNextToken();
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(simpleCharStream1.equals((Object)simpleCharStream2));
      assertFalse(simpleCharStream1.equals((Object)simpleCharStream0));
      assertFalse(xPathParserTokenManager3.equals((Object)xPathParserTokenManager2));
      assertFalse(xPathParserTokenManager3.equals((Object)xPathParserTokenManager1));
      assertFalse(xPathParserTokenManager3.equals((Object)xPathParserTokenManager0));
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
      assertEquals(85, simpleCharStream1.getColumn());
      assertEquals(29, simpleCharStream1.getLine());
      assertEquals(85, simpleCharStream1.getBeginColumn());
      assertEquals(85, simpleCharStream1.getEndColumn());
      assertEquals(29, simpleCharStream1.getEndLine());
      assertEquals(29, simpleCharStream1.getBeginLine());
      assertEquals(">", token2.toString());
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(simpleCharStream1, simpleCharStream2);
      assertNotSame(simpleCharStream1, simpleCharStream0);
      assertNotSame(xPathParserTokenManager3, xPathParserTokenManager2);
      assertNotSame(xPathParserTokenManager3, xPathParserTokenManager1);
      assertNotSame(xPathParserTokenManager3, xPathParserTokenManager0);
      assertNotSame(token2, token0);
      assertNotSame(token2, token1);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(2, simpleCharStream1.bufpos);
      assertEquals(29, token2.beginLine);
      assertEquals(29, token2.endLine);
      assertEquals(85, token2.beginColumn);
      assertEquals(85, token2.endColumn);
      assertEquals(15, token2.kind);
      assertNotNull(token2);
      
      Token token3 = xPathParserTokenManager0.getNextToken();
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(simpleCharStream0.equals((Object)simpleCharStream1));
      assertFalse(simpleCharStream0.equals((Object)simpleCharStream2));
      assertFalse(xPathParserTokenManager0.equals((Object)xPathParserTokenManager2));
      assertFalse(xPathParserTokenManager0.equals((Object)xPathParserTokenManager1));
      assertFalse(xPathParserTokenManager0.equals((Object)xPathParserTokenManager3));
      assertFalse(token3.equals((Object)token0));
      assertFalse(token3.equals((Object)token2));
      assertFalse(token3.equals((Object)token1));
      assertEquals(109, simpleCharStream0.getEndLine());
      assertEquals(109, simpleCharStream0.getBeginLine());
      assertEquals(109, simpleCharStream0.getLine());
      assertEquals((-1148), simpleCharStream0.getBeginColumn());
      assertEquals((-1147), simpleCharStream0.getColumn());
      assertEquals((-1147), simpleCharStream0.getEndColumn());
      assertEquals("I7", token3.toString());
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(simpleCharStream0, simpleCharStream1);
      assertNotSame(simpleCharStream0, simpleCharStream2);
      assertNotSame(xPathParserTokenManager0, xPathParserTokenManager2);
      assertNotSame(xPathParserTokenManager0, xPathParserTokenManager1);
      assertNotSame(xPathParserTokenManager0, xPathParserTokenManager3);
      assertNotSame(token3, token0);
      assertNotSame(token3, token2);
      assertNotSame(token3, token1);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, simpleCharStream0.bufpos);
      assertEquals(78, token3.kind);
      assertEquals(109, token3.beginLine);
      assertEquals(109, token3.endLine);
      assertEquals((-1147), token3.endColumn);
      assertEquals((-1148), token3.beginColumn);
      assertNotNull(token3);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      StringReader stringReader0 = new StringReader("nkkz");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream0);
      
      char char0 = simpleCharStream0.readChar();
      assertEquals('n', char0);
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.bufpos);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.bufpos);
      assertNotNull(xPathParserTokenManager0);
      
      xPathParserTokenManager0.ReInit(simpleCharStream0);
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.bufpos);
      
      XPathParserTokenManager xPathParserTokenManager1 = new XPathParserTokenManager(simpleCharStream0);
      assertFalse(xPathParserTokenManager1.equals((Object)xPathParserTokenManager0));
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.bufpos);
      assertNotNull(xPathParserTokenManager1);
      
      Token token0 = xPathParserTokenManager1.getNextToken();
      assertFalse(xPathParserTokenManager1.equals((Object)xPathParserTokenManager0));
      assertEquals(4, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(4, simpleCharStream0.getColumn());
      assertEquals(2, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals("kkz", token0.toString());
      assertNotSame(xPathParserTokenManager1, xPathParserTokenManager0);
      assertEquals(3, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(78, token0.kind);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
      assertEquals(2, token0.beginColumn);
      assertEquals(4, token0.endColumn);
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      StringReader stringReader0 = new StringReader("*8t^");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals("*", token0.toString());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.bufpos);
      assertEquals(1, token0.endLine);
      assertEquals(88, token0.kind);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.beginColumn);
      assertNotNull(token0);
      
      Token token1 = xPathParserTokenManager0.getNextToken();
      assertFalse(token1.equals((Object)token0));
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(2, simpleCharStream0.getBeginColumn());
      assertEquals(2, simpleCharStream0.getColumn());
      assertEquals(2, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals("8", token1.toString());
      assertNotSame(token1, token0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, simpleCharStream0.bufpos);
      assertEquals(2, token1.beginColumn);
      assertEquals(2, token1.endColumn);
      assertEquals(20, token1.kind);
      assertEquals(1, token1.endLine);
      assertEquals(1, token1.beginLine);
      assertNotNull(token1);
      
      Token token2 = xPathParserTokenManager0.jjFillToken();
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(2, simpleCharStream0.getBeginColumn());
      assertEquals(2, simpleCharStream0.getColumn());
      assertEquals(2, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals("8", token2.toString());
      assertNotSame(token2, token0);
      assertNotSame(token2, token1);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, simpleCharStream0.bufpos);
      assertEquals(2, token2.beginColumn);
      assertEquals(1, token2.endLine);
      assertEquals(1, token2.beginLine);
      assertEquals(20, token2.kind);
      assertEquals(2, token2.endColumn);
      assertNotNull(token2);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      StringReader stringReader0 = new StringReader("2JxZqO;:'");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(1, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals("2", token0.toString());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.bufpos);
      assertEquals(20, token0.kind);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
      assertNotNull(token0);
      
      Token token1 = xPathParserTokenManager0.getNextToken();
      assertFalse(token1.equals((Object)token0));
      assertEquals(6, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(2, simpleCharStream0.getBeginColumn());
      assertEquals(6, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals("JxZqO", token1.toString());
      assertNotSame(token1, token0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(5, simpleCharStream0.bufpos);
      assertEquals(6, token1.endColumn);
      assertEquals(1, token1.beginLine);
      assertEquals(1, token1.endLine);
      assertEquals(78, token1.kind);
      assertEquals(2, token1.beginColumn);
      assertNotNull(token1);
      
      xPathParserTokenManager0.jjnewStateCnt = 2;
      assertEquals(6, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(2, simpleCharStream0.getBeginColumn());
      assertEquals(6, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      
      char char0 = simpleCharStream0.readChar();
      assertEquals(';', char0);
      assertEquals(7, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(2, simpleCharStream0.getBeginColumn());
      assertEquals(7, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(6, simpleCharStream0.bufpos);
      
      Token token2 = xPathParserTokenManager0.getNextToken();
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
      assertEquals(8, simpleCharStream0.getBeginColumn());
      assertEquals(8, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(8, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(":", token2.toString());
      assertNotSame(token2, token0);
      assertNotSame(token2, token1);
      assertEquals(7, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(79, token2.kind);
      assertEquals(1, token2.beginLine);
      assertEquals(1, token2.endLine);
      assertEquals(8, token2.endColumn);
      assertEquals(8, token2.beginColumn);
      assertNotNull(token2);
      
      // Undeclared exception!
      try { 
        xPathParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 10.  Encountered: <EOF> after : \"\"
         //
         verifyException("org.apache.commons.jxpath.ri.parser.XPathParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      StringReader stringReader0 = new StringReader("..");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 112, 112);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(112, simpleCharStream0.getEndLine());
      assertEquals(112, simpleCharStream0.getBeginColumn());
      assertEquals(113, simpleCharStream0.getColumn());
      assertEquals(112, simpleCharStream0.getLine());
      assertEquals(113, simpleCharStream0.getEndColumn());
      assertEquals(112, simpleCharStream0.getBeginLine());
      assertEquals("..", token0.toString());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, simpleCharStream0.bufpos);
      assertEquals(112, token0.endLine);
      assertEquals(83, token0.kind);
      assertEquals(113, token0.endColumn);
      assertEquals(112, token0.beginLine);
      assertEquals(112, token0.beginColumn);
      assertNotNull(token0);
      
      StringReader stringReader1 = new StringReader("0W]Lnnl$W[3]U=0,R");
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotNull(stringReader1);
      
      simpleCharStream0.ReInit((Reader) stringReader1);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertEquals(112, simpleCharStream0.getBeginColumn());
      assertEquals(112, simpleCharStream0.getBeginLine());
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(stringReader1, stringReader0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      
      SimpleCharStream simpleCharStream1 = new SimpleCharStream(stringReader0);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(simpleCharStream1.equals((Object)simpleCharStream0));
      assertEquals(0, simpleCharStream1.getBeginLine());
      assertEquals(0, simpleCharStream1.getBeginColumn());
      assertEquals((-1), simpleCharStream1.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream1);
      
      XPathParserTokenManager xPathParserTokenManager1 = new XPathParserTokenManager(simpleCharStream1);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(simpleCharStream1.equals((Object)simpleCharStream0));
      assertFalse(xPathParserTokenManager1.equals((Object)xPathParserTokenManager0));
      assertEquals(0, simpleCharStream1.getBeginLine());
      assertEquals(0, simpleCharStream1.getBeginColumn());
      assertEquals((-1), simpleCharStream1.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(xPathParserTokenManager1);
      
      Token token1 = xPathParserTokenManager1.getNextToken();
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(simpleCharStream1.equals((Object)simpleCharStream0));
      assertFalse(xPathParserTokenManager1.equals((Object)xPathParserTokenManager0));
      assertFalse(token1.equals((Object)token0));
      assertEquals(0, simpleCharStream1.getEndColumn());
      assertEquals(0, simpleCharStream1.getBeginLine());
      assertEquals(0, simpleCharStream1.getLine());
      assertEquals(0, simpleCharStream1.getColumn());
      assertEquals(0, simpleCharStream1.getBeginColumn());
      assertEquals(0, simpleCharStream1.getEndLine());
      assertEquals("", token1.toString());
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(simpleCharStream1, simpleCharStream0);
      assertNotSame(xPathParserTokenManager1, xPathParserTokenManager0);
      assertNotSame(token1, token0);
      assertEquals(4095, simpleCharStream1.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, token1.endLine);
      assertEquals(0, token1.kind);
      assertEquals(0, token1.beginColumn);
      assertEquals(0, token1.beginLine);
      assertEquals(0, token1.endColumn);
      assertNotNull(token1);
      
      Token token2 = xPathParserTokenManager0.getNextToken();
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(simpleCharStream0.equals((Object)simpleCharStream1));
      assertFalse(xPathParserTokenManager0.equals((Object)xPathParserTokenManager1));
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals("0", token2.toString());
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(simpleCharStream0, simpleCharStream1);
      assertNotSame(xPathParserTokenManager0, xPathParserTokenManager1);
      assertNotSame(token2, token0);
      assertNotSame(token2, token1);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.bufpos);
      assertEquals(1, token2.beginColumn);
      assertEquals(1, token2.beginLine);
      assertEquals(1, token2.endLine);
      assertEquals(20, token2.kind);
      assertEquals(1, token2.endColumn);
      assertNotNull(token2);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      StringReader stringReader0 = new StringReader("position");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(8, simpleCharStream0.getEndColumn());
      assertEquals(8, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals("position", token0.toString());
      assertEquals(7, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, token0.endLine);
      assertEquals(8, token0.endColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(49, token0.kind);
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      StringReader stringReader0 = new StringReader("X^SGVwX>^LK0vcE,D");
      assertNotNull(stringReader0);
      
      int int0 = stringReader0.read();
      assertEquals(88, int0);
      
      StringReader stringReader1 = new StringReader("X^SGVwX>^LK0vcE,D");
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotNull(stringReader1);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(xPathParserTokenManager0);
      
      // Undeclared exception!
      try { 
        xPathParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 1.  Encountered: \"^\" (94), after : \"\"
         //
         verifyException("org.apache.commons.jxpath.ri.parser.XPathParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      StringReader stringReader0 = new StringReader("*8t^");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader("MH`elfv?J8Q;Vg#>R");
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotNull(stringReader1);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(2, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(2, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals("MH", token0.toString());
      assertNotSame(stringReader1, stringReader0);
      assertEquals(1, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, token0.endLine);
      assertEquals(2, token0.endColumn);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(78, token0.kind);
      assertNotNull(token0);
      
      // Undeclared exception!
      try { 
        xPathParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 3.  Encountered: \"`\" (96), after : \"\"
         //
         verifyException("org.apache.commons.jxpath.ri.parser.XPathParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      StringReader stringReader0 = new StringReader("U5yI:P`");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 11, 11);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream0);
      
      stringReader0.reset();
      simpleCharStream0.backup(0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getEndColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getEndLine());
      assertEquals(0, simpleCharStream0.getColumn());
      assertEquals(0, simpleCharStream0.getLine());
      assertEquals(4095, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getEndColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getEndLine());
      assertEquals(0, simpleCharStream0.getColumn());
      assertEquals(0, simpleCharStream0.getLine());
      assertEquals(4095, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(xPathParserTokenManager0);
      
      xPathParserTokenManager0.jjmatchedPos = 11;
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getEndColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getEndLine());
      assertEquals(0, simpleCharStream0.getColumn());
      assertEquals(0, simpleCharStream0.getLine());
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(xPathParserTokenManager0.debugStream, false);
      assertEquals(4095, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(mockPrintStream0);
      
      xPathParserTokenManager0.setDebugStream(mockPrintStream0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getEndColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getEndLine());
      assertEquals(0, simpleCharStream0.getColumn());
      assertEquals(0, simpleCharStream0.getLine());
      assertEquals(4095, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      // Undeclared exception!
      try { 
        xPathParserTokenManager0.getNextToken();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4096
         //
         verifyException("org.apache.commons.jxpath.ri.parser.SimpleCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      StringReader stringReader0 = new StringReader("div");
      assertNotNull(stringReader0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager((SimpleCharStream) null);
      assertNotNull(xPathParserTokenManager0);
      
      // Undeclared exception!
      try { 
        xPathParserTokenManager0.ReInit((SimpleCharStream) null, 2869);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 2869. State unchanged.
         //
         verifyException("org.apache.commons.jxpath.ri.parser.XPathParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      int int0 = stringReader0.read();
      assertEquals((-1), int0);
      
      long long0 = stringReader0.skip(0L);
      assertEquals(0L, long0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, (-280), (-280));
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(0, simpleCharStream0.getEndLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getEndColumn());
      assertEquals(0, simpleCharStream0.getColumn());
      assertEquals(0, simpleCharStream0.getLine());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals("", token0.toString());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(4095, simpleCharStream0.bufpos);
      assertEquals(0, token0.endColumn);
      assertEquals(0, token0.beginColumn);
      assertEquals(0, token0.beginLine);
      assertEquals(0, token0.kind);
      assertEquals(0, token0.endLine);
      assertNotNull(token0);
      
      simpleCharStream0.UpdateLineColumn('1');
      assertEquals((-280), simpleCharStream0.getColumn());
      assertEquals((-280), simpleCharStream0.getLine());
      assertEquals((-280), simpleCharStream0.getBeginLine());
      assertEquals((-280), simpleCharStream0.getEndLine());
      assertEquals((-280), simpleCharStream0.getEndColumn());
      assertEquals((-280), simpleCharStream0.getBeginColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(4095, simpleCharStream0.bufpos);
      
      xPathParserTokenManager0.jjmatchedKind = 0;
      assertEquals((-280), simpleCharStream0.getColumn());
      assertEquals((-280), simpleCharStream0.getLine());
      assertEquals((-280), simpleCharStream0.getBeginLine());
      assertEquals((-280), simpleCharStream0.getEndLine());
      assertEquals((-280), simpleCharStream0.getEndColumn());
      assertEquals((-280), simpleCharStream0.getBeginColumn());
      
      xPathParserTokenManager0.ReInit(simpleCharStream0);
      assertEquals((-280), simpleCharStream0.getColumn());
      assertEquals((-280), simpleCharStream0.getLine());
      assertEquals((-280), simpleCharStream0.getBeginLine());
      assertEquals((-280), simpleCharStream0.getEndLine());
      assertEquals((-280), simpleCharStream0.getEndColumn());
      assertEquals((-280), simpleCharStream0.getBeginColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(4095, simpleCharStream0.bufpos);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      StringReader stringReader0 = new StringReader("comme");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader("jC8P`Z'1Qcf7p +Xs'");
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotNull(stringReader1);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertEquals(4, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(4, simpleCharStream0.getColumn());
      assertEquals("jC8P", token0.toString());
      assertNotSame(stringReader1, stringReader0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(3, simpleCharStream0.bufpos);
      assertEquals(1, token0.beginColumn);
      assertEquals(78, token0.kind);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
      assertEquals(4, token0.endColumn);
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      StringReader stringReader0 = new StringReader("org.apache.commons.jxpath.ri.parser.XPathParserTokxnManag>r");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(57, simpleCharStream0.getEndColumn());
      assertEquals(57, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals("org.apache.commons.jxpath.ri.parser.XPathParserTokxnManag", token0.toString());
      assertEquals(56, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
      assertEquals(57, token0.endColumn);
      assertEquals(78, token0.kind);
      assertNotNull(token0);
      
      Token token1 = xPathParserTokenManager0.getNextToken();
      assertFalse(token1.equals((Object)token0));
      assertEquals(58, simpleCharStream0.getEndColumn());
      assertEquals(58, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(58, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(">", token1.toString());
      assertNotSame(token1, token0);
      assertEquals(57, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(58, token1.endColumn);
      assertEquals(1, token1.endLine);
      assertEquals(15, token1.kind);
      assertEquals(1, token1.beginLine);
      assertEquals(58, token1.beginColumn);
      assertNotNull(token1);
      
      Token token2 = xPathParserTokenManager0.getNextToken();
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
      assertEquals(59, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(59, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(59, simpleCharStream0.getEndColumn());
      assertEquals("r", token2.toString());
      assertNotSame(token2, token0);
      assertNotSame(token2, token1);
      assertEquals(58, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, token2.endLine);
      assertEquals(1, token2.beginLine);
      assertEquals(59, token2.endColumn);
      assertEquals(59, token2.beginColumn);
      assertEquals(78, token2.kind);
      assertNotNull(token2);
      
      // Undeclared exception!
      try { 
        xPathParserTokenManager0.ReInit(simpleCharStream0, 15);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 15. State unchanged.
         //
         verifyException("org.apache.commons.jxpath.ri.parser.XPathParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      StringReader stringReader0 = new StringReader("\"and\"");
      assertNotNull(stringReader0);
      
      int int0 = stringReader0.read();
      assertEquals(34, int0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(3, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(3, simpleCharStream0.getEndColumn());
      assertEquals("and", token0.toString());
      assertEquals(2, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(3, token0.endColumn);
      assertEquals(1, token0.endLine);
      assertEquals(28, token0.kind);
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      StringReader stringReader0 = new StringReader("sicW");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader("Rw`UDH");
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotNull(stringReader1);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(2, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(2, simpleCharStream0.getEndColumn());
      assertEquals("Rw", token0.toString());
      assertNotSame(stringReader1, stringReader0);
      assertEquals(1, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(78, token0.kind);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(2, token0.endColumn);
      assertEquals(1, token0.endLine);
      assertNotNull(token0);
      
      XPathParserTokenManager xPathParserTokenManager1 = new XPathParserTokenManager(simpleCharStream0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(xPathParserTokenManager1.equals((Object)xPathParserTokenManager0));
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(2, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(2, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(xPathParserTokenManager1);
      
      // Undeclared exception!
      try { 
        xPathParserTokenManager1.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 3.  Encountered: \"`\" (96), after : \"\"
         //
         verifyException("org.apache.commons.jxpath.ri.parser.XPathParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      StringReader stringReader0 = new StringReader(".Q.");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, (-403), 112);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals((-403), simpleCharStream0.getBeginLine());
      assertEquals((-403), simpleCharStream0.getLine());
      assertEquals(112, simpleCharStream0.getBeginColumn());
      assertEquals(112, simpleCharStream0.getColumn());
      assertEquals((-403), simpleCharStream0.getEndLine());
      assertEquals(112, simpleCharStream0.getEndColumn());
      assertEquals(".", token0.toString());
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(82, token0.kind);
      assertEquals(112, token0.beginColumn);
      assertEquals(112, token0.endColumn);
      assertEquals((-403), token0.endLine);
      assertEquals((-403), token0.beginLine);
      assertNotNull(token0);
      
      StringReader stringReader1 = new StringReader("yy+?zvUrnmc\"Nd!=yC5");
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotNull(stringReader1);
      
      simpleCharStream0.ReInit((Reader) stringReader1);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertEquals((-403), simpleCharStream0.getBeginLine());
      assertEquals(112, simpleCharStream0.getBeginColumn());
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(stringReader1, stringReader0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      SimpleCharStream simpleCharStream1 = new SimpleCharStream(stringReader0);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(simpleCharStream1.equals((Object)simpleCharStream0));
      assertEquals(0, simpleCharStream1.getBeginColumn());
      assertEquals(0, simpleCharStream1.getBeginLine());
      assertEquals((-1), simpleCharStream1.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream1);
      
      char[] charArray0 = new char[0];
      int int0 = stringReader0.read(charArray0);
      assertEquals(0, int0);
      assertArrayEquals(new char[] {}, charArray0);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertNotSame(stringReader0, stringReader1);
      assertEquals(0, charArray0.length);
      
      Token token1 = xPathParserTokenManager0.getNextToken();
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(simpleCharStream0.equals((Object)simpleCharStream1));
      assertFalse(token1.equals((Object)token0));
      assertEquals(2, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(2, simpleCharStream0.getColumn());
      assertEquals("yy", token1.toString());
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(simpleCharStream0, simpleCharStream1);
      assertNotSame(token1, token0);
      assertEquals(1, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(78, token1.kind);
      assertEquals(2, token1.endColumn);
      assertEquals(1, token1.endLine);
      assertEquals(1, token1.beginLine);
      assertEquals(1, token1.beginColumn);
      assertNotNull(token1);
      
      XPathParserTokenManager xPathParserTokenManager1 = new XPathParserTokenManager(simpleCharStream0);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(simpleCharStream0.equals((Object)simpleCharStream1));
      assertFalse(xPathParserTokenManager1.equals((Object)xPathParserTokenManager0));
      assertEquals(2, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(2, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(xPathParserTokenManager1);
      
      Token token2 = xPathParserTokenManager0.getNextToken();
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(simpleCharStream0.equals((Object)simpleCharStream1));
      assertFalse(xPathParserTokenManager0.equals((Object)xPathParserTokenManager1));
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
      assertEquals(3, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(3, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(3, simpleCharStream0.getColumn());
      assertEquals("+", token2.toString());
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(simpleCharStream0, simpleCharStream1);
      assertNotSame(xPathParserTokenManager0, xPathParserTokenManager1);
      assertNotSame(token2, token0);
      assertNotSame(token2, token1);
      assertEquals(2, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(9, token2.kind);
      assertEquals(3, token2.beginColumn);
      assertEquals(3, token2.endColumn);
      assertEquals(1, token2.endLine);
      assertEquals(1, token2.beginLine);
      assertNotNull(token2);
      
      // Undeclared exception!
      try { 
        xPathParserTokenManager1.ReInit(simpleCharStream1, 105);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 105. State unchanged.
         //
         verifyException("org.apache.commons.jxpath.ri.parser.XPathParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      StringReader stringReader0 = new StringReader(")z?]a2`");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(")", token0.toString());
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, token0.endColumn);
      assertEquals(81, token0.kind);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
      assertNotNull(token0);
      
      Token token1 = xPathParserTokenManager0.getNextToken();
      assertFalse(token1.equals((Object)token0));
      assertEquals(2, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(2, simpleCharStream0.getColumn());
      assertEquals(2, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals("z", token1.toString());
      assertNotSame(token1, token0);
      assertEquals(1, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(2, token1.beginColumn);
      assertEquals(2, token1.endColumn);
      assertEquals(78, token1.kind);
      assertEquals(1, token1.endLine);
      assertEquals(1, token1.beginLine);
      assertNotNull(token1);
      
      // Undeclared exception!
      try { 
        xPathParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 3.  Encountered: \"?\" (63), after : \"\"
         //
         verifyException("org.apache.commons.jxpath.ri.parser.XPathParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      StringReader stringReader0 = new StringReader("O]");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals("O", token0.toString());
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.endColumn);
      assertEquals(78, token0.kind);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginColumn);
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      StringReader stringReader0 = new StringReader("node");
      assertNotNull(stringReader0);
      
      int int0 = stringReader0.read();
      assertEquals(110, int0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = '~';
      int int1 = stringReader0.read(charArray0);
      assertEquals(1, int1);
      assertArrayEquals(new char[] {'o'}, charArray0);
      assertFalse(int1 == int0);
      assertEquals(1, charArray0.length);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(2, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(2, simpleCharStream0.getColumn());
      assertEquals("de", token0.toString());
      assertEquals(1, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(2, token0.endColumn);
      assertEquals(78, token0.kind);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      StringReader stringReader0 = new StringReader("..");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 112, 112);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(112, simpleCharStream0.getEndLine());
      assertEquals(113, simpleCharStream0.getEndColumn());
      assertEquals(112, simpleCharStream0.getBeginColumn());
      assertEquals(113, simpleCharStream0.getColumn());
      assertEquals(112, simpleCharStream0.getLine());
      assertEquals(112, simpleCharStream0.getBeginLine());
      assertEquals("..", token0.toString());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, simpleCharStream0.bufpos);
      assertEquals(112, token0.beginLine);
      assertEquals(113, token0.endColumn);
      assertEquals(112, token0.endLine);
      assertEquals(83, token0.kind);
      assertEquals(112, token0.beginColumn);
      assertNotNull(token0);
      
      simpleCharStream0.ExpandBuff(true);
      assertEquals(0, simpleCharStream0.getColumn());
      assertEquals(0, simpleCharStream0.getEndLine());
      assertEquals(112, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getEndColumn());
      assertEquals(0, simpleCharStream0.getLine());
      assertEquals(112, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(4097, simpleCharStream0.bufpos);
      
      StringReader stringReader1 = new StringReader("xIf*&.Wt4wWJo4SkY?M");
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotNull(stringReader1);
      
      simpleCharStream0.ReInit((Reader) stringReader1);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(stringReader1, stringReader0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      
      SimpleCharStream simpleCharStream1 = new SimpleCharStream(stringReader0);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(simpleCharStream1.equals((Object)simpleCharStream0));
      assertEquals(0, simpleCharStream1.getBeginLine());
      assertEquals(0, simpleCharStream1.getBeginColumn());
      assertEquals((-1), simpleCharStream1.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream1);
      
      XPathParserTokenManager xPathParserTokenManager1 = new XPathParserTokenManager(simpleCharStream1);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(simpleCharStream1.equals((Object)simpleCharStream0));
      assertFalse(xPathParserTokenManager1.equals((Object)xPathParserTokenManager0));
      assertEquals(0, simpleCharStream1.getBeginLine());
      assertEquals(0, simpleCharStream1.getBeginColumn());
      assertEquals((-1), simpleCharStream1.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(xPathParserTokenManager1);
      
      Token token1 = xPathParserTokenManager1.getNextToken();
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(simpleCharStream1.equals((Object)simpleCharStream0));
      assertFalse(xPathParserTokenManager1.equals((Object)xPathParserTokenManager0));
      assertFalse(token1.equals((Object)token0));
      assertEquals(0, simpleCharStream1.getEndLine());
      assertEquals(0, simpleCharStream1.getBeginLine());
      assertEquals(0, simpleCharStream1.getColumn());
      assertEquals(0, simpleCharStream1.getLine());
      assertEquals(0, simpleCharStream1.getBeginColumn());
      assertEquals(0, simpleCharStream1.getEndColumn());
      assertEquals("", token1.toString());
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(simpleCharStream1, simpleCharStream0);
      assertNotSame(xPathParserTokenManager1, xPathParserTokenManager0);
      assertNotSame(token1, token0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(4095, simpleCharStream1.bufpos);
      assertEquals(0, token1.endLine);
      assertEquals(0, token1.kind);
      assertEquals(0, token1.beginLine);
      assertEquals(0, token1.beginColumn);
      assertEquals(0, token1.endColumn);
      assertNotNull(token1);
      
      Token token2 = xPathParserTokenManager0.getNextToken();
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(simpleCharStream0.equals((Object)simpleCharStream1));
      assertFalse(xPathParserTokenManager0.equals((Object)xPathParserTokenManager1));
      assertFalse(token2.equals((Object)token1));
      assertFalse(token2.equals((Object)token0));
      assertEquals(3, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(3, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals("xIf", token2.toString());
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(simpleCharStream0, simpleCharStream1);
      assertNotSame(xPathParserTokenManager0, xPathParserTokenManager1);
      assertNotSame(token2, token1);
      assertNotSame(token2, token0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(2, simpleCharStream0.bufpos);
      assertEquals(78, token2.kind);
      assertEquals(1, token2.beginLine);
      assertEquals(1, token2.beginColumn);
      assertEquals(3, token2.endColumn);
      assertEquals(1, token2.endLine);
      assertNotNull(token2);
      
      Token token3 = xPathParserTokenManager0.getNextToken();
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(simpleCharStream0.equals((Object)simpleCharStream1));
      assertFalse(xPathParserTokenManager0.equals((Object)xPathParserTokenManager1));
      assertFalse(token3.equals((Object)token0));
      assertFalse(token3.equals((Object)token2));
      assertFalse(token3.equals((Object)token1));
      assertEquals(4, simpleCharStream0.getColumn());
      assertEquals(4, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(4, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals("*", token3.toString());
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(simpleCharStream0, simpleCharStream1);
      assertNotSame(xPathParserTokenManager0, xPathParserTokenManager1);
      assertNotSame(token3, token0);
      assertNotSame(token3, token2);
      assertNotSame(token3, token1);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(3, simpleCharStream0.bufpos);
      assertEquals(4, token3.endColumn);
      assertEquals(4, token3.beginColumn);
      assertEquals(88, token3.kind);
      assertEquals(1, token3.endLine);
      assertEquals(1, token3.beginLine);
      assertNotNull(token3);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      StringReader stringReader0 = new StringReader("_iWMFVDZp%ZVXp=");
      assertNotNull(stringReader0);
      
      boolean boolean0 = stringReader0.ready();
      assertTrue(boolean0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 85, 85);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(85, simpleCharStream0.getBeginColumn());
      assertEquals(85, simpleCharStream0.getEndColumn());
      assertEquals(85, simpleCharStream0.getEndLine());
      assertEquals(85, simpleCharStream0.getBeginLine());
      assertEquals(85, simpleCharStream0.getLine());
      assertEquals(85, simpleCharStream0.getColumn());
      assertEquals("_", token0.toString());
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(85, token0.endLine);
      assertEquals(85, token0.endColumn);
      assertEquals(78, token0.kind);
      assertEquals(85, token0.beginLine);
      assertEquals(85, token0.beginColumn);
      assertNotNull(token0);
      
      xPathParserTokenManager0.ReInit(simpleCharStream0);
      assertEquals(85, simpleCharStream0.getBeginColumn());
      assertEquals(85, simpleCharStream0.getEndColumn());
      assertEquals(85, simpleCharStream0.getEndLine());
      assertEquals(85, simpleCharStream0.getBeginLine());
      assertEquals(85, simpleCharStream0.getLine());
      assertEquals(85, simpleCharStream0.getColumn());
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      xPathParserTokenManager0.input_stream = simpleCharStream0;
      assertEquals(85, simpleCharStream0.getBeginColumn());
      assertEquals(85, simpleCharStream0.getEndColumn());
      assertEquals(85, simpleCharStream0.getEndLine());
      assertEquals(85, simpleCharStream0.getBeginLine());
      assertEquals(85, simpleCharStream0.getLine());
      assertEquals(85, simpleCharStream0.getColumn());
      assertEquals(85, xPathParserTokenManager0.input_stream.getBeginColumn());
      assertEquals(85, xPathParserTokenManager0.input_stream.getEndLine());
      assertEquals(85, xPathParserTokenManager0.input_stream.getLine());
      assertEquals(85, xPathParserTokenManager0.input_stream.getEndColumn());
      assertEquals(85, xPathParserTokenManager0.input_stream.getColumn());
      assertEquals(85, xPathParserTokenManager0.input_stream.getBeginLine());
      
      boolean boolean1 = stringReader0.markSupported();
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      // Undeclared exception!
      try { 
        xPathParserTokenManager0.ReInit(simpleCharStream0, 85);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 85. State unchanged.
         //
         verifyException("org.apache.commons.jxpath.ri.parser.XPathParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      StringReader stringReader0 = new StringReader("!=");
      assertNotNull(stringReader0);
      
      int int0 = stringReader0.read();
      assertEquals(33, int0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals("=", token0.toString());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.bufpos);
      assertEquals(1, token0.endLine);
      assertEquals(11, token0.kind);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.beginColumn);
      assertNotNull(token0);
      
      Token token1 = xPathParserTokenManager0.getNextToken();
      assertFalse(token1.equals((Object)token0));
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals("", token1.toString());
      assertNotSame(token1, token0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.bufpos);
      assertEquals(1, token1.endColumn);
      assertEquals(1, token1.beginColumn);
      assertEquals(1, token1.endLine);
      assertEquals(1, token1.beginLine);
      assertEquals(0, token1.kind);
      assertNotNull(token1);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      StringReader stringReader0 = new StringReader("60z$");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 81, 64);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(64, simpleCharStream0.getBeginColumn());
      assertEquals(81, simpleCharStream0.getEndLine());
      assertEquals(81, simpleCharStream0.getBeginLine());
      assertEquals(65, simpleCharStream0.getColumn());
      assertEquals(81, simpleCharStream0.getLine());
      assertEquals(65, simpleCharStream0.getEndColumn());
      assertEquals("60", token0.toString());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, simpleCharStream0.bufpos);
      assertEquals(20, token0.kind);
      assertEquals(65, token0.endColumn);
      assertEquals(64, token0.beginColumn);
      assertEquals(81, token0.endLine);
      assertEquals(81, token0.beginLine);
      assertNotNull(token0);
      
      Token token1 = xPathParserTokenManager0.getNextToken();
      assertFalse(token1.equals((Object)token0));
      assertEquals(81, simpleCharStream0.getEndLine());
      assertEquals(81, simpleCharStream0.getBeginLine());
      assertEquals(81, simpleCharStream0.getLine());
      assertEquals(66, simpleCharStream0.getEndColumn());
      assertEquals(66, simpleCharStream0.getBeginColumn());
      assertEquals(66, simpleCharStream0.getColumn());
      assertEquals("z", token1.toString());
      assertNotSame(token1, token0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(2, simpleCharStream0.bufpos);
      assertEquals(66, token1.endColumn);
      assertEquals(81, token1.beginLine);
      assertEquals(66, token1.beginColumn);
      assertEquals(78, token1.kind);
      assertEquals(81, token1.endLine);
      assertNotNull(token1);
      
      Token token2 = xPathParserTokenManager0.getNextToken();
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
      assertEquals(81, simpleCharStream0.getEndLine());
      assertEquals(81, simpleCharStream0.getBeginLine());
      assertEquals(81, simpleCharStream0.getLine());
      assertEquals(67, simpleCharStream0.getEndColumn());
      assertEquals(67, simpleCharStream0.getBeginColumn());
      assertEquals(67, simpleCharStream0.getColumn());
      assertEquals("$", token2.toString());
      assertNotSame(token2, token0);
      assertNotSame(token2, token1);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(3, simpleCharStream0.bufpos);
      assertEquals(67, token2.beginColumn);
      assertEquals(67, token2.endColumn);
      assertEquals(81, token2.endLine);
      assertEquals(81, token2.beginLine);
      assertEquals(17, token2.kind);
      assertNotNull(token2);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      StringReader stringReader0 = new StringReader("..");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 112, 112);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(113, simpleCharStream0.getColumn());
      assertEquals(112, simpleCharStream0.getBeginLine());
      assertEquals(112, simpleCharStream0.getBeginColumn());
      assertEquals(112, simpleCharStream0.getLine());
      assertEquals(112, simpleCharStream0.getEndLine());
      assertEquals(113, simpleCharStream0.getEndColumn());
      assertEquals("..", token0.toString());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, simpleCharStream0.bufpos);
      assertEquals(112, token0.beginColumn);
      assertEquals(112, token0.endLine);
      assertEquals(83, token0.kind);
      assertEquals(113, token0.endColumn);
      assertEquals(112, token0.beginLine);
      assertNotNull(token0);
      
      StringReader stringReader1 = new StringReader("xIf*&.Wt4wWJo4SkY?M");
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotNull(stringReader1);
      
      SimpleCharStream simpleCharStream1 = new SimpleCharStream(stringReader1, 1, 88);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(simpleCharStream1.equals((Object)simpleCharStream0));
      assertEquals(0, simpleCharStream1.getBeginColumn());
      assertEquals(0, simpleCharStream1.getBeginLine());
      assertEquals((-1), simpleCharStream1.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream1);
      
      XPathParserTokenManager xPathParserTokenManager1 = new XPathParserTokenManager(simpleCharStream1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(simpleCharStream1.equals((Object)simpleCharStream0));
      assertFalse(xPathParserTokenManager1.equals((Object)xPathParserTokenManager0));
      assertEquals(0, simpleCharStream1.getBeginColumn());
      assertEquals(0, simpleCharStream1.getBeginLine());
      assertEquals((-1), simpleCharStream1.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(xPathParserTokenManager1);
      
      Token token1 = xPathParserTokenManager1.getNextToken();
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(simpleCharStream1.equals((Object)simpleCharStream0));
      assertFalse(xPathParserTokenManager1.equals((Object)xPathParserTokenManager0));
      assertFalse(token1.equals((Object)token0));
      assertEquals(1, simpleCharStream1.getLine());
      assertEquals(90, simpleCharStream1.getColumn());
      assertEquals(1, simpleCharStream1.getBeginLine());
      assertEquals(1, simpleCharStream1.getEndLine());
      assertEquals(88, simpleCharStream1.getBeginColumn());
      assertEquals(90, simpleCharStream1.getEndColumn());
      assertEquals("xIf", token1.toString());
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(simpleCharStream1, simpleCharStream0);
      assertNotSame(xPathParserTokenManager1, xPathParserTokenManager0);
      assertNotSame(token1, token0);
      assertEquals(2, simpleCharStream1.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(78, token1.kind);
      assertEquals(90, token1.endColumn);
      assertEquals(1, token1.endLine);
      assertEquals(1, token1.beginLine);
      assertEquals(88, token1.beginColumn);
      assertNotNull(token1);
      
      simpleCharStream1.UpdateLineColumn('1');
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(simpleCharStream1.equals((Object)simpleCharStream0));
      assertEquals(92, simpleCharStream1.getColumn());
      assertEquals(1, simpleCharStream1.getLine());
      assertEquals(1, simpleCharStream1.getBeginLine());
      assertEquals(1, simpleCharStream1.getEndLine());
      assertEquals(88, simpleCharStream1.getBeginColumn());
      assertEquals(92, simpleCharStream1.getEndColumn());
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(simpleCharStream1, simpleCharStream0);
      assertEquals(2, simpleCharStream1.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      Token token2 = xPathParserTokenManager0.jjFillToken();
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(simpleCharStream0.equals((Object)simpleCharStream1));
      assertFalse(xPathParserTokenManager0.equals((Object)xPathParserTokenManager1));
      assertFalse(token2.equals((Object)token1));
      assertFalse(token2.equals((Object)token0));
      assertEquals(113, simpleCharStream0.getColumn());
      assertEquals(112, simpleCharStream0.getBeginLine());
      assertEquals(112, simpleCharStream0.getBeginColumn());
      assertEquals(112, simpleCharStream0.getLine());
      assertEquals(112, simpleCharStream0.getEndLine());
      assertEquals(113, simpleCharStream0.getEndColumn());
      assertEquals("..", token2.toString());
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(simpleCharStream0, simpleCharStream1);
      assertNotSame(xPathParserTokenManager0, xPathParserTokenManager1);
      assertNotSame(token2, token1);
      assertNotSame(token2, token0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, simpleCharStream0.bufpos);
      assertEquals(112, token2.beginLine);
      assertEquals(112, token2.endLine);
      assertEquals(83, token2.kind);
      assertEquals(112, token2.beginColumn);
      assertEquals(113, token2.endColumn);
      assertNotNull(token2);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      StringReader stringReader0 = new StringReader("nody");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(4, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(4, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals("nody", token0.toString());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(3, simpleCharStream0.bufpos);
      assertEquals(1, token0.endLine);
      assertEquals(4, token0.endColumn);
      assertEquals(78, token0.kind);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertNotNull(token0);
      
      Token token1 = xPathParserTokenManager0.getNextToken();
      assertFalse(token1.equals((Object)token0));
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(4, simpleCharStream0.getBeginColumn());
      assertEquals(4, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(4, simpleCharStream0.getColumn());
      assertEquals("", token1.toString());
      assertNotSame(token1, token0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(3, simpleCharStream0.bufpos);
      assertEquals(4, token1.endColumn);
      assertEquals(1, token1.endLine);
      assertEquals(1, token1.beginLine);
      assertEquals(0, token1.kind);
      assertEquals(4, token1.beginColumn);
      assertNotNull(token1);
      
      Token token2 = xPathParserTokenManager0.getNextToken();
      assertFalse(token2.equals((Object)token1));
      assertFalse(token2.equals((Object)token0));
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(4, simpleCharStream0.getBeginColumn());
      assertEquals(4, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(4, simpleCharStream0.getColumn());
      assertEquals("", token2.toString());
      assertNotSame(token2, token1);
      assertNotSame(token2, token0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(3, simpleCharStream0.bufpos);
      assertEquals(4, token2.endColumn);
      assertEquals(4, token2.beginColumn);
      assertEquals(1, token2.beginLine);
      assertEquals(0, token2.kind);
      assertEquals(1, token2.endLine);
      assertNotNull(token2);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "TO35upv");
      assertFalse(boolean0);
      
      StringReader stringReader0 = new StringReader("format-number");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(13, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(13, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals("format-number", token0.toString());
      assertEquals(12, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(77, token0.kind);
      assertEquals(13, token0.endColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginColumn);
      assertNotNull(token0);
      
      Token token1 = xPathParserTokenManager0.jjFillToken();
      assertFalse(token1.equals((Object)token0));
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(13, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(13, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals("format-number", token1.toString());
      assertNotSame(token1, token0);
      assertEquals(12, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, token1.beginLine);
      assertEquals(1, token1.beginColumn);
      assertEquals(13, token1.endColumn);
      assertEquals(77, token1.kind);
      assertEquals(1, token1.endLine);
      assertNotNull(token1);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      StringReader stringReader0 = new StringReader("comment");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader("D");
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotNull(stringReader1);
      
      int int0 = stringReader0.read();
      assertEquals(99, int0);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertNotSame(stringReader0, stringReader1);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals("D", token0.toString());
      assertNotSame(stringReader1, stringReader0);
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.endLine);
      assertEquals(78, token0.kind);
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(xPathParserTokenManager0);
      
      // Undeclared exception!
      try { 
        xPathParserTokenManager0.SwitchTo((-1));
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : -1. State unchanged.
         //
         verifyException("org.apache.commons.jxpath.ri.parser.XPathParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      StringReader stringReader0 = new StringReader("s_<h5(lr&o,c*'K&?O+");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(2, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(2, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals("s_", token0.toString());
      assertEquals(1, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(2, token0.endColumn);
      assertEquals(1, token0.beginColumn);
      assertEquals(78, token0.kind);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
      assertNotNull(token0);
      
      Token token1 = xPathParserTokenManager0.getNextToken();
      assertFalse(token1.equals((Object)token0));
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(3, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(3, simpleCharStream0.getBeginColumn());
      assertEquals(3, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals("<", token1.toString());
      assertNotSame(token1, token0);
      assertEquals(2, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(3, token1.endColumn);
      assertEquals(1, token1.endLine);
      assertEquals(3, token1.beginColumn);
      assertEquals(1, token1.beginLine);
      assertEquals(13, token1.kind);
      assertNotNull(token1);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-28);
      StringReader stringReader0 = new StringReader("namespace-uri");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(13, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(13, simpleCharStream0.getColumn());
      assertEquals("namespace-uri", token0.toString());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(12, simpleCharStream0.bufpos);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
      assertEquals(13, token0.endColumn);
      assertEquals(54, token0.kind);
      assertEquals(1, token0.beginColumn);
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      StringReader stringReader0 = new StringReader("4ediv");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 72, 72);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(xPathParserTokenManager0);
      
      XPathParserTokenManager xPathParserTokenManager1 = new XPathParserTokenManager(simpleCharStream0);
      assertFalse(xPathParserTokenManager1.equals((Object)xPathParserTokenManager0));
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(xPathParserTokenManager1);
      
      xPathParserTokenManager1.curChar = '@';
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      
      Token token0 = xPathParserTokenManager1.getNextToken();
      assertFalse(xPathParserTokenManager1.equals((Object)xPathParserTokenManager0));
      assertEquals(72, simpleCharStream0.getEndLine());
      assertEquals(72, simpleCharStream0.getBeginColumn());
      assertEquals(72, simpleCharStream0.getEndColumn());
      assertEquals(72, simpleCharStream0.getColumn());
      assertEquals(72, simpleCharStream0.getLine());
      assertEquals(72, simpleCharStream0.getBeginLine());
      assertEquals("4", token0.toString());
      assertNotSame(xPathParserTokenManager1, xPathParserTokenManager0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.bufpos);
      assertEquals(72, token0.beginColumn);
      assertEquals(72, token0.beginLine);
      assertEquals(72, token0.endLine);
      assertEquals(20, token0.kind);
      assertEquals(72, token0.endColumn);
      assertNotNull(token0);
      
      xPathParserTokenManager1.setDebugStream(xPathParserTokenManager0.debugStream);
      assertFalse(xPathParserTokenManager0.equals((Object)xPathParserTokenManager1));
      assertFalse(xPathParserTokenManager1.equals((Object)xPathParserTokenManager0));
      assertEquals(72, simpleCharStream0.getEndLine());
      assertEquals(72, simpleCharStream0.getBeginColumn());
      assertEquals(72, simpleCharStream0.getEndColumn());
      assertEquals(72, simpleCharStream0.getColumn());
      assertEquals(72, simpleCharStream0.getLine());
      assertEquals(72, simpleCharStream0.getBeginLine());
      assertNotSame(xPathParserTokenManager0, xPathParserTokenManager1);
      assertNotSame(xPathParserTokenManager1, xPathParserTokenManager0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.bufpos);
      
      Token token1 = xPathParserTokenManager1.getNextToken();
      assertFalse(xPathParserTokenManager1.equals((Object)xPathParserTokenManager0));
      assertFalse(token1.equals((Object)token0));
      assertEquals(72, simpleCharStream0.getEndLine());
      assertEquals(76, simpleCharStream0.getColumn());
      assertEquals(73, simpleCharStream0.getBeginColumn());
      assertEquals(72, simpleCharStream0.getLine());
      assertEquals(76, simpleCharStream0.getEndColumn());
      assertEquals(72, simpleCharStream0.getBeginLine());
      assertEquals("ediv", token1.toString());
      assertNotSame(xPathParserTokenManager1, xPathParserTokenManager0);
      assertNotSame(token1, token0);
      assertEquals(4, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(76, token1.endColumn);
      assertEquals(78, token1.kind);
      assertEquals(72, token1.endLine);
      assertEquals(72, token1.beginLine);
      assertEquals(73, token1.beginColumn);
      assertNotNull(token1);
      
      // Undeclared exception!
      try { 
        xPathParserTokenManager0.ReInit(simpleCharStream0, 1691);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 1691. State unchanged.
         //
         verifyException("org.apache.commons.jxpath.ri.parser.XPathParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      StringReader stringReader0 = new StringReader("..");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader("..");
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotNull(stringReader1);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader1, (-1106), (-1106));
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(simpleCharStream0);
      
      simpleCharStream0.ReInit((Reader) stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertNotSame(stringReader1, stringReader0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(xPathParserTokenManager0);
      
      StringReader stringReader2 = new StringReader("w[>");
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertNotNull(stringReader2);
      
      SimpleCharStream simpleCharStream1 = new SimpleCharStream(stringReader2, (-4270), (-1106));
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertFalse(simpleCharStream1.equals((Object)simpleCharStream0));
      assertEquals(0, simpleCharStream1.getBeginColumn());
      assertEquals(0, simpleCharStream1.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream1.bufpos);
      assertNotNull(simpleCharStream1);
      
      XPathParserTokenManager xPathParserTokenManager1 = new XPathParserTokenManager(simpleCharStream1);
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertFalse(simpleCharStream1.equals((Object)simpleCharStream0));
      assertFalse(xPathParserTokenManager1.equals((Object)xPathParserTokenManager0));
      assertEquals(0, simpleCharStream1.getBeginColumn());
      assertEquals(0, simpleCharStream1.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream1.bufpos);
      assertNotNull(xPathParserTokenManager1);
      
      Token token0 = xPathParserTokenManager1.getNextToken();
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertFalse(simpleCharStream1.equals((Object)simpleCharStream0));
      assertFalse(xPathParserTokenManager1.equals((Object)xPathParserTokenManager0));
      assertEquals((-1106), simpleCharStream1.getBeginColumn());
      assertEquals((-4270), simpleCharStream1.getEndLine());
      assertEquals((-1106), simpleCharStream1.getEndColumn());
      assertEquals((-4270), simpleCharStream1.getBeginLine());
      assertEquals((-1106), simpleCharStream1.getColumn());
      assertEquals((-4270), simpleCharStream1.getLine());
      assertEquals("w", token0.toString());
      assertNotSame(stringReader2, stringReader0);
      assertNotSame(stringReader2, stringReader1);
      assertNotSame(simpleCharStream1, simpleCharStream0);
      assertNotSame(xPathParserTokenManager1, xPathParserTokenManager0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream1.bufpos);
      assertEquals((-4270), token0.endLine);
      assertEquals((-1106), token0.endColumn);
      assertEquals((-4270), token0.beginLine);
      assertEquals(78, token0.kind);
      assertEquals((-1106), token0.beginColumn);
      assertNotNull(token0);
      
      Token token1 = xPathParserTokenManager0.getNextToken();
      assertFalse(stringReader1.equals((Object)stringReader2));
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(simpleCharStream0.equals((Object)simpleCharStream1));
      assertFalse(xPathParserTokenManager0.equals((Object)xPathParserTokenManager1));
      assertFalse(token1.equals((Object)token0));
      assertEquals(2, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(2, simpleCharStream0.getEndColumn());
      assertEquals("..", token1.toString());
      assertNotSame(stringReader1, stringReader2);
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(simpleCharStream0, simpleCharStream1);
      assertNotSame(xPathParserTokenManager0, xPathParserTokenManager1);
      assertNotSame(token1, token0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, simpleCharStream0.bufpos);
      assertEquals(1, token1.beginLine);
      assertEquals(1, token1.beginColumn);
      assertEquals(2, token1.endColumn);
      assertEquals(83, token1.kind);
      assertEquals(1, token1.endLine);
      assertNotNull(token1);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      StringReader stringReader0 = new StringReader("fora|number");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(4, simpleCharStream0.getColumn());
      assertEquals(4, simpleCharStream0.getEndColumn());
      assertEquals("fora", token0.toString());
      assertEquals(3, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, token0.endLine);
      assertEquals(4, token0.endColumn);
      assertEquals(1, token0.beginColumn);
      assertEquals(78, token0.kind);
      assertEquals(1, token0.beginLine);
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      StringReader stringReader0 = new StringReader("contains");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 112, 3569);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(simpleCharStream0);
      
      SimpleCharStream simpleCharStream1 = new SimpleCharStream(stringReader0, 3569, 3569);
      assertFalse(simpleCharStream1.equals((Object)simpleCharStream0));
      assertEquals(0, simpleCharStream1.getBeginColumn());
      assertEquals(0, simpleCharStream1.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream1.bufpos);
      assertNotNull(simpleCharStream1);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream1);
      assertFalse(simpleCharStream1.equals((Object)simpleCharStream0));
      assertEquals(0, simpleCharStream1.getBeginColumn());
      assertEquals(0, simpleCharStream1.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream1.bufpos);
      assertNotNull(xPathParserTokenManager0);
      
      StringReader stringReader1 = new StringReader("");
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotNull(stringReader1);
      
      simpleCharStream0.ReInit((Reader) stringReader1);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(simpleCharStream0.equals((Object)simpleCharStream1));
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(simpleCharStream0, simpleCharStream1);
      assertNotSame(stringReader1, stringReader0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      
      XPathParserTokenManager xPathParserTokenManager1 = new XPathParserTokenManager(simpleCharStream1);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(simpleCharStream1.equals((Object)simpleCharStream0));
      assertFalse(xPathParserTokenManager1.equals((Object)xPathParserTokenManager0));
      assertEquals(0, simpleCharStream1.getBeginColumn());
      assertEquals(0, simpleCharStream1.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream1.bufpos);
      assertNotNull(xPathParserTokenManager1);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(simpleCharStream1.equals((Object)simpleCharStream0));
      assertFalse(xPathParserTokenManager0.equals((Object)xPathParserTokenManager1));
      assertEquals(3569, simpleCharStream1.getBeginLine());
      assertEquals(3569, simpleCharStream1.getLine());
      assertEquals(3576, simpleCharStream1.getColumn());
      assertEquals(3569, simpleCharStream1.getBeginColumn());
      assertEquals(3576, simpleCharStream1.getEndColumn());
      assertEquals(3569, simpleCharStream1.getEndLine());
      assertEquals("contains", token0.toString());
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(simpleCharStream1, simpleCharStream0);
      assertNotSame(xPathParserTokenManager0, xPathParserTokenManager1);
      assertEquals(7, simpleCharStream1.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(3569, token0.beginColumn);
      assertEquals(3569, token0.endLine);
      assertEquals(3569, token0.beginLine);
      assertEquals(3576, token0.endColumn);
      assertEquals(59, token0.kind);
      assertNotNull(token0);
      
      XPathParserTokenManager xPathParserTokenManager2 = new XPathParserTokenManager(simpleCharStream1);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(simpleCharStream1.equals((Object)simpleCharStream0));
      assertFalse(xPathParserTokenManager2.equals((Object)xPathParserTokenManager1));
      assertFalse(xPathParserTokenManager2.equals((Object)xPathParserTokenManager0));
      assertEquals(3569, simpleCharStream1.getBeginLine());
      assertEquals(3569, simpleCharStream1.getLine());
      assertEquals(3576, simpleCharStream1.getColumn());
      assertEquals(3569, simpleCharStream1.getBeginColumn());
      assertEquals(3576, simpleCharStream1.getEndColumn());
      assertEquals(3569, simpleCharStream1.getEndLine());
      assertEquals(7, simpleCharStream1.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(xPathParserTokenManager2);
      
      Token token1 = xPathParserTokenManager2.getNextToken();
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(simpleCharStream1.equals((Object)simpleCharStream0));
      assertFalse(xPathParserTokenManager2.equals((Object)xPathParserTokenManager1));
      assertFalse(xPathParserTokenManager2.equals((Object)xPathParserTokenManager0));
      assertFalse(token1.equals((Object)token0));
      assertEquals(3576, simpleCharStream1.getBeginColumn());
      assertEquals(3569, simpleCharStream1.getBeginLine());
      assertEquals(3569, simpleCharStream1.getLine());
      assertEquals(3576, simpleCharStream1.getColumn());
      assertEquals(3576, simpleCharStream1.getEndColumn());
      assertEquals(3569, simpleCharStream1.getEndLine());
      assertEquals("", token1.toString());
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(simpleCharStream1, simpleCharStream0);
      assertNotSame(xPathParserTokenManager2, xPathParserTokenManager1);
      assertNotSame(xPathParserTokenManager2, xPathParserTokenManager0);
      assertNotSame(token1, token0);
      assertEquals(7, simpleCharStream1.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(3569, token1.beginLine);
      assertEquals(0, token1.kind);
      assertEquals(3569, token1.endLine);
      assertEquals(3576, token1.beginColumn);
      assertEquals(3576, token1.endColumn);
      assertNotNull(token1);
      
      Token token2 = xPathParserTokenManager1.getNextToken();
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(simpleCharStream1.equals((Object)simpleCharStream0));
      assertFalse(xPathParserTokenManager1.equals((Object)xPathParserTokenManager0));
      assertFalse(xPathParserTokenManager1.equals((Object)xPathParserTokenManager2));
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
      assertEquals(3576, simpleCharStream1.getBeginColumn());
      assertEquals(3569, simpleCharStream1.getBeginLine());
      assertEquals(3569, simpleCharStream1.getLine());
      assertEquals(3576, simpleCharStream1.getColumn());
      assertEquals(3576, simpleCharStream1.getEndColumn());
      assertEquals(3569, simpleCharStream1.getEndLine());
      assertEquals("", token2.toString());
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(simpleCharStream1, simpleCharStream0);
      assertNotSame(xPathParserTokenManager1, xPathParserTokenManager0);
      assertNotSame(xPathParserTokenManager1, xPathParserTokenManager2);
      assertNotSame(token2, token0);
      assertNotSame(token2, token1);
      assertEquals(7, simpleCharStream1.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, token2.kind);
      assertEquals(3569, token2.endLine);
      assertEquals(3569, token2.beginLine);
      assertEquals(3576, token2.beginColumn);
      assertEquals(3576, token2.endColumn);
      assertNotNull(token2);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      StringReader stringReader0 = new StringReader("contaiRns");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(9, simpleCharStream0.getColumn());
      assertEquals(9, simpleCharStream0.getEndColumn());
      assertEquals("contaiRns", token0.toString());
      assertEquals(8, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(78, token0.kind);
      assertEquals(1, token0.beginColumn);
      assertEquals(9, token0.endColumn);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      StringReader stringReader0 = new StringReader("GX4U>n[U8 3j");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 112, 112);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(simpleCharStream0);
      
      simpleCharStream0.ReInit((Reader) stringReader0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(2, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(2, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals("GX", token0.toString());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, simpleCharStream0.bufpos);
      assertEquals(2, token0.endColumn);
      assertEquals(78, token0.kind);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
      assertNotNull(token0);
      
      // Undeclared exception!
      try { 
        xPathParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 3.  Encountered: \"\\u007f\" (127), after : \"\"
         //
         verifyException("org.apache.commons.jxpath.ri.parser.XPathParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      StringReader stringReader0 = new StringReader("vo-!]2");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader("6@dk]K)64t\"31%");
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotNull(stringReader1);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(xPathParserTokenManager0);
      
      XPathParserTokenManager xPathParserTokenManager1 = new XPathParserTokenManager(simpleCharStream0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(xPathParserTokenManager1.equals((Object)xPathParserTokenManager0));
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(xPathParserTokenManager1);
      
      Token token0 = xPathParserTokenManager1.getNextToken();
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(xPathParserTokenManager1.equals((Object)xPathParserTokenManager0));
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getEndColumn());
      assertEquals("6", token0.toString());
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(xPathParserTokenManager1, xPathParserTokenManager0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.bufpos);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.endLine);
      assertEquals(20, token0.kind);
      assertEquals(1, token0.beginColumn);
      assertNotNull(token0);
      
      Token token1 = xPathParserTokenManager1.getNextToken();
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(xPathParserTokenManager1.equals((Object)xPathParserTokenManager0));
      assertFalse(token1.equals((Object)token0));
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(2, simpleCharStream0.getBeginColumn());
      assertEquals(2, simpleCharStream0.getColumn());
      assertEquals(2, simpleCharStream0.getEndColumn());
      assertEquals("@", token1.toString());
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(xPathParserTokenManager1, xPathParserTokenManager0);
      assertNotSame(token1, token0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, simpleCharStream0.bufpos);
      assertEquals(2, token1.endColumn);
      assertEquals(1, token1.endLine);
      assertEquals(86, token1.kind);
      assertEquals(2, token1.beginColumn);
      assertEquals(1, token1.beginLine);
      assertNotNull(token1);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      StringReader stringReader0 = new StringReader("comme");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(5, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(5, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals("comme", token0.toString());
      assertEquals(4, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(78, token0.kind);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.endLine);
      assertEquals(5, token0.endColumn);
      assertNotNull(token0);
      
      Token token1 = xPathParserTokenManager0.getNextToken();
      assertFalse(token1.equals((Object)token0));
      assertEquals(5, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(5, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(5, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals("", token1.toString());
      assertNotSame(token1, token0);
      assertEquals(4, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(5, token1.beginColumn);
      assertEquals(5, token1.endColumn);
      assertEquals(1, token1.endLine);
      assertEquals(1, token1.beginLine);
      assertEquals(0, token1.kind);
      assertNotNull(token1);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      StringReader stringReader0 = new StringReader("3MAXG:t ");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 142, 142);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(xPathParserTokenManager0);
      
      xPathParserTokenManager0.defaultLexState = 35;
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(142, simpleCharStream0.getLine());
      assertEquals(142, simpleCharStream0.getBeginLine());
      assertEquals(142, simpleCharStream0.getEndLine());
      assertEquals(142, simpleCharStream0.getBeginColumn());
      assertEquals(142, simpleCharStream0.getColumn());
      assertEquals(142, simpleCharStream0.getEndColumn());
      assertEquals("3", token0.toString());
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(142, token0.beginColumn);
      assertEquals(142, token0.endColumn);
      assertEquals(20, token0.kind);
      assertEquals(142, token0.endLine);
      assertEquals(142, token0.beginLine);
      assertNotNull(token0);
      
      Token token1 = xPathParserTokenManager0.getNextToken();
      assertFalse(token1.equals((Object)token0));
      assertEquals(142, simpleCharStream0.getLine());
      assertEquals(142, simpleCharStream0.getBeginLine());
      assertEquals(146, simpleCharStream0.getEndColumn());
      assertEquals(142, simpleCharStream0.getEndLine());
      assertEquals(146, simpleCharStream0.getColumn());
      assertEquals(143, simpleCharStream0.getBeginColumn());
      assertEquals("MAXG", token1.toString());
      assertNotSame(token1, token0);
      assertEquals(4, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(143, token1.beginColumn);
      assertEquals(142, token1.endLine);
      assertEquals(142, token1.beginLine);
      assertEquals(78, token1.kind);
      assertEquals(146, token1.endColumn);
      assertNotNull(token1);
      
      Token token2 = xPathParserTokenManager0.jjFillToken();
      assertFalse(token2.equals((Object)token1));
      assertFalse(token2.equals((Object)token0));
      assertEquals(142, simpleCharStream0.getLine());
      assertEquals(142, simpleCharStream0.getBeginLine());
      assertEquals(146, simpleCharStream0.getEndColumn());
      assertEquals(142, simpleCharStream0.getEndLine());
      assertEquals(146, simpleCharStream0.getColumn());
      assertEquals(143, simpleCharStream0.getBeginColumn());
      assertEquals("MAXG", token2.toString());
      assertNotSame(token2, token1);
      assertNotSame(token2, token0);
      assertEquals(4, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(78, token2.kind);
      assertEquals(143, token2.beginColumn);
      assertEquals(142, token2.endLine);
      assertEquals(142, token2.beginLine);
      assertEquals(146, token2.endColumn);
      assertNotNull(token2);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      StringReader stringReader0 = new StringReader("leW");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader("leW");
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotNull(stringReader1);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader1, 64, (-2383));
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(xPathParserTokenManager0);
      
      xPathParserTokenManager0.jjround = (-1);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertEquals((-2382), simpleCharStream0.getEndColumn());
      assertEquals(64, simpleCharStream0.getBeginLine());
      assertEquals(64, simpleCharStream0.getLine());
      assertEquals((-2383), simpleCharStream0.getBeginColumn());
      assertEquals((-2382), simpleCharStream0.getColumn());
      assertEquals(64, simpleCharStream0.getEndLine());
      assertEquals("le", token0.toString());
      assertNotSame(stringReader1, stringReader0);
      assertEquals(1, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-2382), token0.endColumn);
      assertEquals((-2383), token0.beginColumn);
      assertEquals(78, token0.kind);
      assertEquals(64, token0.endLine);
      assertEquals(64, token0.beginLine);
      assertNotNull(token0);
      
      int int0 = stringReader1.read();
      assertEquals((-1), int0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotSame(stringReader1, stringReader0);
      
      Token token1 = xPathParserTokenManager0.getNextToken();
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(token1.equals((Object)token0));
      assertEquals(64, simpleCharStream0.getBeginLine());
      assertEquals(64, simpleCharStream0.getLine());
      assertEquals((-2381), simpleCharStream0.getEndColumn());
      assertEquals((-2381), simpleCharStream0.getBeginColumn());
      assertEquals((-2381), simpleCharStream0.getColumn());
      assertEquals(64, simpleCharStream0.getEndLine());
      assertEquals("W", token1.toString());
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(token1, token0);
      assertEquals(2, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(64, token1.endLine);
      assertEquals((-2381), token1.endColumn);
      assertEquals((-2381), token1.beginColumn);
      assertEquals(64, token1.beginLine);
      assertEquals(78, token1.kind);
      assertNotNull(token1);
      
      Token token2 = xPathParserTokenManager0.jjFillToken();
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
      assertEquals(64, simpleCharStream0.getBeginLine());
      assertEquals(64, simpleCharStream0.getLine());
      assertEquals((-2381), simpleCharStream0.getEndColumn());
      assertEquals((-2381), simpleCharStream0.getBeginColumn());
      assertEquals((-2381), simpleCharStream0.getColumn());
      assertEquals(64, simpleCharStream0.getEndLine());
      assertEquals("W", token2.toString());
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(token2, token0);
      assertNotSame(token2, token1);
      assertEquals(2, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-2381), token2.beginColumn);
      assertEquals((-2381), token2.endColumn);
      assertEquals(78, token2.kind);
      assertEquals(64, token2.endLine);
      assertEquals(64, token2.beginLine);
      assertNotNull(token2);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      StringReader stringReader0 = new StringReader("U5yI:P`");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 11, 11);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(simpleCharStream0);
      
      stringReader0.reset();
      simpleCharStream0.backup(0);
      assertEquals(0, simpleCharStream0.getEndLine());
      assertEquals(0, simpleCharStream0.getEndColumn());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getColumn());
      assertEquals(0, simpleCharStream0.getLine());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(4095, simpleCharStream0.bufpos);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getEndLine());
      assertEquals(0, simpleCharStream0.getEndColumn());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getColumn());
      assertEquals(0, simpleCharStream0.getLine());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(4095, simpleCharStream0.bufpos);
      assertNotNull(xPathParserTokenManager0);
      
      // Undeclared exception!
      try { 
        xPathParserTokenManager0.getNextToken();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4096
         //
         verifyException("org.apache.commons.jxpath.ri.parser.SimpleCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      StringReader stringReader0 = new StringReader("leW");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader("name");
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotNull(stringReader1);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(xPathParserTokenManager0);
      
      xPathParserTokenManager0.curLexState = (-1);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertEquals(4, simpleCharStream0.getColumn());
      assertEquals(4, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals("name", token0.toString());
      assertNotSame(stringReader1, stringReader0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(3, simpleCharStream0.bufpos);
      assertEquals(1, token0.beginColumn);
      assertEquals(55, token0.kind);
      assertEquals(4, token0.endColumn);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
      assertNotNull(token0);
      
      Token token1 = xPathParserTokenManager0.jjFillToken();
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(token1.equals((Object)token0));
      assertEquals(4, simpleCharStream0.getColumn());
      assertEquals(4, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals("name", token1.toString());
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(token1, token0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(3, simpleCharStream0.bufpos);
      assertEquals(55, token1.kind);
      assertEquals(4, token1.endColumn);
      assertEquals(1, token1.endLine);
      assertEquals(1, token1.beginColumn);
      assertEquals(1, token1.beginLine);
      assertNotNull(token1);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      StringReader stringReader0 = new StringReader("leW");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 58, 82);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(xPathParserTokenManager0);
      
      StringReader stringReader1 = new StringReader("2n>z@Gu[L");
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotNull(stringReader1);
      
      SimpleCharStream simpleCharStream1 = new SimpleCharStream(stringReader1, 58, 58);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(simpleCharStream1.equals((Object)simpleCharStream0));
      assertEquals(0, simpleCharStream1.getBeginColumn());
      assertEquals(0, simpleCharStream1.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream1.bufpos);
      assertNotNull(simpleCharStream1);
      
      XPathParserTokenManager xPathParserTokenManager1 = new XPathParserTokenManager(simpleCharStream0);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(simpleCharStream0.equals((Object)simpleCharStream1));
      assertFalse(xPathParserTokenManager1.equals((Object)xPathParserTokenManager0));
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(xPathParserTokenManager1);
      
      Token token0 = xPathParserTokenManager1.getNextToken();
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(simpleCharStream0.equals((Object)simpleCharStream1));
      assertFalse(xPathParserTokenManager1.equals((Object)xPathParserTokenManager0));
      assertEquals(84, simpleCharStream0.getColumn());
      assertEquals(58, simpleCharStream0.getLine());
      assertEquals(84, simpleCharStream0.getEndColumn());
      assertEquals(58, simpleCharStream0.getBeginLine());
      assertEquals(82, simpleCharStream0.getBeginColumn());
      assertEquals(58, simpleCharStream0.getEndLine());
      assertEquals("leW", token0.toString());
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(simpleCharStream0, simpleCharStream1);
      assertNotSame(xPathParserTokenManager1, xPathParserTokenManager0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(2, simpleCharStream0.bufpos);
      assertEquals(58, token0.endLine);
      assertEquals(78, token0.kind);
      assertEquals(82, token0.beginColumn);
      assertEquals(84, token0.endColumn);
      assertEquals(58, token0.beginLine);
      assertNotNull(token0);
      
      SimpleCharStream simpleCharStream2 = new SimpleCharStream(stringReader0, 39, 109);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(simpleCharStream2.equals((Object)simpleCharStream1));
      assertFalse(simpleCharStream2.equals((Object)simpleCharStream0));
      assertEquals(0, simpleCharStream2.getBeginColumn());
      assertEquals(0, simpleCharStream2.getBeginLine());
      assertEquals((-1), simpleCharStream2.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream2);
      
      XPathParserTokenManager xPathParserTokenManager2 = new XPathParserTokenManager(simpleCharStream1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(simpleCharStream1.equals((Object)simpleCharStream0));
      assertFalse(simpleCharStream1.equals((Object)simpleCharStream2));
      assertFalse(xPathParserTokenManager2.equals((Object)xPathParserTokenManager0));
      assertFalse(xPathParserTokenManager2.equals((Object)xPathParserTokenManager1));
      assertEquals(0, simpleCharStream1.getBeginColumn());
      assertEquals(0, simpleCharStream1.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream1.bufpos);
      assertNotNull(xPathParserTokenManager2);
      
      XPathParserTokenManager xPathParserTokenManager3 = new XPathParserTokenManager(simpleCharStream1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(simpleCharStream1.equals((Object)simpleCharStream0));
      assertFalse(simpleCharStream1.equals((Object)simpleCharStream2));
      assertFalse(xPathParserTokenManager3.equals((Object)xPathParserTokenManager2));
      assertFalse(xPathParserTokenManager3.equals((Object)xPathParserTokenManager0));
      assertFalse(xPathParserTokenManager3.equals((Object)xPathParserTokenManager1));
      assertEquals(0, simpleCharStream1.getBeginColumn());
      assertEquals(0, simpleCharStream1.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream1.bufpos);
      assertNotNull(xPathParserTokenManager3);
      
      Token token1 = xPathParserTokenManager0.getNextToken();
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(simpleCharStream0.equals((Object)simpleCharStream1));
      assertFalse(simpleCharStream0.equals((Object)simpleCharStream2));
      assertFalse(xPathParserTokenManager0.equals((Object)xPathParserTokenManager2));
      assertFalse(xPathParserTokenManager0.equals((Object)xPathParserTokenManager1));
      assertFalse(xPathParserTokenManager0.equals((Object)xPathParserTokenManager3));
      assertFalse(token1.equals((Object)token0));
      assertEquals(84, simpleCharStream0.getColumn());
      assertEquals(58, simpleCharStream0.getLine());
      assertEquals(84, simpleCharStream0.getEndColumn());
      assertEquals(58, simpleCharStream0.getBeginLine());
      assertEquals(84, simpleCharStream0.getBeginColumn());
      assertEquals(58, simpleCharStream0.getEndLine());
      assertEquals("", token1.toString());
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(simpleCharStream0, simpleCharStream1);
      assertNotSame(simpleCharStream0, simpleCharStream2);
      assertNotSame(xPathParserTokenManager0, xPathParserTokenManager2);
      assertNotSame(xPathParserTokenManager0, xPathParserTokenManager1);
      assertNotSame(xPathParserTokenManager0, xPathParserTokenManager3);
      assertNotSame(token1, token0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(2, simpleCharStream0.bufpos);
      assertEquals(0, token1.kind);
      assertEquals(84, token1.beginColumn);
      assertEquals(84, token1.endColumn);
      assertEquals(58, token1.endLine);
      assertEquals(58, token1.beginLine);
      assertNotNull(token1);
      
      Token token2 = xPathParserTokenManager0.getNextToken();
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(simpleCharStream0.equals((Object)simpleCharStream1));
      assertFalse(simpleCharStream0.equals((Object)simpleCharStream2));
      assertFalse(xPathParserTokenManager0.equals((Object)xPathParserTokenManager2));
      assertFalse(xPathParserTokenManager0.equals((Object)xPathParserTokenManager1));
      assertFalse(xPathParserTokenManager0.equals((Object)xPathParserTokenManager3));
      assertFalse(token2.equals((Object)token1));
      assertFalse(token2.equals((Object)token0));
      assertEquals(84, simpleCharStream0.getColumn());
      assertEquals(58, simpleCharStream0.getLine());
      assertEquals(84, simpleCharStream0.getEndColumn());
      assertEquals(58, simpleCharStream0.getBeginLine());
      assertEquals(84, simpleCharStream0.getBeginColumn());
      assertEquals(58, simpleCharStream0.getEndLine());
      assertEquals("", token2.toString());
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(simpleCharStream0, simpleCharStream1);
      assertNotSame(simpleCharStream0, simpleCharStream2);
      assertNotSame(xPathParserTokenManager0, xPathParserTokenManager2);
      assertNotSame(xPathParserTokenManager0, xPathParserTokenManager1);
      assertNotSame(xPathParserTokenManager0, xPathParserTokenManager3);
      assertNotSame(token2, token1);
      assertNotSame(token2, token0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(2, simpleCharStream0.bufpos);
      assertEquals(58, token2.endLine);
      assertEquals(0, token2.kind);
      assertEquals(84, token2.endColumn);
      assertEquals(58, token2.beginLine);
      assertEquals(84, token2.beginColumn);
      assertNotNull(token2);
      
      XPathParserTokenManager xPathParserTokenManager4 = null;
      try {
        xPathParserTokenManager4 = new XPathParserTokenManager(simpleCharStream1, 82);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 82. State unchanged.
         //
         verifyException("org.apache.commons.jxpath.ri.parser.XPathParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      StringReader stringReader0 = new StringReader("..");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, (-403), 112);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(113, simpleCharStream0.getColumn());
      assertEquals((-403), simpleCharStream0.getEndLine());
      assertEquals(113, simpleCharStream0.getEndColumn());
      assertEquals(112, simpleCharStream0.getBeginColumn());
      assertEquals((-403), simpleCharStream0.getBeginLine());
      assertEquals((-403), simpleCharStream0.getLine());
      assertEquals("..", token0.toString());
      assertEquals(1, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-403), token0.endLine);
      assertEquals(83, token0.kind);
      assertEquals(112, token0.beginColumn);
      assertEquals(113, token0.endColumn);
      assertEquals((-403), token0.beginLine);
      assertNotNull(token0);
      
      StringReader stringReader1 = new StringReader("yy+?zvUrnmc\"Nd!=yC5");
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotNull(stringReader1);
      
      Token token1 = xPathParserTokenManager0.getNextToken();
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(token1.equals((Object)token0));
      assertEquals(113, simpleCharStream0.getColumn());
      assertEquals(113, simpleCharStream0.getBeginColumn());
      assertEquals((-403), simpleCharStream0.getEndLine());
      assertEquals(113, simpleCharStream0.getEndColumn());
      assertEquals((-403), simpleCharStream0.getBeginLine());
      assertEquals((-403), simpleCharStream0.getLine());
      assertEquals("", token1.toString());
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(token1, token0);
      assertEquals(1, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-403), token1.endLine);
      assertEquals(0, token1.kind);
      assertEquals(113, token1.endColumn);
      assertEquals(113, token1.beginColumn);
      assertEquals((-403), token1.beginLine);
      assertNotNull(token1);
      
      Token token2 = xPathParserTokenManager0.getNextToken();
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
      assertEquals(113, simpleCharStream0.getColumn());
      assertEquals(113, simpleCharStream0.getBeginColumn());
      assertEquals((-403), simpleCharStream0.getEndLine());
      assertEquals(113, simpleCharStream0.getEndColumn());
      assertEquals((-403), simpleCharStream0.getBeginLine());
      assertEquals((-403), simpleCharStream0.getLine());
      assertEquals("", token2.toString());
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(token2, token0);
      assertNotSame(token2, token1);
      assertEquals(1, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-403), token2.endLine);
      assertEquals((-403), token2.beginLine);
      assertEquals(113, token2.beginColumn);
      assertEquals(0, token2.kind);
      assertEquals(113, token2.endColumn);
      assertNotNull(token2);
      
      Token token3 = xPathParserTokenManager0.getNextToken();
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(token3.equals((Object)token2));
      assertFalse(token3.equals((Object)token0));
      assertFalse(token3.equals((Object)token1));
      assertEquals(113, simpleCharStream0.getColumn());
      assertEquals(113, simpleCharStream0.getBeginColumn());
      assertEquals((-403), simpleCharStream0.getEndLine());
      assertEquals(113, simpleCharStream0.getEndColumn());
      assertEquals((-403), simpleCharStream0.getBeginLine());
      assertEquals((-403), simpleCharStream0.getLine());
      assertEquals("", token3.toString());
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(token3, token2);
      assertNotSame(token3, token0);
      assertNotSame(token3, token1);
      assertEquals(1, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(113, token3.endColumn);
      assertEquals((-403), token3.endLine);
      assertEquals(113, token3.beginColumn);
      assertEquals((-403), token3.beginLine);
      assertEquals(0, token3.kind);
      assertNotNull(token3);
      
      // Undeclared exception!
      try { 
        xPathParserTokenManager0.ReInit(simpleCharStream0, 112);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 112. State unchanged.
         //
         verifyException("org.apache.commons.jxpath.ri.parser.XPathParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      StringReader stringReader0 = new StringReader("|%h=C0I");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 17, 17);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = null;
      try {
        xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0, 17);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 17. State unchanged.
         //
         verifyException("org.apache.commons.jxpath.ri.parser.XPathParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      StringReader stringReader0 = new StringReader("m.");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader("m.");
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotNull(stringReader1);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader1, (-1106), (-1106));
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream0);
      
      simpleCharStream0.ReInit((Reader) stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertNotSame(stringReader1, stringReader0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(xPathParserTokenManager0);
      
      StringReader stringReader2 = new StringReader("w[>");
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertNotNull(stringReader2);
      
      SimpleCharStream simpleCharStream1 = new SimpleCharStream(stringReader2, (-4270), (-1106));
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertFalse(simpleCharStream1.equals((Object)simpleCharStream0));
      assertEquals(0, simpleCharStream1.getBeginColumn());
      assertEquals(0, simpleCharStream1.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream1.bufpos);
      assertNotNull(simpleCharStream1);
      
      XPathParserTokenManager xPathParserTokenManager1 = new XPathParserTokenManager(simpleCharStream1);
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertFalse(simpleCharStream1.equals((Object)simpleCharStream0));
      assertFalse(xPathParserTokenManager1.equals((Object)xPathParserTokenManager0));
      assertEquals(0, simpleCharStream1.getBeginColumn());
      assertEquals(0, simpleCharStream1.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream1.bufpos);
      assertNotNull(xPathParserTokenManager1);
      
      Token token0 = xPathParserTokenManager1.getNextToken();
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertFalse(simpleCharStream1.equals((Object)simpleCharStream0));
      assertFalse(xPathParserTokenManager1.equals((Object)xPathParserTokenManager0));
      assertEquals((-4270), simpleCharStream1.getEndLine());
      assertEquals((-1106), simpleCharStream1.getEndColumn());
      assertEquals((-4270), simpleCharStream1.getLine());
      assertEquals((-1106), simpleCharStream1.getBeginColumn());
      assertEquals((-4270), simpleCharStream1.getBeginLine());
      assertEquals((-1106), simpleCharStream1.getColumn());
      assertEquals("w", token0.toString());
      assertNotSame(stringReader2, stringReader1);
      assertNotSame(stringReader2, stringReader0);
      assertNotSame(simpleCharStream1, simpleCharStream0);
      assertNotSame(xPathParserTokenManager1, xPathParserTokenManager0);
      assertEquals(0, simpleCharStream1.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1106), token0.beginColumn);
      assertEquals(78, token0.kind);
      assertEquals((-1106), token0.endColumn);
      assertEquals((-4270), token0.endLine);
      assertEquals((-4270), token0.beginLine);
      assertNotNull(token0);
      
      Token token1 = xPathParserTokenManager1.getNextToken();
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertFalse(simpleCharStream1.equals((Object)simpleCharStream0));
      assertFalse(xPathParserTokenManager1.equals((Object)xPathParserTokenManager0));
      assertFalse(token1.equals((Object)token0));
      assertEquals((-4270), simpleCharStream1.getEndLine());
      assertEquals((-4270), simpleCharStream1.getLine());
      assertEquals((-1105), simpleCharStream1.getEndColumn());
      assertEquals((-1105), simpleCharStream1.getColumn());
      assertEquals((-1105), simpleCharStream1.getBeginColumn());
      assertEquals((-4270), simpleCharStream1.getBeginLine());
      assertEquals("[", token1.toString());
      assertNotSame(stringReader2, stringReader1);
      assertNotSame(stringReader2, stringReader0);
      assertNotSame(simpleCharStream1, simpleCharStream0);
      assertNotSame(xPathParserTokenManager1, xPathParserTokenManager0);
      assertNotSame(token1, token0);
      assertEquals(1, simpleCharStream1.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-4270), token1.endLine);
      assertEquals(84, token1.kind);
      assertEquals((-4270), token1.beginLine);
      assertEquals((-1105), token1.beginColumn);
      assertEquals((-1105), token1.endColumn);
      assertNotNull(token1);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      StringReader stringReader0 = new StringReader("normalize-space");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, (-1296), (-1296), 2702);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0, 0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(xPathParserTokenManager0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      SimpleCharStream simpleCharStream0 = new SimpleCharStream((Reader) null, (-1140), (-2741));
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(xPathParserTokenManager0);
      
      // Undeclared exception!
      try { 
        xPathParserTokenManager0.jjFillToken();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.jxpath.ri.parser.SimpleCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertFalse(fileDescriptor0.valid());
      assertNotNull(fileDescriptor0);
      
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      assertNotNull(mockFileInputStream0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(mockFileInputStream0, (-161), (-161));
      assertFalse(fileDescriptor0.valid());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream0);
      
      StringReader stringReader0 = new StringReader("round");
      assertNotNull(stringReader0);
      
      int int0 = stringReader0.read();
      assertEquals(114, int0);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      SimpleCharStream simpleCharStream1 = new SimpleCharStream(stringReader0);
      assertFalse(simpleCharStream1.equals((Object)simpleCharStream0));
      assertEquals(0, simpleCharStream1.getBeginColumn());
      assertEquals(0, simpleCharStream1.getBeginLine());
      assertEquals((-1), simpleCharStream1.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream1);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream1);
      assertFalse(simpleCharStream1.equals((Object)simpleCharStream0));
      assertEquals(0, simpleCharStream1.getBeginColumn());
      assertEquals(0, simpleCharStream1.getBeginLine());
      assertEquals((-1), simpleCharStream1.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertFalse(simpleCharStream1.equals((Object)simpleCharStream0));
      assertEquals(1, simpleCharStream1.getEndLine());
      assertEquals(1, simpleCharStream1.getBeginColumn());
      assertEquals(4, simpleCharStream1.getColumn());
      assertEquals(4, simpleCharStream1.getEndColumn());
      assertEquals(1, simpleCharStream1.getLine());
      assertEquals(1, simpleCharStream1.getBeginLine());
      assertEquals("ound", token0.toString());
      assertNotSame(simpleCharStream1, simpleCharStream0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(3, simpleCharStream1.bufpos);
      assertEquals(4, token0.endColumn);
      assertEquals(1, token0.beginColumn);
      assertEquals(78, token0.kind);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
      assertNotNull(token0);
      
      SimpleCharStream simpleCharStream2 = new SimpleCharStream(mockFileInputStream0, (-231), 1400);
      assertFalse(simpleCharStream2.equals((Object)simpleCharStream0));
      assertFalse(simpleCharStream2.equals((Object)simpleCharStream1));
      assertFalse(fileDescriptor0.valid());
      assertEquals(0, simpleCharStream2.getBeginLine());
      assertEquals(0, simpleCharStream2.getBeginColumn());
      assertEquals((-1), simpleCharStream2.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream2);
      
      xPathParserTokenManager0.ReInit(simpleCharStream2);
      assertFalse(simpleCharStream1.equals((Object)simpleCharStream2));
      assertFalse(simpleCharStream1.equals((Object)simpleCharStream0));
      assertFalse(simpleCharStream2.equals((Object)simpleCharStream0));
      assertFalse(simpleCharStream2.equals((Object)simpleCharStream1));
      assertFalse(fileDescriptor0.valid());
      assertEquals(1, simpleCharStream1.getEndLine());
      assertEquals(1, simpleCharStream1.getBeginColumn());
      assertEquals(4, simpleCharStream1.getColumn());
      assertEquals(4, simpleCharStream1.getEndColumn());
      assertEquals(1, simpleCharStream1.getLine());
      assertEquals(1, simpleCharStream1.getBeginLine());
      assertEquals(0, simpleCharStream2.getBeginLine());
      assertEquals(0, simpleCharStream2.getBeginColumn());
      assertNotSame(simpleCharStream1, simpleCharStream2);
      assertNotSame(simpleCharStream1, simpleCharStream0);
      assertNotSame(simpleCharStream2, simpleCharStream0);
      assertNotSame(simpleCharStream2, simpleCharStream1);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(3, simpleCharStream1.bufpos);
      assertEquals((-1), simpleCharStream2.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      StringReader stringReader0 = new StringReader("N?Xo5-4aC~");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals("N", token0.toString());
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, token0.endColumn);
      assertEquals(78, token0.kind);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      StringReader stringReader0 = new StringReader("'>n[dZ,KSEt{q%<");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(xPathParserTokenManager0);
      
      // Undeclared exception!
      try { 
        xPathParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 16.  Encountered: <EOF> after : \"\\'>n[dZ,KSEt{q%<\"
         //
         verifyException("org.apache.commons.jxpath.ri.parser.XPathParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      StringReader stringReader0 = new StringReader("comment");
      assertNotNull(stringReader0);
      
      int int0 = stringReader0.read();
      assertEquals(99, int0);
      
      StringReader stringReader1 = new StringReader("Y");
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotNull(stringReader1);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertEquals(1, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals("Y", token0.toString());
      assertNotSame(stringReader1, stringReader0);
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(78, token0.kind);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertNotNull(token0);
      
      XPathParserTokenManager xPathParserTokenManager1 = null;
      try {
        xPathParserTokenManager1 = new XPathParserTokenManager(simpleCharStream0, 2475);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 2475. State unchanged.
         //
         verifyException("org.apache.commons.jxpath.ri.parser.XPathParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      StringReader stringReader0 = new StringReader("..");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, (-403), 112);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(113, simpleCharStream0.getEndColumn());
      assertEquals(112, simpleCharStream0.getBeginColumn());
      assertEquals(113, simpleCharStream0.getColumn());
      assertEquals((-403), simpleCharStream0.getEndLine());
      assertEquals((-403), simpleCharStream0.getBeginLine());
      assertEquals((-403), simpleCharStream0.getLine());
      assertEquals("..", token0.toString());
      assertEquals(1, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-403), token0.endLine);
      assertEquals(112, token0.beginColumn);
      assertEquals(113, token0.endColumn);
      assertEquals((-403), token0.beginLine);
      assertEquals(83, token0.kind);
      assertNotNull(token0);
      
      StringReader stringReader1 = new StringReader("yy+?zvUrnmc\"Nd!=yC5");
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotNull(stringReader1);
      
      simpleCharStream0.ReInit((Reader) stringReader1);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertEquals(112, simpleCharStream0.getBeginColumn());
      assertEquals((-403), simpleCharStream0.getBeginLine());
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(stringReader1, stringReader0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      
      SimpleCharStream simpleCharStream1 = new SimpleCharStream(stringReader0);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(simpleCharStream1.equals((Object)simpleCharStream0));
      assertEquals(0, simpleCharStream1.getBeginColumn());
      assertEquals(0, simpleCharStream1.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream1.bufpos);
      assertNotNull(simpleCharStream1);
      
      XPathParserTokenManager xPathParserTokenManager1 = new XPathParserTokenManager(simpleCharStream0);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(simpleCharStream0.equals((Object)simpleCharStream1));
      assertFalse(xPathParserTokenManager1.equals((Object)xPathParserTokenManager0));
      assertEquals(112, simpleCharStream0.getBeginColumn());
      assertEquals((-403), simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(xPathParserTokenManager1);
      
      Token token1 = xPathParserTokenManager0.getNextToken();
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(simpleCharStream0.equals((Object)simpleCharStream1));
      assertFalse(xPathParserTokenManager0.equals((Object)xPathParserTokenManager1));
      assertFalse(token1.equals((Object)token0));
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(2, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(2, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals("yy", token1.toString());
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(simpleCharStream0, simpleCharStream1);
      assertNotSame(xPathParserTokenManager0, xPathParserTokenManager1);
      assertNotSame(token1, token0);
      assertEquals(1, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(78, token1.kind);
      assertEquals(1, token1.endLine);
      assertEquals(2, token1.endColumn);
      assertEquals(1, token1.beginLine);
      assertEquals(1, token1.beginColumn);
      assertNotNull(token1);
      
      Token token2 = xPathParserTokenManager1.getNextToken();
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(simpleCharStream0.equals((Object)simpleCharStream1));
      assertFalse(xPathParserTokenManager1.equals((Object)xPathParserTokenManager0));
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(3, simpleCharStream0.getEndColumn());
      assertEquals(3, simpleCharStream0.getBeginColumn());
      assertEquals(3, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals("+", token2.toString());
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(simpleCharStream0, simpleCharStream1);
      assertNotSame(xPathParserTokenManager1, xPathParserTokenManager0);
      assertNotSame(token2, token0);
      assertNotSame(token2, token1);
      assertEquals(2, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(9, token2.kind);
      assertEquals(3, token2.endColumn);
      assertEquals(1, token2.endLine);
      assertEquals(1, token2.beginLine);
      assertEquals(3, token2.beginColumn);
      assertNotNull(token2);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      StringReader stringReader0 = new StringReader("..");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 112, 112);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(112, simpleCharStream0.getLine());
      assertEquals(113, simpleCharStream0.getEndColumn());
      assertEquals(113, simpleCharStream0.getColumn());
      assertEquals(112, simpleCharStream0.getBeginColumn());
      assertEquals(112, simpleCharStream0.getEndLine());
      assertEquals(112, simpleCharStream0.getBeginLine());
      assertEquals("..", token0.toString());
      assertEquals(1, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(112, token0.endLine);
      assertEquals(113, token0.endColumn);
      assertEquals(112, token0.beginLine);
      assertEquals(112, token0.beginColumn);
      assertEquals(83, token0.kind);
      assertNotNull(token0);
      
      StringReader stringReader1 = new StringReader("xIf*&.Wt4wWJo4SkY?M");
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotNull(stringReader1);
      
      char[] charArray0 = new char[6];
      charArray0[0] = '4';
      charArray0[1] = '@';
      charArray0[2] = 'M';
      charArray0[3] = '(';
      charArray0[4] = 'J';
      charArray0[5] = ';';
      int int0 = stringReader1.read(charArray0);
      assertEquals(6, int0);
      assertArrayEquals(new char[] {'x', 'I', 'f', '*', '&', '.'}, charArray0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotSame(stringReader1, stringReader0);
      assertEquals(6, charArray0.length);
      
      simpleCharStream0.ReInit((Reader) stringReader1);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertEquals(112, simpleCharStream0.getBeginColumn());
      assertEquals(112, simpleCharStream0.getBeginLine());
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(stringReader1, stringReader0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      XPathParserTokenManager xPathParserTokenManager1 = new XPathParserTokenManager(simpleCharStream0);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(xPathParserTokenManager1.equals((Object)xPathParserTokenManager0));
      assertEquals(112, simpleCharStream0.getBeginColumn());
      assertEquals(112, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(xPathParserTokenManager1);
      
      Token token1 = xPathParserTokenManager1.getNextToken();
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(xPathParserTokenManager1.equals((Object)xPathParserTokenManager0));
      assertFalse(token1.equals((Object)token0));
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(11, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(11, simpleCharStream0.getColumn());
      assertEquals("Wt4wWJo4SkY", token1.toString());
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(xPathParserTokenManager1, xPathParserTokenManager0);
      assertNotSame(token1, token0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(10, simpleCharStream0.bufpos);
      assertEquals(1, token1.endLine);
      assertEquals(1, token1.beginLine);
      assertEquals(1, token1.beginColumn);
      assertEquals(11, token1.endColumn);
      assertEquals(78, token1.kind);
      assertNotNull(token1);
      
      // Undeclared exception!
      try { 
        xPathParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 12.  Encountered: \"?\" (63), after : \"\"
         //
         verifyException("org.apache.commons.jxpath.ri.parser.XPathParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      StringReader stringReader0 = new StringReader("nume");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(4, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(4, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals("nume", token0.toString());
      assertEquals(3, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, token0.endLine);
      assertEquals(4, token0.endColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(78, token0.kind);
      assertEquals(1, token0.beginColumn);
      assertNotNull(token0);
      
      Token token1 = xPathParserTokenManager0.getNextToken();
      assertFalse(token1.equals((Object)token0));
      assertEquals(4, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(4, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(4, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals("", token1.toString());
      assertNotSame(token1, token0);
      assertEquals(3, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, token1.beginLine);
      assertEquals(0, token1.kind);
      assertEquals(4, token1.beginColumn);
      assertEquals(4, token1.endColumn);
      assertEquals(1, token1.endLine);
      assertNotNull(token1);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertFalse(fileDescriptor0.valid());
      assertNotNull(fileDescriptor0);
      
      StringReader stringReader0 = new StringReader("number");
      assertNotNull(stringReader0);
      
      int int0 = stringReader0.read();
      assertEquals(110, int0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(5, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(5, simpleCharStream0.getEndColumn());
      assertEquals("umber", token0.toString());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(4, simpleCharStream0.bufpos);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(5, token0.endColumn);
      assertEquals(78, token0.kind);
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      StringReader stringReader0 = new StringReader("T1_Fx0H@C71|\"(&");
      assertNotNull(stringReader0);
      
      int int0 = stringReader0.read();
      assertEquals(84, int0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals("1", token0.toString());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.bufpos);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(20, token0.kind);
      assertEquals(1, token0.endColumn);
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(LUC9h}b@|O");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals("(", token0.toString());
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
      assertEquals(80, token0.kind);
      assertNotNull(token0);
      
      Token token1 = xPathParserTokenManager0.getNextToken();
      assertFalse(token1.equals((Object)token0));
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(2, simpleCharStream0.getBeginColumn());
      assertEquals(6, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(6, simpleCharStream0.getEndColumn());
      assertEquals("LUC9h", token1.toString());
      assertNotSame(token1, token0);
      assertEquals(5, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(6, token1.endColumn);
      assertEquals(2, token1.beginColumn);
      assertEquals(1, token1.beginLine);
      assertEquals(1, token1.endLine);
      assertEquals(78, token1.kind);
      assertNotNull(token1);
      
      // Undeclared exception!
      try { 
        xPathParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 7.  Encountered: \"}\" (125), after : \"\"
         //
         verifyException("org.apache.commons.jxpath.ri.parser.XPathParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      SimpleCharStream simpleCharStream0 = null;
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager((SimpleCharStream) null, 0);
      assertNotNull(xPathParserTokenManager0);
      
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertFalse(fileDescriptor0.valid());
      assertNotNull(fileDescriptor0);
      
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      assertNotNull(mockFileInputStream0);
      
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(mockFileInputStream0);
      assertFalse(fileDescriptor0.valid());
      assertNotNull(pushbackInputStream0);
      
      pushbackInputStream0.mark(31);
      assertFalse(fileDescriptor0.valid());
      
      SimpleCharStream simpleCharStream1 = new SimpleCharStream(pushbackInputStream0, (-4237), (-4237), 0);
      assertFalse(fileDescriptor0.valid());
      assertEquals(0, simpleCharStream1.getBeginLine());
      assertEquals(0, simpleCharStream1.getBeginColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream1.bufpos);
      assertNotNull(simpleCharStream1);
      
      xPathParserTokenManager0.ReInit(simpleCharStream1);
      assertFalse(fileDescriptor0.valid());
      assertEquals(0, simpleCharStream1.getBeginLine());
      assertEquals(0, simpleCharStream1.getBeginColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream1.bufpos);
      
      xPathParserTokenManager0.defaultLexState = 7;
      // Undeclared exception!
      try { 
        xPathParserTokenManager0.SwitchTo(7);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 7. State unchanged.
         //
         verifyException("org.apache.commons.jxpath.ri.parser.XPathParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      StringReader stringReader0 = new StringReader("]");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(1, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals("]", token0.toString());
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(85, token0.kind);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.endColumn);
      assertNotNull(token0);
      
      Token token1 = xPathParserTokenManager0.getNextToken();
      assertFalse(token1.equals((Object)token0));
      assertEquals(1, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals("", token1.toString());
      assertNotSame(token1, token0);
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, token1.endColumn);
      assertEquals(1, token1.beginColumn);
      assertEquals(1, token1.beginLine);
      assertEquals(0, token1.kind);
      assertEquals(1, token1.endLine);
      assertNotNull(token1);
      
      Token token2 = xPathParserTokenManager0.getNextToken();
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
      assertEquals(1, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals("", token2.toString());
      assertNotSame(token2, token0);
      assertNotSame(token2, token1);
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, token2.beginColumn);
      assertEquals(1, token2.beginLine);
      assertEquals(0, token2.kind);
      assertEquals(1, token2.endLine);
      assertEquals(1, token2.endColumn);
      assertNotNull(token2);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      StringReader stringReader0 = new StringReader("div");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(xPathParserTokenManager0);
      
      xPathParserTokenManager0.input_stream = simpleCharStream0;
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, xPathParserTokenManager0.input_stream.getBeginColumn());
      assertEquals(0, xPathParserTokenManager0.input_stream.getBeginLine());
      
      xPathParserTokenManager0.SwitchTo(0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      StringReader stringReader0 = new StringReader("ZugQ93#A?");
      assertNotNull(stringReader0);
      
      long long0 = stringReader0.skip((-1L));
      assertEquals(0L, long0);
      
      StringReader stringReader1 = new StringReader("ZugQ93#A?");
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotNull(stringReader1);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader1, 25, 25);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertEquals(25, simpleCharStream0.getBeginLine());
      assertEquals(30, simpleCharStream0.getEndColumn());
      assertEquals(30, simpleCharStream0.getColumn());
      assertEquals(25, simpleCharStream0.getEndLine());
      assertEquals(25, simpleCharStream0.getBeginColumn());
      assertEquals(25, simpleCharStream0.getLine());
      assertEquals("ZugQ93", token0.toString());
      assertNotSame(stringReader1, stringReader0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(5, simpleCharStream0.bufpos);
      assertEquals(25, token0.endLine);
      assertEquals(25, token0.beginLine);
      assertEquals(30, token0.endColumn);
      assertEquals(25, token0.beginColumn);
      assertEquals(78, token0.kind);
      assertNotNull(token0);
      
      simpleCharStream0.UpdateLineColumn('1');
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertEquals(25, simpleCharStream0.getBeginLine());
      assertEquals(32, simpleCharStream0.getColumn());
      assertEquals(32, simpleCharStream0.getEndColumn());
      assertEquals(25, simpleCharStream0.getEndLine());
      assertEquals(25, simpleCharStream0.getBeginColumn());
      assertEquals(25, simpleCharStream0.getLine());
      assertNotSame(stringReader1, stringReader0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(5, simpleCharStream0.bufpos);
      
      xPathParserTokenManager0.ReInit(simpleCharStream0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertEquals(25, simpleCharStream0.getBeginLine());
      assertEquals(32, simpleCharStream0.getColumn());
      assertEquals(32, simpleCharStream0.getEndColumn());
      assertEquals(25, simpleCharStream0.getEndLine());
      assertEquals(25, simpleCharStream0.getBeginColumn());
      assertEquals(25, simpleCharStream0.getLine());
      assertNotSame(stringReader1, stringReader0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(5, simpleCharStream0.bufpos);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      StringReader stringReader0 = new StringReader("node");
      assertNotNull(stringReader0);
      
      int int0 = stringReader0.read();
      assertEquals(110, int0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)83;
      byteArray0[1] = (byte)70;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-42);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-128);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertArrayEquals(new byte[] {(byte)83, (byte)70, (byte)0, (byte) (-42), (byte)0, (byte) (-128)}, byteArray0);
      assertEquals(6, byteArrayInputStream0.available());
      assertEquals(6, byteArray0.length);
      assertNotNull(byteArrayInputStream0);
      
      SimpleCharStream simpleCharStream1 = new SimpleCharStream(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)83, (byte)70, (byte)0, (byte) (-42), (byte)0, (byte) (-128)}, byteArray0);
      assertFalse(simpleCharStream1.equals((Object)simpleCharStream0));
      assertEquals(6, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream1.getBeginColumn());
      assertEquals(0, simpleCharStream1.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream1.bufpos);
      assertEquals(6, byteArray0.length);
      assertNotNull(simpleCharStream1);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream1);
      assertArrayEquals(new byte[] {(byte)83, (byte)70, (byte)0, (byte) (-42), (byte)0, (byte) (-128)}, byteArray0);
      assertFalse(simpleCharStream1.equals((Object)simpleCharStream0));
      assertEquals(6, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream1.getBeginColumn());
      assertEquals(0, simpleCharStream1.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream1.bufpos);
      assertEquals(6, byteArray0.length);
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertArrayEquals(new byte[] {(byte)83, (byte)70, (byte)0, (byte) (-42), (byte)0, (byte) (-128)}, byteArray0);
      assertFalse(simpleCharStream1.equals((Object)simpleCharStream0));
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(1, simpleCharStream1.getBeginColumn());
      assertEquals(2, simpleCharStream1.getEndColumn());
      assertEquals(1, simpleCharStream1.getEndLine());
      assertEquals(1, simpleCharStream1.getLine());
      assertEquals(1, simpleCharStream1.getBeginLine());
      assertEquals(2, simpleCharStream1.getColumn());
      assertEquals("SF", token0.toString());
      assertNotSame(simpleCharStream1, simpleCharStream0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, simpleCharStream1.bufpos);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(2, token0.endColumn);
      assertEquals(1, token0.endLine);
      assertEquals(78, token0.kind);
      assertEquals(6, byteArray0.length);
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      StringReader stringReader0 = new StringReader("vGboX\"TX,f2E/d");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader("floor");
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotNull(stringReader1);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream0);
      
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertFalse(fileDescriptor0.valid());
      assertNotNull(fileDescriptor0);
      
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      assertNotNull(mockFileInputStream0);
      
      simpleCharStream0.ReInit((InputStream) mockFileInputStream0, 71, 71, 71);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(fileDescriptor0.valid());
      assertNotSame(stringReader0, stringReader1);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      simpleCharStream0.ReInit((Reader) stringReader1);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(stringReader1, stringReader0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      SimpleCharStream simpleCharStream1 = new SimpleCharStream(stringReader0);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(simpleCharStream1.equals((Object)simpleCharStream0));
      assertEquals(0, simpleCharStream1.getBeginLine());
      assertEquals(0, simpleCharStream1.getBeginColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream1.bufpos);
      assertNotNull(simpleCharStream1);
      
      int[] intArray0 = new int[7];
      intArray0[0] = (-1);
      intArray0[1] = (-1);
      intArray0[2] = 71;
      intArray0[3] = 71;
      intArray0[4] = 71;
      intArray0[5] = (-1);
      intArray0[6] = 71;
      simpleCharStream1.bufcolumn = intArray0;
      assertEquals(0, simpleCharStream1.getBeginLine());
      assertEquals((-1), simpleCharStream1.getBeginColumn());
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream1);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(simpleCharStream1.equals((Object)simpleCharStream0));
      assertEquals(0, simpleCharStream1.getBeginLine());
      assertEquals((-1), simpleCharStream1.getBeginColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream1.bufpos);
      assertNotNull(xPathParserTokenManager0);
      
      // Undeclared exception!
      try { 
        xPathParserTokenManager0.ReInit(simpleCharStream1, 9);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 9. State unchanged.
         //
         verifyException("org.apache.commons.jxpath.ri.parser.XPathParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      StringReader stringReader0 = new StringReader("..");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, (-598), (-598));
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals((-598), simpleCharStream0.getLine());
      assertEquals((-598), simpleCharStream0.getBeginLine());
      assertEquals((-597), simpleCharStream0.getEndColumn());
      assertEquals((-598), simpleCharStream0.getEndLine());
      assertEquals((-598), simpleCharStream0.getBeginColumn());
      assertEquals((-597), simpleCharStream0.getColumn());
      assertEquals("..", token0.toString());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, simpleCharStream0.bufpos);
      assertEquals((-598), token0.endLine);
      assertEquals((-597), token0.endColumn);
      assertEquals(83, token0.kind);
      assertEquals((-598), token0.beginColumn);
      assertEquals((-598), token0.beginLine);
      assertNotNull(token0);
      
      Token token1 = xPathParserTokenManager0.getNextToken();
      assertFalse(token1.equals((Object)token0));
      assertEquals((-598), simpleCharStream0.getLine());
      assertEquals((-598), simpleCharStream0.getBeginLine());
      assertEquals((-597), simpleCharStream0.getEndColumn());
      assertEquals((-598), simpleCharStream0.getEndLine());
      assertEquals((-597), simpleCharStream0.getColumn());
      assertEquals((-597), simpleCharStream0.getBeginColumn());
      assertEquals("", token1.toString());
      assertNotSame(token1, token0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, simpleCharStream0.bufpos);
      assertEquals((-598), token1.beginLine);
      assertEquals((-597), token1.beginColumn);
      assertEquals((-598), token1.endLine);
      assertEquals((-597), token1.endColumn);
      assertEquals(0, token1.kind);
      assertNotNull(token1);
      
      Token token2 = xPathParserTokenManager0.getNextToken();
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
      assertEquals((-598), simpleCharStream0.getLine());
      assertEquals((-598), simpleCharStream0.getBeginLine());
      assertEquals((-597), simpleCharStream0.getEndColumn());
      assertEquals((-598), simpleCharStream0.getEndLine());
      assertEquals((-597), simpleCharStream0.getColumn());
      assertEquals((-597), simpleCharStream0.getBeginColumn());
      assertEquals("", token2.toString());
      assertNotSame(token2, token0);
      assertNotSame(token2, token1);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, simpleCharStream0.bufpos);
      assertEquals(0, token2.kind);
      assertEquals((-598), token2.beginLine);
      assertEquals((-597), token2.endColumn);
      assertEquals((-598), token2.endLine);
      assertEquals((-597), token2.beginColumn);
      assertNotNull(token2);
      
      XPathParserTokenManager xPathParserTokenManager1 = new XPathParserTokenManager(simpleCharStream0);
      assertFalse(xPathParserTokenManager1.equals((Object)xPathParserTokenManager0));
      assertEquals((-598), simpleCharStream0.getLine());
      assertEquals((-598), simpleCharStream0.getBeginLine());
      assertEquals((-597), simpleCharStream0.getEndColumn());
      assertEquals((-598), simpleCharStream0.getEndLine());
      assertEquals((-597), simpleCharStream0.getColumn());
      assertEquals((-597), simpleCharStream0.getBeginColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, simpleCharStream0.bufpos);
      assertNotNull(xPathParserTokenManager1);
      
      // Undeclared exception!
      try { 
        xPathParserTokenManager1.ReInit(simpleCharStream0, (-598));
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : -598. State unchanged.
         //
         verifyException("org.apache.commons.jxpath.ri.parser.XPathParserTokenManager", e);
      }
  }
}
