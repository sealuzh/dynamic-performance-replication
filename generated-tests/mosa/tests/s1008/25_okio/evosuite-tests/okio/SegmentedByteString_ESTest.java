/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 06 23:45:38 GMT 2018
 */

package okio;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.IOException;
import java.io.OutputStream;
import java.io.PipedOutputStream;
import java.nio.charset.Charset;
import okio.Buffer;
import okio.ByteString;
import okio.RealBufferedSink;
import okio.RealBufferedSource;
import okio.SegmentedByteString;
import okio.Sink;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SegmentedByteString_ESTest extends SegmentedByteString_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeShort(1);
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 1);
      SegmentedByteString segmentedByteString1 = new SegmentedByteString(buffer0, 1);
      assertEquals(1, segmentedByteString1.size());
      
      segmentedByteString1.lastIndexOf((ByteString) segmentedByteString0);
      boolean boolean0 = segmentedByteString1.equals(segmentedByteString0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 0);
      // Undeclared exception!
      try { 
        segmentedByteString0.sha1();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("okio.SegmentedByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 0);
      // Undeclared exception!
      try { 
        segmentedByteString0.toString();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("okio.SegmentedByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 0);
      // Undeclared exception!
      try { 
        segmentedByteString0.utf8();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("okio.SegmentedByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 0);
      // Undeclared exception!
      try { 
        segmentedByteString0.substring(0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("okio.SegmentedByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 0);
      // Undeclared exception!
      try { 
        segmentedByteString0.toAsciiLowercase();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("okio.SegmentedByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 0);
      // Undeclared exception!
      try { 
        segmentedByteString0.base64Url();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("okio.SegmentedByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 0);
      // Undeclared exception!
      try { 
        segmentedByteString0.asByteBuffer();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("okio.SegmentedByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      int int0 = 0;
      Buffer buffer0 = new Buffer();
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 0);
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        segmentedByteString0.indexOf(byteArray0, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("okio.SegmentedByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 0);
      segmentedByteString0.write(pipedOutputStream0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 0);
      segmentedByteString0.equals(segmentedByteString0);
      // Undeclared exception!
      try { 
        segmentedByteString0.getByte(0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("okio.SegmentedByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 0);
      // Undeclared exception!
      try { 
        segmentedByteString0.hmacSha1(segmentedByteString0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("okio.SegmentedByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 0);
      // Undeclared exception!
      try { 
        segmentedByteString0.sha256();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("okio.SegmentedByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 0);
      // Undeclared exception!
      try { 
        segmentedByteString0.write((OutputStream) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // out == null
         //
         verifyException("okio.SegmentedByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 0);
      segmentedByteString0.rangeEquals((-64), (ByteString) segmentedByteString0, (-64), 0);
      // Undeclared exception!
      try { 
        segmentedByteString0.toByteArray();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("okio.SegmentedByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 0);
      segmentedByteString0.hashCode();
      segmentedByteString0.hashCode();
      // Undeclared exception!
      try { 
        segmentedByteString0.base64();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("okio.SegmentedByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      buffer0.writeIntLe(6);
      buffer0.writeShort(6);
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 6);
      try { 
        segmentedByteString0.write(pipedOutputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeShort(1);
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 1);
      SegmentedByteString segmentedByteString1 = new SegmentedByteString(buffer0, 1);
      segmentedByteString0.hashCode();
      assertEquals(1, segmentedByteString0.size());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeShort(2);
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 2);
      SegmentedByteString segmentedByteString1 = new SegmentedByteString(buffer0, 2);
      boolean boolean0 = segmentedByteString1.equals(segmentedByteString0);
      assertEquals(2, segmentedByteString1.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeShort(1);
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 1);
      ByteString byteString0 = segmentedByteString0.toAsciiUppercase();
      int int0 = segmentedByteString0.compareTo(byteString0);
      assertEquals(1, segmentedByteString0.size());
      assertEquals(0, int0);
      
      SegmentedByteString segmentedByteString1 = new SegmentedByteString(buffer0, 1);
      assertEquals(1, segmentedByteString1.size());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeShort(1);
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 1);
      segmentedByteString0.md5();
      assertEquals(1, segmentedByteString0.size());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeShort(2);
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 2);
      segmentedByteString0.rangeEquals(2, (byte[]) null, 2, 2);
      assertEquals(2, segmentedByteString0.size());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeShort(2);
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 2);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-1);
      boolean boolean0 = segmentedByteString0.rangeEquals(2, byteArray0, (-929), (int) (byte) (-1));
      assertEquals(2, segmentedByteString0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeShort(1);
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 1);
      SegmentedByteString segmentedByteString1 = new SegmentedByteString(buffer0, 1);
      segmentedByteString1.rangeEquals(1, (ByteString) segmentedByteString0, 414, 1);
      boolean boolean0 = segmentedByteString1.equals(segmentedByteString0);
      assertEquals(1, segmentedByteString1.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeIntLe(6);
      buffer1.size = (long) 4759;
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer1, 4759);
      byte byte0 = segmentedByteString0.getByte(6);
      assertEquals(4759, segmentedByteString0.size());
      assertEquals((byte)0, byte0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeShort(1);
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 1);
      SegmentedByteString segmentedByteString1 = new SegmentedByteString(buffer1, 1);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      ByteString byteString0 = realBufferedSource0.readByteString();
      boolean boolean0 = segmentedByteString0.equals(byteString0);
      assertTrue(segmentedByteString0.equals((Object)segmentedByteString1));
      assertFalse(boolean0);
      assertEquals(1, segmentedByteString0.size());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeShort(1);
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 1);
      buffer0.readUtf8CodePoint();
      SegmentedByteString segmentedByteString1 = new SegmentedByteString(buffer0, 1);
      boolean boolean0 = segmentedByteString1.equals(segmentedByteString0);
      assertFalse(segmentedByteString0.equals((Object)segmentedByteString1));
      assertEquals(1, segmentedByteString0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeIntLe(45);
      buffer1.size = (long) 4759;
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 4759);
      byte[] byteArray0 = new byte[1];
      segmentedByteString0.endsWith(byteArray0);
      ByteString byteString0 = segmentedByteString0.toAsciiUppercase();
      segmentedByteString0.equals(byteString0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeIntLe(1643);
      Buffer buffer1 = buffer0.writeShort(1643);
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 6);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer1);
      Buffer buffer2 = realBufferedSink0.buffer();
      segmentedByteString0.write(buffer2);
      segmentedByteString0.toByteArray();
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      int int0 = (-3);
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeIntLe((-3));
      int int1 = 4759;
      buffer1.size = (long) 4759;
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 4759);
      byte[] byteArray0 = new byte[9];
      segmentedByteString0.endsWith(byteArray0);
      segmentedByteString0.rangeEquals(31, byteArray0, 4759, (-3));
      // Undeclared exception!
      try { 
        segmentedByteString0.substring((-3), 95);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // beginIndex < 0
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      buffer0.readAll((Sink) null);
      Buffer buffer1 = new Buffer();
      buffer0.writeShort(1);
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 1);
      byte[] byteArray0 = new byte[5];
      byteArray0[1] = (byte) (-19);
      byteArray0[3] = (byte) (-19);
      segmentedByteString0.endsWith(byteArray0);
      segmentedByteString0.equals(byteArray0);
      Charset.defaultCharset();
      buffer1.writableSegment(792);
      Charset charset0 = Charset.defaultCharset();
      segmentedByteString0.string(charset0);
      segmentedByteString0.hex();
      ByteString byteString0 = new ByteString(byteArray0);
      segmentedByteString0.write(buffer1);
      segmentedByteString0.hmacSha256(byteString0);
      SegmentedByteString segmentedByteString1 = null;
      try {
        segmentedByteString1 = new SegmentedByteString(buffer1, 1);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // s.limit == s.pos
         //
      }
  }
}
