/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 18 06:31:57 GMT 2018
 */

package org.apache.commons.imaging.common;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.imaging.common.RationalNumber;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class RationalNumber_ESTest extends RationalNumber_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf(0.2857142857142776);
      assertEquals(7, rationalNumber0.divisor);
      assertEquals(2, rationalNumber0.numerator);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf(3880.3551910601814);
      RationalNumber rationalNumber1 = rationalNumber0.negate();
      rationalNumber0.toString();
      rationalNumber0.negate();
      RationalNumber rationalNumber2 = RationalNumber.factoryMethod(16211, 0L);
      rationalNumber0.intValue();
      rationalNumber0.longValue();
      rationalNumber0.intValue();
      rationalNumber0.floatValue();
      rationalNumber0.toString();
      RationalNumber rationalNumber3 = rationalNumber0.negate();
      rationalNumber3.negate();
      rationalNumber0.doubleValue();
      rationalNumber1.intValue();
      rationalNumber3.negate();
      rationalNumber2.negate();
      rationalNumber0.intValue();
      RationalNumber.valueOf((-62904438));
      RationalNumber.factoryMethod(0L, 1638L);
      rationalNumber3.toString();
      // Undeclared exception!
      try { 
        RationalNumber.factoryMethod(0L, 0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      long long0 = (-2147483648L);
      RationalNumber rationalNumber0 = RationalNumber.factoryMethod((-2147483648L), 0L);
      // Undeclared exception!
      try { 
        rationalNumber0.toDisplayString();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.apache.commons.imaging.common.RationalNumber", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf(2.1474836454006605E9);
      float float0 = rationalNumber0.floatValue();
      assertEquals(2.14748365E9F, float0, 0.01F);
      
      int int0 = rationalNumber0.intValue();
      assertEquals(2147483645, int0);
      assertEquals(2.147483645E9, rationalNumber0.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf(5.442529982246924E-9);
      assertEquals(5.442529990979878E-9, rationalNumber0.doubleValue(), 0.01);
      assertEquals(183738078, rationalNumber0.divisor);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf(1.0);
      long long0 = rationalNumber0.longValue();
      assertEquals(1L, long0);
      assertEquals(1.0, rationalNumber0.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf(2256.5);
      assertEquals(4513, rationalNumber0.numerator);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      RationalNumber rationalNumber0 = new RationalNumber((-516), (-516));
      String string0 = rationalNumber0.toDisplayString();
      assertEquals("1", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf(1.0E-8);
      RationalNumber rationalNumber1 = rationalNumber0.negate();
      RationalNumber rationalNumber2 = RationalNumber.factoryMethod((-448L), 100000000);
      rationalNumber1.negate();
      RationalNumber rationalNumber3 = RationalNumber.factoryMethod(100000000, 0L);
      RationalNumber.factoryMethod((-1642L), 100000000);
      RationalNumber rationalNumber4 = rationalNumber0.negate();
      rationalNumber4.toDisplayString();
      rationalNumber2.toDisplayString();
      rationalNumber2.floatValue();
      rationalNumber4.toString();
      RationalNumber.valueOf(7);
      // Undeclared exception!
      try { 
        rationalNumber3.intValue();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.apache.commons.imaging.common.RationalNumber", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      long long0 = (-2147483656L);
      // Undeclared exception!
      try { 
        RationalNumber.factoryMethod((-2147483656L), 0L);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Invalid value, numerator: -2147483656, divisor: 0
         //
         verifyException("org.apache.commons.imaging.common.RationalNumber", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.factoryMethod(831L, 2147483662L);
      RationalNumber rationalNumber1 = RationalNumber.valueOf(1073741831);
      RationalNumber.valueOf(831L);
      RationalNumber rationalNumber2 = RationalNumber.factoryMethod((-3222L), 1073741831);
      double double0 = rationalNumber0.doubleValue();
      assertEquals(3.8649886594573774E-7, double0, 0.01);
      
      RationalNumber rationalNumber3 = RationalNumber.factoryMethod(836L, (-4150L));
      RationalNumber.valueOf(1073741831);
      RationalNumber rationalNumber4 = RationalNumber.factoryMethod((-894L), 0L);
      String string0 = rationalNumber4.toString();
      assertEquals("Invalid rational (1/0)", string0);
      
      RationalNumber.factoryMethod(1157L, 0L);
      RationalNumber rationalNumber5 = RationalNumber.factoryMethod(45L, 1073741831);
      long long0 = rationalNumber1.longValue();
      assertEquals(1073741831L, long0);
      
      RationalNumber rationalNumber6 = rationalNumber5.negate();
      assertEquals((-4.1909515584477586E-8), rationalNumber6.doubleValue(), 0.01);
      
      rationalNumber2.longValue();
      String string1 = rationalNumber3.toDisplayString();
      assertEquals("-0.201", string1);
      
      String string2 = rationalNumber3.toString();
      assertEquals("-418/2075 (-0.201)", string2);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.factoryMethod((-2147483655L), (-2147483655L));
      assertEquals(1, rationalNumber0.numerator);
      assertEquals(1.0, rationalNumber0.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.factoryMethod(831L, 2147483662L);
      RationalNumber rationalNumber1 = RationalNumber.valueOf(1073741831);
      RationalNumber.valueOf(831L);
      RationalNumber rationalNumber2 = RationalNumber.factoryMethod(1073741831, 0L);
      assertEquals(Float.POSITIVE_INFINITY, rationalNumber2.floatValue(), 0.01F);
      
      RationalNumber.factoryMethod((-3222L), 1073741831);
      rationalNumber0.doubleValue();
      assertEquals(3.8649886594573774E-7, rationalNumber0.doubleValue(), 0.01);
      
      rationalNumber1.toString();
      RationalNumber rationalNumber3 = RationalNumber.factoryMethod(836L, (-4150L));
      assertEquals(2075, rationalNumber3.divisor);
      
      String string0 = rationalNumber1.toString();
      assertEquals("1,073,741,831", string0);
      
      RationalNumber rationalNumber4 = RationalNumber.factoryMethod((-3222L), 814L);
      assertEquals((byte) (-3), rationalNumber4.byteValue());
      
      RationalNumber.valueOf(415);
      rationalNumber1.intValue();
      RationalNumber rationalNumber5 = new RationalNumber(1, (-2146464917));
      RationalNumber rationalNumber6 = RationalNumber.factoryMethod(2147483662L, 1L);
      assertEquals(1, rationalNumber6.divisor);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.factoryMethod(1L, 2147483662L);
      assertEquals(1, rationalNumber0.numerator);
      
      RationalNumber rationalNumber1 = RationalNumber.valueOf(4.3661344125212054E-4);
      assertEquals(4.3661767E-4F, rationalNumber1.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.factoryMethod((-2147483671L), 296L);
      String string0 = rationalNumber0.toDisplayString();
      assertEquals("-7,255,012.405", string0);
      assertEquals((-37), rationalNumber0.divisor);
  }
}
