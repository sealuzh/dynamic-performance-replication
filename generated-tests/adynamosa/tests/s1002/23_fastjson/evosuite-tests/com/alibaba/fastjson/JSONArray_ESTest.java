/*
 * This file was automatically generated by EvoSuite
 * Sun Jul 21 23:03:47 GMT 2019
 */

package com.alibaba.fastjson;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.TypeReference;
import com.alibaba.fastjson.annotation.JSONType;
import com.alibaba.fastjson.parser.DefaultJSONParser;
import com.alibaba.fastjson.parser.Feature;
import com.alibaba.fastjson.parser.JSONReaderScanner;
import com.alibaba.fastjson.parser.JSONScanner;
import com.alibaba.fastjson.parser.ParserConfig;
import com.alibaba.fastjson.serializer.BeanContext;
import com.alibaba.fastjson.serializer.JSONSerializer;
import com.alibaba.fastjson.serializer.JavaBeanSerializer;
import com.alibaba.fastjson.serializer.PascalNameFilter;
import com.alibaba.fastjson.serializer.SerializeConfig;
import com.alibaba.fastjson.serializer.SerializeFilter;
import com.alibaba.fastjson.serializer.SerializeWriter;
import com.alibaba.fastjson.serializer.SerializerFeature;
import com.alibaba.fastjson.serializer.SimplePropertyPreFilter;
import com.alibaba.fastjson.util.FieldInfo;
import com.alibaba.fastjson.util.JavaBeanInfo;
import com.alibaba.fastjson.util.UTF8Decoder;
import java.io.BufferedInputStream;
import java.io.FileDescriptor;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectInputStream;
import java.io.PipedInputStream;
import java.io.PushbackInputStream;
import java.io.SequenceInputStream;
import java.lang.reflect.Array;
import java.lang.reflect.Field;
import java.lang.reflect.Type;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.nio.charset.Charset;
import java.nio.charset.IllegalCharsetNameException;
import java.time.DateTimeException;
import java.time.Month;
import java.time.temporal.ChronoField;
import java.util.Collection;
import java.util.Enumeration;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.ListIterator;
import java.util.Locale;
import java.util.Set;
import java.util.concurrent.ConcurrentSkipListMap;
import java.util.function.Consumer;
import java.util.function.UnaryOperator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.time.chrono.MockMinguoDate;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONArray_ESTest extends JSONArray_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentAdd((Object) 1590);
      Type type0 = jSONArray1.componentType;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      jSONArray0.getFloatValue(0);
      jSONArray1.isEmpty();
      SerializerFeature serializerFeature0 = SerializerFeature.BrowserSecure;
      JSONArray jSONArray2 = jSONArray0.fluentRetainAll(jSONArray1);
      jSONArray2.contains(jSONArray0);
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      linkedList0.add((Float) null);
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte)64;
      byteArray0[0] = (byte)64;
      byteArray0[1] = (byte)33;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      LinkedList<Locale.LanguageRange> linkedList1 = new LinkedList<Locale.LanguageRange>();
      jSONArray0.getIntValue(0);
      // Undeclared exception!
      try { 
        jSONArray2.getDate(705);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 705, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      String[] stringArray0 = new String[0];
      SimplePropertyPreFilter simplePropertyPreFilter0 = new SimplePropertyPreFilter(stringArray0);
      JSONArray jSONArray1 = jSONArray0.fluentSet(3396, simplePropertyPreFilter0);
      Integer integer0 = new Integer(1);
      simplePropertyPreFilter0.setMaxLevel(3396);
      JSONArray jSONArray2 = (JSONArray)jSONArray0.clone();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      ListIterator<Object> listIterator0 = jSONArray0.listIterator(1590);
      JSONArray jSONArray3 = new JSONArray();
      jSONArray2.getComponentType();
      jSONArray0.getBooleanValue(0);
      LinkedHashSet<Month> linkedHashSet0 = new LinkedHashSet<Month>();
      Float float0 = new Float(3917.67703);
      int int0 = 2316;
      MockDate mockDate0 = new MockDate(2316, 1, 3359);
      jSONArray1.equals(listIterator0);
      jSONArray3.isEmpty();
      jSONArray1.fluentRemoveAll(jSONArray0);
      // Undeclared exception!
      try { 
        jSONArray3.getSqlDate(159);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 159, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      int int0 = 0;
      JSONArray jSONArray1 = jSONArray0.fluentAdd((Object) 1590);
      jSONArray1.getComponentType();
      jSONArray0.getFloatValue(0);
      jSONArray1.getInteger(0);
      String string0 = "{L>xm_[BE<>TGf";
      Type[] typeArray0 = new Type[7];
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[3];
      SerializerFeature serializerFeature0 = SerializerFeature.UseSingleQuotes;
      serializerFeatureArray0[0] = serializerFeature0;
      SerializerFeature serializerFeature1 = SerializerFeature.WriteSlashAsSpecial;
      jSONArray0.getSqlDate(0);
      Class<JSONArray> class0 = JSONArray.class;
      // Undeclared exception!
      try { 
        JSON.parseArray("1.2.46", class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // exepct '[', but float, pos 3, json : 1.2.46
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentAdd((Object) 1590);
      jSONArray0.getFloatValue(0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      jSONArray1.isEmpty();
      SerializerFeature serializerFeature0 = SerializerFeature.BrowserSecure;
      jSONArray0.contains(serializerFeature0);
      jSONArray0.isEmpty();
      SerializerFeature serializerFeature1 = SerializerFeature.WriteBigDecimalAsPlain;
      JSONArray jSONArray2 = jSONArray0.fluentRetainAll(jSONArray1);
      JSONArray jSONArray3 = jSONArray2.fluentRemoveAll(jSONArray1);
      jSONArray3.contains(jSONArray0);
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      JSONArray jSONArray4 = jSONArray0.fluentAdd((Object) null);
      Float float0 = new Float(0.0);
      LinkedList<Float> linkedList1 = new LinkedList<Float>(linkedList0);
      ConcurrentSkipListMap<SerializerFeature, PipedInputStream> concurrentSkipListMap0 = new ConcurrentSkipListMap<SerializerFeature, PipedInputStream>();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)19;
      byteArray0[1] = (byte) (-60);
      byteArray0[2] = (byte) (-92);
      byteArray0[3] = (byte)61;
      byteArray0[4] = (byte) (-123);
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)1;
      byteArray0[7] = (byte)66;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      concurrentSkipListMap0.navigableKeySet();
      jSONArray1.addAll(1, (Collection<?>) jSONArray4);
      jSONArray2.addAll(1, (Collection<?>) linkedList1);
      // Undeclared exception!
      try { 
        jSONArray1.subList(1, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fromIndex(1) > toIndex(0)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      ConcurrentSkipListMap<SerializerFeature, PipedInputStream> concurrentSkipListMap0 = new ConcurrentSkipListMap<SerializerFeature, PipedInputStream>();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0);
      BufferedInputStream bufferedInputStream1 = new BufferedInputStream(bufferedInputStream0, 52);
      jSONArray0.setRelatedArray(bufferedInputStream1);
      concurrentSkipListMap0.navigableKeySet();
      JSONArray jSONArray1 = new JSONArray(jSONArray0);
      // Undeclared exception!
      try { 
        jSONArray1.getInteger(1590);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1590, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      String[] stringArray0 = new String[6];
      SimplePropertyPreFilter simplePropertyPreFilter0 = new SimplePropertyPreFilter(stringArray0);
      JSONArray jSONArray1 = jSONArray0.fluentSet(3396, simplePropertyPreFilter0);
      Integer integer0 = new Integer(1);
      simplePropertyPreFilter0.setMaxLevel(3396);
      byte[] byteArray0 = new byte[1];
      JSONArray jSONArray2 = jSONArray1.fluentSet(1403, simplePropertyPreFilter0);
      Type type0 = jSONArray1.componentType;
      int int0 = 1558;
      jSONArray1.getObject(1558, (Type) null);
      Byte byte0 = new Byte((byte)0);
      PipedInputStream pipedInputStream0 = new PipedInputStream(1);
      // Undeclared exception!
      try { 
        jSONArray2.getBooleanValue(1403);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to boolean, value : com.alibaba.fastjson.serializer.SimplePropertyPreFilter@2
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      String[] stringArray0 = new String[1];
      SimplePropertyPreFilter simplePropertyPreFilter0 = new SimplePropertyPreFilter(stringArray0);
      JSONArray jSONArray1 = jSONArray0.fluentSet(3396, simplePropertyPreFilter0);
      Integer integer0 = new Integer(1);
      jSONArray0.getFloat(3394);
      JSONArray jSONArray2 = new JSONArray();
      ParameterizedTypeImpl parameterizedTypeImpl0 = (ParameterizedTypeImpl)TypeReference.LIST_STRING;
      jSONArray0.getObject(1590, (Type) parameterizedTypeImpl0);
      jSONArray0.getFloat(3383);
      jSONArray1.fluentSet(1, integer0);
      JSONArray jSONArray3 = new JSONArray();
      jSONArray1.getComponentType();
      SerializeWriter serializeWriter0 = new SerializeWriter();
      serializeWriter0.writeNull();
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("@type", 1);
      int int0 = 3389;
      jSONArray0.getJSONObject(3076);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      jSONArray1.getBigDecimal(3389);
      // Undeclared exception!
      try { 
        JSON.parseObject((byte[]) null, (Type) null, (Feature[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSON", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      String[] stringArray0 = new String[1];
      SimplePropertyPreFilter simplePropertyPreFilter0 = new SimplePropertyPreFilter(stringArray0);
      JSONArray jSONArray1 = jSONArray0.fluentSet(3396, simplePropertyPreFilter0);
      Integer integer0 = new Integer(1);
      int int0 = 3394;
      jSONArray0.getFloat(3394);
      jSONArray0.getShortValue(0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "]%;x<i.ci:");
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      ListIterator<Object> listIterator0 = jSONArray1.listIterator(1);
      jSONArray1.getComponentType();
      jSONArray0.getBooleanValue(3374);
      jSONArray1.contains(listIterator0);
      LinkedList<Locale.LanguageRange> linkedList1 = new LinkedList<Locale.LanguageRange>();
      jSONArray0.getIntValue(1);
      // Undeclared exception!
      try { 
        jSONArray1.getDate(3396);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : com.alibaba.fastjson.serializer.SimplePropertyPreFilter@2
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      String[] stringArray0 = new String[0];
      SimplePropertyPreFilter simplePropertyPreFilter0 = new SimplePropertyPreFilter(stringArray0);
      JSONArray jSONArray1 = jSONArray0.fluentSet(3396, simplePropertyPreFilter0);
      Integer integer0 = new Integer(1);
      simplePropertyPreFilter0.setMaxLevel(3396);
      JSONArray jSONArray2 = (JSONArray)jSONArray0.clone();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      int int0 = 211;
      jSONArray0.listIterator(211);
      JSONArray jSONArray3 = new JSONArray();
      jSONArray2.getComponentType();
      jSONArray0.getBooleanValue(0);
      LinkedHashSet<Month> linkedHashSet0 = new LinkedHashSet<Month>();
      jSONArray2.contains(linkedHashSet0);
      LinkedList<Locale.LanguageRange> linkedList1 = new LinkedList<Locale.LanguageRange>();
      jSONArray2.getIntValue(1);
      jSONArray1.getDate(159);
      LinkedList<Locale.LanguageRange> linkedList2 = new LinkedList<Locale.LanguageRange>();
      jSONArray1.retainAll(linkedList1);
      JSONArray jSONArray4 = new JSONArray(1);
      jSONArray0.fluentRemoveAll(linkedList1);
      // Undeclared exception!
      try { 
        jSONArray3.getInteger((-4483));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      String[] stringArray0 = new String[0];
      SimplePropertyPreFilter simplePropertyPreFilter0 = new SimplePropertyPreFilter(stringArray0);
      JSONArray jSONArray1 = jSONArray0.fluentSet(3396, simplePropertyPreFilter0);
      jSONArray1.set(1, jSONArray0);
      Integer integer0 = new Integer(1);
      simplePropertyPreFilter0.setMaxLevel(3396);
      jSONArray0.clone();
      jSONArray0.getFloat(3394);
      JSONArray jSONArray2 = jSONArray0.fluentSet(3394, simplePropertyPreFilter0);
      JSONArray jSONArray3 = new JSONArray();
      jSONArray3.getComponentType();
      // Undeclared exception!
      jSONArray2.getObject(1, (Type) null);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      String[] stringArray0 = new String[0];
      SimplePropertyPreFilter simplePropertyPreFilter0 = new SimplePropertyPreFilter(stringArray0);
      JSONArray jSONArray1 = jSONArray0.fluentSet(3396, simplePropertyPreFilter0);
      Integer integer0 = new Integer(1);
      simplePropertyPreFilter0.setMaxLevel(3396);
      jSONArray1.clone();
      jSONArray0.getFloat(3394);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      JSONArray jSONArray2 = jSONArray0.fluentSet(1590, fileDescriptor0);
      JSONArray jSONArray3 = new JSONArray();
      jSONArray3.getComponentType();
      SerializeWriter serializeWriter0 = new SerializeWriter();
      serializeWriter0.writeNull();
      jSONArray3.retainAll(jSONArray1);
      JSONSerializer jSONSerializer0 = new JSONSerializer(serializeWriter0);
      simplePropertyPreFilter0.apply(jSONSerializer0, jSONArray2, "com.alibaba.fastjson.JSONArray");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("1.2.46", 2851);
      jSONArray1.getJSONObject(1590);
      FileDescriptor fileDescriptor1 = new FileDescriptor();
      // Undeclared exception!
      try { 
        jSONArray3.getBigDecimal(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentAdd((Object) 1590);
      jSONArray0.getFloatValue(0);
      jSONArray1.getInteger(0);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-78);
      // Undeclared exception!
      try { 
        jSONArray1.getBooleanValue(1590);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1590, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      String[] stringArray0 = new String[0];
      SimplePropertyPreFilter simplePropertyPreFilter0 = new SimplePropertyPreFilter(stringArray0);
      JSONArray jSONArray1 = jSONArray0.fluentSet(3396, simplePropertyPreFilter0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Integer integer0 = new Integer(1);
      jSONArray0.getFloat(3394);
      jSONArray0.getShortValue(0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      jSONArray1.getShort((short)0);
      ListIterator<Object> listIterator0 = jSONArray1.listIterator(0);
      jSONArray0.getComponentType();
      jSONArray0.getBooleanValue(1590);
      jSONArray1.contains("com.alibaba.fastjson.JSONArray");
      LinkedList<Locale.LanguageRange> linkedList1 = new LinkedList<Locale.LanguageRange>();
      jSONArray1.getIntValue(1);
      jSONArray0.getDate((short)0);
      jSONArray1.containsAll(jSONArray0);
      JSONArray jSONArray2 = jSONArray0.fluentRemove((Object) listIterator0);
      jSONArray0.getTimestamp(3394);
      jSONArray2.getInteger(1590);
      jSONArray1.fluentClear();
      // Undeclared exception!
      try { 
        jSONArray2.getShortValue(3393);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3393, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      String[] stringArray0 = new String[0];
      SimplePropertyPreFilter simplePropertyPreFilter0 = new SimplePropertyPreFilter(stringArray0);
      JSONArray jSONArray1 = jSONArray0.fluentSet(3396, simplePropertyPreFilter0);
      Integer integer0 = new Integer(1);
      simplePropertyPreFilter0.setMaxLevel(3396);
      jSONArray0.clone();
      jSONArray0.getFloat(3394);
      JSONArray jSONArray2 = jSONArray0.fluentSet(3394, simplePropertyPreFilter0);
      JSONArray jSONArray3 = new JSONArray();
      jSONArray0.getComponentType();
      jSONArray2.getObject(1558, (Type) null);
      simplePropertyPreFilter0.setMaxLevel(3359);
      Byte byte0 = new Byte((byte) (-108));
      PipedInputStream pipedInputStream0 = new PipedInputStream(224);
      jSONArray3.contains(jSONArray0);
      JSONObject[] jSONObjectArray0 = new JSONObject[6];
      jSONArray1.getJSONObject(3396);
      // Undeclared exception!
      try { 
        MockMinguoDate.of(1590, 192, 1768);
        fail("Expecting exception: DateTimeException");
      
      } catch(DateTimeException e) {
         //
         // Invalid value for MonthOfYear (valid values 1 - 12): 192
         //
         verifyException("java.time.temporal.ValueRange", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentAdd((Object) 1590);
      jSONArray1.getComponentType();
      jSONArray0.getFloatValue(0);
      jSONArray1.getInteger(0);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-78);
      jSONArray0.isEmpty();
      JSONArray jSONArray2 = jSONArray0.fluentRemove(0);
      jSONArray2.fluentSet(1, jSONArray0);
      PipedInputStream pipedInputStream0 = null;
      try {
        pipedInputStream0 = new PipedInputStream(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pipe Size <= 0
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      String[] stringArray0 = new String[0];
      SimplePropertyPreFilter simplePropertyPreFilter0 = new SimplePropertyPreFilter(stringArray0);
      JSONArray jSONArray1 = jSONArray0.fluentSet(3395, simplePropertyPreFilter0);
      JSONArray jSONArray2 = jSONArray1.fluentSet(1, (Object) null);
      jSONArray2.getDoubleValue(1);
      Float float0 = new Float((double) 1);
      byte[] byteArray0 = new byte[6];
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "dd.MM.yyyy");
      byteArray0[0] = (byte)111;
      byteArray0[1] = (byte)111;
      byteArray0[2] = (byte)111;
      byteArray0[3] = (byte)37;
      byteArray0[4] = (byte)78;
      jSONArray0.isEmpty();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Class<String> class0 = String.class;
      jSONArray2.toJavaList(class0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("1.2.46", 1616);
      JSONArray jSONArray3 = jSONArray1.fluentAdd((Object) float0);
      jSONArray0.getBigDecimal(0);
      jSONArray3.getFloat((byte)37);
      jSONArray2.getDouble(1590);
      assertEquals(3397, jSONArray2.size());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      String[] stringArray0 = new String[0];
      SimplePropertyPreFilter simplePropertyPreFilter0 = new SimplePropertyPreFilter(stringArray0);
      JSONArray jSONArray1 = jSONArray0.fluentSet(3396, simplePropertyPreFilter0);
      jSONArray0.getFloat(3375);
      jSONArray0.getShortValue(0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      jSONArray1.listIterator(0);
      jSONArray0.getComponentType();
      jSONArray0.getBooleanValue(1590);
      jSONArray1.contains("com.alibaba.fastjson.JSONArray");
      // Undeclared exception!
      try { 
        jSONArray0.getDouble(3396);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to double, value : com.alibaba.fastjson.serializer.SimplePropertyPreFilter@2
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      int int0 = 0;
      JSONArray jSONArray1 = jSONArray0.fluentAdd((Object) 1590);
      jSONArray1.getComponentType();
      jSONArray0.getFloatValue(0);
      jSONArray1.getInteger(0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      Integer integer0 = new Integer(1590);
      jSONArray1.getFloat(0);
      int int1 = 0;
      // Undeclared exception!
      try { 
        jSONArray0.getShortValue(1590);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1590, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      String[] stringArray0 = new String[0];
      SimplePropertyPreFilter simplePropertyPreFilter0 = new SimplePropertyPreFilter(stringArray0);
      JSONArray jSONArray1 = jSONArray0.fluentSet(3396, simplePropertyPreFilter0);
      jSONArray1.getDoubleValue(1);
      JSON.DEFAULT_PARSER_FEATURE = 1590;
      Float float0 = new Float((double) 1);
      jSONArray0.isEmpty();
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      Float float1 = new Float((float) 1590);
      linkedList0.add(float1);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("1.2.46");
      JSON.handleResovleTask(defaultJSONParser0, jSONArray1);
      Set<String> set0 = simplePropertyPreFilter0.getExcludes();
      jSONArray0.containsAll(set0);
      jSONArray0.getSqlDate(1590);
      Float float2 = new Float((double) 0);
      jSONArray0.getFloat(1654);
      jSONArray0.fluentAddAll((Collection<?>) linkedList0);
      JSONArray jSONArray2 = jSONArray1.fluentRemove((Object) simplePropertyPreFilter0);
      long long0 = jSONArray2.getLongValue(3396);
      assertEquals(3397, jSONArray0.size());
      assertEquals(1590L, long0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getBigInteger(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = new JSONObject(0);
      SerializerFeature serializerFeature0 = SerializerFeature.QuoteFieldNames;
      SerializerFeature serializerFeature1 = SerializerFeature.WriteSlashAsSpecial;
      Class<Month> class0 = Month.class;
      List<Month> list0 = jSONArray0.toJavaList(class0);
      jSONArray0.removeAll(list0);
      SerializerFeature serializerFeature2 = SerializerFeature.WriteNonStringValueAsString;
      SerializerFeature serializerFeature3 = SerializerFeature.WriteNullListAsEmpty;
      LinkedList<JSONArray> linkedList0 = new LinkedList<JSONArray>();
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[8];
      serializerFeatureArray0[0] = serializerFeature1;
      serializerFeatureArray0[1] = serializerFeature3;
      serializerFeatureArray0[2] = serializerFeature2;
      serializerFeatureArray0[3] = serializerFeature3;
      serializerFeatureArray0[4] = serializerFeature1;
      serializerFeatureArray0[5] = serializerFeature0;
      serializerFeatureArray0[6] = serializerFeature0;
      serializerFeatureArray0[7] = serializerFeature2;
      JSON.toJSONStringWithDateFormat(linkedList0, "dd.MM.yyyy", serializerFeatureArray0);
      LinkedList<String> linkedList1 = new LinkedList<String>();
      Month month0 = Month.APRIL;
      ChronoField chronoField0 = ChronoField.YEAR;
      month0.isSupported(chronoField0);
      // Undeclared exception!
      try { 
        jSONArray0.add(1, (Object) month0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentAdd((Object) 1);
      jSONArray1.getComponentType();
      jSONArray0.getFloatValue(0);
      jSONArray1.getInteger(0);
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte)113;
      JSON.parse("1.2.46", 0);
      jSONArray0.getBoolean(0);
      // Undeclared exception!
      try { 
        jSONArray1.getInteger(1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.DEFAULT_PARSER_FEATURE = 1;
      Month month0 = Month.AUGUST;
      String string0 = JSON.DEFFAULT_DATE_FORMAT;
      int int0 = 1626;
      jSONArray0.set(1626, month0);
      ParameterizedTypeImpl parameterizedTypeImpl0 = (ParameterizedTypeImpl)TypeReference.LIST_STRING;
      jSONArray0.listIterator();
      jSONArray0.add(1, (Object) null);
      jSONArray0.fluentSet(1, parameterizedTypeImpl0);
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      // Undeclared exception!
      try { 
        jSONArray0.getShort(1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to short, value : java.util.List<java.lang.String>
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      String[] stringArray0 = new String[1];
      SimplePropertyPreFilter simplePropertyPreFilter0 = new SimplePropertyPreFilter(stringArray0);
      JSONArray jSONArray1 = jSONArray0.fluentSet(3396, simplePropertyPreFilter0);
      Integer integer0 = new Integer(1);
      jSONArray0.getFloat(3394);
      int int0 = 0;
      jSONArray0.getShortValue(0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      jSONArray0.getComponentType();
      jSONArray0.getBooleanValue(1);
      jSONArray1.contains("com.alibaba.fastjson.JSONArrky");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      jSONArray0.getDouble(3316);
      Class<Float> class0 = Float.class;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      jSONArray0.getBigDecimal(2271);
      JSON.toJSON((Object) null, parserConfig0);
      JSON.toJSON((Object) null, (SerializeConfig) null);
      ParserConfig parserConfig1 = new ParserConfig(false);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("@type", parserConfig1);
      jSONArray1.addAll((Collection<?>) jSONArray0);
      parserConfig1.setAsmEnable(false);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArray(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // exepct '[', but error, pos 1, json : @type
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.size();
      Month month0 = Month.MAY;
      jSONArray0.add((Object) month0);
      // Undeclared exception!
      try { 
        jSONArray0.subList(1, 3786);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // toIndex = 3786
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      int int0 = 1;
      jSONArray0.DEFAULT_PARSER_FEATURE = 1;
      Month month0 = Month.AUGUST;
      String string0 = JSON.DEFFAULT_DATE_FORMAT;
      jSONArray0.set(1626, month0);
      jSONArray0.listIterator();
      jSONArray0.add(1, (Object) null);
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      jSONArray0.getShort(1);
      jSONArray0.getBoolean(1);
      jSONArray0.lastIndexOf(month0);
      jSONArray0.clone();
      Class<JSONArray> class0 = JSONArray.class;
      // Undeclared exception!
      try { 
        jSONArray0.toJavaList(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : com.alibaba.fastjson.JSONArray
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      String[] stringArray0 = new String[0];
      SimplePropertyPreFilter simplePropertyPreFilter0 = new SimplePropertyPreFilter(stringArray0);
      JSONArray jSONArray1 = jSONArray0.fluentSet(3396, simplePropertyPreFilter0);
      Integer integer0 = new Integer(1);
      jSONArray0.getFloat(3394);
      byte[] byteArray0 = new byte[1];
      int int0 = 0;
      jSONArray0.getShortValue(0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      jSONArray0.getComponentType();
      jSONArray0.getBooleanValue(989);
      jSONArray1.contains("com.alibaba.fastjson.JSONArray");
      jSONArray0.getDouble(3316);
      Class<Float> class0 = Float.class;
      ParserConfig parserConfig0 = new ParserConfig(false);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("@type", parserConfig0);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArray(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // exepct '[', but error, pos 1, json : @type
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      int int0 = 159;
      JSONArray jSONArray0 = new JSONArray(159);
      Class<Integer> class0 = Integer.class;
      jSONArray0.toJavaList(class0);
      JSONArray jSONArray1 = jSONArray0.fluentRetainAll(jSONArray0);
      jSONArray1.fluentSet(1, class0);
      Type type0 = jSONArray1.componentType;
      // Undeclared exception!
      try { 
        jSONArray0.getObject(1, (Type) class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : class java.lang.Integer
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      String[] stringArray0 = new String[0];
      SimplePropertyPreFilter simplePropertyPreFilter0 = new SimplePropertyPreFilter(stringArray0);
      JSONArray jSONArray1 = jSONArray0.fluentSet(3396, simplePropertyPreFilter0);
      Integer integer0 = new Integer(1);
      jSONArray0.getFloat(3394);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)111;
      JSONArray jSONArray2 = jSONArray1.fluentSet(1403, simplePropertyPreFilter0);
      Type type0 = jSONArray1.componentType;
      jSONArray1.getObject(1558, (Type) null);
      Byte byte0 = new Byte((byte)111);
      Month month0 = Month.OCTOBER;
      Float float0 = new Float((-1237.3059504));
      jSONArray1.contains(float0);
      jSONArray2.getBigInteger((byte)111);
      jSONArray2.setComponentType((Type) null);
      jSONArray2.listIterator();
      Class<SerializerFeature> class0 = SerializerFeature.class;
      jSONArray2.getObject(21, class0);
      SerializerFeature serializerFeature0 = SerializerFeature.IgnoreNonFieldGetter;
      jSONArray2.fluentSet(4, byte0);
      jSONArray2.iterator();
      jSONArray2.fluentRemove(1);
      jSONArray0.fluentRemoveAll(jSONArray1);
      // Undeclared exception!
      try { 
        Month.valueOf("A-5,]||dYi(o[<Zo'");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant java.time.Month.A-5,]||dYi(o[<Zo'
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentAdd((Object) 989);
      jSONArray1.getComponentType();
      jSONArray0.getFloatValue(0);
      jSONArray1.getInteger(0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-69);
      byteArray0[1] = (byte)113;
      byte byte0 = (byte) (-94);
      jSONArray0.isEmpty();
      // Undeclared exception!
      try { 
        JSON.parse("1.2.46");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not close json text, token : .
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(159);
      Class<Integer> class0 = Integer.class;
      jSONArray0.toJavaList((Class<Integer>) null);
      JSONArray jSONArray1 = jSONArray0.fluentClear();
      jSONArray1.fluentSet(79, class0);
      Type type0 = jSONArray1.componentType;
      jSONArray0.getObject(1, (Type) class0);
      jSONArray0.getShortValue(1);
      // Undeclared exception!
      try { 
        jSONArray1.getInteger((-2571));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      String[] stringArray0 = new String[0];
      SimplePropertyPreFilter simplePropertyPreFilter0 = new SimplePropertyPreFilter(stringArray0);
      JSONArray jSONArray1 = jSONArray0.fluentSet(3396, simplePropertyPreFilter0);
      Integer integer0 = new Integer(989);
      Float float0 = new Float((double) 3394);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)111;
      Integer integer1 = new Integer((-3877));
      ParserConfig parserConfig0 = new ParserConfig();
      JSON.toJSON((Object) integer1, parserConfig0);
      jSONArray0.getFloatValue(196);
      // Undeclared exception!
      try { 
        jSONArray1.getInteger((-484));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSON.DEFAULT_GENERATE_FEATURE = 1;
      Month month0 = Month.AUGUST;
      Month[] monthArray0 = new Month[8];
      Month month1 = Month.AUGUST;
      monthArray0[0] = month1;
      jSONArray0.toArray(monthArray0);
      String string0 = JSON.DEFFAULT_DATE_FORMAT;
      jSONArray0.set(1626, month0);
      jSONArray0.getComponentType();
      BigInteger bigInteger0 = BigInteger.ONE;
      jSONArray0.listIterator();
      jSONArray0.getLong(1601);
      jSONArray0.add(1, (Object) null);
      JSONArray jSONArray1 = jSONArray0.fluentSet(1, (Object) null);
      jSONArray0.getShort(1);
      jSONArray0.getBoolean(1);
      jSONArray0.getBigDecimal(1626);
      jSONArray0.containsAll(jSONArray1);
      jSONArray1.remove((Object) null);
      jSONArray0.getJSONArray(677);
      assertEquals(1627, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      String[] stringArray0 = new String[0];
      SimplePropertyPreFilter simplePropertyPreFilter0 = new SimplePropertyPreFilter(stringArray0);
      JSONArray jSONArray1 = jSONArray0.fluentSet(3447, simplePropertyPreFilter0);
      Float float0 = new Float((double) 1);
      byte[] byteArray0 = new byte[1];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Class<String> class0 = String.class;
      jSONArray1.getObject(1, class0);
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(sequenceInputStream0);
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[5];
      SerializerFeature serializerFeature0 = SerializerFeature.WriteTabAsSpecial;
      serializerFeatureArray0[0] = serializerFeature0;
      SerializerFeature serializerFeature1 = SerializerFeature.BeanToArray;
      sequenceInputStream0.available();
      serializerFeatureArray0[1] = serializerFeature1;
      SerializerFeature serializerFeature2 = SerializerFeature.NotWriteDefaultValue;
      serializerFeatureArray0[2] = serializerFeature2;
      SerializerFeature serializerFeature3 = SerializerFeature.PrettyFormat;
      serializerFeatureArray0[3] = serializerFeature3;
      SerializerFeature serializerFeature4 = SerializerFeature.PrettyFormat;
      serializerFeatureArray0[4] = serializerFeature4;
      JSON.toJSONString((Object) pushbackInputStream0, 1, serializerFeatureArray0);
      JSON.toJSONString((Object) serializerFeature1);
      // Undeclared exception!
      try { 
        jSONArray1.getByteValue(3447);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to byte, value : com.alibaba.fastjson.serializer.SimplePropertyPreFilter@2
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      String[] stringArray0 = new String[0];
      SimplePropertyPreFilter simplePropertyPreFilter0 = new SimplePropertyPreFilter(stringArray0);
      JSONArray jSONArray1 = jSONArray0.fluentSet(1, simplePropertyPreFilter0);
      Float float0 = new Float((double) 1);
      byte[] byteArray0 = new byte[1];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Class<String> class0 = String.class;
      jSONArray1.getObject(1, class0);
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(sequenceInputStream0);
      jSONArray0.size();
      // Undeclared exception!
      try { 
        jSONArray1.get(989);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 989, Size: 2
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "1.2.46";
      stringArray0[1] = "";
      stringArray0[2] = "@type";
      stringArray0[3] = "@type";
      SimplePropertyPreFilter simplePropertyPreFilter0 = new SimplePropertyPreFilter(stringArray0);
      LinkedList<SerializerFeature> linkedList0 = new LinkedList<SerializerFeature>();
      JSONArray jSONArray1 = jSONArray0.fluentRemoveAll(linkedList0);
      Month month0 = Month.DECEMBER;
      JSONArray jSONArray2 = jSONArray1.fluentSet(989, month0);
      jSONArray2.setRelatedArray("");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Float float0 = new Float(0.0);
      SerializeConfig serializeConfig0 = new SerializeConfig();
      PascalNameFilter pascalNameFilter0 = new PascalNameFilter();
      SerializeConfig serializeConfig1 = SerializeConfig.globalInstance;
      serializeConfig1.setTypeKey("dd.MM.yyyy");
      SerializeFilter[] serializeFilterArray0 = new SerializeFilter[6];
      PascalNameFilter pascalNameFilter1 = new PascalNameFilter();
      serializeFilterArray0[0] = (SerializeFilter) pascalNameFilter1;
      serializeFilterArray0[1] = (SerializeFilter) pascalNameFilter0;
      serializeFilterArray0[2] = (SerializeFilter) pascalNameFilter0;
      serializeFilterArray0[3] = (SerializeFilter) simplePropertyPreFilter0;
      serializeFilterArray0[4] = (SerializeFilter) pascalNameFilter0;
      serializeFilterArray0[5] = (SerializeFilter) pascalNameFilter0;
      ChronoField chronoField0 = ChronoField.DAY_OF_WEEK;
      month0.isSupported(chronoField0);
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[0];
      JSON.toJSONString((Object) "@type", serializeConfig0, serializeFilterArray0, "@type", 3396, serializerFeatureArray0);
      jSONArray0.getByteValue(1);
      // Undeclared exception!
      try { 
        jSONArray2.get(1051);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1051, Size: 990
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      String[] stringArray0 = new String[0];
      SimplePropertyPreFilter simplePropertyPreFilter0 = new SimplePropertyPreFilter(stringArray0);
      jSONArray0.fluentSet(3396, simplePropertyPreFilter0);
      Float float0 = new Float((double) 1);
      SerializeConfig serializeConfig0 = new SerializeConfig();
      PascalNameFilter pascalNameFilter0 = new PascalNameFilter();
      SerializerFeature serializerFeature0 = SerializerFeature.WriteNullNumberAsZero;
      SerializerFeature serializerFeature1 = SerializerFeature.SortField;
      SerializerFeature serializerFeature2 = SerializerFeature.SortField;
      SerializeConfig serializeConfig1 = SerializeConfig.globalInstance;
      SerializeFilter[] serializeFilterArray0 = new SerializeFilter[5];
      serializeFilterArray0[0] = (SerializeFilter) pascalNameFilter0;
      serializeFilterArray0[1] = (SerializeFilter) pascalNameFilter0;
      serializeFilterArray0[2] = (SerializeFilter) simplePropertyPreFilter0;
      serializeFilterArray0[3] = (SerializeFilter) simplePropertyPreFilter0;
      serializeFilterArray0[4] = (SerializeFilter) simplePropertyPreFilter0;
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[7];
      serializerFeatureArray0[0] = serializerFeature2;
      serializerFeatureArray0[1] = serializerFeature2;
      serializerFeatureArray0[2] = serializerFeature1;
      serializerFeatureArray0[3] = serializerFeature2;
      serializerFeatureArray0[4] = serializerFeature2;
      SerializerFeature serializerFeature3 = SerializerFeature.WriteNonStringKeyAsString;
      serializerFeatureArray0[5] = serializerFeature3;
      serializeConfig1.setTypeKey("1.2.46");
      serializerFeatureArray0[6] = serializerFeature0;
      JSON.toJSONString((Object) float0, serializeConfig1, serializeFilterArray0, "dd.MM.yyyy", 1, serializerFeatureArray0);
      jSONArray0.getByteValue(1);
      int int0 = jSONArray0.size();
      assertEquals(3397, int0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      String[] stringArray0 = new String[0];
      SimplePropertyPreFilter simplePropertyPreFilter0 = new SimplePropertyPreFilter(stringArray0);
      JSONArray jSONArray1 = jSONArray0.fluentSet(3396, simplePropertyPreFilter0);
      jSONArray1.getDoubleValue(1);
      Float float0 = new Float((double) 3394);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)111;
      Integer integer0 = new Integer(1003);
      ParserConfig parserConfig0 = new ParserConfig();
      Object object0 = JSON.toJSON((Object) integer0, parserConfig0);
      int int0 = 1;
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[1];
      SerializerFeature serializerFeature0 = SerializerFeature.WriteDateUseDateFormat;
      serializerFeatureArray0[0] = serializerFeature0;
      JSON.toJSONString(object0, 1, serializerFeatureArray0);
      // Undeclared exception!
      try { 
        JSON.toJSONString((Object) "{}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, class byte
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      String[] stringArray0 = new String[0];
      FileSystemHandling.shouldAllThrowIOExceptions();
      SimplePropertyPreFilter simplePropertyPreFilter0 = new SimplePropertyPreFilter(stringArray0);
      JSONArray jSONArray1 = jSONArray0.fluentSet(3417, simplePropertyPreFilter0);
      jSONArray1.getDoubleValue(1);
      jSONArray0.getFloat(3394);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)13;
      byteArray0[1] = (byte)13;
      byteArray0[2] = (byte)13;
      byteArray0[3] = (byte)13;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Class<String> class0 = String.class;
      jSONArray0.getObject((int) 13, class0);
      jSONArray0.listIterator();
      // Undeclared exception!
      try { 
        jSONArray0.getTimestamp(3417);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : com.alibaba.fastjson.serializer.SimplePropertyPreFilter@2
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      String[] stringArray0 = new String[0];
      SimplePropertyPreFilter simplePropertyPreFilter0 = new SimplePropertyPreFilter(stringArray0);
      JSONArray jSONArray1 = jSONArray0.fluentSet(3396, simplePropertyPreFilter0);
      jSONArray1.getDoubleValue(1);
      jSONArray0.getFloat(3394);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)111;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      JSONArray jSONArray2 = jSONArray1.fluentSet(1403, simplePropertyPreFilter0);
      Type type0 = jSONArray1.componentType;
      Month month0 = Month.NOVEMBER;
      JSONArray jSONArray3 = jSONArray2.fluentSet(3396, month0);
      jSONArray3.getShort(3394);
      // Undeclared exception!
      try { 
        jSONArray3.getBoolean(3396);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to boolean, value : NOVEMBER
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      int int0 = 1;
      JSON.DEFAULT_GENERATE_FEATURE = 1;
      Month month0 = Month.AUGUST;
      Month[] monthArray0 = new Month[1];
      Month month1 = Month.AUGUST;
      monthArray0[0] = month1;
      jSONArray0.toArray(monthArray0);
      String string0 = JSON.DEFFAULT_DATE_FORMAT;
      jSONArray0.set(1626, month0);
      jSONArray0.getComponentType();
      BigInteger bigInteger0 = BigInteger.ONE;
      jSONArray0.getLong(1601);
      // Undeclared exception!
      try { 
        jSONArray0.getLong(1626);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to long, value : AUGUST
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      String[] stringArray0 = new String[0];
      SimplePropertyPreFilter simplePropertyPreFilter0 = new SimplePropertyPreFilter(stringArray0);
      JSONArray jSONArray1 = jSONArray0.fluentSet(3396, simplePropertyPreFilter0);
      jSONArray1.getDoubleValue(1);
      Float float0 = new Float((double) 3394);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)111;
      Integer integer0 = new Integer(1003);
      ParserConfig parserConfig0 = new ParserConfig();
      Object object0 = JSON.toJSON((Object) integer0, parserConfig0);
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[1];
      SerializerFeature serializerFeature0 = SerializerFeature.WriteDateUseDateFormat;
      serializerFeatureArray0[0] = serializerFeature0;
      JSON.toJSONString(object0, 1, serializerFeatureArray0);
      // Undeclared exception!
      try { 
        JSON.toJSONString((Object) "{}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, class byte
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSON.DEFAULT_GENERATE_FEATURE = 1;
      Month month0 = Month.AUGUST;
      Month[] monthArray0 = new Month[1];
      Month month1 = Month.AUGUST;
      monthArray0[0] = month1;
      jSONArray0.toArray(monthArray0);
      String string0 = JSON.DEFFAULT_DATE_FORMAT;
      jSONArray0.set(1626, month0);
      jSONArray0.getComponentType();
      BigInteger bigInteger0 = BigInteger.ONE;
      jSONArray0.getLong(1601);
      jSONArray0.fluentSet(1, (Object) null);
      jSONArray0.getShort(1);
      jSONArray0.getBoolean(1);
      // Undeclared exception!
      try { 
        jSONArray0.getBigDecimal(1626);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      String[] stringArray0 = new String[0];
      SimplePropertyPreFilter simplePropertyPreFilter0 = new SimplePropertyPreFilter(stringArray0);
      JSONArray jSONArray1 = jSONArray0.fluentSet(3396, simplePropertyPreFilter0);
      double double0 = new Integer(989);
      Float float0 = new Float((double) 3394);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)111;
      Integer integer0 = new Integer(1003);
      ParserConfig parserConfig0 = new ParserConfig();
      Object object0 = JSON.toJSON((Object) integer0, parserConfig0);
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[1];
      Class<String>[] classArray0 = (Class<String>[]) Array.newInstance(Class.class, 9);
      Class<String> class0 = String.class;
      classArray0[0] = class0;
      Class<String> class1 = String.class;
      classArray0[1] = class1;
      Class<String> class2 = String.class;
      classArray0[2] = class2;
      Class<String> class3 = String.class;
      classArray0[3] = class3;
      Class<String> class4 = String.class;
      classArray0[4] = class4;
      Class<String> class5 = String.class;
      classArray0[5] = class5;
      Class<String> class6 = String.class;
      classArray0[6] = class6;
      Class<String> class7 = String.class;
      classArray0[7] = class7;
      Class<String> class8 = String.class;
      classArray0[8] = class8;
      parserConfig0.initJavaBeanDeserializers(classArray0);
      SerializerFeature serializerFeature0 = SerializerFeature.WriteDateUseDateFormat;
      serializerFeatureArray0[0] = serializerFeature0;
      JSON.toJSONString(object0, 1, serializerFeatureArray0);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      jSONArray0.getIntValue(989);
      jSONArray0.getDate(3394);
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte)28;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      LinkedList<Locale.LanguageRange> linkedList1 = new LinkedList<Locale.LanguageRange>();
      JSONArray jSONArray2 = new JSONArray();
      jSONArray0.getLongValue(148);
      jSONArray1.getTimestamp(0);
      jSONArray1.getInteger(179);
      assertEquals(3397, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      String[] stringArray0 = new String[0];
      SimplePropertyPreFilter simplePropertyPreFilter0 = new SimplePropertyPreFilter(stringArray0);
      JSONArray jSONArray1 = jSONArray0.fluentSet(3396, simplePropertyPreFilter0);
      jSONArray1.getDoubleValue(3089);
      Float float0 = new Float(0.0);
      byte[] byteArray0 = new byte[1];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      jSONArray1.add(0, (Object) float0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte byte0 = jSONArray1.getByteValue(3396);
      assertEquals(3398, jSONArray1.size());
      assertEquals((byte)0, byte0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Class<Month> class0 = Month.class;
      List<Month> list0 = jSONArray0.toJavaList(class0);
      JSONArray jSONArray1 = jSONArray0.fluentRetainAll(list0);
      Float float0 = new Float((float) 989);
      jSONArray1.fluentSet(79, float0);
      Type type0 = jSONArray0.componentType;
      // Undeclared exception!
      try { 
        jSONArray1.getObject(1165, (Type) null);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1165, Size: 80
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSON.DEFAULT_GENERATE_FEATURE = 1;
      JSON.setDefaultTypeKey("");
      Month month0 = Month.AUGUST;
      Month[] monthArray0 = new Month[1];
      Month month1 = Month.AUGUST;
      monthArray0[0] = month1;
      jSONArray0.toArray(monthArray0);
      String string0 = JSON.DEFFAULT_DATE_FORMAT;
      jSONArray0.set(1626, month0);
      jSONArray0.getComponentType();
      BigInteger bigInteger0 = BigInteger.ONE;
      jSONArray0.listIterator();
      jSONArray0.getLong(1601);
      jSONArray0.contains(month1);
      jSONArray0.listIterator();
      jSONArray0.getTimestamp(1);
      assertEquals(1627, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      String[] stringArray0 = new String[0];
      SimplePropertyPreFilter simplePropertyPreFilter0 = new SimplePropertyPreFilter(stringArray0);
      JSONArray jSONArray1 = jSONArray0.fluentSet(3396, simplePropertyPreFilter0);
      jSONArray1.getDoubleValue(1);
      Float float0 = new Float(0.0);
      byte[] byteArray0 = new byte[1];
      jSONArray0.DEFAULT_PARSER_FEATURE = (int) (byte)111;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Class<String> class0 = String.class;
      jSONArray1.getObject(3385, class0);
      jSONArray0.listIterator();
      jSONArray1.getTimestamp(3385);
      assertEquals(3397, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSON.DEFAULT_GENERATE_FEATURE = 1;
      Month month0 = Month.AUGUST;
      Month[] monthArray0 = new Month[1];
      Month month1 = Month.AUGUST;
      monthArray0[0] = month1;
      jSONArray0.toArray(monthArray0);
      String string0 = JSON.DEFFAULT_DATE_FORMAT;
      FileSystemHandling.shouldAllThrowIOExceptions();
      jSONArray0.set(1626, month0);
      jSONArray0.getComponentType();
      BigInteger bigInteger0 = BigInteger.ONE;
      jSONArray0.getLong(1601);
      jSONArray0.add(1, (Object) null);
      JSONArray jSONArray1 = (JSONArray)jSONArray0.clone();
      jSONArray0.getShort(1);
      jSONArray0.getBoolean(1);
      jSONArray0.addAll(1155, (Collection<?>) jSONArray1);
      assertEquals(3256, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      String[] stringArray0 = new String[0];
      SimplePropertyPreFilter simplePropertyPreFilter0 = new SimplePropertyPreFilter(stringArray0);
      jSONArray0.fluentSet(3396, simplePropertyPreFilter0);
      Float float0 = new Float((double) 1);
      byte[] byteArray0 = new byte[1];
      jSONArray0.DEFAULT_PARSER_FEATURE = (int) (byte)111;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      JSONArray jSONArray1 = new JSONArray();
      jSONArray0.getLongValue(1619);
      jSONArray0.listIterator();
      assertEquals(3397, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.set(29, jSONArray0);
      byte byte0 = (byte)94;
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSONArray0.forEach(consumer0);
      byte byte1 = (byte)22;
      byte byte2 = (byte)40;
      // Undeclared exception!
      try { 
        jSONArray0.getFloat(29);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to float, value : [null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,{\"$ref\":\"@\"}]
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      int int0 = 159;
      JSONArray jSONArray0 = new JSONArray(159);
      Class<Integer> class0 = Integer.class;
      jSONArray0.toJavaList(class0);
      jSONArray0.set((-1), class0);
      JSONObject jSONObject0 = new JSONObject(32);
      jSONArray0.fluentSet(1, "");
      // Undeclared exception!
      try { 
        jSONArray0.getJSONArray(43);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 43, Size: 2
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.set(29, (Object) null);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSONArray0.forEach(consumer0);
      jSONArray0.getFloat(29);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)22;
      byteArray0[1] = (byte)22;
      byteArray0[2] = (byte)22;
      byteArray0[4] = (byte)40;
      jSONArray0.getBigDecimal((byte)0);
      // Undeclared exception!
      try { 
        jSONArray0.getBooleanValue(1589);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1589, Size: 30
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = new JSONObject(989);
      JSONArray jSONArray1 = jSONArray0.fluentSet(1634, jSONObject0);
      jSONArray1.getJSONArray(989);
      // Undeclared exception!
      try { 
        jSONArray0.getShortValue(1634);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to short, value : {}
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Integer integer0 = new Integer(0);
      JSONArray jSONArray1 = jSONArray0.fluentAdd((Object) integer0);
      jSONArray1.getComponentType();
      jSONArray0.getFloatValue(0);
      jSONArray1.getInteger(0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-69);
      byteArray0[1] = (byte)113;
      byteArray0[2] = (byte) (-94);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      jSONArray0.getIntValue(0);
      JSONArray jSONArray2 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray2.getDate(3470);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3470, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.set(29, (Object) null);
      jSONArray0.getFloat(29);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)22;
      byteArray0[1] = (byte)22;
      byteArray0[2] = (byte)22;
      byteArray0[3] = (byte)94;
      byteArray0[4] = (byte)40;
      byteArray0[5] = (byte)111;
      jSONArray0.set((byte)40, (Object) null);
      Class<JSONArray> class0 = JSONArray.class;
      List<JSONArray> list0 = jSONArray0.toJavaList(class0);
      jSONArray0.retainAll(list0);
      jSONArray0.getShort((byte)40);
      JSONArray jSONArray1 = jSONArray0.fluentAddAll((Collection<?>) jSONArray0);
      int int0 = jSONArray1.lastIndexOf((Object) null);
      assertEquals(82, jSONArray0.size());
      assertEquals(81, int0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      String[] stringArray0 = new String[0];
      SimplePropertyPreFilter simplePropertyPreFilter0 = new SimplePropertyPreFilter(stringArray0);
      JSONArray jSONArray1 = jSONArray0.fluentSet(3396, simplePropertyPreFilter0);
      jSONArray1.getDoubleValue(1);
      jSONArray0.getFloat(3394);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)111;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      JSONArray jSONArray2 = jSONArray1.fluentSet(1403, simplePropertyPreFilter0);
      Type type0 = jSONArray1.componentType;
      jSONArray1.getObject(1558, (Type) null);
      jSONArray0.getShortValue(989);
      Class<JSONObject> class0 = JSONObject.class;
      // Undeclared exception!
      try { 
        jSONArray2.toJavaList(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : com.alibaba.fastjson.JSONObject
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.set(29, (Object) null);
      jSONArray0.getFloat(29);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)22;
      byteArray0[1] = (byte)22;
      byteArray0[2] = (byte)22;
      byteArray0[3] = (byte)94;
      byteArray0[4] = (byte)40;
      byteArray0[5] = (byte)111;
      jSONArray0.set((byte)40, (Object) null);
      Class<JSONArray> class0 = JSONArray.class;
      List<JSONArray> list0 = jSONArray0.toJavaList(class0);
      jSONArray0.retainAll(list0);
      jSONArray0.clone();
      jSONArray0.getShort((byte)40);
      // Undeclared exception!
      try { 
        jSONArray0.getBoolean((-1100));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = new JSONArray(989);
      jSONArray0.remove((Object) jSONArray1);
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Class<String> class0 = String.class;
      // Undeclared exception!
      try { 
        jSONArray1.getObject(0, class0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      String[] stringArray0 = new String[0];
      SimplePropertyPreFilter simplePropertyPreFilter0 = new SimplePropertyPreFilter(stringArray0);
      JSONArray jSONArray1 = jSONArray0.fluentSet(3396, simplePropertyPreFilter0);
      jSONArray1.getDoubleValue(1);
      Float float0 = new Float((double) 3394);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)111;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      jSONArray0.getIntValue(989);
      jSONArray0.getDate(3394);
      jSONArray0.getJSONObject(23);
      JSONArray jSONArray2 = jSONArray1.fluentRemoveAll(linkedList0);
      jSONArray2.getInteger(0);
      assertEquals(3397, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(159);
      Class<Integer> class0 = Integer.class;
      jSONArray0.toJavaList(class0);
      JSONArray jSONArray1 = jSONArray0.fluentClear();
      JSONArray jSONArray2 = jSONArray1.fluentRetainAll(jSONArray0);
      jSONArray2.fluentSet(79, class0);
      Type type0 = jSONArray2.componentType;
      jSONArray1.getObject(1, (Type) class0);
      jSONArray1.getShortValue(1);
      Class<JSONObject> class1 = JSONObject.class;
      // Undeclared exception!
      try { 
        jSONArray2.toJavaList(class1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : com.alibaba.fastjson.JSONObject
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      String[] stringArray0 = new String[0];
      SimplePropertyPreFilter simplePropertyPreFilter0 = new SimplePropertyPreFilter(stringArray0);
      JSONArray jSONArray1 = jSONArray0.fluentSet(3396, simplePropertyPreFilter0);
      jSONArray1.getDoubleValue(1);
      jSONArray0.getFloat(3394);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)111;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Class<String> class0 = String.class;
      jSONArray1.getObject(3385, class0);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("com.alibaba.fastjson.JSONArray", 3385);
      JSONArray jSONArray2 = jSONArray1.fluentRemoveAll(jSONArray0);
      // Undeclared exception!
      try { 
        jSONArray2.getBigDecimal(3394);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3394, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      String[] stringArray0 = new String[0];
      SimplePropertyPreFilter simplePropertyPreFilter0 = new SimplePropertyPreFilter(stringArray0);
      JSONArray jSONArray1 = jSONArray0.fluentSet(3396, simplePropertyPreFilter0);
      jSONArray1.getDoubleValue(1);
      Integer integer0 = new Integer(989);
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[4];
      SerializerFeature serializerFeature0 = SerializerFeature.WriteNonStringKeyAsString;
      serializerFeatureArray0[0] = serializerFeature0;
      SerializerFeature serializerFeature1 = SerializerFeature.WriteNullNumberAsZero;
      serializerFeatureArray0[1] = serializerFeature1;
      SerializerFeature serializerFeature2 = SerializerFeature.WriteSlashAsSpecial;
      serializerFeatureArray0[2] = serializerFeature2;
      SerializerFeature serializerFeature3 = SerializerFeature.WriteDateUseDateFormat;
      serializerFeatureArray0[3] = serializerFeature3;
      JSON.toJSONBytes((Object) integer0, (SerializeFilter) simplePropertyPreFilter0, serializerFeatureArray0);
      jSONArray0.add(3396, (Object) jSONArray1);
      Class<JSONArray> class0 = JSONArray.class;
      // Undeclared exception!
      try { 
        jSONArray1.toJavaList(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : com.alibaba.fastjson.JSONArray
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSON.DEFAULT_GENERATE_FEATURE = 1;
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      linkedHashSet0.add((Integer) 989);
      Month month0 = Month.AUGUST;
      Month[] monthArray0 = new Month[1];
      jSONArray0.toArray(monthArray0);
      String string0 = JSON.DEFFAULT_DATE_FORMAT;
      jSONArray0.set(1626, month0);
      jSONArray0.removeAll(linkedHashSet0);
      jSONArray0.getComponentType();
      BigInteger bigInteger0 = BigInteger.ONE;
      jSONArray0.listIterator();
      jSONArray0.getComponentType();
      Month month1 = Month.MAY;
      Integer integer0 = new Integer(3113);
      jSONArray0.contains(integer0);
      BigInteger bigInteger1 = BigInteger.ONE;
      jSONArray0.getFloat(1601);
      jSONArray0.remove(1);
      jSONArray0.listIterator();
      jSONArray0.get(964);
      assertEquals(1626, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSON.DEFAULT_GENERATE_FEATURE = 1;
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      linkedHashSet0.add((Integer) 989);
      Month month0 = Month.AUGUST;
      Month[] monthArray0 = new Month[1];
      Month month1 = Month.AUGUST;
      monthArray0[0] = month1;
      jSONArray0.toArray(monthArray0);
      String string0 = JSON.DEFFAULT_DATE_FORMAT;
      jSONArray0.set(1626, month0);
      jSONArray0.removeAll(linkedHashSet0);
      jSONArray0.getComponentType();
      BigInteger bigInteger0 = BigInteger.ONE;
      jSONArray0.listIterator();
      jSONArray0.getLong(1601);
      // Undeclared exception!
      try { 
        JSON.parseObject("@type");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, json : @type
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Integer integer0 = new Integer(989);
      Class<JSONArray> class0 = JSONArray.class;
      List<JSONArray> list0 = new LinkedList<JSONArray>();
      JSONArray jSONArray1 = jSONArray0.fluentRemoveAll(list0);
      JSONArray jSONArray2 = jSONArray0.fluentAdd((Object) integer0);
      jSONArray0.removeAll(jSONArray2);
      jSONArray2.getComponentType();
      BigInteger bigInteger0 = BigInteger.ONE;
      jSONArray0.set(3089, (Object) null);
      Class<JSONArray> class1 = JSONArray.class;
      List<JSONArray> list1 = jSONArray1.toJavaList(class0);
      jSONArray0.retainAll(list1);
      JSONArray jSONArray3 = jSONArray1.fluentAdd((Object) class1);
      jSONArray3.getString(3089);
      assertEquals(3091, jSONArray1.size());
      assertEquals(3091, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      String[] stringArray0 = new String[0];
      SimplePropertyPreFilter simplePropertyPreFilter0 = new SimplePropertyPreFilter(stringArray0);
      JSONArray jSONArray1 = jSONArray0.fluentSet(3396, simplePropertyPreFilter0);
      jSONArray1.getDoubleValue(3089);
      Integer integer0 = new Integer((-319));
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[4];
      SerializerFeature serializerFeature0 = SerializerFeature.WriteNonStringKeyAsString;
      serializerFeatureArray0[0] = serializerFeature0;
      SerializerFeature serializerFeature1 = SerializerFeature.WriteNullNumberAsZero;
      serializerFeatureArray0[1] = serializerFeature1;
      simplePropertyPreFilter0.setMaxLevel((-319));
      // Undeclared exception!
      try { 
        jSONArray0.set((-319), integer0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("@type");
      jSONArray0.fluentRemoveAll(linkedList0);
      // Undeclared exception!
      try { 
        jSONArray0.getBigDecimal(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)111;
      byteArray0[1] = (byte)38;
      Month month0 = Month.AUGUST;
      Month[] monthArray0 = new Month[0];
      jSONArray0.toArray(monthArray0);
      String string0 = JSON.DEFFAULT_DATE_FORMAT;
      JSONArray jSONArray1 = new JSONArray(jSONArray0);
      int int0 = 2332;
      // Undeclared exception!
      try { 
        jSONArray1.getByteValue(1078);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1078, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      String[] stringArray0 = new String[0];
      SimplePropertyPreFilter simplePropertyPreFilter0 = new SimplePropertyPreFilter(stringArray0);
      JSONArray jSONArray1 = jSONArray0.fluentSet(3396, simplePropertyPreFilter0);
      jSONArray1.getDoubleValue(3089);
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[4];
      SerializerFeature serializerFeature0 = SerializerFeature.WriteNonStringKeyAsString;
      serializerFeatureArray0[0] = serializerFeature0;
      SerializerFeature serializerFeature1 = SerializerFeature.WriteNullNumberAsZero;
      serializerFeatureArray0[1] = serializerFeature1;
      SerializerFeature serializerFeature2 = SerializerFeature.WriteSlashAsSpecial;
      serializerFeatureArray0[2] = serializerFeature2;
      SerializerFeature serializerFeature3 = SerializerFeature.WriteDateUseDateFormat;
      serializerFeatureArray0[3] = serializerFeature3;
      JSON.toJSONBytes((Object) serializerFeature2, (SerializeFilter) simplePropertyPreFilter0, serializerFeatureArray0);
      jSONArray1.add(1595, (Object) serializerFeature0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        jSONArray0.getByteValue((-965));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      int int0 = 8232;
      // Undeclared exception!
      try { 
        jSONArray0.getBigDecimal((-2870));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)111;
      byteArray0[1] = (byte)40;
      byteArray0[2] = (byte)111;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("yyyy-MM-dd HH:mm:ss", (-22));
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      JSONArray jSONArray1 = jSONArray0.fluentRemoveAll(linkedList0);
      Month month0 = Month.MAY;
      JSONArray jSONArray2 = jSONArray1.fluentAdd((Object) month0);
      jSONArray2.fluentRemoveAll(linkedList0);
      // Undeclared exception!
      try { 
        jSONArray1.addAll((-862), (Collection<?>) null);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -862, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Month[] monthArray0 = new Month[4];
      Month month0 = Month.AUGUST;
      monthArray0[0] = month0;
      Month month1 = Month.FEBRUARY;
      monthArray0[1] = month1;
      Month month2 = Month.AUGUST;
      monthArray0[2] = month2;
      Month month3 = Month.SEPTEMBER;
      monthArray0[3] = month3;
      jSONArray0.toArray(monthArray0);
      String string0 = JSON.DEFFAULT_DATE_FORMAT;
      jSONArray0.set(1626, month0);
      Class<JSONArray> class0 = JSONArray.class;
      // Undeclared exception!
      try { 
        jSONArray0.toJavaList(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : com.alibaba.fastjson.JSONArray
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = new JSONObject(989);
      jSONObject0.put("", (Object) "");
      JSONArray jSONArray1 = jSONArray0.fluentSet(1634, jSONObject0);
      JSONArray jSONArray2 = jSONArray1.fluentAddAll(989, (Collection<?>) jSONArray0);
      jSONArray2.getJSONArray(108);
      JSON.setDefaultTypeKey("1.2.46");
      jSONArray2.getInteger(151);
      // Undeclared exception!
      try { 
        jSONArray2.getFloat((-32768));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.set(0, (Object) null);
      jSONArray0.getBoolean(0);
      // Undeclared exception!
      try { 
        jSONArray0.add(1630, (Object) null);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1630, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getIntValue(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      LinkedHashSet<Integer> linkedHashSet1 = new LinkedHashSet<Integer>();
      int int0 = (-114);
      Month month0 = Month.MARCH;
      JSONArray jSONArray1 = jSONArray0.fluentAdd((Object) month0);
      // Undeclared exception!
      try { 
        jSONArray1.getByte(3089);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3089, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(1620);
      JSONArray jSONArray1 = new JSONArray(jSONArray0);
      JSONArray jSONArray2 = jSONArray1.fluentAdd(0, (Object) jSONArray0);
      // Undeclared exception!
      try { 
        jSONArray2.getJSONArray((-4061));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        jSONArray0.getDouble((-1363));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Integer integer0 = new Integer(0);
      JSONArray jSONArray1 = jSONArray0.fluentAdd((Object) integer0);
      jSONArray1.getComponentType();
      jSONArray0.getFloatValue(0);
      jSONArray0.fluentAddAll((Collection<?>) jSONArray1);
      jSONArray1.getInteger(0);
      // Undeclared exception!
      try { 
        jSONArray0.getString(3089);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3089, Size: 2
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      String[] stringArray0 = new String[0];
      SimplePropertyPreFilter simplePropertyPreFilter0 = new SimplePropertyPreFilter(stringArray0);
      JSONArray jSONArray1 = jSONArray0.fluentSet(3396, simplePropertyPreFilter0);
      jSONArray1.getDoubleValue(3089);
      Integer integer0 = new Integer((-319));
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[4];
      SerializerFeature serializerFeature0 = SerializerFeature.WriteNonStringKeyAsString;
      serializerFeatureArray0[0] = serializerFeature0;
      SerializerFeature serializerFeature1 = SerializerFeature.WriteNullNumberAsZero;
      serializerFeatureArray0[1] = serializerFeature1;
      SerializerFeature serializerFeature2 = SerializerFeature.WriteSlashAsSpecial;
      serializerFeatureArray0[2] = serializerFeature2;
      SerializerFeature serializerFeature3 = SerializerFeature.WriteDateUseDateFormat;
      serializerFeatureArray0[3] = serializerFeature3;
      JSON.toJSONBytes((Object) integer0, (SerializeFilter) simplePropertyPreFilter0, serializerFeatureArray0);
      jSONArray0.add(3396, (Object) jSONArray1);
      jSONArray0.getByteValue(1590);
      jSONArray1.getBigInteger(2643);
      jSONArray0.listIterator();
      assertEquals(3398, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Integer integer0 = new Integer(0);
      JSONArray jSONArray1 = jSONArray0.fluentAdd((Object) integer0);
      jSONArray1.removeAll(jSONArray0);
      jSONArray1.getComponentType();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Class<JSONObject> class0 = JSONObject.class;
      List<JSONObject> list0 = jSONArray0.toJavaList(class0);
      boolean boolean0 = jSONArray1.removeAll(list0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "]");
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentClear();
      jSONArray1.remove((Object) null);
      // Undeclared exception!
      try { 
        jSONArray1.getJSONObject((-2820));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = new JSONObject(3089);
      JSONArray jSONArray1 = jSONArray0.fluentSet(859, jSONObject0);
      // Undeclared exception!
      try { 
        jSONArray1.getJSONArray(859);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // com.alibaba.fastjson.JSONObject cannot be cast to com.alibaba.fastjson.JSONArray
         //
         verifyException("com.alibaba.fastjson.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Integer integer0 = new Integer(0);
      JSONArray jSONArray1 = jSONArray0.fluentAdd((Object) integer0);
      jSONArray1.removeAll(jSONArray0);
      jSONArray1.getComponentType();
      jSONArray0.contains((Object) null);
      // Undeclared exception!
      try { 
        jSONArray0.getBigInteger((-2244));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = new JSONObject(989);
      JSONArray jSONArray1 = jSONArray0.fluentSet(1634, jSONObject0);
      jSONArray1.getJSONArray(989);
      jSONArray0.getShortValue(0);
      jSONArray0.getSqlDate(989);
      assertEquals(1635, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = new JSONObject(989);
      JSONArray jSONArray1 = jSONArray0.fluentSet(1634, jSONObject0);
      jSONArray1.getJSONArray(989);
      JSON.setDefaultTypeKey("@type");
      jSONArray1.getInteger(989);
      jSONArray1.getFloat(989);
      // Undeclared exception!
      try { 
        jSONArray0.toArray((Field[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Month month0 = Month.OCTOBER;
      Month month1 = month0.firstMonthOfQuarter();
      jSONArray0.contains(month1);
      // Undeclared exception!
      try { 
        jSONArray0.getBigInteger((-17));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = new JSONObject(1590);
      JSONArray jSONArray1 = jSONArray0.fluentSet(1634, jSONObject0);
      jSONArray1.getJSONArray(1590);
      JSON.setDefaultTypeKey("@type");
      jSONArray1.getInteger(1590);
      jSONArray1.getFloat(1590);
      jSONArray1.getFloat(1590);
      assertEquals(1635, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = new JSONObject(1590);
      JSONArray jSONArray1 = jSONArray0.fluentSet(1634, jSONObject0);
      jSONArray1.getJSONArray(1590);
      jSONArray0.getShortValue(0);
      jSONArray1.getComponentType();
      assertEquals(1635, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Month month0 = Month.OCTOBER;
      Month month1 = Month.AUGUST;
      month1.firstMonthOfQuarter();
      JSONArray jSONArray1 = jSONArray0.fluentRemove((Object) month0);
      boolean boolean0 = jSONArray1.contains(month0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      int int0 = 0;
      Integer integer0 = new Integer(0);
      JSONArray jSONArray1 = jSONArray0.fluentAdd((Object) integer0);
      jSONArray1.getComponentType();
      jSONArray0.getFloatValue(0);
      // Undeclared exception!
      try { 
        jSONArray1.getSqlDate(0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : 0
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = new JSONObject(1590);
      JSONArray jSONArray1 = jSONArray0.fluentSet(1634, jSONObject0);
      jSONArray1.getJSONArray(1590);
      jSONArray1.getString(0);
      assertEquals(1635, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = new JSONObject(1634);
      JSONArray jSONArray1 = jSONArray0.fluentSet(1634, jSONObject0);
      jSONArray1.getJSONArray(1590);
      // Undeclared exception!
      try { 
        jSONArray0.subList((-1370), (-2871));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // fromIndex = -1370
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Class<SimplePropertyPreFilter> class0 = SimplePropertyPreFilter.class;
      String[] stringArray0 = new String[7];
      stringArray0[0] = "1.2.46";
      stringArray0[1] = "@type";
      stringArray0[2] = "dd.MM.yyyy";
      stringArray0[3] = "@type";
      stringArray0[4] = "dd.MM.yyyy";
      stringArray0[5] = "";
      stringArray0[6] = "A7|f Y>$P.>)>c'Q70";
      SimplePropertyPreFilter simplePropertyPreFilter0 = new SimplePropertyPreFilter(class0, stringArray0);
      JSONArray jSONArray1 = jSONArray0.fluentRemove((Object) null);
      JSONArray jSONArray2 = new JSONArray(1179);
      JSONArray jSONArray3 = jSONArray0.fluentSet(12, "");
      jSONArray3.contains("dd.MM.yyyy");
      // Undeclared exception!
      try { 
        jSONArray1.getBigInteger(12);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"java.lang\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Integer integer0 = new Integer(0);
      // Undeclared exception!
      try { 
        jSONArray0.getDouble(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Integer integer0 = new Integer(0);
      JSONArray jSONArray1 = jSONArray0.fluentAdd((Object) integer0);
      jSONArray1.getComponentType();
      jSONArray0.getFloatValue(0);
      jSONArray1.getInteger(0);
      boolean boolean0 = jSONArray1.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.add((Object) null);
      String string0 = JSON.DEFAULT_TYPE_KEY;
      JSONArray jSONArray1 = (JSONArray)jSONArray0.clone();
      assertFalse(jSONArray1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Feature[] featureArray0 = new Feature[6];
      Feature feature0 = Feature.AllowUnQuotedFieldNames;
      featureArray0[0] = feature0;
      Feature feature1 = Feature.AllowSingleQuotes;
      // Undeclared exception!
      try { 
        jSONArray0.addAll(0, (Collection<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      int int0 = 0;
      // Undeclared exception!
      try { 
        jSONArray0.getFloat(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getTimestamp((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.getComponentType();
      String string0 = JSON.VERSION;
      Month month0 = Month.OCTOBER;
      Month month1 = month0.plus(564L);
      jSONArray0.remove((Object) month1);
      Month[] monthArray0 = new Month[6];
      monthArray0[0] = month1;
      monthArray0[1] = month1;
      monthArray0[2] = month0;
      monthArray0[3] = month1;
      monthArray0[4] = month0;
      monthArray0[5] = month1;
      jSONArray0.toArray(monthArray0);
      Class<String> class0 = String.class;
      List<String> list0 = jSONArray0.toJavaList(class0);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.isEmpty();
      String string0 = JSON.VERSION;
      // Undeclared exception!
      try { 
        jSONArray0.getDate(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getShort((-168));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getString((-960));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      String string0 = JSON.VERSION;
      JSON.toJSON((Object) null, (ParserConfig) null);
      // Undeclared exception!
      try { 
        jSONArray0.listIterator((-3068));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -3068
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.getComponentType();
      String[] stringArray0 = new String[0];
      SimplePropertyPreFilter simplePropertyPreFilter0 = new SimplePropertyPreFilter(stringArray0);
      SerializeConfig serializeConfig0 = new SerializeConfig(2474);
      Class<Field> class0 = Field.class;
      SimplePropertyPreFilter simplePropertyPreFilter1 = new SimplePropertyPreFilter(class0, stringArray0);
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[4];
      SerializerFeature serializerFeature0 = SerializerFeature.BeanToArray;
      serializerFeatureArray0[0] = serializerFeature0;
      SerializerFeature serializerFeature1 = SerializerFeature.WriteNullStringAsEmpty;
      serializerFeatureArray0[1] = serializerFeature1;
      SerializerFeature serializerFeature2 = SerializerFeature.WriteNullListAsEmpty;
      serializerFeatureArray0[2] = serializerFeature2;
      SerializerFeature serializerFeature3 = SerializerFeature.WriteNullStringAsEmpty;
      serializerFeatureArray0[3] = serializerFeature3;
      JSON.toJSONBytes((Object) simplePropertyPreFilter0, serializeConfig0, (SerializeFilter) simplePropertyPreFilter1, serializerFeatureArray0);
      ParameterizedTypeImpl parameterizedTypeImpl0 = (ParameterizedTypeImpl)TypeReference.LIST_STRING;
      // Undeclared exception!
      try { 
        jSONArray0.getLong(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentClear();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "@type");
      Integer integer0 = new Integer(3922);
      JSONArray jSONArray2 = jSONArray1.fluentRemove((Object) integer0);
      jSONArray0.fluentSet(1590, jSONArray2);
      JSONArray jSONArray3 = jSONArray1.fluentRemove(1);
      JSONArray jSONArray4 = jSONArray3.fluentAddAll((Collection<?>) jSONArray1);
      JSONArray jSONArray5 = jSONArray4.fluentAdd(1, (Object) jSONArray0);
      jSONArray5.getJSONArray(1);
      jSONArray5.fluentAdd((Object) jSONArray1);
      char[] charArray0 = new char[4];
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      // Undeclared exception!
      try { 
        Charset.forName("A7|f Y>$P.>)>c'Q70");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // A7|f Y>$P.>)>c'Q70
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      jSONArray0.getRelatedArray();
      JSONArray jSONArray1 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray1.getShortValue(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.getComponentType();
      // Undeclared exception!
      try { 
        jSONArray0.fluentAdd((-2824), (Object) null);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -2824, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getIntValue((-216));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getLong((-3062));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      assertTrue(jSONArray0.isEmpty());
      
      Integer integer0 = new Integer(0);
      jSONArray0.fluentAdd((Object) integer0);
      jSONArray0.isEmpty();
      jSONArray0.getByte(0);
      assertFalse(jSONArray0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.getComponentType();
      // Undeclared exception!
      try { 
        jSONArray0.getString(4776);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 4776, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.iterator();
      // Undeclared exception!
      try { 
        jSONArray0.getSqlDate(1502);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1502, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Integer integer0 = new Integer(0);
      JSONArray jSONArray1 = jSONArray0.fluentAdd((Object) integer0);
      jSONArray0.getComponentType();
      jSONArray0.getFloatValue(0);
      Integer integer1 = jSONArray1.getInteger(0);
      assertEquals(0, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.size();
      Month month0 = Month.MAY;
      boolean boolean0 = jSONArray0.contains(month0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray1.getFloat((-346));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      int int0 = 3892;
      // Undeclared exception!
      try { 
        jSONArray0.getLong(3892);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3892, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = new JSONArray(1);
      jSONArray0.parallelStream();
      int int0 = (-2848);
      Type type0 = jSONArray1.componentType;
      // Undeclared exception!
      try { 
        jSONArray1.getObject(1, (Type) null);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getBooleanValue(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getObject((-1659), (Type) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getShortValue((-1051));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(3903);
      Class<JSONObject> class0 = JSONObject.class;
      List<JSONObject> list0 = jSONArray0.toJavaList(class0);
      JSONArray jSONArray1 = jSONArray0.fluentAddAll((Collection<?>) list0);
      JSONArray jSONArray2 = new JSONArray(jSONArray1);
      JSONArray jSONArray3 = jSONArray2.fluentSet(3903, jSONArray1);
      jSONArray3.addAll(1590, (Collection<?>) list0);
      Field[] fieldArray0 = new Field[4];
      BeanContext beanContext0 = null;
      try {
        beanContext0 = new BeanContext(class0, (FieldInfo) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.serializer.BeanContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.hashCode();
      int int0 = (-1419);
      Class<Object> class0 = Object.class;
      // Undeclared exception!
      try { 
        jSONArray0.getObject((-1419), class0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      JSONArray jSONArray0 = new JSONArray(linkedList0);
      assertTrue(jSONArray0.isEmpty());
      
      JSONArray jSONArray1 = jSONArray0.fluentAdd((Object) null);
      jSONArray1.isEmpty();
      jSONArray1.getComponentType();
      assertFalse(jSONArray0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-109);
      byteArray0[1] = (byte) (-108);
      byteArray0[2] = (byte)31;
      byteArray0[3] = (byte)102;
      byteArray0[4] = (byte)116;
      JSON.parse(byteArray0, (Feature[]) null);
      jSONArray0.indexOf((Object) null);
      boolean boolean0 = jSONArray0.isEmpty();
      assertTrue(boolean0);
      
      jSONArray0.getComponentType();
      assertTrue(jSONArray0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentSet(12, "@type");
      JSONArray jSONArray2 = jSONArray0.fluentAdd(12, (Object) jSONArray1);
      jSONArray2.getComponentType();
      assertEquals(14, jSONArray1.size());
      assertEquals(14, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Class<SimplePropertyPreFilter> class0 = SimplePropertyPreFilter.class;
      String[] stringArray0 = new String[0];
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0, stringArray0);
      JSONSerializer jSONSerializer0 = new JSONSerializer();
      javaBeanSerializer0.writeNoneASM(jSONSerializer0, (Object) null, class0, class0, 19);
      List<Object> list0 = javaBeanSerializer0.getObjectFieldValues((Object) null);
      boolean boolean0 = jSONArray0.addAll((Collection<?>) list0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.listIterator();
      // Undeclared exception!
      try { 
        jSONArray0.getJSONObject(9965);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 9965, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(3367);
      // Undeclared exception!
      try { 
        jSONArray0.getShortValue(3367);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3367, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getJSONObject((-924));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.clear();
      // Undeclared exception!
      try { 
        jSONArray0.remove((-2448));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getIntValue(5444);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 5444, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      jSONArray0.containsAll(linkedHashSet0);
      jSONArray0.getComponentType();
      jSONArray0.lastIndexOf(linkedHashSet0);
      JSONArray jSONArray1 = jSONArray0.fluentRetainAll(linkedHashSet0);
      assertEquals(0, jSONArray1.size());
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) linkedHashSet0;
      linkedHashSet0.toArray(objectArray0);
      linkedHashSet0.add((Integer) 1);
      jSONArray0.containsAll(linkedHashSet0);
      // Undeclared exception!
      try { 
        jSONArray0.get(3367);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3367, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      jSONArray0.containsAll(linkedHashSet0);
      // Undeclared exception!
      try { 
        jSONArray0.getSqlDate(1739);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1739, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      jSONArray0.replaceAll(unaryOperator0);
      int int0 = 1064;
      // Undeclared exception!
      try { 
        jSONArray0.fluentAdd(3367, (Object) unaryOperator0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3367, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      int int0 = 91;
      // Undeclared exception!
      try { 
        jSONArray0.getDate((-1980));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      EvoSuiteFile evoSuiteFile0 = null;
      byte[] byteArray0 = new byte[3];
      byte byte0 = (byte)38;
      // Undeclared exception!
      try { 
        jSONArray0.getDouble((byte)38);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 38, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getBooleanValue((-4219));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      String[] stringArray0 = new String[0];
      SimplePropertyPreFilter simplePropertyPreFilter0 = new SimplePropertyPreFilter(stringArray0);
      JSONSerializer jSONSerializer0 = new JSONSerializer();
      simplePropertyPreFilter0.apply(jSONSerializer0, jSONArray0, "A7|f Y>$P.>)>c'Q70");
      JSONArray jSONArray1 = jSONArray0.fluentSet(0, simplePropertyPreFilter0);
      jSONArray0.toArray();
      // Undeclared exception!
      try { 
        jSONArray1.getBigInteger(1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = new JSONArray(jSONArray0);
      // Undeclared exception!
      try { 
        jSONArray1.getTimestamp(2182);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2182, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      JSONArray jSONArray0 = new JSONArray(0);
      Object object0 = jSONArray0.clone();
      assertTrue(object0.equals((Object)jSONArray0));
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      FileSystemHandling.shouldAllThrowIOExceptions();
      jSONArray0.isEmpty();
      // Undeclared exception!
      try { 
        jSONArray0.getFloatValue(991);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 991, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.getComponentType();
      jSONArray0.lastIndexOf((Object) null);
      // Undeclared exception!
      try { 
        jSONArray0.get((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      String[] stringArray0 = new String[0];
      SimplePropertyPreFilter simplePropertyPreFilter0 = new SimplePropertyPreFilter(stringArray0);
      JSONArray jSONArray1 = jSONArray0.fluentSet(3396, simplePropertyPreFilter0);
      jSONArray1.getDoubleValue(1);
      Integer integer0 = new Integer((-319));
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[4];
      SerializerFeature serializerFeature0 = SerializerFeature.WriteNonStringKeyAsString;
      serializerFeatureArray0[0] = serializerFeature0;
      SerializerFeature serializerFeature1 = SerializerFeature.WriteNullNumberAsZero;
      serializerFeatureArray0[1] = serializerFeature1;
      SerializerFeature serializerFeature2 = SerializerFeature.WriteSlashAsSpecial;
      serializerFeatureArray0[2] = serializerFeature2;
      SerializerFeature serializerFeature3 = SerializerFeature.WriteDateUseDateFormat;
      serializerFeatureArray0[3] = serializerFeature3;
      JSON.toJSONBytes((Object) integer0, (SerializeFilter) simplePropertyPreFilter0, serializerFeatureArray0);
      jSONArray0.add(3396, (Object) jSONArray1);
      jSONArray0.getByteValue(1590);
      // Undeclared exception!
      try { 
        jSONArray1.fluentAddAll((-602), (Collection<?>) jSONArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -602, Size: 3398
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(0);
      Integer integer0 = new Integer((-22));
      jSONArray0.contains(integer0);
      JSONArray jSONArray1 = jSONArray0.fluentSet(1, integer0);
      float float0 = jSONArray1.getFloatValue(1);
      assertEquals(2, jSONArray0.size());
      assertEquals((-22.0F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      int int0 = 1597;
      // Undeclared exception!
      try { 
        jSONArray0.containsAll((Collection<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      int int0 = 26084;
      // Undeclared exception!
      jSONArray0.set(26084, linkedHashSet0);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      String[] stringArray0 = new String[0];
      SimplePropertyPreFilter simplePropertyPreFilter0 = new SimplePropertyPreFilter(stringArray0);
      // Undeclared exception!
      try { 
        jSONArray0.fluentRemove(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      jSONArray0.containsAll(linkedHashSet0);
      jSONArray0.getRelatedArray();
      // Undeclared exception!
      try { 
        jSONArray0.get(1017);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1017, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(159);
      Class<Integer> class0 = Integer.class;
      List<Integer> list0 = jSONArray0.toJavaList(class0);
      JSONArray jSONArray1 = jSONArray0.fluentAddAll((Collection<?>) list0);
      JSONArray jSONArray2 = jSONArray1.fluentRetainAll(jSONArray0);
      JSONArray jSONArray3 = jSONArray2.fluentSet(79, class0);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)119;
      byteArray0[1] = (byte) (-53);
      byteArray0[2] = (byte) (-111);
      byteArray0[3] = (byte)94;
      byteArray0[4] = (byte)22;
      byteArray0[5] = (byte)29;
      byteArray0[6] = (byte)40;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      jSONArray3.fluentRemoveAll(jSONArray0);
      // Undeclared exception!
      try { 
        jSONArray1.getLong(1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getShort(892);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 892, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      Class<Integer> class0 = Integer.class;
      List<Integer> list0 = jSONArray0.toJavaList(class0);
      linkedHashSet0.addAll(list0);
      jSONArray0.retainAll(linkedHashSet0);
      // Undeclared exception!
      try { 
        jSONArray0.add((-275), (Object) class0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -275, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      jSONArray0.containsAll(linkedHashSet0);
      // Undeclared exception!
      try { 
        jSONArray0.getFloatValue(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getJSONObject(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "@type";
      // Undeclared exception!
      try { 
        jSONArray0.getLongValue(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getFloatValue(968);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 968, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      String[] stringArray0 = new String[1];
      jSONArray0.clear();
      stringArray0[0] = "@type";
      SimplePropertyPreFilter simplePropertyPreFilter0 = new SimplePropertyPreFilter(stringArray0);
      // Undeclared exception!
      try { 
        jSONArray0.getByte((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Class<Integer> class0 = Integer.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(jSONType0).builder();
      Class<?> class1 = JavaBeanInfo.getBuilderClass(jSONType0);
      jSONArray0.setComponentType(class1);
      JSONArray[] jSONArrayArray0 = new JSONArray[1];
      jSONArrayArray0[0] = jSONArray0;
      JSONArray[] jSONArrayArray1 = jSONArray0.toArray(jSONArrayArray0);
      assertEquals(1, jSONArrayArray1.length);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getFloatValue((-1622));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      String[] stringArray0 = new String[0];
      SimplePropertyPreFilter simplePropertyPreFilter0 = new SimplePropertyPreFilter(stringArray0);
      JSONArray jSONArray1 = jSONArray0.fluentSet(0, simplePropertyPreFilter0);
      // Undeclared exception!
      try { 
        jSONArray1.getDoubleValue(0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to double, value : com.alibaba.fastjson.serializer.SimplePropertyPreFilter@2
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = new JSONObject(1590);
      JSONArray jSONArray1 = jSONArray0.fluentSet(0, jSONObject0);
      jSONObject0.getJSONArray("IFYu[.,1");
      jSONArray1.getComponentType();
      assertEquals(1, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getSqlDate((-15));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      int int0 = 1740;
      JSONArray jSONArray0 = new JSONArray(1740);
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(jSONType0).builder();
      JavaBeanInfo.getBuilderClass(jSONType0);
      jSONArray0.setComponentType((Type) null);
      JSONArray[] jSONArrayArray0 = new JSONArray[1];
      jSONArrayArray0[0] = jSONArray0;
      jSONArray0.toArray(jSONArrayArray0);
      Class<Integer> class0 = Integer.class;
      // Undeclared exception!
      try { 
        JSON.parseArray("@type", class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // exepct '[', but error, pos 1, json : @type
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(1621);
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject1 = jSONObject0.fluentRemove(jSONArray0);
      jSONArray0.fluentSet((-1), jSONObject1);
      // Undeclared exception!
      try { 
        jSONArray0.getDoubleValue(1592);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1592, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(0);
      // Undeclared exception!
      try { 
        jSONArray0.getSqlDate(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(0);
      String[] stringArray0 = new String[0];
      SimplePropertyPreFilter simplePropertyPreFilter0 = new SimplePropertyPreFilter(stringArray0);
      simplePropertyPreFilter0.getExcludes();
      // Undeclared exception!
      try { 
        jSONArray0.getDoubleValue(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = new JSONObject(1590);
      JSONArray jSONArray1 = jSONArray0.fluentSet(1634, jSONObject0);
      jSONArray1.getJSONArray(1590);
      // Undeclared exception!
      try { 
        jSONArray1.subList(1590, 1410);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fromIndex(1590) > toIndex(1410)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      String string0 = "{Xr{jWhw9";
      Class<JSONArray> class0 = JSONArray.class;
      // Undeclared exception!
      try { 
        jSONArray0.subList((-548), 97);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // fromIndex = -548
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(1630);
      String[] stringArray0 = new String[0];
      SimplePropertyPreFilter simplePropertyPreFilter0 = new SimplePropertyPreFilter(stringArray0);
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[4];
      SerializerFeature serializerFeature0 = SerializerFeature.WriteDateUseDateFormat;
      serializerFeatureArray0[0] = serializerFeature0;
      SerializerFeature serializerFeature1 = SerializerFeature.BrowserSecure;
      serializerFeatureArray0[1] = serializerFeature1;
      SerializerFeature serializerFeature2 = SerializerFeature.SkipTransientField;
      serializerFeatureArray0[2] = serializerFeature2;
      SerializerFeature serializerFeature3 = SerializerFeature.NotWriteDefaultValue;
      serializerFeatureArray0[3] = serializerFeature3;
      SerializeWriter serializeWriter0 = new SerializeWriter(serializerFeatureArray0);
      JSONSerializer jSONSerializer0 = new JSONSerializer(serializeWriter0, (SerializeConfig) null);
      simplePropertyPreFilter0.apply(jSONSerializer0, serializerFeature1, "A7|f Y>$P.>)>c'Q70");
      // Undeclared exception!
      try { 
        jSONArray0.add(1613, (Object) serializerFeature1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1613, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      MockPrintStream mockPrintStream0 = new MockPrintStream("A7|f Y>$P.>)>c'Q70");
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      JSONObject jSONObject0 = new JSONObject(1);
      JSONArray jSONArray1 = jSONArray0.fluentClear();
      jSONObject0.put("@type", (Object) jSONArray0);
      boolean boolean0 = jSONArray1.containsAll(jSONArray0);
      assertTrue(boolean0);
      
      JSONObject jSONObject1 = jSONObject0.fluentClear();
      boolean boolean1 = jSONArray1.add((Object) jSONObject1);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      JSON.toJSONString((Object) null);
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentSet(0, (Object) null);
      JSONArray jSONArray2 = jSONArray1.fluentAdd((Object) null);
      // Undeclared exception!
      try { 
        jSONArray2.getJSONArray(1590);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1590, Size: 2
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(0);
      String[] stringArray0 = new String[0];
      SimplePropertyPreFilter simplePropertyPreFilter0 = new SimplePropertyPreFilter(stringArray0);
      int int0 = (-2544);
      Class<Integer> class0 = Integer.class;
      List<Integer> list0 = jSONArray0.toJavaList(class0);
      JSONArray jSONArray1 = jSONArray0.fluentAddAll((Collection<?>) list0);
      SerializeConfig serializeConfig0 = new SerializeConfig();
      JSON.toJSON((Object) list0, serializeConfig0);
      String string0 = null;
      // Undeclared exception!
      try { 
        jSONArray1.getByteValue(1651);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1651, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      jSONArray0.replaceAll(unaryOperator0);
      // Undeclared exception!
      try { 
        jSONArray0.getBoolean(1647);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1647, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = new JSONArray(1);
      int int0 = 1174536705;
      // Undeclared exception!
      try { 
        jSONArray1.listIterator(1174536705);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1174536705
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSON.parse("");
      jSONArray0.setRelatedArray((Object) null);
      // Undeclared exception!
      try { 
        jSONArray0.getBoolean(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(1613);
      JSON.toJSONString((Object) jSONArray0, true);
      // Undeclared exception!
      try { 
        jSONArray0.getBoolean(1613);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1613, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "~_A");
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.remove(1644);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1644, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(0);
      Integer integer0 = new Integer(2);
      jSONArray0.contains(integer0);
      // Undeclared exception!
      try { 
        jSONArray0.getInteger((-931));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = new JSONObject(1590);
      JSON.DEFFAULT_DATE_FORMAT = "A7|f Y>$P.>)>c'Q70";
      jSONArray0.indexOf("A7|f Y>$P.>)>c'Q70");
      // Undeclared exception!
      try { 
        jSONArray0.getInteger(198);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 198, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.set(0, (Object) null);
      jSONArray0.getBoolean(0);
      jSONArray0.getInteger(0);
      jSONArray0.remove(0);
      assertEquals(0, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(1);
      jSONArray0.contains((Object) null);
      // Undeclared exception!
      try { 
        jSONArray0.getInteger(1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("/j,=?i@kvz;9{;7");
      JSONObject jSONObject0 = new JSONObject(0);
      JSONArray jSONArray0 = new JSONArray(0);
      JSONArray jSONArray1 = new JSONArray();
      JSONArray jSONArray2 = jSONArray0.fluentSet(0, jSONArray1);
      JSONArray jSONArray3 = jSONArray2.fluentRetainAll(jSONArray0);
      JSONArray jSONArray4 = jSONArray3.fluentRemoveAll(jSONArray1);
      JSONArray jSONArray5 = jSONArray4.fluentClear();
      // Undeclared exception!
      try { 
        jSONArray5.getJSONArray((-1592));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentAdd((Object) "-~X]P-EeKehy#f*,A3}");
      jSONArray1.toArray();
      jSONArray0.fluentAddAll((Collection<?>) jSONArray1);
      JSONArray jSONArray2 = new JSONArray(1);
      JSONArray jSONArray3 = jSONArray2.fluentRemoveAll(jSONArray0);
      JSONArray jSONArray4 = jSONArray3.fluentClear();
      assertEquals(0, jSONArray4.size());
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.fluentAdd((-2698), (Object) "yyyy-MM-dd HH:mm:ss");
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -2698, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(0);
      String[] stringArray0 = new String[0];
      SimplePropertyPreFilter simplePropertyPreFilter0 = new SimplePropertyPreFilter(stringArray0);
      Class<Integer> class0 = Integer.class;
      List<Integer> list0 = jSONArray0.toJavaList(class0);
      JSONArray jSONArray1 = jSONArray0.fluentAddAll((Collection<?>) list0);
      SerializeConfig serializeConfig0 = new SerializeConfig();
      JSON.toJSON((Object) list0, serializeConfig0);
      // Undeclared exception!
      try { 
        jSONArray0.fluentSet((-2544), jSONArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getBigDecimal(1140);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1140, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = new JSONObject(2559);
      JSONArray jSONArray1 = jSONArray0.fluentAdd((Object) jSONObject0);
      jSONArray1.fluentSet(1830, (Object) null);
      JSONArray jSONArray2 = jSONArray0.fluentClear();
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JSONObject jSONObject0 = new JSONObject(1590);
      jSONArray0.fluentSet(0, jSONObject0);
      // Undeclared exception!
      try { 
        jSONArray0.getInteger(1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getBoolean((-14));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getInteger(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getJSONObject(586);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 586, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      int int0 = (-46);
      JSONArray jSONArray0 = new JSONArray();
      Class<Object> class0 = Object.class;
      jSONArray0.toArray();
      Class<String> class1 = String.class;
      // Undeclared exception!
      try { 
        jSONArray0.getObject(1, class1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      int int0 = 2535;
      // Undeclared exception!
      try { 
        jSONArray0.getDate(2535);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2535, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = new JSONObject(1590);
      JSONArray jSONArray1 = jSONArray0.fluentSet(0, jSONObject0);
      assertEquals(1, jSONArray1.size());
      
      JSONArray jSONArray2 = jSONArray1.fluentClear();
      assertSame(jSONArray0, jSONArray2);
      
      boolean boolean0 = jSONArray0.equals(jSONArray2);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = new JSONArray(jSONArray0);
      // Undeclared exception!
      try { 
        jSONArray1.getLongValue(3075);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3075, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(1);
      // Undeclared exception!
      try { 
        jSONArray0.getByte(1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = new JSONObject(0);
      Object object0 = new Object();
      JSONArray jSONArray1 = jSONArray0.fluentSet(0, object0);
      JSONArray jSONArray2 = jSONArray1.fluentClear();
      assertSame(jSONArray2, jSONArray1);
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getBoolean(1590);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1590, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      JSONArray jSONArray0 = new JSONArray(0);
      jSONArray0.toArray();
      // Undeclared exception!
      try { 
        jSONArray0.getByte(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = new JSONArray(0);
      // Undeclared exception!
      try { 
        jSONArray1.getByte((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(851);
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentAdd((Object) jSONObject0);
      JSONArray jSONArray2 = new JSONArray(jSONArray1);
      JSONArray jSONArray3 = jSONArray2.fluentRemove((Object) jSONArray0);
      JSONArray jSONArray4 = jSONArray3.fluentAddAll((Collection<?>) jSONArray2);
      JSONArray jSONArray5 = jSONArray4.fluentAdd((Object) jSONArray3);
      jSONArray5.fluentSet(1, jSONObject0);
      assertEquals(3, jSONArray4.size());
      
      jSONArray1.fluentClear();
      assertTrue(jSONArray0.equals((Object)jSONArray2));
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getFloat(1022);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1022, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      MockPrintStream mockPrintStream0 = new MockPrintStream("yyyy-MM-dd HH:mm:ss");
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      JSONObject jSONObject0 = new JSONObject(0);
      jSONArray0.fluentClear();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        jSONArray0.getFloat(1590);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1590, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(0);
      jSONArray0.listIterator(0);
      JSONArray jSONArray1 = new JSONArray();
      Integer[] integerArray0 = new Integer[1];
      integerArray0[0] = (Integer) 1590;
      jSONArray1.toArray(integerArray0);
      JSONArray jSONArray2 = jSONArray1.fluentRemove((Object) integerArray0[0]);
      // Undeclared exception!
      try { 
        jSONArray2.getBooleanValue(24);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 24, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      int int0 = 372;
      Class<JSONArray> class0 = JSONArray.class;
      List<JSONArray> list0 = jSONArray0.toJavaList(class0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      // Undeclared exception!
      try { 
        jSONArray0.fluentAddAll(372, (Collection<?>) list0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 372, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(0);
      // Undeclared exception!
      try { 
        jSONArray0.getByte(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(0);
      Class<JSONArray> class0 = JSONArray.class;
      String[] stringArray0 = new String[5];
      stringArray0[0] = "@type";
      stringArray0[1] = "@type";
      stringArray0[2] = "1.2.46";
      stringArray0[3] = "@type";
      stringArray0[4] = "yyyy-MM-dd HH:mm:ss";
      SimplePropertyPreFilter simplePropertyPreFilter0 = new SimplePropertyPreFilter(class0, stringArray0);
      Set<String> set0 = simplePropertyPreFilter0.getExcludes();
      boolean boolean0 = jSONArray0.containsAll(set0);
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        jSONArray0.addAll(17, (Collection<?>) set0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 17, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      Class<JSONArray> class0 = JSONArray.class;
      String[] stringArray0 = new String[5];
      SimplePropertyPreFilter simplePropertyPreFilter0 = new SimplePropertyPreFilter(class0, stringArray0);
      LinkedHashSet<JSONObject> linkedHashSet0 = new LinkedHashSet<JSONObject>();
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getLongValue((-166));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(0);
      Class<JSONArray> class0 = JSONArray.class;
      String[] stringArray0 = new String[5];
      stringArray0[0] = "@type";
      stringArray0[1] = "@type";
      stringArray0[2] = "1.2.46";
      stringArray0[3] = "@type";
      stringArray0[4] = "yyyy-MM-dd HH:mm:ss";
      SimplePropertyPreFilter simplePropertyPreFilter0 = new SimplePropertyPreFilter(class0, stringArray0);
      // Undeclared exception!
      try { 
        jSONArray0.getDoubleValue((-1098));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = new JSONObject(false);
      jSONArray0.setRelatedArray(jSONObject0);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      Class<Object> class0 = Object.class;
      JSON.parseArray((String) null, class0);
      JSONArray jSONArray0 = new JSONArray((List<Object>) null);
      // Undeclared exception!
      try { 
        jSONArray0.fluentSet((-1072), class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      int int0 = 0;
      JSONArray jSONArray0 = new JSONArray(0);
      // Undeclared exception!
      try { 
        jSONArray0.getJSONArray(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(1);
      // Undeclared exception!
      try { 
        jSONArray0.getBoolean(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONScanner jSONScanner0 = new JSONScanner("yyyy-MM-dd HH:mm:ss");
      char[] charArray0 = new char[6];
      charArray0[0] = '6';
      charArray0[1] = 'K';
      charArray0[2] = '%';
      charArray0[3] = 'O';
      charArray0[4] = '^';
      charArray0[5] = 'A';
      Class<JSONArray> class0 = JSONArray.class;
      jSONScanner0.scanFieldStringArray(charArray0, class0);
      // Undeclared exception!
      try { 
        jSONArray0.fluentAddAll(0, (Collection<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(1);
      int int0 = 0;
      Integer integer0 = new Integer(0);
      JSONArray jSONArray1 = jSONArray0.fluentRemove((Object) integer0);
      // Undeclared exception!
      try { 
        jSONArray1.getJSONArray(1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Collection<Integer> collection0 = null;
      // Undeclared exception!
      try { 
        jSONArray0.fluentAddAll((Collection<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      String string0 = "";
      JSON.parseArray("");
      JSONArray jSONArray0 = new JSONArray((List<Object>) null);
      // Undeclared exception!
      try { 
        jSONArray0.fluentRetainAll((Collection<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      int int0 = (-1621);
      // Undeclared exception!
      try { 
        jSONArray0.fluentRemove((-1621));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.fluentRemoveAll((Collection<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentAdd((Object) "-~X]P-EeKehy#f*,A3}");
      // Undeclared exception!
      try { 
        jSONArray1.fluentRemove(1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(1);
      JSONArray jSONArray1 = jSONArray0.fluentClear();
      Integer[] integerArray0 = new Integer[4];
      jSONArray0.fluentRemoveAll(jSONArray1);
      integerArray0[0] = (Integer) 1;
      // Undeclared exception!
      try { 
        jSONArray1.getDoubleValue(1590);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1590, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(18);
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      JSONArray jSONArray1 = jSONArray0.fluentRetainAll(linkedHashSet0);
      JSONArray jSONArray2 = jSONArray1.fluentRemove((Object) jSONArray0);
      // Undeclared exception!
      try { 
        jSONArray2.fluentAddAll(18, (Collection<?>) linkedHashSet0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 18, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      int int0 = 2515;
      Integer integer0 = new Integer(1);
      // Undeclared exception!
      try { 
        jSONArray0.fluentAdd(2515, (Object) integer0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2515, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray((List<Object>) null);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(pipedInputStream0, 166);
      ObjectInputStream objectInputStream0 = null;
      try {
        objectInputStream0 = new ObjectInputStream(pushbackInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      String string0 = "(X$B*x3W|TD.>7<;";
      Type[] typeArray0 = new Type[1];
      TypeReference<String> typeReference0 = null;
      try {
        typeReference0 = new TypeReference<String>();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Class cannot be cast to java.lang.reflect.ParameterizedType
         //
         verifyException("com.alibaba.fastjson.TypeReference", e);
      }
  }
}
