/*
 * This file was automatically generated by EvoSuite
 * Fri Mar 22 20:42:13 GMT 2019
 */

package org.la4j.matrix.sparse;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.RoundingMode;
import java.nio.BufferUnderflowException;
import java.text.DecimalFormat;
import java.text.NumberFormat;
import java.text.ParsePosition;
import java.util.Collection;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.NoSuchElementException;
import java.util.Random;
import java.util.Set;
import java.util.function.Consumer;
import java.util.stream.DoubleStream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;
import org.la4j.LinearAlgebra;
import org.la4j.Matrix;
import org.la4j.Vector;
import org.la4j.iterator.MatrixIterator;
import org.la4j.iterator.RowMajorMatrixIterator;
import org.la4j.iterator.VectorIterator;
import org.la4j.matrix.DenseMatrix;
import org.la4j.matrix.MatrixFactory;
import org.la4j.matrix.RowMajorSparseMatrix;
import org.la4j.matrix.SparseMatrix;
import org.la4j.matrix.dense.Basic2DMatrix;
import org.la4j.matrix.functor.MatrixAccumulator;
import org.la4j.matrix.functor.MatrixFunction;
import org.la4j.matrix.functor.MatrixPredicate;
import org.la4j.matrix.functor.MatrixProcedure;
import org.la4j.matrix.sparse.CCSMatrix;
import org.la4j.matrix.sparse.CRSMatrix;
import org.la4j.operation.inplace.InPlaceCopyMatrixToMatrix;
import org.la4j.operation.ooplace.OoPlaceMatricesMultiplication;
import org.la4j.vector.DenseVector;
import org.la4j.vector.functor.VectorAccumulator;
import org.la4j.vector.functor.VectorFunction;
import org.la4j.vector.functor.VectorProcedure;
import org.la4j.vector.sparse.CompressedVector;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CRSMatrix_ESTest extends CRSMatrix_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(567);
      assertNotNull(cRSMatrix0);
      assertEquals(567, cRSMatrix0.cardinality());
      assertEquals(0.001763668430335097, cRSMatrix0.density(), 0.01);
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(567, cRSMatrix0.columns());
      assertEquals(1.0, cRSMatrix0.max(), 0.01);
      assertEquals(567, cRSMatrix0.rows());
      
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      cRSMatrix0.forEach(consumer0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix(3039, 3039);
      assertNotNull(cRSMatrix0);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertEquals(3039, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(3039, cRSMatrix0.rows());
      
      int[] intArray0 = new int[7];
      CRSMatrix cRSMatrix1 = (CRSMatrix)cRSMatrix0.select(intArray0, intArray0);
      assertNotNull(cRSMatrix1);
      assertNotSame(cRSMatrix0, cRSMatrix1);
      assertNotSame(cRSMatrix1, cRSMatrix0);
      assertFalse(cRSMatrix1.equals((Object)cRSMatrix0));
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertEquals(3039, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(3039, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix1.min(), 0.01);
      assertTrue(cRSMatrix1.isRowMajor());
      assertEquals(7, cRSMatrix1.columns());
      assertEquals(0, cRSMatrix1.cardinality());
      assertEquals(0.0, cRSMatrix1.max(), 0.01);
      assertEquals(0.0, cRSMatrix1.density(), 0.01);
      assertEquals(7, cRSMatrix1.rows());
      assertEquals(7, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      assertNotNull(cRSMatrix0);
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(0, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertTrue(cRSMatrix0.isRowMajor());
      
      CompressedVector compressedVector0 = (CompressedVector)cRSMatrix0.getColumn((-3221));
      assertNotNull(compressedVector0);
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(0, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      
      // Undeclared exception!
      try { 
        cRSMatrix0.iteratorOfRow((-1982));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1982
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix$5", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix(45, 45);
      assertNotNull(cRSMatrix0);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertEquals(45, cRSMatrix0.rows());
      assertEquals(45, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        cRSMatrix0.eachInRow(45, vectorProcedure0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 46
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      assertNotNull(cRSMatrix0);
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.rows());
      
      CRSMatrix cRSMatrix1 = CRSMatrix.identity(7);
      assertNotNull(cRSMatrix1);
      assertNotSame(cRSMatrix1, cRSMatrix0);
      assertFalse(cRSMatrix1.equals((Object)cRSMatrix0));
      assertTrue(cRSMatrix1.isRowMajor());
      assertEquals(7, cRSMatrix1.columns());
      assertEquals(0.0, cRSMatrix1.min(), 0.01);
      assertEquals(1.0, cRSMatrix1.max(), 0.01);
      assertEquals(0.14285714285714285, cRSMatrix1.density(), 0.01);
      assertEquals(7, cRSMatrix1.rows());
      assertEquals(7, cRSMatrix1.cardinality());
      
      // Undeclared exception!
      try { 
        CRSMatrix.block(cRSMatrix0, cRSMatrix0, cRSMatrix0, cRSMatrix1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Sides of blocks are incompatible!
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      assertNotNull(cRSMatrix0);
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0, cRSMatrix0.rows());
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (-1304);
      int int0 = 2054;
      double[][] doubleArray0 = new double[3][7];
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = (double) (-1304);
      doubleArray1[1] = (double) (-1304);
      doubleArray1[2] = (double) (-1304);
      doubleArray1[3] = (double) (-1304);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[4];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (double) 2054;
      doubleArray2[1] = (double) (-1304);
      doubleArray2[2] = (double) (-1304);
      doubleArray2[3] = (double) 2054;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[1];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray3[0] = (double) 2054;
      doubleArray0[2] = doubleArray3;
      // Undeclared exception!
      try { 
        RowMajorSparseMatrix.from2DArray(doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      // Undeclared exception!
      try { 
        CRSMatrix.zero((-299), (-3452), 769);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: -299x-3452
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      int int0 = (-666);
      int int1 = (-463);
      // Undeclared exception!
      try { 
        CRSMatrix.zero((-666), (-463));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: -666x-463
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      assertNotNull(cRSMatrix0);
      assertEquals(0, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      
      RowMajorMatrixIterator rowMajorMatrixIterator0 = cRSMatrix0.nonZeroRowMajorIterator();
      assertNotNull(rowMajorMatrixIterator0);
      assertEquals(0, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      
      double[][] doubleArray0 = new double[3][9];
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = (-3665.2262);
      doubleArray1[2] = (-471.7188409792298);
      doubleArray1[3] = 0.0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[6];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 0.0;
      doubleArray2[1] = 0.0;
      doubleArray2[2] = 0.0;
      doubleArray2[3] = (-3665.2262);
      doubleArray2[4] = 0.0;
      doubleArray2[5] = 0.0;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[2];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray3[0] = 1561.2193727800372;
      doubleArray3[1] = (-3665.2262);
      doubleArray0[2] = doubleArray3;
      // Undeclared exception!
      try { 
        CRSMatrix.from2DArray(doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(4, 4);
      assertNotNull(cRSMatrix0);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(4, cRSMatrix0.rows());
      assertEquals(4, cRSMatrix0.columns());
      
      CCSMatrix cCSMatrix0 = (CCSMatrix)cRSMatrix0.rotate();
      assertNotNull(cCSMatrix0);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(4, cRSMatrix0.rows());
      assertEquals(4, cRSMatrix0.columns());
      assertEquals(4, cCSMatrix0.columns());
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(4, cCSMatrix0.rows());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(0.0, cCSMatrix0.density(), 0.01);
      
      byte[] byteArray0 = cRSMatrix0.toBinary();
      assertNotNull(byteArray0);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(4, cRSMatrix0.rows());
      assertEquals(4, cRSMatrix0.columns());
      assertEquals(33, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      int int0 = (-1888);
      // Undeclared exception!
      try { 
        CRSMatrix.identity((-1888));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      double[][] doubleArray0 = new double[4][6];
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = (double) 13;
      doubleArray1[1] = (double) 13;
      doubleArray1[2] = (double) 13;
      doubleArray1[3] = (double) 13;
      doubleArray1[4] = (double) 13;
      doubleArray1[5] = (double) 13;
      doubleArray1[6] = (double) 13;
      doubleArray1[7] = (double) 13;
      doubleArray1[8] = (double) 13;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[5];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (double) 13;
      doubleArray2[1] = (double) 13;
      doubleArray2[2] = (double) 13;
      doubleArray2[3] = (double) 13;
      doubleArray2[4] = (double) 13;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[1];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray3[0] = (-1604.7985038187);
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[5];
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      
      doubleArray4[0] = (-1604.7985038187);
      doubleArray4[1] = (-1604.7985038187);
      doubleArray4[2] = (double) 13;
      doubleArray4[3] = (-1604.7985038187);
      doubleArray4[4] = (-1604.7985038187);
      doubleArray0[3] = doubleArray4;
      DenseMatrix denseMatrix0 = DenseMatrix.from2DArray(doubleArray0);
      assertNotNull(denseMatrix0);
      assertEquals(9, denseMatrix0.columns());
      assertEquals(4, denseMatrix0.rows());
      assertEquals(4, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        CRSMatrix.block(denseMatrix0, denseMatrix0, denseMatrix0, denseMatrix0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 10
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(669, 9.477174978908268);
      assertNotNull(cRSMatrix0);
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(669, cRSMatrix0.columns());
      assertEquals(669, cRSMatrix0.rows());
      assertEquals(0.0014947683109118087, cRSMatrix0.density(), 0.01);
      assertEquals(669, cRSMatrix0.cardinality());
      assertEquals(9.477174978908268, cRSMatrix0.max(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.eachNonZeroInColumn(669, vectorProcedure0);
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(669, cRSMatrix0.columns());
      assertEquals(669, cRSMatrix0.rows());
      assertEquals(0.0014947683109118087, cRSMatrix0.density(), 0.01);
      assertEquals(669, cRSMatrix0.cardinality());
      assertEquals(9.477174978908268, cRSMatrix0.max(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        cRSMatrix0.copyOfShape(1000, 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 670
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      int int0 = 35;
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      CRSMatrix cRSMatrix0 = new CRSMatrix(35, 35);
      assertNotNull(cRSMatrix0);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(35, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertEquals(35, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      
      // Undeclared exception!
      try { 
        cRSMatrix0.set(35, 13, (-1901.2886751893));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '35' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      int int0 = 37;
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(37, 37);
      assertNotNull(cRSMatrix0);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(37, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertEquals(37, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        cRSMatrix0.transformRow(37, vectorFunction0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 38
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix$5", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      assertNotNull(cRSMatrix0);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.rows());
      
      int[] intArray0 = new int[2];
      intArray0[0] = (-1304);
      double[][] doubleArray0 = new double[1][7];
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = (double) (-1304);
      doubleArray1[1] = (double) 2054;
      doubleArray1[2] = (double) (-1304);
      doubleArray1[3] = (double) (-1304);
      doubleArray0[0] = doubleArray1;
      // Undeclared exception!
      try { 
        cRSMatrix0.nonZeroAt((-1304), 2929);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      assertNotNull(cRSMatrix0);
      assertEquals(0, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0, cRSMatrix0.columns());
      assertTrue(cRSMatrix0.isRowMajor());
      
      int int0 = 0;
      DecimalFormat decimalFormat0 = (DecimalFormat)NumberFormat.getNumberInstance();
      assertNotNull(decimalFormat0);
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertEquals("#,##0.###", decimalFormat0.toLocalizedPattern());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertEquals(3, decimalFormat0.getMaximumFractionDigits());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertTrue(decimalFormat0.isGroupingUsed());
      assertEquals("#,##0.###", decimalFormat0.toPattern());
      assertEquals("", decimalFormat0.getPositivePrefix());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals("-", decimalFormat0.getNegativePrefix());
      
      int int1 = (-460);
      Locale locale0 = Locale.UK;
      assertNotNull(locale0);
      assertEquals("GB", locale0.getCountry());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("en_GB", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      assertNotNull(set0);
      assertEquals("GB", locale0.getCountry());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("en_GB", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      assertNotNull(list0);
      assertEquals("GB", locale0.getCountry());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("en_GB", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals(0, linkedList0.size());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      List<String> list1 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) list0);
      assertNotNull(list1);
      assertNotSame(list0, list1);
      assertNotSame(list1, list0);
      assertTrue(list1.equals((Object)list0));
      assertEquals("GB", locale0.getCountry());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("en_GB", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals(0, linkedList0.size());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      
      DecimalFormat decimalFormat1 = (DecimalFormat)NumberFormat.getCurrencyInstance(locale0);
      assertNotNull(decimalFormat1);
      assertNotSame(decimalFormat1, decimalFormat0);
      assertFalse(decimalFormat1.equals((Object)decimalFormat0));
      assertEquals("GB", locale0.getCountry());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("en_GB", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals(2, decimalFormat1.getMinimumFractionDigits());
      assertEquals("", decimalFormat1.getPositiveSuffix());
      assertEquals(Integer.MAX_VALUE, decimalFormat1.getMaximumIntegerDigits());
      assertEquals(1, decimalFormat1.getMinimumIntegerDigits());
      assertEquals("\u00A4#,##0.00", decimalFormat1.toLocalizedPattern());
      assertFalse(decimalFormat1.isParseBigDecimal());
      assertEquals(2, decimalFormat1.getMaximumFractionDigits());
      assertFalse(decimalFormat1.isDecimalSeparatorAlwaysShown());
      assertTrue(decimalFormat1.isGroupingUsed());
      assertFalse(decimalFormat1.isParseIntegerOnly());
      assertEquals("", decimalFormat1.getNegativeSuffix());
      assertEquals("\u00A3", decimalFormat1.getPositivePrefix());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat1.getRoundingMode());
      assertEquals("-\u00A3", decimalFormat1.getNegativePrefix());
      assertEquals(1, decimalFormat1.getMultiplier());
      assertEquals(3, decimalFormat1.getGroupingSize());
      assertEquals("\u00A4#,##0.00", decimalFormat1.toPattern());
      
      ParsePosition parsePosition0 = new ParsePosition((-460));
      assertNotNull(parsePosition0);
      assertEquals("java.text.ParsePosition[index=-460,errorIndex=-1]", parsePosition0.toString());
      assertEquals((-1), parsePosition0.getErrorIndex());
      assertEquals((-460), parsePosition0.getIndex());
      
      Number number0 = decimalFormat0.parse("org.la4j.matrix.SparseMatrix$1", parsePosition0);
      assertNull(number0);
      assertNotSame(decimalFormat0, decimalFormat1);
      assertFalse(decimalFormat0.equals((Object)decimalFormat1));
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertEquals("#,##0.###", decimalFormat0.toLocalizedPattern());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertEquals(3, decimalFormat0.getMaximumFractionDigits());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertTrue(decimalFormat0.isGroupingUsed());
      assertEquals("#,##0.###", decimalFormat0.toPattern());
      assertEquals("", decimalFormat0.getPositivePrefix());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertEquals("java.text.ParsePosition[index=-460,errorIndex=-460]", parsePosition0.toString());
      assertEquals((-460), parsePosition0.getErrorIndex());
      assertEquals((-460), parsePosition0.getIndex());
      
      String string0 = cRSMatrix0.mkString((NumberFormat) decimalFormat0);
      assertNotNull(string0);
      assertNotSame(decimalFormat0, decimalFormat1);
      assertEquals("", string0);
      assertFalse(decimalFormat0.equals((Object)decimalFormat1));
      assertEquals(0, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0, cRSMatrix0.columns());
      assertTrue(cRSMatrix0.isRowMajor());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertEquals("#,##0.###", decimalFormat0.toLocalizedPattern());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertEquals(3, decimalFormat0.getMaximumFractionDigits());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertTrue(decimalFormat0.isGroupingUsed());
      assertEquals("#,##0.###", decimalFormat0.toPattern());
      assertEquals("", decimalFormat0.getPositivePrefix());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals("-", decimalFormat0.getNegativePrefix());
      
      CCSMatrix cCSMatrix0 = (CCSMatrix)cRSMatrix0.rotate();
      assertNotNull(cCSMatrix0);
      assertEquals(0, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0, cRSMatrix0.columns());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(0, cCSMatrix0.rows());
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(Double.NaN, cCSMatrix0.density(), 0.01);
      assertEquals(0, cCSMatrix0.columns());
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertFalse(cCSMatrix0.isRowMajor());
      
      // Undeclared exception!
      try { 
        Matrix.zero(0, (-657));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      int int0 = 0;
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = 0.0;
      doubleArray0[7] = (double) 0;
      doubleArray0[8] = (double) 0;
      CRSMatrix cRSMatrix0 = CRSMatrix.from1DArray(0, 0, doubleArray0);
      assertNotNull(cRSMatrix0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(0, cRSMatrix0.rows());
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(9, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        cRSMatrix0.toRowVector();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      assertNotNull(cRSMatrix0);
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0, cRSMatrix0.rows());
      
      MockRandom mockRandom0 = new MockRandom((-1L));
      assertNotNull(mockRandom0);
      
      CRSMatrix cRSMatrix1 = CRSMatrix.random(2, 1000, (double) 1, (Random) mockRandom0);
      assertNotNull(cRSMatrix1);
      assertNotSame(cRSMatrix1, cRSMatrix0);
      assertFalse(cRSMatrix1.equals((Object)cRSMatrix0));
      assertEquals(1.0, cRSMatrix1.density(), 0.01);
      assertEquals(2000, cRSMatrix1.cardinality());
      assertEquals(0.1, cRSMatrix1.max(), 0.01);
      assertEquals(2, cRSMatrix1.rows());
      assertTrue(cRSMatrix1.isRowMajor());
      assertEquals(1000, cRSMatrix1.columns());
      assertEquals(0.0, cRSMatrix1.min(), 0.01);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      assertNotNull(cRSMatrix0);
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.rows());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[5] = (double) 0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (-2066.8552623929672);
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = (double) 0;
      doubleArray0[7] = (double) 0;
      doubleArray0[8] = (double) 0;
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.each(matrixProcedure0);
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.rows());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      CRSMatrix cRSMatrix1 = CRSMatrix.randomSymmetric(0, 0.0, (Random) mockRandom0);
      assertNotNull(cRSMatrix1);
      assertNotSame(cRSMatrix1, cRSMatrix0);
      assertTrue(cRSMatrix1.equals((Object)cRSMatrix0));
      assertEquals(0, cRSMatrix1.columns());
      assertEquals(Double.NaN, cRSMatrix1.density(), 0.01);
      assertEquals(0, cRSMatrix1.rows());
      assertEquals(0.0, cRSMatrix1.min(), 0.01);
      assertEquals(0, cRSMatrix1.cardinality());
      assertEquals(0.0, cRSMatrix1.max(), 0.01);
      assertTrue(cRSMatrix1.isRowMajor());
      
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        cRSMatrix1.eachInRow(945, vectorProcedure0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 945
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(669, 0.0);
      assertNotNull(cRSMatrix0);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(669, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(669, cRSMatrix0.columns());
      assertEquals(0.0014947683109118087, cRSMatrix0.density(), 0.01);
      assertEquals(669, cRSMatrix0.rows());
      
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.eachNonZeroInColumn(669, vectorProcedure0);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(669, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(669, cRSMatrix0.columns());
      assertEquals(0.0014947683109118087, cRSMatrix0.density(), 0.01);
      assertEquals(669, cRSMatrix0.rows());
      
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(matrixPredicate0).test(anyInt() , anyInt());
      boolean boolean0 = cRSMatrix0.non(matrixPredicate0);
      assertTrue(boolean0);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(669, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(669, cRSMatrix0.columns());
      assertEquals(0.0014947683109118087, cRSMatrix0.density(), 0.01);
      assertEquals(669, cRSMatrix0.rows());
      
      boolean boolean1 = cRSMatrix0.nonZeroAt(1, 0);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(669, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(669, cRSMatrix0.columns());
      assertEquals(0.0014947683109118087, cRSMatrix0.density(), 0.01);
      assertEquals(669, cRSMatrix0.rows());
      
      RowMajorMatrixIterator rowMajorMatrixIterator0 = cRSMatrix0.nonZeroRowMajorIterator();
      assertNotNull(rowMajorMatrixIterator0);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(669, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(669, cRSMatrix0.columns());
      assertEquals(0.0014947683109118087, cRSMatrix0.density(), 0.01);
      assertEquals(669, cRSMatrix0.rows());
      
      // Undeclared exception!
      try { 
        cRSMatrix0.getOrElse(17, (-1792), 136.34429362);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '-1792' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      assertNotNull(cRSMatrix0);
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(0, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      
      // Undeclared exception!
      try { 
        cRSMatrix0.getRow((-170));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -169
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix(13, 13, 13);
      assertNotNull(cRSMatrix0);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(13, cRSMatrix0.columns());
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(13, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      
      VectorIterator vectorIterator0 = cRSMatrix0.iteratorOfRow(13);
      assertNotNull(vectorIterator0);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(13, cRSMatrix0.columns());
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(13, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      
      // Undeclared exception!
      try { 
        cRSMatrix0.maxInRow(13);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 14
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      assertNotNull(cRSMatrix0);
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0, cRSMatrix0.rows());
      
      int int0 = 707;
      // Undeclared exception!
      try { 
        cRSMatrix0.getOrElse((-5357), 707, (-5479.063278921));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '-5357' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      assertNotNull(cRSMatrix0);
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0, cRSMatrix0.rows());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(0, cRSMatrix0.cardinality());
      
      double double0 = cRSMatrix0.product();
      assertEquals(1.0, double0, 0.01);
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0, cRSMatrix0.rows());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(0, cRSMatrix0.cardinality());
      
      CRSMatrix cRSMatrix1 = (CRSMatrix)cRSMatrix0.copyOfShape(4621, 0);
      assertNotNull(cRSMatrix1);
      assertNotSame(cRSMatrix0, cRSMatrix1);
      assertNotSame(cRSMatrix1, cRSMatrix0);
      assertFalse(cRSMatrix1.equals((Object)cRSMatrix0));
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0, cRSMatrix0.rows());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0, cRSMatrix1.columns());
      assertEquals(0.0, cRSMatrix1.max(), 0.01);
      assertTrue(cRSMatrix1.isRowMajor());
      assertEquals(4621, cRSMatrix1.rows());
      assertEquals(0, cRSMatrix1.cardinality());
      assertEquals(Double.NaN, cRSMatrix1.density(), 0.01);
      assertEquals(0.0, cRSMatrix1.min(), 0.01);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(4);
      assertNotNull(cRSMatrix0);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(4, cRSMatrix0.columns());
      assertEquals(0.25, cRSMatrix0.density(), 0.01);
      assertEquals(4, cRSMatrix0.rows());
      assertEquals(4, cRSMatrix0.cardinality());
      assertEquals(1.0, cRSMatrix0.max(), 0.01);
      
      CCSMatrix cCSMatrix0 = (CCSMatrix)cRSMatrix0.rotate();
      assertNotNull(cCSMatrix0);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(4, cRSMatrix0.columns());
      assertEquals(0.25, cRSMatrix0.density(), 0.01);
      assertEquals(4, cRSMatrix0.rows());
      assertEquals(4, cRSMatrix0.cardinality());
      assertEquals(1.0, cRSMatrix0.max(), 0.01);
      assertEquals(4, cCSMatrix0.rows());
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(4, cCSMatrix0.columns());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(0.25, cCSMatrix0.density(), 0.01);
      assertEquals(4, cCSMatrix0.cardinality());
      assertEquals(1.0, cCSMatrix0.max(), 0.01);
      
      byte[] byteArray0 = cRSMatrix0.toBinary();
      assertNotNull(byteArray0);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(4, cRSMatrix0.columns());
      assertEquals(0.25, cRSMatrix0.density(), 0.01);
      assertEquals(4, cRSMatrix0.rows());
      assertEquals(4, cRSMatrix0.cardinality());
      assertEquals(1.0, cRSMatrix0.max(), 0.01);
      assertEquals(81, byteArray0.length);
      
      MockRandom mockRandom0 = new MockRandom(4);
      assertNotNull(mockRandom0);
      
      CRSMatrix cRSMatrix1 = CRSMatrix.randomSymmetric(4, 0.75, (Random) mockRandom0);
      assertNotNull(cRSMatrix1);
      assertNotSame(cRSMatrix1, cRSMatrix0);
      assertFalse(cRSMatrix1.equals((Object)cRSMatrix0));
      assertEquals(0.0, cRSMatrix1.min(), 0.01);
      assertTrue(cRSMatrix1.isRowMajor());
      assertEquals(0.25, cRSMatrix1.density(), 0.01);
      assertEquals(4, cRSMatrix1.rows());
      assertEquals(4, cRSMatrix1.columns());
      assertEquals(0.5, cRSMatrix1.max(), 0.01);
      assertEquals(4, cRSMatrix1.cardinality());
      
      // Undeclared exception!
      try { 
        CRSMatrix.random(801, 801, (-1583.551), (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The density value should be between 0 and 1.0
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      assertNotNull(cRSMatrix0);
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0, cRSMatrix0.rows());
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(0, cRSMatrix0.cardinality());
      
      CRSMatrix cRSMatrix1 = (CRSMatrix)cRSMatrix0.blank();
      assertNotNull(cRSMatrix1);
      assertNotSame(cRSMatrix0, cRSMatrix1);
      assertNotSame(cRSMatrix1, cRSMatrix0);
      assertTrue(cRSMatrix1.equals((Object)cRSMatrix0));
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0, cRSMatrix0.rows());
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0, cRSMatrix1.rows());
      assertEquals(0.0, cRSMatrix1.max(), 0.01);
      assertEquals(0.0, cRSMatrix1.min(), 0.01);
      assertEquals(0, cRSMatrix1.cardinality());
      assertEquals(Double.NaN, cRSMatrix1.density(), 0.01);
      assertEquals(0, cRSMatrix1.columns());
      assertTrue(cRSMatrix1.isRowMajor());
      
      CRSMatrix cRSMatrix2 = CRSMatrix.diagonal(0, 0);
      assertNotNull(cRSMatrix2);
      assertNotSame(cRSMatrix2, cRSMatrix0);
      assertNotSame(cRSMatrix2, cRSMatrix1);
      assertTrue(cRSMatrix2.equals((Object)cRSMatrix0));
      assertTrue(cRSMatrix2.equals((Object)cRSMatrix1));
      assertEquals(0.0, cRSMatrix2.max(), 0.01);
      assertEquals(Double.NaN, cRSMatrix2.density(), 0.01);
      assertTrue(cRSMatrix2.isRowMajor());
      assertEquals(0, cRSMatrix2.cardinality());
      assertEquals(0, cRSMatrix2.columns());
      assertEquals(0, cRSMatrix2.rows());
      assertEquals(0.0, cRSMatrix2.min(), 0.01);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byte byte0 = (byte)97;
      byteArray0[1] = (byte)97;
      int int0 = (-1917);
      // Undeclared exception!
      try { 
        CRSMatrix.zero(608, (-1917), (-1917));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: 608x-1917
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      int int0 = 87;
      CRSMatrix cRSMatrix0 = new CRSMatrix(87, 87);
      assertNotNull(cRSMatrix0);
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(87, cRSMatrix0.columns());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertEquals(87, cRSMatrix0.rows());
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      
      // Undeclared exception!
      try { 
        CRSMatrix.fromBinary((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.ByteBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(40, 40);
      assertNotNull(cRSMatrix0);
      assertEquals(40, cRSMatrix0.rows());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(40, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      
      CRSMatrix cRSMatrix1 = (CRSMatrix)cRSMatrix0.blank();
      assertNotNull(cRSMatrix1);
      assertNotSame(cRSMatrix0, cRSMatrix1);
      assertNotSame(cRSMatrix1, cRSMatrix0);
      assertTrue(cRSMatrix1.equals((Object)cRSMatrix0));
      assertEquals(40, cRSMatrix0.rows());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(40, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix1.max(), 0.01);
      assertEquals(0.0, cRSMatrix1.density(), 0.01);
      assertEquals(40, cRSMatrix1.rows());
      assertEquals(40, cRSMatrix1.columns());
      assertTrue(cRSMatrix1.isRowMajor());
      assertEquals(0, cRSMatrix1.cardinality());
      assertEquals(0.0, cRSMatrix1.min(), 0.01);
      
      double double0 = cRSMatrix0.max();
      assertNotSame(cRSMatrix0, cRSMatrix1);
      assertEquals(0.0, double0, 0.01);
      assertTrue(cRSMatrix0.equals((Object)cRSMatrix1));
      assertEquals(40, cRSMatrix0.rows());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(40, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      
      CRSMatrix cRSMatrix2 = (CRSMatrix)cRSMatrix0.blankOfShape(16, 8);
      assertNotNull(cRSMatrix2);
      assertNotSame(cRSMatrix0, cRSMatrix1);
      assertNotSame(cRSMatrix0, cRSMatrix2);
      assertNotSame(cRSMatrix2, cRSMatrix0);
      assertNotSame(cRSMatrix2, cRSMatrix1);
      assertTrue(cRSMatrix0.equals((Object)cRSMatrix1));
      assertFalse(cRSMatrix2.equals((Object)cRSMatrix0));
      assertFalse(cRSMatrix2.equals((Object)cRSMatrix1));
      assertEquals(40, cRSMatrix0.rows());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(40, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix2.max(), 0.01);
      assertEquals(16, cRSMatrix2.rows());
      assertEquals(0, cRSMatrix2.cardinality());
      assertEquals(0.0, cRSMatrix2.density(), 0.01);
      assertEquals(0.0, cRSMatrix2.min(), 0.01);
      assertEquals(8, cRSMatrix2.columns());
      assertTrue(cRSMatrix2.isRowMajor());
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      assertNotNull(cRSMatrix0);
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      
      double[][] doubleArray0 = new double[4][9];
      double[] doubleArray1 = new double[0];
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[1];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 205.8871637203285;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[3];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray3[0] = (-801.05237);
      doubleArray3[1] = 205.8871637203285;
      doubleArray3[1] = 205.8871637203285;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[2];
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      
      doubleArray4[0] = 205.8871637203285;
      doubleArray4[1] = (-801.05237);
      doubleArray0[3] = doubleArray4;
      SparseMatrix sparseMatrix0 = SparseMatrix.from2DArray(doubleArray0);
      assertNotNull(sparseMatrix0);
      assertNotSame(sparseMatrix0, cRSMatrix0);
      assertFalse(sparseMatrix0.equals((Object)cRSMatrix0));
      assertEquals(0, sparseMatrix0.columns());
      assertTrue(sparseMatrix0.isRowMajor());
      assertEquals(0, sparseMatrix0.cardinality());
      assertEquals(0.0, sparseMatrix0.max(), 0.01);
      assertEquals(Double.NaN, sparseMatrix0.density(), 0.01);
      assertEquals(0.0, sparseMatrix0.min(), 0.01);
      assertEquals(4, sparseMatrix0.rows());
      assertEquals(4, doubleArray0.length);
      
      byte[] byteArray0 = cRSMatrix0.toBinary();
      assertNotNull(byteArray0);
      assertNotSame(cRSMatrix0, sparseMatrix0);
      assertFalse(cRSMatrix0.equals((Object)sparseMatrix0));
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(17, byteArray0.length);
      
      CRSMatrix cRSMatrix1 = CRSMatrix.fromBinary(byteArray0);
      assertNotNull(cRSMatrix1);
      assertNotSame(cRSMatrix0, sparseMatrix0);
      assertNotSame(cRSMatrix0, cRSMatrix1);
      assertNotSame(cRSMatrix1, sparseMatrix0);
      assertNotSame(cRSMatrix1, cRSMatrix0);
      assertFalse(cRSMatrix0.equals((Object)sparseMatrix0));
      assertFalse(cRSMatrix1.equals((Object)sparseMatrix0));
      assertTrue(cRSMatrix1.equals((Object)cRSMatrix0));
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix1.max(), 0.01);
      assertEquals(Double.NaN, cRSMatrix1.density(), 0.01);
      assertEquals(0, cRSMatrix1.rows());
      assertEquals(0, cRSMatrix1.columns());
      assertEquals(0, cRSMatrix1.cardinality());
      assertEquals(0.0, cRSMatrix1.min(), 0.01);
      assertTrue(cRSMatrix1.isRowMajor());
      assertEquals(17, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      assertNotNull(cRSMatrix0);
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.rows());
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      
      Matrix matrix0 = Matrix.fromCSV("");
      assertNotNull(matrix0);
      assertEquals(0, matrix0.rows());
      assertEquals(0, matrix0.columns());
      
      int[] intArray0 = new int[2];
      intArray0[0] = (-1304);
      int int0 = 2054;
      double[][] doubleArray0 = new double[3][7];
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = (double) (-1304);
      doubleArray1[1] = (double) (-1304);
      doubleArray1[2] = (double) (-1304);
      doubleArray1[3] = (double) (-1304);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[4];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (double) 2054;
      doubleArray2[1] = (double) (-1304);
      doubleArray2[2] = (double) (-1304);
      doubleArray2[3] = (double) 2054;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[1];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[0] = (double) 2054;
      // Undeclared exception!
      try { 
        SparseMatrix.zero(3881, (-1304), 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: 3881x-1304
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      assertNotNull(cRSMatrix0);
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      
      MockRandom mockRandom0 = new MockRandom(5019L);
      assertNotNull(mockRandom0);
      
      CRSMatrix cRSMatrix1 = CRSMatrix.random(1, 6, 0.5, (Random) mockRandom0);
      assertNotNull(cRSMatrix1);
      assertNotSame(cRSMatrix1, cRSMatrix0);
      assertFalse(cRSMatrix1.equals((Object)cRSMatrix0));
      assertEquals(0.0, cRSMatrix1.max(), 0.01);
      assertEquals(0.5, cRSMatrix1.density(), 0.01);
      assertEquals(0.0, cRSMatrix1.min(), 0.01);
      assertTrue(cRSMatrix1.isRowMajor());
      assertEquals(3, cRSMatrix1.cardinality());
      assertEquals(1, cRSMatrix1.rows());
      assertEquals(6, cRSMatrix1.columns());
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(21, 21);
      assertNotNull(cRSMatrix0);
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(21, cRSMatrix0.rows());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(21, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.eachInRow(1, vectorProcedure0);
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(21, cRSMatrix0.rows());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(21, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(669, 0.0);
      assertNotNull(cRSMatrix0);
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(669, cRSMatrix0.cardinality());
      assertEquals(669, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(0.0014947683109118087, cRSMatrix0.density(), 0.01);
      assertEquals(669, cRSMatrix0.columns());
      
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.eachNonZeroInColumn(669, vectorProcedure0);
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(669, cRSMatrix0.cardinality());
      assertEquals(669, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(0.0014947683109118087, cRSMatrix0.density(), 0.01);
      assertEquals(669, cRSMatrix0.columns());
      
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(matrixPredicate0).test(anyInt() , anyInt());
      doReturn(false).when(matrixPredicate0).test(anyInt() , anyInt() , anyDouble());
      boolean boolean0 = cRSMatrix0.non(matrixPredicate0);
      assertTrue(boolean0);
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(669, cRSMatrix0.cardinality());
      assertEquals(669, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(0.0014947683109118087, cRSMatrix0.density(), 0.01);
      assertEquals(669, cRSMatrix0.columns());
      
      boolean boolean1 = cRSMatrix0.nonZeroAt(1, 0);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(669, cRSMatrix0.cardinality());
      assertEquals(669, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(0.0014947683109118087, cRSMatrix0.density(), 0.01);
      assertEquals(669, cRSMatrix0.columns());
      
      int int0 = 17;
      int int1 = (-1792);
      LinearAlgebra.SolverFactory linearAlgebra_SolverFactory0 = LinearAlgebra.SolverFactory.SMART;
      // Undeclared exception!
      cRSMatrix0.withSolver(linearAlgebra_SolverFactory0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      int int0 = 3;
      // Undeclared exception!
      try { 
        CRSMatrix.from1DArray(3, 3, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      int int0 = 48;
      double double0 = 1.0;
      Random random0 = null;
      // Undeclared exception!
      try { 
        CRSMatrix.randomSymmetric(48, 1.0, (Random) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix(0, 0);
      assertNotNull(cRSMatrix0);
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      
      String string0 = cRSMatrix0.toMatrixMarket();
      assertNotNull(string0);
      assertEquals("%%MatrixMarket matrix coordinate real general row-major\n0 0 0\n", string0);
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      
      VectorIterator vectorIterator0 = cRSMatrix0.nonZeroIteratorOfColumn(0);
      assertNotNull(vectorIterator0);
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      
      MatrixFactory<Matrix> matrixFactory0 = (MatrixFactory<Matrix>) mock(MatrixFactory.class, new ViolatedAssumptionAnswer());
      doReturn(cRSMatrix0).when(matrixFactory0).apply(anyInt() , anyInt());
      CRSMatrix cRSMatrix1 = (CRSMatrix)cRSMatrix0.to(matrixFactory0);
      assertNotNull(cRSMatrix1);
      assertSame(cRSMatrix0, cRSMatrix1);
      assertSame(cRSMatrix1, cRSMatrix0);
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertTrue(cRSMatrix1.isRowMajor());
      assertEquals(0.0, cRSMatrix1.min(), 0.01);
      assertEquals(0, cRSMatrix1.columns());
      assertEquals(0, cRSMatrix1.cardinality());
      assertEquals(0.0, cRSMatrix1.max(), 0.01);
      assertEquals(Double.NaN, cRSMatrix1.density(), 0.01);
      assertEquals(0, cRSMatrix1.rows());
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 0;
      CRSMatrix cRSMatrix2 = CRSMatrix.from1DArray(10, 0, doubleArray0);
      assertNotNull(cRSMatrix2);
      assertNotSame(cRSMatrix2, cRSMatrix0);
      assertNotSame(cRSMatrix2, cRSMatrix1);
      assertFalse(cRSMatrix2.equals((Object)cRSMatrix0));
      assertFalse(cRSMatrix2.equals((Object)cRSMatrix1));
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(10, cRSMatrix2.rows());
      assertEquals(0, cRSMatrix2.cardinality());
      assertEquals(0.0, cRSMatrix2.min(), 0.01);
      assertEquals(0, cRSMatrix2.columns());
      assertEquals(Double.NaN, cRSMatrix2.density(), 0.01);
      assertEquals(0.0, cRSMatrix2.max(), 0.01);
      assertTrue(cRSMatrix2.isRowMajor());
      assertEquals(1, doubleArray0.length);
      
      CRSMatrix cRSMatrix3 = CRSMatrix.identity(0);
      assertNotNull(cRSMatrix3);
      assertNotSame(cRSMatrix3, cRSMatrix2);
      assertNotSame(cRSMatrix3, cRSMatrix1);
      assertNotSame(cRSMatrix3, cRSMatrix0);
      assertFalse(cRSMatrix3.equals((Object)cRSMatrix2));
      assertTrue(cRSMatrix3.equals((Object)cRSMatrix1));
      assertTrue(cRSMatrix3.equals((Object)cRSMatrix0));
      assertEquals(0.0, cRSMatrix3.max(), 0.01);
      assertEquals(0.0, cRSMatrix3.min(), 0.01);
      assertEquals(0, cRSMatrix3.cardinality());
      assertTrue(cRSMatrix3.isRowMajor());
      assertEquals(0, cRSMatrix3.rows());
      assertEquals(0, cRSMatrix3.columns());
      assertEquals(Double.NaN, cRSMatrix3.density(), 0.01);
      
      VectorIterator vectorIterator1 = cRSMatrix3.nonZeroIteratorOfRow(0);
      assertNotNull(vectorIterator1);
      assertNotSame(cRSMatrix3, cRSMatrix2);
      assertNotSame(cRSMatrix3, cRSMatrix1);
      assertNotSame(cRSMatrix3, cRSMatrix0);
      assertFalse(cRSMatrix3.equals((Object)cRSMatrix2));
      assertTrue(cRSMatrix3.equals((Object)cRSMatrix1));
      assertTrue(cRSMatrix3.equals((Object)cRSMatrix0));
      assertFalse(vectorIterator1.equals((Object)vectorIterator0));
      assertEquals(0.0, cRSMatrix3.max(), 0.01);
      assertEquals(0.0, cRSMatrix3.min(), 0.01);
      assertEquals(0, cRSMatrix3.cardinality());
      assertTrue(cRSMatrix3.isRowMajor());
      assertEquals(0, cRSMatrix3.rows());
      assertEquals(0, cRSMatrix3.columns());
      assertEquals(Double.NaN, cRSMatrix3.density(), 0.01);
      
      // Undeclared exception!
      try { 
        SparseMatrix.zero(Integer.MAX_VALUE, 35, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: use 'Integer.MAX_VALUE - 1' instead.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(1631);
      assertNotNull(cRSMatrix0);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(1631, cRSMatrix0.rows());
      assertEquals(1631, cRSMatrix0.columns());
      assertEquals(1.0, cRSMatrix0.max(), 0.01);
      assertEquals(6.131207847946045E-4, cRSMatrix0.density(), 0.01);
      assertEquals(1631, cRSMatrix0.cardinality());
      
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      int[] intArray0 = new int[9];
      intArray0[0] = 48;
      intArray0[1] = 1631;
      intArray0[2] = 1631;
      intArray0[3] = 1631;
      intArray0[4] = 48;
      intArray0[6] = 1631;
      intArray0[7] = 1631;
      intArray0[8] = 1631;
      // Undeclared exception!
      try { 
        cRSMatrix0.select(intArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '1631' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.fromCSV("");
      assertNotNull(cRSMatrix0);
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(0, cRSMatrix0.rows());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        CRSMatrix.random((-267), Integer.MAX_VALUE, 0.0, (Random) mockRandom0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix(0, 0);
      assertNotNull(cRSMatrix0);
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.rows());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      
      // Undeclared exception!
      try { 
        cRSMatrix0.getOrElse(0, (-338), 527.5822124616932);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '0' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(9, 820);
      assertNotNull(cRSMatrix0);
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertEquals(9, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(820, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      
      double double0 = cRSMatrix0.maxInRow(7);
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertEquals(9, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(820, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(13, 13);
      assertNotNull(cRSMatrix0);
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertEquals(13, cRSMatrix0.rows());
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(13, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      
      int int0 = cRSMatrix0.rank();
      assertEquals(0, int0);
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertEquals(13, cRSMatrix0.rows());
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(13, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      
      VectorIterator vectorIterator0 = cRSMatrix0.iteratorOfColumn(13);
      assertNotNull(vectorIterator0);
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertEquals(13, cRSMatrix0.rows());
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(13, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      
      CRSMatrix cRSMatrix1 = (CRSMatrix)cRSMatrix0.copyOfShape(32, 32);
      assertNotNull(cRSMatrix1);
      assertNotSame(cRSMatrix0, cRSMatrix1);
      assertNotSame(cRSMatrix1, cRSMatrix0);
      assertFalse(cRSMatrix1.equals((Object)cRSMatrix0));
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertEquals(13, cRSMatrix0.rows());
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(13, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0.0, cRSMatrix1.density(), 0.01);
      assertEquals(0.0, cRSMatrix1.min(), 0.01);
      assertEquals(32, cRSMatrix1.columns());
      assertEquals(0.0, cRSMatrix1.max(), 0.01);
      assertEquals(32, cRSMatrix1.rows());
      assertTrue(cRSMatrix1.isRowMajor());
      assertEquals(0, cRSMatrix1.cardinality());
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 1838;
      doubleArray0[2] = (double) 1838;
      doubleArray0[3] = 5.0;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 1838;
      doubleArray0[6] = (double) 1838;
      doubleArray0[7] = (double) 1838;
      int[] intArray0 = new int[7];
      intArray0[0] = 1838;
      intArray0[1] = 1838;
      intArray0[2] = 0;
      intArray0[3] = 1838;
      intArray0[4] = 0;
      intArray0[5] = 0;
      intArray0[6] = 1838;
      CRSMatrix cRSMatrix0 = new CRSMatrix(1838, 1838, 0, doubleArray0, intArray0, intArray0);
      assertNotNull(cRSMatrix0);
      assertArrayEquals(new double[] {0.0, 1838.0, 1838.0, 5.0, 0.0, 1838.0, 1838.0, 1838.0}, doubleArray0, 0.01);
      assertArrayEquals(new int[] {1838, 1838, 0, 1838, 0, 0, 1838}, intArray0);
      assertEquals(0, cRSMatrix0.cardinality());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertEquals(1838, cRSMatrix0.rows());
      assertEquals(1838, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(7, intArray0.length);
      
      CRSMatrix cRSMatrix1 = (CRSMatrix)cRSMatrix0.blankOfShape(1838, 0);
      assertNotNull(cRSMatrix1);
      assertNotSame(cRSMatrix0, cRSMatrix1);
      assertNotSame(cRSMatrix1, cRSMatrix0);
      assertFalse(cRSMatrix1.equals((Object)cRSMatrix0));
      assertArrayEquals(new double[] {0.0, 1838.0, 1838.0, 5.0, 0.0, 1838.0, 1838.0, 1838.0}, doubleArray0, 0.01);
      assertArrayEquals(new int[] {1838, 1838, 0, 1838, 0, 0, 1838}, intArray0);
      assertEquals(0, cRSMatrix0.cardinality());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertEquals(1838, cRSMatrix0.rows());
      assertEquals(1838, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(0, cRSMatrix1.columns());
      assertEquals(0.0, cRSMatrix1.max(), 0.01);
      assertTrue(cRSMatrix1.isRowMajor());
      assertEquals(0, cRSMatrix1.cardinality());
      assertEquals(Double.NaN, cRSMatrix1.density(), 0.01);
      assertEquals(1838, cRSMatrix1.rows());
      assertEquals(0.0, cRSMatrix1.min(), 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(7, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      double[][] doubleArray0 = new double[1][7];
      double[] doubleArray1 = new double[0];
      doubleArray0[0] = doubleArray1;
      CRSMatrix cRSMatrix0 = CRSMatrix.from2DArray(doubleArray0);
      assertNotNull(cRSMatrix0);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(1, cRSMatrix0.rows());
      assertEquals(1, doubleArray0.length);
      
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorAccumulator0).accumulate();
      double[] doubleArray2 = cRSMatrix0.foldRows(vectorAccumulator0);
      assertNotNull(doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {0.0}, doubleArray2, 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(1, cRSMatrix0.rows());
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray2.length);
      
      CRSMatrix cRSMatrix1 = (CRSMatrix)cRSMatrix0.shuffle();
      assertNotNull(cRSMatrix1);
      assertNotSame(cRSMatrix0, cRSMatrix1);
      assertNotSame(cRSMatrix1, cRSMatrix0);
      assertTrue(cRSMatrix1.equals((Object)cRSMatrix0));
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(1, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix1.min(), 0.01);
      assertEquals(0, cRSMatrix1.cardinality());
      assertTrue(cRSMatrix1.isRowMajor());
      assertEquals(0.0, cRSMatrix1.max(), 0.01);
      assertEquals(Double.NaN, cRSMatrix1.density(), 0.01);
      assertEquals(0, cRSMatrix1.columns());
      assertEquals(1, cRSMatrix1.rows());
      assertEquals(1, doubleArray0.length);
      
      int int0 = 3113;
      // Undeclared exception!
      try { 
        cRSMatrix0.transformColumn(3113, (VectorFunction) null);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '3113' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      int int0 = 37;
      CRSMatrix cRSMatrix0 = new CRSMatrix(37, 37, 0);
      assertNotNull(cRSMatrix0);
      assertEquals(37, cRSMatrix0.columns());
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(37, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      
      CRSMatrix cRSMatrix1 = (CRSMatrix)Matrix.diagonal(0, 37);
      assertNotNull(cRSMatrix1);
      assertNotSame(cRSMatrix1, cRSMatrix0);
      assertFalse(cRSMatrix1.equals((Object)cRSMatrix0));
      assertEquals(0, cRSMatrix1.columns());
      assertEquals(0.0, cRSMatrix1.min(), 0.01);
      assertEquals(Double.NaN, cRSMatrix1.density(), 0.01);
      assertEquals(0, cRSMatrix1.cardinality());
      assertEquals(0.0, cRSMatrix1.max(), 0.01);
      assertTrue(cRSMatrix1.isRowMajor());
      assertEquals(0, cRSMatrix1.rows());
      
      int int1 = 33;
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) (-1576);
      doubleArray0[3] = (double) 33;
      doubleArray0[4] = (double) 0;
      // Undeclared exception!
      try { 
        CRSMatrix.from1DArray((-1576), 33, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: -1576x33
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix(48, 48);
      assertNotNull(cRSMatrix0);
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(48, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(48, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(48, 399, 48);
      assertNotNull(rowMajorSparseMatrix0);
      assertNotSame(rowMajorSparseMatrix0, cRSMatrix0);
      assertFalse(rowMajorSparseMatrix0.equals((Object)cRSMatrix0));
      assertEquals(399, rowMajorSparseMatrix0.columns());
      assertEquals(0.0, rowMajorSparseMatrix0.min(), 0.01);
      assertEquals(0, rowMajorSparseMatrix0.cardinality());
      assertEquals(0.0, rowMajorSparseMatrix0.max(), 0.01);
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      assertEquals(48, rowMajorSparseMatrix0.rows());
      assertEquals(0.0, rowMajorSparseMatrix0.density(), 0.01);
      
      cRSMatrix0.setAll(1.0);
      assertNotSame(cRSMatrix0, rowMajorSparseMatrix0);
      assertFalse(cRSMatrix0.equals((Object)rowMajorSparseMatrix0));
      assertEquals(1.0, cRSMatrix0.density(), 0.01);
      assertEquals(2304, cRSMatrix0.cardinality());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(48, cRSMatrix0.rows());
      assertEquals(1.0, cRSMatrix0.max(), 0.01);
      assertEquals(48, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      
      // Undeclared exception!
      try { 
        cRSMatrix0.minInRow(399);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 399
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(3039);
      assertNotNull(cRSMatrix0);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(3039, cRSMatrix0.cardinality());
      assertEquals(3.290556103981573E-4, cRSMatrix0.density(), 0.01);
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(3039, cRSMatrix0.rows());
      assertEquals(3039, cRSMatrix0.columns());
      assertEquals(1.0, cRSMatrix0.max(), 0.01);
      
      double double0 = cRSMatrix0.min();
      assertEquals(0.0, double0, 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(3039, cRSMatrix0.cardinality());
      assertEquals(3.290556103981573E-4, cRSMatrix0.density(), 0.01);
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(3039, cRSMatrix0.rows());
      assertEquals(3039, cRSMatrix0.columns());
      assertEquals(1.0, cRSMatrix0.max(), 0.01);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(87, 87);
      assertNotNull(cRSMatrix0);
      assertEquals(87, cRSMatrix0.columns());
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(87, cRSMatrix0.rows());
      
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.eachNonZero(matrixProcedure0);
      assertEquals(87, cRSMatrix0.columns());
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(87, cRSMatrix0.rows());
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      double[] doubleArray0 = new double[4];
      CRSMatrix cRSMatrix0 = CRSMatrix.from1DArray(0, 0, doubleArray0);
      assertNotNull(cRSMatrix0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(0, cRSMatrix0.rows());
      assertEquals(4, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        cRSMatrix0.minInRow(0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      assertNotNull(cRSMatrix0);
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0, cRSMatrix0.rows());
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      
      CompressedVector compressedVector0 = (CompressedVector)cRSMatrix0.toColumnVector();
      assertNotNull(compressedVector0);
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0, cRSMatrix0.rows());
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0, compressedVector0.length());
      
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        cRSMatrix0.updateAt((-3436), (-3436), matrixFunction0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      int int0 = 3126;
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 3126;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 3126;
      doubleArray0[5] = (double) 3126;
      doubleArray0[6] = 0.0;
      doubleArray0[7] = (double) 0;
      doubleArray0[8] = (double) 3126;
      CRSMatrix cRSMatrix0 = CRSMatrix.from1DArray(0, 3126, doubleArray0);
      assertNotNull(cRSMatrix0);
      assertArrayEquals(new double[] {0.0, 0.0, 3126.0, 0.0, 3126.0, 3126.0, 0.0, 0.0, 3126.0}, doubleArray0, 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(3126, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(9, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        cRSMatrix0.toRowVector();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      // Undeclared exception!
      try { 
        CRSMatrix.fromMatrixMarket("");
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.StringTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(25, 25, 25);
      assertNotNull(cRSMatrix0);
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertEquals(25, cRSMatrix0.rows());
      assertEquals(25, cRSMatrix0.columns());
      assertTrue(cRSMatrix0.isRowMajor());
      
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(matrixPredicate0).test(anyInt() , anyInt());
      boolean boolean0 = cRSMatrix0.non(matrixPredicate0);
      assertTrue(boolean0);
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertEquals(25, cRSMatrix0.rows());
      assertEquals(25, cRSMatrix0.columns());
      assertTrue(cRSMatrix0.isRowMajor());
      
      // Undeclared exception!
      try { 
        cRSMatrix0.nonZeroAt((-1396), (-2887));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(0, 1277);
      assertNotNull(cRSMatrix0);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(1277, cRSMatrix0.columns());
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(6, 6);
      assertNotNull(cRSMatrix0);
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(6, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(6, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cRSMatrix0.update(matrixFunction0);
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(6, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(6, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      
      // Undeclared exception!
      try { 
        cRSMatrix0.maxInRow((-749));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -749
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      assertNotNull(cRSMatrix0);
      assertEquals(0, cRSMatrix0.cardinality());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.rows());
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      
      // Undeclared exception!
      try { 
        cRSMatrix0.minInRow((-436));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -436
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      assertNotNull(cRSMatrix0);
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0, cRSMatrix0.rows());
      assertEquals(0, cRSMatrix0.cardinality());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      
      int[] intArray0 = new int[2];
      double[][] doubleArray0 = new double[3][7];
      double[] doubleArray1 = new double[4];
      doubleArray1[1] = (double) 0;
      doubleArray1[3] = (double) 0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[4];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (double) 2054;
      doubleArray2[2] = (double) 0;
      doubleArray2[3] = (double) 2054;
      doubleArray0[1] = doubleArray2;
      doubleArray0[2] = doubleArray2;
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.from2DArray(doubleArray0);
      assertNotNull(rowMajorSparseMatrix0);
      assertNotSame(rowMajorSparseMatrix0, cRSMatrix0);
      assertFalse(rowMajorSparseMatrix0.equals((Object)cRSMatrix0));
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      assertEquals(0.0, rowMajorSparseMatrix0.min(), 0.01);
      assertEquals(3, rowMajorSparseMatrix0.rows());
      assertEquals(0.3333333333333333, rowMajorSparseMatrix0.density(), 0.01);
      assertEquals(2054.0, rowMajorSparseMatrix0.max(), 0.01);
      assertEquals(4, rowMajorSparseMatrix0.cardinality());
      assertEquals(4, rowMajorSparseMatrix0.columns());
      assertEquals(3, doubleArray0.length);
      
      intArray0[1] = 2054;
      // Undeclared exception!
      try { 
        cRSMatrix0.select(intArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '0' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      int int0 = 1631;
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(1631);
      assertNotNull(cRSMatrix0);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(6.131207847946045E-4, cRSMatrix0.density(), 0.01);
      assertEquals(1631, cRSMatrix0.cardinality());
      assertEquals(1631, cRSMatrix0.columns());
      assertEquals(1.0, cRSMatrix0.max(), 0.01);
      assertEquals(1631, cRSMatrix0.rows());
      
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      int int1 = 2;
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)2, (double)1631, (-1471.32), (-361.62701512372246), 839.75).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      // Undeclared exception!
      cRSMatrix0.updateColumn(2, vectorFunction0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 87;
      doubleArray0[1] = (double) 1230;
      doubleArray0[2] = (double) 1230;
      doubleArray0[3] = (double) 1230;
      doubleArray0[4] = (double) 87;
      int[] intArray0 = new int[2];
      intArray0[0] = 1230;
      intArray0[1] = 87;
      CRSMatrix cRSMatrix0 = new CRSMatrix(87, 87, 1230, doubleArray0, intArray0, intArray0);
      assertNotNull(cRSMatrix0);
      assertArrayEquals(new double[] {87.0, 1230.0, 1230.0, 1230.0, 87.0}, doubleArray0, 0.01);
      assertArrayEquals(new int[] {1230, 87}, intArray0);
      assertEquals(87, cRSMatrix0.rows());
      assertEquals(1230, cRSMatrix0.cardinality());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(87, cRSMatrix0.columns());
      assertEquals(0.16250495441934204, cRSMatrix0.density(), 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals(2, intArray0.length);
      
      // Undeclared exception!
      try { 
        cRSMatrix0.max();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(1612, 1628, 1628);
      assertNotNull(cRSMatrix0);
      assertEquals(1612, cRSMatrix0.rows());
      assertEquals(1628, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      
      RowMajorSparseMatrix rowMajorSparseMatrix0 = cRSMatrix0.toRowMajorSparseMatrix();
      assertNotNull(rowMajorSparseMatrix0);
      assertSame(cRSMatrix0, rowMajorSparseMatrix0);
      assertSame(rowMajorSparseMatrix0, cRSMatrix0);
      assertEquals(1612, cRSMatrix0.rows());
      assertEquals(1628, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(1628, rowMajorSparseMatrix0.columns());
      assertEquals(0.0, rowMajorSparseMatrix0.density(), 0.01);
      assertEquals(0.0, rowMajorSparseMatrix0.min(), 0.01);
      assertEquals(0, rowMajorSparseMatrix0.cardinality());
      assertEquals(1612, rowMajorSparseMatrix0.rows());
      assertEquals(0.0, rowMajorSparseMatrix0.max(), 0.01);
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      
      CRSMatrix cRSMatrix1 = (CRSMatrix)cRSMatrix0.blankOfShape(1628, 1612);
      assertNotNull(cRSMatrix1);
      assertNotSame(cRSMatrix0, cRSMatrix1);
      assertSame(cRSMatrix0, rowMajorSparseMatrix0);
      assertNotSame(cRSMatrix1, rowMajorSparseMatrix0);
      assertNotSame(cRSMatrix1, cRSMatrix0);
      assertFalse(cRSMatrix1.equals((Object)rowMajorSparseMatrix0));
      assertFalse(cRSMatrix1.equals((Object)cRSMatrix0));
      assertEquals(1612, cRSMatrix0.rows());
      assertEquals(1628, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0.0, cRSMatrix1.density(), 0.01);
      assertTrue(cRSMatrix1.isRowMajor());
      assertEquals(0.0, cRSMatrix1.min(), 0.01);
      assertEquals(1612, cRSMatrix1.columns());
      assertEquals(0.0, cRSMatrix1.max(), 0.01);
      assertEquals(0, cRSMatrix1.cardinality());
      assertEquals(1628, cRSMatrix1.rows());
      
      double double0 = cRSMatrix0.minInRow(6);
      assertNotSame(cRSMatrix0, cRSMatrix1);
      assertSame(cRSMatrix0, rowMajorSparseMatrix0);
      assertEquals(0.0, double0, 0.01);
      assertFalse(cRSMatrix0.equals((Object)cRSMatrix1));
      assertEquals(1612, cRSMatrix0.rows());
      assertEquals(1628, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(3540, 3540);
      assertNotNull(cRSMatrix0);
      assertEquals(3540, cRSMatrix0.rows());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertEquals(3540, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      
      double double0 = cRSMatrix0.getOrElse(1, 2396, 21.0);
      assertEquals(21.0, double0, 0.01);
      assertEquals(3540, cRSMatrix0.rows());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertEquals(3540, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(23);
      assertNotNull(cRSMatrix0);
      assertEquals(1.0, cRSMatrix0.max(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(23, cRSMatrix0.cardinality());
      assertEquals(23, cRSMatrix0.columns());
      assertEquals(0.043478260869565216, cRSMatrix0.density(), 0.01);
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(23, cRSMatrix0.rows());
      
      // Undeclared exception!
      try { 
        cRSMatrix0.set(23, 23, 36.0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '23' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(3029, 55.6012384922);
      assertNotNull(cRSMatrix0);
      assertEquals(55.6012384922, cRSMatrix0.max(), 0.01);
      assertEquals(3029, cRSMatrix0.cardinality());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(3.301419610432486E-4, cRSMatrix0.density(), 0.01);
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(3029, cRSMatrix0.rows());
      assertEquals(3029, cRSMatrix0.columns());
      
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        cRSMatrix0.eachInRow((-716), vectorProcedure0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -716
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(567);
      assertNotNull(cRSMatrix0);
      assertEquals(567, cRSMatrix0.rows());
      assertEquals(0.001763668430335097, cRSMatrix0.density(), 0.01);
      assertEquals(567, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(567, cRSMatrix0.columns());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(1.0, cRSMatrix0.max(), 0.01);
      
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.eachNonZero(matrixProcedure0);
      assertEquals(567, cRSMatrix0.rows());
      assertEquals(0.001763668430335097, cRSMatrix0.density(), 0.01);
      assertEquals(567, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(567, cRSMatrix0.columns());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(1.0, cRSMatrix0.max(), 0.01);
      
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        cRSMatrix0.updateAt(567, 567, matrixFunction0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix(13, 13, 13);
      assertNotNull(cRSMatrix0);
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(13, cRSMatrix0.columns());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(13, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      
      double double0 = cRSMatrix0.determinant();
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(13, cRSMatrix0.columns());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(13, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      
      VectorIterator vectorIterator0 = cRSMatrix0.iteratorOfRow(13);
      assertNotNull(vectorIterator0);
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(13, cRSMatrix0.columns());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(13, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      
      // Undeclared exception!
      try { 
        cRSMatrix0.maxInRow(13);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 14
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      assertNotNull(cRSMatrix0);
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0, cRSMatrix0.rows());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(0, cRSMatrix0.cardinality());
      
      cRSMatrix0.each((MatrixProcedure) null);
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0, cRSMatrix0.rows());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(0, cRSMatrix0.cardinality());
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(61, 61);
      assertNotNull(cRSMatrix0);
      assertEquals(61, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(61, cRSMatrix0.columns());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      
      boolean boolean0 = cRSMatrix0.nonZeroAt(0, 0);
      assertFalse(boolean0);
      assertEquals(61, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(61, cRSMatrix0.columns());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(1631);
      assertNotNull(cRSMatrix0);
      assertEquals(1631, cRSMatrix0.cardinality());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(1631, cRSMatrix0.columns());
      assertEquals(6.131207847946045E-4, cRSMatrix0.density(), 0.01);
      assertEquals(1.0, cRSMatrix0.max(), 0.01);
      assertEquals(1631, cRSMatrix0.rows());
      
      double[][] doubleArray0 = new double[2][6];
      double[] doubleArray1 = new double[0];
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[9];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (-801.05237);
      doubleArray2[1] = (-801.05237);
      doubleArray2[2] = (double) 1631;
      doubleArray2[3] = (double) 1631;
      doubleArray2[4] = (-801.05237);
      doubleArray2[5] = (-801.05237);
      doubleArray2[6] = (double) 1631;
      doubleArray2[7] = (-801.05237);
      doubleArray2[8] = (-801.05237);
      doubleArray0[1] = doubleArray2;
      SparseMatrix sparseMatrix0 = SparseMatrix.from2DArray(doubleArray0);
      assertNotNull(sparseMatrix0);
      assertNotSame(sparseMatrix0, cRSMatrix0);
      assertFalse(sparseMatrix0.equals((Object)cRSMatrix0));
      assertEquals(0, sparseMatrix0.columns());
      assertEquals(0.0, sparseMatrix0.max(), 0.01);
      assertEquals(Double.NaN, sparseMatrix0.density(), 0.01);
      assertEquals(0, sparseMatrix0.cardinality());
      assertTrue(sparseMatrix0.isRowMajor());
      assertEquals(2, sparseMatrix0.rows());
      assertEquals(0.0, sparseMatrix0.min(), 0.01);
      assertEquals(2, doubleArray0.length);
      
      byte[] byteArray0 = cRSMatrix0.toBinary();
      assertNotNull(byteArray0);
      assertNotSame(cRSMatrix0, sparseMatrix0);
      assertFalse(cRSMatrix0.equals((Object)sparseMatrix0));
      assertEquals(1631, cRSMatrix0.cardinality());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(1631, cRSMatrix0.columns());
      assertEquals(6.131207847946045E-4, cRSMatrix0.density(), 0.01);
      assertEquals(1.0, cRSMatrix0.max(), 0.01);
      assertEquals(1631, cRSMatrix0.rows());
      assertEquals(26113, byteArray0.length);
      
      CRSMatrix cRSMatrix1 = CRSMatrix.fromBinary(byteArray0);
      assertNotNull(cRSMatrix1);
      assertNotSame(cRSMatrix0, cRSMatrix1);
      assertNotSame(cRSMatrix0, sparseMatrix0);
      assertNotSame(cRSMatrix1, cRSMatrix0);
      assertNotSame(cRSMatrix1, sparseMatrix0);
      assertFalse(cRSMatrix0.equals((Object)sparseMatrix0));
      assertFalse(cRSMatrix1.equals((Object)sparseMatrix0));
      assertEquals(1631, cRSMatrix0.cardinality());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(1631, cRSMatrix0.columns());
      assertEquals(6.131207847946045E-4, cRSMatrix0.density(), 0.01);
      assertEquals(1.0, cRSMatrix0.max(), 0.01);
      assertEquals(1631, cRSMatrix0.rows());
      assertEquals(1631, cRSMatrix1.columns());
      assertEquals(1631, cRSMatrix1.rows());
      assertTrue(cRSMatrix1.isRowMajor());
      assertEquals(1631, cRSMatrix1.cardinality());
      assertEquals(0.0, cRSMatrix1.min(), 0.01);
      assertEquals(6.131207847946045E-4, cRSMatrix1.density(), 0.01);
      assertEquals(1.0, cRSMatrix1.max(), 0.01);
      assertEquals(26113, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      int int0 = 13;
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 4;
      doubleArray0[1] = (double) 4;
      int[] intArray0 = new int[8];
      intArray0[0] = 13;
      intArray0[1] = 4;
      intArray0[2] = 4;
      intArray0[3] = 2;
      intArray0[4] = 4;
      intArray0[5] = 4;
      intArray0[7] = 13;
      CRSMatrix cRSMatrix0 = new CRSMatrix(4, 2, 4, doubleArray0, intArray0, intArray0);
      assertNotNull(cRSMatrix0);
      assertArrayEquals(new double[] {4.0, 4.0}, doubleArray0, 0.01);
      assertArrayEquals(new int[] {13, 4, 4, 2, 4, 4, 0, 13}, intArray0);
      assertEquals(2, cRSMatrix0.columns());
      assertEquals(4, cRSMatrix0.cardinality());
      assertEquals(4, cRSMatrix0.rows());
      assertEquals(0.5, cRSMatrix0.density(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(2, doubleArray0.length);
      assertEquals(8, intArray0.length);
      
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      cRSMatrix0.updateColumn(0, vectorFunction0);
      assertArrayEquals(new double[] {4.0, 4.0}, doubleArray0, 0.01);
      assertArrayEquals(new int[] {13, 4, 4, 2, 4, 4, 0, 13}, intArray0);
      assertEquals(2, cRSMatrix0.columns());
      assertEquals(4, cRSMatrix0.cardinality());
      assertEquals(4, cRSMatrix0.rows());
      assertEquals(0.5, cRSMatrix0.density(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(2, doubleArray0.length);
      assertEquals(8, intArray0.length);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        CRSMatrix.random(2911, 2911, (double) 4, (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The density value should be between 0 and 1.0
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      int int0 = 0;
      // Undeclared exception!
      try { 
        CRSMatrix.zero(0, (-2221), (-2221));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: 0x-2221
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(669, 0.0);
      assertNotNull(cRSMatrix0);
      assertEquals(669, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(669, cRSMatrix0.rows());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0014947683109118087, cRSMatrix0.density(), 0.01);
      assertEquals(669, cRSMatrix0.cardinality());
      
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.eachNonZeroInColumn(669, vectorProcedure0);
      assertEquals(669, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(669, cRSMatrix0.rows());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0014947683109118087, cRSMatrix0.density(), 0.01);
      assertEquals(669, cRSMatrix0.cardinality());
      
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(matrixPredicate0).test(anyInt() , anyInt());
      boolean boolean0 = cRSMatrix0.non(matrixPredicate0);
      assertTrue(boolean0);
      assertEquals(669, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(669, cRSMatrix0.rows());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0014947683109118087, cRSMatrix0.density(), 0.01);
      assertEquals(669, cRSMatrix0.cardinality());
      
      boolean boolean1 = cRSMatrix0.nonZeroAt(1, 0);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      assertEquals(669, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(669, cRSMatrix0.rows());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0014947683109118087, cRSMatrix0.density(), 0.01);
      assertEquals(669, cRSMatrix0.cardinality());
      
      RowMajorMatrixIterator rowMajorMatrixIterator0 = cRSMatrix0.nonZeroRowMajorIterator();
      assertNotNull(rowMajorMatrixIterator0);
      assertEquals(669, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(669, cRSMatrix0.rows());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0014947683109118087, cRSMatrix0.density(), 0.01);
      assertEquals(669, cRSMatrix0.cardinality());
      
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      cRSMatrix0.each(matrixProcedure0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      // Undeclared exception!
      try { 
        CRSMatrix.random(8, 8, 0.0, (Random) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.fromCSV("");
      assertNotNull(cRSMatrix0);
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0, cRSMatrix0.rows());
      
      String string0 = cRSMatrix0.toMatrixMarket();
      assertNotNull(string0);
      assertEquals("%%MatrixMarket matrix coordinate real general row-major\n0 0 0\n", string0);
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0, cRSMatrix0.rows());
      
      double double0 = cRSMatrix0.min();
      assertEquals(0.0, double0, 0.01);
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0, cRSMatrix0.rows());
      
      cRSMatrix0.setAll(0.0);
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0, cRSMatrix0.rows());
      
      // Undeclared exception!
      try { 
        CRSMatrix.fromMatrixMarket("Cs2Lme??6ZD");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong input file format: can not read header '%%MatrixMarket'.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      int int0 = 13;
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 4;
      doubleArray0[1] = (double) 4;
      int[] intArray0 = new int[8];
      intArray0[0] = 13;
      intArray0[1] = 4;
      intArray0[2] = 4;
      intArray0[3] = 2;
      intArray0[4] = 4;
      intArray0[5] = 4;
      intArray0[7] = 13;
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(2, 2);
      //  // Unstable assertion: assertNotNull(cRSMatrix0);
      //  // Unstable assertion: assertEquals(2, cRSMatrix0.cardinality());
      //  // Unstable assertion: assertEquals(2, cRSMatrix0.columns());
      //  // Unstable assertion: assertEquals(0.0, cRSMatrix0.min(), 0.01);
      //  // Unstable assertion: assertTrue(cRSMatrix0.isRowMajor());
      //  // Unstable assertion: assertEquals(2, cRSMatrix0.rows());
      //  // Unstable assertion: assertEquals(0.5, cRSMatrix0.density(), 0.01);
      //  // Unstable assertion: assertEquals(2.0, cRSMatrix0.max(), 0.01);
      
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)4, 0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      cRSMatrix0.updateColumn(0, vectorFunction0);
      //  // Unstable assertion: assertEquals(3, cRSMatrix0.cardinality());
      //  // Unstable assertion: assertEquals(0.75, cRSMatrix0.density(), 0.01);
      //  // Unstable assertion: assertEquals(2, cRSMatrix0.columns());
      //  // Unstable assertion: assertEquals(0.0, cRSMatrix0.min(), 0.01);
      //  // Unstable assertion: assertTrue(cRSMatrix0.isRowMajor());
      //  // Unstable assertion: assertEquals(2, cRSMatrix0.rows());
      //  // Unstable assertion: assertEquals(4.0, cRSMatrix0.max(), 0.01);
      
      MockRandom mockRandom0 = new MockRandom();
      //  // Unstable assertion: assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        CRSMatrix.random(2901, 2901, (double) 4, (Random) mockRandom0);
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
         //
         // The density value should be between 0 and 1.0
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      int int0 = 3;
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      assertNotNull(cRSMatrix0);
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(0, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      
      int int1 = (-2258);
      // Undeclared exception!
      try { 
        cRSMatrix0.getRow(0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      // Undeclared exception!
      try { 
        CRSMatrix.fromMatrixMarket((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.StringTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(13, 13);
      assertNotNull(cRSMatrix0);
      assertEquals(13, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(13, cRSMatrix0.rows());
      
      // Undeclared exception!
      try { 
        CRSMatrix.block(cRSMatrix0, cRSMatrix0, cRSMatrix0, cRSMatrix0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '14' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      double[][] doubleArray0 = new double[3][7];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = 0.0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[9];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (double) 1608;
      doubleArray2[1] = (-832.677114128328);
      doubleArray2[2] = 0.0;
      doubleArray2[3] = 0.0;
      doubleArray2[4] = 0.0;
      doubleArray2[5] = 1217.09003;
      doubleArray2[6] = (double) 1608;
      doubleArray2[7] = (double) 1608;
      doubleArray2[8] = (double) 1608;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[6];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray3[0] = (-832.677114128328);
      doubleArray3[1] = (-832.677114128328);
      doubleArray3[2] = 1217.09003;
      doubleArray3[3] = (double) 1608;
      doubleArray3[4] = (double) 1608;
      doubleArray3[5] = (double) 1608;
      doubleArray0[2] = doubleArray3;
      CRSMatrix cRSMatrix0 = CRSMatrix.from2DArray(doubleArray0);
      assertNotNull(cRSMatrix0);
      assertEquals(1, cRSMatrix0.columns());
      assertEquals(1608.0, cRSMatrix0.max(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(3, cRSMatrix0.rows());
      assertEquals(2, cRSMatrix0.cardinality());
      assertEquals(0.6666666666666666, cRSMatrix0.density(), 0.01);
      assertEquals((-832.677114128328), cRSMatrix0.min(), 0.01);
      assertEquals(3, doubleArray0.length);
      
      double double0 = cRSMatrix0.min();
      assertEquals((-832.677114128328), double0, 0.01);
      assertEquals(1, cRSMatrix0.columns());
      assertEquals(1608.0, cRSMatrix0.max(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(3, cRSMatrix0.rows());
      assertEquals(2, cRSMatrix0.cardinality());
      assertEquals(0.6666666666666666, cRSMatrix0.density(), 0.01);
      assertEquals((-832.677114128328), cRSMatrix0.min(), 0.01);
      assertEquals(3, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(669, 0.0);
      assertNotNull(cRSMatrix0);
      assertEquals(669, cRSMatrix0.columns());
      assertEquals(0.0014947683109118087, cRSMatrix0.density(), 0.01);
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(669, cRSMatrix0.rows());
      assertEquals(669, cRSMatrix0.cardinality());
      assertTrue(cRSMatrix0.isRowMajor());
      
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      CRSMatrix cRSMatrix1 = (CRSMatrix)cRSMatrix0.transformRow(8, vectorFunction0);
      assertNotNull(cRSMatrix1);
      assertNotSame(cRSMatrix0, cRSMatrix1);
      assertNotSame(cRSMatrix1, cRSMatrix0);
      assertEquals(669, cRSMatrix0.columns());
      assertEquals(0.0014947683109118087, cRSMatrix0.density(), 0.01);
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(669, cRSMatrix0.rows());
      assertEquals(669, cRSMatrix0.cardinality());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix1.max(), 0.01);
      assertEquals(668, cRSMatrix1.cardinality());
      assertEquals(0.0014925339786085025, cRSMatrix1.density(), 0.01);
      assertEquals(0.0, cRSMatrix1.min(), 0.01);
      assertTrue(cRSMatrix1.isRowMajor());
      assertEquals(669, cRSMatrix1.columns());
      assertEquals(669, cRSMatrix1.rows());
      
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.eachNonZeroInColumn(669, vectorProcedure0);
      assertNotSame(cRSMatrix0, cRSMatrix1);
      assertEquals(669, cRSMatrix0.columns());
      assertEquals(0.0014947683109118087, cRSMatrix0.density(), 0.01);
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(669, cRSMatrix0.rows());
      assertEquals(669, cRSMatrix0.cardinality());
      assertTrue(cRSMatrix0.isRowMajor());
      
      int int0 = 1;
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(matrixPredicate0).test(anyInt() , anyInt());
      doReturn(true, false).when(matrixPredicate0).test(anyInt() , anyInt() , anyDouble());
      cRSMatrix0.non(matrixPredicate0);
      int int1 = 0;
      cRSMatrix0.nonZeroAt(int0, int1);
      cRSMatrix0.min();
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.fromCSV("");
      assertNotNull(cRSMatrix0);
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0, cRSMatrix0.rows());
      
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.updateColumn((-922), vectorFunction0);
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0, cRSMatrix0.rows());
      
      // Undeclared exception!
      try { 
        cRSMatrix0.blankOfShape((-922), 3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: -922x3
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix(1991, 1991);
      assertNotNull(cRSMatrix0);
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(1991, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertEquals(1991, cRSMatrix0.rows());
      
      CompressedVector compressedVector0 = (CompressedVector)cRSMatrix0.getRow(1);
      assertNotNull(compressedVector0);
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(1991, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertEquals(1991, cRSMatrix0.rows());
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(1991, compressedVector0.length());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      
      org.evosuite.runtime.Random.setNextRandom(1991);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      double[][] doubleArray0 = new double[8][2];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = 1285.0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[8];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[1] = 2867.33;
      doubleArray2[2] = 1285.0;
      doubleArray2[3] = 1285.0;
      doubleArray2[4] = 1285.0;
      doubleArray2[5] = 1285.0;
      doubleArray2[6] = 1285.0;
      doubleArray2[7] = 1285.0;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[6];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[0] = 1285.0;
      doubleArray3[1] = 933.199607299586;
      doubleArray3[2] = 1285.0;
      doubleArray3[3] = 2867.33;
      doubleArray3[4] = 2867.33;
      doubleArray3[5] = 2867.33;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[5];
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      
      doubleArray4[0] = 1285.0;
      doubleArray4[1] = 2867.33;
      doubleArray4[2] = 0.0;
      doubleArray4[3] = 2867.33;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[1];
      assertFalse(doubleArray5.equals((Object)doubleArray1));
      assertFalse(doubleArray5.equals((Object)doubleArray2));
      assertFalse(doubleArray5.equals((Object)doubleArray3));
      assertFalse(doubleArray5.equals((Object)doubleArray4));
      
      doubleArray5[0] = 2867.33;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[7];
      assertFalse(doubleArray6.equals((Object)doubleArray2));
      assertFalse(doubleArray6.equals((Object)doubleArray3));
      assertFalse(doubleArray6.equals((Object)doubleArray4));
      assertFalse(doubleArray6.equals((Object)doubleArray1));
      assertFalse(doubleArray6.equals((Object)doubleArray5));
      
      doubleArray6[0] = 1285.0;
      doubleArray6[1] = 1285.0;
      doubleArray6[2] = 1323.981368065;
      doubleArray6[3] = 1323.981368065;
      doubleArray6[4] = 1158.883;
      doubleArray6[5] = 1285.0;
      doubleArray6[6] = 933.199607299586;
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[4];
      assertFalse(doubleArray7.equals((Object)doubleArray4));
      assertFalse(doubleArray7.equals((Object)doubleArray6));
      assertFalse(doubleArray7.equals((Object)doubleArray3));
      assertFalse(doubleArray7.equals((Object)doubleArray5));
      assertFalse(doubleArray7.equals((Object)doubleArray1));
      assertFalse(doubleArray7.equals((Object)doubleArray2));
      
      doubleArray7[0] = 1285.0;
      doubleArray7[1] = 1285.0;
      doubleArray7[2] = 1.0;
      doubleArray7[3] = 1158.883;
      doubleArray0[6] = doubleArray7;
      double[] doubleArray8 = new double[7];
      assertFalse(doubleArray8.equals((Object)doubleArray7));
      assertFalse(doubleArray8.equals((Object)doubleArray5));
      assertFalse(doubleArray8.equals((Object)doubleArray3));
      assertFalse(doubleArray8.equals((Object)doubleArray4));
      assertFalse(doubleArray8.equals((Object)doubleArray1));
      assertFalse(doubleArray8.equals((Object)doubleArray6));
      assertFalse(doubleArray8.equals((Object)doubleArray2));
      
      doubleArray8[0] = 1158.883;
      doubleArray8[1] = 1.0;
      doubleArray8[2] = 1.0;
      doubleArray8[3] = 1285.0;
      doubleArray8[4] = 1323.981368065;
      doubleArray8[5] = 1.0;
      doubleArray8[6] = 933.199607299586;
      doubleArray0[7] = doubleArray8;
      CRSMatrix cRSMatrix0 = CRSMatrix.from2DArray(doubleArray0);
      assertNotNull(cRSMatrix0);
      assertEquals(2867.33, cRSMatrix0.max(), 0.01);
      assertEquals(7, cRSMatrix0.cardinality());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(8, cRSMatrix0.rows());
      assertEquals(0.875, cRSMatrix0.density(), 0.01);
      assertEquals(1, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(8, doubleArray0.length);
      
      CompressedVector compressedVector0 = (CompressedVector)cRSMatrix0.getColumn((-3680));
      assertNotNull(compressedVector0);
      assertEquals(2867.33, cRSMatrix0.max(), 0.01);
      assertEquals(7, cRSMatrix0.cardinality());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(8, cRSMatrix0.rows());
      assertEquals(0.875, cRSMatrix0.density(), 0.01);
      assertEquals(1, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(8, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(8, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      int int0 = 1631;
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(1631);
      assertNotNull(cRSMatrix0);
      assertEquals(1631, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(1631, cRSMatrix0.rows());
      assertEquals(1.0, cRSMatrix0.max(), 0.01);
      assertEquals(6.131207847946045E-4, cRSMatrix0.density(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(1631, cRSMatrix0.cardinality());
      
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(vectorAccumulator0).accumulate();
      double[] doubleArray0 = cRSMatrix0.foldNonZeroInRows(vectorAccumulator0);
      assertNotNull(doubleArray0);
      assertEquals(1631, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(1631, cRSMatrix0.rows());
      assertEquals(1.0, cRSMatrix0.max(), 0.01);
      assertEquals(6.131207847946045E-4, cRSMatrix0.density(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(1631, cRSMatrix0.cardinality());
      assertEquals(1631, doubleArray0.length);
      
      MatrixIterator matrixIterator0 = cRSMatrix0.iterator();
      assertNotNull(matrixIterator0);
      assertEquals(1631, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(1631, cRSMatrix0.rows());
      assertEquals(1.0, cRSMatrix0.max(), 0.01);
      assertEquals(6.131207847946045E-4, cRSMatrix0.density(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(1631, cRSMatrix0.cardinality());
      
      int int1 = 2;
      VectorAccumulator vectorAccumulator1 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(Double.POSITIVE_INFINITY).when(vectorAccumulator1).accumulate();
      double double0 = cRSMatrix0.foldRow(1626, vectorAccumulator1);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
      assertEquals(1631, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(1631, cRSMatrix0.rows());
      assertEquals(1.0, cRSMatrix0.max(), 0.01);
      assertEquals(6.131207847946045E-4, cRSMatrix0.density(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(1631, cRSMatrix0.cardinality());
      
      // Undeclared exception!
      try { 
        SparseMatrix.zero(1631, 1631, (-1985));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cardinality should be positive: -1985.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(1631);
      assertNotNull(cRSMatrix0);
      assertEquals(1.0, cRSMatrix0.max(), 0.01);
      assertEquals(1631, cRSMatrix0.columns());
      assertEquals(6.131207847946045E-4, cRSMatrix0.density(), 0.01);
      assertEquals(1631, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(1631, cRSMatrix0.cardinality());
      assertTrue(cRSMatrix0.isRowMajor());
      
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      int int0 = 2;
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      cRSMatrix0.updateColumn(2, vectorFunction0);
      assertEquals(1.0, cRSMatrix0.max(), 0.01);
      assertEquals(1631, cRSMatrix0.columns());
      assertEquals(1631, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(1630, cRSMatrix0.cardinality());
      assertEquals(6.127448676978574E-4, cRSMatrix0.density(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        CRSMatrix.random(2901, 4, (double) 1631, (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The density value should be between 0 and 1.0
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      assertNotNull(cRSMatrix0);
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.rows());
      assertEquals(0, cRSMatrix0.cardinality());
      assertTrue(cRSMatrix0.isRowMajor());
      
      Locale locale0 = Locale.FRENCH;
      assertNotNull(locale0);
      assertEquals("", locale0.getCountry());
      assertEquals("fr", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fra", locale0.getISO3Language());
      
      DecimalFormat decimalFormat0 = (DecimalFormat)NumberFormat.getNumberInstance(locale0);
      assertNotNull(decimalFormat0);
      assertEquals("", locale0.getCountry());
      assertEquals("fr", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fra", locale0.getISO3Language());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertEquals(3, decimalFormat0.getMaximumFractionDigits());
      assertTrue(decimalFormat0.isGroupingUsed());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertEquals("", decimalFormat0.getPositivePrefix());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertEquals("#\u00A0##0,###", decimalFormat0.toLocalizedPattern());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertEquals("#,##0.###", decimalFormat0.toPattern());
      
      String string0 = cRSMatrix0.toMatrixMarket((NumberFormat) decimalFormat0);
      assertNotNull(string0);
      assertEquals("%%MatrixMarket matrix coordinate real general row-major\n0 0 0\n", string0);
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.rows());
      assertEquals(0, cRSMatrix0.cardinality());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals("", locale0.getCountry());
      assertEquals("fr", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fra", locale0.getISO3Language());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertEquals(3, decimalFormat0.getMaximumFractionDigits());
      assertTrue(decimalFormat0.isGroupingUsed());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertEquals("", decimalFormat0.getPositivePrefix());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertEquals("#\u00A0##0,###", decimalFormat0.toLocalizedPattern());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertEquals("#,##0.###", decimalFormat0.toPattern());
      
      CRSMatrix cRSMatrix1 = CRSMatrix.diagonal(0, 8.0);
      assertNotNull(cRSMatrix1);
      assertNotSame(cRSMatrix1, cRSMatrix0);
      assertTrue(cRSMatrix1.equals((Object)cRSMatrix0));
      assertEquals(0.0, cRSMatrix1.min(), 0.01);
      assertEquals(0, cRSMatrix1.cardinality());
      assertTrue(cRSMatrix1.isRowMajor());
      assertEquals(0.0, cRSMatrix1.max(), 0.01);
      assertEquals(Double.NaN, cRSMatrix1.density(), 0.01);
      assertEquals(0, cRSMatrix1.columns());
      assertEquals(0, cRSMatrix1.rows());
      
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      cRSMatrix1.updateColumn(110, vectorFunction0);
      assertNotSame(cRSMatrix1, cRSMatrix0);
      assertTrue(cRSMatrix1.equals((Object)cRSMatrix0));
      assertEquals(0.0, cRSMatrix1.min(), 0.01);
      assertEquals(0, cRSMatrix1.cardinality());
      assertTrue(cRSMatrix1.isRowMajor());
      assertEquals(0.0, cRSMatrix1.max(), 0.01);
      assertEquals(Double.NaN, cRSMatrix1.density(), 0.01);
      assertEquals(0, cRSMatrix1.columns());
      assertEquals(0, cRSMatrix1.rows());
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        CRSMatrix.random(0, 0, (-4359.54434952), (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The density value should be between 0 and 1.0
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      int int0 = 13;
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 4;
      doubleArray0[1] = (double) 4;
      int[] intArray0 = new int[8];
      intArray0[0] = 13;
      intArray0[1] = 4;
      intArray0[2] = 4;
      intArray0[3] = 2;
      intArray0[4] = 4;
      intArray0[5] = 4;
      intArray0[7] = 13;
      CRSMatrix cRSMatrix0 = new CRSMatrix(4, 2, 4, doubleArray0, intArray0, intArray0);
      assertNotNull(cRSMatrix0);
      assertArrayEquals(new double[] {4.0, 4.0}, doubleArray0, 0.01);
      assertArrayEquals(new int[] {13, 4, 4, 2, 4, 4, 0, 13}, intArray0);
      assertEquals(2, cRSMatrix0.columns());
      assertEquals(4, cRSMatrix0.cardinality());
      assertEquals(4, cRSMatrix0.rows());
      assertEquals(0.5, cRSMatrix0.density(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(2, doubleArray0.length);
      assertEquals(8, intArray0.length);
      
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)4).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      // Undeclared exception!
      try { 
        cRSMatrix0.updateColumn(0, vectorFunction0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(40, 40);
      assertNotNull(cRSMatrix0);
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertEquals(40, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(40, cRSMatrix0.columns());
      
      double double0 = cRSMatrix0.max();
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertEquals(40, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(40, cRSMatrix0.columns());
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix(26, 26);
      assertNotNull(cRSMatrix0);
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(26, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(26, cRSMatrix0.rows());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      
      // Undeclared exception!
      try { 
        cRSMatrix0.updateAt(26, 26, (MatrixFunction) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      int int0 = 0;
      // Undeclared exception!
      try { 
        CRSMatrix.zero(9, 0, 9);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cardinality should be less then or equal to capacity: 0.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom((-574));
      assertNotNull(mockRandom0);
      
      int int0 = mockRandom0.nextInt();
      assertEquals(0, int0);
      
      // Undeclared exception!
      try { 
        CRSMatrix.randomSymmetric((-574), (-2293.7406456), (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: -574x-574
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      DoubleStream doubleStream0 = mockRandom0.doubles();
      assertNotNull(doubleStream0);
      
      CRSMatrix cRSMatrix0 = CRSMatrix.randomSymmetric(0, (double) 0, (Random) mockRandom0);
      assertNotNull(cRSMatrix0);
      assertEquals(0, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0, cRSMatrix0.columns());
      assertTrue(cRSMatrix0.isRowMajor());
      
      CRSMatrix cRSMatrix1 = CRSMatrix.zero(0, 0, 0);
      assertNotNull(cRSMatrix1);
      assertNotSame(cRSMatrix1, cRSMatrix0);
      assertTrue(cRSMatrix1.equals((Object)cRSMatrix0));
      assertTrue(cRSMatrix1.isRowMajor());
      assertEquals(0.0, cRSMatrix1.min(), 0.01);
      assertEquals(0, cRSMatrix1.rows());
      assertEquals(0.0, cRSMatrix1.max(), 0.01);
      assertEquals(Double.NaN, cRSMatrix1.density(), 0.01);
      assertEquals(0, cRSMatrix1.cardinality());
      assertEquals(0, cRSMatrix1.columns());
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      assertNotNull(ooPlaceMatricesMultiplication0);
      
      double[][] doubleArray0 = new double[1][3];
      double[] doubleArray1 = new double[1];
      doubleArray0[0] = doubleArray1;
      DenseMatrix denseMatrix0 = DenseMatrix.from2DArray(doubleArray0);
      assertNotNull(denseMatrix0);
      assertEquals(1, denseMatrix0.columns());
      assertEquals(1, denseMatrix0.rows());
      assertEquals(1, doubleArray0.length);
      
      CRSMatrix cRSMatrix0 = CRSMatrix.block(denseMatrix0, denseMatrix0, denseMatrix0, denseMatrix0);
      assertNotNull(cRSMatrix0);
      assertEquals(1, denseMatrix0.columns());
      assertEquals(1, denseMatrix0.rows());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertEquals(2, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(2, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(1, doubleArray0.length);
      
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.eachNonZero(matrixProcedure0);
      assertEquals(1, denseMatrix0.columns());
      assertEquals(1, denseMatrix0.rows());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertEquals(2, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(2, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(1, doubleArray0.length);
      
      double double0 = cRSMatrix0.min();
      assertEquals(0.0, double0, 0.01);
      assertEquals(1, denseMatrix0.columns());
      assertEquals(1, denseMatrix0.rows());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertEquals(2, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(2, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(1, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix(3039, 3039);
      assertNotNull(cRSMatrix0);
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(3039, cRSMatrix0.rows());
      assertEquals(3039, cRSMatrix0.columns());
      assertEquals(0, cRSMatrix0.cardinality());
      
      double double0 = cRSMatrix0.maxInRow(1);
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(3039, cRSMatrix0.rows());
      assertEquals(3039, cRSMatrix0.columns());
      assertEquals(0, cRSMatrix0.cardinality());
      
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.eachNonZeroInRow(6, vectorProcedure0);
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(3039, cRSMatrix0.rows());
      assertEquals(3039, cRSMatrix0.columns());
      assertEquals(0, cRSMatrix0.cardinality());
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      int int0 = 1449;
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(1449, 1449);
      assertNotNull(cRSMatrix0);
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(1449, cRSMatrix0.columns());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(1449, cRSMatrix0.rows());
      assertEquals(1449.0, cRSMatrix0.max(), 0.01);
      assertEquals(1449, cRSMatrix0.cardinality());
      assertEquals(6.901311249137336E-4, cRSMatrix0.density(), 0.01);
      
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        cRSMatrix0.transformRow(1449, vectorFunction0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1450
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix$5", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(2, 2, 0);
      assertNotNull(cRSMatrix0);
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(2, cRSMatrix0.rows());
      assertEquals(2, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      
      cRSMatrix0.setAll(0);
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(2, cRSMatrix0.rows());
      assertEquals(2, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix(13, 13);
      assertNotNull(cRSMatrix0);
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(13, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(13, cRSMatrix0.rows());
      
      CRSMatrix cRSMatrix1 = (CRSMatrix)cRSMatrix0.power(9);
      assertNotNull(cRSMatrix1);
      assertNotSame(cRSMatrix0, cRSMatrix1);
      assertNotSame(cRSMatrix1, cRSMatrix0);
      assertTrue(cRSMatrix1.equals((Object)cRSMatrix0));
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(13, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(13, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix1.density(), 0.01);
      assertEquals(0, cRSMatrix1.cardinality());
      assertEquals(13, cRSMatrix1.rows());
      assertEquals(13, cRSMatrix1.columns());
      assertEquals(0.0, cRSMatrix1.max(), 0.01);
      assertTrue(cRSMatrix1.isRowMajor());
      assertEquals(0.0, cRSMatrix1.min(), 0.01);
      
      double double0 = cRSMatrix0.sum();
      assertNotSame(cRSMatrix0, cRSMatrix1);
      assertEquals(0.0, double0, 0.01);
      assertTrue(cRSMatrix0.equals((Object)cRSMatrix1));
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(13, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(13, cRSMatrix0.rows());
      
      CRSMatrix cRSMatrix2 = CRSMatrix.fromCSV("");
      assertNotNull(cRSMatrix2);
      assertNotSame(cRSMatrix2, cRSMatrix0);
      assertNotSame(cRSMatrix2, cRSMatrix1);
      assertFalse(cRSMatrix2.equals((Object)cRSMatrix0));
      assertFalse(cRSMatrix2.equals((Object)cRSMatrix1));
      assertEquals(0, cRSMatrix2.columns());
      assertEquals(0.0, cRSMatrix2.max(), 0.01);
      assertEquals(Double.NaN, cRSMatrix2.density(), 0.01);
      assertEquals(0, cRSMatrix2.cardinality());
      assertEquals(0.0, cRSMatrix2.min(), 0.01);
      assertEquals(0, cRSMatrix2.rows());
      assertTrue(cRSMatrix2.isRowMajor());
      
      CompressedVector compressedVector0 = (CompressedVector)cRSMatrix0.getColumn(13);
      assertNotNull(compressedVector0);
      assertNotSame(cRSMatrix0, cRSMatrix2);
      assertNotSame(cRSMatrix0, cRSMatrix1);
      assertTrue(cRSMatrix0.equals((Object)cRSMatrix1));
      assertFalse(cRSMatrix0.equals((Object)cRSMatrix2));
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(13, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(13, cRSMatrix0.rows());
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(13, compressedVector0.length());
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      int int0 = 1631;
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(1631);
      assertNotNull(cRSMatrix0);
      assertEquals(1.0, cRSMatrix0.max(), 0.01);
      assertEquals(1631, cRSMatrix0.rows());
      assertEquals(1631, cRSMatrix0.cardinality());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(1631, cRSMatrix0.columns());
      assertEquals(6.131207847946045E-4, cRSMatrix0.density(), 0.01);
      
      MatrixIterator matrixIterator0 = cRSMatrix0.iterator();
      assertNotNull(matrixIterator0);
      assertEquals(1.0, cRSMatrix0.max(), 0.01);
      assertEquals(1631, cRSMatrix0.rows());
      assertEquals(1631, cRSMatrix0.cardinality());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(1631, cRSMatrix0.columns());
      assertEquals(6.131207847946045E-4, cRSMatrix0.density(), 0.01);
      
      int int1 = 2;
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorAccumulator0).accumulate();
      double double0 = cRSMatrix0.foldRow(1626, vectorAccumulator0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(1.0, cRSMatrix0.max(), 0.01);
      assertEquals(1631, cRSMatrix0.rows());
      assertEquals(1631, cRSMatrix0.cardinality());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(1631, cRSMatrix0.columns());
      assertEquals(6.131207847946045E-4, cRSMatrix0.density(), 0.01);
      
      // Undeclared exception!
      try { 
        SparseMatrix.zero(1631, 1631, (-1985));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cardinality should be positive: -1985.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix(0, 0);
      assertNotNull(cRSMatrix0);
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(0, cRSMatrix0.rows());
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      
      VectorIterator vectorIterator0 = cRSMatrix0.iteratorOfRow(0);
      assertNotNull(vectorIterator0);
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(0, cRSMatrix0.rows());
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      
      MatrixFactory<Matrix> matrixFactory0 = (MatrixFactory<Matrix>) mock(MatrixFactory.class, new ViolatedAssumptionAnswer());
      doReturn(cRSMatrix0).when(matrixFactory0).apply(anyInt() , anyInt());
      CRSMatrix cRSMatrix1 = (CRSMatrix)cRSMatrix0.to(matrixFactory0);
      assertNotNull(cRSMatrix1);
      assertSame(cRSMatrix0, cRSMatrix1);
      assertSame(cRSMatrix1, cRSMatrix0);
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(0, cRSMatrix0.rows());
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix1.max(), 0.01);
      assertEquals(Double.NaN, cRSMatrix1.density(), 0.01);
      assertEquals(0, cRSMatrix1.columns());
      assertEquals(0.0, cRSMatrix1.min(), 0.01);
      assertEquals(0, cRSMatrix1.rows());
      assertEquals(0, cRSMatrix1.cardinality());
      assertTrue(cRSMatrix1.isRowMajor());
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 0;
      CRSMatrix cRSMatrix2 = CRSMatrix.from1DArray(10, 0, doubleArray0);
      assertNotNull(cRSMatrix2);
      assertNotSame(cRSMatrix2, cRSMatrix1);
      assertNotSame(cRSMatrix2, cRSMatrix0);
      assertFalse(cRSMatrix2.equals((Object)cRSMatrix1));
      assertFalse(cRSMatrix2.equals((Object)cRSMatrix0));
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(10, cRSMatrix2.rows());
      assertEquals(0.0, cRSMatrix2.max(), 0.01);
      assertTrue(cRSMatrix2.isRowMajor());
      assertEquals(0, cRSMatrix2.cardinality());
      assertEquals(Double.NaN, cRSMatrix2.density(), 0.01);
      assertEquals(0, cRSMatrix2.columns());
      assertEquals(0.0, cRSMatrix2.min(), 0.01);
      assertEquals(1, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        CRSMatrix.block((Matrix) null, cRSMatrix2, cRSMatrix2, cRSMatrix0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(669, 0.0);
      assertNotNull(cRSMatrix0);
      assertEquals(669, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(669, cRSMatrix0.cardinality());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(0.0014947683109118087, cRSMatrix0.density(), 0.01);
      assertEquals(669, cRSMatrix0.rows());
      
      byte[] byteArray0 = cRSMatrix0.toBinary();
      assertNotNull(byteArray0);
      assertEquals(669, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(669, cRSMatrix0.cardinality());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(0.0014947683109118087, cRSMatrix0.density(), 0.01);
      assertEquals(669, cRSMatrix0.rows());
      assertEquals(10721, byteArray0.length);
      
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.eachNonZeroInColumn(669, vectorProcedure0);
      assertEquals(669, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(669, cRSMatrix0.cardinality());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(0.0014947683109118087, cRSMatrix0.density(), 0.01);
      assertEquals(669, cRSMatrix0.rows());
      
      CRSMatrix cRSMatrix1 = CRSMatrix.zero(669, 1924);
      assertNotNull(cRSMatrix1);
      assertNotSame(cRSMatrix1, cRSMatrix0);
      assertFalse(cRSMatrix1.equals((Object)cRSMatrix0));
      assertEquals(1924, cRSMatrix1.columns());
      assertEquals(0.0, cRSMatrix1.max(), 0.01);
      assertEquals(669, cRSMatrix1.rows());
      assertTrue(cRSMatrix1.isRowMajor());
      assertEquals(0, cRSMatrix1.cardinality());
      assertEquals(0.0, cRSMatrix1.density(), 0.01);
      assertEquals(0.0, cRSMatrix1.min(), 0.01);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      int int0 = 359;
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(359, 359);
      assertNotNull(cRSMatrix0);
      assertEquals(359, cRSMatrix0.columns());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(359, cRSMatrix0.rows());
      assertEquals(0.002785515320334262, cRSMatrix0.density(), 0.01);
      assertEquals(359, cRSMatrix0.cardinality());
      assertEquals(359.0, cRSMatrix0.max(), 0.01);
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      
      RowMajorMatrixIterator rowMajorMatrixIterator0 = cRSMatrix0.rowMajorIterator();
      assertNotNull(rowMajorMatrixIterator0);
      assertEquals(359, cRSMatrix0.columns());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(359, cRSMatrix0.rows());
      assertEquals(0.002785515320334262, cRSMatrix0.density(), 0.01);
      assertEquals(359, cRSMatrix0.cardinality());
      assertEquals(359.0, cRSMatrix0.max(), 0.01);
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      
      int[] intArray0 = null;
      // Undeclared exception!
      try { 
        cRSMatrix0.select((int[]) null, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix(26, 26);
      assertNotNull(cRSMatrix0);
      assertEquals(26, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertEquals(26, cRSMatrix0.columns());
      
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        cRSMatrix0.updateAt(26, 10, matrixFunction0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      String string0 = "@*z!J";
      // Undeclared exception!
      try { 
        CRSMatrix.fromMatrixMarket("@*z!J");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong input file format: can not read header '%%MatrixMarket'.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      int int0 = 37;
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(37);
      assertNotNull(cRSMatrix0);
      assertEquals(1.0, cRSMatrix0.max(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(37, cRSMatrix0.rows());
      assertEquals(37, cRSMatrix0.columns());
      assertEquals(37, cRSMatrix0.cardinality());
      assertEquals(0.02702702702702703, cRSMatrix0.density(), 0.01);
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      
      CRSMatrix cRSMatrix1 = (CRSMatrix)cRSMatrix0.blank();
      assertNotNull(cRSMatrix1);
      assertNotSame(cRSMatrix0, cRSMatrix1);
      assertNotSame(cRSMatrix1, cRSMatrix0);
      assertFalse(cRSMatrix1.equals((Object)cRSMatrix0));
      assertEquals(1.0, cRSMatrix0.max(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(37, cRSMatrix0.rows());
      assertEquals(37, cRSMatrix0.columns());
      assertEquals(37, cRSMatrix0.cardinality());
      assertEquals(0.02702702702702703, cRSMatrix0.density(), 0.01);
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0.0, cRSMatrix1.max(), 0.01);
      assertEquals(0, cRSMatrix1.cardinality());
      assertEquals(0.0, cRSMatrix1.density(), 0.01);
      assertEquals(0.0, cRSMatrix1.min(), 0.01);
      assertEquals(37, cRSMatrix1.rows());
      assertTrue(cRSMatrix1.isRowMajor());
      assertEquals(37, cRSMatrix1.columns());
      
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        cRSMatrix1.foldColumn(37, vectorAccumulator0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '37' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      assertNotNull(cRSMatrix0);
      assertEquals(0, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      
      double double0 = cRSMatrix0.max();
      assertEquals(0.0, double0, 0.01);
      assertEquals(0, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        cRSMatrix0.eachNonZeroInRow((-1524), vectorProcedure0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      assertNotNull(cRSMatrix0);
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0, cRSMatrix0.rows());
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      
      MatrixIterator matrixIterator0 = cRSMatrix0.iterator();
      assertNotNull(matrixIterator0);
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0, cRSMatrix0.rows());
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      
      InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new InPlaceCopyMatrixToMatrix();
      assertNotNull(inPlaceCopyMatrixToMatrix0);
      
      SparseMatrix sparseMatrix0 = SparseMatrix.fromCSV("");
      assertNotNull(sparseMatrix0);
      assertNotSame(sparseMatrix0, cRSMatrix0);
      assertTrue(sparseMatrix0.equals((Object)cRSMatrix0));
      assertEquals(0.0, sparseMatrix0.max(), 0.01);
      assertEquals(Double.NaN, sparseMatrix0.density(), 0.01);
      assertEquals(0, sparseMatrix0.rows());
      assertEquals(0, sparseMatrix0.cardinality());
      assertEquals(0.0, sparseMatrix0.min(), 0.01);
      assertEquals(0, sparseMatrix0.columns());
      assertTrue(sparseMatrix0.isRowMajor());
      
      CRSMatrix cRSMatrix1 = (CRSMatrix)inPlaceCopyMatrixToMatrix0.applySimple(sparseMatrix0, sparseMatrix0);
      assertNotNull(cRSMatrix1);
      assertNotSame(sparseMatrix0, cRSMatrix0);
      assertSame(sparseMatrix0, cRSMatrix1);
      assertNotSame(cRSMatrix1, cRSMatrix0);
      assertSame(cRSMatrix1, sparseMatrix0);
      assertTrue(sparseMatrix0.equals((Object)cRSMatrix0));
      assertTrue(cRSMatrix1.equals((Object)cRSMatrix0));
      assertEquals(0.0, sparseMatrix0.max(), 0.01);
      assertEquals(Double.NaN, sparseMatrix0.density(), 0.01);
      assertEquals(0, sparseMatrix0.rows());
      assertEquals(0, sparseMatrix0.cardinality());
      assertEquals(0.0, sparseMatrix0.min(), 0.01);
      assertEquals(0, sparseMatrix0.columns());
      assertTrue(sparseMatrix0.isRowMajor());
      assertEquals(0, cRSMatrix1.columns());
      assertEquals(Double.NaN, cRSMatrix1.density(), 0.01);
      assertEquals(0.0, cRSMatrix1.max(), 0.01);
      assertTrue(cRSMatrix1.isRowMajor());
      assertEquals(0.0, cRSMatrix1.min(), 0.01);
      assertEquals(0, cRSMatrix1.cardinality());
      assertEquals(0, cRSMatrix1.rows());
      
      int int0 = 0;
      CRSMatrix cRSMatrix2 = (CRSMatrix)cRSMatrix0.insert((Matrix) cRSMatrix1, 0, 0, 0, 0);
      assertNotNull(cRSMatrix2);
      assertNotSame(cRSMatrix0, sparseMatrix0);
      assertNotSame(cRSMatrix0, cRSMatrix2);
      assertNotSame(cRSMatrix0, cRSMatrix1);
      assertNotSame(sparseMatrix0, cRSMatrix2);
      assertNotSame(sparseMatrix0, cRSMatrix0);
      assertSame(sparseMatrix0, cRSMatrix1);
      assertNotSame(cRSMatrix1, cRSMatrix0);
      assertSame(cRSMatrix1, sparseMatrix0);
      assertNotSame(cRSMatrix1, cRSMatrix2);
      assertNotSame(cRSMatrix2, sparseMatrix0);
      assertNotSame(cRSMatrix2, cRSMatrix0);
      assertNotSame(cRSMatrix2, cRSMatrix1);
      assertTrue(cRSMatrix0.equals((Object)cRSMatrix1));
      assertTrue(cRSMatrix0.equals((Object)sparseMatrix0));
      assertTrue(sparseMatrix0.equals((Object)cRSMatrix0));
      assertTrue(cRSMatrix1.equals((Object)cRSMatrix0));
      assertTrue(cRSMatrix2.equals((Object)cRSMatrix1));
      assertTrue(cRSMatrix2.equals((Object)cRSMatrix0));
      assertTrue(cRSMatrix2.equals((Object)sparseMatrix0));
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0, cRSMatrix0.rows());
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(0.0, sparseMatrix0.max(), 0.01);
      assertEquals(Double.NaN, sparseMatrix0.density(), 0.01);
      assertEquals(0, sparseMatrix0.rows());
      assertEquals(0, sparseMatrix0.cardinality());
      assertEquals(0.0, sparseMatrix0.min(), 0.01);
      assertEquals(0, sparseMatrix0.columns());
      assertTrue(sparseMatrix0.isRowMajor());
      assertEquals(0, cRSMatrix1.columns());
      assertEquals(Double.NaN, cRSMatrix1.density(), 0.01);
      assertEquals(0.0, cRSMatrix1.max(), 0.01);
      assertTrue(cRSMatrix1.isRowMajor());
      assertEquals(0.0, cRSMatrix1.min(), 0.01);
      assertEquals(0, cRSMatrix1.cardinality());
      assertEquals(0, cRSMatrix1.rows());
      assertTrue(cRSMatrix2.isRowMajor());
      assertEquals(0, cRSMatrix2.cardinality());
      assertEquals(0.0, cRSMatrix2.max(), 0.01);
      assertEquals(0, cRSMatrix2.columns());
      assertEquals(Double.NaN, cRSMatrix2.density(), 0.01);
      assertEquals(0.0, cRSMatrix2.min(), 0.01);
      assertEquals(0, cRSMatrix2.rows());
      
      CRSMatrix cRSMatrix3 = CRSMatrix.block(cRSMatrix2, sparseMatrix0, cRSMatrix0, cRSMatrix0);
      assertNotNull(cRSMatrix3);
      assertNotSame(cRSMatrix0, sparseMatrix0);
      assertNotSame(cRSMatrix0, cRSMatrix2);
      assertNotSame(cRSMatrix0, cRSMatrix3);
      assertNotSame(cRSMatrix0, cRSMatrix1);
      assertNotSame(sparseMatrix0, cRSMatrix2);
      assertNotSame(sparseMatrix0, cRSMatrix0);
      assertNotSame(sparseMatrix0, cRSMatrix3);
      assertSame(sparseMatrix0, cRSMatrix1);
      assertNotSame(cRSMatrix1, cRSMatrix0);
      assertNotSame(cRSMatrix1, cRSMatrix3);
      assertSame(cRSMatrix1, sparseMatrix0);
      assertNotSame(cRSMatrix1, cRSMatrix2);
      assertNotSame(cRSMatrix2, sparseMatrix0);
      assertNotSame(cRSMatrix2, cRSMatrix0);
      assertNotSame(cRSMatrix2, cRSMatrix3);
      assertNotSame(cRSMatrix2, cRSMatrix1);
      assertNotSame(cRSMatrix3, cRSMatrix2);
      assertNotSame(cRSMatrix3, cRSMatrix0);
      assertNotSame(cRSMatrix3, cRSMatrix1);
      assertNotSame(cRSMatrix3, sparseMatrix0);
      assertTrue(cRSMatrix0.equals((Object)cRSMatrix1));
      assertTrue(cRSMatrix0.equals((Object)sparseMatrix0));
      assertTrue(cRSMatrix0.equals((Object)cRSMatrix2));
      assertTrue(sparseMatrix0.equals((Object)cRSMatrix2));
      assertTrue(sparseMatrix0.equals((Object)cRSMatrix0));
      assertTrue(cRSMatrix1.equals((Object)cRSMatrix2));
      assertTrue(cRSMatrix1.equals((Object)cRSMatrix0));
      assertTrue(cRSMatrix2.equals((Object)cRSMatrix1));
      assertTrue(cRSMatrix2.equals((Object)cRSMatrix0));
      assertTrue(cRSMatrix2.equals((Object)sparseMatrix0));
      assertTrue(cRSMatrix3.equals((Object)sparseMatrix0));
      assertTrue(cRSMatrix3.equals((Object)cRSMatrix2));
      assertTrue(cRSMatrix3.equals((Object)cRSMatrix0));
      assertTrue(cRSMatrix3.equals((Object)cRSMatrix1));
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0, cRSMatrix0.rows());
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(0.0, sparseMatrix0.max(), 0.01);
      assertEquals(Double.NaN, sparseMatrix0.density(), 0.01);
      assertEquals(0, sparseMatrix0.rows());
      assertEquals(0, sparseMatrix0.cardinality());
      assertEquals(0.0, sparseMatrix0.min(), 0.01);
      assertEquals(0, sparseMatrix0.columns());
      assertTrue(sparseMatrix0.isRowMajor());
      assertEquals(0, cRSMatrix1.columns());
      assertEquals(Double.NaN, cRSMatrix1.density(), 0.01);
      assertEquals(0.0, cRSMatrix1.max(), 0.01);
      assertTrue(cRSMatrix1.isRowMajor());
      assertEquals(0.0, cRSMatrix1.min(), 0.01);
      assertEquals(0, cRSMatrix1.cardinality());
      assertEquals(0, cRSMatrix1.rows());
      assertTrue(cRSMatrix2.isRowMajor());
      assertEquals(0, cRSMatrix2.cardinality());
      assertEquals(0.0, cRSMatrix2.max(), 0.01);
      assertEquals(0, cRSMatrix2.columns());
      assertEquals(Double.NaN, cRSMatrix2.density(), 0.01);
      assertEquals(0.0, cRSMatrix2.min(), 0.01);
      assertEquals(0, cRSMatrix2.rows());
      assertEquals(0.0, cRSMatrix3.max(), 0.01);
      assertEquals(Double.NaN, cRSMatrix3.density(), 0.01);
      assertEquals(0, cRSMatrix3.rows());
      assertEquals(0, cRSMatrix3.columns());
      assertEquals(0, cRSMatrix3.cardinality());
      assertTrue(cRSMatrix3.isRowMajor());
      assertEquals(0.0, cRSMatrix3.min(), 0.01);
      
      Basic2DMatrix basic2DMatrix0 = (Basic2DMatrix)cRSMatrix0.toDenseMatrix();
      assertNotNull(basic2DMatrix0);
      assertNotSame(cRSMatrix0, sparseMatrix0);
      assertNotSame(cRSMatrix0, cRSMatrix2);
      assertNotSame(cRSMatrix0, cRSMatrix3);
      assertNotSame(cRSMatrix0, cRSMatrix1);
      assertTrue(cRSMatrix0.equals((Object)cRSMatrix1));
      assertTrue(cRSMatrix0.equals((Object)cRSMatrix3));
      assertTrue(cRSMatrix0.equals((Object)sparseMatrix0));
      assertTrue(cRSMatrix0.equals((Object)cRSMatrix2));
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0, cRSMatrix0.rows());
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(0, basic2DMatrix0.rows());
      assertEquals(0, basic2DMatrix0.columns());
      
      int int1 = (-1164);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      cRSMatrix3.eachNonZeroInColumn((-1164), vectorProcedure0);
      assertNotSame(cRSMatrix0, sparseMatrix0);
      assertNotSame(cRSMatrix0, cRSMatrix2);
      assertNotSame(cRSMatrix0, cRSMatrix3);
      assertNotSame(cRSMatrix0, cRSMatrix1);
      assertNotSame(sparseMatrix0, cRSMatrix2);
      assertNotSame(sparseMatrix0, cRSMatrix0);
      assertNotSame(sparseMatrix0, cRSMatrix3);
      assertSame(sparseMatrix0, cRSMatrix1);
      assertNotSame(cRSMatrix1, cRSMatrix0);
      assertNotSame(cRSMatrix1, cRSMatrix3);
      assertSame(cRSMatrix1, sparseMatrix0);
      assertNotSame(cRSMatrix1, cRSMatrix2);
      assertNotSame(cRSMatrix2, sparseMatrix0);
      assertNotSame(cRSMatrix2, cRSMatrix0);
      assertNotSame(cRSMatrix2, cRSMatrix3);
      assertNotSame(cRSMatrix2, cRSMatrix1);
      assertNotSame(cRSMatrix3, cRSMatrix2);
      assertNotSame(cRSMatrix3, cRSMatrix0);
      assertNotSame(cRSMatrix3, cRSMatrix1);
      assertNotSame(cRSMatrix3, sparseMatrix0);
      assertTrue(cRSMatrix0.equals((Object)cRSMatrix1));
      assertTrue(cRSMatrix0.equals((Object)cRSMatrix3));
      assertTrue(cRSMatrix0.equals((Object)sparseMatrix0));
      assertTrue(cRSMatrix0.equals((Object)cRSMatrix2));
      assertTrue(sparseMatrix0.equals((Object)cRSMatrix3));
      assertTrue(sparseMatrix0.equals((Object)cRSMatrix2));
      assertTrue(sparseMatrix0.equals((Object)cRSMatrix0));
      assertTrue(cRSMatrix1.equals((Object)cRSMatrix2));
      assertTrue(cRSMatrix1.equals((Object)cRSMatrix3));
      assertTrue(cRSMatrix1.equals((Object)cRSMatrix0));
      assertTrue(cRSMatrix2.equals((Object)cRSMatrix1));
      assertTrue(cRSMatrix2.equals((Object)cRSMatrix0));
      assertTrue(cRSMatrix2.equals((Object)sparseMatrix0));
      assertTrue(cRSMatrix2.equals((Object)cRSMatrix3));
      assertTrue(cRSMatrix3.equals((Object)sparseMatrix0));
      assertTrue(cRSMatrix3.equals((Object)cRSMatrix2));
      assertTrue(cRSMatrix3.equals((Object)cRSMatrix0));
      assertTrue(cRSMatrix3.equals((Object)cRSMatrix1));
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0, cRSMatrix0.rows());
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(0.0, sparseMatrix0.max(), 0.01);
      assertEquals(Double.NaN, sparseMatrix0.density(), 0.01);
      assertEquals(0, sparseMatrix0.rows());
      assertEquals(0, sparseMatrix0.cardinality());
      assertEquals(0.0, sparseMatrix0.min(), 0.01);
      assertEquals(0, sparseMatrix0.columns());
      assertTrue(sparseMatrix0.isRowMajor());
      assertEquals(0, cRSMatrix1.columns());
      assertEquals(Double.NaN, cRSMatrix1.density(), 0.01);
      assertEquals(0.0, cRSMatrix1.max(), 0.01);
      assertTrue(cRSMatrix1.isRowMajor());
      assertEquals(0.0, cRSMatrix1.min(), 0.01);
      assertEquals(0, cRSMatrix1.cardinality());
      assertEquals(0, cRSMatrix1.rows());
      assertTrue(cRSMatrix2.isRowMajor());
      assertEquals(0, cRSMatrix2.cardinality());
      assertEquals(0.0, cRSMatrix2.max(), 0.01);
      assertEquals(0, cRSMatrix2.columns());
      assertEquals(Double.NaN, cRSMatrix2.density(), 0.01);
      assertEquals(0.0, cRSMatrix2.min(), 0.01);
      assertEquals(0, cRSMatrix2.rows());
      assertEquals(0.0, cRSMatrix3.max(), 0.01);
      assertEquals(Double.NaN, cRSMatrix3.density(), 0.01);
      assertEquals(0, cRSMatrix3.rows());
      assertEquals(0, cRSMatrix3.columns());
      assertEquals(0, cRSMatrix3.cardinality());
      assertTrue(cRSMatrix3.isRowMajor());
      assertEquals(0.0, cRSMatrix3.min(), 0.01);
      
      CRSMatrix cRSMatrix4 = (CRSMatrix)RowMajorSparseMatrix.block(cRSMatrix2, cRSMatrix1, cRSMatrix3, sparseMatrix0);
      assertNotNull(cRSMatrix4);
      assertNotSame(cRSMatrix0, sparseMatrix0);
      assertNotSame(cRSMatrix0, cRSMatrix4);
      assertNotSame(cRSMatrix0, cRSMatrix2);
      assertNotSame(cRSMatrix0, cRSMatrix3);
      assertNotSame(cRSMatrix0, cRSMatrix1);
      assertNotSame(sparseMatrix0, cRSMatrix2);
      assertNotSame(sparseMatrix0, cRSMatrix0);
      assertNotSame(sparseMatrix0, cRSMatrix3);
      assertSame(sparseMatrix0, cRSMatrix1);
      assertNotSame(sparseMatrix0, cRSMatrix4);
      assertNotSame(cRSMatrix1, cRSMatrix0);
      assertNotSame(cRSMatrix1, cRSMatrix4);
      assertNotSame(cRSMatrix1, cRSMatrix3);
      assertSame(cRSMatrix1, sparseMatrix0);
      assertNotSame(cRSMatrix1, cRSMatrix2);
      assertNotSame(cRSMatrix2, sparseMatrix0);
      assertNotSame(cRSMatrix2, cRSMatrix0);
      assertNotSame(cRSMatrix2, cRSMatrix4);
      assertNotSame(cRSMatrix2, cRSMatrix3);
      assertNotSame(cRSMatrix2, cRSMatrix1);
      assertNotSame(cRSMatrix3, cRSMatrix2);
      assertNotSame(cRSMatrix3, cRSMatrix4);
      assertNotSame(cRSMatrix3, cRSMatrix0);
      assertNotSame(cRSMatrix3, cRSMatrix1);
      assertNotSame(cRSMatrix3, sparseMatrix0);
      assertNotSame(cRSMatrix4, cRSMatrix1);
      assertNotSame(cRSMatrix4, cRSMatrix2);
      assertNotSame(cRSMatrix4, cRSMatrix0);
      assertNotSame(cRSMatrix4, cRSMatrix3);
      assertNotSame(cRSMatrix4, sparseMatrix0);
      assertTrue(cRSMatrix0.equals((Object)cRSMatrix1));
      assertTrue(cRSMatrix0.equals((Object)cRSMatrix3));
      assertTrue(cRSMatrix0.equals((Object)sparseMatrix0));
      assertTrue(cRSMatrix0.equals((Object)cRSMatrix2));
      assertTrue(sparseMatrix0.equals((Object)cRSMatrix3));
      assertTrue(sparseMatrix0.equals((Object)cRSMatrix2));
      assertTrue(sparseMatrix0.equals((Object)cRSMatrix0));
      assertTrue(cRSMatrix1.equals((Object)cRSMatrix2));
      assertTrue(cRSMatrix1.equals((Object)cRSMatrix3));
      assertTrue(cRSMatrix1.equals((Object)cRSMatrix0));
      assertTrue(cRSMatrix2.equals((Object)cRSMatrix1));
      assertTrue(cRSMatrix2.equals((Object)cRSMatrix0));
      assertTrue(cRSMatrix2.equals((Object)sparseMatrix0));
      assertTrue(cRSMatrix2.equals((Object)cRSMatrix3));
      assertTrue(cRSMatrix3.equals((Object)sparseMatrix0));
      assertTrue(cRSMatrix3.equals((Object)cRSMatrix2));
      assertTrue(cRSMatrix3.equals((Object)cRSMatrix0));
      assertTrue(cRSMatrix3.equals((Object)cRSMatrix1));
      assertTrue(cRSMatrix4.equals((Object)cRSMatrix2));
      assertTrue(cRSMatrix4.equals((Object)cRSMatrix0));
      assertTrue(cRSMatrix4.equals((Object)cRSMatrix3));
      assertTrue(cRSMatrix4.equals((Object)sparseMatrix0));
      assertTrue(cRSMatrix4.equals((Object)cRSMatrix1));
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0, cRSMatrix0.rows());
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(0.0, sparseMatrix0.max(), 0.01);
      assertEquals(Double.NaN, sparseMatrix0.density(), 0.01);
      assertEquals(0, sparseMatrix0.rows());
      assertEquals(0, sparseMatrix0.cardinality());
      assertEquals(0.0, sparseMatrix0.min(), 0.01);
      assertEquals(0, sparseMatrix0.columns());
      assertTrue(sparseMatrix0.isRowMajor());
      assertEquals(0, cRSMatrix1.columns());
      assertEquals(Double.NaN, cRSMatrix1.density(), 0.01);
      assertEquals(0.0, cRSMatrix1.max(), 0.01);
      assertTrue(cRSMatrix1.isRowMajor());
      assertEquals(0.0, cRSMatrix1.min(), 0.01);
      assertEquals(0, cRSMatrix1.cardinality());
      assertEquals(0, cRSMatrix1.rows());
      assertTrue(cRSMatrix2.isRowMajor());
      assertEquals(0, cRSMatrix2.cardinality());
      assertEquals(0.0, cRSMatrix2.max(), 0.01);
      assertEquals(0, cRSMatrix2.columns());
      assertEquals(Double.NaN, cRSMatrix2.density(), 0.01);
      assertEquals(0.0, cRSMatrix2.min(), 0.01);
      assertEquals(0, cRSMatrix2.rows());
      assertEquals(0.0, cRSMatrix3.max(), 0.01);
      assertEquals(Double.NaN, cRSMatrix3.density(), 0.01);
      assertEquals(0, cRSMatrix3.rows());
      assertEquals(0, cRSMatrix3.columns());
      assertEquals(0, cRSMatrix3.cardinality());
      assertTrue(cRSMatrix3.isRowMajor());
      assertEquals(0.0, cRSMatrix3.min(), 0.01);
      assertEquals(0, cRSMatrix4.cardinality());
      assertEquals(0.0, cRSMatrix4.min(), 0.01);
      assertEquals(0, cRSMatrix4.columns());
      assertEquals(0.0, cRSMatrix4.max(), 0.01);
      assertEquals(Double.NaN, cRSMatrix4.density(), 0.01);
      assertEquals(0, cRSMatrix4.rows());
      assertTrue(cRSMatrix4.isRowMajor());
      
      CompressedVector compressedVector0 = (CompressedVector)cRSMatrix3.getColumn(0);
      assertNotNull(compressedVector0);
      assertNotSame(cRSMatrix0, sparseMatrix0);
      assertNotSame(cRSMatrix0, cRSMatrix4);
      assertNotSame(cRSMatrix0, cRSMatrix2);
      assertNotSame(cRSMatrix0, cRSMatrix3);
      assertNotSame(cRSMatrix0, cRSMatrix1);
      assertNotSame(sparseMatrix0, cRSMatrix2);
      assertNotSame(sparseMatrix0, cRSMatrix0);
      assertNotSame(sparseMatrix0, cRSMatrix3);
      assertSame(sparseMatrix0, cRSMatrix1);
      assertNotSame(sparseMatrix0, cRSMatrix4);
      assertNotSame(cRSMatrix1, cRSMatrix0);
      assertNotSame(cRSMatrix1, cRSMatrix4);
      assertNotSame(cRSMatrix1, cRSMatrix3);
      assertSame(cRSMatrix1, sparseMatrix0);
      assertNotSame(cRSMatrix1, cRSMatrix2);
      assertNotSame(cRSMatrix2, sparseMatrix0);
      assertNotSame(cRSMatrix2, cRSMatrix0);
      assertNotSame(cRSMatrix2, cRSMatrix4);
      assertNotSame(cRSMatrix2, cRSMatrix3);
      assertNotSame(cRSMatrix2, cRSMatrix1);
      assertNotSame(cRSMatrix3, cRSMatrix2);
      assertNotSame(cRSMatrix3, cRSMatrix4);
      assertNotSame(cRSMatrix3, cRSMatrix0);
      assertNotSame(cRSMatrix3, cRSMatrix1);
      assertNotSame(cRSMatrix3, sparseMatrix0);
      assertTrue(cRSMatrix0.equals((Object)cRSMatrix1));
      assertTrue(cRSMatrix0.equals((Object)cRSMatrix3));
      assertTrue(cRSMatrix0.equals((Object)sparseMatrix0));
      assertTrue(cRSMatrix0.equals((Object)cRSMatrix4));
      assertTrue(cRSMatrix0.equals((Object)cRSMatrix2));
      assertTrue(sparseMatrix0.equals((Object)cRSMatrix3));
      assertTrue(sparseMatrix0.equals((Object)cRSMatrix2));
      assertTrue(sparseMatrix0.equals((Object)cRSMatrix0));
      assertTrue(sparseMatrix0.equals((Object)cRSMatrix4));
      assertTrue(cRSMatrix1.equals((Object)cRSMatrix2));
      assertTrue(cRSMatrix1.equals((Object)cRSMatrix3));
      assertTrue(cRSMatrix1.equals((Object)cRSMatrix0));
      assertTrue(cRSMatrix1.equals((Object)cRSMatrix4));
      assertTrue(cRSMatrix2.equals((Object)cRSMatrix1));
      assertTrue(cRSMatrix2.equals((Object)cRSMatrix0));
      assertTrue(cRSMatrix2.equals((Object)cRSMatrix4));
      assertTrue(cRSMatrix2.equals((Object)sparseMatrix0));
      assertTrue(cRSMatrix2.equals((Object)cRSMatrix3));
      assertTrue(cRSMatrix3.equals((Object)sparseMatrix0));
      assertTrue(cRSMatrix3.equals((Object)cRSMatrix2));
      assertTrue(cRSMatrix3.equals((Object)cRSMatrix4));
      assertTrue(cRSMatrix3.equals((Object)cRSMatrix0));
      assertTrue(cRSMatrix3.equals((Object)cRSMatrix1));
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0, cRSMatrix0.rows());
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(0.0, sparseMatrix0.max(), 0.01);
      assertEquals(Double.NaN, sparseMatrix0.density(), 0.01);
      assertEquals(0, sparseMatrix0.rows());
      assertEquals(0, sparseMatrix0.cardinality());
      assertEquals(0.0, sparseMatrix0.min(), 0.01);
      assertEquals(0, sparseMatrix0.columns());
      assertTrue(sparseMatrix0.isRowMajor());
      assertEquals(0, cRSMatrix1.columns());
      assertEquals(Double.NaN, cRSMatrix1.density(), 0.01);
      assertEquals(0.0, cRSMatrix1.max(), 0.01);
      assertTrue(cRSMatrix1.isRowMajor());
      assertEquals(0.0, cRSMatrix1.min(), 0.01);
      assertEquals(0, cRSMatrix1.cardinality());
      assertEquals(0, cRSMatrix1.rows());
      assertTrue(cRSMatrix2.isRowMajor());
      assertEquals(0, cRSMatrix2.cardinality());
      assertEquals(0.0, cRSMatrix2.max(), 0.01);
      assertEquals(0, cRSMatrix2.columns());
      assertEquals(Double.NaN, cRSMatrix2.density(), 0.01);
      assertEquals(0.0, cRSMatrix2.min(), 0.01);
      assertEquals(0, cRSMatrix2.rows());
      assertEquals(0.0, cRSMatrix3.max(), 0.01);
      assertEquals(Double.NaN, cRSMatrix3.density(), 0.01);
      assertEquals(0, cRSMatrix3.rows());
      assertEquals(0, cRSMatrix3.columns());
      assertEquals(0, cRSMatrix3.cardinality());
      assertTrue(cRSMatrix3.isRowMajor());
      assertEquals(0.0, cRSMatrix3.min(), 0.01);
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      
      CRSMatrix cRSMatrix5 = CRSMatrix.block(cRSMatrix2, cRSMatrix1, cRSMatrix3, cRSMatrix3);
      assertNotNull(cRSMatrix5);
      assertNotSame(cRSMatrix0, sparseMatrix0);
      assertNotSame(cRSMatrix0, cRSMatrix5);
      assertNotSame(cRSMatrix0, cRSMatrix4);
      assertNotSame(cRSMatrix0, cRSMatrix2);
      assertNotSame(cRSMatrix0, cRSMatrix3);
      assertNotSame(cRSMatrix0, cRSMatrix1);
      assertNotSame(sparseMatrix0, cRSMatrix2);
      assertNotSame(sparseMatrix0, cRSMatrix0);
      assertNotSame(sparseMatrix0, cRSMatrix3);
      assertSame(sparseMatrix0, cRSMatrix1);
      assertNotSame(sparseMatrix0, cRSMatrix4);
      assertNotSame(sparseMatrix0, cRSMatrix5);
      assertNotSame(cRSMatrix1, cRSMatrix0);
      assertNotSame(cRSMatrix1, cRSMatrix4);
      assertNotSame(cRSMatrix1, cRSMatrix3);
      assertNotSame(cRSMatrix1, cRSMatrix5);
      assertSame(cRSMatrix1, sparseMatrix0);
      assertNotSame(cRSMatrix1, cRSMatrix2);
      assertNotSame(cRSMatrix2, sparseMatrix0);
      assertNotSame(cRSMatrix2, cRSMatrix5);
      assertNotSame(cRSMatrix2, cRSMatrix0);
      assertNotSame(cRSMatrix2, cRSMatrix4);
      assertNotSame(cRSMatrix2, cRSMatrix3);
      assertNotSame(cRSMatrix2, cRSMatrix1);
      assertNotSame(cRSMatrix3, cRSMatrix2);
      assertNotSame(cRSMatrix3, cRSMatrix4);
      assertNotSame(cRSMatrix3, cRSMatrix0);
      assertNotSame(cRSMatrix3, cRSMatrix1);
      assertNotSame(cRSMatrix3, sparseMatrix0);
      assertNotSame(cRSMatrix3, cRSMatrix5);
      assertNotSame(cRSMatrix5, cRSMatrix1);
      assertNotSame(cRSMatrix5, cRSMatrix3);
      assertNotSame(cRSMatrix5, cRSMatrix4);
      assertNotSame(cRSMatrix5, cRSMatrix0);
      assertNotSame(cRSMatrix5, sparseMatrix0);
      assertNotSame(cRSMatrix5, cRSMatrix2);
      assertTrue(cRSMatrix0.equals((Object)cRSMatrix1));
      assertTrue(cRSMatrix0.equals((Object)cRSMatrix3));
      assertTrue(cRSMatrix0.equals((Object)sparseMatrix0));
      assertTrue(cRSMatrix0.equals((Object)cRSMatrix4));
      assertTrue(cRSMatrix0.equals((Object)cRSMatrix2));
      assertTrue(sparseMatrix0.equals((Object)cRSMatrix3));
      assertTrue(sparseMatrix0.equals((Object)cRSMatrix2));
      assertTrue(sparseMatrix0.equals((Object)cRSMatrix0));
      assertTrue(sparseMatrix0.equals((Object)cRSMatrix4));
      assertTrue(cRSMatrix1.equals((Object)cRSMatrix2));
      assertTrue(cRSMatrix1.equals((Object)cRSMatrix3));
      assertTrue(cRSMatrix1.equals((Object)cRSMatrix0));
      assertTrue(cRSMatrix1.equals((Object)cRSMatrix4));
      assertTrue(cRSMatrix2.equals((Object)cRSMatrix1));
      assertTrue(cRSMatrix2.equals((Object)cRSMatrix0));
      assertTrue(cRSMatrix2.equals((Object)cRSMatrix4));
      assertTrue(cRSMatrix2.equals((Object)sparseMatrix0));
      assertTrue(cRSMatrix2.equals((Object)cRSMatrix3));
      assertTrue(cRSMatrix3.equals((Object)sparseMatrix0));
      assertTrue(cRSMatrix3.equals((Object)cRSMatrix2));
      assertTrue(cRSMatrix3.equals((Object)cRSMatrix4));
      assertTrue(cRSMatrix3.equals((Object)cRSMatrix0));
      assertTrue(cRSMatrix3.equals((Object)cRSMatrix1));
      assertTrue(cRSMatrix5.equals((Object)cRSMatrix4));
      assertTrue(cRSMatrix5.equals((Object)cRSMatrix0));
      assertTrue(cRSMatrix5.equals((Object)cRSMatrix1));
      assertTrue(cRSMatrix5.equals((Object)sparseMatrix0));
      assertTrue(cRSMatrix5.equals((Object)cRSMatrix3));
      assertTrue(cRSMatrix5.equals((Object)cRSMatrix2));
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0, cRSMatrix0.rows());
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(0.0, sparseMatrix0.max(), 0.01);
      assertEquals(Double.NaN, sparseMatrix0.density(), 0.01);
      assertEquals(0, sparseMatrix0.rows());
      assertEquals(0, sparseMatrix0.cardinality());
      assertEquals(0.0, sparseMatrix0.min(), 0.01);
      assertEquals(0, sparseMatrix0.columns());
      assertTrue(sparseMatrix0.isRowMajor());
      assertEquals(0, cRSMatrix1.columns());
      assertEquals(Double.NaN, cRSMatrix1.density(), 0.01);
      assertEquals(0.0, cRSMatrix1.max(), 0.01);
      assertTrue(cRSMatrix1.isRowMajor());
      assertEquals(0.0, cRSMatrix1.min(), 0.01);
      assertEquals(0, cRSMatrix1.cardinality());
      assertEquals(0, cRSMatrix1.rows());
      assertTrue(cRSMatrix2.isRowMajor());
      assertEquals(0, cRSMatrix2.cardinality());
      assertEquals(0.0, cRSMatrix2.max(), 0.01);
      assertEquals(0, cRSMatrix2.columns());
      assertEquals(Double.NaN, cRSMatrix2.density(), 0.01);
      assertEquals(0.0, cRSMatrix2.min(), 0.01);
      assertEquals(0, cRSMatrix2.rows());
      assertEquals(0.0, cRSMatrix3.max(), 0.01);
      assertEquals(Double.NaN, cRSMatrix3.density(), 0.01);
      assertEquals(0, cRSMatrix3.rows());
      assertEquals(0, cRSMatrix3.columns());
      assertEquals(0, cRSMatrix3.cardinality());
      assertTrue(cRSMatrix3.isRowMajor());
      assertEquals(0.0, cRSMatrix3.min(), 0.01);
      assertEquals(0, cRSMatrix5.columns());
      assertEquals(0, cRSMatrix5.rows());
      assertTrue(cRSMatrix5.isRowMajor());
      assertEquals(0.0, cRSMatrix5.min(), 0.01);
      assertEquals(0.0, cRSMatrix5.max(), 0.01);
      assertEquals(Double.NaN, cRSMatrix5.density(), 0.01);
      assertEquals(0, cRSMatrix5.cardinality());
      
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      try { 
        CRSMatrix.from1DArray((-1164), (-3013), doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: -1164x-3013
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      assertNotNull(cRSMatrix0);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.rows());
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      
      cRSMatrix0.setAll((-52.0));
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.rows());
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      int int0 = 0;
      CRSMatrix cRSMatrix0 = new CRSMatrix(0, 32);
      assertNotNull(cRSMatrix0);
      assertEquals(32, cRSMatrix0.columns());
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      
      // Undeclared exception!
      try { 
        cRSMatrix0.removeRow((-2236));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..-1
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      int int0 = 3;
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        CRSMatrix.from1DArray(3, 3, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)97;
      // Undeclared exception!
      try { 
        CRSMatrix.fromBinary(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can not decode CRSMatrix from the given byte array.
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      assertNotNull(cRSMatrix0);
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0, cRSMatrix0.rows());
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(0, cRSMatrix0.cardinality());
      
      cRSMatrix0.eachNonZero((MatrixProcedure) null);
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0, cRSMatrix0.rows());
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(0, cRSMatrix0.cardinality());
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      int int0 = 669;
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(669, 0.0);
      int int1 = 8;
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)8, (-1794.97), (double)669, 144.0, (-1719.10354038)).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      // Undeclared exception!
      cRSMatrix0.transformRow(8, vectorFunction0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      int int0 = 56;
      CRSMatrix cRSMatrix0 = new CRSMatrix(56, 56);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      // Undeclared exception!
      cRSMatrix0.update(matrixFunction0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      int int0 = 1631;
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(1631);
      double[][] doubleArray0 = new double[1][3];
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = (-289.58606267800036);
      doubleArray1[1] = (double) 1631;
      doubleArray1[2] = (-289.58606267800036);
      doubleArray0[0] = doubleArray1;
      DenseMatrix denseMatrix0 = DenseMatrix.from2DArray(doubleArray0);
      // Undeclared exception!
      try { 
        CRSMatrix.block(denseMatrix0, cRSMatrix0, cRSMatrix0, denseMatrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Sides of blocks are incompatible!
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      int int0 = 3459;
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(3459, 3459);
      String string0 = ")73'aGp%-GZ#5#";
      SparseMatrix.fromCSV("");
      // Undeclared exception!
      try { 
        cRSMatrix0.set((-1), 3459, 3459);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '-1' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(1631);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorAccumulator0).accumulate();
      cRSMatrix0.foldNonZeroInColumn(48, vectorAccumulator0);
      cRSMatrix0.nonZeroRowMajorIterator();
      assertEquals(1.0, cRSMatrix0.max(), 0.01);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      int int0 = 4;
      int int1 = 2;
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(2);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cRSMatrix0.update(matrixFunction0);
      int int2 = (-814);
      // Undeclared exception!
      try { 
        SparseMatrix.zero((-814), 2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: -814x2
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      int[] intArray0 = new int[1];
      intArray0[0] = 8;
      // Undeclared exception!
      try { 
        cRSMatrix0.select(intArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '8' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      CRSMatrix cRSMatrix1 = (CRSMatrix)cRSMatrix0.copyOfShape(0, 5);
      assertEquals(Double.NaN, cRSMatrix1.density(), 0.01);
      assertEquals(5, cRSMatrix1.columns());
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 0;
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        CRSMatrix.diagonal((-187), 1.0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(13, 13);
      cRSMatrix0.nonZeroIteratorOfRow(13);
      assertEquals(13, cRSMatrix0.rows());
      assertEquals(13, cRSMatrix0.columns());
      
      CRSMatrix cRSMatrix1 = (CRSMatrix)cRSMatrix0.copyOfShape(13, 3300);
      assertEquals(3300, cRSMatrix1.columns());
      assertEquals(13, cRSMatrix0.columns());
      assertEquals(13, cRSMatrix0.rows());
      assertEquals(0, cRSMatrix1.cardinality());
      assertEquals(13, cRSMatrix1.rows());
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      CRSMatrix cRSMatrix0 = CRSMatrix.randomSymmetric(2246, 0.0, (Random) mockRandom0);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      // Undeclared exception!
      cRSMatrix0.update(matrixFunction0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.fromCSV("");
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.foldRows(vectorAccumulator0);
      cRSMatrix0.transformColumn(48, (VectorFunction) null);
      cRSMatrix0.iteratorOfNonZeroRows();
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (-189);
      doubleArray0[1] = (double) (-189);
      doubleArray0[2] = (double) (-189);
      doubleArray0[3] = (double) (-189);
      doubleArray0[4] = (double) (-189);
      doubleArray0[5] = (double) (-189);
      // Undeclared exception!
      try { 
        CRSMatrix.from1DArray((-189), (-189), doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: -189x-189
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix(26, 26);
      int int0 = (-4223);
      // Undeclared exception!
      try { 
        cRSMatrix0.set(20, (-4223), 41.0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '-4223' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      cRSMatrix0.iterator();
      InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new InPlaceCopyMatrixToMatrix();
      SparseMatrix sparseMatrix0 = SparseMatrix.fromCSV("");
      Matrix matrix0 = inPlaceCopyMatrixToMatrix0.applySimple(sparseMatrix0, sparseMatrix0);
      int int0 = 0;
      Matrix matrix1 = cRSMatrix0.insert(matrix0, 0, 0, 0, 0);
      CRSMatrix cRSMatrix1 = CRSMatrix.block(matrix1, sparseMatrix0, cRSMatrix0, cRSMatrix0);
      cRSMatrix0.toDenseMatrix();
      int int1 = (-1164);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      cRSMatrix1.eachNonZeroInColumn((-1164), vectorProcedure0);
      RowMajorSparseMatrix.block(matrix1, matrix0, cRSMatrix1, sparseMatrix0);
      cRSMatrix1.getColumn(2056);
      CRSMatrix.block(matrix1, matrix0, cRSMatrix1, cRSMatrix1);
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      try { 
        CRSMatrix.from1DArray((-1164), (-3013), doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: -1164x-3013
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      DenseVector denseVector0 = DenseVector.constant(0, 0);
      Matrix matrix0 = denseVector0.toDiagonalMatrix();
      CRSMatrix cRSMatrix0 = CRSMatrix.block(matrix0, matrix0, matrix0, matrix0);
      cRSMatrix0.transpose();
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        cRSMatrix0.eachInRow(0, vectorProcedure0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(21, 21);
      double[][] doubleArray0 = new double[9][4];
      double[] doubleArray1 = new double[0];
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[5];
      doubleArray2[0] = (double) 21;
      doubleArray2[1] = (double) 21;
      doubleArray2[2] = (double) 21;
      doubleArray2[3] = (double) 21;
      doubleArray2[4] = (double) 21;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[8];
      doubleArray3[0] = (double) 21;
      doubleArray3[1] = (double) 21;
      doubleArray3[2] = (-595.61288578);
      doubleArray3[3] = (double) 21;
      doubleArray3[4] = (double) 21;
      doubleArray3[5] = (double) 21;
      doubleArray3[6] = (double) 21;
      doubleArray3[7] = (double) 21;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[0];
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[5];
      doubleArray5[0] = (-595.61288578);
      doubleArray5[1] = (double) 21;
      doubleArray5[2] = (-595.61288578);
      doubleArray5[3] = (-595.61288578);
      doubleArray5[4] = (double) 21;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[9];
      doubleArray6[0] = (double) 21;
      doubleArray6[1] = (-595.61288578);
      doubleArray6[2] = (double) 21;
      doubleArray6[3] = (-595.61288578);
      doubleArray6[4] = (-595.61288578);
      doubleArray6[5] = (double) 21;
      doubleArray6[6] = (double) 21;
      doubleArray6[7] = (double) 21;
      doubleArray6[8] = (-595.61288578);
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[5];
      doubleArray7[0] = (double) 21;
      doubleArray7[1] = (double) 21;
      doubleArray7[2] = (-595.61288578);
      doubleArray7[3] = (double) 21;
      doubleArray7[4] = (-595.61288578);
      doubleArray0[6] = doubleArray7;
      double[] doubleArray8 = new double[2];
      doubleArray8[0] = (double) 21;
      doubleArray8[1] = (double) 21;
      doubleArray0[7] = doubleArray8;
      double[] doubleArray9 = new double[1];
      doubleArray9[0] = (-595.61288578);
      doubleArray0[8] = doubleArray9;
      SparseMatrix.from2DArray(doubleArray0);
      byte[] byteArray0 = cRSMatrix0.toBinary();
      CRSMatrix cRSMatrix1 = CRSMatrix.fromBinary(byteArray0);
      assertTrue(cRSMatrix1.equals((Object)cRSMatrix0));
      assertEquals(101, byteArray0.length);
      assertEquals(0.0, cRSMatrix1.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      double[][] doubleArray0 = new double[5][0];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = 0.0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[3];
      doubleArray2[0] = 0.0;
      doubleArray2[1] = 0.0;
      doubleArray2[2] = 0.0;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[1];
      doubleArray3[0] = 0.0;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[4];
      doubleArray4[0] = 0.0;
      doubleArray4[1] = 0.0;
      doubleArray4[2] = (-702.7755236698);
      doubleArray4[3] = 0.0;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[1];
      doubleArray5[0] = 0.0;
      doubleArray0[4] = doubleArray5;
      CRSMatrix cRSMatrix1 = CRSMatrix.from2DArray(doubleArray0);
      assertEquals(1, cRSMatrix1.columns());
      assertEquals(5, cRSMatrix1.rows());
      
      double double0 = cRSMatrix0.min();
      assertEquals(0.0, double0, 0.01);
      
      // Undeclared exception!
      try { 
        cRSMatrix1.getOrElse((-2144846884), (-2144846884), 0.0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '-2144846884' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)35;
      byteArray0[1] = (byte)35;
      byteArray0[2] = (byte)18;
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte)29;
      // Undeclared exception!
      try { 
        CRSMatrix.fromBinary(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can not decode CRSMatrix from the given byte array.
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      // Undeclared exception!
      try { 
        cRSMatrix0.copyOfShape(32, (-11));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: 32x-11
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.fromCSV("");
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.updateColumn((-922), vectorFunction0);
      // Undeclared exception!
      try { 
        cRSMatrix0.blankOfShape((-922), (-922));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: -922x-922
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(1631);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      int[] intArray0 = new int[6];
      Matrix matrix0 = cRSMatrix0.select(intArray0, intArray0);
      assertEquals(1.0, matrix0.max(), 0.01);
      
      cRSMatrix0.iteratorOfRow(638);
      assertEquals(1631, cRSMatrix0.cardinality());
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      try { 
        CRSMatrix.random((-1028), (-805), (double) (-1028), (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The density value should be between 0 and 1.0
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 3;
      doubleArray0[1] = (double) 3;
      doubleArray0[2] = (double) 3;
      doubleArray0[3] = (double) 3;
      int[] intArray0 = new int[5];
      intArray0[0] = 3;
      intArray0[1] = 3;
      intArray0[2] = 3;
      intArray0[3] = 3;
      intArray0[4] = 3;
      CRSMatrix cRSMatrix0 = new CRSMatrix(3, 3, 3, doubleArray0, intArray0, intArray0);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        cRSMatrix0.foldNonZeroInRow(13, vectorAccumulator0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(16, 0);
      cRSMatrix0.rotate();
      byte[] byteArray0 = cRSMatrix0.toBinary();
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(81, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix(0, 0);
      // Undeclared exception!
      try { 
        cRSMatrix0.getOrElse(0, 0, 527.5822124616932);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '0' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(1772, 1772);
      cRSMatrix0.iteratorOfColumn(1772);
      Matrix matrix0 = cRSMatrix0.copyOfShape(13, 1772);
      assertEquals(1772, cRSMatrix0.columns());
      assertEquals(1772, cRSMatrix0.rows());
      assertEquals(1772, matrix0.columns());
      assertEquals(13, matrix0.rows());
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(1631);
      int int0 = new Integer(1631);
      cRSMatrix0.iteratorOfColumn(1631);
      assertEquals(1631, cRSMatrix0.columns());
      
      CompressedVector compressedVector0 = (CompressedVector)cRSMatrix0.toColumnVector();
      assertEquals(1.0, cRSMatrix0.max(), 0.01);
      assertEquals(6.131207847946045E-4, compressedVector0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      int int0 = 1681;
      MockRandom mockRandom0 = new MockRandom(1681);
      mockRandom0.ints();
      // Undeclared exception!
      try { 
        CRSMatrix.random(1681, 1681, (double) 1681, (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The density value should be between 0 and 1.0
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      int int0 = 508;
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(508, 508);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(839.75, (double)508, (-8.556370212056681), 3952.6, 3114.1575).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      // Undeclared exception!
      cRSMatrix0.update(matrixFunction0);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom((-151));
      // Undeclared exception!
      try { 
        CRSMatrix.random(0, (-151), (-1806.73), (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The density value should be between 0 and 1.0
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(56, (-751.7387956031));
      MatrixFactory<CRSMatrix> matrixFactory0 = (MatrixFactory<CRSMatrix>) mock(MatrixFactory.class, new ViolatedAssumptionAnswer());
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorAccumulator0).accumulate();
      cRSMatrix0.foldColumn(42, vectorAccumulator0);
      cRSMatrix0.iteratorOfNonZeroRows();
      // Undeclared exception!
      try { 
        cRSMatrix0.select((int[]) null, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      String string0 = null;
      // Undeclared exception!
      try { 
        CRSMatrix.fromCSV((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.StringTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix(3018, 3018);
      // Undeclared exception!
      try { 
        cRSMatrix0.copyOfShape((-859), 3018);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: -859x3018
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      double[][] doubleArray0 = new double[3][3];
      double[] doubleArray1 = new double[1];
      doubleArray0[0] = doubleArray1;
      DenseMatrix denseMatrix0 = DenseMatrix.from2DArray(doubleArray0);
      // Undeclared exception!
      try { 
        CRSMatrix.block(denseMatrix0, denseMatrix0, denseMatrix0, denseMatrix0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 3;
      doubleArray0[1] = (double) 3;
      doubleArray0[2] = (double) 3;
      doubleArray0[3] = (double) 3;
      doubleArray0[4] = (-396.5915280955313);
      doubleArray0[5] = (double) 3;
      doubleArray0[6] = (double) 3;
      doubleArray0[7] = (double) 3;
      doubleArray0[8] = (double) 3;
      CRSMatrix cRSMatrix0 = CRSMatrix.from1DArray(3, 3, doubleArray0);
      byte[] byteArray0 = cRSMatrix0.toBinary();
      assertEquals(137, byteArray0.length);
      assertEquals(3.0, cRSMatrix0.max(), 0.01);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.fromCSV("");
      NumberFormat numberFormat0 = NumberFormat.getPercentInstance();
      cRSMatrix0.mkString(numberFormat0);
      // Undeclared exception!
      try { 
        cRSMatrix0.eachInRow(588, (VectorProcedure) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 588
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (-2066.8552623929672);
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = (double) 0;
      doubleArray0[7] = (double) 0;
      doubleArray0[8] = (double) 0;
      CRSMatrix cRSMatrix1 = CRSMatrix.from1DArray(0, 0, doubleArray0);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        cRSMatrix1.eachNonZeroInRow(0, vectorProcedure0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        cRSMatrix0.select(intArray0, intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No rows or columns selected.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      int int0 = 669;
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(669, 0.0);
      int int1 = 8;
      double double0 = 110.0;
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(110.0, 508.0, 26.0, 508.0, 61.646).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      // Undeclared exception!
      cRSMatrix0.transformRow(8, vectorFunction0);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      int int0 = 508;
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(508, 508);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      // Undeclared exception!
      cRSMatrix0.update(matrixFunction0);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      int int0 = 48;
      double double0 = 1.0;
      // Undeclared exception!
      try { 
        CRSMatrix.random(48, 48, (double) 48, (Random) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The density value should be between 0 and 1.0
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        CRSMatrix.fromBinary(byteArray0);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      int int0 = 48;
      // Undeclared exception!
      try { 
        CRSMatrix.randomSymmetric(48, 1.0, (Random) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 208;
      doubleArray0[1] = (-4649.62);
      doubleArray0[2] = (double) 208;
      int[] intArray0 = new int[2];
      intArray0[0] = 208;
      intArray0[1] = 208;
      int[] intArray1 = new int[8];
      intArray1[0] = 208;
      intArray1[1] = 208;
      intArray1[2] = 208;
      intArray1[3] = 208;
      intArray1[4] = 3869;
      intArray1[5] = 208;
      intArray1[6] = 208;
      intArray1[7] = 208;
      CRSMatrix cRSMatrix0 = new CRSMatrix(208, 208, 208, doubleArray0, intArray0, intArray1);
      // Undeclared exception!
      try { 
        cRSMatrix0.min();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      // Undeclared exception!
      try { 
        cRSMatrix0.eachNonZeroInRow(1681, (VectorProcedure) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.fromCSV("");
      double double0 = cRSMatrix0.min();
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(0, cRSMatrix0.rows());
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(8, 660);
      cRSMatrix0.nonZeroIteratorOfColumn(660);
      cRSMatrix0.setAll(8);
      cRSMatrix0.copyOfColumns(8);
      cRSMatrix0.rowMajorIterator();
      cRSMatrix0.rowMajorIterator();
      // Undeclared exception!
      try { 
        cRSMatrix0.getRow(32);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 33
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.ints();
      MockRandom mockRandom1 = new MockRandom(0L);
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(37);
      // Undeclared exception!
      try { 
        cRSMatrix0.set(37, 2644, 0L);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '37' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      cRSMatrix0.iterator();
      InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new InPlaceCopyMatrixToMatrix();
      SparseMatrix sparseMatrix0 = SparseMatrix.fromCSV("");
      Matrix matrix0 = inPlaceCopyMatrixToMatrix0.applySimple(sparseMatrix0, sparseMatrix0);
      int int0 = 0;
      Matrix matrix1 = cRSMatrix0.insert(matrix0, 0, 0, 0, 0);
      CRSMatrix cRSMatrix1 = CRSMatrix.block(matrix1, sparseMatrix0, cRSMatrix0, cRSMatrix0);
      cRSMatrix0.toDenseMatrix();
      int int1 = 2056;
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      cRSMatrix1.eachNonZeroInColumn((-1164), vectorProcedure0);
      RowMajorSparseMatrix.block(matrix1, matrix0, cRSMatrix1, sparseMatrix0);
      cRSMatrix1.getColumn(2056);
      CRSMatrix.block(matrix1, matrix0, cRSMatrix1, cRSMatrix1);
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      try { 
        CRSMatrix.from1DArray((-1164), (-3013), doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: -1164x-3013
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(26, 26);
      Matrix matrix0 = cRSMatrix0.copyOfShape(26, 2);
      assertEquals(2, matrix0.columns());
      assertEquals(26, matrix0.rows());
      assertEquals(26, cRSMatrix0.rows());
      assertEquals(26, cRSMatrix0.columns());
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      int int0 = 1631;
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(1631);
      // Undeclared exception!
      cRSMatrix0.rank();
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(669, 0.0);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.eachNonZeroInColumn(669, vectorProcedure0);
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(matrixPredicate0).test(anyInt() , anyInt());
      cRSMatrix0.non(matrixPredicate0);
      double[][] doubleArray0 = new double[3][4];
      double[] doubleArray1 = new double[0];
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[4];
      doubleArray2[0] = (-1304.0);
      doubleArray2[1] = (double) 669;
      doubleArray2[2] = 0.0;
      doubleArray2[3] = 0.0;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[2];
      doubleArray3[0] = 0.0;
      doubleArray3[1] = (double) 669;
      doubleArray0[2] = doubleArray3;
      RowMajorSparseMatrix.from2DArray(doubleArray0);
      int[] intArray0 = new int[8];
      intArray0[0] = 1;
      intArray0[1] = 3300;
      intArray0[2] = 669;
      intArray0[3] = 669;
      intArray0[4] = 669;
      intArray0[5] = 669;
      intArray0[6] = 1;
      intArray0[7] = 1;
      // Undeclared exception!
      try { 
        cRSMatrix0.select(intArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '3300' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (-2066.8552623929672);
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = (double) 0;
      doubleArray0[7] = (double) 0;
      double[][] doubleArray1 = new double[9][1];
      double[] doubleArray2 = new double[5];
      doubleArray2[0] = 0.0;
      doubleArray2[1] = (-2066.8552623929672);
      doubleArray2[2] = (-2066.8552623929672);
      doubleArray2[3] = (-2066.8552623929672);
      doubleArray2[4] = (-2066.8552623929672);
      doubleArray1[0] = doubleArray2;
      // Undeclared exception!
      try { 
        CRSMatrix.from1DArray(37, 37, doubleArray2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      int int0 = 26;
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(26, 26);
      cRSMatrix0.euclideanNorm();
      // Undeclared exception!
      try { 
        cRSMatrix0.setRow(26, 0.0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 27
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix$5", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      int int0 = 2;
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(2);
      cRSMatrix0.multiplyByItsTranspose();
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(4.0, (double)2, 4.0, 0.0).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cRSMatrix0.update(matrixFunction0);
      // Undeclared exception!
      try { 
        CRSMatrix.from1DArray(2, 2, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      String string0 = "W)H{*";
      // Undeclared exception!
      try { 
        CRSMatrix.fromCSV("W)H{*");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix(23, 23);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        cRSMatrix0.eachNonZeroInRow(23, vectorProcedure0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(21, 21);
      // Undeclared exception!
      try { 
        cRSMatrix0.getOrElse((-1), 497, 36.0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '-1' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(98, 98, 98);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cRSMatrix0.updateAt(17, (-2657), matrixFunction0);
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.each(matrixProcedure0);
      cRSMatrix0.iteratorOfNonZeroRows();
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(98, cRSMatrix0.columns());
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.fromCSV("");
      cRSMatrix0.setAll(176.64);
      CRSMatrix cRSMatrix1 = CRSMatrix.block(cRSMatrix0, cRSMatrix0, cRSMatrix0, cRSMatrix0);
      assertEquals(0, cRSMatrix0.cardinality());
      assertTrue(cRSMatrix1.equals((Object)cRSMatrix0));
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      int int0 = (-1840);
      // Undeclared exception!
      try { 
        CRSMatrix.diagonal((-1840), (-1840));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      int int0 = 0;
      int int1 = 0;
      CRSMatrix cRSMatrix0 = new CRSMatrix(0, 0);
      cRSMatrix0.nonZeroIteratorOfColumn(0);
      MatrixFactory<Matrix> matrixFactory0 = (MatrixFactory<Matrix>) mock(MatrixFactory.class, new ViolatedAssumptionAnswer());
      doReturn((Matrix) null).when(matrixFactory0).apply(anyInt() , anyInt());
      // Undeclared exception!
      try { 
        cRSMatrix0.to(matrixFactory0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.RowMajorSparseMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      int int0 = 4;
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(4);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn((-1770.998), (double)4, 1827.1235110864966, (-1770.998), (-1770.998)).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cRSMatrix0.update(matrixFunction0);
      // Undeclared exception!
      try { 
        SparseMatrix.zero((-1270), (-1270));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: -1270x-1270
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(4);
      cRSMatrix0.diagonalProduct();
      cRSMatrix0.setAll(4);
      cRSMatrix0.max();
      cRSMatrix0.setAll(1.0);
      assertEquals(1.0, cRSMatrix0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      Matrix matrix0 = cRSMatrix0.blankOfColumns(509);
      Matrix matrix1 = cRSMatrix0.multiply(matrix0);
      // Undeclared exception!
      try { 
        CRSMatrix.block(cRSMatrix0, cRSMatrix0, matrix1, matrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Sides of blocks are incompatible!
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = 1;
      intArray0[1] = 36;
      intArray0[2] = 1000;
      intArray0[3] = 821;
      intArray0[4] = 8;
      CRSMatrix cRSMatrix0 = new CRSMatrix(1, 1000, 821, (double[]) null, intArray0, intArray0);
      // Undeclared exception!
      try { 
        cRSMatrix0.to((MatrixFactory<Matrix>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      // Undeclared exception!
      try { 
        CRSMatrix.block((Matrix) null, (Matrix) null, (Matrix) null, (Matrix) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      Matrix matrix0 = cRSMatrix0.blankOfShape(0, 13);
      CRSMatrix cRSMatrix1 = CRSMatrix.diagonal(2384, 2384);
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      DenseMatrix denseMatrix0 = null;
      // Undeclared exception!
      try { 
        ooPlaceMatricesMultiplication0.ensureApplicableTo(matrix0, cRSMatrix1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The number of rows in the left-hand matrix should be equal to the number of columns in the right-hand matrix: 0 does not equal to 2384.
         //
         verifyException("org.la4j.operation.ooplace.OoPlaceMatricesMultiplication", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(1262, 1262, 1262);
      // Undeclared exception!
      try { 
        cRSMatrix0.nonZeroIteratorOfRow((-496));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -496
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix$4", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      int int0 = 5270;
      CRSMatrix.zero(5270, 13);
      double[][] doubleArray0 = new double[0][0];
      // Undeclared exception!
      try { 
        CRSMatrix.from2DArray(doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      MockRandom mockRandom0 = new MockRandom(1);
      CRSMatrix cRSMatrix1 = CRSMatrix.random(1, 1, (double) 1, (Random) mockRandom0);
      assertEquals(1, cRSMatrix1.columns());
      assertEquals(1.0, cRSMatrix1.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 1552;
      intArray0[1] = 1543;
      CRSMatrix cRSMatrix0 = new CRSMatrix(1552, 1543, 1552, (double[]) null, intArray0, intArray0);
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        cRSMatrix0.eachNonZero(matrixProcedure0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      int int0 = 0;
      CRSMatrix cRSMatrix0 = new CRSMatrix(37, 37, 0);
      Matrix matrix0 = Matrix.diagonal(0, 37);
      MatrixAccumulator matrixAccumulator0 = mock(MatrixAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(matrixAccumulator0).accumulate();
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(matrixPredicate0).test(anyInt() , anyInt());
      matrix0.non(matrixPredicate0);
      cRSMatrix0.nonZeroIteratorOfColumn(1271);
      cRSMatrix0.foldNonZero(matrixAccumulator0);
      cRSMatrix0.iteratorOfRow(1);
      DenseMatrix denseMatrix0 = DenseMatrix.identity(1);
      int int1 = (-428);
      // Undeclared exception!
      try { 
        denseMatrix0.getRow((-428));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -428
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(4);
      cRSMatrix0.setAll(4);
      assertEquals(4.0, cRSMatrix0.max(), 0.01);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      double[][] doubleArray0 = new double[1][3];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (-289.3389);
      doubleArray0[0] = doubleArray1;
      DenseMatrix denseMatrix0 = DenseMatrix.from2DArray(doubleArray0);
      DenseMatrix denseMatrix1 = DenseMatrix.block(denseMatrix0, denseMatrix0, denseMatrix0, denseMatrix0);
      Matrix matrix0 = ooPlaceMatricesMultiplication0.apply(denseMatrix1, denseMatrix1);
      // Undeclared exception!
      try { 
        CRSMatrix.block(matrix0, matrix0, denseMatrix1, matrix0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix(59, 59);
      cRSMatrix0.toSparseMatrix();
      cRSMatrix0.transpose();
      // Undeclared exception!
      try { 
        cRSMatrix0.minInRow(59);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 60
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix(0, 0);
      MockRandom mockRandom0 = new MockRandom();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-44);
      byteArray0[1] = (byte) (-22);
      byteArray0[2] = (byte)73;
      byteArray0[3] = (byte) (-113);
      byteArray0[4] = (byte) (-6);
      byteArray0[5] = (byte)8;
      byteArray0[6] = (byte) (-1);
      byteArray0[7] = (byte) (-1);
      mockRandom0.nextBytes(byteArray0);
      mockRandom0.doubles();
      CRSMatrix cRSMatrix1 = CRSMatrix.randomSymmetric(0, (double) 0, (Random) mockRandom0);
      // Undeclared exception!
      try { 
        cRSMatrix1.set(0, 0, 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '0' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix(3039, 3039);
      double[][] doubleArray0 = new double[8][0];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = 424.88;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[3];
      doubleArray2[0] = 424.88;
      doubleArray2[1] = (double) 3039;
      doubleArray2[2] = (double) 3039;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[1];
      doubleArray3[0] = (-1550.492);
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[8];
      doubleArray4[0] = (double) 3039;
      doubleArray4[1] = (double) 3039;
      doubleArray4[2] = (-1550.492);
      doubleArray4[3] = (double) 3039;
      doubleArray4[4] = 424.88;
      doubleArray4[5] = 424.88;
      doubleArray4[6] = (-1550.492);
      doubleArray4[7] = (double) 3039;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[7];
      doubleArray5[0] = 359.0;
      doubleArray5[1] = (-1550.492);
      doubleArray5[2] = 424.88;
      doubleArray5[3] = 424.88;
      doubleArray5[4] = 424.88;
      doubleArray5[5] = (-1550.492);
      doubleArray5[6] = (-1550.492);
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[9];
      doubleArray6[0] = 424.88;
      doubleArray6[1] = (double) 3039;
      doubleArray6[2] = 359.0;
      doubleArray6[3] = (-1550.492);
      doubleArray6[4] = 100.0;
      doubleArray6[5] = 359.0;
      doubleArray6[6] = 424.88;
      doubleArray6[7] = (-1550.492);
      doubleArray6[8] = (-1550.492);
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[4];
      doubleArray7[0] = (double) 3039;
      doubleArray7[1] = (double) 3039;
      doubleArray7[2] = 424.88;
      doubleArray7[3] = (-1550.492);
      doubleArray0[6] = doubleArray7;
      double[] doubleArray8 = new double[3];
      doubleArray8[0] = (-1550.492);
      doubleArray8[1] = (double) 3039;
      doubleArray8[2] = (-1550.492);
      doubleArray0[7] = doubleArray8;
      CRSMatrix cRSMatrix1 = CRSMatrix.from2DArray(doubleArray0);
      assertEquals(1.0, cRSMatrix1.density(), 0.01);
      assertEquals(3039.0, cRSMatrix1.max(), 0.01);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(1631);
      Integer integer0 = new Integer(1631);
      byte[] byteArray0 = cRSMatrix0.toBinary();
      assertEquals(26113, byteArray0.length);
      
      cRSMatrix0.nonZeroIterator();
      Vector vector0 = cRSMatrix0.getColumn(1631);
      CompressedVector compressedVector0 = (CompressedVector)cRSMatrix0.getRow(1607);
      assertEquals(6.131207847946045E-4, compressedVector0.density(), 0.01);
      assertFalse(compressedVector0.equals((Object)vector0));
      
      double double0 = cRSMatrix0.minInRow(1607);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-1031.6875693131356);
      doubleArray0[1] = (double) 3;
      doubleArray0[2] = (-2237.90306328277);
      doubleArray0[3] = (double) 606;
      // Undeclared exception!
      try { 
        CRSMatrix.from1DArray(606, 3, doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(0);
      CRSMatrix cRSMatrix0 = CRSMatrix.randomSymmetric(0, 2826.768652472, (Random) mockRandom0);
      // Undeclared exception!
      try { 
        cRSMatrix0.maxInRow(0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      Locale locale0 = Locale.FRENCH;
      NumberFormat numberFormat0 = NumberFormat.getNumberInstance(locale0);
      cRSMatrix0.toMatrixMarket(numberFormat0);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      CRSMatrix cRSMatrix1 = CRSMatrix.fromMatrixMarket("%%MatrixMarket matrix coordinate real general row-major\n0 0 0\n");
      CRSMatrix cRSMatrix2 = CRSMatrix.diagonal(0, 0.0);
      assertTrue(cRSMatrix2.equals((Object)cRSMatrix1));
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(669, 0.0);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.eachNonZeroInColumn(669, vectorProcedure0);
      CRSMatrix.diagonal(669, 0.0);
      cRSMatrix0.getRow(1);
      org.evosuite.runtime.Random.setNextRandom(669);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      double double0 = 0.0;
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(669, 0.0);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.eachNonZeroInColumn(669, vectorProcedure0);
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(matrixPredicate0).test(anyInt() , anyInt());
      cRSMatrix0.non(matrixPredicate0);
      int int0 = 0;
      cRSMatrix0.nonZeroAt(1, 0);
      cRSMatrix0.nonZeroRowMajorIterator();
      cRSMatrix0.nonZeroIteratorOfRow(1);
      // Undeclared exception!
      try { 
        CRSMatrix.from2DArray((double[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }
}
