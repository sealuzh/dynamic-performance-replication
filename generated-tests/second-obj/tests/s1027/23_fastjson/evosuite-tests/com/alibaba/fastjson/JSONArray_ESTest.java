/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 12:36:22 GMT 2018
 */

package com.alibaba.fastjson;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.JSONPath;
import com.alibaba.fastjson.PropertyNamingStrategy;
import com.alibaba.fastjson.annotation.JSONType;
import com.alibaba.fastjson.asm.Opcodes;
import com.alibaba.fastjson.parser.Feature;
import com.alibaba.fastjson.parser.ParserConfig;
import com.alibaba.fastjson.serializer.JavaBeanSerializer;
import com.alibaba.fastjson.serializer.PascalNameFilter;
import com.alibaba.fastjson.serializer.SerializeConfig;
import com.alibaba.fastjson.serializer.SerializeFilter;
import com.alibaba.fastjson.serializer.SimplePropertyPreFilter;
import com.alibaba.fastjson.util.JavaBeanInfo;
import java.io.ObjectInputStream;
import java.io.ObjectStreamConstants;
import java.io.OutputStream;
import java.lang.reflect.Type;
import java.sql.Timestamp;
import java.time.DateTimeException;
import java.time.DayOfWeek;
import java.time.Duration;
import java.time.LocalDate;
import java.time.ZoneId;
import java.time.chrono.ChronoLocalDate;
import java.time.chrono.Chronology;
import java.time.chrono.JapaneseChronology;
import java.time.chrono.JapaneseDate;
import java.time.chrono.MinguoEra;
import java.time.chrono.ThaiBuddhistDate;
import java.time.format.ResolverStyle;
import java.time.temporal.TemporalField;
import java.util.Calendar;
import java.util.Collection;
import java.util.Comparator;
import java.util.HashMap;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Set;
import java.util.TimeZone;
import java.util.TreeMap;
import java.util.function.Predicate;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.time.MockLocalDate;
import org.evosuite.runtime.mock.java.time.chrono.MockHijrahDate;
import org.evosuite.runtime.mock.java.time.chrono.MockJapaneseChronology;
import org.evosuite.runtime.mock.java.time.chrono.MockJapaneseDate;
import org.evosuite.runtime.mock.java.time.chrono.MockMinguoDate;
import org.evosuite.runtime.mock.java.time.chrono.MockThaiBuddhistDate;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONArray_ESTest extends JSONArray_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(118);
      // Undeclared exception!
      try { 
        jSONArray0.getSqlDate(118);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 118, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(932);
      // Undeclared exception!
      try { 
        jSONArray0.fluentAddAll((Collection<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      MockHijrahDate mockHijrahDate0 = new MockHijrahDate();
      // Undeclared exception!
      try { 
        jSONArray0.fluentSet((-118), mockHijrahDate0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = new JSONArray(jSONArray0);
      // Undeclared exception!
      try { 
        jSONArray0.addAll(962, (Collection<?>) jSONArray1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 962, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedList<MockJapaneseDate> linkedList0 = new LinkedList<MockJapaneseDate>();
      // Undeclared exception!
      try { 
        jSONArray0.fluentAddAll(2998, (Collection<?>) linkedList0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2998, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LinkedList<ChronoLocalDate> linkedList0 = new LinkedList<ChronoLocalDate>();
      int int0 = Calendar.DAY_OF_WEEK;
      JSONArray jSONArray0 = new JSONArray(7);
      JSONArray jSONArray1 = jSONArray0.fluentSet(126, linkedList0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      jSONArray1.add((Object) jSONArray1);
      assertEquals(128, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentAdd((Object) null);
      // Undeclared exception!
      try { 
        jSONArray1.fluentRemove(126);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 126, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentClear();
      JSONArray jSONArray2 = jSONArray1.fluentRemove((Object) jSONArray0);
      assertSame(jSONArray1, jSONArray2);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Class<JSONArray> class0 = JSONArray.class;
      List<JSONArray> list0 = new LinkedList<JSONArray>();
      jSONArray0.addAll((Collection<?>) list0);
      jSONArray0.fluentRetainAll(list0);
      jSONArray0.setComponentType(class0);
      // Undeclared exception!
      try { 
        jSONArray0.listIterator(126);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 126
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedList<ChronoLocalDate> linkedList0 = new LinkedList<ChronoLocalDate>();
      Type type0 = jSONArray0.getComponentType();
      assertNull(type0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(1);
      // Undeclared exception!
      try { 
        jSONArray0.fluentRemove(1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentAdd((Object) "E{J[cT (2g|0`");
      // Undeclared exception!
      try { 
        jSONArray1.getShort(2389);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2389, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(804);
      jSONArray0.fluentRemoveAll(jSONArray0);
      MockMinguoDate mockMinguoDate0 = new MockMinguoDate();
      // Undeclared exception!
      try { 
        jSONArray0.add((-1433), (Object) mockMinguoDate0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1433, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "E{J[cT (2g|0`");
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      classLoader0.getParent();
      classLoader0.setClassAssertionStatus("E{J[cT (2g|0`", false);
      ParserConfig parserConfig0 = new ParserConfig();
      // Undeclared exception!
      try { 
        jSONArray0.getByte(9);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 9, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Class<PropertyNamingStrategy> class0 = PropertyNamingStrategy.class;
      String[] stringArray0 = new String[3];
      stringArray0[2] = "com.alibaba.fastjson.JSONArray";
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0, stringArray0);
      JSONArray jSONArray0 = new JSONArray(309);
      boolean boolean0 = jSONArray0.isEmpty();
      assertTrue(boolean0);
      
      boolean boolean1 = jSONArray0.remove((Object) null);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      jSONArray0.sort(comparator0);
      LinkedList<JSONPath.Operator> linkedList0 = new LinkedList<JSONPath.Operator>();
      JSONArray jSONArray1 = jSONArray0.fluentRetainAll(linkedList0);
      assertTrue(jSONArray1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedList<JSONArray> linkedList0 = new LinkedList<JSONArray>();
      JSONArray jSONArray1 = jSONArray0.fluentRemoveAll(linkedList0);
      JSONArray jSONArray2 = new JSONArray(jSONArray1);
      JSONArray jSONArray3 = jSONArray2.fluentRetainAll(jSONArray0);
      // Undeclared exception!
      try { 
        jSONArray3.fluentAdd(1004, (Object) jSONArray2);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1004, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getLong(954);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 954, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[1] = "PlV%";
      stringArray0[2] = "com.alibaba.fastjson.JSONArray";
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentAdd((Object) "PlV%");
      JSONArray jSONArray2 = jSONArray1.fluentRetainAll(jSONArray1);
      JSONArray jSONArray3 = jSONArray2.fluentClear();
      jSONArray3.toArray();
      jSONArray0.isEmpty();
      // Undeclared exception!
      try { 
        jSONArray1.getFloat(9);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 9, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(3151);
      LinkedList<ChronoLocalDate> linkedList0 = new LinkedList<ChronoLocalDate>();
      jSONArray0.fluentRemoveAll(linkedList0);
      // Undeclared exception!
      try { 
        jSONArray0.getDouble(9);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 9, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      int int0 = Calendar.WEEK_OF_YEAR;
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getBigDecimal(9);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 9, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = new JSONArray();
      jSONArray0.fluentSet((-1), jSONArray1);
      // Undeclared exception!
      try { 
        jSONArray1.getBooleanValue(9);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 9, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      SerializeFilter[] serializeFilterArray0 = new SerializeFilter[2];
      PascalNameFilter pascalNameFilter0 = new PascalNameFilter();
      serializeFilterArray0[0] = (SerializeFilter) pascalNameFilter0;
      JSONArray jSONArray1 = new JSONArray();
      jSONArray0.fluentAdd((Object) jSONArray1);
      jSONArray0.fluentRetainAll(jSONArray1);
      jSONArray1.fluentClear();
      // Undeclared exception!
      try { 
        MinguoEra.of(9);
        fail("Expecting exception: DateTimeException");
      
      } catch(DateTimeException e) {
         //
         // Invalid era: 9
         //
         verifyException("java.time.chrono.MinguoEra", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      LinkedList<ChronoLocalDate> linkedList0 = new LinkedList<ChronoLocalDate>();
      JSONArray jSONArray0 = new JSONArray();
      MockDate mockDate0 = new MockDate(2776, 2776, 2776, 2776, 9, 2776);
      jSONArray0.clone();
      // Undeclared exception!
      try { 
        jSONArray0.getDate(2776);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2776, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = new JSONArray(jSONArray0);
      // Undeclared exception!
      try { 
        jSONArray1.fluentRemove(126);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 126, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Class<Object> class0 = Object.class;
      JSONArray jSONArray0 = new JSONArray(912);
      LinkedList<JSONPath.Operator> linkedList0 = new LinkedList<JSONPath.Operator>();
      jSONArray0.fluentRetainAll(linkedList0);
      Feature[] featureArray0 = new Feature[0];
      // Undeclared exception!
      try { 
        JSON.parseObject("E{J[cT (2g|0`", (Type) class0, 973, featureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect {, actual error, pos 0, fastjson-version 1.2.46
         //
         verifyException("com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getInteger(9);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 9, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      LinkedList<ChronoLocalDate> linkedList0 = new LinkedList<ChronoLocalDate>();
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentSet(978, linkedList0);
      JSONArray jSONArray2 = jSONArray1.getJSONArray(978);
      jSONArray0.addAll((Collection<?>) jSONArray2);
      jSONArray0.getString(14);
      int int0 = Opcodes.PUTFIELD;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "WriteBigDecimalAsPlain");
      MockLocalDate.now();
      FileSystemHandling.shouldAllThrowIOExceptions();
      LinkedHashSet<MockMinguoDate> linkedHashSet0 = new LinkedHashSet<MockMinguoDate>();
      jSONArray1.isEmpty();
      JavaBeanInfo.getBuilderClass((JSONType) null);
      // Undeclared exception!
      try { 
        jSONArray2.getDouble(14);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 14, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Class<JSONArray> class0 = JSONArray.class;
      List<JSONArray> list0 = jSONArray0.toJavaList(class0);
      jSONArray0.addAll((Collection<?>) list0);
      jSONArray0.fluentRetainAll(list0);
      jSONArray0.setComponentType(class0);
      assertEquals(0, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      int int0 = 3151;
      JSONArray jSONArray0 = new JSONArray(3151);
      jSONArray0.indexOf((Object) null);
      LinkedList<ChronoLocalDate> linkedList0 = new LinkedList<ChronoLocalDate>();
      JSONArray jSONArray1 = jSONArray0.fluentRemoveAll(linkedList0);
      // Undeclared exception!
      try { 
        jSONArray1.addAll(1221, (Collection<?>) linkedList0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1221, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      int int0 = 3178;
      JSONArray jSONArray0 = new JSONArray(3178);
      LinkedList<ChronoLocalDate> linkedList0 = new LinkedList<ChronoLocalDate>();
      // Undeclared exception!
      try { 
        jSONArray0.toArray((String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      String[] stringArray0 = new String[4];
      JSONArray jSONArray0 = new JSONArray(321);
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      LinkedList<ObjectInputStream> linkedList0 = new LinkedList<ObjectInputStream>();
      boolean boolean1 = jSONArray0.equals("PlV%");
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      LinkedList<ChronoLocalDate> linkedList0 = new LinkedList<ChronoLocalDate>();
      int int0 = Calendar.WEEK_OF_YEAR;
      JSONArray jSONArray0 = new JSONArray(368);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JSONArray jSONArray1 = jSONArray0.fluentSet(953, linkedList0);
      ParserConfig parserConfig0 = new ParserConfig(false);
      LinkedList<ChronoLocalDate> linkedList1 = new LinkedList<ChronoLocalDate>();
      float float0 = jSONArray1.getFloatValue(109);
      assertEquals(954, jSONArray0.size());
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[1] = "PlV%";
      stringArray0[2] = "PlV%";
      int int0 = 309;
      JSONArray jSONArray0 = new JSONArray(309);
      jSONArray0.isEmpty();
      Class<ObjectInputStream> class0 = ObjectInputStream.class;
      MockHijrahDate mockHijrahDate0 = new MockHijrahDate();
      jSONArray0.fluentSet(25, mockHijrahDate0);
      // Undeclared exception!
      try { 
        jSONArray0.toJavaList(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.io.ObjectInputStream
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      LinkedList<ChronoLocalDate> linkedList0 = new LinkedList<ChronoLocalDate>();
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentSet(9, linkedList0);
      jSONArray1.getJSONArray(9);
      int int0 = 14;
      // Undeclared exception!
      try { 
        jSONArray0.getString(14);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 14, Size: 10
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentClear();
      jSONArray1.hashCode();
      int int0 = jSONArray0.lastIndexOf(jSONArray1);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      LinkedList<ChronoLocalDate> linkedList0 = new LinkedList<ChronoLocalDate>();
      int int0 = Calendar.WEEK_OF_YEAR;
      JSONArray jSONArray0 = new JSONArray();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JSONArray jSONArray1 = jSONArray0.fluentSet(953, linkedList0);
      ParserConfig parserConfig0 = new ParserConfig(false);
      jSONArray1.getBigInteger(905);
      jSONArray1.getIntValue(933);
      jSONArray0.toArray();
      jSONArray0.fluentSet(166, linkedList0);
      byte byte0 = ObjectStreamConstants.TC_BLOCKDATALONG;
      assertEquals((byte)122, byte0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      LinkedList<ChronoLocalDate> linkedList0 = new LinkedList<ChronoLocalDate>();
      int int0 = Calendar.WEEK_OF_YEAR;
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentSet(978, linkedList0);
      JSONArray jSONArray2 = jSONArray1.getJSONArray(978);
      jSONArray0.getString(18);
      jSONArray1.getJSONObject(18);
      jSONArray1.getFloatValue(1);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      jSONArray1.getByteValue(0);
      jSONArray2.fluentRetainAll(jSONArray0);
      SimplePropertyPreFilter simplePropertyPreFilter0 = null;
      try {
        simplePropertyPreFilter0 = new SimplePropertyPreFilter((String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.serializer.SimplePropertyPreFilter", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      LinkedList<ChronoLocalDate> linkedList0 = new LinkedList<ChronoLocalDate>();
      int int0 = Calendar.WEEK_OF_YEAR;
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentSet(953, linkedList0);
      jSONArray1.getBigInteger(905);
      // Undeclared exception!
      try { 
        jSONArray0.getIntValue(953);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : []
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      LinkedList<ChronoLocalDate> linkedList0 = new LinkedList<ChronoLocalDate>();
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentSet(978, linkedList0);
      jSONArray0.addAll((Collection<?>) jSONArray1);
      jSONArray0.getString(14);
      int int0 = Opcodes.PUTFIELD;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      jSONArray1.getJSONObject(14);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      jSONArray1.getFloatValue(14);
      jSONArray0.getBoolean(126);
      assertEquals(1958, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      LinkedList<ChronoLocalDate> linkedList0 = new LinkedList<ChronoLocalDate>();
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentSet(978, linkedList0);
      JSONArray jSONArray2 = jSONArray1.getJSONArray(978);
      assertEquals(979, jSONArray0.size());
      
      jSONArray0.addAll((Collection<?>) jSONArray2);
      jSONArray0.getString(14);
      int int0 = Opcodes.PUTFIELD;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "WriteBigDecimalAsPlain");
      Object object0 = new Object();
      int int1 = Opcodes.GETSTATIC;
      MockLocalDate.now();
      FileSystemHandling.shouldAllThrowIOExceptions();
      LinkedHashSet<MockMinguoDate> linkedHashSet0 = new LinkedHashSet<MockMinguoDate>();
      jSONArray1.isEmpty();
      jSONArray0.getDoubleValue(0);
      boolean boolean0 = jSONArray1.isEmpty();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      String[] stringArray0 = new String[3];
      JSONArray jSONArray0 = new JSONArray(309);
      Class<ObjectInputStream> class0 = ObjectInputStream.class;
      List<ObjectInputStream> list0 = jSONArray0.toJavaList(class0);
      boolean boolean0 = jSONArray0.containsAll(list0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      LinkedList<ChronoLocalDate> linkedList0 = new LinkedList<ChronoLocalDate>();
      JSONArray jSONArray0 = new JSONArray();
      FileSystemHandling.shouldAllThrowIOExceptions();
      jSONArray0.fluentSet(9, linkedList0);
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      LinkedList<MockThaiBuddhistDate> linkedList1 = new LinkedList<MockThaiBuddhistDate>();
      linkedList1.toArray();
      int int0 = Opcodes.IF_ICMPEQ;
      LinkedHashSet<JSONPath.Operator> linkedHashSet0 = new LinkedHashSet<JSONPath.Operator>();
      Class<MockJapaneseDate> class0 = MockJapaneseDate.class;
      // Undeclared exception!
      try { 
        parserConfig0.checkAutoType("E{J[cT (2g|0`", class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // autoType is not support. E{J[cT (2g|0`
         //
         verifyException("com.alibaba.fastjson.parser.ParserConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      LinkedList<ChronoLocalDate> linkedList0 = new LinkedList<ChronoLocalDate>();
      int int0 = Calendar.WEEK_OF_YEAR;
      JSONArray jSONArray0 = new JSONArray();
      int int1 = 953;
      JSONArray jSONArray1 = jSONArray0.fluentSet(953, linkedList0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JSONArray jSONArray2 = jSONArray1.getJSONArray(953);
      int int2 = Calendar.MONTH;
      jSONArray2.toString();
      jSONArray1.getJSONObject(23);
      // Undeclared exception!
      try { 
        jSONArray1.getFloatValue(953);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to float, value : []
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      LinkedList<ChronoLocalDate> linkedList0 = new LinkedList<ChronoLocalDate>();
      int int0 = Opcodes.RETURN;
      JSONArray jSONArray0 = new JSONArray();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JSONArray jSONArray1 = jSONArray0.fluentSet(931, linkedList0);
      ParserConfig parserConfig0 = new ParserConfig(false);
      jSONArray1.getJSONArray(931);
      jSONArray0.getString(126);
      jSONArray0.lastIndexOf((Object) null);
      jSONArray1.getJSONObject(126);
      MockJapaneseDate mockJapaneseDate0 = new MockJapaneseDate();
      jSONArray0.getShortValue(178);
      JSONArray jSONArray2 = jSONArray1.fluentRemove((Object) null);
      LocalDate localDate0 = MockLocalDate.now();
      linkedList0.add((ChronoLocalDate) localDate0);
      LinkedHashSet<MockMinguoDate> linkedHashSet0 = new LinkedHashSet<MockMinguoDate>();
      jSONArray2.isEmpty();
      Byte byte0 = new Byte((byte) (-67));
      int int1 = Calendar.AM_PM;
      assertFalse(int1 == int2);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.setRelatedArray((Object) null);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      LinkedList<ChronoLocalDate> linkedList0 = new LinkedList<ChronoLocalDate>();
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentSet(978, linkedList0);
      JSONArray jSONArray2 = jSONArray1.getJSONArray(978);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) jSONArray1);
      jSONArray2.removeIf(predicate0);
      String string0 = ParserConfig.AUTOTYPE_SUPPORT_PROPERTY;
      jSONArray1.getJSONObject(14);
      jSONArray1.getFloatValue(1);
      jSONArray0.getLongValue(1);
      LinkedList<JSONArray> linkedList1 = new LinkedList<JSONArray>();
      jSONArray2.hashCode();
      JSONArray jSONArray3 = jSONArray2.fluentClear();
      jSONArray3.remove((Object) jSONArray1);
      jSONArray2.clear();
      JSONArray jSONArray4 = new JSONArray(jSONArray0);
      jSONArray4.getBooleanValue(1);
      // Undeclared exception!
      try { 
        jSONArray3.remove(9);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 9, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      int int0 = Calendar.MARCH;
      JSONArray jSONArray0 = new JSONArray();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray1 = jSONArray0.fluentSet(2, jSONObject0);
      // Undeclared exception!
      try { 
        jSONArray1.getByteValue(2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to byte, value : {}
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      int int0 = 5137;
      JSONArray jSONArray0 = new JSONArray(5137);
      MockThaiBuddhistDate mockThaiBuddhistDate0 = new MockThaiBuddhistDate();
      jSONArray0.set(5137, mockThaiBuddhistDate0);
      // Undeclared exception!
      try { 
        jSONArray0.getShortValue(5137);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to short, value : org.evosuite.runtime.mock.java.time.chrono.MockThaiBuddhistDate@7d1f8366
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedList<ChronoLocalDate> linkedList0 = new LinkedList<ChronoLocalDate>();
      TimeZone.getAvailableIDs(3178);
      Class<JSONObject> class0 = JSONObject.class;
      // Undeclared exception!
      try { 
        jSONArray0.getObject(3178, class0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3178, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      LinkedList<ChronoLocalDate> linkedList0 = new LinkedList<ChronoLocalDate>();
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentSet(978, linkedList0);
      JSONArray jSONArray2 = jSONArray1.getJSONArray(978);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) jSONArray1);
      linkedList0.add((ChronoLocalDate) null);
      jSONArray2.removeIf(predicate0);
      String string0 = ParserConfig.AUTOTYPE_SUPPORT_PROPERTY;
      jSONArray1.getJSONObject(14);
      int int0 = 1;
      jSONArray1.getFloatValue(1);
      jSONArray0.getLongValue(1);
      FileSystemHandling.shouldAllThrowIOExceptions();
      LinkedHashSet<MockMinguoDate> linkedHashSet0 = new LinkedHashSet<MockMinguoDate>();
      jSONArray1.isEmpty();
      // Undeclared exception!
      try { 
        jSONArray1.getDoubleValue(978);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to double, value : [null]
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      LinkedList<ChronoLocalDate> linkedList0 = new LinkedList<ChronoLocalDate>();
      int int0 = Calendar.WEEK_OF_YEAR;
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentSet(978, linkedList0);
      jSONArray1.getJSONArray(978);
      jSONArray1.getJSONObject(18);
      jSONArray1.getFloatValue(1);
      // Undeclared exception!
      try { 
        jSONArray0.getBooleanValue(978);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to boolean, value : []
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      LinkedList<ChronoLocalDate> linkedList0 = new LinkedList<ChronoLocalDate>();
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentSet(953, linkedList0);
      LinkedList<MockThaiBuddhistDate> linkedList1 = new LinkedList<MockThaiBuddhistDate>();
      linkedList1.toArray();
      int int0 = Opcodes.IF_ICMPEQ;
      LinkedHashSet<JSONPath.Operator> linkedHashSet0 = new LinkedHashSet<JSONPath.Operator>();
      Class<MockJapaneseDate> class0 = MockJapaneseDate.class;
      jSONArray0.getObject(933, (Type) class0);
      Timestamp timestamp0 = jSONArray1.getTimestamp(9);
      assertNull(timestamp0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      LinkedList<ChronoLocalDate> linkedList0 = new LinkedList<ChronoLocalDate>();
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentSet(978, linkedList0);
      JSONArray jSONArray2 = jSONArray1.getJSONArray(978);
      jSONArray0.getString(14);
      int int0 = Opcodes.NEWARRAY;
      jSONArray1.getJSONObject(14);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      jSONArray0.getLongValue(1);
      linkedList0.add((ChronoLocalDate) null);
      int int1 = Opcodes.GETSTATIC;
      jSONArray1.containsAll(linkedList0);
      jSONArray1.getDate(59);
      jSONArray0.subList(59, 178);
      LinkedHashSet<PropertyNamingStrategy> linkedHashSet0 = new LinkedHashSet<PropertyNamingStrategy>();
      jSONArray0.addAll(224, (Collection<?>) linkedHashSet0);
      Object object0 = jSONArray2.getRelatedArray();
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      LinkedList<ChronoLocalDate> linkedList0 = new LinkedList<ChronoLocalDate>();
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentSet(931, linkedList0);
      jSONArray1.getJSONArray(931);
      Predicate.isEqual((Object) jSONArray1);
      String string0 = ParserConfig.AUTOTYPE_SUPPORT_PROPERTY;
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        jSONArray0.getLongValue(931);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to long, value : []
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      LinkedList<ChronoLocalDate> linkedList0 = new LinkedList<ChronoLocalDate>();
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.fluentSet(978, linkedList0);
      int int0 = Opcodes.PUTFIELD;
      Integer integer0 = new Integer(9);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Integer integer1 = new Integer(126);
      jSONArray0.indexOf("E{J[cT (2g|0`");
      // Undeclared exception!
      try { 
        jSONArray0.getBoolean(978);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to boolean, value : []
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }
}
