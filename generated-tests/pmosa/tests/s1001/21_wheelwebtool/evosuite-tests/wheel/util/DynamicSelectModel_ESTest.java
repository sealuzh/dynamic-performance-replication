/*
 * This file was automatically generated by EvoSuite
 * Mon Jul 16 16:21:36 GMT 2018
 */

package wheel.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.time.DateTimeException;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.time.temporal.ChronoField;
import java.util.Collection;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.time.chrono.MockJapaneseDate;
import org.evosuite.runtime.mock.java.time.chrono.MockMinguoDate;
import org.evosuite.runtime.mock.java.time.chrono.MockThaiBuddhistDate;
import org.junit.runner.RunWith;
import wheel.ErrorPage;
import wheel.components.Any;
import wheel.components.Component;
import wheel.components.ElExpression;
import wheel.components.FormElement;
import wheel.components.StandaloneComponent;
import wheel.components.TextArea;
import wheel.util.DynamicSelectModel;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DynamicSelectModel_ESTest extends DynamicSelectModel_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ElExpression elExpression0 = new ElExpression("");
      DynamicSelectModel dynamicSelectModel0 = null;
      try {
        dynamicSelectModel0 = new DynamicSelectModel(elExpression0, elExpression0, elExpression0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Could not create DynamicSelection model. Collection attribute was null or not an el-expression.
         //
         verifyException("wheel.util.DynamicSelectModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String string0 = "no&S\\>*@`iBrFxt";
      ElExpression elExpression0 = new ElExpression("no&S>*@`iBrFxt");
      elExpression0.codePoints();
      elExpression0.codePoints();
      elExpression0.errorMessage("no&S>*@`iBrFxt");
      String string1 = "?7_'9l<uWv\\0{l+@,Q";
      elExpression0.errorMessage("?7_'9l<uWv\u0000{l+@,Q");
      DynamicSelectModel dynamicSelectModel0 = null;
      try {
        dynamicSelectModel0 = new DynamicSelectModel(elExpression0, elExpression0, elExpression0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Could not create DynamicSelection model. Collection attribute was null or not an el-expression.
         //
         verifyException("wheel.util.DynamicSelectModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DynamicSelectModel dynamicSelectModel0 = new DynamicSelectModel();
      DynamicSelectModel dynamicSelectModel1 = dynamicSelectModel0.label("5w9}Gd3?");
      String string0 = "Could not create DynamicSelection model. Collection attribute was null or not an el-expression.";
      DynamicSelectModel dynamicSelectModel2 = dynamicSelectModel1.enumeration("Could not create DynamicSelection model. Collection attribute was null or not an el-expression.");
      DynamicSelectModel dynamicSelectModel3 = dynamicSelectModel2.translator("5w9}Gd3?");
      dynamicSelectModel1.reset();
      ErrorPage errorPage0 = new ErrorPage();
      errorPage0.tt((Object) dynamicSelectModel2);
      dynamicSelectModel1.validate();
      dynamicSelectModel3.setTopLevelComponent(errorPage0);
      dynamicSelectModel3.label("Could not create DynamicSelection model. Collection attribute was null or not an el-expression.");
      dynamicSelectModel0.collection("");
      dynamicSelectModel2.label(" evaluated to an object that is not an instance of Collection or Object[]. Can't build a dynamic ISelectModel");
      // Undeclared exception!
      try { 
        dynamicSelectModel3.translateValue(" evaluated to an object that is not an instance of Collection or Object[]. Can't build a dynamic ISelectModel");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expression  evaluated to null. Can't build a dynamic ISelectModel
         //
         verifyException("wheel.util.DynamicSelectModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DynamicSelectModel dynamicSelectModel0 = new DynamicSelectModel();
      DynamicSelectModel dynamicSelectModel1 = dynamicSelectModel0.collection("");
      // Undeclared exception!
      try { 
        dynamicSelectModel1.getOptionCount();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expression  evaluated to null. Can't build a dynamic ISelectModel
         //
         verifyException("wheel.util.DynamicSelectModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DynamicSelectModel dynamicSelectModel0 = new DynamicSelectModel();
      DynamicSelectModel dynamicSelectModel1 = dynamicSelectModel0.enumeration("-]kCxJyU");
      DynamicSelectModel dynamicSelectModel2 = dynamicSelectModel1.translator("-]kCxJyU");
      dynamicSelectModel2.validate();
      assertSame(dynamicSelectModel2, dynamicSelectModel0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DynamicSelectModel dynamicSelectModel0 = new DynamicSelectModel();
      dynamicSelectModel0.reset();
      DynamicSelectModel dynamicSelectModel1 = dynamicSelectModel0.value("");
      String string0 = "z/&*xPP";
      DynamicSelectModel dynamicSelectModel2 = dynamicSelectModel1.enumeration("z/&*xPP");
      // Undeclared exception!
      try { 
        dynamicSelectModel2.getOptionCount();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Could not evaluate expression z/&*xPP.values() to create a dynamic ISelectModel.
         //
         verifyException("wheel.components.ElExpression", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DynamicSelectModel dynamicSelectModel0 = new DynamicSelectModel();
      DynamicSelectModel dynamicSelectModel1 = dynamicSelectModel0.translator("bd a");
      DynamicSelectModel dynamicSelectModel2 = dynamicSelectModel1.enumeration("bd a");
      dynamicSelectModel1.value("");
      dynamicSelectModel1.setComponent((Component) null);
      DynamicSelectModel dynamicSelectModel3 = dynamicSelectModel2.label("dv8G;l");
      dynamicSelectModel2.validate();
      dynamicSelectModel3.getTopLevelComponent();
      dynamicSelectModel0.setComponent((Component) null);
      dynamicSelectModel0.getTopLevelComponent();
      DynamicSelectModel dynamicSelectModel4 = dynamicSelectModel2.collection("dv8G;l");
      dynamicSelectModel4.empty(dynamicSelectModel2);
      dynamicSelectModel2.setTopLevelComponent((StandaloneComponent) null);
      // Undeclared exception!
      try { 
        dynamicSelectModel3.getValue(0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Could not evaluate expression dv8G;l to create a dynamic ISelectModel.
         //
         verifyException("wheel.components.ElExpression", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DynamicSelectModel dynamicSelectModel0 = new DynamicSelectModel();
      String string0 = "!jo`\"#";
      DynamicSelectModel dynamicSelectModel1 = dynamicSelectModel0.value("!jo`\"#");
      dynamicSelectModel1.getComponent();
      MockMinguoDate mockMinguoDate0 = new MockMinguoDate();
      ZoneOffset zoneOffset0 = ZoneOffset.MIN;
      // Undeclared exception!
      try { 
        ZoneOffset.of("!jo`\"#");
        fail("Expecting exception: DateTimeException");
      
      } catch(DateTimeException e) {
         //
         // Invalid ID for ZoneOffset, non numeric characters found: !jo`\"#
         //
         verifyException("java.time.ZoneOffset", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DynamicSelectModel dynamicSelectModel0 = new DynamicSelectModel();
      DynamicSelectModel dynamicSelectModel1 = dynamicSelectModel0.label("5w9}Gd3?");
      dynamicSelectModel1.collection(": toG ");
      // Undeclared exception!
      try { 
        dynamicSelectModel1.getLabel(0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expression : toG  evaluated to an object that is not an instance of Collection or Object[]. Can't build a dynamic ISelectModel
         //
         verifyException("wheel.util.DynamicSelectModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DynamicSelectModel dynamicSelectModel0 = new DynamicSelectModel();
      String string0 = "5w9}Gd3?";
      DynamicSelectModel dynamicSelectModel1 = dynamicSelectModel0.label("5w9}Gd3?");
      DynamicSelectModel dynamicSelectModel2 = dynamicSelectModel1.enumeration("Could not create DynamicSelection model. Collection attribute was null or not an el-expression.");
      dynamicSelectModel2.translator("5w9}Gd3?");
      ErrorPage errorPage0 = new ErrorPage();
      String string1 = "";
      TextArea textArea0 = new TextArea(errorPage0, "", "");
      FormElement formElement0 = textArea0.value("0&`u");
      Any any0 = new Any(formElement0, "");
      any0.selectModel();
      String string2 = ": to ";
      DynamicSelectModel dynamicSelectModel3 = dynamicSelectModel2.collection(": to ");
      textArea0._classReferenceFromHints();
      // Undeclared exception!
      try { 
        dynamicSelectModel3.getOptionCount();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expression : to  evaluated to an object that is not an instance of Collection or Object[]. Can't build a dynamic ISelectModel
         //
         verifyException("wheel.util.DynamicSelectModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DynamicSelectModel dynamicSelectModel0 = new DynamicSelectModel();
      MockJapaneseDate mockJapaneseDate0 = new MockJapaneseDate();
      DynamicSelectModel dynamicSelectModel1 = new DynamicSelectModel();
      DynamicSelectModel dynamicSelectModel2 = dynamicSelectModel0.collection("org.mvel.ast.StaticImportNode");
      dynamicSelectModel2.collection("[]");
      Collection collection0 = dynamicSelectModel0.getObjects();
      assertNotNull(collection0);
  }
}
