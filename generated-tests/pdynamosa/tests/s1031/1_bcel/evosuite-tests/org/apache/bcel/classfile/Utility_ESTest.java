/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 24 06:28:13 GMT 2019
 */

package org.apache.bcel.classfile;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedWriter;
import java.io.ByteArrayOutputStream;
import java.io.DataInput;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.EOFException;
import java.io.File;
import java.io.FilterOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.util.Locale;
import java.util.zip.ZipException;
import org.apache.bcel.Constants;
import org.apache.bcel.classfile.Code;
import org.apache.bcel.classfile.Constant;
import org.apache.bcel.classfile.ConstantClass;
import org.apache.bcel.classfile.ConstantDouble;
import org.apache.bcel.classfile.ConstantFieldref;
import org.apache.bcel.classfile.ConstantFloat;
import org.apache.bcel.classfile.ConstantInteger;
import org.apache.bcel.classfile.ConstantInterfaceMethodref;
import org.apache.bcel.classfile.ConstantInvokeDynamic;
import org.apache.bcel.classfile.ConstantLong;
import org.apache.bcel.classfile.ConstantMethodHandle;
import org.apache.bcel.classfile.ConstantMethodType;
import org.apache.bcel.classfile.ConstantMethodref;
import org.apache.bcel.classfile.ConstantNameAndType;
import org.apache.bcel.classfile.ConstantPool;
import org.apache.bcel.classfile.ConstantString;
import org.apache.bcel.classfile.ConstantUtf8;
import org.apache.bcel.classfile.EmptyVisitor;
import org.apache.bcel.classfile.LocalVariable;
import org.apache.bcel.classfile.LocalVariableTable;
import org.apache.bcel.classfile.LocalVariableTypeTable;
import org.apache.bcel.classfile.Method;
import org.apache.bcel.classfile.Utility;
import org.apache.bcel.util.ByteSequence;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Utility_ESTest extends Utility_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)114;
      byteArray0[1] = (byte) (-96);
      byteArray0[3] = (byte) (-96);
      byteArray0[4] = (byte)13;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte)76;
      byteArray1[1] = (byte)13;
      boolean boolean0 = Utility.equals(byteArray1, byteArray1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Utility.classOrInterface(76);
      ConstantDouble constantDouble0 = new ConstantDouble(76);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)78;
      byteArray0[2] = (byte)125;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string0 = "8)Ok|vvMi>R'ls";
      try { 
        Utility.typeOfSignature("8)Ok|vvMi>R'ls");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 8)Ok|vvMi>R'ls
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)75;
      byteArray0[5] = (byte)17;
      byteArray0[2] = (byte)53;
      byteArray0[3] = (byte)75;
      byteArray0[4] = (byte)75;
      byteArray0[5] = (byte) (-108);
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-108), (-1604), false);
      // Undeclared exception!
      try { 
        Utility.getSignature((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Utility.printArray((Object[]) null, false);
      boolean boolean0 = Utility.isSet(142, 170);
      assertFalse(boolean0);
      
      String string0 = Utility.format((-2681), 322, true, '%');
      assertEquals("-2681%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%", string0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-124);
      byteArray0[1] = (byte)108;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Utility.methodTypeToSignature(")wD<#\fBg5%/o2", (String[]) null);
      byte[] byteArray0 = new byte[9];
      byte byte0 = (byte)102;
      byteArray0[0] = (byte)102;
      byteArray0[1] = (byte) (-2);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-37);
      byteArray0[4] = (byte)54;
      byteArray0[5] = (byte)57;
      // Undeclared exception!
      try { 
        Utility.replace("monitorenter", (String) null, ")wD<#\fBg5%/o2");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      String string0 = Utility.methodSignatureReturnType("LJavaClass/P2debug;V");
      assertEquals("JavaClass.P2debug", string0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)112;
      byteArray0[1] = (byte)4;
      byteArray0[2] = (byte)66;
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte)112;
      byteArray1[1] = (byte)66;
      byteArray1[2] = (byte)66;
      byteArray1[3] = (byte)66;
      byteArray1[4] = (byte)66;
      byteArray1[5] = (byte)112;
      byteArray1[6] = (byte)66;
      boolean boolean0 = Utility.equals(byteArray0, byteArray1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-108);
      byteArray0[1] = (byte) (-90);
      byteArray0[2] = (byte) (-65);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantUtf8.getCachedInstance("aconst_null");
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteSequence0, constantPool0, false);
      try { 
        Utility.decode(" fields:\n", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      String[] stringArray0 = Constants.SHORT_TYPE_NAMES;
      String string0 = Utility.compactClassName(":%sGK", "athro+2w", false);
      assertEquals(":%sGK", string0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)43;
      byteArray0[1] = (byte)39;
      byteArray0[2] = (byte)43;
      byteArray0[3] = (byte)43;
      ConstantInteger constantInteger0 = new ConstantInteger(1905);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[8];
      constantArray0[0] = (Constant) constantInteger0;
      constantArray0[1] = (Constant) constantInteger0;
      constantArray0[2] = (Constant) constantInteger0;
      constantArray0[3] = (Constant) constantInteger0;
      constantArray0[4] = (Constant) constantInteger0;
      constantArray0[5] = (Constant) constantInteger0;
      constantArray0[6] = (Constant) constantInteger0;
      constantArray0[7] = (Constant) constantInteger0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      Utility.codeToString(byteSequence0, constantPool1, false);
      ConstantPool constantPool2 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool2, 1905, 3407, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      String string0 = "qj\" JM8V(%'oSTS7y*V";
      Utility.compactClassName("qj\" JM8V(%'oSTS7y*V", true);
      String string1 = "$:qn,X<UmK-bVk.WG!";
      Utility.compactClassName("$:qn,X<UmK-bVk.WG!", "", true);
      Utility.setBit((-4000), 0);
      // Undeclared exception!
      try { 
        Utility.signatureToString("-X%D[qeT0e66o{xyP");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `-X%D[qeT0e66o{xyP'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)84;
      byteArray0[1] = (byte)37;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "breakpoint");
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals("bastore", string0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      String string0 = "";
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("", "", "faload", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ", length = ");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)61;
      byteArray0[1] = (byte) (-67);
      byteArray0[2] = (byte) (-115);
      byteArray0[3] = (byte)86;
      byteArray0[4] = (byte)20;
      byteArray0[5] = (byte) (-115);
      byteArray0[6] = (byte)13;
      byteArray0[7] = (byte)29;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readChar();
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("f2d", string0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.compactClassName("0U", (String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      Utility.printArray(objectArray0, false, false);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("", "Tt'W|[\"c4ZOI", "");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("N},Ho");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `N},Ho'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-85);
      byteArray0[1] = (byte) (-85);
      byteArray0[2] = (byte)66;
      byteArray0[3] = (byte) (-85);
      byteArray0[4] = (byte)66;
      byteArray0[5] = (byte)66;
      byteArray0[6] = (byte)66;
      byteArray0[8] = (byte)66;
      byteArray0[8] = (byte) (-85);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      try { 
        Utility.codeToString(byteSequence1, constantPool0, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[3];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool(byteSequence0);
      ConstantPool constantPool1 = constantPool0.copy();
      Utility.codeToString(byteSequence0, constantPool1, true);
      Constant[] constantArray0 = new Constant[3];
      ConstantDouble constantDouble0 = new ConstantDouble(3263.0851328);
      constantArray0[0] = (Constant) constantDouble0;
      ConstantFloat constantFloat0 = new ConstantFloat(938.0F);
      constantArray0[1] = (Constant) constantFloat0;
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(byteSequence1);
      ConstantMethodHandle constantMethodHandle1 = new ConstantMethodHandle(constantMethodHandle0);
      constantArray0[2] = (Constant) constantMethodHandle1;
      ConstantPool constantPool2 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteArray0, constantPool2, (-979), 1581, true);
      assertEquals("0:    nop\n1:    nop\n2:    nop\n", string0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("[]");
      assertEquals((byte)13, byte0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Utility.typeOfSignature("+FE01}kg]-24e({:");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)51;
      byteArray0[1] = (byte)6;
      byteArray0[2] = (byte)6;
      byteArray0[3] = (byte)6;
      byteArray0[4] = (byte)6;
      byteArray0[5] = (byte) (-74);
      byteArray0[6] = (byte)6;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[1];
      ConstantFloat constantFloat0 = new ConstantFloat((byte) (-74));
      constantArray0[0] = (Constant) constantFloat0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      String string0 = Utility.codeToString(byteSequence0, constantPool1, false);
      assertEquals("baload", string0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-111);
      byteArray0[1] = (byte)39;
      byteArray0[2] = (byte)125;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-126);
      byteArray0[5] = (byte) (-58);
      byteArray0[6] = (byte) (-71);
      byteArray0[7] = (byte) (-69);
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-126), 507);
      Utility.convertString("+UT");
      // Undeclared exception!
      try { 
        Utility.signatureToString("0:    i2b\n1:    dload_1\n2:    lushr\n3:    nop\n4:    ixor\n5:    ifnull\t\t#-17984\n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `0:    i2b
         // 1:    dload_1
         // 2:    lushr
         // 3:    nop
         // 4:    ixor
         // 5:    ifnull\t\t#-17984
         // '
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-7);
      byteArray0[1] = (byte) (-86);
      byteArray0[2] = (byte) (-96);
      byteArray0[3] = (byte)102;
      byteArray0[4] = (byte) (-74);
      byteArray0[5] = (byte)83;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-96), (-3006), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    <illegal opcode>
         // 1:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "int");
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      String string0 = Utility.classOrInterface(91);
      assertEquals("class", string0);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray1 = new byte[0];
      Utility.codeToString(byteArray1, constantPool0, (-493), 188, false);
      int int0 = Utility.setBit(3, 211);
      assertEquals(524291, int0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)87;
      byteArray0[1] = (byte) (-81);
      byteArray0[2] = (byte)71;
      byteArray0[3] = (byte) (-121);
      byteArray0[4] = (byte) (-28);
      byteArray0[5] = (byte)28;
      byteArray0[6] = (byte)88;
      byteArray0[7] = (byte)61;
      Constant[] constantArray0 = new Constant[3];
      ConstantFloat constantFloat0 = new ConstantFloat((byte)61);
      constantArray0[0] = (Constant) constantFloat0;
      ConstantMethodref constantMethodref0 = new ConstantMethodref((byte)61, (byte) (-28));
      constantArray0[1] = (Constant) constantMethodref0;
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getInstance("+FE01}]-24e({:");
      constantArray0[2] = (Constant) constantUtf8_0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, (int) (byte)87, 246, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-107);
      byteArray0[1] = (byte) (-62);
      byteArray0[2] = (byte) (-84);
      byteArray0[3] = (byte)127;
      byteArray0[4] = (byte) (-27);
      byteArray0[5] = (byte) (-61);
      byteArray0[6] = (byte) (-53);
      byteArray0[7] = (byte)81;
      byteArray0[8] = (byte) (-81);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readByte();
      byteSequence0.readUnsignedShort();
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("land", string0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      boolean boolean0 = false;
      Utility.signatureToString("CB{[1]AYvK2", false);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)50;
      byte byte0 = (byte)47;
      byteArray0[2] = (byte)9;
      byte byte1 = (byte) (-28);
      byteArray0[3] = (byte) (-28);
      byteArray0[4] = (byte)49;
      byteArray0[5] = (byte)9;
      byteArray0[6] = (byte)74;
      byteArray0[7] = (byte) (-47);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      try { 
        Utility.methodSignatureArgumentTypes("l= ODN~}>A*", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: l= ODN~}>A*
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)34;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-52);
      byteArray0[3] = (byte) (-28);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      String string0 = Utility.toHexString(byteArray0);
      assertEquals("22 00 cc e4", string0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Utility.compactClassName("new", false);
      byte[] byteArray0 = Utility.decode("ustore_1", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      try { 
        Utility.methodSignatureArgumentTypes("B3c", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: B3c
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)58;
      byteArray0[1] = (byte)58;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("astore\t\t%58", string0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      String[] stringArray0 = Constants.CLASS_TYPE_NAMES;
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-82);
      byteArray0[1] = (byte) (-74);
      byteArray0[2] = (byte) (-105);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)43;
      byteArray0[5] = (byte)75;
      byteArray0[6] = (byte) (-64);
      byteArray0[7] = (byte)88;
      byteArray0[8] = (byte) (-101);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 123, (int) (byte)43);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)32;
      byteArray0[1] = (byte) (-64);
      byteArray0[2] = (byte) (-112);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("lload_2", string0);
      
      try { 
        Utility.typeOfMethodSignature("lload_2");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: lload_2
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.compactClassName((String) null, (String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      boolean boolean0 = Utility.isJavaIdentifierPart('r');
      assertTrue(boolean0);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("S6");
      Locale locale0 = Locale.CHINESE;
      Locale locale1 = Locale.TRADITIONAL_CHINESE;
      locale0.getDisplayName(locale1);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) "S6";
      objectArray0[1] = (Object) "ZaH<'~&3cQ;cxH6";
      objectArray0[2] = (Object) mockPrintWriter0;
      objectArray0[3] = (Object) locale0;
      objectArray0[4] = (Object) "S6";
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "ZaH<'~&3cQ;cxH6", objectArray0);
      Object[] objectArray1 = new Object[8];
      objectArray1[0] = (Object) locale0;
      Object object0 = new Object();
      objectArray1[1] = object0;
      objectArray1[2] = (Object) "S6";
      objectArray1[3] = (Object) locale0;
      objectArray1[4] = (Object) locale0;
      Object object1 = new Object();
      objectArray1[5] = object1;
      objectArray1[6] = (Object) printWriter0;
      objectArray1[7] = (Object) "ZaH<'~&3cQ;cxH6";
      Utility.printArray(printWriter0, objectArray1);
      String string0 = Utility.format((-581), (-581), false, '*');
      assertEquals("-581", string0);
      
      String string1 = Utility.accessToString(1530);
      assertEquals("private static final synchronized volatile transient native abstract", string1);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)57;
      byteArray0[1] = (byte)57;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("dstore\t\t%57", string0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)32;
      byteArray0[1] = (byte) (-64);
      byteArray0[2] = (byte) (-112);
      try { 
        Utility.typeOfSignature("@NT`>!L!%U");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: @NT`>!L!%U
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      try { 
        Utility.typeOfSignature("&@H4/CPv]");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: &@H4/CPv]
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Utility.classOrInterface(76);
      Utility.convertString("K&mf6^QHj;MsU#<Ht;%");
      // Undeclared exception!
      try { 
        Utility.signatureToString("K&mf6^QHj;MsU#<Ht;%", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `K&mf6^QHj;MsU#<Ht;%'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Utility.classOrInterface(76);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-88);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "breakpoint");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-112);
      byteArray0[1] = (byte)93;
      byteArray0[0] = (byte) (-92);
      byteArray0[3] = (byte)40;
      byteArray0[4] = (byte)16;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals("if_icmple\t\t#23808", string0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte)76;
      try { 
        Utility.typeOfSignature("Q]H'psEl");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Q]H'psEl
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-82);
      byteArray0[2] = (byte) (-82);
      byteArray0[3] = (byte) (-64);
      byteArray0[4] = (byte) (-64);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("freturn", string0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      String string0 = Utility.methodTypeToSignature(")wD<#\fBg5%/o2", (String[]) null);
      assertEquals("()L)wD<#;", string0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)102;
      byteArray0[1] = (byte) (-2);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-37);
      byteArray0[4] = (byte)54;
      byteArray0[5] = (byte)57;
      byteArray0[6] = (byte)64;
      byteArray0[7] = (byte) (-35);
      byteArray0[8] = (byte)24;
      String string1 = Utility.encode(byteArray0, true);
      assertEquals("$l$8b$I$A$A$A$A$A$A$A", string1);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)100;
      byteArray0[2] = (byte) (-99);
      try { 
        Utility.typeOfSignature(".zip");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: .zip
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Utility.clearBit(1270, 1270);
      // Undeclared exception!
      try { 
        Utility.signatureToString("E)76$cX;^", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `E)76$cX;^'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      ConstantDouble constantDouble0 = new ConstantDouble(2093.3198080331244);
      byte[] byteArray0 = new byte[23];
      byteArray0[0] = (byte)78;
      byteArray0[1] = (byte)78;
      byteArray0[2] = (byte) (-58);
      byteArray0[3] = (byte)78;
      byteArray0[4] = (byte)78;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readShort();
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getCachedInstance("#,+");
      FileSystemHandling.shouldAllThrowIOExceptions();
      Constant[] constantArray0 = new Constant[4];
      constantArray0[0] = (Constant) constantDouble0;
      constantArray0[2] = (Constant) constantUtf8_0;
      constantArray0[3] = (Constant) constantUtf8_0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("ifnull\t\t#20048", string0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      String string0 = "KjiHeEs1\"#3aY_-8B";
      try { 
        Utility.methodSignatureReturnType("KjiHeEs1\"#3aY_-8B");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `KjiHeEs1\"#3aY_-8B'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("doubledouble", false);
      Utility.fillup(",$", 132, false, 'I');
      Utility.format(658, (byte) (-74), true, 'y');
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      Utility.codeToString(byteSequence0, constantPool1, true);
      String string0 = "urV\"J+W+O";
      boolean boolean0 = true;
      Code code0 = new Code(658, 39, byteSequence0, constantPool1);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-75);
      byteArray0[1] = (byte) (-57);
      byteArray0[2] = (byte)3;
      byteArray0[3] = (byte)111;
      byteArray0[4] = (byte)18;
      byteArray0[5] = (byte)85;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-38);
      byteArray0[1] = (byte)127;
      byteArray0[2] = (byte)6;
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte)65;
      byteArray1[1] = (byte)6;
      boolean boolean0 = Utility.equals(byteArray0, byteArray1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-7);
      byteArray0[1] = (byte) (-112);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-7), (-2373));
      assertEquals("0:    <illegal opcode>\n1:    d2f\n", string0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      try { 
        Utility.typeOfSignature("-_*nj248fm6e[:;o'");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: -_*nj248fm6e[:;o'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Utility.classOrInterface(42);
      String string0 = Utility.format(42, 1484, true, '=');
      try { 
        Utility.typeOfSignature(string0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)60;
      try { 
        Utility.typeOfSignature("%_+`mOenZ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: %_+`mOenZ
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)57;
      byteArray0[1] = (byte)37;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("dstore\t\t%37", string0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      String string0 = Utility.getSignature("@U4uw!P");
      assertEquals("L@U4uw!P;", string0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      byte byte0 = (byte) (-114);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)92;
      byteArray0[1] = (byte)13;
      byteArray0[2] = (byte) (-87);
      byteArray0[3] = (byte)13;
      byteArray0[4] = (byte)13;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      // Undeclared exception!
      try { 
        Utility.signatureToString("boolean", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `boolean'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      String string0 = Utility.accessToString(18, true);
      assertEquals("private final", string0);
      
      String string1 = Utility.compactClassName("gz@=PI\"", true);
      assertEquals("gz@=PI\"", string1);
      
      short short0 = Utility.searchOpcode("gz@=PI\"");
      assertEquals((short) (-1), short0);
      
      String string2 = Utility.fillup("laload", 221, true, '<');
      assertEquals("laload<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<", string2);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)32;
      byteArray0[1] = (byte) (-64);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readUnsignedByte();
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)34;
      byteArray0[1] = (byte)0;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byteArray0[3] = (byte) (-28);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      Utility.compactClassName("fload_0", "=", false);
      try { 
        Utility.typeOfMethodSignature("fload_0");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: fload_0
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte)26;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)26, 176);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      String string0 = Utility.compactClassName("");
      assertEquals("", string0);
      
      boolean boolean0 = true;
      try { 
        Utility.typeOfSignature("\"");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: \"
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Utility.isSet((-1672), (-1672));
      Utility.compactClassName("]X:e4sjuW");
      Utility.accessToString((-1672), true);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-107);
      byteArray0[1] = (byte) (-72);
      byteArray0[2] = (byte) (-51);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)88;
      byteArray0[5] = (byte) (-112);
      byteArray0[6] = (byte)98;
      byteArray0[7] = (byte)87;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 629, (int) (byte)88);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Utility.classOrInterface(60);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-101);
      byteArray0[1] = (byte) (-101);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)88, 108);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Utility.classOrInterface(84);
      Object[] objectArray0 = new Object[0];
      // Undeclared exception!
      try { 
        Utility.printArray((PrintWriter) null, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      try { 
        Utility.typeOfSignature("#ISI}~$?Lo_b[J,");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: #ISI}~$?Lo_b[J,
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      String string0 = "return";
      String[] stringArray0 = new String[3];
      stringArray0[0] = "return";
      stringArray0[1] = "<qv>rhd*G:O9i#%K}:V";
      stringArray0[2] = "return";
      Utility.methodTypeToSignature("return", stringArray0);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("(Lreturn;L<qv>rhd*G:O9i#%K}:V;Lreturn;)Lreturn;", "Unreachable default case reached!", "/6e");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `qv>rhd*G:O9i#%K}:V;Lreturn;)Lreturn;'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Utility.classOrInterface(51);
      Utility.fillup("class", (-1132), true, '1');
      // Undeclared exception!
      try { 
        Utility.typeOfMethodSignature((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      String string0 = Utility.compactClassName("LJavClass/P2debug;V", false);
      assertEquals("LJavClass.P2debug;V", string0);
      
      byte[] byteArray0 = Utility.decode("LJavClass.P2debug;V", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readUnsignedByte();
      byteSequence0.readUnsignedShort();
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      String string2 = Utility.replace("fneg", "LJavClass.P2debug;V", "LJavClass.P2debug;V");
      assertTrue(string2.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("'", "", "getfield");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: '
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-108);
      FileSystemHandling.shouldAllThrowIOExceptions();
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      String string1 = Utility.replace("lcmp", "Ghu/Su@0;:a?%k", "lcmp");
      assertTrue(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      ConstantDouble constantDouble0 = new ConstantDouble((byte) (-117));
      Utility.compactClassName("R/qx1KuB\"%#.G", false);
      Utility.decode("R/qx1KuB\"%#.G", false);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-117);
      byteArray0[1] = (byte)125;
      byteArray0[2] = (byte) (-117);
      byteArray0[3] = (byte) (-117);
      byteArray0[4] = (byte)125;
      byteArray0[5] = (byte) (-117);
      byteArray0[6] = (byte)125;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readUnsignedShort();
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("f2i", string0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      String string0 = Utility.printArray(objectArray0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("z", false);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "z";
      objectArray0[1] = (Object) "z";
      FileSystemHandling.shouldAllThrowIOExceptions();
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Utility.classOrInterface(79);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString((String) null, "dreturn", (String) null, false, (LocalVariableTable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) "LJavClass/P2debug;V";
      objectArray0[1] = (Object) "LJavClass/P2debug;V";
      objectArray0[2] = (Object) "LJavClass/P2debug;V";
      objectArray0[3] = (Object) "LJavClass/P2debug;V";
      objectArray0[4] = (Object) "LJavClass/P2debug;V";
      objectArray0[5] = (Object) "LJavClass/P2debug;V";
      objectArray0[6] = (Object) "LJavClass/P2debug;V";
      objectArray0[7] = (Object) "LJavClass/P2debug;V";
      Object object0 = new Object();
      objectArray0[8] = object0;
      Utility.printArray(objectArray0);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-16);
      byteArray0[1] = (byte)124;
      byteArray0[2] = (byte)91;
      byteArray0[3] = (byte)59;
      byteArray0[4] = (byte)89;
      byteArray0[5] = (byte)8;
      byteArray0[6] = (byte)71;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 1240, (int) (byte) (-16));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      int int0 = Utility.clearBit((-900), 58);
      assertEquals((-67109764), int0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      try { 
        Utility.typeOfSignature("NB{KG]Y4UhgNlWeGL");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: NB{KG]Y4UhgNlWeGL
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte) (-90);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readByte();
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      try { 
        Utility.methodSignatureReturnType("if_acmpne\t\t#1", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `if_acmpne\t\t#1'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      String string0 = "LJavaClass/P2debug;V";
      byte[] byteArray0 = new byte[0];
      Utility.codeToString(byteArray0, (ConstantPool) null, (-889275714), 18);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 1521, 71, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.fillup((String) null, 0, false, '!');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)123;
      byteArray0[1] = (byte) (-25);
      byteArray0[2] = (byte)4;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byte[] byteArray1 = new byte[0];
      ByteSequence byteSequence1 = new ByteSequence(byteArray1);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence2, (ConstantPool) null, false);
      assertEquals("lshr", string0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      String string0 = "i=>U";
      Utility.searchOpcode("i=>U");
      Utility.isSet((short) (-1), (short) (-1));
      String string1 = "synthetic";
      try { 
        Utility.typeOfSignature("synthetic");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: synthetic
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      String string0 = Utility.compactClassName("LJavClass/P2debug;V", false);
      assertEquals("LJavClass.P2debug;V", string0);
      
      byte[] byteArray0 = Utility.decode("LJavClass.P2debug;V", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readUnsignedShort();
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("ladd", string1);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Utility.signatureToString("Dont call getValueFloat() on a non FLOAT ElementValue");
      // Undeclared exception!
      try { 
        Utility.methodSignatureArgumentTypes((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Utility.printArray(objectArray0);
      String string0 = "class";
      try { 
        Utility.methodSignatureReturnType("class");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `class'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Utility.decode("!s2fYx}w8M=K*|/", false);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)93;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)40;
      byteArray0[3] = (byte)34;
      byteArray0[4] = (byte)57;
      byteArray0[5] = (byte)55;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.markSupported();
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      // Undeclared exception!
      try { 
        Utility.signatureToString("!s2fYx}w8M=K*|/", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `!s2fYx}w8M=K*|/'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Utility.compactClassName("LJavClass/P2debug;V", false);
      byte[] byteArray0 = Utility.decode("LJavClass.P2debug;V", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 91, 91, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "The array of suffixes must not be null");
      Utility.typeOfSignature("FER?YSS");
      Utility.fillup("lneg", 53, true, '2');
      Utility.classOrInterface(53);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Utility.fillup("Constant pool at index ", 53, true, 'a');
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "Constant pool at index ";
      objectArray0[1] = (Object) "Constant pool at index aaaaaaaaaaaaaaaaaaaaaaaaaaaaaa";
      Utility.printArray(objectArray0);
      Utility.classOrInterface(236);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)6;
      byteArray0[1] = (byte)6;
      byteArray0[2] = (byte)6;
      byteArray0[3] = (byte)6;
      byteArray0[4] = (byte)6;
      byteArray0[5] = (byte)63;
      byteArray0[6] = (byte)6;
      byteArray0[7] = (byte)6;
      byteArray0[8] = (byte)6;
      Utility.toHexString(byteArray0);
      // Undeclared exception!
      try { 
        Utility.signatureToString("NhylMN,.+#a", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `NhylMN,.+#a'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "putfield");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-124);
      byteArray0[1] = (byte) (-124);
      byteArray0[2] = (byte) (-124);
      byteArray0[3] = (byte) (-124);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.skip((byte) (-124));
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      String string1 = Utility.compactClassName("iinc\t\t%132\t-124");
      assertTrue(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence1.readByte();
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) byteSequence1;
      objectArray0[1] = (Object) "nop";
      objectArray0[2] = (Object) byteSequence1;
      objectArray0[3] = (Object) byteSequence0;
      objectArray0[4] = (Object) "nop";
      Utility.printArray(objectArray0, true, true);
      int int0 = Utility.setBit((byte)0, (byte)0);
      assertEquals(1, int0);
      
      String string0 = Utility.encode(byteArray0, true);
      assertEquals("$l$8b$I$A$A$A$A$A$A$A", string0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Utility.convertString("bc6\"0kmV:/b@93A");
      try { 
        Utility.methodSignatureArgumentTypes("DHv2t~!)d IyW");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: DHv2t~!)d IyW
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      Object object5 = new Object();
      objectArray0[5] = object5;
      boolean boolean0 = true;
      boolean boolean1 = false;
      Utility.printArray(objectArray0, true, false);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "java.lang.Character";
      stringArray0[1] = "{java.lang.Object@479d42ac, java.lang.Object@4b811c6b, java.lang.Object@164de636, java.lang.Object@1573d207, java.lang.Object@38d66a27, java.lang.Object@7bf75b12}";
      stringArray0[2] = "java.lang.Character";
      Utility.methodTypeToSignature("java.lang.Character", stringArray0);
      Utility.printArray((Object[]) stringArray0, false);
      Utility.printArray((Object[]) stringArray0);
      Utility.isJavaIdentifierPart('2');
      try { 
        Utility.methodSignatureReturnType("java.lang.Character", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `java.lang.Character'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-24);
      byteArray0[1] = (byte) (-24);
      byteArray0[2] = (byte) (-24);
      String string0 = Utility.printArray((Object[]) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-85);
      byte[] byteArray1 = Utility.decode("UyH4^-u8", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("castore", string0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      String string0 = Utility.compactClassName("LJavClass/P2debug;V", false);
      assertEquals("LJavClass.P2debug;V", string0);
      
      byte[] byteArray0 = Utility.decode("LJavClass.P2debug;V", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte)60;
      byteArray1[1] = (byte)57;
      byteArray1[2] = (byte)24;
      byteArray1[3] = (byte)24;
      ByteSequence byteSequence2 = new ByteSequence(byteArray1);
      byteSequence2.readUnsignedShort();
      String string1 = Utility.codeToString(byteSequence2, (ConstantPool) null, false);
      assertEquals("dload\t\t%24", string1);
      
      short short0 = Utility.searchOpcode("?>...");
      assertEquals((short) (-1), short0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      String string0 = Utility.compactClassName("LJavClass/P2debug;V", false);
      assertEquals("LJavClass.P2debug;V", string0);
      
      byte[] byteArray0 = Utility.decode("LJavClass.P2debug;V", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("astore_1", string1);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      String string0 = ", high = ";
      boolean boolean0 = false;
      try { 
        Utility.methodSignatureReturnType(", high = ", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `, high = '
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      Object[] objectArray0 = new Object[0];
      Utility.printArray(objectArray0, true, false);
      Utility.fillup("h", 36, false, '+');
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)70;
      byteArray0[1] = (byte) (-67);
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte) (-1);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals("fstore_3", string0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-21);
      byteArray0[1] = (byte) (-56);
      byteArray0[2] = (byte) (-22);
      byteArray0[3] = (byte) (-56);
      byteArray0[4] = (byte) (-22);
      byteArray0[5] = (byte) (-22);
      byteArray0[6] = (byte) (-22);
      byteArray0[7] = (byte) (-22);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(byteSequence0);
      ConstantMethodHandle constantMethodHandle1 = new ConstantMethodHandle(constantMethodHandle0);
      Constant[] constantArray0 = new Constant[5];
      constantArray0[0] = (Constant) constantMethodHandle1;
      constantArray0[1] = (Constant) constantMethodHandle0;
      constantArray0[2] = (Constant) constantMethodHandle1;
      constantArray0[3] = (Constant) constantMethodHandle0;
      constantArray0[4] = (Constant) constantMethodHandle0;
      constantMethodHandle0.toString();
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-22), (int) (byte) (-56), true);
      assertEquals("0:    <illegal opcode>\n1:    goto_w\t\t#-355931413\n6:    <illegal opcode>\n7:    <illegal opcode>\n", string0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)43;
      byteArray0[1] = (byte)39;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[3];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("aload_1", string0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      try { 
        Utility.typeOfSignature(":");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: :
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Utility.isJavaIdentifierPart('a');
      // Undeclared exception!
      try { 
        Utility.signatureToString("5!G+^9GmYMI+fJwevY", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `5!G+^9GmYMI+fJwevY'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Utility.isSet(214, 1895);
      Utility.isJavaIdentifierPart('i');
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Utility.printArray(objectArray0, true);
      Utility.accessToString(214, false);
      Utility.compactClassName("", "", true);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "{java.lang.Object@4a62a62a}";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "";
      stringArray0[6] = "{java.lang.Object@4a62a62a}";
      Utility.methodTypeToSignature("", stringArray0);
      Utility.isSet(18, 1820);
      Utility.setBit((-947), 3846);
      Utility.printArray((Object[]) stringArray0, true);
      FilterOutputStream filterOutputStream0 = new FilterOutputStream((OutputStream) null);
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream(filterOutputStream0, true, "");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // 
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Utility.replace("orU.apache.commons.io.filefilter.WildcardFil5Fzlter", "orU.apache.commons.io.filefilter.WildcardFil5Fzlter", "yK;e?>AZQ");
      try { 
        Utility.methodSignatureArgumentTypes("yK;e?>AZQ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: yK;e?>AZQ
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Utility.classOrInterface(87);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "if_icmpgt");
      try { 
        Utility.methodSignatureReturnType("GCqRB9a.wx64!,`Yb");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `GCqRB9a.wx64!,`Yb'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      try { 
        Utility.typeOfSignature("R");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: R
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      String string0 = Utility.replace("<[BH", "<[BH", "<[BH");
      assertEquals("<[BH", string0);
      
      byte[] byteArray0 = Utility.decode("<[BH", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("istore_1", string1);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      String string0 = "\t";
      Utility.convertString("\t");
      Utility.setBit((-2404), 1138);
      try { 
        Utility.typeOfSignature("\t");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: \t
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Utility.compactClassName("LJavClass/P2debug;V", false);
      byte[] byteArray0 = Utility.decode("LJavClass.P2debug;V", false);
      Utility.fillup("", 132, true, 'T');
      Utility.format(102, 102, true, 'T');
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[5];
      ConstantString constantString0 = new ConstantString(132);
      constantArray0[0] = (Constant) constantString0;
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref(byteSequence0);
      constantArray0[1] = (Constant) constantInterfaceMethodref0;
      ConstantFieldref constantFieldref0 = new ConstantFieldref(byteSequence0);
      constantArray0[2] = (Constant) constantFieldref0;
      ConstantInterfaceMethodref constantInterfaceMethodref1 = new ConstantInterfaceMethodref(byteSequence0);
      constantArray0[3] = (Constant) constantInterfaceMethodref1;
      ConstantFieldref constantFieldref1 = new ConstantFieldref(byteSequence0);
      constantArray0[4] = (Constant) constantFieldref1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence1, constantPool1, false);
      try { 
        Utility.typeOfSignature("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      String string0 = ",$";
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)83;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)83, (int) (byte) (-74), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      String string0 = Utility.classOrInterface(78);
      Utility.convertString("class");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)79;
      byteArray0[1] = (byte) (-93);
      byteArray0[2] = (byte) (-22);
      byteArray0[3] = (byte) (-35);
      byteArray0[4] = (byte)112;
      byteArray0[5] = (byte)29;
      byteArray0[6] = (byte) (-21);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[5];
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType((byte) (-93), 78);
      constantArray0[0] = (Constant) constantNameAndType0;
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref((-826), 62);
      ConstantInterfaceMethodref constantInterfaceMethodref1 = new ConstantInterfaceMethodref(constantInterfaceMethodref0);
      constantArray0[1] = (Constant) constantInterfaceMethodref1;
      DataInputStream dataInputStream0 = new DataInputStream(byteSequence0);
      ConstantString constantString0 = new ConstantString(dataInputStream0);
      ConstantString constantString1 = new ConstantString(constantString0);
      constantArray0[2] = (Constant) constantString1;
      ConstantFieldref constantFieldref0 = new ConstantFieldref((byte)29, (byte) (-93));
      constantArray0[3] = (Constant) constantFieldref0;
      ConstantMethodType constantMethodType0 = new ConstantMethodType(dataInputStream0);
      constantArray0[4] = (Constant) constantMethodType0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      String string1 = Utility.codeToString(byteSequence0, constantPool1);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      String string0 = Utility.signatureToString("SAME", true);
      assertEquals("short", string0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-105);
      byteArray0[1] = (byte) (-105);
      byteArray0[2] = (byte) (-105);
      byteArray0[3] = (byte)18;
      byteArray0[4] = (byte) (-105);
      byteArray0[5] = (byte) (-105);
      byteArray0[6] = (byte) (-105);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("dcmpl", string0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("$A", "<", "lxE(C=nj.J[oXqf6(", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: $A
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)46;
      byteArray0[1] = (byte) (-86);
      byteArray0[2] = (byte) (-10);
      byteArray0[3] = (byte)48;
      byteArray0[4] = (byte)41;
      byteArray0[5] = (byte)45;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("iaload", string0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)19;
      byteArray0[1] = (byte)86;
      byteArray0[7] = (byte)80;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)88;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "invokedynamic");
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Utility.classOrInterface(75);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("pop2", string0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString((String) null, (String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      int int0 = (-36822361);
      try { 
        Utility.methodSignatureArgumentTypes(":%sGK");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: :%sGK
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)117;
      byteArray0[1] = (byte)89;
      byteArray0[2] = (byte)77;
      byteArray0[3] = (byte)50;
      byteArray0[4] = (byte) (-47);
      byteArray0[5] = (byte) (-67);
      byteArray0[6] = (byte) (-91);
      byteArray0[7] = (byte) (-26);
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      boolean boolean1 = Utility.isJavaIdentifierPart('~');
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      try { 
        Utility.typeOfSignature("3| j");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 3| j
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-68);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("newarray\t\t<<illegal type>>", string0);
      
      String string1 = Utility.toHexString(byteArray0);
      assertEquals("bc 00 00 00 00 00 00", string1);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Utility.signatureToString("ZyrZEWG_'Lq7WM^", true);
      byte byte0 = Utility.typeOfSignature("ZyrZEWG_'Lq7WM^");
      assertEquals((byte)4, byte0);
      
      String string0 = Utility.compactClassName("iand", "boolean", false);
      assertEquals("iand", string0);
      
      int int0 = Utility.setBit((byte)4, (-647));
      assertEquals(33554436, int0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-108);
      FileSystemHandling.shouldAllThrowIOExceptions();
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.signatureToString("Type of ConstValue invalid: ", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: Type of ConstValue invalid: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Utility.methodSignatureReturnType("JSYnE");
      Utility.getSignature("long");
      // Undeclared exception!
      try { 
        Utility.toHexString((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Utility.classOrInterface(76);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)125;
      byteArray0[1] = (byte) (-63);
      byteArray0[2] = (byte)78;
      byteArray0[3] = (byte)3;
      byteArray0[4] = (byte) (-1);
      ConstantDouble constantDouble0 = new ConstantDouble((byte)3);
      ConstantFloat constantFloat0 = new ConstantFloat((-1282.294F));
      int int0 = new Integer((byte) (-1));
      try { 
        Utility.typeOfSignature("UB9_ ,tzDd8=,p,#v");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: UB9_ ,tzDd8=,p,#v
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-91);
      byteArray0[1] = (byte) (-91);
      byteArray0[2] = (byte)94;
      byteArray0[3] = (byte) (-95);
      byteArray0[4] = (byte)94;
      byteArray0[5] = (byte) (-95);
      byteArray0[6] = (byte) (-91);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 118, (int) (byte) (-91));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)12;
      byteArray0[1] = (byte)37;
      byteArray0[2] = (byte)16;
      byteArray0[3] = (byte) (-121);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[3];
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getInstance(" skipped");
      constantArray0[0] = (Constant) constantUtf8_0;
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle((byte)12, (byte) (-121));
      ConstantMethodHandle constantMethodHandle1 = new ConstantMethodHandle(constantMethodHandle0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      DataOutputStream dataOutputStream0 = new DataOutputStream(byteArrayOutputStream0);
      constantUtf8_0.dump(dataOutputStream0);
      constantArray0[1] = (Constant) constantMethodHandle1;
      ConstantMethodType constantMethodType0 = new ConstantMethodType(byteSequence0);
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      constantMethodHandle1.accept(emptyVisitor0);
      constantArray0[2] = (Constant) constantMethodType0;
      constantMethodHandle1.accept(emptyVisitor0);
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.toString();
      Utility.codeToString(byteSequence0, constantPool0);
      Utility.fillup(" skipped", (byte)12, true, 'E');
      try { 
        Utility.methodSignatureArgumentTypes("vO*ma");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: vO*ma
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte byte0 = (byte)80;
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)32;
      byteArray0[1] = (byte)98;
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte)32;
      byteArray0[4] = (byte)80;
      byteArray0[5] = (byte) (-108);
      byteArray0[6] = (byte)2;
      byteArray0[7] = (byte)71;
      byteArray0[8] = (byte) (-108);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[2];
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic(byteSequence0);
      constantArray0[0] = (Constant) constantInvokeDynamic0;
      ConstantInvokeDynamic constantInvokeDynamic1 = new ConstantInvokeDynamic((byte)2, 347);
      constantArray0[1] = (Constant) constantInvokeDynamic1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Utility.codeToString(byteSequence0, constantPool0, true);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)71, (-1083535477), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-104);
      byteArray0[1] = (byte) (-104);
      byteArray0[2] = (byte)13;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("dcmpg", string0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      String string0 = Utility.methodSignatureReturnType("SAME");
      assertEquals("short", string0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)16;
      byteArray0[1] = (byte)101;
      byteArray0[2] = (byte)13;
      byteArray0[3] = (byte)101;
      byteArray0[4] = (byte) (-100);
      byteArray0[5] = (byte)91;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readByte();
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("lsub", string1);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType(";]d|=^)M?}xHHtpv:{9");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `M?}xHHtpv:{9'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)14;
      byteArray0[1] = (byte)59;
      byteArray0[2] = (byte)61;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)55;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "M8Zr^S*}&`*\"n[");
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.read();
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      Utility.isJavaIdentifierPart('q');
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)0, (int) (byte)59, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    dconst_0
         // 1:    istore_0
         // 2:    istore_2
         // 3:    nop
         // 4:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-115);
      byteArray0[1] = (byte)54;
      byteArray0[2] = (byte) (-103);
      byteArray0[3] = (byte) (-11);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-109);
      byteArray0[6] = (byte)0;
      Utility.toHexString(byteArray0);
      Utility.searchOpcode("Nr;&#q\"cVWsn-*e");
      Utility.searchOpcode("");
      try { 
        Utility.methodSignatureReturnType("8d 36 99 f5 00 93 00");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `8d 36 99 f5 00 93 00'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "xyd:ng!?f9a");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("-_*NJ248fM6E[:;o'", false);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      Object[] objectArray0 = new Object[0];
      Utility.printArray((PrintStream) mockPrintStream0, objectArray0);
      short short0 = Utility.searchOpcode("-_*NJ248fM6E[:;o'");
      assertEquals((short) (-1), short0);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("bn5{Oh%E mfC>", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence1.readUnsignedShort();
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence2, (ConstantPool) null, false);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals(13, byteArray0.length);
      assertEquals("fadd", string0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      String string0 = Utility.compactClassName("LJavClass/P2debug;V", false);
      assertEquals("LJavClass.P2debug;V", string0);
      
      ConstantFieldref constantFieldref0 = new ConstantFieldref((-3225), (-3225));
      ConstantFieldref constantFieldref1 = new ConstantFieldref(constantFieldref0);
      ConstantDouble constantDouble0 = new ConstantDouble((-3225));
      Constant[] constantArray0 = new Constant[4];
      constantArray0[0] = (Constant) constantDouble0;
      constantArray0[1] = (Constant) constantFieldref1;
      constantArray0[2] = (Constant) constantFieldref1;
      constantArray0[3] = (Constant) constantFieldref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)23;
      byteArray0[1] = (byte)111;
      byteArray0[2] = (byte) (-92);
      byteArray0[3] = (byte) (-16);
      byteArray0[4] = (byte) (-101);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string1 = Utility.codeToString(byteSequence0, constantPool1, false);
      assertEquals("fload\t\t%111", string1);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Utility.convertString("ifne");
      Utility.fillup("ifne", 4, false, 'L');
      boolean boolean0 = true;
      Utility.format(47, 59, true, 'g');
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-103);
      byteArray0[1] = (byte)54;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[1];
      ConstantInteger constantInteger0 = new ConstantInteger(123);
      constantArray0[0] = (Constant) constantInteger0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      try { 
        Utility.codeToString(byteSequence0, constantPool1, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Utility.typeOfSignature("Lx\u0007&)EXk2#av1m");
      // Undeclared exception!
      try { 
        Utility.signatureToString("Lx\u0007&)EXk2#av1m", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: Lx\u0007&)EXk2#av1m
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Utility.accessToString((-2470));
      try { 
        Utility.methodSignatureReturnType("private static final volatile interface abstract synthetic annotation enum");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `private static final volatile interface abstract synthetic annotation enum'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString((String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)87;
      byteArray0[1] = (byte) (-126);
      byteArray0[2] = (byte) (-66);
      byteArray0[3] = (byte)68;
      byteArray0[4] = (byte)109;
      byteArray0[5] = (byte)6;
      byteArray0[6] = (byte) (-86);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 243, (int) (byte) (-126));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)17;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      LocalVariable[] localVariableArray0 = new LocalVariable[1];
      LocalVariableTypeTable localVariableTypeTable0 = new LocalVariableTypeTable((byte)17, (byte)17, localVariableArray0, (ConstantPool) null);
      LocalVariableTypeTable localVariableTypeTable1 = new LocalVariableTypeTable(localVariableTypeTable0);
      LocalVariableTable localVariableTable0 = new LocalVariableTable((byte)17, (byte)17, localVariableArray0, (ConstantPool) null);
      LocalVariableTable localVariableTable1 = new LocalVariableTable(localVariableTable0);
      try { 
        Utility.methodSignatureToString("5kztpiQMu", "<qv;7JLfN0C", "<qv;7JLfN0C", true, localVariableTable1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 5kztpiQMu
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-87);
      byteArray0[1] = (byte) (-114);
      byteArray0[2] = (byte)13;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("ret\t\t%142", string0);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      try { 
        Utility.typeOfSignature("HGipc!vRx(D`?{");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: HGipc!vRx(D`?{
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-125);
      byteArray0[1] = (byte) (-125);
      byteArray0[2] = (byte) (-125);
      byteArray0[4] = (byte) (-125);
      byteArray0[4] = (byte) (-125);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readUnsignedByte();
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("lxor", string0);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.methodSignatureArgumentTypes((String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Utility.searchOpcode("org.apache.bcel.classfile.Utility");
      Object[] objectArray0 = new Object[7];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) "org.apache.bcel.classfile.Utility";
      Object object1 = new Object();
      objectArray0[2] = object1;
      objectArray0[3] = (Object) "org.apache.bcel.classfile.Utility";
      objectArray0[4] = (Object) "org.apache.bcel.classfile.Utility";
      objectArray0[5] = (Object) "org.apache.bcel.classfile.Utility";
      objectArray0[6] = (Object) "org.apache.bcel.classfile.Utility";
      String string0 = Utility.printArray(objectArray0, false, true);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-78);
      byteArray0[1] = (byte) (-78);
      FileSystemHandling.shouldAllThrowIOExceptions();
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      boolean boolean0 = false;
      Utility.compactClassName("#^Y[lNvt5", false);
      Utility.fillup("#^Y[lNvt5", 65, false, '?');
      byte[] byteArray0 = new byte[3];
      byte byte0 = (byte) (-32);
      byteArray0[0] = (byte) (-32);
      byteArray0[1] = (byte)45;
      byteArray0[2] = (byte)16;
      Utility.toHexString(byteArray0);
      Utility.compactClassName("#^Y[lNvt5", "e0 2d 10", true);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "#^Y[lNvt5";
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature("????????????????????????????????????????????????????????#^Y[lNvt5", stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegally nested brackets:[lNvt5
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)87;
      byteArray0[1] = (byte) (-81);
      byteArray0[2] = (byte) (-81);
      byteArray0[3] = (byte) (-121);
      byteArray0[4] = (byte) (-28);
      byteArray0[5] = (byte)28;
      byteArray0[5] = (byte)88;
      byteArray0[7] = (byte)87;
      Constant[] constantArray0 = new Constant[3];
      ConstantFloat constantFloat0 = new ConstantFloat((byte)61);
      constantArray0[0] = (Constant) constantFloat0;
      ConstantMethodref constantMethodref0 = new ConstantMethodref((byte)87, (byte) (-28));
      constantArray0[1] = (Constant) constantMethodref0;
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getInstance("+FE01}]-24e({:");
      constantArray0[2] = (Constant) constantUtf8_0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.copy();
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readShort();
      String string0 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals("dreturn", string0);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("_DF.PXcRVXS[i!>", "invokestatic", (String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      String string0 = "ifne";
      // Undeclared exception!
      try { 
        Utility.convertString((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      String string0 = "%V*SoA`vgy1ur";
      try { 
        Utility.typeOfMethodSignature("%V*SoA`vgy1ur");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: %V*SoA`vgy1ur
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)87;
      byteArray0[1] = (byte)87;
      byteArray0[2] = (byte)87;
      byteArray0[3] = (byte)121;
      byteArray0[4] = (byte) (-28);
      byteArray0[5] = (byte)11;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("pop", string0);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[1] = (byte)17;
      byteArray0[2] = (byte)17;
      byteArray0[3] = (byte)17;
      byteArray0[4] = (byte)17;
      byteArray0[5] = (byte)17;
      Utility.toHexString(byteArray0);
      try { 
        Utility.typeOfSignature("Gw^|VQx?g]5V\"(Q");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Gw^|VQx?g]5V\"(Q
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)81;
      byteArray0[1] = (byte) (-101);
      byteArray0[2] = (byte) (-60);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantUtf8.getCachedInstance("tableswitch");
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("fastore", string0);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Utility.classOrInterface(0);
      Utility.format(0, 0, true, '-');
      try { 
        Utility.typeOfSignature("0");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 0
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Utility.classOrInterface(76);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)125;
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte)125;
      byteArray1[1] = (byte)22;
      byteArray1[2] = (byte) (-76);
      byteArray1[3] = (byte)66;
      byteArray1[4] = (byte)66;
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      ConstantString constantString0 = new ConstantString(byteSequence0);
      ConstantString constantString1 = new ConstantString(constantString0);
      Constant[] constantArray0 = new Constant[1];
      constantArray0[0] = (Constant) constantString1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, constantPool0, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 16962. Constant pool size is: 1
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("vk75i(e%b");
      mockPrintWriter0.print((Object) "e");
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) "e";
      objectArray0[1] = (Object) "e";
      objectArray0[2] = (Object) mockPrintWriter0;
      mockPrintWriter0.print(true);
      objectArray0[3] = (Object) "e";
      objectArray0[4] = (Object) mockPrintWriter0;
      PrintWriter printWriter0 = mockPrintWriter0.printf("e", objectArray0);
      Object[] objectArray1 = new Object[2];
      objectArray1[0] = (Object) printWriter0;
      Object object0 = new Object();
      objectArray1[1] = object0;
      Utility.printArray(printWriter0, objectArray1);
      String string0 = Utility.fillup("Null", (-3614), true, 'w');
      assertEquals("Null", string0);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.codeToString((byte[]) null, (ConstantPool) null, (int) (byte) (-112), (-471));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      ConstantInteger constantInteger0 = new ConstantInteger(1648);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-95);
      byteArray0[1] = (byte) (-110);
      byteArray0[2] = (byte)10;
      byteArray0[3] = (byte) (-79);
      byteArray0[4] = (byte)105;
      byteArray0[5] = (byte) (-77);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.available();
      Constant[] constantArray0 = new Constant[3];
      constantArray0[0] = (Constant) constantInteger0;
      constantArray0[1] = (Constant) constantInteger0;
      constantArray0[2] = (Constant) constantInteger0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      boolean boolean0 = true;
      constantPool0.toString();
      Utility.codeToString(byteSequence0, constantPool0, true);
      constantPool1.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, (int) (byte) (-95), (-1719), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    if_icmplt\t\t#-28150
         // 3:    return
         // 4:    lmul
         // 5:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Utility.accessToString((-36822361), false);
      Utility.methodTypeToSignature("public private protected synchronized transient interface annotation", (String[]) null);
      try { 
        Utility.methodSignatureReturnType("9^m\rj<,[a(Cji,}", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `9^m\rj<,[a(Cji,}'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Utility.methodSignatureReturnType("SAME");
      try { 
        Utility.methodSignatureToString("", "{AuUvyf\"DCO&L_1&S", "monitorenter", true, (LocalVariableTable) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      String string0 = Utility.methodSignatureReturnType("CB{[1]AYvK2");
      assertEquals("char", string0);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "Jyy0T.c";
      String string1 = Utility.methodTypeToSignature("Jyy0T.c", stringArray0);
      assertEquals("(LJyy0T/c;)LJyy0T/c;", string1);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte) (-73);
      byteArray0[2] = (byte)86;
      byteArray0[3] = (byte)18;
      byteArray0[4] = (byte)90;
      byteArray0[5] = (byte)12;
      byteArray0[6] = (byte) (-64);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readUnsignedShort();
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("sastore", string0);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("z", false);
      Utility.encode(byteArray0, false);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("z", "z", "CONSTANT_Double");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: z
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Utility.replace(">\t", "void", "sw0");
      try { 
        Utility.methodSignatureArgumentTypes("&wgH^uA");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: &wgH^uA
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      Utility.equals(byteArray0, byteArray0);
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte) (-89);
      byteArray1[1] = (byte) (-108);
      byteArray1[2] = (byte) (-86);
      byteArray1[3] = (byte)52;
      byte[] byteArray2 = new byte[6];
      byteArray2[0] = (byte) (-89);
      byteArray2[1] = (byte) (-21);
      byteArray2[2] = (byte)52;
      byteArray2[3] = (byte)52;
      byteArray2[4] = (byte)113;
      byteArray2[5] = (byte)52;
      ByteSequence byteSequence0 = new ByteSequence(byteArray2);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Constant[] constantArray0 = new Constant[3];
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle((byte) (-21), (byte) (-21));
      constantArray0[0] = (Constant) constantMethodHandle0;
      DataInputStream dataInputStream0 = new DataInputStream(byteSequence0);
      ConstantInteger constantInteger0 = new ConstantInteger(dataInputStream0);
      constantArray0[1] = (Constant) constantInteger0;
      ConstantMethodHandle constantMethodHandle1 = new ConstantMethodHandle((byte)52, (byte)52);
      constantArray0[2] = (Constant) constantMethodHandle1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("lrem", string0);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("nop", string0);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      String string0 = "unknown";
      String[] stringArray0 = new String[4];
      stringArray0[0] = "unknown";
      stringArray0[1] = "unknown";
      stringArray0[2] = "unknown";
      stringArray0[3] = "unknown";
      Utility.methodTypeToSignature("unknown", stringArray0);
      Utility.decode(" arg", false);
      boolean boolean0 = true;
      try { 
        Utility.decode("unknown", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      String string0 = Utility.compactClassName("LJavClass/P2debug;V");
      assertEquals("LJavClass.P2debug;V", string0);
      
      byte[] byteArray0 = Utility.decode("LJavClass/P2debug;V", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string1 = Utility.encode(byteArray0, false);
      assertEquals("LJavClass$_P2debug$3bV", string1);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      Utility.convertString("PF6}!a,j%SI!P");
      // Undeclared exception!
      try { 
        Utility.signatureToString("PF6}!a,j%SI!P", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `PF6}!a,j%SI!P'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      String string0 = Utility.signatureToString("CB{[1]AYvK2", false);
      assertEquals("char", string0);
      
      byte[] byteArray0 = new byte[9];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[1];
      ConstantString constantString0 = new ConstantString(50);
      ConstantString constantString1 = new ConstantString(constantString0);
      constantArray0[0] = (Constant) constantString1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      constantPool1.toString();
      Utility.codeToString(byteSequence0, constantPool1, true);
      String string1 = Utility.getSignature("CB{[1]AYvK2");
      assertEquals("[LCB{;", string1);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "J>h76:.BNX63";
      stringArray0[1] = "J>h76:.BNX63";
      Utility.methodTypeToSignature("J>h76:.BNX63", stringArray0);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("", "NlzEvv<h^pX6Bd|cHh", "-H!C3X*\"h(+CkJ \"0ma", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("\\", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `\\'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)59;
      byteArray0[1] = (byte)44;
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte)84;
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte) (-101);
      byteArray0[6] = (byte)58;
      byteArray0[7] = (byte)105;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence1, (ConstantPool) null, false);
      assertEquals("istore_0", string0);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Utility.isSet((-1672), (-1672));
      Utility.compactClassName("]X:e4sjuW");
      Utility.compactClassName("SimpleElementValue class does not know how to stringify type ", false);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0, false);
      Locale locale0 = Locale.GERMAN;
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) locale0;
      objectArray0[1] = (Object) "SimpleElementValue class does not know how to stringify type ";
      mockPrintStream0.format(locale0, "SimpleElementValue class does not know how to stringify type ", objectArray0);
      Utility.printArray((PrintStream) mockPrintStream0, objectArray0);
      LocalVariableTable localVariableTable0 = new LocalVariableTable((-1672), (-155), (LocalVariable[]) null, (ConstantPool) null);
      try { 
        Utility.methodSignatureToString(", npairs = ", "SimpleElementValue class does not know how to stringify type ", "SimpleElementValue class does not know how to stringify type ", true, localVariableTable0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: , npairs = 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-92);
      byteArray0[1] = (byte) (-51);
      byteArray0[2] = (byte) (-106);
      byteArray0[3] = (byte)24;
      byteArray0[4] = (byte) (-94);
      byteArray0[5] = (byte) (-9);
      byteArray0[6] = (byte)66;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("if_icmple\t\t#-12906", string0);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      String string0 = Utility.getSignature("\t\t");
      assertEquals("L;", string0);
      
      ConstantDouble constantDouble0 = new ConstantDouble(0.0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-128);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[9];
      constantArray0[0] = (Constant) constantDouble0;
      constantArray0[1] = (Constant) constantDouble0;
      constantArray0[2] = (Constant) constantDouble0;
      constantArray0[3] = (Constant) constantDouble0;
      constantArray0[4] = (Constant) constantDouble0;
      constantArray0[5] = (Constant) constantDouble0;
      constantArray0[6] = (Constant) constantDouble0;
      ConstantFieldref constantFieldref0 = new ConstantFieldref((byte) (-64), (byte) (-128));
      ConstantFieldref constantFieldref1 = new ConstantFieldref(constantFieldref0);
      constantArray0[7] = (Constant) constantFieldref1;
      ConstantDouble constantDouble1 = new ConstantDouble(0.0);
      constantArray0[8] = (Constant) constantDouble1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string1 = Utility.signatureToString("L;", false);
      assertEquals("", string1);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-106);
      byteArray0[1] = (byte)86;
      byteArray0[2] = (byte)93;
      byteArray0[3] = (byte)47;
      byteArray0[4] = (byte) (-32);
      byteArray0[5] = (byte)49;
      byteArray0[6] = (byte)123;
      byteArray0[7] = (byte)0;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.markSupported();
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("fcmpg", string0);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)67;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("fstore_0", string0);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-39);
      byteArray0[1] = (byte)122;
      byteArray0[2] = (byte) (-91);
      byteArray0[3] = (byte) (-14);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)31;
      byteArray0[6] = (byte) (-27);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Utility.clearBit(159, 2097);
      try { 
        Utility.methodSignatureReturnType("", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("z", false);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "z";
      objectArray0[1] = (Object) "z";
      FileSystemHandling.shouldAllThrowIOExceptions();
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      Utility.isSet((-1045), (-1045));
      try { 
        Utility.typeOfSignature("z");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: z
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("k,x", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      try { 
        Utility.methodSignatureArgumentTypes("2eM:o{,8Mb-j,H9?NA", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 2eM:o{,8Mb-j,H9?NA
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      String string0 = Utility.getSignature("\t\t");
      ConstantDouble constantDouble0 = new ConstantDouble(0.0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)78;
      byteArray0[1] = (byte)125;
      byteArray0[2] = (byte)78;
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte)14;
      byteArray0[5] = (byte)3;
      byteArray0[6] = (byte) (-97);
      byteArray0[7] = (byte) (-1);
      byteArray0[8] = (byte)78;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[5];
      constantArray0[0] = (Constant) constantDouble0;
      constantArray0[1] = (Constant) constantDouble0;
      constantArray0[2] = (Constant) constantDouble0;
      constantArray0[3] = (Constant) constantDouble0;
      constantArray0[4] = (Constant) constantDouble0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string1 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      String string0 = "";
      Utility.setBit(1138, 1138);
      try { 
        Utility.typeOfSignature("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-108);
      byteArray0[1] = (byte) (-90);
      byteArray0[2] = (byte) (-65);
      byteArray0[3] = (byte)56;
      byteArray0[4] = (byte) (-109);
      byteArray0[5] = (byte)21;
      byteArray0[6] = (byte) (-92);
      byteArray0[7] = (byte) (-83);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 159, (int) (byte) (-108), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      String string0 = Utility.convertString("gGd");
      assertEquals("gGd", string0);
      
      String string1 = Utility.signatureToString("F&H;i$qX-02", false);
      assertEquals("float", string1);
      
      String string2 = Utility.methodSignatureReturnType("LJavaClass/P2debug;V");
      assertEquals("JavaClass.P2debug", string2);
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      String string0 = Utility.getSignature("(B$?'Q");
      assertEquals("L(B$?'Q;", string0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)13;
      byteArray0[1] = (byte)54;
      byteArray0[2] = (byte) (-76);
      byteArray0[3] = (byte)54;
      byteArray0[4] = (byte)116;
      byteArray0[5] = (byte) (-41);
      byteArray0[6] = (byte)90;
      String string1 = Utility.encode(byteArray0, false);
      assertEquals("$N6$b46t$d7Z", string1);
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("InvVid byteKtag in constant poxl: ");
      assertEquals((byte)10, byte0);
      
      String string0 = Utility.fillup("InvVid byteKtag in constant poxl: ", (byte)10, true, 'X');
      assertEquals("InvVid byteKtag in constant poxl: ", string0);
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      Utility.accessToString(0);
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.encode((byte[]) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      Utility.getSignature("\t\t");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)73;
      byteArray0[1] = (byte)40;
      byteArray0[2] = (byte)37;
      byteArray0[3] = (byte)55;
      byteArray0[4] = (byte) (-10);
      byteArray0[5] = (byte)122;
      byteArray0[6] = (byte) (-95);
      byteArray0[7] = (byte) (-118);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.mark(77);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("dstore_2", string0);
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-60);
      byteArray0[1] = (byte) (-94);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      byteSequence0.readBoolean();
      try { 
        Utility.codeToString(byteSequence0, constantPool0, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      byteArray0[0] = (byte)18;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-109);
      byteArray0[1] = (byte) (-119);
      byteArray0[2] = (byte) (-108);
      byteArray0[3] = (byte)69;
      byteArray0[4] = (byte) (-86);
      byteArray0[5] = (byte)90;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readInt();
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)47;
      byteArray0[1] = (byte) (-57);
      byteArray0[2] = (byte) (-57);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      byteArray0[3] = (byte) (-77);
      byteArray0[4] = (byte) (-77);
      byteArray0[5] = (byte) (-77);
      byteArray0[6] = (byte) (-57);
      byteArray0[7] = (byte) (-77);
      byteArray0[8] = (byte) (-77);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("laload", string0);
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      Constant[] constantArray0 = new Constant[2];
      ConstantInteger constantInteger0 = new ConstantInteger(547);
      constantArray0[0] = (Constant) constantInteger0;
      Utility.setBit(547, 547);
      String string0 = ">";
      try { 
        Utility.typeOfSignature(">");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: >
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-113);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-99);
      byteArray0[4] = (byte)75;
      byteArray0[5] = (byte) (-121);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence1, (ConstantPool) null, false);
      assertEquals("d2l", string0);
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      Utility.methodSignatureReturnType("CB{[1]AYvK2");
      Utility.format(47, (-646), true, 'h');
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)25;
      byteArray0[1] = (byte)25;
      byteArray0[2] = (byte) (-90);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantInteger constantInteger0 = new ConstantInteger(160);
      Constant[] constantArray0 = new Constant[2];
      constantArray0[0] = (Constant) constantInteger0;
      byteSequence0.available();
      constantArray0[1] = (Constant) constantInteger0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      Utility.codeToString(byteSequence0, constantPool1, true);
      try { 
        Utility.codeToString(byteSequence0, constantPool1, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-33);
      byteArray0[1] = (byte) (-35);
      byteArray0[2] = (byte)37;
      byteArray0[3] = (byte)48;
      byteArray0[4] = (byte)11;
      byteArray0[5] = (byte) (-61);
      byteArray0[6] = (byte) (-95);
      byteArray0[7] = (byte)60;
      byteArray0[8] = (byte)16;
      String string0 = Utility.encode(byteArray0, false);
      assertEquals("$df$dd$r0$L$c3$a1$3c$Q", string0);
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      Utility.signatureToString("CONSTANT_Double");
      ByteSequence byteSequence0 = null;
      try {
        byteSequence0 = new ByteSequence((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[12];
      byteArray0[0] = (byte)126;
      byteArray0[1] = (byte)76;
      byteArray0[2] = (byte) (-118);
      byteArray0[4] = (byte)76;
      Utility.decode("Long", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readUnsignedShort();
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("l2d", string0);
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      try { 
        Utility.typeOfSignature("\\");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: \\
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      String string0 = Utility.format(34, 46, false, '|');
      assertEquals("||||||||||||||||||||||||||||||||||||||||||||34", string0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-27);
      byteArray0[1] = (byte)46;
      byteArray0[2] = (byte)10;
      byteArray0[3] = (byte)74;
      byteArray0[4] = (byte) (-60);
      byteArray0[5] = (byte) (-46);
      byteArray0[6] = (byte)95;
      String string1 = Utility.encode(byteArray0, false);
      assertEquals("$e5$$$KJ$c4$d2_", string1);
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      Utility.isSet(214, 1895);
      char char0 = 'i';
      Utility.isJavaIdentifierPart('i');
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Utility.printArray(objectArray0, true);
      Utility.accessToString(214, false);
      Utility.compactClassName("", "", true);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "";
      stringArray0[1] = "";
      boolean boolean0 = true;
      Utility.printArray((Object[]) stringArray0, false, true);
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature((String) null, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      Utility.accessToString(8);
      // Undeclared exception!
      try { 
        Utility.encode((byte[]) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)19;
      byteArray0[1] = (byte)86;
      byteArray0[7] = (byte)80;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readUnsignedByte();
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      String string0 = Utility.compactClassName("sastore", "+FE01}]-24e", true);
      assertEquals("sastore", string0);
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      Utility.replace("<[BH", "<[BH", "<[BH");
      // Undeclared exception!
      try { 
        Utility.equals((byte[]) null, (byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.compactClassName("]X:e4sjuW");
      Utility.accessToString((-6), true);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-91);
      byteArray0[1] = (byte) (-84);
      byteArray0[2] = (byte) (-61);
      byteArray0[3] = (byte) (-80);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      Utility.compactClassName("private static final volatile transient native abstract strictfp synthetic annotation enum", "private static final volatile transient native abstract strictfp synthetic annotation enum", true);
      String string0 = "char";
      String string1 = "B`u6/C";
      String string2 = "j-g$DNmiJ5yQQN=}Ew\\";
      Method method0 = null;
      try {
        method0 = new Method((Method) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.FieldOrMethod", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      String string0 = "Nw\\g%DO)xcH\\LW;v";
      try { 
        Utility.methodSignatureArgumentTypes("Nwg%DO)xcHLW;v", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Nwg%DO)xcHLW;v
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-88);
      byteArray0[1] = (byte)46;
      byteArray0[2] = (byte)123;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readUnsignedShort();
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      byte[] byteArray1 = Utility.decode("lshr", false);
      assertArrayEquals(new byte[] {(byte)108, (byte)115, (byte)104, (byte)114}, byteArray1);
      
      String string0 = Utility.compactClassName("[fv", false);
      assertEquals("[fv", string0);
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)27;
      byteArray0[1] = (byte)27;
      byteArray0[2] = (byte)29;
      byteArray0[3] = (byte)96;
      byteArray0[4] = (byte)27;
      byteArray0[2] = (byte)65;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)27, (int) (byte)62, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      Utility.compactClassName("LJavClass/P2debug;V", false);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)48;
      byteArray0[1] = (byte)81;
      byteArray0[3] = (byte)44;
      byteArray0[4] = (byte)57;
      byteArray0[5] = (byte)44;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("faload", string0);
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      String string0 = Utility.compactClassName("Invalid signature: ", false);
      assertEquals("Invalid signature: ", string0);
      
      byte[] byteArray0 = Utility.decode("byte", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence1.readUnsignedShort();
      String string1 = Utility.codeToString(byteSequence1, (ConstantPool) null, false);
      assertEquals("ineg", string1);
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-33);
      byteArray0[1] = (byte) (-35);
      byteArray0[2] = (byte)37;
      byteArray0[3] = (byte)48;
      byteArray0[4] = (byte)11;
      byteArray0[5] = (byte) (-61);
      byteArray0[6] = (byte) (-95);
      Constant[] constantArray0 = new Constant[1];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantInteger constantInteger0 = new ConstantInteger(byteSequence0);
      constantArray0[0] = (Constant) constantInteger0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 90, (int) (byte)48, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)40;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-52);
      byteArray0[3] = (byte) (-21);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("dload_2", string0);
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-116);
      byteArray0[1] = (byte)121;
      byteArray0[2] = (byte)82;
      byteArray0[3] = (byte) (-103);
      byteArray0[4] = (byte)74;
      byteArray0[5] = (byte)114;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.mark((byte) (-103));
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Utility.codeToString(byteSequence0, constantPool0, true);
      String string0 = Utility.encode(byteArray0, true);
      assertEquals("$l$8b$I$A$A$A$A$A$A$A", string0);
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("(B$?'Q", "(B$?'Q", "(B$?'Q");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `$?'Q'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      byte[] byteArray0 = Utility.decode(",$", false);
      Utility.fillup(",$", 132, false, 'I');
      Utility.format(132, (byte) (-74), true, 'I');
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      Utility.codeToString(byteSequence0, constantPool1, true);
      try { 
        Utility.codeToString(byteSequence0, constantPool1, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte) (-90);
      Utility.encode(byteArray0, true);
      boolean boolean0 = true;
      try { 
        Utility.decode("$l$8b$I$A$A$A$A$A$A$A", true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // Unexpected end of ZLIB input stream
         //
         verifyException("java.util.zip.InflaterInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      Utility.getSignature("eCZ#yL(y}uEH=dv:<1");
      // Undeclared exception!
      try { 
        Utility.signatureToString("LeCZ#yL(y}uEH=dv:<1;");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: LeCZ#yL(y}uEH=dv:<1;
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "(B$?'Q";
      stringArray0[1] = "(B$?'Q";
      stringArray0[2] = "(B$?'Q";
      stringArray0[3] = "(B$?'Q";
      Utility.methodTypeToSignature("(B$?'Q", stringArray0);
      Utility.convertString("(B$?'Q");
      try { 
        Utility.methodSignatureArgumentTypes("(B$?'Q", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `$?'Q'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)61;
      byteArray0[1] = (byte) (-67);
      byteArray0[2] = (byte) (-115);
      byteArray0[3] = (byte)86;
      byteArray0[4] = (byte)20;
      byteArray0[5] = (byte)47;
      byteArray0[6] = (byte)13;
      byteArray0[7] = (byte)29;
      byteArray0[8] = (byte)105;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("istore_2", string0);
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      String string0 = ",L.HjEQ";
      try { 
        Utility.typeOfSignature(",L.HjEQ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ,L.HjEQ
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)100;
      byteArray0[1] = (byte)9;
      byteArray0[2] = (byte) (-99);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readShort();
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("ifgt\t\t#2", string0);
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("QA4+2:HYL*rD.#_]Hc");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `QA4+2:HYL*rD.#_]Hc'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("Hk\"7{It");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Hk\"7{It'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      Utility.convertString("gGd");
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-71);
      byteArray0[1] = (byte)23;
      byteArray0[2] = (byte)57;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, constantPool0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)60;
      byteArray0[1] = (byte) (-113);
      byteArray0[2] = (byte) (-6);
      byteArray0[3] = (byte) (-87);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-113), (int) (byte)60);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    istore_1
         // 1:    d2l
         // 2:    <illegal opcode>
         // 3:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      String string0 = Utility.getSignature("\t\t");
      assertEquals("L;", string0);
      
      ConstantDouble constantDouble0 = new ConstantDouble(0.0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-128);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteSequence1, constantPool0, false);
      String string1 = Utility.methodSignatureReturnType("L;", false);
      assertEquals("", string1);
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)62;
      byteArray0[1] = (byte) (-68);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte) (-99);
      byteArray1[1] = (byte)62;
      byteArray1[2] = (byte)62;
      byteArray1[3] = (byte) (-22);
      ByteSequence byteSequence1 = new ByteSequence(byteArray1);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray2 = new byte[1];
      byteArray2[0] = (byte)38;
      ByteSequence byteSequence2 = new ByteSequence(byteArray2);
      String string0 = Utility.codeToString(byteSequence2, constantPool0, false);
      assertEquals("dload_0", string0);
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)32;
      byteArray0[1] = (byte) (-64);
      byteArray0[2] = (byte) (-112);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readByte();
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      Utility.isJavaIdentifierPart('[');
      // Undeclared exception!
      try { 
        Utility.decode("{09Du,D8Q$5xH-nTiG?", false);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"5x\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-126);
      byteArray0[2] = (byte) (-126);
      byteArray0[4] = (byte) (-126);
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-126), 39);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readInt();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("ixor", string0);
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      String string0 = Utility.compactClassName("istore_3", false);
      assertEquals("istore_3", string0);
      
      byte[] byteArray1 = Utility.decode("#6$ygb9XK", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray1);
      String string1 = Utility.codeToString(byteSequence1, (ConstantPool) null, false);
      assertArrayEquals(new byte[] {(byte)35, (byte)54, (byte)44, (byte)103, (byte)98, (byte)57, (byte)88, (byte)75}, byteArray1);
      assertEquals("fload_1", string1);
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)48;
      byteArray0[1] = (byte)76;
      byteArray0[2] = (byte)88;
      Utility.codeToString(byteArray0, (ConstantPool) null, (-1508), (-1508));
      String string0 = "6e 38 30";
      boolean boolean0 = false;
      try { 
        Utility.methodSignatureToString("0:    faload\n1:    astore_1\n2:    pop2\n", "0:    faload\n1:    astore_1\n2:    pop2\n", "6e 38 30", false, (LocalVariableTable) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 0:    faload
         // 1:    astore_1
         // 2:    pop2
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      Utility.methodSignatureReturnType("[LCB{;V");
      try { 
        Utility.typeOfMethodSignature("[LCB{;V");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: [LCB{;V
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-100);
      byteArray0[1] = (byte) (-23);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte)77;
      byteArray1[1] = (byte) (-3);
      byteArray1[2] = (byte) (-23);
      byteArray1[3] = (byte) (-100);
      ByteSequence byteSequence1 = new ByteSequence(byteArray1);
      Utility.codeToString(byteSequence1, constantPool0, false);
      Utility.printArray((Object[]) null, false, false);
      // Undeclared exception!
      try { 
        Utility.signatureToString("dstore_3", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `dstore_3'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)44;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)60;
      String string0 = Utility.toHexString(byteArray0);
      Object[] objectArray0 = new Object[9];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) (byte)44;
      objectArray0[2] = (Object) (byte)0;
      objectArray0[3] = (Object) (byte)0;
      objectArray0[4] = (Object) "00 2c 00 00 3c";
      objectArray0[5] = (Object) "00 2c 00 00 3c";
      objectArray0[6] = (Object) (byte)0;
      objectArray0[7] = (Object) (byte)0;
      objectArray0[8] = (Object) (byte)0;
      String string1 = Utility.printArray(objectArray0, true);
      assertFalse(string1.equals((Object)string0));
      
      // Undeclared exception!
      try { 
        Utility.printArray((PrintWriter) null, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-119);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-71);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("l2f", string0);
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("B,b{#VHDF{m6", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.markSupported();
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      // Undeclared exception!
      try { 
        Utility.signatureToString("Warning:", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Warning:'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      // Undeclared exception!
      try { 
        Utility.getSignature((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      int int0 = 76;
      int int1 = 43;
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = "X,`D/&$|xYH~<";
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.signatureToString("X,`D/&$|xYH~<", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `X,`D/&$|xYH~<'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-59);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, constantPool0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-102);
      byteArray0[1] = (byte)66;
      byteArray0[2] = (byte) (-68);
      byteArray0[3] = (byte)52;
      byteArray0[4] = (byte)116;
      Constant[] constantArray0 = new Constant[3];
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getCachedInstance("org.apache.bcel.classfile.ConstantMethodType");
      constantArray0[0] = (Constant) constantUtf8_0;
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic(1651, (byte)116);
      constantArray0[1] = (Constant) constantInvokeDynamic0;
      ConstantUtf8 constantUtf8_1 = ConstantUtf8.getInstance("");
      constantArray0[2] = (Constant) constantUtf8_1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, 603, (int) (byte) (-102), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      Object object5 = new Object();
      objectArray0[5] = object5;
      Object object6 = new Object();
      objectArray0[6] = object6;
      Object object7 = new Object();
      objectArray0[7] = object7;
      Object object8 = new Object();
      objectArray0[8] = object8;
      boolean boolean0 = false;
      Utility.printArray(objectArray0, false, true);
      Utility.classOrInterface((-3437));
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)124;
      // Undeclared exception!
      try { 
        pipedOutputStream0.write(byteArray0, (-3437), (-3437));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      String string0 = "SAME";
      Utility.typeOfSignature("SAME");
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream("X'[4X&06_", "SAME");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // SAME
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      Utility.methodSignatureReturnType("CB{[1]AYvK2");
      Utility.format(47, (-646), true, 'h');
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)25;
      byteArray0[1] = (byte)13;
      byteArray0[2] = (byte) (-90);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantInteger constantInteger0 = new ConstantInteger(160);
      Constant[] constantArray0 = new Constant[2];
      constantArray0[0] = (Constant) constantInteger0;
      byteSequence0.available();
      constantArray0[1] = (Constant) constantInteger0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      Utility.codeToString(byteSequence0, constantPool1, false);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 1254, 59, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)89;
      byteArray0[1] = (byte) (-63);
      byteArray0[2] = (byte)91;
      byteArray0[3] = (byte) (-74);
      byteArray0[4] = (byte) (-40);
      byteArray0[5] = (byte)53;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence1, (ConstantPool) null, false);
      assertEquals("dup", string0);
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      Utility.isJavaIdentifierPart('r');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("S6");
      Locale locale0 = Locale.CHINESE;
      Locale locale1 = Locale.TRADITIONAL_CHINESE;
      locale0.getDisplayName(locale1);
      Object[] objectArray0 = new Object[5];
      mockPrintWriter0.print(0.0F);
      objectArray0[0] = (Object) "S6";
      objectArray0[1] = (Object) "\u4E2D\u6587";
      objectArray0[2] = (Object) mockPrintWriter0;
      objectArray0[4] = (Object) locale0;
      objectArray0[4] = (Object) "S6";
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "S6", objectArray0);
      Object[] objectArray1 = new Object[8];
      objectArray1[0] = (Object) locale0;
      Object object0 = new Object();
      objectArray1[1] = object0;
      objectArray1[2] = (Object) "S6";
      objectArray1[3] = (Object) locale0;
      objectArray1[4] = (Object) locale0;
      Object object1 = new Object();
      objectArray1[5] = object1;
      objectArray1[6] = (Object) printWriter0;
      objectArray1[7] = (Object) "S6";
      Utility.printArray(printWriter0, objectArray1);
      String string0 = Utility.format((-581), (-581), false, '*');
      Utility.accessToString(1530);
      String string1 = Utility.fillup("\"@j]({", 1530, false, '%');
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)58;
      byteArray0[1] = (byte)125;
      byteArray0[2] = (byte)94;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)125, (int) (byte)125);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      Utility.classOrInterface(10);
      Utility.clearBit(110, 110);
      // Undeclared exception!
      try { 
        Utility.printArray((PrintStream) null, (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      boolean boolean0 = Utility.isSet((-1672), (-1672));
      String string0 = Utility.replace("Dont call getValueFloat() on a non FLOAT ElementValue", "2p4m-Y8@E a5z=I,ev", "]X:e4sjuW");
      assertEquals("Dont call getValueFloat() on a non FLOAT ElementValue", string0);
      
      byte[] byteArray0 = new byte[0];
      boolean boolean1 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      Utility.getSignature("\t\t");
      ConstantDouble constantDouble0 = new ConstantDouble(0.0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-128);
      byteArray0[1] = (byte)125;
      byteArray0[2] = (byte) (-128);
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte)14;
      byteArray0[5] = (byte)3;
      byteArray0[6] = (byte) (-97);
      byteArray0[7] = (byte) (-1);
      byteArray0[8] = (byte) (-128);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[5];
      constantArray0[0] = (Constant) constantDouble0;
      constantArray0[1] = (Constant) constantDouble0;
      constantArray0[2] = (Constant) constantDouble0;
      constantArray0[3] = (Constant) constantDouble0;
      constantArray0[4] = (Constant) constantDouble0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals("ior", string0);
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      Utility.decode("!s2fYx}w8M=K*|/", false);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)93;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)40;
      byteArray0[3] = (byte)34;
      byteArray0[4] = (byte)57;
      try { 
        Utility.typeOfSignature("!s2fYx}w8M=K*|/");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: s2fYx}w8M=K*|/
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      Utility.decode(",$", false);
      Utility.format(132, (byte) (-74), false, 'I');
      Utility.format(132, (byte) (-74), true, 'I');
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.copy();
      try { 
        Utility.typeOfSignature("132");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 132
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-101);
      byteArray0[1] = (byte) (-42);
      boolean boolean0 = false;
      Utility.encode(byteArray0, false);
      try { 
        Utility.decode("$9b$d6", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-98);
      byteArray0[3] = (byte) (-98);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("ifle\t\t#0", string0);
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("Types");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: Types
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      ConstantFloat constantFloat0 = new ConstantFloat((byte)55);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (-1717), 48, true);
      assertEquals("0:    nop\n1:    nop\n2:    nop\n3:    nop\n4:    nop\n", string0);
      
      String string1 = Utility.encode(byteArray0, true);
      assertEquals("$l$8b$I$A$A$A$A$A$A$A", string1);
      
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "0:    nop\n1:    nop\n2:    nop\n3:    nop\n4:    nop\n");
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte) (-80);
      byteArray1[1] = (byte)55;
      byteArray1[2] = (byte) (-80);
      byteArray1[3] = (byte) (-80);
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      String string2 = Utility.toHexString(byteArray1);
      assertEquals("b0 37 b0 b0", string2);
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      String string0 = Utility.signatureToString("Invalid signature: ", true);
      assertEquals("int", string0);
      
      String string1 = Utility.getSignature("int");
      assertEquals("I", string1);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)105;
      byteArray0[1] = (byte)103;
      byteArray0[2] = (byte) (-9);
      byteArray0[3] = (byte)3;
      byteArray0[4] = (byte) (-42);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      String string2 = Utility.classOrInterface((byte)105);
      assertEquals("class", string2);
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      byte[] byteArray0 = new byte[13];
      byteArray0[1] = (byte) (-86);
      byteArray0[2] = (byte) (-96);
      byteArray0[4] = (byte) (-74);
      byteArray0[5] = (byte)83;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-96), (int) (byte)83, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    nop
         // 1:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      String[] stringArray0 = new String[6];
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-121);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      // Undeclared exception!
      try { 
        Utility.signatureToString("byte");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `byte'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      String string0 = "";
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString((String) null, "\"y+!R}545Zue`H.Pl@", "", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-85);
      Utility.decode("org.apache.bcel.classfile.JavaClass$1", false);
      FileSystemHandling.shouldAllThrowIOExceptions();
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readUnsignedShort();
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("nop", string0);
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      boolean boolean0 = true;
      byte[] byteArray0 = new byte[3];
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      byteArray0[0] = (byte)108;
      byteArray0[1] = (byte)69;
      byteArray0[2] = (byte)105;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)108, (-250), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      String string0 = "z";
      boolean boolean0 = false;
      byte[] byteArray0 = Utility.decode("z", false);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "z";
      objectArray0[1] = (Object) "z";
      Utility.printArray(objectArray0, true, false);
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = null;
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      int int0 = (-1045);
      Utility.isSet((-1045), (-1045));
      int int1 = (-273);
      try { 
        byteSequence0.readInt();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.typeOfSignature((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("$Zy]v4urM5$Y|sIH13", false);
      FileSystemHandling.shouldAllThrowIOExceptions();
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.read();
      byteSequence0.readUnsignedByte();
      byteSequence0.readUnsignedShort();
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("[K", "caload", "caload");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: [K
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      Utility.isJavaIdentifierPart('U');
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)102;
      byteArray0[1] = (byte)76;
      byteArray0[2] = (byte) (-118);
      byteArray0[4] = (byte) (-9);
      Constant[] constantArray0 = new Constant[6];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantInteger constantInteger0 = new ConstantInteger(byteSequence0);
      ConstantInteger constantInteger1 = new ConstantInteger(constantInteger0);
      constantArray0[0] = (Constant) constantInteger1;
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getCachedInstance("*IT~)");
      ConstantUtf8 constantUtf8_1 = new ConstantUtf8(constantUtf8_0);
      constantUtf8_0.clone();
      constantArray0[1] = (Constant) constantUtf8_1;
      ConstantMethodType constantMethodType0 = new ConstantMethodType(43);
      constantArray0[2] = (Constant) constantMethodType0;
      Constant constant0 = constantArray0[2].copy();
      constantArray0[3] = constant0;
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref((byte)102, (byte)0);
      ConstantInterfaceMethodref constantInterfaceMethodref1 = new ConstantInterfaceMethodref(constantInterfaceMethodref0);
      Utility.typeOfSignature("*IT~)");
      try { 
        Utility.typeOfSignature("E(;fKKY/(");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: E(;fKKY/(
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("LJavaClass/P2debug;V");
      assertEquals((byte)14, byte0);
      
      String string0 = Utility.signatureToString("LJavaClass/P2debug;V", false);
      assertEquals("JavaClass.P2debug", string0);
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "";
      stringArray0[6] = "";
      stringArray0[7] = "";
      stringArray0[8] = "";
      String string0 = Utility.methodTypeToSignature("", stringArray0);
      assertEquals("(L;L;L;L;L;L;L;L;L;)L;", string0);
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-68);
      byteArray0[1] = (byte)22;
      byteArray0[2] = (byte) (-68);
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte)91;
      byteArray0[5] = (byte)81;
      byteArray0[6] = (byte) (-60);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantUtf8.getCachedInstance("aconst_null");
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, constantPool0, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "(B$?'Q";
      stringArray0[1] = "(B$?'Q";
      stringArray0[2] = "(B$?'Q";
      stringArray0[3] = "(B$?'Q";
      Utility.methodTypeToSignature("(B$?'Q", stringArray0);
      Utility.methodSignatureToString("(L(B$?'Q;L(B$?'Q;L(B$?'Q;L(B$?'Q;)L(B$?'Q;", "Unreachable default case reached!", "(B$?'Q");
      try { 
        Utility.methodSignatureReturnType("Unreachable default case reached!");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Unreachable default case reached!'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      String string0 = "BQ\"AOX)%F";
      Utility.convertString("BQ\"AOX)%F");
      Utility.signatureToString("BQ\"AOX)%F", false);
      try { 
        Utility.typeOfMethodSignature("'");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: '
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      String string0 = ";C|Xa=WGXKl2*|%";
      try { 
        Utility.typeOfSignature(";C|Xa=WGXKl2*|%");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ;C|Xa=WGXKl2*|%
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      Utility.classOrInterface(77);
      // Undeclared exception!
      try { 
        Utility.signatureToString("class", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `class'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readUnsignedShort();
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      short short0 = Utility.searchOpcode("nop");
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-85);
      byteArray0[1] = (byte) (-95);
      byteArray0[2] = (byte) (-91);
      byteArray0[3] = (byte) (-15);
      byteArray0[4] = (byte)94;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-91), (int) (byte) (-91));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)55;
      byteArray0[1] = (byte)39;
      byteArray0[2] = (byte)67;
      byteArray0[3] = (byte)39;
      byteArray0[4] = (byte)43;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 83, (int) (byte)67, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      String string0 = "MN7t|";
      try { 
        Utility.typeOfSignature("MN7t|");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: MN7t|
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      Utility.signatureToString("CB{[1]AYvK2", false);
      Utility.decode("?'", false);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)29;
      byteArray0[1] = (byte)47;
      byteArray0[2] = (byte)9;
      byteArray0[3] = (byte) (-28);
      byteArray0[4] = (byte)49;
      byteArray0[5] = (byte)9;
      byteArray0[6] = (byte)74;
      byteArray0[7] = (byte) (-47);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      try { 
        Utility.methodSignatureArgumentTypes("l= ODN~}>A*", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: l= ODN~}>A*
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-48);
      byteArray0[1] = (byte)18;
      byteArray0[2] = (byte)18;
      byteArray0[3] = (byte)18;
      byteArray0[4] = (byte)18;
      byteArray0[5] = (byte) (-41);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      Utility.compactClassName("");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-93);
      byteArray0[1] = (byte)120;
      byteArray0[2] = (byte) (-98);
      byteArray0[3] = (byte) (-77);
      byteArray0[4] = (byte) (-57);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      try { 
        Utility.methodSignatureToString("if_icmpgt\t\t#30878", "", "if_icmplt", false, (LocalVariableTable) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: if_icmpgt\t\t#30878
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      String string0 = null;
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.methodSignatureReturnType((String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean0);
      
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte) (-89);
      byteArray1[1] = (byte) (-108);
      byteArray1[2] = (byte) (-86);
      byteArray1[3] = (byte)52;
      byteArray1[4] = (byte)67;
      byteArray1[5] = (byte)7;
      byteArray1[6] = (byte)75;
      String string0 = Utility.codeToString(byteArray1, (ConstantPool) null, (-889), (-889), false);
      assertEquals("0:    goto\t\t#-27478\n3:    caload\n4:    fstore_0\n5:    iconst_4\n6:    astore_0\n", string0);
      
      String string1 = Utility.getSignature("0:    goto\t\t#-27478\n3:    caload\n4:    fstore_0\n5:    iconst_4\n6:    astore_0\n");
      assertEquals("L0:;", string1);
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      String string0 = "OjQgF";
      Utility.convertString("OjQgF");
      int int0 = 1;
      Utility.setBit((-2522), 1);
      try { 
        Utility.typeOfSignature("OjQgF");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: OjQgF
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      try { 
        Utility.typeOfSignature("?B$?'Q");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ?B$?'Q
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      int int0 = 795;
      Utility.classOrInterface(795);
      String string0 = null;
      // Undeclared exception!
      try { 
        Utility.searchOpcode((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-96);
      byteArray0[1] = (byte) (-96);
      byteArray0[3] = (byte) (-96);
      byteArray0[4] = (byte)13;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("if_icmpne\t\t#-24576", string0);
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)87;
      byteArray0[1] = (byte)57;
      byteArray0[2] = (byte)44;
      byteArray0[3] = (byte)103;
      byteArray0[4] = (byte)48;
      byteArray0[5] = (byte)101;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence1, (ConstantPool) null, true);
      boolean boolean0 = Utility.isSet(8, (byte)101);
      assertFalse(boolean0);
      
      String string0 = Utility.getSignature("pop");
      assertEquals("Lpop;", string0);
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)55;
      byteArray0[1] = (byte)39;
      byteArray0[2] = (byte)39;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("lstore\t\t%39", string0);
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      String string0 = Utility.getSignature("InvVid byteKtag in constant poxl: ");
      assertEquals("LInvVid;", string0);
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      int int0 = 862;
      String string0 = "EJdmwk-";
      // Undeclared exception!
      try { 
        Utility.signatureToString("EJdmwk-");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `EJdmwk-'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      String string0 = Utility.replace("float", " 6rg", "float");
      assertEquals("float", string0);
      
      Object[] objectArray0 = new Object[0];
      String string1 = Utility.printArray(objectArray0);
      assertEquals("{}", string1);
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)100;
      byteArray0[1] = (byte)9;
      byteArray0[2] = (byte) (-99);
      byteArray0[3] = (byte) (-99);
      byteArray0[4] = (byte) (-41);
      byteArray0[5] = (byte)52;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("isub", string0);
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      String string0 = "Kn#|'x{PCDIBE\\>{P";
      try { 
        Utility.typeOfSignature("Kn#|'x{PCDIBE>{P");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Kn#|'x{PCDIBE>{P
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-82);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.markSupported();
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("freturn", string0);
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)19;
      byteArray0[1] = (byte)86;
      byteArray0[7] = (byte)80;
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte)71;
      byteArray0[5] = (byte)2;
      byteArray0[6] = (byte)115;
      byteArray0[7] = (byte) (-108);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      Utility.setBit((-1577), (-1577));
      Utility.replace("hh0@Qmd^", " arg", " arg");
      Utility.isSet((-1577), 514);
      String string0 = null;
      // Undeclared exception!
      try { 
        Utility.compactClassName((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-60);
      byteArray0[1] = (byte) (-94);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence1.readUnsignedShort();
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("wide\t(wide)", string0);
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      try { 
        Utility.typeOfSignature("593/ -d ;LN6-m\"q");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 593/ -d ;LN6-m\"q
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)91;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "invokedynamic");
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Utility.classOrInterface(75);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)91, 87, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      try { 
        Utility.methodSignatureArgumentTypes("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      String string0 = Utility.compactClassName("JAavaClass", "JAavaClass", true);
      assertEquals("", string0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)111;
      byteArray0[1] = (byte)114;
      byteArray0[2] = (byte) (-96);
      byteArray0[3] = (byte) (-87);
      byte byte0 = Utility.typeOfSignature("JAavaClass");
      assertEquals((byte)11, byte0);
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-112);
      byteArray0[1] = (byte) (-64);
      byteArray0[2] = (byte) (-112);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("d2f", string0);
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)37;
      byteArray0[1] = (byte)75;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence2, constantPool0, true);
      assertEquals("fload_3", string0);
  }

  @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      int int0 = (-36822361);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Utility.accessToString((-36822361), false);
      Utility.isSet((-36822361), 147);
      // Undeclared exception!
      try { 
        Utility.typeOfMethodSignature((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      // Undeclared exception!
      Utility.replace("void", "", "");
  }

  @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      short short0 = Utility.searchOpcode("castore");
      assertEquals((short)85, short0);
  }

  @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      String string0 = Utility.signatureToString("CB{[1]AYvK2", false);
      assertEquals("char", string0);
      
      byte[] byteArray0 = Utility.decode("?'", false);
      byte[] byteArray1 = new byte[9];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray1);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string1 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals("lstore_0", string1);
  }

  @Test(timeout = 4000)
  public void test316()  throws Throwable  {
      String string0 = Utility.compactClassName("LJavClass/P2debug;V", false);
      assertEquals("LJavClass.P2debug;V", string0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-98);
      byteArray0[1] = (byte) (-76);
      byteArray0[2] = (byte) (-86);
      byteArray0[3] = (byte) (-95);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("ifle\t\t#-19286", string1);
  }

  @Test(timeout = 4000)
  public void test317()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)78;
      byteArray0[1] = (byte) (-126);
      byteArray0[2] = (byte)70;
      byteArray0[3] = (byte)111;
      byteArray0[4] = (byte) (-13);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      String string0 = "6fia<QKC]Z%rg>7";
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("Invalid constant pool reference: ", (String) null, "6fia<QKC]Z%rg>7", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Invalid constant pool reference: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test318()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-44);
      byteArray0[1] = (byte) (-38);
      byteArray0[2] = (byte)65;
      byteArray0[4] = (byte)5;
      byteArray0[4] = (byte)95;
      byteArray0[5] = (byte)1;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[4];
      ConstantInteger constantInteger0 = new ConstantInteger(byteSequence0);
      ConstantInteger constantInteger1 = new ConstantInteger(constantInteger0);
      constantArray0[0] = (Constant) constantInteger1;
      ConstantMethodref constantMethodref0 = new ConstantMethodref(byteSequence1);
      constantArray0[1] = (Constant) constantMethodref0;
      ConstantInteger constantInteger2 = new ConstantInteger((byte) (-44));
      constantArray0[2] = (Constant) constantInteger2;
      ConstantMethodref constantMethodref1 = new ConstantMethodref(2067, 179);
      constantArray0[3] = (Constant) constantMethodref1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteSequence1, constantPool0, true);
      assertEquals("swap", string0);
  }

  @Test(timeout = 4000)
  public void test319()  throws Throwable  {
      Utility.convertString("`_-A*T{vhEOoJN");
      String string0 = "Mlr$keP^f`Ia;.;";
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.signatureToString("Mlr$keP^f`Ia;.;", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Mlr$keP^f`Ia;.;'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test320()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte) (-67);
      byteArray0[0] = (byte) (-67);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test321()  throws Throwable  {
      Utility.format((-1807), (-1807), false, 'R');
      Utility.compactClassName("Ep+x7|l\"t", false);
      try { 
        Utility.typeOfSignature("7aRXO&k{");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 7aRXO&k{
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test322()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-101);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("iflt\t\t#0", string0);
  }

  @Test(timeout = 4000)
  public void test323()  throws Throwable  {
      String string0 = Utility.compactClassName("invokedynamic", false);
      assertEquals("invokedynamic", string0);
      
      byte[] byteArray0 = Utility.decode("invokedynamic", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readUnsignedByte();
      byteSequence0.readUnsignedShort();
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("ddiv", string1);
  }

  @Test(timeout = 4000)
  public void test324()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-120);
      byteArray0[1] = (byte)94;
      byteArray0[2] = (byte) (-18);
      byteArray0[3] = (byte) (-96);
      byteArray0[4] = (byte)14;
      byteArray0[5] = (byte)44;
      byteArray0[6] = (byte) (-32);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string0 = Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-32), 2394);
      assertEquals("0:    l2i\n1:    dup2_x2\n2:    <illegal opcode>\n3:    if_icmpne\t\t#3631\n6:    <illegal opcode>\n", string0);
  }

  @Test(timeout = 4000)
  public void test325()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldAllThrowIOExceptions();
      ConstantPool constantPool0 = null;
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)17;
      byteArray0[1] = (byte) (-64);
      byteArray0[2] = (byte) (-112);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = null;
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.codeToString((ByteSequence) null, (ConstantPool) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test326()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)76;
      byteArray0[1] = (byte)85;
      byteArray0[2] = (byte)66;
      byteArray0[3] = (byte) (-88);
      byteArray0[4] = (byte)92;
      byteArray0[5] = (byte)22;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[1];
      ConstantString constantString0 = new ConstantString(byteSequence0);
      ConstantString constantString1 = new ConstantString(constantString0);
      constantArray0[0] = (Constant) constantString1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("lstore_3", string0);
  }

  @Test(timeout = 4000)
  public void test327()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-67);
      byteArray0[1] = (byte) (-60);
      byteArray0[1] = (byte) (-5);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)32;
      byteArray0[5] = (byte)80;
      byteArray0[6] = (byte) (-80);
      ConstantUtf8.getCachedInstance("#JYl0");
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test328()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)79;
      byteArray0[1] = (byte) (-32);
      byteArray0[2] = (byte) (-80);
      byteArray0[3] = (byte) (-41);
      byteArray0[4] = (byte) (-83);
      byteArray0[5] = (byte) (-124);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals("iastore", string0);
  }

  @Test(timeout = 4000)
  public void test329()  throws Throwable  {
      String string0 = Utility.methodSignatureReturnType("SAME");
      assertEquals("short", string0);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "short";
      byte byte0 = Utility.typeOfSignature("V");
      assertEquals((byte)12, byte0);
  }

  @Test(timeout = 4000)
  public void test330()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray0 = Utility.decode("$Zy]v4urM5$Y|sIH13", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[7];
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getInstance("$Zy]v4urM5$Y|sIH13");
      constantArray0[0] = (Constant) constantUtf8_0;
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(184, 108);
      constantArray0[1] = (Constant) constantMethodHandle0;
      ConstantUtf8 constantUtf8_1 = new ConstantUtf8(constantUtf8_0);
      constantArray0[2] = (Constant) constantUtf8_1;
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(byteSequence0);
      assertEquals(6521, constantNameAndType0.getNameIndex());
      
      constantArray0[3] = (Constant) constantNameAndType0;
      ConstantMethodHandle constantMethodHandle1 = new ConstantMethodHandle(198, (-1496));
      constantArray0[4] = (Constant) constantMethodHandle1;
      ConstantClass constantClass0 = new ConstantClass(184);
      constantArray0[5] = (Constant) constantClass0;
      ConstantUtf8 constantUtf8_2 = new ConstantUtf8("$Zy]v4urM5$Y|sIH13");
      constantArray0[6] = (Constant) constantUtf8_2;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals(17, byteArray0.length);
      assertEquals("caload", string0);
  }

  @Test(timeout = 4000)
  public void test331()  throws Throwable  {
      String string0 = Utility.replace("<[BH", "<[BH", "<[BH");
      assertEquals("<[BH", string0);
      
      byte[] byteArray0 = Utility.decode("$Zy]v4urM5$Y|sIH13", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      int int0 = byteSequence0.readUnsignedByte();
      assertEquals(25, int0);
      
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("lshl", string1);
  }

  @Test(timeout = 4000)
  public void test332()  throws Throwable  {
      String string0 = Utility.classOrInterface((-558));
      assertEquals("class", string0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)56;
      byteArray0[1] = (byte) (-65);
      byteArray0[2] = (byte) (-90);
      byteArray0[3] = (byte) (-90);
      byteArray0[4] = (byte)56;
      byteArray0[5] = (byte)47;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.close();
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("fstore\t\t%191", string1);
  }

  @Test(timeout = 4000)
  public void test333()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "[@j),!VPow#-XP";
      stringArray0[1] = "[@j),!VPow#-XP";
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature("[@j),!VPow#-XP", stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal type: [@j),!VPow#-XP
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test334()  throws Throwable  {
      String string0 = "u1'";
      // Undeclared exception!
      try { 
        Utility.codeToString((byte[]) null, (ConstantPool) null, (int) (byte)102, (int) (byte)83, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test335()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-68);
      byteArray0[1] = (byte)22;
      byteArray0[2] = (byte)81;
      byteArray0[3] = (byte)81;
      byteArray0[4] = (byte)91;
      byteArray0[5] = (byte)81;
      byteArray0[6] = (byte) (-60);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantUtf8.getCachedInstance("aconst_null");
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, constantPool0, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test336()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)39;
      byteArray0[1] = (byte)39;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readBoolean();
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (-1816), (int) (byte)39);
      assertEquals("0:    dload_1\n1:    dload_1\n", string0);
  }

  @Test(timeout = 4000)
  public void test337()  throws Throwable  {
      String string0 = Utility.methodSignatureReturnType("Invalid signature: ");
      assertEquals("int", string0);
  }

  @Test(timeout = 4000)
  public void test338()  throws Throwable  {
      try { 
        Utility.typeOfSignature("'");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: '
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test339()  throws Throwable  {
      ConstantFieldref constantFieldref0 = new ConstantFieldref(12, (-274));
      ConstantFieldref constantFieldref1 = new ConstantFieldref(constantFieldref0);
      Constant[] constantArray0 = new Constant[5];
      constantArray0[0] = (Constant) constantFieldref1;
      constantArray0[1] = (Constant) constantFieldref0;
      constantArray0[2] = (Constant) constantFieldref0;
      constantArray0[3] = (Constant) constantFieldref1;
      constantArray0[4] = (Constant) constantFieldref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)40;
      byteArray0[1] = (byte)71;
      byteArray0[2] = (byte)86;
      byteArray0[3] = (byte) (-65);
      String string0 = Utility.codeToString(byteArray0, constantPool0, (-723), (int) (byte) (-65), true);
      assertEquals("0:    dload_2\n1:    dstore_0\n2:    sastore\n3:    athrow\n", string0);
  }

  @Test(timeout = 4000)
  public void test340()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)118;
      byteArray0[1] = (byte)118;
      byteArray0[3] = (byte) (-11);
      // Undeclared exception!
      try { 
        Utility.signatureToString("UL~SDk/#B\" -", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `UL~SDk/#B\" -'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test341()  throws Throwable  {
      Utility.convertString("\t");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-114);
      byteArray0[1] = (byte) (-114);
      byteArray0[2] = (byte)13;
      byteArray0[3] = (byte) (-114);
      byteArray0[4] = (byte)13;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = null;
      byteSequence0.read();
      boolean boolean0 = false;
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      String string0 = "";
      int int0 = (-2007);
      LocalVariable[] localVariableArray0 = new LocalVariable[5];
      LocalVariable localVariable0 = null;
      try {
        localVariable0 = new LocalVariable(byteSequence0, (ConstantPool) null);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test342()  throws Throwable  {
      Utility.classOrInterface(76);
      byte[] byteArray0 = new byte[6];
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byteArray0[0] = (byte)125;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("lushr", string0);
  }

  @Test(timeout = 4000)
  public void test343()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-59);
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte)120;
      byteArray1[1] = (byte) (-59);
      byteArray1[2] = (byte) (-98);
      byteArray1[3] = (byte)120;
      byteArray1[4] = (byte) (-59);
      byteArray1[5] = (byte)120;
      byteArray1[6] = (byte)53;
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("ishl", string0);
  }

  @Test(timeout = 4000)
  public void test344()  throws Throwable  {
      Utility.methodSignatureReturnType("CB{[1]AYvK2");
      String[] stringArray0 = new String[1];
      stringArray0[0] = "CB{[1]AYvK2";
      String string0 = Utility.methodTypeToSignature("CB{[1]AYvK2", stringArray0);
      assertEquals("([LCB{;)[LCB{;", string0);
      
      String string1 = Utility.methodSignatureReturnType("CB{[1]AYvK2", false);
      assertEquals("char", string1);
      
      String string2 = Utility.convertString("\\");
      assertEquals("\\\\", string2);
  }

  @Test(timeout = 4000)
  public void test345()  throws Throwable  {
      int int0 = Utility.clearBit((-36822361), 203);
      assertEquals((-36822361), int0);
      
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      String[] stringArray0 = Constants.CLASS_TYPE_NAMES;
      String string0 = Utility.classOrInterface((-36822361));
      assertEquals("interface", string0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)96;
      byteArray0[1] = (byte)5;
      byteArray0[2] = (byte) (-107);
      byteArray0[3] = (byte) (-66);
      byteArray0[4] = (byte) (-40);
      byteArray0[5] = (byte) (-51);
      byteArray0[6] = (byte)18;
      byteArray0[7] = (byte) (-99);
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test346()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[12];
      byteArray0[0] = (byte)126;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals("iand", string0);
  }

  @Test(timeout = 4000)
  public void test347()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      Constant[] constantArray0 = new Constant[3];
      Utility.printArray((Object[]) constantArray0, true, false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      Utility.codeToString(byteSequence0, constantPool1, false);
      ConstantDouble constantDouble0 = new ConstantDouble(3263.0851328);
      constantArray0[0] = (Constant) constantDouble0;
      ConstantFloat constantFloat0 = new ConstantFloat(938.0F);
      constantArray0[1] = (Constant) constantFloat0;
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ConstantMethodHandle constantMethodHandle0 = null;
      try {
        constantMethodHandle0 = new ConstantMethodHandle(byteSequence1);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test348()  throws Throwable  {
      try { 
        Utility.typeOfMethodSignature("(B$?'Q");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: (B$?'Q
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test349()  throws Throwable  {
      String string0 = Utility.accessToString((-36822361), false);
      assertEquals("public private protected synchronized transient interface annotation", string0);
      
      boolean boolean0 = Utility.isJavaIdentifierPart('C');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test350()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      String string0 = Utility.encode(byteArray0, false);
      assertEquals("", string0);
      
      String string1 = Utility.classOrInterface(80);
      assertEquals("class", string1);
  }

  @Test(timeout = 4000)
  public void test351()  throws Throwable  {
      String string0 = "";
      String string1 = "qg?~5^l";
      String string2 = "aHM#Xm";
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("", "qg?~5^l", "aHM#Xm");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test352()  throws Throwable  {
      Utility.isJavaIdentifierPart('U');
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)102;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantUtf8.getCachedInstance("2?Lfb'|cM(>4O8");
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteSequence0, constantPool0, false);
      try { 
        Utility.decode("ifnonnull", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test353()  throws Throwable  {
      ConstantDouble constantDouble0 = new ConstantDouble((byte) (-128));
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-67);
      byteArray0[1] = (byte) (-128);
      byteArray0[2] = (byte) (-128);
      byteArray0[3] = (byte) (-128);
      byteArray0[4] = (byte) (-128);
      byteArray0[5] = (byte) (-128);
      byteArray0[6] = (byte) (-119);
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte) (-128);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      byteSequence2.skip((byte) (-128));
      byteSequence2.readUnsignedByte();
      String string0 = Utility.codeToString(byteSequence2, constantPool0, true);
      assertEquals("ior", string0);
  }

  @Test(timeout = 4000)
  public void test354()  throws Throwable  {
      Utility.methodSignatureReturnType("V");
      Utility.replace("V", "Unrecognized attribute type tag parsed: ", "R{8-4~4SA$e2|~@");
      Utility.signatureToString("V", false);
      // Undeclared exception!
      try { 
        Utility.signatureToString("l]>,{v &i{a@");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `l]>,{v &i{a@'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test355()  throws Throwable  {
      Utility.format((-3543), 0, true, '#');
      Utility.replace("!=sm+%^,", "-3543", "");
      Utility.accessToString(187, false);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "";
      Utility.printArray(objectArray0);
      Utility.classOrInterface(65);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)100;
      byteArray0[1] = (byte)30;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)57;
      byteArray0[4] = (byte)18;
      byteArray0[5] = (byte) (-62);
      byteArray0[6] = (byte) (-115);
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte)18;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool(byteSequence0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid byte tag in constant pool: 0
         //
         verifyException("org.apache.bcel.classfile.Constant", e);
      }
  }

  @Test(timeout = 4000)
  public void test356()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("O4jQgF", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `O4jQgF'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test357()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("Signature", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("aastore", string0);
  }

  @Test(timeout = 4000)
  public void test358()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)68;
      byteArray0[1] = (byte)14;
      byteArray0[2] = (byte) (-65);
      byteArray0[3] = (byte)35;
      byteArray0[4] = (byte)5;
      byteArray0[5] = (byte) (-82);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("fstore_1", string0);
  }

  @Test(timeout = 4000)
  public void test359()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      Utility.encode(byteArray0, false);
      Utility.fillup("$A", 857, false, 'X');
      Utility.format(943, 943, false, '5');
  }

  @Test(timeout = 4000)
  public void test360()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)45;
      byteArray0[1] = (byte)32;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.markSupported();
      Utility.codeToString(byteSequence0, constantPool0, true);
      String string0 = Utility.encode(byteArray0, false);
      assertEquals("$z$m", string0);
  }

  @Test(timeout = 4000)
  public void test361()  throws Throwable  {
      Utility.accessToString(697, false);
      LocalVariableTable localVariableTable0 = new LocalVariableTable(853, 697, (LocalVariable[]) null, (ConstantPool) null);
      boolean boolean0 = true;
      try { 
        Utility.methodSignatureToString(", nairs = ", "PTmZexlwAOS5$KDvLB", "public static final synchronized transient interface", true, localVariableTable0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: , nairs = 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test362()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-107);
      byteArray0[1] = (byte) (-62);
      byteArray0[2] = (byte) (-84);
      byteArray0[3] = (byte)127;
      byteArray0[4] = (byte) (-27);
      byteArray0[5] = (byte) (-61);
      byteArray0[6] = (byte) (-53);
      byteArray0[7] = (byte)105;
      byteArray0[8] = (byte) (-81);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readUnsignedShort();
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals(3, byteSequence0.getIndex());
  }

  @Test(timeout = 4000)
  public void test363()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)7;
      Utility.replace("R{8-4~4SA$e2|~@", "float", "i2f");
      // Undeclared exception!
      try { 
        Utility.signatureToString("NkDUuvL$R%3Bvi", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `NkDUuvL$R%3Bvi'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test364()  throws Throwable  {
      Utility.isSet(214, 1895);
      Utility.isJavaIdentifierPart('i');
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Utility.format(214, 'i', true, 'i');
      Utility.accessToString(214, false);
      Utility.compactClassName("", "", true);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "214iiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiii";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "";
      stringArray0[6] = "214iiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiii";
      Utility.methodTypeToSignature("", stringArray0);
      int int0 = 26;
      Utility.isSet(26, 1840);
      Utility.setBit((-954), 3846);
      Utility.printArray((Object[]) stringArray0, true);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("214iiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiii", "]U+e'O", "214iiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiii");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 214iiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiii
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test365()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool(byteSequence0);
      ConstantPool constantPool1 = constantPool0.copy();
      Utility.codeToString(byteSequence0, constantPool1, false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("boolean");
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "boolean");
      Utility.printArray(printWriter0, (Object[]) null);
      String string0 = "\n";
      try { 
        Utility.methodSignatureArgumentTypes("boolean");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: boolean
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test366()  throws Throwable  {
      Utility.classOrInterface(0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)13;
      byteArray0[1] = (byte) (-70);
      byteArray0[2] = (byte) (-64);
      byteArray0[3] = (byte) (-99);
      byteArray0[4] = (byte) (-85);
      byteArray0[5] = (byte)60;
      byteArray0[6] = (byte) (-66);
      byteArray0[7] = (byte)86;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteSequence0);
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(dataInputStream0);
      ConstantMethodHandle constantMethodHandle1 = new ConstantMethodHandle(constantMethodHandle0);
      Constant[] constantArray0 = new Constant[5];
      constantArray0[0] = (Constant) constantMethodHandle0;
      constantArray0[1] = (Constant) constantMethodHandle1;
      constantArray0[2] = (Constant) constantMethodHandle1;
      constantArray0[3] = (Constant) constantMethodHandle0;
      constantArray0[4] = (Constant) constantMethodHandle1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      int int0 = 0;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 0, (-3048), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 49309. Constant pool size is: 5
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test367()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)90;
      byteArray0[1] = (byte)90;
      byteArray0[2] = (byte)90;
      byteArray0[3] = (byte) (-121);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readUnsignedShort();
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("dup_x1", string0);
  }

  @Test(timeout = 4000)
  public void test368()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-74);
      boolean boolean0 = false;
      Utility.decode("!s2fYx}w8M=K*|/", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.markSupported();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test369()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("public", (String) null, ":%sGK");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: public
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test370()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-83);
      byteArray0[1] = (byte)112;
      byteArray0[2] = (byte)76;
      byteArray0[3] = (byte) (-116);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals("lreturn", string0);
  }

  @Test(timeout = 4000)
  public void test371()  throws Throwable  {
      String string0 = "OjQgF";
      Utility.convertString("OjQgF");
      boolean boolean0 = true;
      String string1 = Utility.format(2522, 2522, true, '-');
      try { 
        Utility.typeOfSignature(string1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test372()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-55);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      try { 
        Utility.codeToString(byteSequence1, (ConstantPool) null, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test373()  throws Throwable  {
      String string0 = Utility.accessToString(862, true);
      Utility.decode("private protected static final volatile native", false);
      File file0 = MockFile.createTempFile("\t\t<", "private protected static final volatile native");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      PrintWriter printWriter0 = mockPrintWriter0.append('I');
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) file0;
      Utility.printArray(printWriter0, objectArray0);
      byte[] byteArray0 = Utility.decode("Invalid signature: `", false);
      String string1 = Utility.compactClassName("private protected static final volatile native", true);
      assertTrue(string1.equals((Object)string0));
      
      Utility.accessToString(0, true);
      Utility.printArray((PrintWriter) mockPrintWriter0, objectArray0);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string2 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals("dstore_2", string2);
  }

  @Test(timeout = 4000)
  public void test374()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("Byte code error: ");
      assertEquals((byte)8, byte0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)8;
      byteArray0[1] = (byte)8;
      byteArray0[2] = (byte)8;
      byteArray0[3] = (byte)8;
      byteArray0[4] = (byte)8;
      byteArray0[5] = (byte)8;
      byteArray0[6] = (byte)8;
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean0);
      
      String string0 = Utility.toHexString(byteArray0);
      assertEquals("08 08 08 08 08 08 08", string0);
  }

  @Test(timeout = 4000)
  public void test375()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("static", "static", "static");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: static
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test376()  throws Throwable  {
      Utility.isSet((-1672), (-1672));
      Utility.compactClassName("]X:e4sjuW");
      Utility.accessToString((-1672), true);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-84);
      byteArray0[1] = (byte) (-59);
      byteArray0[2] = (byte) (-79);
      byteArray0[3] = (byte)60;
      byteArray0[4] = (byte) (-116);
      byteArray0[5] = (byte) (-77);
      byteArray0[6] = (byte)25;
      byteArray0[7] = (byte) (-80);
      byteArray0[8] = (byte) (-93);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readUnsignedByte();
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence1.readUnsignedShort();
      String string0 = Utility.codeToString(byteSequence1, (ConstantPool) null, true);
      assertEquals("return", string0);
  }

  @Test(timeout = 4000)
  public void test377()  throws Throwable  {
      Utility.accessToString(49, false);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "_DF.PXcRVXS[i!>";
      stringArray0[1] = "public final synchronized";
      stringArray0[2] = "a:";
      stringArray0[3] = "putstatic";
      stringArray0[4] = "_DF.PXcRVXS[i!>";
      stringArray0[5] = "Wz@API\"";
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature("a:", stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegally nested brackets:[i!>
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test378()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)114;
      byteArray0[1] = (byte) (-96);
      byteArray0[3] = (byte) (-96);
      byteArray0[4] = (byte)114;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("frem", string0);
  }

  @Test(timeout = 4000)
  public void test379()  throws Throwable  {
      Utility.compactClassName("LJavClass/P2debug;V", false);
      byte[] byteArray0 = new byte[5];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Utility.replace("LJavClass.P2debug;V", "areturn", "LJavClass/P2debug;V");
      // Undeclared exception!
      try { 
        Utility.signatureToString("YE>(GA#l;+ACpb)tSf", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `YE>(GA#l;+ACpb)tSf'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test380()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-24);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)0, (int) (byte) (-24));
      assertEquals("0:    <illegal opcode>\n1:    nop\n2:    nop\n3:    nop\n", string0);
      
      short short0 = Utility.searchOpcode("0:    <illegal opcode>\n1:    nop\n2:    nop\n3:    nop\n");
      assertEquals((short) (-1), short0);
  }

  @Test(timeout = 4000)
  public void test381()  throws Throwable  {
      Utility.classOrInterface((-558));
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[19];
      byteArray0[0] = (byte)109;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("ldiv", string0);
  }

  @Test(timeout = 4000)
  public void test382()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)103;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 103, (-2208), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test383()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("+FE01}]-24e({:");
      assertEquals((byte)6, byte0);
  }

  @Test(timeout = 4000)
  public void test384()  throws Throwable  {
      Utility.typeOfSignature("D");
      Utility.searchOpcode("D");
      try { 
        Utility.methodSignatureArgumentTypes("D", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: D
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test385()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte) (-73);
      byteArray0[2] = (byte)83;
      byteArray0[3] = (byte) (-65);
      byteArray0[4] = (byte) (-65);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 49, 57);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test386()  throws Throwable  {
      Utility.accessToString(862, true);
      Utility.decode("private protected static final volatile native", false);
      File file0 = MockFile.createTempFile("\t\t<", "private protected static final volatile native");
      file0.mkdir();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      PrintWriter printWriter0 = mockPrintWriter0.append('I');
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) file0;
      Utility.printArray(printWriter0, objectArray0);
      byte[] byteArray0 = Utility.decode("Invalid signature: `", false);
      Utility.compactClassName("private protected static final volatile native", true);
      Utility.accessToString(0, true);
      Utility.printArray((PrintWriter) mockPrintWriter0, objectArray0);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      // Undeclared exception!
      Utility.codeToString(byteArray0, (ConstantPool) null, (-662), 0);
  }

  @Test(timeout = 4000)
  public void test387()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      byteArray0[0] = (byte)37;
      byteArray0[1] = (byte)88;
      boolean boolean0 = false;
      Utility.encode(byteArray0, false);
      Utility.getSignature("$rX");
      String string0 = "interface";
      String string1 = "void";
      int int0 = 2370;
      int int1 = 210;
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      PipedInputStream pipedInputStream1 = null;
      try {
        pipedInputStream1 = new PipedInputStream(pipedOutputStream0, (byte)88);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Already connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test388()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)96;
      byteArray0[1] = (byte)45;
      byteArray0[2] = (byte)96;
      byteArray0[3] = (byte) (-70);
      byteArray0[4] = (byte) (-88);
      byteArray0[5] = (byte) (-70);
      byteArray0[6] = (byte) (-13);
      byteArray0[7] = (byte)96;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("iadd", string0);
  }

  @Test(timeout = 4000)
  public void test389()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "5L");
      try { 
        Utility.methodSignatureReturnType("[=t;R~>IJ8ZTIe");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `=t;R~>IJ8ZTIe'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test390()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-85);
      byteArray0[1] = (byte) (-14);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-92);
      byteArray0[4] = (byte) (-12);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.markSupported();
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test391()  throws Throwable  {
      ConstantDouble constantDouble0 = new ConstantDouble((-753.0895069));
      ConstantFloat constantFloat0 = new ConstantFloat(0.0F);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)119;
      byteArray0[1] = (byte) (-80);
      byteArray0[2] = (byte)78;
      byteArray0[3] = (byte) (-105);
      byteArray0[4] = (byte)43;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("dneg", string0);
  }

  @Test(timeout = 4000)
  public void test392()  throws Throwable  {
      Utility.compactClassName("c;8", false);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)29;
      byteArray0[1] = (byte)57;
      byteArray0[2] = (byte) (-66);
      Utility.encode(byteArray0, false);
      Utility.isSet((byte) (-66), 512);
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte) (-66);
      byteArray1[1] = (byte)57;
      byteArray1[2] = (byte)29;
      byteArray1[3] = (byte) (-66);
      byteArray1[4] = (byte) (-66);
      byteArray1[5] = (byte) (-66);
      byteArray1[6] = (byte)57;
      byteArray1[7] = (byte)57;
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      Constant[] constantArray0 = new Constant[2];
      int int0 = 13;
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool(byteSequence0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid byte tag in constant pool: 29
         //
         verifyException("org.apache.bcel.classfile.Constant", e);
      }
  }

  @Test(timeout = 4000)
  public void test393()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)46;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence1, (ConstantPool) null, true);
      Utility.isSet((byte)46, 95);
      try { 
        Utility.typeOfSignature("? extends ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ? extends 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test394()  throws Throwable  {
      int int0 = 154;
      Utility.fillup("", 154, false, 'a');
      try { 
        Utility.methodSignatureArgumentTypes("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test395()  throws Throwable  {
      String[] stringArray0 = Constants.CONSTANT_NAMES;
      String string0 = Utility.accessToString(154, true);
      Utility.compactClassName("", true);
      short short0 = Utility.searchOpcode("");
      assertEquals((short) (-1), short0);
      
      String string1 = Utility.fillup("private static final transient", (short) (-1), true, '<');
      assertTrue(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test396()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-97);
      byteArray0[1] = (byte) (-40);
      byteArray0[2] = (byte)114;
      byteArray0[3] = (byte)86;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byteArray0[4] = (byte) (-67);
      byteArray0[5] = (byte)18;
      byteArray0[6] = (byte)7;
      byteArray0[7] = (byte)118;
      byteArray0[8] = (byte) (-19);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteSequence1, constantPool1, true);
      try { 
        Utility.methodSignatureArgumentTypes("if_icmpeq\t\t#-10126", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: if_icmpeq\t\t#-10126
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test397()  throws Throwable  {
      Utility.convertString("OjQgF");
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-113);
      byteArray0[1] = (byte) (-60);
      byteArray0[2] = (byte) (-22);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("d2l", string0);
  }

  @Test(timeout = 4000)
  public void test398()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)88;
      byteArray0[1] = (byte)36;
      byteArray0[2] = (byte)20;
      byteArray0[3] = (byte) (-7);
      Utility.encode(byteArray0, true);
      try { 
        Utility.typeOfSignature("$l$8b$I$A$A$A$A$A$A$A");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: $l$8b$I$A$A$A$A$A$A$A
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test399()  throws Throwable  {
      Utility.convertString("gGd");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)46;
      byteArray0[1] = (byte)73;
      byteArray0[2] = (byte)5;
      byteArray0[3] = (byte)77;
      byteArray0[4] = (byte)5;
      byteArray0[5] = (byte)3;
      byteArray0[6] = (byte)42;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 75, (int) (byte)5, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test400()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-76);
      byteArray0[1] = (byte) (-95);
      byteArray0[2] = (byte) (-74);
      byteArray0[3] = (byte) (-98);
      byteArray0[4] = (byte) (-76);
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte) (-76);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.reset();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test401()  throws Throwable  {
      Utility.classOrInterface(5);
      MockPrintStream mockPrintStream0 = new MockPrintStream("class");
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0);
      Object[] objectArray0 = new Object[6];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) "class";
      objectArray0[2] = (Object) mockPrintStream1;
      objectArray0[3] = (Object) mockPrintStream1;
      objectArray0[4] = (Object) mockPrintStream1;
      objectArray0[5] = (Object) mockPrintStream1;
      PrintStream printStream0 = mockPrintStream1.printf("class", objectArray0);
      Utility.printArray(printStream0, objectArray0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)32;
      byteArray0[1] = (byte)33;
      byteArray0[2] = (byte)33;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)96;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte) (-113);
      byteArray0[8] = (byte)0;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool(byteSequence0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid byte tag in constant pool: 33
         //
         verifyException("org.apache.bcel.classfile.Constant", e);
      }
  }

  @Test(timeout = 4000)
  public void test402()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-73);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence1, constantPool0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test403()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Utility.compactClassName("dreturn", true);
      Utility.format(1561, (-455), true, 'V');
      Utility.accessToString(1561);
      String string0 = Utility.printArray((Object[]) null, true, true);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test404()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("", false);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) "";
      Utility.printArray(objectArray0, true, false);
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test405()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "m'7FT%@`(50\"");
      String string0 = "(B$?'Q";
      try { 
        Utility.typeOfSignature("(B$?'Q");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: (B$?'Q
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test406()  throws Throwable  {
      String[] stringArray0 = Constants.INTERFACES_IMPLEMENTED_BY_ARRAYS;
      String string0 = "amR ?FeSX:i$VlQ";
      boolean boolean0 = true;
      try { 
        Utility.methodSignatureReturnType("amR ?FeSX:i$VlQ", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `amR ?FeSX:i$VlQ'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test407()  throws Throwable  {
      String string0 = ",$";
      Utility.decode(",$", false);
      try { 
        Utility.methodSignatureArgumentTypes(",$", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ,$
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test408()  throws Throwable  {
      String string0 = Utility.classOrInterface(0);
      assertEquals("class", string0);
      
      String string1 = Utility.format(0, 0, true, '-');
      assertEquals("0", string1);
      
      short short0 = Utility.searchOpcode("K>$F./~5_<Jg79L");
      assertEquals((short) (-1), short0);
      
      String string2 = Utility.accessToString((int) (short) (-1));
      assertEquals("public private protected static final synchronized volatile transient native interface abstract strictfp synthetic annotation enum", string2);
  }

  @Test(timeout = 4000)
  public void test409()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.toHexString((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test410()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-109);
      byteArray0[1] = (byte) (-125);
      byteArray0[2] = (byte) (-125);
      byteArray0[3] = (byte) (-125);
      byteArray0[4] = (byte) (-125);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("i2s", string0);
  }

  @Test(timeout = 4000)
  public void test411()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)36;
      byteArray0[1] = (byte) (-71);
      byteArray0[2] = (byte) (-34);
      byteArray0[3] = (byte) (-56);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string0 = Utility.codeToString(byteSequence1, constantPool0, false);
      assertEquals("fload_2", string0);
  }

  @Test(timeout = 4000)
  public void test412()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.replace((String) null, "xS", "\t\t<");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test413()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)17;
      byteArray0[1] = (byte) (-64);
      byteArray0[2] = (byte) (-112);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("sipush\t\t-16240", string0);
  }

  @Test(timeout = 4000)
  public void test414()  throws Throwable  {
      try { 
        Utility.typeOfSignature("P^|'nD[OFf4?:| HO");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: P^|'nD[OFf4?:| HO
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test415()  throws Throwable  {
      Utility.methodSignatureReturnType("SAME");
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-63);
      byteArray0[1] = (byte) (-118);
      byteArray0[2] = (byte) (-101);
      byteArray0[3] = (byte)82;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test416()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      String string0 = Utility.printArray(objectArray0, false, false);
      Utility.compactClassName("", "", false);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)48;
      byteArray0[1] = (byte)36;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test417()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)17;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test418()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)91;
      byteArray0[1] = (byte)91;
      byteArray0[2] = (byte)81;
      byteArray0[3] = (byte)82;
      byteArray0[4] = (byte)81;
      byteArray0[5] = (byte)91;
      byteArray0[6] = (byte)82;
      byteArray0[7] = (byte) (-60);
      byteArray0[8] = (byte) (-60);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantUtf8.getCachedInstance("^Zu&?t`jUI{ $|");
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals("dup_x2", string0);
  }

  @Test(timeout = 4000)
  public void test419()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-73);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[6];
      ConstantFieldref constantFieldref0 = new ConstantFieldref((byte) (-73), (byte) (-73));
      ConstantFieldref constantFieldref1 = new ConstantFieldref(constantFieldref0);
      constantArray0[0] = (Constant) constantFieldref1;
      ConstantLong constantLong0 = new ConstantLong((byte) (-73));
      constantArray0[1] = (Constant) constantLong0;
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(byteSequence0);
      constantArray0[2] = (Constant) constantMethodHandle0;
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8(")*nGyBRAzvA");
      ConstantUtf8 constantUtf8_1 = new ConstantUtf8(constantUtf8_0);
      constantArray0[3] = (Constant) constantUtf8_1;
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref(170, (byte) (-73));
      ConstantInterfaceMethodref constantInterfaceMethodref1 = new ConstantInterfaceMethodref(constantInterfaceMethodref0);
      constantArray0[4] = (Constant) constantInterfaceMethodref1;
      ConstantUtf8 constantUtf8_2 = ConstantUtf8.getCachedInstance(")*nGyBRAzvA");
      constantArray0[5] = (Constant) constantUtf8_2;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence1, constantPool0, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: -73. Constant pool size is: 6
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test420()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)41;
      byteArray0[1] = (byte) (-77);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("dload_3", string0);
  }

  @Test(timeout = 4000)
  public void test421()  throws Throwable  {
      try { 
        Utility.typeOfSignature("Exeptions");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Exeptions
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test422()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)87;
      byteArray0[1] = (byte) (-81);
      byteArray0[2] = (byte) (-81);
      byteArray0[3] = (byte) (-121);
      byte[] byteArray1 = Utility.decode(":tp *A", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      byteSequence0.readUnsignedShort();
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertArrayEquals(new byte[] {(byte)58, (byte)116, (byte)112, (byte)127, (byte)32, (byte)42, (byte)65}, byteArray1);
      assertEquals("irem", string0);
  }

  @Test(timeout = 4000)
  public void test423()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)63;
      byteArray0[1] = (byte)88;
      byteArray0[2] = (byte)46;
      String string0 = Utility.toHexString(byteArray0);
      assertEquals("3f 58 2e", string0);
      
      String string1 = Utility.replace("new", "new", (String) null);
      assertNotNull(string1);
      assertEquals("null", string1);
  }

  @Test(timeout = 4000)
  public void test424()  throws Throwable  {
      String string0 = "byte";
      try { 
        Utility.methodSignatureArgumentTypes("byte", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: byte
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test425()  throws Throwable  {
      try { 
        Utility.typeOfSignature(")");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: )
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test426()  throws Throwable  {
      String string0 = Utility.classOrInterface((-1134));
      assertEquals("interface", string0);
      
      byte byte0 = Utility.typeOfSignature("Ca@4K1FfVt'B}k_");
      assertEquals((byte)5, byte0);
  }

  @Test(timeout = 4000)
  public void test427()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.decode((String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test428()  throws Throwable  {
      Utility.getSignature("VJavClass/P2debgV");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)5;
      byteArray0[2] = (byte)102;
      byteArray0[3] = (byte) (-66);
      byteArray0[4] = (byte)54;
      byteArray0[5] = (byte) (-108);
      byteArray0[6] = (byte) (-107);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, 1059, (int) (byte)5);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test429()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-59);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      byteArray0[1] = (byte) (-64);
      byteArray0[2] = (byte) (-8);
      byteArray0[3] = (byte) (-88);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test430()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-108);
      byteArray0[1] = (byte) (-90);
      byteArray0[2] = (byte) (-65);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[2];
      ConstantString constantString0 = new ConstantString(byteSequence0);
      constantArray0[0] = (Constant) constantString0;
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic(196, 196);
      ConstantInvokeDynamic constantInvokeDynamic1 = new ConstantInvokeDynamic(constantInvokeDynamic0);
      constantArray0[1] = (Constant) constantInvokeDynamic1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("athrow", string0);
  }

  @Test(timeout = 4000)
  public void test431()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)32;
      Utility.encode(byteArray0, false);
      // Undeclared exception!
      try { 
        Utility.signatureToString("$m", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `$m'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test432()  throws Throwable  {
      boolean boolean0 = false;
      Utility.compactClassName("byte", false);
      int int0 = (-157);
      // Undeclared exception!
      try { 
        Utility.fillup((String) null, (-157), false, '*');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test433()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[1] = (byte)17;
      FileSystemHandling.shouldAllThrowIOExceptions();
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      Utility.isSet((byte)17, 32);
      try { 
        Utility.typeOfSignature("char");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: char
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test434()  throws Throwable  {
      Utility.decode(",$", false);
      Locale.getISOCountries();
      Utility.compactClassName(",$", ",$", true);
      Utility.isJavaIdentifierPart('x');
      try { 
        Utility.methodSignatureArgumentTypes(",$");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ,$
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test435()  throws Throwable  {
      Utility.classOrInterface(0);
      String string0 = "";
      // Undeclared exception!
      try { 
        Utility.signatureToString("", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test436()  throws Throwable  {
      Utility.classOrInterface(76);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)125;
      byteArray0[1] = (byte) (-117);
      byteArray0[2] = (byte)78;
      byteArray0[3] = (byte)3;
      byteArray0[4] = (byte) (-1);
      ConstantDouble constantDouble0 = new ConstantDouble((byte)3);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[1];
      constantArray0[0] = (Constant) constantDouble0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals("lushr", string0);
  }

  @Test(timeout = 4000)
  public void test437()  throws Throwable  {
      Utility.convertString("ifne");
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)9;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-79);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool(byteSequence0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid byte tag in constant pool: -79
         //
         verifyException("org.apache.bcel.classfile.Constant", e);
      }
  }

  @Test(timeout = 4000)
  public void test438()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.getSignature("rdZwBSs[-");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegally nested brackets:[-
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test439()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.getSignature("[LCB{;V");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal type: [LCB{;V
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test440()  throws Throwable  {
      String string0 = Utility.format(34, 54, false, '|');
      assertEquals("||||||||||||||||||||||||||||||||||||||||||||||||||||34", string0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[3] = (byte) (-27);
      byteArray0[1] = (byte)46;
      byteArray0[2] = (byte)10;
      byteArray0[3] = (byte)74;
      byteArray0[4] = (byte) (-60);
      byteArray0[5] = (byte) (-46);
      byteArray0[6] = (byte)95;
      String string1 = Utility.encode(byteArray0, false);
      assertEquals("$A$$$KJ$c4$d2_", string1);
      
      int int0 = Utility.clearBit((byte) (-27), (byte)95);
      assertEquals(2147483621, int0);
  }

  @Test(timeout = 4000)
  public void test441()  throws Throwable  {
      Utility.replace("kong", "kong", "kong");
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-84);
      byte byte0 = (byte)1;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)95;
      byteArray0[3] = (byte)38;
      byteArray0[4] = (byte)3;
      byteArray0[5] = (byte)40;
      Constant[] constantArray0 = new Constant[2];
      ConstantDouble constantDouble0 = new ConstantDouble((-4204.598171574783));
      constantArray0[0] = (Constant) constantDouble0;
      ConstantInteger constantInteger0 = new ConstantInteger((byte)40);
      ConstantInteger constantInteger1 = new ConstantInteger(constantInteger0);
      constantArray0[1] = (Constant) constantInteger1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      Utility.codeToString(byteArray0, constantPool0, 3, (int) (byte)1);
  }

  @Test(timeout = 4000)
  public void test442()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[6];
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref((-2005150875), (-4756));
      constantArray0[0] = (Constant) constantInterfaceMethodref0;
      ConstantLong constantLong0 = new ConstantLong(0L);
      constantArray0[1] = (Constant) constantLong0;
      ConstantFloat constantFloat0 = new ConstantFloat(0.75F);
      constantArray0[2] = (Constant) constantFloat0;
      ConstantFloat constantFloat1 = new ConstantFloat(0.0F);
      constantArray0[3] = (Constant) constantFloat1;
      Constant constant0 = constantArray0[0].copy();
      constantArray0[4] = constant0;
      ConstantInterfaceMethodref constantInterfaceMethodref1 = new ConstantInterfaceMethodref(constantInterfaceMethodref0);
      constantArray0[5] = (Constant) constantInterfaceMethodref1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      try { 
        Utility.codeToString(byteSequence0, constantPool0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test443()  throws Throwable  {
      Utility.signatureToString("CB{[1]AYvK2", false);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-88);
      byteArray0[1] = (byte)104;
      byteArray0[2] = (byte) (-88);
      byteArray0[3] = (byte) (-88);
      byteArray0[4] = (byte) (-88);
      byteArray0[5] = (byte) (-88);
      byteArray0[6] = (byte) (-88);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readByte();
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("imul", string0);
  }

  @Test(timeout = 4000)
  public void test444()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Utility.decode("lO", false);
      String string0 = "+i4rV>tA5-VTsj";
      try { 
        Utility.methodSignatureArgumentTypes("", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test445()  throws Throwable  {
      try { 
        Utility.typeOfMethodSignature("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test446()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(421);
      BufferedWriter bufferedWriter0 = new BufferedWriter(stringWriter0, 421);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(bufferedWriter0, true);
      PrintWriter printWriter0 = mockPrintWriter0.format((Locale) null, "", (Object[]) null);
      Utility.printArray(printWriter0, (Object[]) null);
      Utility.replace("", "Byte code error: ", "");
      Utility.convertString("");
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = null;
      stringArray0[3] = "Cr6";
      stringArray0[4] = "";
      stringArray0[5] = "";
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature((String) null, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test447()  throws Throwable  {
      Utility.getSignature(" ");
      Utility.signatureToString("L;");
      try { 
        Utility.typeOfSignature("<illegal opcode>");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: <illegal opcode>
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test448()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-112);
      byteArray0[1] = (byte) (-112);
      byteArray0[2] = (byte) (-24);
      byteArray0[3] = (byte) (-112);
      byteArray0[4] = (byte) (-24);
      byteArray0[5] = (byte) (-24);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("d2f", string0);
  }

  @Test(timeout = 4000)
  public void test449()  throws Throwable  {
      String string0 = Utility.methodSignatureReturnType("B{[1]AYv2");
      assertEquals("byte", string0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-57);
      byteArray0[1] = (byte)57;
      byteArray0[2] = (byte) (-77);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("ifnonnull\t\t#14771", string1);
  }

  @Test(timeout = 4000)
  public void test450()  throws Throwable  {
      Utility.compactClassName("dstore_1", false);
      byte[] byteArray0 = Utility.decode("The suffix must not be null", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      String[] stringArray0 = Constants.ITEM_NAMES;
      assertEquals(9, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test451()  throws Throwable  {
      try { 
        Utility.typeOfSignature("<qv>rhd*G:O9i#%K}:V");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: <qv>rhd*G:O9i#%K}:V
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test452()  throws Throwable  {
      Utility.methodSignatureReturnType("V");
      Utility.compactClassName("V");
      // Undeclared exception!
      try { 
        Utility.signatureToString("void");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `void'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test453()  throws Throwable  {
      byte byte0 = (byte) (-77);
      byte byte1 = (byte) (-57);
      byte byte2 = (byte)81;
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)82;
      byteArray0[1] = (byte) (-57);
      byteArray0[2] = (byte) (-77);
      byteArray0[3] = (byte) (-82);
      byteArray0[4] = (byte)82;
      byteArray0[5] = (byte)81;
      byteArray0[6] = (byte)82;
      byteArray0[7] = (byte)81;
      byteArray0[8] = (byte)82;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantUtf8.getCachedInstance("+4I+E");
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteSequence0, constantPool0, false);
      String string0 = "tableswitch";
      boolean boolean0 = true;
      int int0 = 43;
      LocalVariable[] localVariableArray0 = new LocalVariable[2];
      LocalVariable localVariable0 = null;
      try {
        localVariable0 = new LocalVariable(byteSequence0, constantPool0);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test454()  throws Throwable  {
      String string0 = Utility.compactClassName("");
      assertEquals("", string0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-93);
      byteArray0[1] = (byte)120;
      byteArray0[2] = (byte) (-98);
      byteArray0[3] = (byte) (-77);
      byteArray0[4] = (byte) (-57);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("if_icmpgt\t\t#30878", string1);
  }

  @Test(timeout = 4000)
  public void test455()  throws Throwable  {
      String string0 = Utility.methodSignatureReturnType("LJavaClass/P2debug;V");
      assertEquals("JavaClass.P2debug", string0);
      
      byte[] byteArray0 = new byte[0];
      String string1 = Utility.toHexString(byteArray0);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test456()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.codeToString((ByteSequence) null, (ConstantPool) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test457()  throws Throwable  {
      String string0 = Utility.methodSignatureReturnType("CB{[1]AYvK2");
      assertEquals("char", string0);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "CB{[1]AYvK2";
      String string1 = Utility.methodTypeToSignature("CB{[1]AYvK2", stringArray0);
      assertEquals("([LCB{;)[LCB{;", string1);
      
      String string2 = Utility.methodSignatureToString("([LCB{;)[LCB{;", "char", "([LCB{;)[LCB{;");
      assertEquals("([LCB{;)[LCB{; CB{[] char(CB{[] arg1)", string2);
      
      String string3 = Utility.convertString("\\");
      assertEquals("\\\\", string3);
  }

  @Test(timeout = 4000)
  public void test458()  throws Throwable  {
      Utility.isSet(140, 0);
      String string0 = Utility.getSignature("");
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) "L;";
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) "L;";
      objectArray0[3] = (Object) "";
      objectArray0[4] = (Object) "";
      objectArray0[5] = (Object) "L;";
      objectArray0[6] = (Object) "";
      String string1 = Utility.printArray(objectArray0, false);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test459()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)31;
      byteArray0[1] = (byte)45;
      byteArray0[2] = (byte) (-56);
      byteArray0[3] = (byte) (-81);
      byteArray0[4] = (byte)122;
      byteArray0[5] = (byte) (-69);
      byteArray0[6] = (byte) (-43);
      byteArray0[7] = (byte)103;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("lload_1", string0);
  }

  @Test(timeout = 4000)
  public void test460()  throws Throwable  {
      String string0 = Utility.compactClassName("LJavClass/P2debug;V", false);
      assertEquals("LJavClass.P2debug;V", string0);
      
      byte[] byteArray0 = Utility.decode("LJavClass.P2debug;V", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string1 = Utility.codeToString(byteSequence1, constantPool0);
      assertEquals("astore_1", string1);
  }

  @Test(timeout = 4000)
  public void test461()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)108;
      byteArray0[1] = (byte) (-96);
      byteArray0[2] = (byte)14;
      byteArray0[3] = (byte)11;
      byteArray0[4] = (byte) (-21);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("idiv", string0);
  }

  @Test(timeout = 4000)
  public void test462()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)91;
      byteArray0[0] = (byte)22;
      byteArray0[4] = (byte)82;
      byteArray0[3] = (byte) (-60);
      byteArray0[4] = (byte)81;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantUtf8.getCachedInstance("athrow");
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("lload\t\t%0", string0);
  }

  @Test(timeout = 4000)
  public void test463()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)14;
      try { 
        Utility.typeOfSignature("XD0>M6%:JNZ2");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: XD0>M6%:JNZ2
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test464()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)30;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.markSupported();
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("lload_0", string0);
  }

  @Test(timeout = 4000)
  public void test465()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        Utility.decode("$Zy]v4urM5$fY|sIH13", false);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"fY\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test466()  throws Throwable  {
      try { 
        Utility.methodSignatureArgumentTypes("(B$?'Q");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `$?'Q'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test467()  throws Throwable  {
      try { 
        Utility.typeOfSignature("/})kLdb>gK53.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: /})kLdb>gK53.
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test468()  throws Throwable  {
      String string0 = Utility.compactClassName("LJavClass/P2debug;V", false);
      assertEquals("LJavClass.P2debug;V", string0);
      
      byte[] byteArray0 = Utility.decode("LJavClass.P2debug;V", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byte byte0 = byteSequence0.readByte();
      assertEquals((byte)76, byte0);
      
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      String string1 = Utility.signatureToString("LJavClass.P2debug;V");
      assertEquals("JavClass.P2debug", string1);
  }

  @Test(timeout = 4000)
  public void test469()  throws Throwable  {
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("gz@API\"", "gz@API\"", "_DF.PXcRVXS[i!>", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: gz@API\"
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test470()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("igAi~5|$*", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readByte();
      FileSystemHandling.shouldAllThrowIOExceptions();
      byteSequence0.readByte();
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertArrayEquals(new byte[] {(byte)105, (byte)103, (byte)65, (byte)105, (byte)126, (byte)53, (byte)124, (byte)127, (byte)0}, byteArray0);
      assertEquals("lstore_2", string0);
  }

  @Test(timeout = 4000)
  public void test471()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("Warning: Padding byte != 0 in ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Warning: Padding byte != 0 in '
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test472()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-17);
      byteArray0[1] = (byte)112;
      byteArray0[2] = (byte) (-127);
      byteArray0[3] = (byte) (-14);
      byteArray0[4] = (byte)121;
      byteArray0[5] = (byte)97;
      byteArray0[6] = (byte)24;
      byteArray0[7] = (byte)13;
      byteArray0[8] = (byte)2;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      // Undeclared exception!
      try { 
        Utility.signatureToString("R{''}PYB)Tl4M)heFV", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `R{''}PYB)Tl4M)heFV'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test473()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.methodSignatureArgumentTypes((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test474()  throws Throwable  {
      Utility.format((-3543), 0, true, '#');
      Utility.replace("!=sm+%^,", "-3543", "");
      Utility.accessToString(187, false);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "";
      Utility.printArray(objectArray0);
      Utility.classOrInterface(65);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)100;
      byteArray0[1] = (byte)30;
      byteArray0[2] = (byte)30;
      byteArray0[4] = (byte)18;
      byteArray0[5] = (byte) (-62);
      byteArray0[6] = (byte) (-115);
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte)18;
      Utility.clearBit(411, 1902);
      ByteSequence byteSequence0 = null;
      Constant[] constantArray0 = new Constant[1];
      ConstantFloat constantFloat0 = null;
      try {
        constantFloat0 = new ConstantFloat((DataInput) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantFloat", e);
      }
  }

  @Test(timeout = 4000)
  public void test475()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "double");
      Utility.compactClassName("double", "double", true);
      Utility.convertString("double");
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)102;
      byteArray0[1] = (byte)78;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      byteArray0[2] = (byte) (-107);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      MockPrintStream mockPrintStream0 = new MockPrintStream("double");
      Utility.isJavaIdentifierPart('~');
      try { 
        Utility.typeOfSignature("9_{98wdG");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 9_{98wdG
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test476()  throws Throwable  {
      Utility.typeOfSignature("T\"j-uwW+a5YV;FIJde");
      Utility.compactClassName("N:q'.kYfWh");
      Utility.signatureToString("CR<gHk~?I7I+E(");
      // Undeclared exception!
      try { 
        Utility.searchOpcode((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test477()  throws Throwable  {
      String string0 = Utility.compactClassName("JAavaClass", "JAavaClass", true);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)106;
      byteArray0[1] = (byte)114;
      byteArray0[2] = (byte) (-96);
      byteArray0[3] = (byte) (-87);
      byteArray0[4] = (byte)13;
      byteArray0[5] = (byte) (-114);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test478()  throws Throwable  {
      String string0 = Utility.compactClassName("");
      String string1 = Utility.fillup("", (-1071), false, 'z');
      assertTrue(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test479()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      String string0 = Utility.encode(byteArray0, false);
      assertEquals("$A", string0);
      
      boolean boolean0 = Utility.isJavaIdentifierPart('-');
      assertFalse(boolean0);
      
      String string1 = Utility.format(5, (-2019), false, '-');
      assertEquals("5", string1);
  }

  @Test(timeout = 4000)
  public void test480()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-108);
      byteArray0[1] = (byte) (-90);
      byteArray0[2] = (byte) (-65);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantUtf8.getCachedInstance("aconst_null");
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      Utility.codeToString(byteArray0, constantPool1, (int) (byte) (-65), 3, true);
  }

  @Test(timeout = 4000)
  public void test481()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray0 = Utility.decode("$Zy]v4urM5$Y|sIH13", false);
      FileSystemHandling.shouldAllThrowIOExceptions();
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.read();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 25, 25, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test482()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)67;
      byteArray0[1] = (byte)90;
      byteArray0[2] = (byte) (-94);
      byteArray0[3] = (byte) (-84);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("fstore_0", string0);
  }

  @Test(timeout = 4000)
  public void test483()  throws Throwable  {
      Utility.methodSignatureReturnType("CB{[1]AYvK2");
      Utility.format(47, (-646), true, 'h');
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)25;
      byteArray0[1] = (byte)25;
      byteArray0[2] = (byte)25;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantInteger constantInteger0 = new ConstantInteger(160);
      Constant[] constantArray0 = new Constant[2];
      constantArray0[0] = (Constant) constantInteger0;
      byteSequence0.available();
      constantArray0[1] = (Constant) constantInteger0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      Utility.codeToString(byteSequence0, constantPool1, true);
      try { 
        Utility.codeToString(byteSequence0, constantPool0, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test484()  throws Throwable  {
      Utility.classOrInterface(0);
      // Undeclared exception!
      try { 
        Utility.codeToString((byte[]) null, (ConstantPool) null, 195, 0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test485()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      Utility.encode(byteArray0, false);
      Utility.toHexString(byteArray0);
      try { 
        Utility.methodSignatureArgumentTypes("00", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 00
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test486()  throws Throwable  {
      String string0 = Utility.replace(":'J9EY", ":'J9EY", "6e 38 30");
      assertEquals("6e 38 30", string0);
      
      boolean boolean0 = Utility.isJavaIdentifierPart('\\');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test487()  throws Throwable  {
      Utility.methodSignatureReturnType("B{[1]AYv2");
      String[] stringArray0 = new String[1];
      stringArray0[0] = "B{[1]AYv2";
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)119;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-56);
      byteArray0[3] = (byte)34;
      byteArray0[4] = (byte) (-122);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readUnsignedShort();
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test488()  throws Throwable  {
      ConstantPool constantPool0 = null;
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte) (-77);
      byteArray0[2] = (byte) (-52);
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte) (-77);
      byteArray1[1] = (byte) (-52);
      byteArray1[2] = (byte) (-52);
      byteArray1[3] = (byte) (-52);
      byteArray1[4] = (byte) (-77);
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test489()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)90;
      byteArray0[1] = (byte) (-57);
      byteArray0[2] = (byte) (-24);
      byteArray0[3] = (byte)11;
      byteArray0[4] = (byte)124;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      boolean boolean0 = false;
      Utility.format(50, 81, false, 'Z');
      // Undeclared exception!
      try { 
        Utility.methodSignatureArgumentTypes((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test490()  throws Throwable  {
      Utility.compactClassName("&@H4\"EPv]", "&@H4\"EPv]", false);
      Object[] objectArray0 = new Object[0];
      Utility.printArray(objectArray0, false, false);
      byte[] byteArray0 = null;
      Constant[] constantArray0 = new Constant[2];
      int int0 = 24;
      ByteSequence byteSequence0 = null;
      try {
        byteSequence0 = new ByteSequence((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test491()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Utility.replace("<[BH", "<[BH", "<[BH");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-93);
      byteArray0[1] = (byte) (-62);
      byteArray0[2] = (byte)61;
      byteArray0[3] = (byte) (-103);
      byteArray0[4] = (byte)47;
      byteArray0[5] = (byte)3;
      byteArray0[6] = (byte) (-29);
      byteArray0[7] = (byte) (-16);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readByte();
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("monitorenter", "monitorenter", (String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test492()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-24);
      byteArray0[1] = (byte) (-112);
      byteArray0[2] = (byte)67;
      byteArray0[3] = (byte)17;
      String string0 = Utility.toHexString(byteArray0);
      assertEquals("e8 90 43 11", string0);
  }

  @Test(timeout = 4000)
  public void test493()  throws Throwable  {
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      Utility.getSignature("<illegal opcode>");
      // Undeclared exception!
      try { 
        Utility.signatureToString("L<illegal;", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: L<illegal;
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test494()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-105);
      byteArray0[1] = (byte) (-105);
      byteArray0[2] = (byte) (-105);
      byteArray0[3] = (byte) (-105);
      byteArray0[4] = (byte) (-105);
      byteArray0[5] = (byte) (-105);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("dcmpl", string0);
  }

  @Test(timeout = 4000)
  public void test495()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("YG3.^<i");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `YG3.^<i'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test496()  throws Throwable  {
      String string0 = "{Jgp-NrrD\"xS%'g";
      Utility.convertString("{Jgp-NrrD\"xS%'g");
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-79);
      byteArray0[1] = (byte) (-79);
      byteArray0[2] = (byte) (-79);
      byteArray0[3] = (byte) (-79);
      byteArray0[2] = (byte)9;
      byteArray0[5] = (byte)9;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool(byteSequence0);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test497()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "(B$?'Q";
      stringArray0[1] = "(B$?'Q";
      stringArray0[2] = "(B$?'Q";
      stringArray0[3] = "(B$?'Q";
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)103;
      byteArray0[1] = (byte)97;
      byteArray0[2] = (byte)18;
      byteArray0[3] = (byte)45;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence1, (ConstantPool) null, false);
      try { 
        Utility.methodSignatureArgumentTypes("int", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: int
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test498()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      try { 
        Utility.typeOfSignature("YG3.^<i");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: YG3.^<i
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test499()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Utility.compactClassName("monitorexit", false);
      Utility.decode("`I%=[", false);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)64;
      byteArray0[1] = (byte)27;
      byteArray0[2] = (byte) (-99);
      byteArray0[3] = (byte)77;
      byteArray0[4] = (byte) (-97);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      try { 
        Utility.methodSignatureArgumentTypes("dstore_1", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: dstore_1
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test500()  throws Throwable  {
      String[] stringArray0 = new String[0];
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature((String) null, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test501()  throws Throwable  {
      Utility.setBit(56, (-1151));
      Object[] objectArray0 = new Object[0];
      Utility.printArray(objectArray0, true, true);
      try { 
        Utility.typeOfSignature("`u$lg}/.3F");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: `u$lg}/.3F
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test502()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)78;
      byteArray0[2] = (byte)125;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string0 = Utility.codeToString(byteSequence1, constantPool0, true);
      assertEquals("astore_3", string0);
  }

  @Test(timeout = 4000)
  public void test503()  throws Throwable  {
      byte byte0 = (byte) (-93);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-93);
      Utility.encode(byteArray0, false);
      try { 
        Utility.decode("$a3", true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test504()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("\\");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `\\'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test505()  throws Throwable  {
      String string0 = Utility.classOrInterface(1177);
      assertEquals("class", string0);
      
      String string1 = Utility.compactClassName("", "class", true);
      assertEquals("", string1);
  }

  @Test(timeout = 4000)
  public void test506()  throws Throwable  {
      Utility.signatureToString("CB{[1]AYvK2", false);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)73;
      byteArray0[1] = (byte) (-78);
      byteArray0[2] = (byte) (-45);
      byteArray0[3] = (byte) (-43);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("dstore_2", string0);
  }

  @Test(timeout = 4000)
  public void test507()  throws Throwable  {
      try { 
        Utility.typeOfSignature("WHmz\"P<UweO%sz)VP");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: WHmz\"P<UweO%sz)VP
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test508()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)55;
      byteArray0[1] = (byte)39;
      byteArray0[2] = (byte)67;
      byteArray0[3] = (byte)39;
      byteArray0[4] = (byte)43;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Utility.replace("<[BH", "<[BH", "<[BH");
      Utility.signatureToString("C$N-", false);
      try { 
        Utility.decode("$Zy]v4urM5$Y|sIH13", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test509()  throws Throwable  {
      ConstantFloat constantFloat0 = new ConstantFloat((byte)61);
      ConstantMethodref constantMethodref0 = new ConstantMethodref((byte)87, 5339);
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getInstance(";DGJ`h4wf$xlYN)?");
      Constant[] constantArray0 = new Constant[5];
      constantArray0[0] = (Constant) constantMethodref0;
      constantArray0[1] = (Constant) constantFloat0;
      constantArray0[2] = (Constant) constantUtf8_0;
      constantArray0[3] = (Constant) constantMethodref0;
      constantArray0[4] = (Constant) constantFloat0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)87;
      byteArray0[1] = (byte)71;
      byteArray0[2] = (byte) (-28);
      byteArray0[3] = (byte)88;
      byteArray0[4] = (byte) (-127);
      byteArray0[5] = (byte)11;
      byteArray0[6] = (byte)87;
      byteArray0[7] = (byte)71;
      byteArray0[8] = (byte) (-81);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, 255, 255, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test510()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)7;
      byteArray0[1] = (byte)62;
      byteArray0[2] = (byte)16;
      byteArray0[3] = (byte)96;
      byteArray0[4] = (byte)66;
      byteArray0[5] = (byte)44;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 93, (int) (byte)62, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test511()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)75;
      byteArray0[1] = (byte) (-84);
      byteArray0[2] = (byte)103;
      byteArray0[3] = (byte)118;
      byteArray0[4] = (byte) (-72);
      byteArray0[5] = (byte) (-80);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("astore_0", string0);
  }

  @Test(timeout = 4000)
  public void test512()  throws Throwable  {
      try { 
        Utility.typeOfSignature("Apz0(O");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Apz0(O
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test513()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-108);
      byteArray0[0] = (byte) (-94);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantUtf8.getInstance("aconst_null");
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteSequence0, constantPool0, false);
      Utility.getSignature("aconst_null");
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream("Laconst_null;", "if_icmpge\t\t#0");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // if_icmpge\t\t#0
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test514()  throws Throwable  {
      Utility.convertString("ifne");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-115);
      byteArray0[2] = (byte)54;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-103);
      byteArray0[6] = (byte) (-103);
      Utility.toHexString(byteArray0);
      Utility.searchOpcode("2\"B_{`7M*g");
      Utility.searchOpcode("ifne");
      try { 
        Utility.methodSignatureReturnType("iLDb5`mAn5");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `iLDb5`mAn5'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test515()  throws Throwable  {
      String string0 = "ifne";
      Utility.convertString("ifne");
      boolean boolean0 = false;
      Utility.fillup("ifne", 4, false, 'L');
      Utility.format(47, 59, true, 'g');
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-103);
      byteArray0[1] = (byte)54;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      try { 
        Utility.codeToString(byteSequence0, constantPool0, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test516()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-110);
      byteArray0[1] = (byte) (-90);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence2, (ConstantPool) null, true);
      assertEquals("i2c", string0);
  }

  @Test(timeout = 4000)
  public void test517()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-57);
      byteArray0[1] = (byte) (-68);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-77), 192, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test518()  throws Throwable  {
      Object object0 = new Object();
      LocalVariableTable localVariableTable0 = new LocalVariableTable(847, 1838, (LocalVariable[]) null, (ConstantPool) null);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("F/T.5dPl/?73DZoLz", "F/T.5dPl/?73DZoLz", (String) null, true, localVariableTable0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test519()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "t9H");
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)45;
      byteArray0[1] = (byte) (-97);
      byteArray0[2] = (byte) (-52);
      byteArray0[3] = (byte)65;
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-52), (int) (byte) (-97));
      assertEquals("0:    aload_3\n1:    if_icmpeq\t\t#-13246\n", string0);
      
      String string1 = Utility.encode(byteArray0, false);
      assertEquals("$z$9f$ccA", string1);
      
      String string2 = Utility.classOrInterface(2498);
      assertEquals("class", string2);
  }

  @Test(timeout = 4000)
  public void test520()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-67);
      byteArray0[1] = (byte) (-60);
      byteArray0[1] = (byte) (-5);
      byte byte0 = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)32;
      byteArray0[5] = (byte)80;
      byteArray0[6] = (byte) (-80);
      byteArray0[7] = (byte)93;
      Utility.equals(byteArray0, byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)75, (int) (byte)80, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test521()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)110;
      byteArray0[1] = (byte)70;
      byteArray0[2] = (byte) (-128);
      byteArray0[3] = (byte)5;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("fdiv", string0);
  }

  @Test(timeout = 4000)
  public void test522()  throws Throwable  {
      String string0 = Utility.compactClassName("JAavaClass", "JAavaClass", true);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)106;
      byteArray0[1] = (byte)114;
      byteArray0[2] = (byte) (-96);
      byteArray0[3] = (byte) (-87);
      byteArray0[4] = (byte)13;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test523()  throws Throwable  {
      Utility.signatureToString("ZyrZEWG_'Lq7WM^", true);
      boolean boolean0 = true;
      try { 
        Utility.decode("ZyrZEWG_'Lq7WM^", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test524()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("\\", "\\", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test525()  throws Throwable  {
      int int0 = (-1388);
      Utility.clearBit((-1388), 2112);
      Utility.isSet(906, 3778);
      Object[] objectArray0 = new Object[5];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      Utility.printArray(objectArray0);
      Utility.getSignature("");
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.compactClassName((String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test526()  throws Throwable  {
      String string0 = "B{IQ`lN={\\!";
      byte[] byteArray0 = Utility.decode("B{IQ`lN={!", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 156, 172, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test527()  throws Throwable  {
      Utility.methodSignatureReturnType("V");
      Utility.replace("V", "Unrecognized attribute type tag parsed: ", "R{8-4~4SA$e2|~@");
      Utility.signatureToString("V", false);
      Utility.compactClassName("?*+J$A|ND/V#`QaBv$5", "V", false);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "t0e";
      stringArray0[1] = "void";
      stringArray0[2] = "V";
      stringArray0[3] = "V";
      try { 
        Utility.methodTypeToSignature("boolean", stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid type: void
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test528()  throws Throwable  {
      try { 
        Utility.methodSignatureArgumentTypes("d2l");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: d2l
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test529()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[1] = (byte)17;
      byte[] byteArray1 = Utility.decode("LUnreachable;V", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, (ConstantPool) null, (int) (byte)17, 199, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test530()  throws Throwable  {
      Utility.signatureToString("JI]avaClass", false);
      try { 
        Utility.methodSignatureReturnType("java.lang..>");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `java.lang..>'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test531()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.methodSignatureReturnType((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test532()  throws Throwable  {
      try { 
        Utility.typeOfSignature("6Yf3`YqMPu!iK");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 6Yf3`YqMPu!iK
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test533()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)14;
      byteArray0[1] = (byte)99;
      byteArray0[2] = (byte) (-123);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantString constantString0 = new ConstantString(byteSequence0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("i2l", string0);
  }

  @Test(timeout = 4000)
  public void test534()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)87;
      byteArray0[1] = (byte)87;
      byteArray0[2] = (byte)98;
      byteArray0[3] = (byte)121;
      byteArray0[4] = (byte) (-28);
      byteArray0[5] = (byte)11;
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (-2021637899), (int) (byte)11, false);
      assertEquals("0:    pop\n1:    pop\n2:    fadd\n3:    lshl\n4:    <illegal opcode>\n5:    fconst_0\n6:    nop\n7:    nop\n", string0);
      
      String string1 = Utility.getSignature("0:    pop\n1:    pop\n2:    fadd\n3:    lshl\n4:    <illegal opcode>\n5:    fconst_0\n6:    nop\n7:    nop\n");
      assertEquals("L0:;", string1);
  }

  @Test(timeout = 4000)
  public void test535()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)20;
      byteArray0[1] = (byte)29;
      byteArray0[2] = (byte)29;
      byteArray0[3] = (byte) (-115);
      byteArray0[4] = (byte) (-60);
      byteArray0[5] = (byte)13;
      byteArray0[6] = (byte)7;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test536()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-70);
      Constant[] constantArray0 = new Constant[1];
      ConstantFieldref constantFieldref0 = new ConstantFieldref((byte) (-70), (byte)96);
      ConstantFieldref constantFieldref1 = new ConstantFieldref(constantFieldref0);
      constantArray0[0] = (Constant) constantFieldref1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      try { 
        Utility.codeToString(byteSequence0, constantPool0, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test537()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)97;
      byteArray0[1] = (byte) (-42);
      byteArray0[2] = (byte)48;
      byteArray0[3] = (byte)93;
      byteArray0[4] = (byte)91;
      byteArray0[6] = (byte) (-74);
      byteArray0[7] = (byte)97;
      Utility.encode(byteArray0, false);
      String string0 = Utility.encode(byteArray0, false);
      assertEquals("a$d60$5d$5b$A$b6a", string0);
      
      int int0 = Utility.clearBit(742, (-2898));
      assertEquals(742, int0);
  }

  @Test(timeout = 4000)
  public void test538()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-114);
      byteArray0[1] = (byte) (-96);
      byteArray0[2] = (byte)17;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("d2i", "d2i", "d2i", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: d2i
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test539()  throws Throwable  {
      Utility.getSignature("\t\t");
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("checkcast", "checkcast", "monitorexit");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: checkcast
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test540()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)125;
      byteArray0[2] = (byte)34;
      byteArray0[3] = (byte) (-80);
      byte byte0 = (byte)65;
      byteArray0[4] = (byte)65;
      byteArray0[5] = (byte)29;
      byte byte1 = (byte) (-74);
      byteArray0[6] = (byte) (-74);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 1801, (-3579));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test541()  throws Throwable  {
      String string0 = Utility.accessToString((-36822361), true);
      assertEquals("public private protected transient annotation", string0);
      
      String string1 = Utility.methodTypeToSignature("public private protected transient annotation", (String[]) null);
      assertEquals("()Lpublic;", string1);
  }

  @Test(timeout = 4000)
  public void test542()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-101);
      byteArray0[1] = (byte) (-95);
      byteArray0[2] = (byte) (-95);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence1, constantPool0, true);
      assertEquals("iflt\t\t#-24159", string0);
  }

  @Test(timeout = 4000)
  public void test543()  throws Throwable  {
      byte[] byteArray0 = Utility.decode(",$", false);
      Utility.fillup(",$", 132, false, 'I');
      String string0 = Utility.format(132, (byte) (-74), true, 'I');
      assertEquals("132", string0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      Utility.codeToString(byteSequence0, constantPool1, true);
      String string1 = Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-74), 132, true);
      assertEquals("0:    aload_2\n", string1);
  }

  @Test(timeout = 4000)
  public void test544()  throws Throwable  {
      String string0 = Utility.compactClassName("LJavClass/P2debug;V", false);
      assertEquals("LJavClass.P2debug;V", string0);
      
      byte[] byteArray0 = Utility.decode("LJavClass.P2debug;V", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(19, byteArray0.length);
      
      byteSequence0.readDouble();
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("drem", string1);
      
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test545()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)66;
      byteArray0[2] = (byte) (-22);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Object[] objectArray0 = new Object[0];
      Utility.printArray(objectArray0, false);
      Utility.printArray(objectArray0, false);
      Utility.convertString("");
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      stringArray0[1] = "";
      Utility.methodTypeToSignature("", stringArray0);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("", "lookupswitch", "");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test546()  throws Throwable  {
      String string0 = Utility.compactClassName("JAavaClass", "JAavaClass", true);
      assertEquals("", string0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)106;
      byteArray0[1] = (byte)114;
      byteArray0[2] = (byte) (-96);
      byteArray0[3] = (byte) (-87);
      byteArray0[4] = (byte)13;
      byteArray0[5] = (byte) (-114);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readByte();
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("frem", string1);
  }

  @Test(timeout = 4000)
  public void test547()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte) (-76);
      byteArray0[2] = (byte)22;
      byteArray0[3] = (byte) (-76);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantString constantString0 = new ConstantString(byteSequence0);
      ConstantString constantString1 = new ConstantString(constantString0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("lload\t\t%180", string0);
  }

  @Test(timeout = 4000)
  public void test548()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-60);
      byteArray0[1] = (byte) (-94);
      byteArray0[2] = (byte) (-57);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string0 = Utility.codeToString(byteSequence1, constantPool0, true);
      assertEquals("wide\t(wide)", string0);
  }

  @Test(timeout = 4000)
  public void test549()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("O,<p[#8K78'i");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `O,<p[#8K78'i'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test550()  throws Throwable  {
      Utility.methodSignatureReturnType("SAME");
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)72;
      byteArray0[1] = (byte)97;
      byteArray0[2] = (byte)14;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("short", "SAME", "SAME");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: short
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }
}
