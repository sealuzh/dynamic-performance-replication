/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 23 16:35:36 GMT 2019
 */

package us.codecraft.webmagic.utils;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.HashMap;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import us.codecraft.webmagic.utils.DoubleKeyMap;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DoubleKeyMap_ESTest extends DoubleKeyMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      HashMap<HashMap<Object, Integer>, Map<Integer, Integer>> hashMap0 = new HashMap<HashMap<Object, Integer>, Map<Integer, Integer>>();
      Class<Map> class0 = Map.class;
      DoubleKeyMap<HashMap<Object, Integer>, Integer, Integer> doubleKeyMap0 = new DoubleKeyMap<HashMap<Object, Integer>, Integer, Integer>(hashMap0, class0);
      HashMap<Object, Integer> hashMap1 = new HashMap<Object, Integer>();
      Integer integer0 = doubleKeyMap0.remove(hashMap1, (Integer) null);
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      HashMap<Map<Object, Object>, Map<Map<Object, Object>, String>> hashMap0 = new HashMap<Map<Object, Object>, Map<Map<Object, Object>, String>>();
      DoubleKeyMap<Map<Object, Object>, Map<Object, Object>, String> doubleKeyMap0 = new DoubleKeyMap<Map<Object, Object>, Map<Object, Object>, String>(hashMap0);
      Map<Map<Object, Object>, String> map0 = doubleKeyMap0.remove((Map<Object, Object>) null);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DoubleKeyMap<Object, String, Integer> doubleKeyMap0 = new DoubleKeyMap<Object, String, Integer>();
      Integer integer0 = doubleKeyMap0.put((Object) null, "", (Integer) null);
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DoubleKeyMap<Object, String, String> doubleKeyMap0 = new DoubleKeyMap<Object, String, String>();
      Map<String, Map<Object, String>> map0 = doubleKeyMap0.newMap();
      Class<HashMap> class0 = HashMap.class;
      DoubleKeyMap<String, Object, String> doubleKeyMap1 = new DoubleKeyMap<String, Object, String>(map0, class0);
      String string0 = doubleKeyMap1.get("", (Object) doubleKeyMap0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      HashMap<String, Map<Object, Object>> hashMap0 = new HashMap<String, Map<Object, Object>>();
      Class<Map> class0 = Map.class;
      HashMap<Object, Map<String, Integer>> hashMap1 = new HashMap<Object, Map<String, Integer>>();
      DoubleKeyMap<Object, String, Integer> doubleKeyMap0 = new DoubleKeyMap<Object, String, Integer>(hashMap1, class0);
      Integer integer0 = new Integer(0);
      // Undeclared exception!
      try { 
        doubleKeyMap0.put((Object) hashMap0, "us.codecraft.webmagic.utils.DoubleKeyMap", integer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Class<Map> class0 = Map.class;
      DoubleKeyMap<String, String, String> doubleKeyMap0 = null;
      try {
        doubleKeyMap0 = new DoubleKeyMap<String, String, String>(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Class<HashMap> class0 = HashMap.class;
      DoubleKeyMap<HashMap<Object, Integer>, String, String> doubleKeyMap0 = new DoubleKeyMap<HashMap<Object, Integer>, String, String>(class0);
      Map<HashMap<Object, Integer>, Map<Object, Object>> map0 = doubleKeyMap0.newMap();
      DoubleKeyMap<HashMap<Object, Integer>, Object, Object> doubleKeyMap1 = new DoubleKeyMap<HashMap<Object, Integer>, Object, Object>(map0);
      Map<Integer, Map<String, Object>> map1 = doubleKeyMap1.newMap();
      DoubleKeyMap<Integer, String, Object> doubleKeyMap2 = new DoubleKeyMap<Integer, String, Object>(map1, class0);
      Object object0 = doubleKeyMap2.remove((Integer) null, "jOT4]3?z");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Integer integer0 = new Integer(796);
      DoubleKeyMap<String, String, Integer> doubleKeyMap0 = new DoubleKeyMap<String, String, Integer>();
      doubleKeyMap0.put("", "y2$#k)ZVlzZ:iwd.", integer0);
      Integer integer1 = doubleKeyMap0.get("", "");
      assertNull(integer1);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Class<HashMap> class0 = HashMap.class;
      DoubleKeyMap<HashMap<String, Integer>, Object, String> doubleKeyMap0 = new DoubleKeyMap<HashMap<String, Integer>, Object, String>(class0);
      DoubleKeyMap<Object, Integer, Integer> doubleKeyMap1 = new DoubleKeyMap<Object, Integer, Integer>();
      Integer integer0 = new Integer(987);
      Integer integer1 = doubleKeyMap1.put((Object) doubleKeyMap0, (Integer) null, integer0);
      assertNull(integer1);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DoubleKeyMap<Object, Object, Object> doubleKeyMap0 = new DoubleKeyMap<Object, Object, Object>();
      Map<String, Map<Integer, String>> map0 = doubleKeyMap0.newMap();
      DoubleKeyMap<String, Integer, String> doubleKeyMap1 = new DoubleKeyMap<String, Integer, String>(map0);
      Integer integer0 = new Integer(1398);
      doubleKeyMap1.put("Z|_;M/%z", integer0, "-<#");
      String string0 = doubleKeyMap1.remove("Z|_;M/%z", integer0);
      assertEquals(0, map0.size());
      assertEquals("-<#", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      HashMap<Integer, Map<Integer, Object>> hashMap0 = new HashMap<Integer, Map<Integer, Object>>();
      DoubleKeyMap<Integer, Integer, Object> doubleKeyMap0 = new DoubleKeyMap<Integer, Integer, Object>(hashMap0);
      Map<Integer, Object> map0 = doubleKeyMap0.get((Integer) null);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DoubleKeyMap<Object, Integer, Integer> doubleKeyMap0 = new DoubleKeyMap<Object, Integer, Integer>();
      Integer integer0 = new Integer((-1509));
      doubleKeyMap0.put((Object) "", integer0, integer0);
      Integer integer1 = doubleKeyMap0.put((Object) "", integer0, integer0);
      assertEquals((-1509), (int)integer1);
  }
}
