/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 02:45:30 GMT 2018
 */

package org.apache.bcel.classfile;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.DataInput;
import java.io.DataInputStream;
import java.io.EOFException;
import java.io.InputStream;
import java.io.ObjectInputStream;
import java.io.ObjectStreamConstants;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PipedWriter;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.util.regex.Pattern;
import java.util.zip.ZipException;
import org.apache.bcel.Constants;
import org.apache.bcel.classfile.Constant;
import org.apache.bcel.classfile.ConstantDouble;
import org.apache.bcel.classfile.ConstantFieldref;
import org.apache.bcel.classfile.ConstantFloat;
import org.apache.bcel.classfile.ConstantInterfaceMethodref;
import org.apache.bcel.classfile.ConstantLong;
import org.apache.bcel.classfile.ConstantMethodType;
import org.apache.bcel.classfile.ConstantNameAndType;
import org.apache.bcel.classfile.ConstantPool;
import org.apache.bcel.classfile.ConstantString;
import org.apache.bcel.classfile.ConstantUtf8;
import org.apache.bcel.classfile.ElementValue;
import org.apache.bcel.classfile.LocalVariableTable;
import org.apache.bcel.classfile.Method;
import org.apache.bcel.classfile.Utility;
import org.apache.bcel.util.ByteSequence;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.io.MockRandomAccessFile;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Utility_ESTest extends Utility_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Utility.compactClassName("E3Pxv1NWolV{R5");
      try { 
        Utility.methodSignatureArgumentTypes("'(:<0y+wZSz,6hl", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: '(:<0y+wZSz,6hl
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      // Undeclared exception!
      try { 
        Utility.signatureToString("UqP8'+r3(1\"pQy\"_e");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `UqP8'+r3(1\"pQy\"_e'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = "T{Ld|a0Yn";
      // Undeclared exception!
      try { 
        Utility.signatureToString("T{Ld|a0Yn");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: T{Ld|a0Yn
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      String string0 = Constants.ILLEGAL_OPCODE;
      Utility.searchOpcode("<illegal opcode>");
      byte byte0 = ObjectStreamConstants.TC_LONGSTRING;
      assertEquals((byte)124, byte0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      boolean boolean0 = Utility.isSet((-3780), (-5670));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-47);
      byteArray0[1] = (byte)5;
      Utility.toHexString(byteArray0);
      Utility.compactClassName("", true);
      try { 
        Utility.methodSignatureReturnType("d1 05");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `d1 05'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "\"F");
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("\"F", "\"F", ">");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: \"F
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Utility.replace("E3PxJv1NWvolV{*5", "E3PxJv1NWvolV{*5", "E3PxJv1NWvolV{*5");
      try { 
        Utility.methodSignatureArgumentTypes("'(:<0y+wZSz,6hl", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: '(:<0y+wZSz,6hl
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Utility.convertString("E3PxJ1NWvoV{R5");
      try { 
        Utility.methodSignatureArgumentTypes("'(:<0y+wZSz,6hl", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: '(:<0y+wZSz,6hl
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Utility.isJavaIdentifierPart('9');
      try { 
        Utility.decode("float", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Utility.getSignature("UEGi+%z'>+}]~g7S.xF(nT[,]");
      Object[] objectArray0 = new Object[3];
      Utility.printArray(objectArray0, true, true);
      try { 
        Utility.typeOfMethodSignature("[LUEGi+%z'>+}]~g7S/xF(nT;");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: [LUEGi+%z'>+}]~g7S/xF(nT;
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Utility.clearBit((-2028), (-2028));
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      objectArray0[0] = object0;
      String string0 = Utility.printArray(objectArray0, false, false);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Utility.isJavaIdentifierPart('X');
      try { 
        Utility.methodSignatureReturnType("fcmpl");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `fcmpl'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Utility.isJavaIdentifierPart('|');
      Utility.methodTypeToSignature("by@te", (String[]) null);
      byte byte0 = Constants.CONSTANT_Class;
      try { 
        Utility.typeOfSignature("()Lby@te;");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ()Lby@te;
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Utility.isJavaIdentifierPart(' ');
      try { 
        Utility.typeOfSignature(";");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ;
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Utility.isJavaIdentifierPart('>');
      try { 
        Utility.methodSignatureReturnType("PGFZ`j#-qtr/;XGD:v", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `PGFZ`j#-qtr/;XGD:v'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      String string0 = "nvoednamic";
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.encode((byte[]) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      Utility.encode(byteArray0, false);
      String string0 = "INSENSITIVE";
      // Undeclared exception!
      try { 
        Utility.signatureToString("$A");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `$A'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Utility.signatureToString("FZaH&SdU,^&0\"?Vq-0t");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-71);
      Utility.encode(byteArray0, false);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 2382, 2382);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Utility.accessToString(20);
      ConstantMethodType constantMethodType0 = new ConstantMethodType((byte)116);
      try { 
        Utility.methodSignatureReturnType("]", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `]'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.getSignature("m[Ko.%{m[");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegally nested brackets:[Ko.%{m[
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      byte byte0 = ObjectStreamConstants.TC_BLOCKDATA;
      byte byte1 = Utility.typeOfSignature("F");
      assertEquals((byte)6, byte1);
      
      String string0 = Constants.ILLEGAL_OPCODE;
      String[] stringArray0 = new String[1];
      stringArray0[0] = "<illegal opcode>";
      String string1 = Utility.methodTypeToSignature("Wi+8B,F\"X*'%1k%\"#", stringArray0);
      assertEquals("(L<illegal;)LWi+8B,F\"X*'%1k%\"#;", string1);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Utility.convertString("A|6");
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature(" AK$(0m]c^E+8[=4ad", (String[]) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegally nested brackets:[=4ad
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      String string0 = Utility.format((-1385), (-1385), true, '/');
      assertEquals("-1385", string0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      String string0 = Utility.printArray(objectArray0, true, true);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Utility.methodTypeToSignature("2V,Sh- N7;P#HRspB", (String[]) null);
      // Undeclared exception!
      try { 
        Utility.signatureToString("2V,Sh- N7;P#HRspB");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `2V,Sh- N7;P#HRspB'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.getSignature("\t\t");
      FileSystemHandling.shouldAllThrowIOExceptions();
      try { 
        Utility.typeOfSignature("\t\t");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: \t\t
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Utility.isJavaIdentifierPart('|');
      Utility.methodTypeToSignature("byte", (String[]) null);
      try { 
        Utility.typeOfMethodSignature("C");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: C
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Utility.fillup("", '3', true, '3');
      try { 
        Utility.typeOfSignature("333333333333333333333333333333333333333333333333333");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 333333333333333333333333333333333333333333333333333
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      String string0 = Utility.classOrInterface((-2701));
      assertEquals("class", string0);
      
      String string1 = Utility.format((-2701), (-2701), false, 'K');
      assertEquals("-2701", string1);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[3];
      byteArray0[2] = (byte)48;
      String string0 = Utility.encode(byteArray0, false);
      assertEquals("$A$A0", string0);
      
      boolean boolean0 = Utility.isSet((byte)48, (byte)48);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-78);
      byteArray0[1] = (byte)97;
      byteArray0[2] = (byte)11;
      byteArray0[3] = (byte)0;
      String string0 = Utility.toHexString(byteArray0);
      assertEquals("b2 61 0b 00 00 00 00", string0);
      
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte)11;
      byteArray1[2] = (byte)0;
      byteArray1[3] = (byte)0;
      byteArray1[4] = (byte) (-42);
      byteArray1[5] = (byte) (-78);
      byteArray1[6] = (byte) (-108);
      boolean boolean0 = Utility.equals(byteArray1, byteArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Utility.signatureToString("FZaH&SdU,^&0\"?Vq-0t");
      byte[] byteArray0 = new byte[1];
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 2382, 2382);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-78);
      byteArray0[6] = (byte) (-78);
      Utility.setBit((byte) (-78), (byte) (-78));
      // Undeclared exception!
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-78), (int) (byte)0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      short short0 = Utility.searchOpcode("int");
      assertEquals((short) (-1), short0);
      
      byte[] byteArray0 = new byte[1];
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (-1255), (-1255));
      assertEquals("0:    nop\n", string0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[6];
      byteArray0[3] = (byte)40;
      byteArray0[4] = (byte)40;
      byteArray0[5] = (byte) (-78);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)40, (int) (byte)40);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)88;
      byteArray0[1] = (byte)62;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, 32, (int) (byte)88);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      ConstantPool constantPool0 = null;
      int int0 = 595;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)73;
      byteArray0[1] = (byte)19;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 174, 1645);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte)88;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 580, 3604);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-78);
      byteArray0[1] = (byte) (-78);
      Utility.setBit((byte)11, (byte) (-78));
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-78), (int) (byte) (-78));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Utility.compactClassName("Y");
      // Undeclared exception!
      try { 
        Utility.signatureToString("Y", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Y'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byte byte0 = (byte)74;
      byteArray0[1] = (byte)74;
      byte byte1 = (byte)4;
      String string0 = "R;;vH]0F";
      try { 
        Utility.methodSignatureReturnType("R;;vH]0F");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `R;;vH]0F'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      String string0 = "G\"X3K";
      // Undeclared exception!
      try { 
        Utility.signatureToString("G\"X3K", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `G\"X3K'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      String string0 = Utility.format(195, 195, true, 'f');
      String string1 = Utility.compactClassName("195ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff");
      assertTrue(string1.equals((Object)string0));
      
      String string2 = Utility.signatureToString("Invalid type: ");
      assertEquals("int", string2);
      
      short short0 = Utility.searchOpcode("195ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff");
      assertEquals((short) (-1), short0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Utility.fillup("", (-1419), true, '>');
      Utility.isJavaIdentifierPart('>');
      Utility.setBit((-1419), (-4127));
      byte[] byteArray0 = Utility.decode("", false);
      assertArrayEquals(new byte[] {}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Utility.clearBit(540, (-1215));
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "f\"ON*reT");
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("(`,Bk)>/cSie;8H", "(`,Bk)>/cSie;8H", ">|}^~~zr7!8}~");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: ``,Bk)>/cSie;8H'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-78);
      byteArray0[1] = (byte)97;
      Utility.setBit((byte)11, (byte)97);
      Utility.signatureToString("Byte code error: ");
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)97, (int) (byte)97);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-78);
      byteArray0[1] = (byte)97;
      byteArray0[2] = (byte)11;
      Utility.setBit(91, (byte)97);
      char char0 = 'h';
      Utility.isJavaIdentifierPart('h');
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      Utility.compactClassName("java.lang.", "java.lang.", false);
      try { 
        Utility.typeOfSignature("Hb)>GqsQ34,");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Hb)>GqsQ34,
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      char char0 = 'U';
      FileSystemHandling.shouldAllThrowIOExceptions();
      try { 
        Utility.typeOfSignature("Y");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Y
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-76);
      Utility.compactClassName(" +C@g6\"ePMC*", " +C@g6\"ePMC*", true);
      try { 
        Utility.typeOfSignature("p");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: p
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "int";
      stringArray0[1] = "{$!NWbJ?96-F`7 ";
      stringArray0[4] = "{$!NWbJ?96-F`7 ";
      // Undeclared exception!
      try { 
        Utility.signatureToString("O[");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `O['
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Utility.compactClassName("UEGi+%z'>+2", false);
      String string0 = "\"8tS.]LobwI{@RXxym";
      try { 
        Utility.typeOfSignature("2V,S(-%N73P#HRsB");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 2V,S(-%N73P#HRsB
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[4] = (byte)53;
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.searchOpcode("UEGi+%z'>+}]~g7S.xF(nT");
      Utility.signatureToString("V|pj.*[=4!Q}XSZ#", false);
      short short0 = Utility.searchOpcode(">\";#cD}m^,j1:<U@<o");
      assertEquals((short) (-1), short0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Utility.compactClassName("L'IcCtX?/{k1(/", false);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.compactClassName("2V,Sh-N7;P#HRspB", "b{bxwj{xNX^ g$ou\"", true);
      try { 
        Utility.typeOfSignature("Gt+G-~:{vQ)0");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Gt+G-~:{vQ)0
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Utility.compactClassName("L'IcCtX?/{k1(/", false);
      String string0 = "INSENSITIVE";
      // Undeclared exception!
      try { 
        Utility.signatureToString("L'IcCtX?.{k1(.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: L'IcCtX?.{k1(.
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      String string0 = Utility.fillup("The array of suffixes must not be null", '3', true, '3');
      assertEquals("The array of suffixes must not be null3333333333333", string0);
      
      byte byte0 = Utility.typeOfSignature("The array of suffixes must not be null3333333333333");
      assertEquals((byte)14, byte0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Object[] objectArray0 = null;
      // Undeclared exception!
      try { 
        Utility.printArray((PrintStream) null, (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "I(whIpg");
      byte byte0 = Utility.typeOfSignature("I(whIpg");
      assertEquals((byte)10, byte0);
      
      byte byte1 = ElementValue.PRIMITIVE_CHAR;
      boolean boolean0 = Utility.isJavaIdentifierPart('I');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Utility.isJavaIdentifierPart('h');
      String string0 = "NnN,x7pZ=imA";
      try { 
        Utility.typeOfSignature("NnN,x7pZ=imA");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: NnN,x7pZ=imA
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      String string0 = Utility.getSignature("");
      assertEquals("L;", string0);
      
      byte byte0 = Utility.typeOfSignature("L;");
      assertEquals((byte)14, byte0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      ConstantMethodType constantMethodType0 = new ConstantMethodType((byte)91);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)91;
      byteArray0[1] = (byte)91;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 1583, 1583);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-92);
      byteArray0[1] = (byte)83;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (-2186), (int) (byte)83);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Object[] objectArray0 = new Object[13];
      objectArray0[1] = (Object) "(";
      // Undeclared exception!
      try { 
        Utility.signatureToString("QCnB:k5h;%*I");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `QCnB:k5h;%*I'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)3;
      byteArray0[1] = (byte) (-105);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-105), (int) (byte) (-105));
      assertEquals("0:    iconst_0\n1:    dcmpl\n2:    nop\n", string0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Integer integer0 = new Integer((byte) (-78));
      String string0 = Utility.signatureToString("Cf)2t$.K>%");
      assertEquals("char", string0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[7] = (byte) (-113);
      byteArray0[1] = (byte) (-113);
      byteArray0[3] = (byte) (-113);
      byteArray0[4] = (byte) (-113);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Constant[] constantArray0 = new Constant[3];
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref(288, 996);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      PipedWriter pipedWriter0 = new PipedWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedWriter0);
      Utility.printArray((PrintWriter) mockPrintWriter0, (Object[]) constantArray0);
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals("d2l", string1);
      
      int int0 = Utility.setBit((-2633), (byte) (-113));
      assertEquals((-2633), int0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("CL");
      assertEquals((byte)5, byte0);
      
      String string0 = Utility.methodSignatureReturnType("CL", true);
      assertEquals("char", string0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Utility.setBit(86, (byte)0);
      Utility.replace(", ", ", ", "putfield");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Utility.fillup("z", (-1979), true, ')');
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) ", ";
      objectArray0[1] = (Object) "vh0P`)LQ-duO";
      objectArray0[2] = (Object) "putfield";
      objectArray0[3] = (Object) "z";
      objectArray0[4] = (Object) "z";
      objectArray0[5] = (Object) "z";
      Utility.printArray(objectArray0);
      // Undeclared exception!
      try { 
        Utility.signatureToString("Msg1,tK");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Msg1,tK'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Utility.compactClassName("UEGi+%z'>+2", false);
      Utility.setBit(1465, 1465);
      try { 
        Utility.typeOfSignature("UEGi+%z'>+2");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: UEGi+%z'>+2
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("getfield", "getfield", "invokestatic", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: getfield
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      boolean boolean0 = Utility.isJavaIdentifierPart('x');
      byte byte0 = Utility.typeOfSignature("[EnoPrz/.&(Pp4?R:");
      assertEquals((byte)13, byte0);
      
      boolean boolean1 = Utility.isJavaIdentifierPart(',');
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) stringWriter0;
      Utility.printArray((PrintWriter) mockPrintWriter0, objectArray0);
      assertEquals("{}\n", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      String string0 = Constants.STATIC_INITIALIZER_NAME;
      byte byte0 = ObjectStreamConstants.TC_LONGSTRING;
      try { 
        Utility.typeOfSignature("<clinit>");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: <clinit>
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Utility.isSet(0, 0);
      String string0 = Constants.STATIC_INITIALIZER_NAME;
      Utility.replace("R;uj0*]<&r([MY", "R;uj0*]<&r([MY", "invokespecial");
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.compactClassName("R;uj0*]<&r([MY", ",.", false);
      try { 
        Utility.typeOfSignature("R;uj0*]<&r([MY");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: R;uj0*]<&r([MY
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Utility.isJavaIdentifierPart('x');
      try { 
        Utility.typeOfSignature("*'402W[.ZIW)%");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: '402W[.ZIW)%
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      try { 
        Utility.typeOfSignature("*>p:QJ/31uNc");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: >p:QJ/31uNc
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Utility.setBit((byte)0, (byte)0);
      try { 
        Utility.typeOfSignature("\"&F@{K95'm?DLXyD");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: \"&F@{K95'm?DLXyD
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      try { 
        Utility.typeOfSignature(", code_length = ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: , code_length = 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      Utility.replace("ifnonnull", "ifnonnull", "Illegal signature: ");
      Utility.signatureToString("Illegal signature: ");
      Utility.typeOfSignature("Illegal signature: ");
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.compactClassName("Illegal signature: ", "'", false);
      Utility.typeOfSignature("B)IO_k~");
      short short0 = Constants.ASTORE_1;
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("'", "F,$v7+Fopy;85#", "'");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: '
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      String string0 = "2V,S(-%N73P#HRsB";
      String string1 = "/'B3a1%3s^-";
      try { 
        Utility.typeOfSignature("/'B3a1%3s^-");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: /'B3a1%3s^-
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Utility.format(4025, (-3612), false, '_');
      Utility.methodSignatureReturnType("Ljava,class/pMh;V", false);
      String string0 = Utility.printArray((Object[]) null, false);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Utility.convertString("'_ 9rSQ$?YhUxY%+");
      Utility.compactClassName("'_ 9rSQ$?YhUxY%+", "RuntimeInvisibleAnnotations", false);
      try { 
        Utility.typeOfSignature("java.lang.L3@jOy.E+eoN6WQ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: java.lang.L3@jOy.E+eoN6WQ
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      String string0 = "Yr` 3I,\\~A~";
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte)76;
      byteArray0[0] = (byte)76;
      Utility.convertString("Yr` 3I,~A~");
      Utility.isJavaIdentifierPart('`');
      try { 
        Utility.methodSignatureReturnType("Yr` 3I,\\~A~", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Yr` 3I,\\~A~'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = Constants.STATIC_INITIALIZER_NAME;
      Utility.typeOfSignature("ZzD@TN#J([Ws5bZ~");
      Utility.signatureToString("ZzD@TN#J([Ws5bZ~");
      byte byte0 = ElementValue.PRIMITIVE_INT;
      // Undeclared exception!
      try { 
        Utility.equals((byte[]) null, (byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      boolean boolean0 = true;
      Utility.compactClassName("85+26uc`^K", true);
      FileSystemHandling.shouldAllThrowIOExceptions();
      try { 
        Utility.typeOfSignature("85+26uc`^K");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 85+26uc`^K
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)100;
      byteArray0[1] = (byte)36;
      try { 
        Utility.typeOfSignature("QY");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: QY
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      byte byte0 = Constants.ATTR_RUNTIMEVISIBLE_ANNOTATIONS;
      Utility.typeOfSignature("F");
      String string0 = Constants.ILLEGAL_OPCODE;
      byte[] byteArray0 = null;
      // Undeclared exception!
      try { 
        Utility.encode((byte[]) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "sS/xV");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ConstantMethodType constantMethodType0 = new ConstantMethodType((-2016));
      try { 
        Utility.methodSignatureReturnType("Wn^wwiGFHr`tV", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Wn^wwiGFHr`tV'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      String[] stringArray0 = Constants.SHORT_TYPE_NAMES;
      FileSystemHandling.shouldAllThrowIOExceptions();
      try { 
        Utility.typeOfSignature("A&X]");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: A&X]
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Utility.convertString("void");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)73;
      byteArray0[1] = (byte)73;
      byteArray0[2] = (byte) (-39);
      byteArray0[3] = (byte)40;
      String string0 = "1G_:)\\9j$k\\l$v]@g\\P";
      try { 
        Utility.typeOfSignature("1G_:)9j$kl$v]@gP");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 1G_:)9j$kl$v]@gP
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("E3PxJv1NWvol7{R5");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `E3PxJv1NWvol7{R5'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      String string0 = "NJM";
      // Undeclared exception!
      try { 
        Utility.signatureToString("NJM");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `NJM'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)97;
      byteArray0[4] = (byte) (-66);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      try { 
        Utility.typeOfSignature("7+.8 11)aN");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 7+.8 11)aN
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte byte0 = Constants.CONSTANT_String;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-113);
      Utility.fillup(", npairs = ", (-1136), false, 'P');
      Utility.typeOfSignature("S1;uB@A 9>:|m");
      Utility.isJavaIdentifierPart('P');
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("S1;uB@A 9>:|m", ", npairs = ", ", npairs = ", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: S1;uB@A 9>:|m
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      int int0 = 430;
      Utility.codeToString(byteArray0, (ConstantPool) null, (-4624), 430);
      try { 
        Utility.typeOfSignature("0:    nop\n1:    nop\n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 0:    nop
         // 1:    nop
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      byte byte0 = (byte) (-9);
      ConstantPool constantPool0 = null;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-9);
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-9), (int) (byte) (-9));
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.getSignature("0:    <illegal opcode>\n1:    nop\n");
      DataInput dataInput0 = null;
      ConstantPool constantPool1 = null;
      try {
        constantPool1 = new ConstantPool((DataInput) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      String[] stringArray0 = Constants.SHORT_TYPE_NAMES;
      Utility.compactClassName(">", false);
      byte[] byteArray0 = new byte[4];
      byteArray0[2] = (byte) (-39);
      byteArray0[1] = (byte) (-39);
      byteArray0[2] = (byte) (-89);
      byteArray0[3] = (byte) (-39);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-39), 3335);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    nop
         // 1:    <illegal opcode>
         // 2:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Utility.signatureToString("FZaH&SdU,^&0\"?Vq-0t");
      Utility.fillup("\t\t", 89, false, '$');
      try { 
        Utility.typeOfSignature("$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$\t\t");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$\t\t
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      boolean boolean0 = true;
      String[] stringArray0 = Constants.SHORT_TYPE_NAMES;
      String string0 = ">";
      Utility.compactClassName(">", false);
      byte byte0 = (byte) (-39);
      byte byte1 = (byte) (-89);
      byte[] byteArray0 = new byte[4];
      byteArray0[2] = (byte) (-39);
      Utility.isJavaIdentifierPart('r');
      try { 
        Utility.typeOfSignature(".:6cL;cJ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: .:6cL;cJ
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      ConstantPool constantPool0 = null;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)32;
      byteArray0[2] = (byte)92;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.available();
      String string0 = "[$Z+O@PtskEGf4xZi";
      // Undeclared exception!
      try { 
        Utility.getSignature("[$Z+O@PtskEGf4xZi");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal type: [$Z+O@PtskEGf4xZi
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-71);
      byteArray0[1] = (byte)49;
      byteArray0[2] = (byte)49;
      char char0 = 'U';
      FileSystemHandling.shouldAllThrowIOExceptions();
      try { 
        Utility.typeOfSignature(")\t");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: )\t
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-87);
      byteArray0[1] = (byte)91;
      try { 
        Utility.typeOfSignature("?<@L8");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ?<@L8
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      char char0 = '>';
      Utility.fillup("", (-1419), true, '>');
      try { 
        Utility.typeOfSignature("PGFZ`j#-qtr/;XGD:v");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: PGFZ`j#-qtr/;XGD:v
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      String string0 = "85+26uc`^K";
      Utility.compactClassName("85+26uc`^K", true);
      byte[] byteArray0 = new byte[7];
      byteArray0[1] = (byte)62;
      byteArray0[3] = (byte)62;
      byteArray0[4] = (byte)88;
      byteArray0[5] = (byte)62;
      byteArray0[6] = (byte)88;
      try { 
        Utility.typeOfSignature("-wP@0q.jBtRAwpuM");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: -wP@0q.jBtRAwpuM
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      try { 
        Utility.typeOfSignature("%kB<L^0mK");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: %kB<L^0mK
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      byte byte0 = ElementValue.PRIMITIVE_DOUBLE;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "/g#1{;r_2Ix(+S");
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.typeOfSignature("The prefix must not be null");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String[] stringArray0 = new String[0];
      Utility.methodTypeToSignature("\\", stringArray0);
      Utility.replace("The prefix must not be null", "f", "A&X]");
      try { 
        Utility.methodSignatureReturnType("KAw e`M>r,@", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `KAw e`M>r,@'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte)80;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 580, 3604);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      String string0 = Utility.signatureToString("FZaH&SdU,^&0\"?Vq-0t");
      assertNotNull(string0);
      assertEquals("float", string0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)81;
      byteArray0[1] = (byte) (-7);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertArrayEquals(new byte[] {(byte)81, (byte) (-7)}, byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("=");
      assertNotNull(mockFileOutputStream0);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, false);
      assertNotNull(mockPrintWriter0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      byte byte0 = Utility.typeOfSignature("Jw2:@}r");
      assertEquals((byte)11, byte0);
      
      String string1 = Utility.format(192, (byte) (-7), false, 'D');
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("192", string1);
      
      try { 
        Utility.typeOfMethodSignature("192");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 192
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byte byte0 = (byte) (-74);
      byteArray0[0] = (byte) (-74);
      byteArray0[1] = (byte)91;
      int int0 = (-2177);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 182, 42);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)81;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertArrayEquals(new byte[] {(byte)81, (byte)0}, byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertNotNull(string0);
      assertArrayEquals(new byte[] {(byte)81, (byte)0}, byteArray0);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals("fastore", string0);
      
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("fastore");
      assertNotNull(mockFileOutputStream0);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, false);
      assertNotNull(mockPrintWriter0);
      
      try { 
        Utility.typeOfSignature("boolean");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: boolean
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      String string0 = Utility.compactClassName("85+26uc`^K", true);
      assertNotNull(string0);
      assertEquals("85+26uc`^K", string0);
      
      byte[] byteArray0 = new byte[7];
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      boolean boolean0 = Utility.isJavaIdentifierPart('X');
      assertTrue(boolean0);
      
      String string1 = "Z)zI2lum<rN1aHiB";
      String string2 = Utility.signatureToString("Z)zI2lum<rN1aHiB", true);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("boolean", string2);
      
      try { 
        Utility.typeOfSignature("X\"R*LG;3JK,5");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: X\"R*LG;3JK,5
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      ConstantPool constantPool0 = null;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)76;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)76, (int) (byte)76);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)53;
      byteArray0[1] = (byte) (-85);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 3604, 4665);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-86);
      byteArray0[1] = (byte)48;
      byteArray0[2] = (byte)41;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (-1350), (int) (byte)41);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[2] = (byte)53;
      String string0 = "V|pj.*[=4!Q}XSZ#";
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean1 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)53, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(boolean1);
      
      boolean boolean2 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      
      String string1 = "@6Pgb,:Wm~05S";
      try { 
        Utility.typeOfSignature("@6Pgb,:Wm~05S");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: @6Pgb,:Wm~05S
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      String string0 = "void";
      String string1 = Utility.convertString("void");
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("void", string1);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)73;
      byteArray0[1] = (byte)74;
      byteArray0[2] = (byte) (-39);
      byteArray0[3] = (byte)40;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)74, (-1516));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)53;
      byteArray0[1] = (byte) (-87);
      byteArray0[3] = (byte) (-90);
      byteArray0[4] = (byte)62;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)53, (int) (byte)0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      String string0 = Utility.replace(".3Rm<<rM4b6uO", ".3Rm<<rM4b6uO", " ");
      assertNotNull(string0);
      assertEquals(" ", string0);
      
      MockFile mockFile0 = new MockFile("[-");
      assertNotNull(mockFile0);
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals("[-", mockFile0.toString());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("[-", mockFile0.getName());
      
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, true);
      assertNotNull(mockFileOutputStream0);
      assertFalse(mockFile0.isDirectory());
      assertEquals("[-", mockFile0.toString());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("[-", mockFile0.getName());
      
      mockFileOutputStream0.flush();
      assertFalse(mockFile0.isDirectory());
      assertEquals("[-", mockFile0.toString());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("[-", mockFile0.getName());
      
      mockFileOutputStream0.write(193);
      assertFalse(mockFile0.isDirectory());
      assertEquals("[-", mockFile0.toString());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(1L, mockFile0.length());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("[-", mockFile0.getName());
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, true);
      assertNotNull(mockPrintWriter0);
      assertFalse(mockFile0.isDirectory());
      assertEquals("[-", mockFile0.toString());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(1L, mockFile0.length());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("[-", mockFile0.getName());
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      try { 
        Utility.typeOfSignature("W>Yyz");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: W>Yyz
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      byteArray0[0] = (byte) (-117);
      ConstantLong constantLong0 = new ConstantLong(206L);
      assertNotNull(constantLong0);
      assertEquals((byte)5, constantLong0.getTag());
      assertEquals(206L, constantLong0.getBytes());
      
      ConstantLong constantLong1 = new ConstantLong((byte) (-117));
      assertFalse(constantLong1.equals((Object)constantLong0));
      assertNotNull(constantLong1);
      assertEquals((byte)5, constantLong1.getTag());
      assertEquals((-117L), constantLong1.getBytes());
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertArrayEquals(new byte[] {(byte) (-117)}, byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      
      short short0 = Constants.ACC_PUBLIC;
      assertEquals((short)1, short0);
      
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (-652), (-652));
      assertNotNull(string0);
      assertArrayEquals(new byte[] {(byte) (-117)}, byteArray0);
      assertEquals("0:    f2i\n", string0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Integer integer0 = new Integer((byte) (-78));
      assertNotNull(integer0);
      assertEquals((-78), (int)integer0);
      
      String string0 = Utility.signatureToString("Cf)2t$.K>%");
      assertNotNull(string0);
      assertEquals("char", string0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[7] = (byte) (-113);
      byteArray0[1] = (byte) (-113);
      byteArray0[3] = (byte) (-113);
      byteArray0[3] = (byte)97;
      byteArray0[4] = (byte) (-113);
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      byte byte0 = Utility.typeOfSignature("Cf)2t$.K>%");
      assertEquals((byte)5, byte0);
      
      MockFile mockFile0 = new MockFile("Cf)2t$.K>%");
      assertNotNull(mockFile0);
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.exists());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.canExecute());
      assertEquals("Cf)2t$.K>%", mockFile0.getName());
      assertFalse(mockFile0.isDirectory());
      assertEquals("Cf)2t$.K>%", mockFile0.toString());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isAbsolute());
      
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(">zCYp?.zF");
      assertNotNull(mockFileOutputStream0);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, true);
      assertNotNull(mockPrintWriter0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      byte byte1 = Utility.typeOfSignature("D");
      assertFalse(byte1 == byte0);
      assertEquals((byte)7, byte1);
      
      boolean boolean1 = Utility.isJavaIdentifierPart('/');
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      String string0 = Constants.ILLEGAL_OPCODE;
      assertNotNull(string0);
      assertEquals("<illegal opcode>", string0);
      
      Constant[] constantArray0 = null;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      String string1 = Constants.ILLEGAL_OPCODE;
      assertNotNull(string1);
      assertEquals("<illegal opcode>", string1);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-65);
      byteArray0[1] = (byte)114;
      byteArray0[2] = (byte) (-65);
      String string2 = Constants.CONSTRUCTOR_NAME;
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("<init>", string2);
      
      try { 
        Utility.typeOfSignature("&K9");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: &K9
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte)104;
      byteArray0[0] = (byte)104;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 1338, 1338);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byte byte0 = (byte) (-80);
      byteArray0[0] = (byte) (-80);
      byteArray0[1] = (byte)45;
      byteArray0[2] = (byte)45;
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-80), (int) (byte) (-80));
      assertNotNull(string0);
      assertArrayEquals(new byte[] {(byte) (-80), (byte)45, (byte)45}, byteArray0);
      assertEquals("0:    areturn\n1:    aload_3\n2:    aload_3\n", string0);
      
      String string1 = Utility.classOrInterface((-2396));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("interface", string1);
      
      ByteSequence byteSequence0 = null;
      try {
        byteSequence0 = new ByteSequence((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      String string0 = "Itt~$~^F0";
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Itt~$~^F0");
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-64);
      byteArray0[1] = (byte) (-71);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 93, (-2156), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      String string0 = Utility.convertString("FZaH&SdU,^&0\"?Vq-0t");
      assertNotNull(string0);
      assertEquals("FZaH&SdU,^&0\\\"?Vq-0t", string0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)81;
      byteArray0[1] = (byte)81;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertArrayEquals(new byte[] {(byte)81, (byte)81}, byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      
      String string1 = Utility.methodTypeToSignature("ze8fzS~qNn5g", (String[]) null);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("()Lze8fzS~qNn5g;", string1);
      
      // Undeclared exception!
      try { 
        Utility.signatureToString((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)92;
      byteArray0[1] = (byte)16;
      byteArray0[2] = (byte) (-68);
      byteArray0[3] = (byte) (-82);
      byteArray0[5] = (byte) (-68);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertArrayEquals(new byte[] {(byte)92, (byte)16, (byte) (-68), (byte) (-82), (byte)0, (byte) (-68), (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertNotNull(string0);
      assertArrayEquals(new byte[] {(byte)92, (byte)16, (byte) (-68), (byte) (-82), (byte)0, (byte) (-68), (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals("dup2", string0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      String string0 = Utility.getSignature("UEGi+%z'>+}]~g7S.xF(nT[,]");
      assertNotNull(string0);
      assertEquals("[LUEGi+%z'>+}]~g7S/xF(nT;", string0);
      
      int int0 = Utility.setBit(3604, 3991);
      assertEquals(8392212, int0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-76);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)53, 3991);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-65);
      byteArray0[1] = (byte) (-67);
      byteArray0[2] = (byte) (-65);
      byteArray0[4] = (byte)92;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 7, 7);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-110);
      byteArray0[4] = (byte) (-66);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-66), (int) (byte) (-66));
      assertNotNull(string0);
      assertArrayEquals(new byte[] {(byte) (-110), (byte)0, (byte)0, (byte)0, (byte) (-66), (byte)0, (byte)0}, byteArray0);
      assertEquals("0:    i2c\n1:    nop\n2:    nop\n3:    nop\n4:    arraylength\n5:    nop\n6:    nop\n", string0);
      
      String string1 = Constants.ILLEGAL_TYPE;
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("<illegal type>", string1);
      
      try { 
        Utility.methodSignatureReturnType("YlAl\"Ge0>-F,3wu");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `YlAl\"Ge0>-F,3wu'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      byteArray0[0] = (byte) (-62);
      byteArray0[1] = (byte) (-62);
      byte[] byteArray1 = new byte[1];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte) (-62);
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteSequence0);
      assertArrayEquals(new byte[] {(byte) (-62)}, byteArray1);
      assertEquals(0, byteSequence0.getIndex());
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, (ConstantPool) null, 175, (int) (byte) (-125));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      String string0 = "Uv[gSahS/t>";
      String string1 = Utility.replace("Uv[gSahS/t>", "(", "Uv[gSahS/t>");
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("Uv[gSahS/t>", string1);
      
      String[] stringArray0 = Constants.SHORT_TYPE_NAMES;
      assertNotNull(stringArray0);
      
      String string2 = "O0,O8cA";
      String string3 = Constants.CONSTRUCTOR_NAME;
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals("<init>", string3);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      try { 
        Utility.typeOfSignature("O0,O8cA");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: O0,O8cA
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)53;
      String[] stringArray0 = new String[4];
      stringArray0[0] = "return";
      String string0 = "void";
      stringArray0[1] = "void";
      stringArray0[2] = "?>...";
      stringArray0[3] = "return";
      try { 
        Utility.methodTypeToSignature("?>...", stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid type: void
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)111;
      int int0 = (-441);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (-441), (int) (byte)111);
      assertNotNull(string0);
      assertArrayEquals(new byte[] {(byte)111}, byteArray0);
      assertEquals("0:    ddiv\n", string0);
      
      byte byte0 = ObjectStreamConstants.TC_RESET;
      assertEquals((byte)121, byte0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertArrayEquals(new byte[] {(byte)111}, byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      
      String string1 = Constants.ILLEGAL_OPCODE;
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("<illegal opcode>", string1);
      
      try { 
        Utility.methodSignatureArgumentTypes("<illegal opcode>");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: <illegal opcode>
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string0 = ")\t";
      ConstantPool constantPool0 = null;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)61;
      byteArray0[1] = (byte) (-108);
      int int0 = (-1267);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 8, 189);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      byte byte0 = (byte)18;
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte)18;
      byteArray0[2] = (byte)18;
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)18, (int) (byte)18, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      int int0 = 300;
      boolean boolean0 = Utility.isSet(300, 300);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      byte[] byteArray0 = new byte[10];
      byteArray0[0] = (byte) (-127);
      byteArray0[2] = (byte) (-127);
      byteArray0[0] = (byte) (-127);
      byteArray0[3] = (byte) (-127);
      byteArray0[5] = (byte) (-127);
      byteArray0[6] = (byte) (-127);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertArrayEquals(new byte[] {(byte) (-127), (byte)0, (byte) (-127), (byte) (-127), (byte)0, (byte) (-127), (byte) (-127), (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      
      ConstantPool constantPool0 = null;
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertNotNull(byteSequence1);
      assertArrayEquals(new byte[] {(byte) (-127), (byte)0, (byte) (-127), (byte) (-127), (byte)0, (byte) (-127), (byte) (-127), (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(0, byteSequence1.getIndex());
      
      String string0 = Utility.codeToString(byteSequence1, (ConstantPool) null, false);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertNotNull(string0);
      assertArrayEquals(new byte[] {(byte) (-127), (byte)0, (byte) (-127), (byte) (-127), (byte)0, (byte) (-127), (byte) (-127), (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(1, byteSequence1.getIndex());
      assertEquals("lor", string0);
      assertNotSame(byteSequence1, byteSequence0);
      
      byte byte0 = Utility.typeOfSignature("Illegally nested brackets:");
      assertEquals((byte)10, byte0);
      
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      assertFalse(byteSequence2.equals((Object)byteSequence1));
      assertFalse(byteSequence2.equals((Object)byteSequence0));
      assertNotNull(byteSequence2);
      assertArrayEquals(new byte[] {(byte) (-127), (byte)0, (byte) (-127), (byte) (-127), (byte)0, (byte) (-127), (byte) (-127), (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(0, byteSequence2.getIndex());
      
      MockFile mockFile0 = new MockFile("lor");
      assertNotNull(mockFile0);
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.isHidden());
      assertEquals("lor", mockFile0.toString());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.canRead());
      assertNull(mockFile0.getParent());
      assertEquals("lor", mockFile0.getName());
      assertFalse(mockFile0.exists());
      assertEquals(0L, mockFile0.getUsableSpace());
      
      MockRandomAccessFile mockRandomAccessFile0 = null;
      try {
        mockRandomAccessFile0 = new MockRandomAccessFile("lor", "Illegally nested brackets:");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal mode \"Illegally nested brackets:\" must be one of \"r\", \"rw\", \"rws\", or \"rwd\"
         //
         verifyException("java.io.RandomAccessFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      byteArray0[1] = (byte)65;
      byteArray0[2] = (byte) (-96);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)122;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertArrayEquals(new byte[] {(byte)0, (byte)65, (byte) (-96), (byte)0, (byte)122}, byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      
      int int0 = byteSequence0.readInt();
      assertArrayEquals(new byte[] {(byte)0, (byte)65, (byte) (-96), (byte)0, (byte)122}, byteArray0);
      assertEquals(4, byteSequence0.getIndex());
      assertEquals(4300800, int0);
      
      byteSequence0.mark((byte)0);
      assertArrayEquals(new byte[] {(byte)0, (byte)65, (byte) (-96), (byte)0, (byte)122}, byteArray0);
      assertEquals(4, byteSequence0.getIndex());
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertNotNull(string0);
      assertArrayEquals(new byte[] {(byte)0, (byte)65, (byte) (-96), (byte)0, (byte)122}, byteArray0);
      assertEquals(5, byteSequence0.getIndex());
      assertEquals("ishr", string0);
      
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      String string0 = Utility.signatureToString("FZaH&SdU,^&0\"?Vq-0t");
      assertNotNull(string0);
      assertEquals("float", string0);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      String string1 = Constants.CONSTRUCTOR_NAME;
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("<init>", string1);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)112;
      byteArray0[1] = (byte) (-57);
      byteArray0[3] = (byte)112;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertArrayEquals(new byte[] {(byte)112, (byte) (-57), (byte)0, (byte)112}, byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      
      long long0 = byteSequence0.skip((byte)112);
      assertArrayEquals(new byte[] {(byte)112, (byte) (-57), (byte)0, (byte)112}, byteArray0);
      assertEquals(4, byteSequence0.getIndex());
      assertEquals(4L, long0);
      
      boolean boolean1 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new byte[] {(byte)112, (byte) (-57), (byte)0, (byte)112}, byteArray0);
      assertFalse(boolean1);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 5411, 160);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-71);
      String string0 = Utility.compactClassName(" +C@g6\"ePMC*", " +C@g6\"ePMC*", true);
      assertNotNull(string0);
      assertEquals("", string0);
      
      byte byte0 = Utility.typeOfSignature("V");
      assertEquals((byte)12, byte0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)92;
      byteArray0[1] = (byte) (-121);
      byteArray0[2] = (byte) (-68);
      byteArray0[3] = (byte) (-82);
      byteArray0[5] = (byte) (-68);
      byteArray0[7] = (byte) (-121);
      byteArray0[4] = (byte) (-121);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (-1197), (int) (byte) (-68));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -82
         //
         verifyException("org.apache.bcel.Const", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-68);
      byteArray0[1] = (byte) (-62);
      byteArray0[2] = (byte) (-82);
      byteArray0[3] = (byte)92;
      byteArray0[4] = (byte) (-68);
      byteArray0[5] = (byte)16;
      byteArray0[6] = (byte) (-68);
      byteArray0[7] = (byte)16;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)16, (int) (byte)92);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -62
         //
         verifyException("org.apache.bcel.Const", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      ConstantPool constantPool0 = null;
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-85);
      byteArray0[1] = (byte) (-7);
      byteArray0[2] = (byte) (-54);
      byteArray0[3] = (byte) (-7);
      byteArray0[4] = (byte) (-7);
      byteArray0[5] = (byte) (-54);
      byteArray0[6] = (byte) (-85);
      byteArray0[7] = (byte) (-54);
      byteArray0[8] = (byte) (-85);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-7), (int) (byte) (-7));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      String string0 = Utility.compactClassName("Y");
      assertNotNull(string0);
      assertEquals("Y", string0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-95);
      byteArray0[1] = (byte) (-95);
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref(1170, 1170);
      assertNotNull(constantInterfaceMethodref0);
      assertEquals(1170, constantInterfaceMethodref0.getNameAndTypeIndex());
      assertEquals(1170, constantInterfaceMethodref0.getClassIndex());
      assertEquals((byte)11, constantInterfaceMethodref0.getTag());
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertArrayEquals(new byte[] {(byte) (-95), (byte) (-95)}, byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 1170, 4198);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      byte byte0 = Constants.ATTR_SYNTHETIC;
      assertEquals((byte)7, byte0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      byte[] byteArray0 = new byte[8];
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "anewarray");
      assertFalse(boolean0);
      
      byteArray0[0] = (byte)123;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertArrayEquals(new byte[] {(byte)123, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertNotNull(string0);
      assertArrayEquals(new byte[] {(byte)123, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals("lshr", string0);
      
      boolean boolean1 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new byte[] {(byte)123, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(boolean1);
      
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertNotNull(byteSequence1);
      assertArrayEquals(new byte[] {(byte)123, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(0, byteSequence1.getIndex());
      
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      assertFalse(byteSequence2.equals((Object)byteSequence0));
      assertFalse(byteSequence2.equals((Object)byteSequence1));
      assertNotNull(byteSequence2);
      assertArrayEquals(new byte[] {(byte)123, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(0, byteSequence2.getIndex());
      
      ConstantFieldref constantFieldref0 = new ConstantFieldref(byteSequence1);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertFalse(byteSequence1.equals((Object)byteSequence2));
      assertNotNull(constantFieldref0);
      assertArrayEquals(new byte[] {(byte)123, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(4, byteSequence1.getIndex());
      assertEquals((byte)9, constantFieldref0.getTag());
      assertEquals(31488, constantFieldref0.getClassIndex());
      assertEquals(0, constantFieldref0.getNameAndTypeIndex());
      
      ConstantFieldref constantFieldref1 = new ConstantFieldref(constantFieldref0);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertFalse(byteSequence1.equals((Object)byteSequence2));
      assertTrue(constantFieldref1.equals((Object)constantFieldref0));
      assertNotNull(constantFieldref1);
      assertArrayEquals(new byte[] {(byte)123, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(4, byteSequence1.getIndex());
      assertEquals((byte)9, constantFieldref0.getTag());
      assertEquals(31488, constantFieldref0.getClassIndex());
      assertEquals(0, constantFieldref0.getNameAndTypeIndex());
      assertEquals((byte)9, constantFieldref1.getTag());
      assertEquals(0, constantFieldref1.getNameAndTypeIndex());
      assertEquals(31488, constantFieldref1.getClassIndex());
      
      byte[] byteArray1 = new byte[0];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      boolean boolean2 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertFalse(boolean2);
      assertNotSame(byteArray1, byteArray0);
      
      ByteSequence byteSequence3 = new ByteSequence(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteSequence3.equals((Object)byteSequence2));
      assertFalse(byteSequence3.equals((Object)byteSequence1));
      assertFalse(byteSequence3.equals((Object)byteSequence0));
      assertNotNull(byteSequence3);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(0, byteSequence3.getIndex());
      
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool(byteSequence3);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(1, constantPool0.getLength());
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)96;
      byteArray0[1] = (byte)96;
      byteArray0[2] = (byte)96;
      byteArray0[3] = (byte)96;
      byteArray0[5] = (byte)96;
      byte[] byteArray1 = new byte[8];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte)125;
      byteArray1[2] = (byte)125;
      byteArray1[2] = (byte)86;
      byteArray1[3] = (byte)5;
      byteArray1[5] = (byte)125;
      byteArray1[6] = (byte)30;
      byteArray1[7] = (byte)96;
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteSequence0);
      assertArrayEquals(new byte[] {(byte)125, (byte)0, (byte)86, (byte)5, (byte)0, (byte)125, (byte)30, (byte)96}, byteArray1);
      assertEquals(0, byteSequence0.getIndex());
      
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertNotNull(byteSequence1);
      assertArrayEquals(new byte[] {(byte)96, (byte)96, (byte)96, (byte)96, (byte)0, (byte)96}, byteArray0);
      assertEquals(0, byteSequence1.getIndex());
      
      int int0 = byteSequence1.skipBytes(104);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertArrayEquals(new byte[] {(byte)96, (byte)96, (byte)96, (byte)96, (byte)0, (byte)96}, byteArray0);
      assertEquals(6, byteSequence1.getIndex());
      assertEquals(6, int0);
      assertNotSame(byteSequence1, byteSequence0);
      assertNotSame(byteArray0, byteArray1);
      
      String string0 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertFalse(byteSequence0.equals((Object)byteSequence1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(string0);
      assertArrayEquals(new byte[] {(byte)125, (byte)0, (byte)86, (byte)5, (byte)0, (byte)125, (byte)30, (byte)96}, byteArray1);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals(1, constantPool0.getLength());
      assertEquals("lushr", string0);
      assertNotSame(byteSequence0, byteSequence1);
      assertNotSame(byteArray1, byteArray0);
      
      String string1 = Utility.classOrInterface(1185);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("class", string1);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      String string0 = Utility.signatureToString("FZaH&SdU,^&0\"?Vq-0t");
      assertNotNull(string0);
      assertEquals("float", string0);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)112;
      boolean boolean1 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new byte[] {(byte)112}, byteArray0);
      assertFalse(boolean1);
      
      String string1 = Constants.CONSTRUCTOR_NAME;
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("<init>", string1);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      byte[] byteArray1 = new byte[4];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte)112;
      byteArray1[3] = (byte)112;
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteSequence0);
      assertArrayEquals(new byte[] {(byte)112, (byte)0, (byte)0, (byte)112}, byteArray1);
      assertEquals(0, byteSequence0.getIndex());
      
      long long0 = byteSequence0.skip((byte)112);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)112, (byte)0, (byte)0, (byte)112}, byteArray1);
      assertEquals(4, byteSequence0.getIndex());
      assertEquals(4L, long0);
      assertNotSame(byteArray1, byteArray0);
      
      boolean boolean2 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertArrayEquals(new byte[] {(byte)112, (byte)0, (byte)0, (byte)112}, byteArray1);
      assertFalse(boolean2);
      assertNotSame(byteArray1, byteArray0);
      
      String string2 = Utility.classOrInterface((-815));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("class", string2);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 27, (int) (byte)112);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte)5;
      byteArray0[2] = (byte)95;
      String string0 = Utility.encode(byteArray0, false);
      assertNotNull(string0);
      assertArrayEquals(new byte[] {(byte)0, (byte)5, (byte)95}, byteArray0);
      assertEquals("$A$F_", string0);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      assertEquals(2, int0);
      
      byte[] byteArray0 = Utility.decode("xEG$>pZpVIb=", false);
      assertNotNull(byteArray0);
      
      String string0 = Utility.compactClassName("xEG$>pZpVIb=", false);
      assertNotNull(string0);
      assertEquals("xEG$>pZpVIb=", string0);
      
      String string1 = Utility.convertString("/r|$CcB");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("/r|$CcB", string1);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      try { 
        Utility.decode("&Mu$zISDwoK*i}T'H", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      try { 
        Utility.decode("(l+1,_$\"\"", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byte byte0 = (byte)98;
      byteArray0[1] = (byte)98;
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)98, (int) (byte)98);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-128);
      byteArray0[1] = (byte)39;
      byteArray0[2] = (byte) (-5);
      byteArray0[3] = (byte) (-59);
      byteArray0[4] = (byte)31;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertArrayEquals(new byte[] {(byte) (-128), (byte)39, (byte) (-5), (byte) (-59), (byte)31}, byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      
      Constant[] constantArray0 = new Constant[1];
      ConstantMethodType constantMethodType0 = new ConstantMethodType((byte)31);
      assertNotNull(constantMethodType0);
      assertEquals((byte)16, constantMethodType0.getTag());
      assertEquals(31, constantMethodType0.getDescriptorIndex());
      
      constantArray0[0] = (Constant) constantMethodType0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(1, constantPool0.getLength());
      
      String string0 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertNotNull(string0);
      assertArrayEquals(new byte[] {(byte) (-128), (byte)39, (byte) (-5), (byte) (-59), (byte)31}, byteArray0);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals(1, constantPool0.getLength());
      assertEquals("ior", string0);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      byte[] byteArray0 = null;
      String string0 = Utility.getSignature("getstatic");
      assertNotNull(string0);
      assertEquals("Lgetstatic;", string0);
      
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("A|.w0V\";W8yj");
      assertNotNull(mockFileOutputStream0);
      
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockFileOutputStream0);
      assertNotNull(bufferedOutputStream0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(bufferedOutputStream0);
      assertNotNull(mockPrintStream0);
      
      String string1 = Utility.signatureToString("JV;@3^9eM");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("long", string1);
      
      boolean boolean1 = Utility.isJavaIdentifierPart('n');
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      try { 
        Utility.typeOfSignature("w+G?#GWCAbe1~z}w");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: w+G?#GWCAbe1~z}w
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)72;
      byteArray0[2] = (byte)120;
      byteArray0[3] = (byte)0;
      String string0 = Constants.ILLEGAL_OPCODE;
      assertNotNull(string0);
      assertEquals("<illegal opcode>", string0);
      
      String string1 = "f2i";
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 54, 54);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-86);
      byteArray0[6] = (byte)35;
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)35, (int) (byte) (-86));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-24);
      byteArray0[1] = (byte)31;
      byteArray0[2] = (byte) (-59);
      byteArray0[1] = (byte)31;
      byteArray0[4] = (byte)31;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertArrayEquals(new byte[] {(byte) (-24), (byte)31, (byte) (-59), (byte)0, (byte)31}, byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      
      ConstantMethodType constantMethodType0 = new ConstantMethodType((byte)31);
      assertNotNull(constantMethodType0);
      assertEquals((byte)16, constantMethodType0.getTag());
      assertEquals(31, constantMethodType0.getDescriptorIndex());
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-87), 206, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    <illegal opcode>
         // 1:    lload_1
         // 2:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      boolean boolean2 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-59);
      byteArray0[1] = (byte) (-59);
      byteArray0[2] = (byte) (-59);
      byteArray0[3] = (byte) (-59);
      byteArray0[4] = (byte) (-59);
      byteArray0[5] = (byte) (-59);
      byteArray0[6] = (byte) (-59);
      byteArray0[7] = (byte)77;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 2, (int) (byte) (-59), false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      ConstantPool constantPool0 = null;
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-82);
      byteArray0[1] = (byte) (-68);
      byteArray0[2] = (byte) (-68);
      byteArray0[3] = (byte)92;
      byteArray0[4] = (byte) (-121);
      byteArray0[5] = (byte)92;
      byteArray0[6] = (byte) (-121);
      byteArray0[7] = (byte)92;
      byteArray0[8] = (byte) (-121);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 959, 79);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -68
         //
         verifyException("org.apache.bcel.Const", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)17;
      byteArray0[1] = (byte)17;
      byteArray0[2] = (byte)17;
      byteArray0[3] = (byte) (-75);
      int int0 = 2675;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)17, 2675);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-11);
      byteArray0[1] = (byte)16;
      byteArray0[2] = (byte)46;
      byteArray0[3] = (byte) (-43);
      byteArray0[4] = (byte)46;
      byteArray0[6] = (byte) (-31);
      byteArray0[7] = (byte) (-23);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)16, 14);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      int int0 = Utility.setBit((byte)11, (byte) (-78));
      assertEquals(262155, int0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)11;
      byteArray0[1] = (byte) (-81);
      byteArray0[2] = (byte) (-78);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 629, 262155);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      int int0 = Utility.setBit((byte)11, (byte) (-78));
      assertEquals(262155, int0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)29;
      byteArray0[1] = (byte) (-78);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 262155, (int) (byte) (-78));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      byte byte0 = ElementValue.PRIMITIVE_CHAR;
      assertEquals((byte)67, byte0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)67;
      byteArray0[1] = (byte)67;
      ConstantMethodType constantMethodType0 = new ConstantMethodType((byte)67);
      assertNotNull(constantMethodType0);
      assertEquals(67, constantMethodType0.getDescriptorIndex());
      assertEquals((byte)16, constantMethodType0.getTag());
      
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      ConstantPool constantPool1 = constantPool0.copy();
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertNotNull(constantPool1);
      assertEquals(0, constantPool0.getLength());
      assertEquals(0, constantPool1.getLength());
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      
      String string0 = constantPool0.toString();
      assertFalse(constantPool0.equals((Object)constantPool1));
      assertNotNull(string0);
      assertEquals(0, constantPool0.getLength());
      assertEquals("", string0);
      assertNotSame(constantPool0, constantPool1);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)67, 5165);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-11);
      byteArray0[1] = (byte)16;
      byteArray0[2] = (byte)46;
      byteArray0[3] = (byte) (-43);
      byteArray0[4] = (byte)84;
      byteArray0[6] = (byte) (-31);
      byteArray0[7] = (byte) (-23);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)16, 14);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-84);
      byteArray0[1] = (byte) (-84);
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte)2;
      byteArray0[4] = (byte) (-30);
      byteArray0[5] = (byte)2;
      byteArray0[6] = (byte)2;
      byteArray0[7] = (byte) (-34);
      byteArray0[8] = (byte) (-84);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertArrayEquals(new byte[] {(byte) (-84), (byte) (-84), (byte)2, (byte)2, (byte) (-30), (byte)2, (byte)2, (byte) (-34), (byte) (-84)}, byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      
      int int0 = byteSequence0.readInt();
      assertArrayEquals(new byte[] {(byte) (-84), (byte) (-84), (byte)2, (byte)2, (byte) (-30), (byte)2, (byte)2, (byte) (-34), (byte) (-84)}, byteArray0);
      assertEquals(4, byteSequence0.getIndex());
      assertEquals((-1398013438), int0);
      
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      // Undeclared exception!
      Utility.codeToString(byteArray0, constantPool0, (-1011), (int) (byte)2);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      String string0 = "FZaH&SdU,^&0\"?Vq-0t";
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "FZaH&SdU,^&0\"?Vq-0t");
      assertFalse(boolean0);
      
      String string1 = Utility.signatureToString("FZaH&SdU,^&0\"?Vq-0t");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("float", string1);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-91);
      byteArray0[1] = (byte) (-24);
      byteArray0[2] = (byte) (-24);
      byteArray0[3] = (byte) (-24);
      byteArray0[4] = (byte) (-24);
      byteArray0[5] = (byte) (-24);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertArrayEquals(new byte[] {(byte) (-91), (byte) (-24), (byte) (-24), (byte) (-24), (byte) (-24), (byte) (-24)}, byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      
      ConstantMethodType constantMethodType0 = new ConstantMethodType(91);
      assertNotNull(constantMethodType0);
      assertEquals((byte)16, constantMethodType0.getTag());
      assertEquals(91, constantMethodType0.getDescriptorIndex());
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 1759, (int) (byte) (-24), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-21);
      byteArray0[1] = (byte)78;
      byteArray0[6] = (byte) (-8);
      byteArray0[3] = (byte) (-44);
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte)83;
      byteArray0[6] = (byte)47;
      byteArray0[7] = (byte)26;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 53, 1348);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string0 = "St}ckMap(";
      String string1 = Utility.signatureToString("St}ckMap(", false);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("short", string1);
      
      ConstantLong constantLong0 = new ConstantLong(1L);
      assertNotNull(constantLong0);
      assertEquals(1L, constantLong0.getBytes());
      assertEquals((byte)5, constantLong0.getTag());
      
      constantLong0.setBytes((-1L));
      assertEquals((byte)5, constantLong0.getTag());
      assertEquals((-1L), constantLong0.getBytes());
      
      Constant[] constantArray0 = new Constant[2];
      constantArray0[0] = (Constant) constantLong0;
      constantArray0[1] = (Constant) constantLong0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(2, constantPool0.getLength());
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)47;
      ConstantPool constantPool1 = new ConstantPool(constantArray0);
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertNotNull(constantPool1);
      assertEquals(2, constantPool1.getLength());
      
      ConstantPool constantPool2 = constantPool1.copy();
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertFalse(constantPool2.equals((Object)constantPool0));
      assertFalse(constantPool2.equals((Object)constantPool1));
      assertNotNull(constantPool2);
      assertEquals(2, constantPool1.getLength());
      assertEquals(2, constantPool2.getLength());
      assertNotSame(constantPool1, constantPool0);
      assertNotSame(constantPool1, constantPool2);
      assertNotSame(constantPool2, constantPool0);
      assertNotSame(constantPool2, constantPool1);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool2, 124, 627);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      boolean boolean0 = true;
      boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)32;
      byteArray0[1] = (byte)78;
      byteArray0[2] = (byte)32;
      byteArray0[3] = (byte) (-16);
      byteArray0[4] = (byte) (-67);
      byteArray0[8] = (byte) (-16);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 176, (int) (byte)32);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      byte byte0 = Constants.T_OBJECT;
      assertEquals((byte)14, byte0);
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "*)8hh')deAw+hD");
      assertFalse(boolean0);
      
      boolean boolean1 = true;
      boolean boolean2 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
      
      String string0 = "dreturn";
      String string1 = Utility.fillup("*)8hh')deAw+hD", (byte)14, true, 'E');
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("*)8hh')deAw+hD", string1);
      
      String string2 = Utility.compactClassName("dreturn", "*)8hh')deAw+hD", true);
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("dreturn", string2);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      byte[] byteArray0 = new byte[1];
      byte byte1 = (byte)83;
      byteArray0[0] = (byte)83;
      String string3 = Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-58), (int) (byte)83);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertArrayEquals(new byte[] {(byte)83}, byteArray0);
      assertEquals(0, constantPool0.getLength());
      assertEquals("0:    aastore\n", string3);
      
      try { 
        Utility.methodSignatureArgumentTypes("dreturn");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: dreturn
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)35;
      byteArray0[2] = (byte)35;
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (-1272), 61, true);
      assertNotNull(string0);
      assertArrayEquals(new byte[] {(byte)35, (byte)0, (byte)35, (byte)0}, byteArray0);
      assertEquals("0:    fload_1\n1:    nop\n2:    fload_1\n3:    nop\n", string0);
      
      String string1 = Utility.convertString("0:    fload_1\n1:    nop\n2:    fload_1\n3:    nop\n");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("0:    fload_1\\n1:    nop\\n2:    fload_1\\n3:    nop\\n", string1);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      // Undeclared exception!
      try { 
        constantPool0.getConstant((int) (byte)35, (byte)35);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)14;
      byteArray0[1] = (byte)39;
      byteArray0[2] = (byte)14;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)39, (int) (byte)39);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-104);
      int int0 = (-441);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (-441), (int) (byte) (-104));
      assertNotNull(string0);
      assertArrayEquals(new byte[] {(byte) (-104)}, byteArray0);
      assertEquals("0:    dcmpg\n", string0);
      
      byte byte0 = ObjectStreamConstants.TC_RESET;
      assertEquals((byte)121, byte0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertArrayEquals(new byte[] {(byte) (-104)}, byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      
      String string1 = Constants.ILLEGAL_OPCODE;
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("<illegal opcode>", string1);
      
      try { 
        Utility.methodSignatureArgumentTypes("<illegal opcode>");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: <illegal opcode>
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)73;
      byte byte0 = (byte)105;
      byteArray0[1] = (byte)105;
      byteArray0[2] = (byte) (-56);
      ConstantPool constantPool0 = null;
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)73, (int) (byte)73);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte)59;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)59, 160);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)24;
      byteArray0[1] = (byte)24;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      byteArray0[3] = (byte) (-75);
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Zu$");
      assertFalse(boolean0);
      
      String string0 = Constants.ILLEGAL_TYPE;
      assertNotNull(string0);
      assertEquals("<illegal type>", string0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (-1000), (int) (byte) (-75));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      String string0 = Utility.getSignature("UEGi+%z'>+}]~g7S.xF(nT[,]");
      assertNotNull(string0);
      assertEquals("[LUEGi+%z'>+}]~g7S/xF(nT;", string0);
      
      int int0 = Utility.setBit(3604, 3604);
      assertEquals(1052180, int0);
      
      try { 
        Utility.typeOfSignature("+uv/\"(|K2ZB1dy#");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: uv/\"(|K2ZB1dy#
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)85;
      byteArray0[1] = (byte) (-99);
      byteArray0[5] = (byte)85;
      byteArray0[6] = (byte)85;
      byteArray0[7] = (byte)85;
      byteArray0[8] = (byte)85;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertArrayEquals(new byte[] {(byte)85, (byte) (-99), (byte)0, (byte)0, (byte)0, (byte)85, (byte)85, (byte)85, (byte)85}, byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertNotNull(string0);
      assertArrayEquals(new byte[] {(byte)85, (byte) (-99), (byte)0, (byte)0, (byte)0, (byte)85, (byte)85, (byte)85, (byte)85}, byteArray0);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals("castore", string0);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      String string0 = Utility.getSignature("UEGi+%z'>+}]~g7S.xF(nT[,]");
      assertNotNull(string0);
      assertEquals("[LUEGi+%z'>+}]~g7S/xF(nT;", string0);
      
      ConstantPool constantPool0 = null;
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)44;
      byteArray0[1] = (byte)44;
      byteArray0[2] = (byte)44;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 260, (int) (byte) (-70));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      try { 
        Utility.typeOfSignature("9[^di.@zk{");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 9[^di.@zk{
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)30;
      byteArray0[1] = (byte)30;
      byteArray0[3] = (byte)30;
      Constant[] constantArray0 = null;
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertArrayEquals(new byte[] {(byte)30, (byte)30, (byte)0, (byte)30, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertTrue(boolean0);
      
      ConstantLong constantLong0 = new ConstantLong((-1495L));
      assertNotNull(constantLong0);
      assertEquals((byte)5, constantLong0.getTag());
      assertEquals((-1495L), constantLong0.getBytes());
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)30, (int) (byte)0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-9);
      byteArray0[1] = (byte)89;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)89, 160);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)93;
      String string0 = Constants.CONSTRUCTOR_NAME;
      assertNotNull(string0);
      assertEquals("<init>", string0);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 47, (-1583));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-112);
      byteArray0[1] = (byte)71;
      byteArray0[2] = (byte)82;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertArrayEquals(new byte[] {(byte) (-112), (byte)71, (byte)82, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      
      int int0 = byteSequence0.read();
      assertArrayEquals(new byte[] {(byte) (-112), (byte)71, (byte)82, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals(144, int0);
      
      long long0 = byteSequence0.skip(0L);
      assertArrayEquals(new byte[] {(byte) (-112), (byte)71, (byte)82, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals(0L, long0);
      
      byteSequence0.mark((byte)82);
      assertArrayEquals(new byte[] {(byte) (-112), (byte)71, (byte)82, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(1, byteSequence0.getIndex());
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)71, (int) (byte)71);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      byte byte0 = Constants.CONSTANT_String;
      assertEquals((byte)8, byte0);
      
      byte byte1 = Utility.typeOfSignature("F");
      assertFalse(byte1 == byte0);
      assertEquals((byte)6, byte1);
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "\"");
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)46;
      byteArray0[1] = (byte) (-120);
      byteArray0[2] = (byte)8;
      byteArray0[3] = (byte) (-96);
      byteArray0[4] = (byte)6;
      byteArray0[5] = (byte)6;
      byteArray0[6] = (byte) (-96);
      byteArray0[7] = (byte) (-120);
      byteArray0[8] = (byte)8;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertArrayEquals(new byte[] {(byte)46, (byte) (-120), (byte)8, (byte) (-96), (byte)6, (byte)6, (byte) (-96), (byte) (-120), (byte)8}, byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      
      int int0 = byteSequence0.readInt();
      assertArrayEquals(new byte[] {(byte)46, (byte) (-120), (byte)8, (byte) (-96), (byte)6, (byte)6, (byte) (-96), (byte) (-120), (byte)8}, byteArray0);
      assertEquals(4, byteSequence0.getIndex());
      assertEquals(780667040, int0);
      
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertNotNull(byteSequence1);
      assertArrayEquals(new byte[] {(byte)46, (byte) (-120), (byte)8, (byte) (-96), (byte)6, (byte)6, (byte) (-96), (byte) (-120), (byte)8}, byteArray0);
      assertEquals(0, byteSequence1.getIndex());
      
      String string0 = Utility.codeToString(byteSequence1, (ConstantPool) null, false);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertNotNull(string0);
      assertArrayEquals(new byte[] {(byte)46, (byte) (-120), (byte)8, (byte) (-96), (byte)6, (byte)6, (byte) (-96), (byte) (-120), (byte)8}, byteArray0);
      assertEquals(1, byteSequence1.getIndex());
      assertEquals("iaload", string0);
      assertNotSame(byteSequence1, byteSequence0);
      
      String string1 = Utility.printArray((Object[]) null);
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      byte byte0 = Constants.T_OBJECT;
      assertEquals((byte)14, byte0);
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "*)8hh')deAw+hD");
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)52;
      byteArray0[1] = (byte)14;
      boolean boolean1 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new byte[] {(byte)52, (byte)14}, byteArray0);
      assertFalse(boolean1);
      
      String string0 = Constants.CONSTRUCTOR_NAME;
      assertNotNull(string0);
      assertEquals("<init>", string0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertArrayEquals(new byte[] {(byte)52, (byte)14}, byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      
      byteSequence0.reset();
      assertArrayEquals(new byte[] {(byte)52, (byte)14}, byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      
      boolean boolean2 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertArrayEquals(new byte[] {(byte)52, (byte)14}, byteArray0);
      assertFalse(boolean2);
      
      byte byte1 = byteSequence0.readByte();
      assertFalse(byte1 == byte0);
      assertArrayEquals(new byte[] {(byte)52, (byte)14}, byteArray0);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals((byte)52, byte1);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)52, 1022);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)38;
      byteArray0[1] = (byte)38;
      byteArray0[2] = (byte) (-116);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (-1225), 183, false);
      assertNotNull(string0);
      assertArrayEquals(new byte[] {(byte)38, (byte)38, (byte) (-116)}, byteArray0);
      assertEquals("0:    dload_0\n1:    dload_0\n2:    f2l\n", string0);
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte)98;
      byteArray0[2] = (byte)54;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertArrayEquals(new byte[] {(byte)0, (byte)98, (byte)54, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      
      long long0 = byteSequence0.skip(0L);
      assertArrayEquals(new byte[] {(byte)0, (byte)98, (byte)54, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(0L, long0);
      
      float float0 = byteSequence0.readFloat();
      assertArrayEquals(new byte[] {(byte)0, (byte)98, (byte)54, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(4, byteSequence0.getIndex());
      assertEquals(9.01925E-39F, float0, 0.01F);
      
      byteSequence0.reset();
      assertArrayEquals(new byte[] {(byte)0, (byte)98, (byte)54, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      
      byteSequence0.reset();
      assertArrayEquals(new byte[] {(byte)0, (byte)98, (byte)54, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      
      byteSequence0.mark(1543);
      assertArrayEquals(new byte[] {(byte)0, (byte)98, (byte)54, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 1543, 2358);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      int int0 = Utility.setBit((byte)11, (byte)57);
      assertEquals(33554443, int0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)29;
      byteArray0[1] = (byte)57;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 33554443, (int) (byte)57);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[5] = (byte) (-61);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      byte[] byteArray1 = new byte[1];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte) (-61);
      int int0 = 160;
      String string0 = Utility.codeToString(byteArray1, constantPool0, (-2196), 160);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(string0);
      assertArrayEquals(new byte[] {(byte) (-61)}, byteArray1);
      assertEquals(0, constantPool0.getLength());
      assertEquals("0:    monitorexit\n", string0);
      assertNotSame(byteArray1, byteArray0);
      
      int int1 = Utility.clearBit((byte) (-61), (-321));
      assertFalse(int1 == int0);
      assertEquals(2147483587, int1);
      
      try { 
        Utility.methodSignatureArgumentTypes("0:    monitorexit\n", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 0:    monitorexit
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      String string0 = Utility.fillup("V:#^A@V:mpB", 3161, true, 'u');
      assertNotNull(string0);
      
      String string1 = Utility.compactClassName("MZW)Z[h-", true);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("MZW)Z[h-", string1);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)4;
      byteArray0[1] = (byte) (-121);
      byteArray0[2] = (byte) (-60);
      byteArray0[3] = (byte)83;
      byteArray0[4] = (byte)100;
      byteArray0[5] = (byte) (-77);
      byteArray0[6] = (byte) (-76);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertArrayEquals(new byte[] {(byte)4, (byte) (-121), (byte) (-60), (byte)83, (byte)100, (byte) (-77), (byte) (-76)}, byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      
      Constant[] constantArray0 = new Constant[3];
      ConstantMethodType constantMethodType0 = new ConstantMethodType(byteSequence0);
      assertNotNull(constantMethodType0);
      assertArrayEquals(new byte[] {(byte)4, (byte) (-121), (byte) (-60), (byte)83, (byte)100, (byte) (-77), (byte) (-76)}, byteArray0);
      assertEquals(2, byteSequence0.getIndex());
      assertEquals(1159, constantMethodType0.getDescriptorIndex());
      assertEquals((byte)16, constantMethodType0.getTag());
      
      constantArray0[0] = (Constant) constantMethodType0;
      ConstantFloat constantFloat0 = new ConstantFloat((byte) (-60));
      assertNotNull(constantFloat0);
      assertEquals((-60.0F), constantFloat0.getBytes(), 0.01F);
      assertEquals((byte)4, constantFloat0.getTag());
      
      constantArray0[1] = (Constant) constantFloat0;
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("MZW)Z[h-");
      assertNotNull(constantUtf8_0);
      assertEquals((byte)1, constantUtf8_0.getTag());
      assertEquals("MZW)Z[h-", constantUtf8_0.getBytes());
      
      constantArray0[2] = (Constant) constantUtf8_0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(3, constantPool0.getLength());
      
      String string2 = Utility.codeToString(byteSequence0, constantPool0);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertArrayEquals(new byte[] {(byte)4, (byte) (-121), (byte) (-60), (byte)83, (byte)100, (byte) (-77), (byte) (-76)}, byteArray0);
      assertEquals(3, constantPool0.getLength());
      assertEquals(3, byteSequence0.getIndex());
      assertEquals("wide\t(wide)", string2);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      objectArray0[1] = object1;
      Object object2 = new Object();
      assertFalse(object2.equals((Object)object1));
      assertFalse(object2.equals((Object)object0));
      assertNotNull(object2);
      
      objectArray0[2] = object2;
      Object object3 = new Object();
      assertFalse(object3.equals((Object)object1));
      assertFalse(object3.equals((Object)object2));
      assertFalse(object3.equals((Object)object0));
      assertNotNull(object3);
      
      objectArray0[3] = object3;
      String string0 = Utility.printArray(objectArray0, false);
      assertNotNull(string0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)127;
      byteArray0[1] = (byte)111;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 686, (int) (byte)111);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string0 = Utility.compactClassName("\t\t<", "boolean", false);
      assertNotNull(string0);
      assertEquals("\t\t<", string0);
      
      ConstantLong constantLong0 = new ConstantLong(2014L);
      assertNotNull(constantLong0);
      assertEquals((byte)5, constantLong0.getTag());
      assertEquals(2014L, constantLong0.getBytes());
      
      ConstantLong constantLong1 = new ConstantLong((byte) (-58));
      assertFalse(constantLong1.equals((Object)constantLong0));
      assertNotNull(constantLong1);
      assertEquals((byte)5, constantLong1.getTag());
      assertEquals((-58L), constantLong1.getBytes());
      
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)75;
      byteArray0[1] = (byte) (-58);
      byteArray0[2] = (byte)103;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)48, (int) (byte)52);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      byte byte0 = (byte) (-86);
      byte byte1 = (byte)35;
      byte[] byteArray0 = new byte[2];
      byte byte2 = (byte) (-88);
      byteArray0[0] = (byte) (-88);
      byteArray0[1] = (byte)35;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 235, (int) (byte) (-86));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)18;
      byteArray0[1] = (byte)44;
      byteArray0[2] = (byte) (-7);
      byteArray0[3] = (byte) (-44);
      byteArray0[4] = (byte)44;
      byteArray0[5] = (byte)18;
      byteArray0[6] = (byte) (-29);
      byteArray0[7] = (byte)52;
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      String string0 = Utility.compactClassName("!Uu+Pv9[0'|ztj}{4D", false);
      assertNotNull(string0);
      assertEquals("!Uu+Pv9[0'|ztj}{4D", string0);
      
      try { 
        Utility.typeOfSignature("!Uu+Pv9[0'|ztj}{4D");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Uu+Pv9[0'|ztj}{4D
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      byte byte0 = Constants.T_SHORT;
      assertEquals((byte)9, byte0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-111);
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 512, 512);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      String string0 = Constants.CONSTRUCTOR_NAME;
      assertNotNull(string0);
      assertEquals("<init>", string0);
      
      String string1 = Utility.compactClassName("j rX;e4Cq^iMp$c", false);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("j rX;e4Cq^iMp$c", string1);
      
      try { 
        Utility.typeOfSignature("KvRUt");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: KvRUt
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      String string0 = "4PVWJ{'`!";
      try { 
        Utility.typeOfSignature("4PVWJ{'`!");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 4PVWJ{'`!
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      byte byte0 = (byte)35;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-115);
      byteArray0[1] = (byte)35;
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)35, 59);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      byte byte0 = Constants.ATTR_RUNTIMEVISIBLE_ANNOTATIONS;
      assertEquals((byte)12, byte0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[5];
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      byteArray0[1] = (byte)38;
      byteArray0[3] = (byte)38;
      boolean boolean2 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      byteArray0[4] = (byte)38;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)38, (int) (byte)38, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      byte byte0 = (byte) (-61);
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte)62;
      byteArray0[2] = (byte) (-55);
      byteArray0[3] = (byte)66;
      byteArray0[4] = (byte)66;
      byteArray0[5] = (byte) (-92);
      byteArray0[6] = (byte) (-55);
      byteArray0[7] = (byte) (-80);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 340, (int) (byte) (-92));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      ConstantPool constantPool0 = null;
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)63;
      byteArray0[1] = (byte)63;
      byteArray0[3] = (byte)39;
      byteArray0[4] = (byte)39;
      byteArray0[5] = (byte)39;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)35, 29, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-92);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-92);
      byteArray0[3] = (byte)61;
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte)32;
      byteArray0[6] = (byte)87;
      byteArray0[7] = (byte) (-25);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 303, (int) (byte) (-25));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "fzah&sdu,^&0\"?vq-0t");
      assertFalse(boolean0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "<illegal opcode>");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      short short0 = Utility.searchOpcode("0but3nk*l");
      assertEquals((short) (-1), short0);
      
      String string0 = "(_S =BeP`pF;Z4(";
      try { 
        Utility.methodSignatureArgumentTypes("(_S =BeP`pF;Z4(");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `_S =BeP`pF;Z4('
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("KMJ)HhR", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `HhR'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      byte[] byteArray0 = new byte[1];
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      byteArray0[0] = (byte) (-108);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertArrayEquals(new byte[] {(byte) (-108)}, byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-108), 5);
      assertNotNull(string0);
      assertArrayEquals(new byte[] {(byte) (-108)}, byteArray0);
      assertEquals("0:    lcmp\n", string0);
      
      String[] stringArray0 = Constants.ATTRIBUTE_NAMES;
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      String string0 = Utility.signatureToString("FZaH&SdU,^&0\"?Vq-0t");
      assertNotNull(string0);
      assertEquals("float", string0);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)115;
      boolean boolean1 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new byte[] {(byte)115}, byteArray0);
      assertFalse(boolean1);
      
      String string1 = Constants.CONSTRUCTOR_NAME;
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("<init>", string1);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      byte[] byteArray1 = new byte[4];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte)115;
      byteArray1[1] = (byte) (-57);
      byteArray1[3] = (byte)115;
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteSequence0);
      assertArrayEquals(new byte[] {(byte)115, (byte) (-57), (byte)0, (byte)115}, byteArray1);
      assertEquals(0, byteSequence0.getIndex());
      
      long long0 = byteSequence0.skip((byte)115);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)115, (byte) (-57), (byte)0, (byte)115}, byteArray1);
      assertEquals(4, byteSequence0.getIndex());
      assertEquals(4L, long0);
      assertNotSame(byteArray1, byteArray0);
      
      boolean boolean2 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertArrayEquals(new byte[] {(byte)115, (byte) (-57), (byte)0, (byte)115}, byteArray1);
      assertFalse(boolean2);
      assertNotSame(byteArray1, byteArray0);
      
      ConstantPool constantPool0 = null;
      String string2 = Utility.classOrInterface((-815));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("class", string2);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 27, (int) (byte)115);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      int int0 = Utility.setBit((byte)11, (byte) (-78));
      assertEquals(262155, int0);
      
      ConstantPool constantPool0 = null;
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)50;
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertArrayEquals(new byte[] {(byte)50, (byte)0, (byte)0}, byteArray0);
      assertFalse(boolean0);
      
      String string0 = "r";
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "r");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      byteArray0[1] = (byte) (-78);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)50, (int) (byte)11);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      
      String string0 = Constants.STATIC_INITIALIZER_NAME;
      assertNotNull(string0);
      assertEquals("<clinit>", string0);
      
      byte byte0 = (byte) (-34);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-34);
      byteArray0[0] = (byte)19;
      ConstantLong constantLong0 = new ConstantLong((-2154L));
      assertNotNull(constantLong0);
      assertEquals((-2154L), constantLong0.getBytes());
      assertEquals((byte)5, constantLong0.getTag());
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertArrayEquals(new byte[] {(byte)19, (byte)0, (byte)0}, byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      
      String string1 = Constants.STATIC_INITIALIZER_NAME;
      assertNotNull(string1);
      assertEquals("<clinit>", string1);
      
      int int0 = (-1272);
      ConstantPool constantPool0 = null;
      int int1 = 171;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 171, (-1272));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[3] = (byte)40;
      byteArray0[4] = (byte) (-114);
      String string0 = Constants.STATIC_INITIALIZER_NAME;
      assertNotNull(string0);
      assertEquals("<clinit>", string0);
      
      ConstantLong constantLong0 = new ConstantLong((byte)40);
      assertNotNull(constantLong0);
      assertEquals(40L, constantLong0.getBytes());
      assertEquals((byte)5, constantLong0.getTag());
      
      Constant[] constantArray0 = new Constant[1];
      constantArray0[0] = (Constant) constantLong0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(1, constantPool0.getLength());
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)40, (int) (byte)40);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      byte byte0 = Constants.CONSTANT_String;
      assertEquals((byte)8, byte0);
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      assertFalse(boolean0);
      
      boolean boolean1 = false;
      boolean boolean2 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      String string0 = Utility.compactClassName("\t\t<", "boolean", false);
      assertNotNull(string0);
      assertEquals("\t\t<", string0);
      
      ConstantLong constantLong0 = new ConstantLong(2014L);
      assertNotNull(constantLong0);
      assertEquals(2014L, constantLong0.getBytes());
      assertEquals((byte)5, constantLong0.getTag());
      
      ConstantLong constantLong1 = new ConstantLong(constantLong0);
      assertTrue(constantLong1.equals((Object)constantLong0));
      assertNotNull(constantLong1);
      assertEquals(2014L, constantLong0.getBytes());
      assertEquals((byte)5, constantLong0.getTag());
      assertEquals(2014L, constantLong1.getBytes());
      assertEquals((byte)5, constantLong1.getTag());
      
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)75;
      byteArray0[1] = (byte) (-69);
      byte byte1 = (byte)103;
      byteArray0[2] = (byte)103;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)48, (int) (byte)52);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-22);
      byteArray0[4] = (byte) (-43);
      byteArray0[2] = (byte)70;
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte)32;
      byteArray0[5] = (byte)69;
      byte byte0 = (byte)127;
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)70, (int) (byte) (-1));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-102);
      byteArray0[1] = (byte)18;
      byteArray0[2] = (byte) (-102);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)18, 472);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      Object[] objectArray0 = new Object[5];
      objectArray0[2] = (Object) byteArray0;
      objectArray0[4] = (Object) byteArray0;
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      byte[] byteArray1 = Utility.decode("Cy5 ;*kn,}$5", false);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)67, (byte)121, (byte)53, (byte)32, (byte)59, (byte)42, (byte)107, (byte)110, (byte)44, (byte)125}, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      String string0 = Constants.STATIC_INITIALIZER_NAME;
      assertNotNull(string0);
      assertEquals("<clinit>", string0);
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      byte byte0 = Constants.ATTR_RUNTIMEVISIBLE_ANNOTATIONS;
      assertEquals((byte)12, byte0);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      ConstantPool constantPool0 = null;
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)35;
      byteArray0[1] = (byte)49;
      byteArray0[2] = (byte)35;
      byteArray0[2] = (byte)12;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 3113, (int) (byte)0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)97;
      byteArray0[4] = (byte) (-61);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-61), 1160);
      assertNotNull(string0);
      assertArrayEquals(new byte[] {(byte)97, (byte)0, (byte)0, (byte)0, (byte) (-61), (byte)0, (byte)0}, byteArray0);
      assertEquals("0:    ladd\n1:    nop\n2:    nop\n3:    nop\n4:    monitorexit\n5:    nop\n6:    nop\n", string0);
      
      boolean boolean0 = false;
      String string1 = Utility.getSignature("0:    ladd\n1:    nop\n2:    nop\n3:    nop\n4:    monitorexit\n5:    nop\n6:    nop\n");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("L0:;", string1);
      
      boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      byte[] byteArray1 = Utility.decode("0:    ladd\n1:    nop\n2:    nop\n3:    nop\n4:    monitorexit\n5:    nop\n6:    nop\n", false);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, (ConstantPool) null, (int) (byte)97, 1053, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      byte[] byteArray0 = new byte[15];
      byteArray0[14] = (byte)62;
      byteArray0[2] = (byte)62;
      byteArray0[3] = (byte)58;
      byteArray0[4] = (byte)58;
      byteArray0[10] = (byte) (-92);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 514, (int) (byte)0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      byte byte0 = Constants.T_SHORT;
      assertEquals((byte)9, byte0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-111);
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      String string0 = Utility.compactClassName("boolean", "boolean", true);
      assertNotNull(string0);
      assertEquals("", string0);
      
      ConstantLong constantLong0 = new ConstantLong((byte) (-111));
      assertNotNull(constantLong0);
      assertEquals((-111L), constantLong0.getBytes());
      assertEquals((byte)5, constantLong0.getTag());
      
      ConstantLong constantLong1 = new ConstantLong((byte) (-111));
      assertTrue(constantLong1.equals((Object)constantLong0));
      assertNotNull(constantLong1);
      assertEquals((byte)5, constantLong1.getTag());
      assertEquals((-111L), constantLong1.getBytes());
      
      Constant[] constantArray0 = new Constant[6];
      constantArray0[0] = (Constant) constantLong1;
      constantArray0[1] = (Constant) constantLong1;
      constantArray0[2] = (Constant) constantLong1;
      constantLong1.setBytes(1L);
      assertFalse(constantLong1.equals((Object)constantLong0));
      assertEquals((byte)5, constantLong1.getTag());
      assertEquals(1L, constantLong1.getBytes());
      assertNotSame(constantLong1, constantLong0);
      
      String string1 = constantLong1.toString();
      assertFalse(constantLong1.equals((Object)constantLong0));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals((byte)5, constantLong1.getTag());
      assertEquals(1L, constantLong1.getBytes());
      assertEquals("CONSTANT_Long[5](bytes = 1)", string1);
      assertNotSame(constantLong1, constantLong0);
      
      constantArray0[3] = (Constant) constantLong1;
      boolean boolean1 = true;
      String string2 = Utility.printArray((Object[]) constantArray0, true);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("{CONSTANT_Long[5](bytes = 1), CONSTANT_Long[5](bytes = 1), CONSTANT_Long[5](bytes = 1), CONSTANT_Long[5](bytes = 1), null, null}", string2);
      
      byte[] byteArray1 = Utility.decode("Invalid signature: ", false);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(6, constantPool0.getLength());
      
      ConstantPool constantPool1 = constantPool0.copy();
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertNotNull(constantPool1);
      assertEquals(6, constantPool0.getLength());
      assertEquals(6, constantPool1.getLength());
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      
      String string3 = Utility.codeToString(byteArray1, constantPool1, (int) (byte)9, (-2218));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(constantPool0.equals((Object)constantPool1));
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals(6, constantPool0.getLength());
      assertEquals(6, constantPool1.getLength());
      assertEquals("9:    lmul\n10:   dsub\n11:   fdiv\n12:   ladd\n13:   ineg\n14:   lneg\n15:   frem\n16:   lsub\n17:   astore\t\t%32\n", string3);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      
      try { 
        Utility.methodSignatureReturnType("CONSTANT_Long[5](bytes = 1)", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)101;
      byteArray0[1] = (byte) (-126);
      byteArray0[2] = (byte)101;
      byteArray0[3] = (byte)101;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      byteArray0[4] = (byte)92;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertArrayEquals(new byte[] {(byte)101, (byte) (-126), (byte)101, (byte)101, (byte)92}, byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string0 = Constants.CONSTRUCTOR_NAME;
      assertNotNull(string0);
      assertEquals("<init>", string0);
      
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertArrayEquals(new byte[] {(byte)101, (byte) (-126), (byte)101, (byte)101, (byte)92}, byteArray0);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals("lsub", string1);
      
      String string2 = "Byte code error: ";
      String string3 = Utility.replace("<init>", "Byte code error: ", "i}j3u`2mPF?sr?hzxTf");
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals("<init>", string3);
      
      byte[] byteArray1 = Utility.decode("lsub", false);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)108, (byte)115, (byte)117, (byte)98}, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      try { 
        Utility.typeOfMethodSignature("invokevirtual");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: invokevirtual
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-78);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)90;
      byteArray0[3] = (byte)85;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byte[] byteArray1 = Utility.decode("ifnull", false);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)105, (byte)102, (byte)110, (byte)117, (byte)108, (byte)108}, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, (ConstantPool) null, 184, 73, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string0 = Utility.compactClassName("Signature: ", ".jar", true);
      assertNotNull(string0);
      assertEquals("Signature: ", string0);
      
      ConstantLong constantLong0 = new ConstantLong((byte)40);
      assertNotNull(constantLong0);
      assertEquals((byte)5, constantLong0.getTag());
      assertEquals(40L, constantLong0.getBytes());
      
      ConstantLong constantLong1 = new ConstantLong(1L);
      assertFalse(constantLong1.equals((Object)constantLong0));
      assertNotNull(constantLong1);
      assertEquals(1L, constantLong1.getBytes());
      assertEquals((byte)5, constantLong1.getTag());
      
      constantLong0.setBytes((-634L));
      assertFalse(constantLong0.equals((Object)constantLong1));
      assertEquals((byte)5, constantLong0.getTag());
      assertEquals((-634L), constantLong0.getBytes());
      assertNotSame(constantLong0, constantLong1);
      
      String string1 = constantLong0.toString();
      assertFalse(constantLong0.equals((Object)constantLong1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals((byte)5, constantLong0.getTag());
      assertEquals((-634L), constantLong0.getBytes());
      assertEquals("CONSTANT_Long[5](bytes = -634)", string1);
      assertNotSame(constantLong0, constantLong1);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) ".jar";
      objectArray0[1] = (Object) "Signature: ";
      String string2 = Utility.printArray(objectArray0, false);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals(".jar, Signature: ", string2);
      
      byte[] byteArray0 = Utility.decode(".jar", false);
      assertNotNull(byteArray0);
      assertArrayEquals(new byte[] {(byte)46, (byte)106, (byte)97, (byte)114}, byteArray0);
      
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      ConstantPool constantPool1 = constantPool0.copy();
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertNotNull(constantPool1);
      assertEquals(0, constantPool0.getLength());
      assertEquals(0, constantPool1.getLength());
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 45, (-2218));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      ConstantPool constantPool0 = null;
      byte byte0 = (byte) (-61);
      byte[] byteArray0 = new byte[7];
      byteArray0[4] = (byte) (-61);
      String string0 = Utility.classOrInterface((byte) (-61));
      assertNotNull(string0);
      assertEquals("interface", string0);
      
      String string1 = Utility.getSignature("interface");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("Linterface;", string1);
      
      byte[] byteArray1 = Utility.decode("interface", false);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)105, (byte)110, (byte)116, (byte)101, (byte)114, (byte)102, (byte)97, (byte)99, (byte)101}, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      int int0 = 1053;
      String string2 = Utility.codeToString(byteArray1, (ConstantPool) null, (int) (byte)0, 1053, true);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertArrayEquals(new byte[] {(byte)105, (byte)110, (byte)116, (byte)101, (byte)114, (byte)102, (byte)97, (byte)99, (byte)101}, byteArray1);
      assertEquals("0:    lmul\n1:    fdiv\n2:    ineg\n3:    lsub\n4:    frem\n5:    fsub\n6:    ladd\n7:    dadd\n8:    lsub\n", string2);
      assertNotSame(byteArray1, byteArray0);
      
      try { 
        Utility.methodSignatureArgumentTypes("interface");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: interface
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      byte byte0 = ObjectStreamConstants.TC_RESET;
      assertEquals((byte)121, byte0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      short short0 = Utility.searchOpcode("istore_2");
      assertEquals((short)61, short0);
      
      ConstantFloat constantFloat0 = new ConstantFloat(0.0F);
      assertNotNull(constantFloat0);
      assertEquals(0.0F, constantFloat0.getBytes(), 0.01F);
      assertEquals((byte)4, constantFloat0.getTag());
      
      Constant[] constantArray0 = new Constant[6];
      constantArray0[0] = (Constant) constantFloat0;
      constantArray0[1] = (Constant) constantFloat0;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)121;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 373, 57);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)85;
      byteArray0[1] = (byte) (-99);
      byteArray0[2] = (byte)53;
      byteArray0[5] = (byte)85;
      byteArray0[7] = (byte)85;
      byteArray0[8] = (byte)85;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertArrayEquals(new byte[] {(byte)85, (byte) (-99), (byte)53, (byte)0, (byte)0, (byte)85, (byte)0, (byte)85, (byte)85}, byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      
      boolean boolean0 = byteSequence0.readBoolean();
      assertArrayEquals(new byte[] {(byte)85, (byte) (-99), (byte)53, (byte)0, (byte)0, (byte)85, (byte)0, (byte)85, (byte)85}, byteArray0);
      assertEquals(1, byteSequence0.getIndex());
      assertTrue(boolean0);
      
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertNotNull(string0);
      assertArrayEquals(new byte[] {(byte)85, (byte) (-99), (byte)53, (byte)0, (byte)0, (byte)85, (byte)0, (byte)85, (byte)85}, byteArray0);
      assertEquals(4, byteSequence0.getIndex());
      assertEquals("ifgt\t\t#13569", string0);
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      ConstantPool constantPool0 = null;
      byte[] byteArray0 = new byte[18];
      byteArray0[2] = (byte) (-65);
      byteArray0[3] = (byte)68;
      byteArray0[4] = (byte)68;
      byteArray0[5] = (byte) (-113);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 1172, (int) (byte)0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      byte byte0 = (byte)69;
      ConstantPool constantPool0 = null;
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)56;
      byteArray0[1] = (byte)127;
      byteArray0[2] = (byte)32;
      byteArray0[3] = (byte)127;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)56, 4810);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string0 = Constants.ILLEGAL_OPCODE;
      assertNotNull(string0);
      assertEquals("<illegal opcode>", string0);
      
      boolean boolean2 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      ConstantLong constantLong0 = new ConstantLong((-1L));
      assertNotNull(constantLong0);
      assertEquals((-1L), constantLong0.getBytes());
      assertEquals((byte)5, constantLong0.getTag());
      
      ConstantLong constantLong1 = new ConstantLong((-1L));
      assertTrue(constantLong1.equals((Object)constantLong0));
      assertNotNull(constantLong1);
      assertEquals((-1L), constantLong1.getBytes());
      assertEquals((byte)5, constantLong1.getTag());
      
      String string1 = constantLong1.toString();
      assertTrue(constantLong1.equals((Object)constantLong0));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals((-1L), constantLong1.getBytes());
      assertEquals((byte)5, constantLong1.getTag());
      assertEquals("CONSTANT_Long[5](bytes = -1)", string1);
      assertNotSame(constantLong1, constantLong0);
      
      constantLong0.setBytes((-1L));
      assertTrue(constantLong0.equals((Object)constantLong1));
      assertEquals((-1L), constantLong0.getBytes());
      assertEquals((byte)5, constantLong0.getTag());
      assertNotSame(constantLong0, constantLong1);
      
      Constant[] constantArray1 = null;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(1, constantPool0.getLength());
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-77);
      byteArray0[1] = (byte) (-38);
      byteArray0[2] = (byte) (-72);
      byteArray0[3] = (byte)61;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)61, (-2385));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 55992. Constant pool size is: 1
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "jav?.lanN.0:");
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[5];
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      byteArray0[1] = (byte)0;
      byteArray0[4] = (byte) (-96);
      byteArray0[3] = (byte) (-76);
      byteArray0[4] = (byte) (-120);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte) (-76), (byte) (-120)}, byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      
      int int0 = byteSequence0.readInt();
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte) (-76), (byte) (-120)}, byteArray0);
      assertEquals(4, byteSequence0.getIndex());
      assertEquals(180, int0);
      
      ConstantPool constantPool0 = null;
      int int1 = byteSequence0.available();
      assertFalse(int1 == int0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte) (-76), (byte) (-120)}, byteArray0);
      assertEquals(4, byteSequence0.getIndex());
      assertEquals(1, int1);
      
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertNotNull(string0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte) (-76), (byte) (-120)}, byteArray0);
      assertEquals(5, byteSequence0.getIndex());
      assertEquals("l2i", string0);
      
      try { 
        byteSequence0.readUTF();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "BootstrapMethod(");
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      boolean boolean2 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "(`,Bk)>/cSie;?28H");
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
      
      try { 
        Utility.typeOfMethodSignature("(`,Bk)>/cSie;?28H");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: >/cSie;?28H
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      String string0 = Utility.accessToString(177);
      assertNotNull(string0);
      assertEquals("public final synchronized transient", string0);
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "java.lang.0:");
      assertFalse(boolean0);
      
      ConstantFieldref constantFieldref0 = new ConstantFieldref(99, 99);
      assertNotNull(constantFieldref0);
      assertEquals(99, constantFieldref0.getNameAndTypeIndex());
      assertEquals(99, constantFieldref0.getClassIndex());
      assertEquals((byte)9, constantFieldref0.getTag());
      
      String string1 = Utility.convertString("public final synchronized transient");
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("public final synchronized transient", string1);
      
      int int0 = Utility.clearBit(2158, 1147);
      assertEquals(2158, int0);
      
      try { 
        Utility.typeOfSignature("#?OlYR7{@ ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: #?OlYR7{@ 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-120);
      byteArray0[1] = (byte) (-96);
      byteArray0[2] = (byte) (-120);
      byteArray0[3] = (byte) (-120);
      byteArray0[4] = (byte) (-120);
      byteArray0[6] = (byte) (-96);
      byteArray0[7] = (byte) (-120);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertArrayEquals(new byte[] {(byte) (-120), (byte) (-96), (byte) (-120), (byte) (-120), (byte) (-120), (byte)0, (byte) (-96), (byte) (-120)}, byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      
      int int0 = Pattern.COMMENTS;
      assertEquals(4, int0);
      
      int int1 = byteSequence0.readUnsignedShort();
      assertFalse(int1 == int0);
      assertArrayEquals(new byte[] {(byte) (-120), (byte) (-96), (byte) (-120), (byte) (-120), (byte) (-120), (byte)0, (byte) (-96), (byte) (-120)}, byteArray0);
      assertEquals(2, byteSequence0.getIndex());
      assertEquals(34976, int1);
      
      byteSequence0.close();
      assertArrayEquals(new byte[] {(byte) (-120), (byte) (-96), (byte) (-120), (byte) (-120), (byte) (-120), (byte)0, (byte) (-96), (byte) (-120)}, byteArray0);
      assertEquals(2, byteSequence0.getIndex());
      
      byteSequence0.reset();
      assertArrayEquals(new byte[] {(byte) (-120), (byte) (-96), (byte) (-120), (byte) (-120), (byte) (-120), (byte)0, (byte) (-96), (byte) (-120)}, byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      
      boolean boolean2 = byteSequence0.readBoolean();
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertArrayEquals(new byte[] {(byte) (-120), (byte) (-96), (byte) (-120), (byte) (-120), (byte) (-120), (byte)0, (byte) (-96), (byte) (-120)}, byteArray0);
      assertEquals(1, byteSequence0.getIndex());
      assertTrue(boolean2);
      
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertNotNull(string0);
      assertArrayEquals(new byte[] {(byte) (-120), (byte) (-96), (byte) (-120), (byte) (-120), (byte) (-120), (byte)0, (byte) (-96), (byte) (-120)}, byteArray0);
      assertEquals(4, byteSequence0.getIndex());
      assertEquals("if_icmpne\t\t#-30583", string0);
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "java.lang.0:");
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[5];
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      byteArray0[0] = (byte)27;
      byteArray0[1] = (byte)27;
      byteArray0[2] = (byte) (-96);
      byteArray0[3] = (byte) (-76);
      byteArray0[4] = (byte) (-120);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertArrayEquals(new byte[] {(byte)27, (byte)27, (byte) (-96), (byte) (-76), (byte) (-120)}, byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      
      byte byte0 = byteSequence0.readByte();
      assertArrayEquals(new byte[] {(byte)27, (byte)27, (byte) (-96), (byte) (-76), (byte) (-120)}, byteArray0);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals((byte)27, byte0);
      
      int int0 = byteSequence0.readInt();
      assertArrayEquals(new byte[] {(byte)27, (byte)27, (byte) (-96), (byte) (-76), (byte) (-120)}, byteArray0);
      assertEquals(5, byteSequence0.getIndex());
      assertEquals(463516808, int0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)27, 1481);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)65;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertArrayEquals(new byte[] {(byte)65, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 83, 83);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byte byte0 = (byte)118;
      byteArray0[0] = (byte)118;
      Constant[] constantArray0 = null;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      int int0 = 90;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 90, (int) (byte)118);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)106;
      Constant[] constantArray0 = null;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      int int0 = 90;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 90, (int) (byte)106);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      byte byte0 = Constants.CONSTANT_String;
      assertEquals((byte)8, byte0);
      
      byte byte1 = ElementValue.ANNOTATION;
      assertFalse(byte1 == byte0);
      assertEquals((byte)64, byte1);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      byte[] byteArray0 = new byte[7];
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("F");
      assertNotNull(constantUtf8_0);
      assertEquals("F", constantUtf8_0.getBytes());
      assertEquals((byte)1, constantUtf8_0.getTag());
      
      byteArray0[1] = (byte)64;
      byteArray0[2] = (byte)64;
      byteArray0[3] = (byte)8;
      byteArray0[4] = (byte) (-65);
      byteArray0[5] = (byte)64;
      byteArray0[6] = (byte)73;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 93, 71);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)39;
      byteArray0[1] = (byte)39;
      byteArray0[2] = (byte)39;
      byteArray0[4] = (byte) (-72);
      byteArray0[0] = (byte)39;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)39, 69);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-99);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      byteArray0[1] = (byte)107;
      byteArray0[3] = (byte)107;
      byteArray0[4] = (byte) (-99);
      byteArray0[5] = (byte) (-99);
      byteArray0[6] = (byte) (-99);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 190, (int) (byte) (-99));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-110);
      byteArray0[4] = (byte) (-110);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-110), (int) (byte) (-110));
      assertNotNull(string0);
      assertArrayEquals(new byte[] {(byte) (-110), (byte)0, (byte)0, (byte)0, (byte) (-110), (byte)0, (byte)0}, byteArray0);
      assertEquals("0:    i2c\n1:    nop\n2:    nop\n3:    nop\n4:    i2c\n5:    nop\n6:    nop\n", string0);
      
      String string1 = Constants.ILLEGAL_TYPE;
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("<illegal type>", string1);
      
      try { 
        Utility.methodSignatureReturnType("0:    i2c\n1:    nop\n2:    nop\n3:    nop\n4:    i2c\n5:    nop\n6:    nop\n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `0:    i2c
         // 1:    nop
         // 2:    nop
         // 3:    nop
         // 4:    i2c
         // 5:    nop
         // 6:    nop
         // '
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      int int0 = 751;
      try { 
        Utility.methodSignatureReturnType("[]", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `]'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      boolean boolean3 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3);
      
      String string0 = Utility.methodSignatureReturnType("StackMap(", true);
      assertNotNull(string0);
      assertEquals("short", string0);
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      byte byte0 = Constants.ATTR_RUNTIMEVISIBLE_ANNOTATIONS;
      assertEquals((byte)12, byte0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-59);
      byteArray0[1] = (byte)12;
      byteArray0[2] = (byte)12;
      boolean boolean3 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "tableswitch");
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3);
      
      byte byte1 = Constants.T_ADDRESS;
      assertFalse(byte1 == byte0);
      assertEquals((byte)16, byte1);
      
      try { 
        Utility.typeOfSignature("5w*aO\"1|{F6MWY!k");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 5w*aO\"1|{F6MWY!k
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      boolean boolean1 = Utility.isJavaIdentifierPart(' ');
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ";");
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      byte byte0 = Constants.T_ADDRESS;
      assertEquals((byte)16, byte0);
      
      String string0 = "=#>bVpd4G";
      try { 
        Utility.typeOfSignature("=#>bVpd4G");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: =#>bVpd4G
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)96;
      byteArray0[1] = (byte)96;
      byteArray0[2] = (byte)96;
      byteArray0[3] = (byte)96;
      byteArray0[5] = (byte)96;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)96, (int) (byte)125);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      byte byte0 = Constants.ATTR_RUNTIMEVISIBLE_ANNOTATIONS;
      assertEquals((byte)12, byte0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)86;
      byteArray0[1] = (byte) (-126);
      byteArray0[2] = (byte)12;
      byteArray0[3] = (byte)12;
      byteArray0[4] = (byte)77;
      byteArray0[5] = (byte) (-126);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertArrayEquals(new byte[] {(byte)86, (byte) (-126), (byte)12, (byte)12, (byte)77, (byte) (-126)}, byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 247, (int) (byte)12);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      ConstantPool constantPool0 = null;
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)75;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)113;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)113;
      byteArray0[5] = (byte) (-1);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)75, 0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean2 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)60;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)41, (int) (byte) (-108));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)24;
      byte[] byteArray1 = new byte[9];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte) (-126);
      byteArray1[1] = (byte) (-126);
      byteArray1[2] = (byte)24;
      byteArray1[3] = (byte)24;
      byteArray1[4] = (byte)24;
      byteArray1[4] = (byte)24;
      byteArray1[6] = (byte) (-126);
      byteArray1[8] = (byte) (-126);
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteSequence0);
      assertArrayEquals(new byte[] {(byte) (-126), (byte) (-126), (byte)24, (byte)24, (byte)24, (byte)0, (byte) (-126), (byte)0, (byte) (-126)}, byteArray1);
      assertEquals(0, byteSequence0.getIndex());
      
      ByteSequence byteSequence1 = new ByteSequence(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertNotNull(byteSequence1);
      assertArrayEquals(new byte[] {(byte) (-126), (byte) (-126), (byte)24, (byte)24, (byte)24, (byte)0, (byte) (-126), (byte)0, (byte) (-126)}, byteArray1);
      assertEquals(0, byteSequence1.getIndex());
      
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteSequence0.equals((Object)byteSequence1));
      assertNotNull(string0);
      assertArrayEquals(new byte[] {(byte) (-126), (byte) (-126), (byte)24, (byte)24, (byte)24, (byte)0, (byte) (-126), (byte)0, (byte) (-126)}, byteArray1);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals("ixor", string0);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteSequence0, byteSequence1);
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      String string0 = ",&oN3Q0R)Lau<";
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ",&oN3Q0R)Lau<");
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      try { 
        Utility.methodSignatureReturnType(",&oN3Q0R)Lau<", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: Lau<
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-113);
      byteArray0[1] = (byte)53;
      byteArray0[2] = (byte)53;
      byteArray0[3] = (byte)53;
      byteArray0[4] = (byte)53;
      byteArray0[5] = (byte)53;
      byteArray0[6] = (byte)53;
      byteArray0[7] = (byte)53;
      byteArray0[8] = (byte)53;
      byte[] byteArray1 = new byte[6];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte)53;
      byteArray1[2] = (byte)18;
      byteArray1[3] = (byte) (-113);
      byteArray1[4] = (byte)53;
      byteArray1[5] = (byte) (-113);
      boolean boolean1 = Utility.equals(byteArray0, byteArray1);
      assertTrue(boolean1 == boolean0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte) (-113), (byte)53, (byte)53, (byte)53, (byte)53, (byte)53, (byte)53, (byte)53, (byte)53}, byteArray0);
      assertArrayEquals(new byte[] {(byte)53, (byte)0, (byte)18, (byte) (-113), (byte)53, (byte) (-113)}, byteArray1);
      assertFalse(boolean1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      ConstantLong constantLong0 = new ConstantLong((byte)0);
      assertNotNull(constantLong0);
      assertEquals(0L, constantLong0.getBytes());
      assertEquals((byte)5, constantLong0.getTag());
      
      byte[] byteArray2 = new byte[3];
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      
      byteArray2[0] = (byte) (-106);
      byteArray2[1] = (byte)53;
      byteArray2[2] = (byte)53;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray2, (ConstantPool) null, (int) (byte)53, (-2372));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      String string0 = Constants.ILLEGAL_OPCODE;
      assertNotNull(string0);
      assertEquals("<illegal opcode>", string0);
      
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "access flags\t\t");
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-89);
      byteArray0[0] = (byte) (-89);
      byteArray0[2] = (byte) (-89);
      byteArray0[3] = (byte) (-86);
      byteArray0[4] = (byte) (-90);
      byteArray0[5] = (byte) (-86);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertArrayEquals(new byte[] {(byte) (-89), (byte)0, (byte) (-89), (byte) (-86), (byte) (-90), (byte) (-86)}, byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      
      int int0 = Pattern.CANON_EQ;
      assertEquals(128, int0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-89), (int) (byte) (-89));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    goto\t\t#167
         // 3:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)42;
      byteArray0[2] = (byte) (-78);
      byteArray0[3] = (byte) (-78);
      byteArray0[4] = (byte) (-78);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 166, 1662);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      int int0 = Utility.setBit(106, 106);
      assertEquals(1130, int0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-61);
      byteArray0[1] = (byte)41;
      byteArray0[2] = (byte)88;
      byteArray0[3] = (byte) (-13);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertArrayEquals(new byte[] {(byte) (-61), (byte)41, (byte)88, (byte) (-13)}, byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertNotNull(byteSequence1);
      assertArrayEquals(new byte[] {(byte) (-61), (byte)41, (byte)88, (byte) (-13)}, byteArray0);
      assertEquals(0, byteSequence1.getIndex());
      
      int int1 = byteSequence1.readInt();
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertFalse(int1 == int0);
      assertArrayEquals(new byte[] {(byte) (-61), (byte)41, (byte)88, (byte) (-13)}, byteArray0);
      assertEquals(4, byteSequence1.getIndex());
      assertEquals((-1020700429), int1);
      assertNotSame(byteSequence1, byteSequence0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 512, (-625));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte)0;
      ConstantDouble constantDouble0 = new ConstantDouble((byte)74);
      assertNotNull(constantDouble0);
      assertEquals((byte)6, constantDouble0.getTag());
      assertEquals(74.0, constantDouble0.getBytes(), 0.01);
      
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      byte[] byteArray1 = new byte[7];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[1] = (byte) (-124);
      byteArray1[3] = (byte)74;
      byteArray1[5] = (byte)36;
      String string0 = Constants.STATIC_INITIALIZER_NAME;
      assertNotNull(string0);
      assertEquals("<clinit>", string0);
      
      byteArray1[6] = (byte) (-70);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, constantPool0, (int) (byte)74, (-1272));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      String string0 = "PakD+?g";
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "PakD+?g");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-101);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertArrayEquals(new byte[] {(byte) (-101), (byte)0}, byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertNotNull(byteSequence1);
      assertArrayEquals(new byte[] {(byte) (-101), (byte)0}, byteArray0);
      assertEquals(0, byteSequence1.getIndex());
      
      byteSequence1.close();
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertArrayEquals(new byte[] {(byte) (-101), (byte)0}, byteArray0);
      assertEquals(0, byteSequence1.getIndex());
      assertNotSame(byteSequence1, byteSequence0);
      
      String string1 = Utility.encode(byteArray0, false);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertArrayEquals(new byte[] {(byte) (-101), (byte)0}, byteArray0);
      assertEquals("$9b$A", string1);
      
      boolean boolean2 = Utility.isJavaIdentifierPart('(');
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      String string2 = Utility.getSignature("Invalid method signature: ");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("LInvalid;", string2);
      
      try { 
        Utility.codeToString(byteSequence1, (ConstantPool) null, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      String string0 = Constants.STATIC_INITIALIZER_NAME;
      assertNotNull(string0);
      assertEquals("<clinit>", string0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-34);
      int int0 = ObjectStreamConstants.baseWireHandle;
      assertEquals(8257536, int0);
      
      boolean boolean3 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "<illegal");
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3);
      
      String[] stringArray0 = new String[0];
      String string1 = Utility.methodTypeToSignature("impdep1", stringArray0);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("()Limpdep1;", string1);
      
      String[] stringArray1 = Utility.methodSignatureArgumentTypes("()Limpdep1;", true);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertArrayEquals(new byte[] {(byte) (-34), (byte)0, (byte)0}, byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      
      byte[] byteArray1 = new byte[5];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte)19;
      byteArray1[1] = (byte)19;
      byteArray1[2] = (byte)19;
      byteArray1[3] = (byte)19;
      byteArray1[4] = (byte) (-34);
      ByteSequence byteSequence1 = new ByteSequence(byteArray1);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteSequence1);
      assertArrayEquals(new byte[] {(byte)19, (byte)19, (byte)19, (byte)19, (byte) (-34)}, byteArray1);
      assertEquals(0, byteSequence1.getIndex());
      
      byteSequence1.close();
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)19, (byte)19, (byte)19, (byte)19, (byte) (-34)}, byteArray1);
      assertEquals(0, byteSequence1.getIndex());
      assertNotSame(byteSequence1, byteSequence0);
      assertNotSame(byteArray1, byteArray0);
      
      String string2 = Utility.classOrInterface(731);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("interface", string2);
      
      String string3 = Utility.compactClassName("_%;.D$Td", false);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals("_%;.D$Td", string3);
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)85;
      byteArray0[1] = (byte) (-99);
      byteArray0[2] = (byte)53;
      byteArray0[5] = (byte)85;
      byteArray0[6] = (byte)79;
      byteArray0[7] = (byte)53;
      byteArray0[8] = (byte)85;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertArrayEquals(new byte[] {(byte)85, (byte) (-99), (byte)53, (byte)0, (byte)0, (byte)85, (byte)79, (byte)53, (byte)85}, byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      
      String[] stringArray0 = Constants.ACCESS_NAMES;
      assertNotNull(stringArray0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 154, (int) (byte)85, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Constant[] constantArray0 = null;
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte)8;
      byteArray0[1] = (byte)34;
      byteArray0[2] = (byte)29;
      byteArray0[3] = (byte) (-47);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertArrayEquals(new byte[] {(byte)0, (byte)34, (byte)29, (byte) (-47)}, byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)8, 176);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-73);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      ConstantDouble constantDouble0 = new ConstantDouble(2650.829607587054);
      assertNotNull(constantDouble0);
      assertEquals((byte)6, constantDouble0.getTag());
      assertEquals(2650.829607587054, constantDouble0.getBytes(), 0.01);
      
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertNotNull(constantPool1);
      assertEquals(0, constantPool1.getLength());
      
      String string0 = Constants.STATIC_INITIALIZER_NAME;
      assertNotNull(string0);
      assertEquals("<clinit>", string0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, (int) (byte) (-70), 93);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      byte byte0 = (byte) (-125);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-125);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      ConstantPool constantPool1 = constantPool0.copy();
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertNotNull(constantPool1);
      assertEquals(0, constantPool0.getLength());
      assertEquals(0, constantPool1.getLength());
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, 179, (-4424));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertFalse(boolean0);
      
      Object[] objectArray0 = new Object[3];
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-124);
      byteArray0[1] = (byte)37;
      byteArray0[2] = (byte)87;
      byteArray0[3] = (byte)55;
      byte byte0 = (byte)125;
      byteArray0[4] = (byte)125;
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)87, (int) (byte)125);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)97;
      byteArray0[1] = (byte)6;
      byteArray0[2] = (byte)93;
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      byteArray0[3] = (byte)55;
      String string0 = Utility.encode(byteArray0, true);
      assertNotNull(string0);
      assertArrayEquals(new byte[] {(byte)97, (byte)6, (byte)93, (byte)55}, byteArray0);
      assertEquals("$l$8b$I$A$A$A$A$A$A$A", string0);
      
      boolean boolean1 = Utility.equals(byteArray0, byteArray0);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new byte[] {(byte)97, (byte)6, (byte)93, (byte)55}, byteArray0);
      assertTrue(boolean1);
      
      String string1 = Utility.toHexString(byteArray0);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertArrayEquals(new byte[] {(byte)97, (byte)6, (byte)93, (byte)55}, byteArray0);
      assertEquals("61 06 5d 37", string1);
      
      try { 
        Utility.typeOfSignature("61 06 5d 37");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 61 06 5d 37
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      String string0 = Utility.accessToString(177);
      assertNotNull(string0);
      assertEquals("public final synchronized transient", string0);
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "java.lang.0:");
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[13];
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      byteArray0[0] = (byte)22;
      byteArray0[1] = (byte)65;
      byteArray0[2] = (byte) (-96);
      byteArray0[9] = (byte) (-104);
      byteArray0[1] = (byte) (-125);
      boolean boolean2 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(2, byteSequence0.getIndex());
      assertEquals("lload\t\t%131", string1);
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(boolean0);
      
      Object[] objectArray0 = new Object[9];
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      objectArray0[7] = (Object) null;
      boolean boolean1 = false;
      byte[] byteArray1 = Utility.decode("NbRG*`^bBSh& (?M9", false);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, (ConstantPool) null, 1053, 161, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-97);
      byteArray0[1] = (byte) (-97);
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte)2;
      byteArray0[4] = (byte) (-30);
      byteArray0[5] = (byte)2;
      byteArray0[6] = (byte)2;
      byteArray0[7] = (byte) (-34);
      byteArray0[8] = (byte) (-97);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertArrayEquals(new byte[] {(byte) (-97), (byte) (-97), (byte)2, (byte)2, (byte) (-30), (byte)2, (byte)2, (byte) (-34), (byte) (-97)}, byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      int int0 = (-995);
      // Undeclared exception!
      Utility.codeToString(byteArray0, constantPool0, (-995), (int) (byte)2);
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)39;
      byte byte0 = (byte)39;
      byteArray0[1] = (byte)39;
      byteArray0[2] = (byte)20;
      byteArray0[3] = (byte) (-102);
      byteArray0[4] = (byte) (-72);
      byteArray0[5] = (byte)33;
      byteArray0[6] = (byte)121;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertArrayEquals(new byte[] {(byte)39, (byte)39, (byte)20, (byte) (-102), (byte) (-72), (byte)33, (byte)121}, byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      
      byteSequence0.close();
      assertArrayEquals(new byte[] {(byte)39, (byte)39, (byte)20, (byte) (-102), (byte) (-72), (byte)33, (byte)121}, byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      
      String string0 = Utility.getSignature("3ppsU9^^@+?<");
      assertNotNull(string0);
      assertEquals("L3ppsU9^^@+?<;", string0);
      
      int int0 = byteSequence0.readUnsignedShort();
      assertArrayEquals(new byte[] {(byte)39, (byte)39, (byte)20, (byte) (-102), (byte) (-72), (byte)33, (byte)121}, byteArray0);
      assertEquals(2, byteSequence0.getIndex());
      assertEquals(10023, int0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, constantPool0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      
      ConstantPool constantPool0 = null;
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (-474), 64);
      assertNotNull(string0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals("0:    nop\n1:    nop\n2:    nop\n3:    nop\n4:    nop\n5:    nop\n6:    nop\n7:    nop\n8:    nop\n", string0);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) null;
      String string1 = Utility.printArray(objectArray0, false, true);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("null, null", string1);
      
      boolean boolean0 = false;
      try { 
        Utility.methodSignatureReturnType("X8SXMo", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `X8SXMo'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      byte byte0 = Constants.T_SHORT;
      assertEquals((byte)9, byte0);
      
      String string0 = Utility.compactClassName("boolean", "boolean", true);
      assertNotNull(string0);
      assertEquals("", string0);
      
      ConstantLong constantLong0 = new ConstantLong((byte) (-104));
      assertNotNull(constantLong0);
      assertEquals((-104L), constantLong0.getBytes());
      assertEquals((byte)5, constantLong0.getTag());
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)90;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertArrayEquals(new byte[] {(byte)90, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      
      short short0 = Constants.ACC_PUBLIC;
      assertEquals((short)1, short0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 99, 32);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte) (-99);
      byteArray0[2] = (byte)53;
      byteArray0[6] = (byte)79;
      byteArray0[7] = (byte)53;
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      assertFalse(boolean0);
      
      String[] stringArray0 = new String[9];
      stringArray0[0] = "L_OsBMz 'SA";
      stringArray0[1] = "L_OsBMz 'SA";
      stringArray0[2] = "L_OsBMz 'SA";
      stringArray0[3] = "L_OsBMz 'SA";
      stringArray0[4] = "L_OsBMz 'SA";
      stringArray0[5] = "if_icmplt";
      stringArray0[6] = "L_OsBMz 'SA";
      stringArray0[7] = "L_OsBMz 'SA";
      stringArray0[8] = "L_OsBMz 'SA";
      String string0 = Utility.methodTypeToSignature("L_OsBMz 'SA", stringArray0);
      assertNotNull(string0);
      assertEquals("(LL_OsBMz;LL_OsBMz;LL_OsBMz;LL_OsBMz;LL_OsBMz;Lif_icmplt;LL_OsBMz;LL_OsBMz;LL_OsBMz;)LL_OsBMz;", string0);
      
      byte[] byteArray1 = new byte[1];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte)85;
      byte[] byteArray2 = Utility.decode("[<-?Y", false);
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertNotNull(byteArray2);
      assertArrayEquals(new byte[] {(byte)91, (byte)60, (byte)45, (byte)63, (byte)89}, byteArray2);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      
      String[] stringArray1 = Utility.methodSignatureArgumentTypes("(LL_OsBMz;LL_OsBMz;LL_OsBMz;LL_OsBMz;LL_OsBMz;Lif_icmplt;LL_OsBMz;LL_OsBMz;LL_OsBMz;)LL_OsBMz;");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      
      try { 
        Utility.methodSignatureReturnType("L_OsBMz 'SA", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: L_OsBMz 'SA
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[10];
      byteArray0[4] = (byte) (-61);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-61), 1160);
      assertNotNull(string0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte) (-61), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals("0:    nop\n1:    nop\n2:    nop\n3:    nop\n4:    monitorexit\n5:    nop\n6:    nop\n7:    nop\n8:    nop\n9:    nop\n", string0);
      
      byte[] byteArray1 = Utility.decode("0:    nop\n1:    nop\n2:    nop\n3:    nop\n4:    monitorexit\n5:    nop\n6:    nop\n7:    nop\n8:    nop\n9:    nop\n", false);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals("faload", string1);
      assertNotSame(byteArray1, byteArray0);
      
      ByteSequence byteSequence1 = new ByteSequence(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertNotNull(byteSequence1);
      assertEquals(0, byteSequence1.getIndex());
      
      boolean boolean1 = Utility.isSet(59, 4563);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteSequence2.equals((Object)byteSequence1));
      assertFalse(byteSequence2.equals((Object)byteSequence0));
      assertNotNull(byteSequence2);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte) (-61), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(0, byteSequence2.getIndex());
      
      byte[] byteArray2 = Utility.decode("$l$8b$I$A$A$A$A$A$A$A", false);
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertNotNull(byteArray2);
      assertArrayEquals(new byte[] {(byte)31, (byte) (-117), (byte)8, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray2);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte)0;
      boolean boolean0 = false;
      boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      ConstantDouble constantDouble0 = new ConstantDouble((byte)74);
      assertNotNull(constantDouble0);
      assertEquals(74.0, constantDouble0.getBytes(), 0.01);
      assertEquals((byte)6, constantDouble0.getTag());
      
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      byte byte0 = (byte) (-98);
      boolean boolean3 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Illegally nested brackets:");
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3);
      
      byte[] byteArray1 = new byte[7];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte)4;
      byteArray1[1] = (byte) (-97);
      byteArray1[2] = (byte)80;
      byteArray1[3] = (byte)74;
      byteArray1[4] = (byte)4;
      byteArray1[5] = (byte)36;
      String string0 = Constants.STATIC_INITIALIZER_NAME;
      assertNotNull(string0);
      assertEquals("<clinit>", string0);
      
      byteArray1[6] = (byte) (-98);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, constantPool0, (int) (byte)74, (-1272));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      ConstantMethodType constantMethodType0 = new ConstantMethodType((byte)21);
      assertNotNull(constantMethodType0);
      assertEquals(21, constantMethodType0.getDescriptorIndex());
      assertEquals((byte)16, constantMethodType0.getTag());
      
      byte[] byteArray0 = new byte[7];
      byteArray0[1] = (byte)21;
      byteArray0[1] = (byte)21;
      byteArray0[2] = (byte)21;
      byteArray0[4] = (byte) (-99);
      byteArray0[5] = (byte) (-99);
      byteArray0[6] = (byte) (-99);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)21, 101);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      byte byte0 = ObjectStreamConstants.TC_BLOCKDATA;
      assertEquals((byte)119, byte0);
      
      byte byte1 = Utility.typeOfSignature("F");
      assertFalse(byte1 == byte0);
      assertEquals((byte)6, byte1);
      
      String string0 = Constants.ILLEGAL_OPCODE;
      assertNotNull(string0);
      assertEquals("<illegal opcode>", string0);
      
      boolean boolean0 = false;
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)6;
      byteArray0[1] = (byte)119;
      byteArray0[2] = (byte)119;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      ConstantPool constantPool1 = constantPool0.copy();
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertNotNull(constantPool1);
      assertEquals(0, constantPool0.getLength());
      assertEquals(0, constantPool1.getLength());
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, 2304, 3139);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string0 = Utility.signatureToString("St}ckMap(", true);
      assertNotNull(string0);
      assertEquals("short", string0);
      
      String string1 = Utility.compactClassName("9", "&K", true);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("9", string1);
      
      boolean boolean2 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      boolean boolean3 = Utility.isJavaIdentifierPart('f');
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)10;
      byteArray0[1] = (byte)5;
      byteArray0[2] = (byte)95;
      Constant[] constantArray0 = new Constant[2];
      ConstantString constantString0 = new ConstantString((byte)5);
      assertNotNull(constantString0);
      assertEquals((byte)8, constantString0.getTag());
      assertEquals(5, constantString0.getStringIndex());
      
      constantArray0[0] = (Constant) constantString0;
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType((byte)10, 162);
      assertNotNull(constantNameAndType0);
      assertEquals(162, constantNameAndType0.getSignatureIndex());
      assertEquals(10, constantNameAndType0.getNameIndex());
      assertEquals((byte)12, constantNameAndType0.getTag());
      
      constantArray0[1] = (Constant) constantNameAndType0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(2, constantPool0.getLength());
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)95, (int) (byte)10);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      byte[] byteArray0 = Utility.decode("SZt$jXAenVzkHIH_Q|", false);
      assertNotNull(byteArray0);
      
      boolean boolean2 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      
      boolean boolean3 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3);
      
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 196, (int) (byte)55);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      ConstantLong constantLong0 = new ConstantLong(1L);
      assertNotNull(constantLong0);
      assertEquals((byte)5, constantLong0.getTag());
      assertEquals(1L, constantLong0.getBytes());
      
      byte[] byteArray0 = new byte[0];
      String string0 = Constants.STATIC_INITIALIZER_NAME;
      assertNotNull(string0);
      assertEquals("<clinit>", string0);
      
      int int0 = 139;
      byte[] byteArray1 = new byte[12];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[1] = (byte)55;
      byteArray1[2] = (byte) (-104);
      byteArray1[3] = (byte) (-63);
      byteArray1[4] = (byte)102;
      int int1 = 196;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, (ConstantPool) null, 697, 196);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      byte byte0 = Constants.ATTR_RUNTIMEVISIBLE_ANNOTATIONS;
      assertEquals((byte)12, byte0);
      
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) null;
      objectArray0[2] = (Object) "fE6nrTEr<p;be19/Vz";
      objectArray0[3] = (Object) "9";
      objectArray0[4] = (Object) "&K";
      String string0 = Utility.printArray(objectArray0);
      assertNotNull(string0);
      assertEquals("{null, null, fE6nrTEr<p;be19/Vz, 9, &K, null, null}", string0);
      
      try { 
        Utility.typeOfSignature("E'[_`<|+4;3");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: E'[_`<|+4;3
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      String string0 = Constants.ILLEGAL_OPCODE;
      assertNotNull(string0);
      assertEquals("<illegal opcode>", string0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string1 = Utility.accessToString((int) (byte) (-86), true);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("private static transient native abstract strictfp synthetic annotation enum", string1);
      
      boolean boolean2 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "<illegal");
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "java,class.pMh";
      String string2 = Utility.getSignature("private static transient native abstract strictfp synthetic annotation enum");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("Lprivate;", string2);
      
      String string3 = Utility.signatureToString("Dont call getValueString() on a non STRING ElementValue", true);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals("double", string3);
      
      try { 
        Utility.methodSignatureArgumentTypes("org.apache.commons.io.IOCase");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: org.apache.commons.io.IOCase
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      byte[] byteArray0 = new byte[11];
      byteArray0[0] = (byte)43;
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "\"w;0F7$K]s6_@rFyg:R");
      assertFalse(boolean0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      
      int int0 = byteSequence0.readInt();
      assertEquals(4, byteSequence0.getIndex());
      assertEquals(721420288, int0);
      
      short short0 = byteSequence0.readShort();
      assertEquals(6, byteSequence0.getIndex());
      assertEquals((short)0, short0);
      
      ConstantLong constantLong0 = new ConstantLong(721420288);
      assertNotNull(constantLong0);
      assertEquals(721420288L, constantLong0.getBytes());
      assertEquals((byte)5, constantLong0.getTag());
      
      ConstantLong constantLong1 = new ConstantLong((byte)60);
      assertFalse(constantLong1.equals((Object)constantLong0));
      assertNotNull(constantLong1);
      assertEquals(60L, constantLong1.getBytes());
      assertEquals((byte)5, constantLong1.getTag());
      
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertNotNull(byteSequence1);
      assertEquals(0, byteSequence1.getIndex());
      
      short short1 = Constants.ACC_PUBLIC;
      assertFalse(short1 == short0);
      assertEquals((short)1, short1);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)43, (-602));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }
}
