/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 06 21:09:22 GMT 2018
 */

package org.databene.jdbacl;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.io.InputStreamReader;
import java.io.LineNumberReader;
import java.io.PrintWriter;
import java.io.Reader;
import java.io.StreamTokenizer;
import java.nio.charset.Charset;
import java.nio.charset.CharsetDecoder;
import java.sql.Date;
import java.time.ZonedDateTime;
import java.util.List;
import org.apache.derby.catalog.Dependable;
import org.apache.derby.iapi.sql.dictionary.ColumnDescriptorList;
import org.apache.derby.iapi.sql.execute.NoPutResultSet;
import org.apache.derby.iapi.store.raw.xact.RawTransaction;
import org.databene.jdbacl.NameSpec;
import org.databene.jdbacl.SQLUtil;
import org.databene.jdbacl.model.CompositeDBObject;
import org.databene.jdbacl.model.DBCatalog;
import org.databene.jdbacl.model.DBCheckConstraint;
import org.databene.jdbacl.model.DBColumn;
import org.databene.jdbacl.model.DBConstraint;
import org.databene.jdbacl.model.DBDataType;
import org.databene.jdbacl.model.DBForeignKeyConstraint;
import org.databene.jdbacl.model.DBNotNullConstraint;
import org.databene.jdbacl.model.DBObject;
import org.databene.jdbacl.model.DBPrimaryKeyConstraint;
import org.databene.jdbacl.model.DBSchema;
import org.databene.jdbacl.model.DBTable;
import org.databene.jdbacl.model.DBTrigger;
import org.databene.jdbacl.model.DBUniqueConstraint;
import org.databene.jdbacl.model.DBUniqueIndex;
import org.databene.jdbacl.model.DefaultDBColumn;
import org.databene.jdbacl.model.DefaultDBTable;
import org.databene.jdbacl.model.TableContainer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.time.chrono.MockHijrahDate;
import org.evosuite.runtime.mock.java.time.chrono.MockMinguoDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteLocalAddress;
import org.evosuite.runtime.testdata.EvoSuiteRemoteAddress;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.firebirdsql.jdbc.FBConnectionProperties;
import org.h2.tools.Recover;
import org.hsqldb.Session;
import org.hsqldb.jdbc.jdbcCallableStatement;
import org.hsqldb.jdbc.jdbcConnection;
import org.hsqldb.lib.FileUtil;
import org.hsqldb.rowio.RowInputBinary;
import org.junit.runner.RunWith;
import org.postgresql.ds.PGConnectionPoolDataSource;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SQLUtil_ESTest extends SQLUtil_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SQLUtil.normalize("g3WVWf~)&~a,R", true);
      // Undeclared exception!
      try { 
        SQLUtil.ownerDotComponent((DBObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String string0 = SQLUtil.normalize("g3WVWf)&~a,R", false);
      assertEquals("g3WVWf) & ~ a, R", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("?{jP4PZs$sp)L-F0~W*");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("?{jP4PZs$sp)L-F0~W*", defaultDBTable0, 290, "?{jP4PZs$sp)L-F0~W*");
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[4];
      defaultDBTable0.getIndex("?{jP4PZs$sp)L-F0~W*");
      defaultDBColumn0.setName("T%lA2Tzi5&75K``L] F");
      FileSystemHandling.shouldAllThrowIOExceptions();
      SQLUtil.normalize("?{JP4PZS$SP)L-F0~W*", false);
      Recover recover0 = new Recover();
      assertNull(recover0.getDatabasePath());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SQLUtil.normalize("Gn,", true);
      SQLUtil.isDML("P-ztjFQX,");
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SQLUtil.substituteMarkers("select_cbc)erh/$u(1", "select_cbc)erh/$u(1", "select_cbc)erh/$u(1");
      StringBuilder stringBuilder0 = new StringBuilder("execute?{jp4p");
      SQLUtil.addRequiredCondition("select_cbc)erh/$u(1", stringBuilder0);
      assertEquals("execute?{jp4p and select_cbc)erh/$u(1", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DefaultDBTable defaultDBTable1 = new DefaultDBTable("Mi77082][");
      String[] stringArray0 = new String[0];
      SQLUtil.renderWhereClause(stringArray0, stringArray0);
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize(" (");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal column type format:  (
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      boolean boolean0 = new Boolean("?{jp4p");
      String[] stringArray0 = new String[3];
      stringArray0[0] = "?{jp4p";
      stringArray0[1] = "execute?{jp4pzsjpl-f0~w";
      stringArray0[2] = "?{jp4p";
      String string0 = SQLUtil.renderWhereClause(stringArray0, stringArray0);
      assertEquals("?{jp4p = '?{jp4p' AND execute?{jp4pzsjpl-f0~w = 'execute?{jp4pzsjpl-f0~w' AND ?{jp4p = '?{jp4p'", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      StringBuilder stringBuilder0 = new StringBuilder();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "z#'+TV(I8FbZS3";
      stringArray0[1] = "z#'+TV(I8FbZS3";
      stringArray0[2] = "z#'+TV(I8FbZS3";
      stringArray0[3] = "z#'+TV(I8FbZS3";
      stringArray0[4] = "z#'+TV(I8FbZS3";
      stringArray0[5] = "z#'+TV(I8FbZS3";
      String string0 = SQLUtil.renderColumnListWithTableName("z#'+TV(I8FbZS3", stringArray0);
      assertEquals("z#'+TV(I8FbZS3.z#'+TV(I8FbZS3, z#'+TV(I8FbZS3.z#'+TV(I8FbZS3, z#'+TV(I8FbZS3.z#'+TV(I8FbZS3, z#'+TV(I8FbZS3.z#'+TV(I8FbZS3, z#'+TV(I8FbZS3.z#'+TV(I8FbZS3, z#'+TV(I8FbZS3.z#'+TV(I8FbZS3", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      String[] stringArray0 = new String[2];
      stringArray0[0] = null;
      stringArray0[1] = null;
      String string0 = SQLUtil.leftJoin((String) null, stringArray0, stringArray0[1], stringArray0[1], stringArray0);
      assertEquals("left join null as null on null.null = null.null and null.null = null.null", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "";
      String string0 = SQLUtil.innerJoin("", stringArray0, "", (String) null, stringArray0);
      assertEquals(" as null on . = null. and . = null. and . = null. and . = null. and . = null. and . = null.", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      StringBuilder stringBuilder0 = new StringBuilder();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      SQLUtil.parseColumnTypeAndSize("OA?~D3&j+i|");
      SQLUtil.ownerDotComponent(defaultDBTable0);
      SQLUtil.addOptionalCondition("+,", stringBuilder0);
      assertEquals("+,", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      boolean boolean0 = SQLUtil.isQuery("alter index(");
      assertFalse(boolean0);
      
      DBSchema dBSchema0 = new DBSchema("create materialized viewblob");
      DBTrigger dBTrigger0 = new DBTrigger("- ", dBSchema0);
      dBSchema0.addTrigger(dBTrigger0);
      String string0 = SQLUtil.typeAndName(dBSchema0);
      assertNotNull(string0);
      assertEquals("schema create materialized viewblob", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "org.apache.derby.iapi.error.StandardException");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DefaultDBTable defaultDBTable1 = new DefaultDBTable();
      SQLUtil sQLUtil0 = new SQLUtil();
      SQLUtil.substituteMarkers("El3W^l<:R`ZeCk@", "org.apache.derby.iapi.error.StandardException", sQLUtil0);
      String string0 = FBConnectionProperties.ENCODING_PROPERTY;
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      // Undeclared exception!
      try { 
        SQLUtil.fkSpec((DBForeignKeyConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SQLUtil.removeComments(")");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      StringBuilder stringBuilder0 = new StringBuilder();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, ")", true, (String[]) null);
      SQLUtil.mutatesStructure(")");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" columns");
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      SQLUtil.renderCreateTable(defaultDBTable0, false, nameSpec0, mockPrintWriter0);
      assertEquals("table", defaultDBTable0.getObjectType());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      StringBuilder stringBuilder0 = new StringBuilder();
      NameSpec nameSpec0 = NameSpec.NEVER;
      String string0 = SQLUtil.normalize("z#'+TV(I8FbZS3", false);
      assertEquals("z # '+TV(I8FbZS3'", string0);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "z#'+TV(I8FbZS3";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "z # '+TV(I8FbZS3'", false, stringArray0);
      String string1 = SQLUtil.pkSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("PRIMARY KEY (z#'+TV(I8FbZS3, )", string1);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SQLUtil.removeComments("7");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      StringBuilder stringBuilder0 = new StringBuilder(326);
      stringBuilder0.append(0L);
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "7", true, (String[]) null);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("7");
      SQLUtil.renderCreateTable(defaultDBTable0, false, nameSpec0, mockPrintWriter0);
      // Undeclared exception!
      try { 
        SQLUtil.join("7", "CLOB", (String[]) null, "ResultSets with concurrency CONCUR_READ_ONLY cannot be updated.", "insertunknown constraint type:", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SQLUtil.removeComments(")");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      StringBuilder stringBuilder0 = new StringBuilder();
      stringBuilder0.append(0L);
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, ")", true, (String[]) null);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex(")", false, dBPrimaryKeyConstraint0);
      DBUniqueIndex dBUniqueIndex1 = new DBUniqueIndex("", false, dBPrimaryKeyConstraint0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("et|w|u", false, defaultDBTable0, (String[]) null, defaultDBTable0, (String[]) null);
      NameSpec nameSpec0 = NameSpec.NEVER;
      String string0 = SQLUtil.constraintSpec(dBForeignKeyConstraint0, nameSpec0);
      assertEquals("FOREIGN KEY () REFERENCES null()", string0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      SQLUtil.removeComments(")");
      StringBuilder stringBuilder0 = new StringBuilder();
      // Undeclared exception!
      try { 
        SQLUtil.renderWhereClause((String[]) null, (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      SQLUtil.removeComments("BLOB");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      NetworkHandling.sendMessageOnTcp((EvoSuiteLocalAddress) null, "BLOB");
      String string0 = Dependable.ROUTINE_PERMISSION;
      String[] stringArray0 = new String[1];
      stringArray0[0] = "BLOB";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, " IS NULL", false, stringArray0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      SQLUtil.constraintSpec(dBUniqueConstraint0, nameSpec0);
      ColumnDescriptorList columnDescriptorList0 = new ColumnDescriptorList();
      columnDescriptorList0.listIterator();
      MockHijrahDate mockHijrahDate0 = new MockHijrahDate();
      columnDescriptorList0.add((Object) mockHijrahDate0);
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((List<DBColumn>) columnDescriptorList0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.evosuite.runtime.mock.java.time.chrono.MockHijrahDate cannot be cast to org.databene.jdbacl.model.DBColumn
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      SQLUtil.removeComments("");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      StringBuilder stringBuilder0 = new StringBuilder();
      String[] stringArray0 = null;
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "", true, (String[]) null);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("", true, dBPrimaryKeyConstraint0);
      jdbcConnection jdbcConnection0 = new jdbcConnection((Session) null);
      String string0 = "Di;{uui0R}>}$Q5a\">";
      SQLUtil.normalize("Di;{uui0R}>}$Q5a\">", true);
      jdbcCallableStatement jdbcCallableStatement0 = null;
      try {
        jdbcCallableStatement0 = new jdbcCallableStatement(jdbcConnection0, "execute", 2147483645);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.hsqldb.jdbc.jdbcPreparedStatement", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBCatalog dBCatalog0 = new DBCatalog();
      defaultDBTable0.setOwner(dBCatalog0);
      SQLUtil.ownerDotComponent(defaultDBTable0);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "null.null";
      stringArray0[1] = "null.null";
      SQLUtil.parseColumnTypeAndSize("null.null");
      SQLUtil.isQuery("null.null");
      String[] stringArray1 = new String[7];
      stringArray1[0] = "null.null";
      stringArray1[1] = "null.null";
      stringArray1[2] = "null.null";
      stringArray1[3] = "null.null";
      stringArray1[4] = "null.null";
      stringArray1[5] = "IiW_,rb6g";
      defaultDBTable0.getPrimaryKeyConstraint();
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      // Undeclared exception!
      try { 
        SQLUtil.pkSpec((DBPrimaryKeyConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      String string0 = null;
      DefaultDBTable defaultDBTable0 = new DefaultDBTable((String) null);
      String[] stringArray0 = new String[0];
      defaultDBTable0.toString();
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint((String) null, true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      SQLUtil.constraintSpec(dBForeignKeyConstraint0, nameSpec0);
      String string1 = "^0~:#u?eTzA";
      // Undeclared exception!
      try { 
        DBDataType.getInstance(0, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.model.DBDataType", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBDataType dBDataType0 = DBDataType.getInstance((-128304149), "create unique indexzu<ja7");
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("create unique indexzu<ja7", defaultDBTable0, dBDataType0, integer0);
      String string0 = SQLUtil.renderColumn(defaultDBColumn0);
      assertEquals("create unique indexzu<ja7 CREATE UNIQUE INDEXZU<JA7(3) NULL", string0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      SQLUtil.normalize("execute", true);
      SQLUtil.mutatesDataOrStructure("execute");
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      // Undeclared exception!
      try { 
        SQLUtil.createConstraintSpecBuilder((DBConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      StringBuilder stringBuilder0 = new StringBuilder();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      StringBuilder stringBuilder1 = SQLUtil.addRequiredCondition(")$]Wl<iJD@x?K+7", stringBuilder0);
      SQLUtil.addRequiredCondition("KQ", stringBuilder1);
      assertEquals(")$]Wl<iJD@x?K+7 and KQ", stringBuilder1.toString());
      assertEquals(")$]Wl<iJD@x?K+7 and KQ", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable(")(hJWw_?I-}2VV\"Xt", (DBSchema) null);
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, ")(hJWw_?I-}2VV\"Xt", false, (String[]) null);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("", false, dBPrimaryKeyConstraint0);
      DBTable dBTable0 = dBUniqueIndex0.getTable();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      stringArray0[1] = "'A$`tsgF4c-/p\"p_";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("80000000-00d3-e222-9920-000a0a0b1900", false, dBTable0, stringArray0, dBTable0, (String[]) null);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String string0 = SQLUtil.constraintSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("PRIMARY KEY ()", string0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      SQLUtil.removeComments("");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      StringBuilder stringBuilder0 = new StringBuilder("");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      MockMinguoDate mockMinguoDate0 = new MockMinguoDate();
      MockFile mockFile0 = new MockFile("h:*o.dwr{l^z1z5Kvsc", "");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      mockFile0.setExecutable(false);
      mockPrintWriter0.print((-2608.0F));
      Object[] objectArray0 = new Object[4];
      objectArray0[2] = (Object) "DELETE_RULE SMALLINT";
      objectArray0[1] = (Object) "";
      Object object0 = new Object();
      objectArray0[2] = object0;
      mockPrintWriter0.printf("", objectArray0);
      SQLUtil.normalize("h:*o.dwr{l^z1z5Kvsc", true);
      Recover recover0 = new Recover();
      Boolean boolean0 = new Boolean("DELETE_RULE SMALLINT");
      ColumnDescriptorList columnDescriptorList0 = new ColumnDescriptorList();
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((List<DBColumn>) columnDescriptorList0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      CompositeDBObject<DefaultDBTable> compositeDBObject0 = (CompositeDBObject<DefaultDBTable>) mock(CompositeDBObject.class, new ViolatedAssumptionAnswer());
      TableContainer tableContainer0 = new TableContainer("4^HmP", compositeDBObject0);
      tableContainer0.getTable((String) null);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "4^HmP";
      stringArray0[2] = "4^HmP";
      stringArray0[4] = null;
      // Undeclared exception!
      try { 
        SQLUtil.renderQuery((DBTable) null, stringArray0, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBDataType dBDataType0 = DBDataType.getInstance(6, "I");
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("I", defaultDBTable0, dBDataType0, integer0, integer0);
      defaultDBColumn0.setNullable(false);
      String string0 = SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      assertEquals("I(3,3)", string0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      RowInputBinary rowInputBinary0 = new RowInputBinary();
      Charset charset0 = Charset.defaultCharset();
      CharsetDecoder charsetDecoder0 = charset0.newDecoder();
      InputStreamReader inputStreamReader0 = new InputStreamReader(rowInputBinary0, charsetDecoder0);
      LineNumberReader lineNumberReader0 = new LineNumberReader(inputStreamReader0, 2030);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(lineNumberReader0);
      String string0 = SQLUtil.renderNumber(streamTokenizer0);
      assertEquals("- 0", string0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      RowInputBinary rowInputBinary0 = new RowInputBinary();
      DBSchema dBSchema0 = new DBSchema((String) null);
      DBTrigger dBTrigger0 = new DBTrigger("", dBSchema0);
      SQLUtil.typeAndName(dBSchema0);
      DBSchema dBSchema1 = new DBSchema((String) null);
      StringBuilder stringBuilder0 = new StringBuilder("schema null");
      SQLUtil.addOptionalCondition("bfh6+peO", stringBuilder0);
      assertEquals("schema null or bfh6+peO", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      StringBuilder stringBuilder0 = new StringBuilder();
      SQLUtil.renderValue(stringBuilder0);
      Integer integer0 = RawTransaction.COMMIT;
      Integer integer1 = new Integer((-3269));
      Boolean boolean0 = Boolean.TRUE;
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("fn_>(:=UUXt8~WA):");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \":=UUXt8~WA\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("!;`<T31C5&,m\"t");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("?{jP4PZsJpL-F0~W", defaultDBTable0, 290, "?{jP4PZsJpL-F0~W");
      defaultDBTable0.getCheckConstraints();
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      defaultDBColumn0.setVersionColumn(true);
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint(" columns", true, "?{JP4PZSJPL-F0~W", " columns");
      dBCheckConstraint0.toString();
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.constraintSpec(dBCheckConstraint0, nameSpec0);
      DBCheckConstraint dBCheckConstraint1 = null;
      try {
        dBCheckConstraint1 = new DBCheckConstraint("alter indexin", false, defaultDBTable0, "CONSTRAINT \" columns\" CHECK  columns");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Error parsing SQL
         //
         verifyException("org.databene.jdbacl.sql.SQLParserUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      StringBuilder stringBuilder0 = new StringBuilder();
      SQLUtil.renderValue(stringBuilder0);
      Integer integer0 = RawTransaction.COMMIT;
      Integer integer1 = new Integer((-3269));
      SQLUtil.mutatesDataOrStructure("insert");
      String[] stringArray0 = new String[0];
      defaultDBTable0.getUniqueConstraint(stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      // Undeclared exception!
      try { 
        SQLUtil.ukSpec((DBUniqueConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      StringBuilder stringBuilder0 = new StringBuilder();
      MockFile mockFile0 = new MockFile("org.apache.derby.impl.sql.compile.SetOperatorNode");
      mockFile0.getAbsoluteFile();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, mockPrintWriter0);
      Integer integer0 = RawTransaction.ABORT;
      assertEquals(1, (int)integer0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      SQLUtil.normalize("insertalter indxselect_cbc)erh3$u(1", true);
      System.setCurrentTimeMillis((-149L));
      String[] stringArray0 = new String[2];
      stringArray0[0] = "insertalter indxselect_cbc)erh3$u(1";
      stringArray0[1] = "insertalter indxselect_cbc) erh3 $ u (1";
      SQLUtil.join("insertalter indxselect_cbc)erh3$u(1", "insertalter indxselect_cbc)erh3$u(1", stringArray0, "8y{~r'Q", "insertalter indxselect_cbc) erh3 $ u (1", stringArray0);
      SQLUtil.renderValue("insertalter indxselect_cbc)erh3$u(1");
      String string0 = "`Q'/9New3~pj";
      String[] stringArray1 = new String[1];
      stringArray1[0] = "`Q'/9New3~pj";
      // Undeclared exception!
      try { 
        SQLUtil.join((String) null, "insertalter indxselect_cbc) erh3 $ u (1", stringArray0, "delete", "`Q'/9New3~pj", stringArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      StringBuilder stringBuilder0 = new StringBuilder();
      defaultDBTable0.getCheckConstraints();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      defaultDBTable0.getForeignKeyConstraints();
      String string0 = "s";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("s", false, defaultDBTable0, (String[]) null, defaultDBTable0, (String[]) null);
      SQLUtil.constraintName(dBForeignKeyConstraint0);
      DBColumn[] dBColumnArray0 = new DBColumn[3];
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames(dBColumnArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      StringBuilder stringBuilder0 = new StringBuilder(326);
      StringBuilder stringBuilder1 = stringBuilder0.append((long) 326);
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "43X51.U", true, (String[]) null);
      Integer integer0 = RawTransaction.COMMIT;
      Integer integer1 = new Integer(326);
      DBDataType dBDataType0 = DBDataType.getInstance((-2219), "43X51.U");
      Integer integer2 = RawTransaction.SAVEPOINT_ROLLBACK;
      SQLUtil.appendConstraintName((DBConstraint) dBPrimaryKeyConstraint0, stringBuilder0);
      SQLUtil sQLUtil0 = new SQLUtil();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("Prepare called with unknown transaction", defaultDBTable0, dBDataType0);
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0, stringBuilder1);
      assertEquals("326CONSTRAINT 43X51.U 43X51.U", stringBuilder1.toString());
      assertEquals("326CONSTRAINT 43X51.U 43X51.U", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      StringBuilder stringBuilder0 = new StringBuilder();
      String string0 = SQLUtil.normalize("z#'+TV(I8FbZS3", false);
      assertEquals("z # '+TV(I8FbZS3'", string0);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "z#'+TV(I8FbZS3";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "z # '+TV(I8FbZS3'", false, stringArray0);
      boolean boolean0 = SQLUtil.isDDL("alter table");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      String[] stringArray0 = null;
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      SQLUtil.mutatesDataOrStructure("select_cbc)erh/$u(1");
      DBConstraint dBConstraint0 = null;
      NameSpec nameSpec0 = NameSpec.NEVER;
      // Undeclared exception!
      try { 
        SQLUtil.constraintSpec((DBConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      SQLUtil.removeComments(")");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      StringBuilder stringBuilder0 = new StringBuilder();
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, ")", true, (String[]) null);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("4y,7FN", true, dBPrimaryKeyConstraint0);
      MockMinguoDate mockMinguoDate0 = new MockMinguoDate();
      SQLUtil.renderValue(mockMinguoDate0);
      Integer integer0 = RawTransaction.COMMIT;
      Integer integer1 = new Integer((-2219));
      Integer integer2 = RawTransaction.LOCK_ESCALATE;
      SQLUtil.parseColumnTypeAndSize("Prepare called with unknown transaction");
      Character character0 = Character.valueOf('v');
      String string0 = SQLUtil.renderValue(character0);
      assertEquals("'v'", string0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      DBColumn[] dBColumnArray0 = new DBColumn[1];
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("e|Je+FQmHC)");
      DBDataType dBDataType0 = DBDataType.getInstance((-1280), " T");
      Integer integer0 = RawTransaction.ABORT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("e|Je+FQmHC)", defaultDBTable0, dBDataType0, integer0);
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      String string0 = SQLUtil.renderColumnNames(dBColumnArray0);
      assertEquals("e|Je+FQmHC)", string0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      DBColumn[] dBColumnArray0 = new DBColumn[7];
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("e|Je+FQmHC)");
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("create table", 39);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      DBDataType dBDataType0 = DBDataType.getInstance((-1280), " T");
      Integer integer0 = RawTransaction.ABORT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("e|Je+FQmHC)", defaultDBTable0, dBDataType0, integer0);
      defaultDBColumn0.setSize(integer0);
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames(dBColumnArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      SQLUtil.removeComments(")");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      StringBuilder stringBuilder0 = new StringBuilder();
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, ")", true, (String[]) null);
      String string0 = "4y,7FN";
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("4y,7FN", true, dBPrimaryKeyConstraint0);
      dBPrimaryKeyConstraint0.equals(dBUniqueIndex0);
      DBTable dBTable0 = dBUniqueIndex0.getTable();
      SQLUtil.isDDL("BLOB");
      DBDataType dBDataType0 = DBDataType.getInstance(1096, ")");
      dBDataType0.isAlpha();
      defaultDBTable0.getForeignKeyConstraints();
      SQLUtil.parseColumnTypeAndSize("BLOB");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("4y,7FN", defaultDBTable0, dBDataType0);
      defaultDBColumn0.setNullable(false);
      SQLUtil.renderColumn(defaultDBColumn0);
      // Undeclared exception!
      try { 
        dBTable0.getForeignKeyConstraint((String[]) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Table 'null' has no foreign key with the columns ()
         //
         verifyException("org.databene.jdbacl.model.DefaultDBTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      StringBuilder stringBuilder0 = new StringBuilder();
      SQLUtil.renderValue(stringBuilder0);
      Integer integer0 = RawTransaction.ABORT;
      Integer integer1 = new Integer((-349619799));
      SQLUtil.parseColumnTypeAndSize("");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "setString(String,String)");
      Character.valueOf('s');
      TableContainer tableContainer0 = new TableContainer("setString(String,String)");
      SQLUtil.renderValue(stringBuilder0);
      SQLUtil.typeAndName(tableContainer0);
      DefaultDBColumn defaultDBColumn0 = null;
      try {
        defaultDBColumn0 = new DefaultDBColumn("43Y17.U", defaultDBTable0, (-349619799), "setString(String,String)");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"String\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      SQLUtil.removeComments("");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      SQLUtil sQLUtil0 = new SQLUtil();
      NetworkHandling.sendMessageOnTcp((EvoSuiteLocalAddress) null, "");
      String[] stringArray0 = new String[9];
      stringArray0[0] = "";
      TableContainer tableContainer0 = new TableContainer("");
      tableContainer0.getSchema();
      SQLUtil.renderValue(defaultDBTable0);
      SQLUtil.typeAndName((DBObject) null);
      DefaultDBTable defaultDBTable1 = new DefaultDBTable("//");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("", defaultDBTable1, (DBDataType) null);
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("b-UZx55", defaultDBTable0, 174, "");
      defaultDBColumn1.getNotNullConstraint();
      StringBuilder stringBuilder0 = new StringBuilder();
      StringBuilder stringBuilder1 = new StringBuilder((CharSequence) "b-UZx55");
      stringBuilder1.append((double) 174);
      // Undeclared exception!
      try { 
        stringBuilder0.appendCodePoint((-200970921));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      SQLUtil.removeComments("");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      MockMinguoDate mockMinguoDate0 = new MockMinguoDate();
      Integer integer0 = new Integer(335544431);
      DBDataType dBDataType0 = DBDataType.getInstance(1941, "caT");
      DBDataType.getInstance((-1726194493), "caT");
      Integer integer1 = RawTransaction.SAVEPOINT_ROLLBACK;
      Integer integer2 = RawTransaction.COMMIT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("", defaultDBTable0, dBDataType0, integer0, integer0);
      String string0 = SQLUtil.renderColumn(defaultDBColumn0);
      assertEquals(" CAT(335544431,335544431) NULL", string0);
      
      defaultDBColumn0.setNullable(false);
      defaultDBColumn0.setVersionColumn(false);
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("drop indexmxu8{xllk[9", defaultDBTable0, 363, "");
      DBNotNullConstraint dBNotNullConstraint0 = defaultDBColumn0.getNotNullConstraint();
      NameSpec nameSpec0 = NameSpec.NEVER;
      String string1 = SQLUtil.constraintSpec(dBNotNullConstraint0, nameSpec0);
      assertEquals(" NOT NULL", string1);
      
      String string2 = SQLUtil.constraintName(dBNotNullConstraint0);
      assertEquals("CONSTRAINT null__NOT_NULL ", string2);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema("", (DBCatalog) null);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("f~B^|Gch2+quAQ", dBSchema0);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "f~B^|Gch2+quAQ";
      stringArray0[1] = "f~B^|Gch2+quAQ";
      stringArray0[2] = "f~B^|Gch2+quAQ";
      stringArray0[3] = "f~B^|Gch2+quAQ";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, (String) null, true, stringArray0);
      String string0 = SQLUtil.constraintName(dBUniqueConstraint0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      StringBuilder stringBuilder0 = new StringBuilder();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      SQLUtil.isDDL("BLOB");
      DBDataType.getInstance(1096, "HQW'7;@g");
      SQLUtil.mutatesDataOrStructure("select intoalter indexse");
      Integer integer0 = new Integer((-3269));
      DBDataType dBDataType0 = DBDataType.getInstance((-1726194493), "BLOB");
      Integer integer1 = RawTransaction.SAVEPOINT_ROLLBACK;
      Integer integer2 = RawTransaction.LOCK_ESCALATE;
      Integer integer3 = RawTransaction.COMMIT;
      Integer integer4 = RawTransaction.COMMIT;
      Integer integer5 = RawTransaction.SAVEPOINT_ROLLBACK;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("s;lect_cbc)erh3$u(1", defaultDBTable0, dBDataType0, integer4, integer5);
      SQLUtil.renderColumn(defaultDBColumn0);
      defaultDBColumn0.setNullable(true);
      defaultDBColumn0.setVersionColumn(true);
      defaultDBColumn0.getNotNullConstraint();
      // Undeclared exception!
      try { 
        SQLUtil.appendConstraintName((DBConstraint) null, stringBuilder0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      SQLUtil.parseColumnTypeAndSize("*R8P;L");
      SQLUtil.normalize("*R8P;L", false);
      SQLUtil.isDDL("*R8P;L");
      DBSchema dBSchema0 = new DBSchema((String) null);
      Charset.defaultCharset();
      String string0 = NoPutResultSet.NEXT;
      assertFalse(string0.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      StringBuilder stringBuilder0 = new StringBuilder();
      SQLUtil.isDDL("xx3r~KBfs");
      Integer integer0 = new Integer((-3263));
      DBDataType dBDataType0 = DBDataType.getInstance((-1726194493), "xx3r~KBfs");
      Integer integer1 = RawTransaction.SAVEPOINT_ROLLBACK;
      Integer integer2 = RawTransaction.LOCK_ESCALATE;
      Integer integer3 = RawTransaction.COMMIT;
      Integer integer4 = RawTransaction.ABORT;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Integer.toUnsignedLong((-778));
      Integer integer5 = RawTransaction.SAVEPOINT_ROLLBACK;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("HQW'7;@g", defaultDBTable0, dBDataType0, integer4, integer5);
      SQLUtil.renderColumn(defaultDBColumn0);
      Integer.toUnsignedString((-1726194493));
      Integer.toUnsignedLong((-1726194493));
      defaultDBColumn0.setNullable(false);
      defaultDBColumn0.setVersionColumn(false);
      DBNotNullConstraint dBNotNullConstraint0 = defaultDBColumn0.getNotNullConstraint();
      dBNotNullConstraint0.setName((String) null);
      dBNotNullConstraint0.setTable(defaultDBTable0);
      SQLUtil.appendConstraintName((DBConstraint) dBNotNullConstraint0, stringBuilder0);
      SQLUtil.isQuery("xx3r~KBfs");
      System.setCurrentTimeMillis((-287L));
      Object[] objectArray0 = SQLUtil.parseColumnTypeAndSize("select intoalter indexse");
      assertNotNull(objectArray0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("!;`<T31C5&,m\"t");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("?{jP4PZsp)L-F0~W*", defaultDBTable0, 302, "?{jP4PZsp)L-F0~W*");
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "^>a+<5Z7/9QYY");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Integer.toUnsignedLong((-186916882));
      Integer integer0 = RawTransaction.ABORT;
      Integer integer1 = RawTransaction.ABORT;
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("?{JP4PZSP)L-F0~W*", defaultDBTable0, (DBDataType) null, integer1, (Integer) null);
      SQLUtil.renderColumn(defaultDBColumn0);
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "f[sI5D(B", true, (String[]) null);
      defaultDBColumn0.addUkConstraint(dBUniqueConstraint0);
      Integer.toUnsignedLong(302);
      defaultDBColumn1.setNullable(true);
      defaultDBColumn1.setVersionColumn(true);
      defaultDBTable0.setDoc("^>a+<5Z7/9QYY");
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      PGConnectionPoolDataSource pGConnectionPoolDataSource0 = new PGConnectionPoolDataSource();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("^>a+<5Z7/9QYY");
      // Undeclared exception!
      try { 
        SQLUtil.renderCreateTable(defaultDBTable0, false, nameSpec0, mockPrintWriter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      StringBuilder stringBuilder0 = new StringBuilder();
      SQLUtil.isDDL("xx3rpF~KBfs");
      SQLUtil.mutatesDataOrStructure("`-I ~cQG)IL$N3b");
      Integer integer0 = new Integer((-3263));
      DBDataType dBDataType0 = DBDataType.getInstance((-1726194493), "xx3rpF~KBfs");
      Integer integer1 = RawTransaction.SAVEPOINT_ROLLBACK;
      Integer integer2 = RawTransaction.LOCK_ESCALATE;
      Integer integer3 = RawTransaction.COMMIT;
      Integer integer4 = RawTransaction.ABORT;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "xx3rpF~KBfs");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Integer.toUnsignedLong((-778));
      Integer integer5 = RawTransaction.ABORT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("HQW'7;@g", defaultDBTable0, dBDataType0, integer4, integer5);
      SQLUtil.renderColumn(defaultDBColumn0);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "HQW'7;@g";
      stringArray0[1] = "HQW'7;@g";
      stringArray0[2] = "xx3rpF~KBfs";
      stringArray0[3] = "HQW'7;@g XX3RPF~KBFS(1,1) NULL";
      stringArray0[4] = "HQW'7;@g";
      stringArray0[5] = "xx3rpF~KBfs";
      stringArray0[6] = "HQW'7;@g XX3RPF~KBFS(1,1) NULL";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "`-I ~cQG)IL$N3b", true, stringArray0);
      defaultDBColumn0.addUkConstraint(dBUniqueConstraint0);
      Integer.toUnsignedString((-1726194493));
      Integer.toUnsignedLong((-1726194493));
      defaultDBColumn0.setNullable(false);
      defaultDBColumn0.setVersionColumn(false);
      defaultDBTable0.setDoc(" server running on ");
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      PGConnectionPoolDataSource pGConnectionPoolDataSource0 = new PGConnectionPoolDataSource();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("HQW'7;@g XX3RPF~KBFS(1,1) NULL");
      SQLUtil.renderCreateTable(defaultDBTable0, false, nameSpec0, mockPrintWriter0);
      assertNull(defaultDBTable0.getName());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      SQLUtil.mutatesDataOrStructure("drop tableua u");
      int int0 = 3444;
      Random.setNextRandom(3444);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("insertc013800d-00fb-2641-07ec-000000134f30", (DBSchema) null);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "]O5Wh7xAxE;";
      stringArray0[1] = "insertc013800d-00fb-2641-07ec-000000134f30";
      stringArray0[2] = "]O5Wh7xAxE;";
      stringArray0[3] = "insertc013800d-00fb-2641-07ec-000000134f30";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "]O5Wh7xAxE;", true, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("drop tableua u", true, dBPrimaryKeyConstraint0);
      DBTable dBTable0 = dBUniqueIndex0.getTable();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("drop tableua u", dBTable0, 3444, "RD]");
      defaultDBColumn0.getForeignKeyConstraint();
      NameSpec nameSpec0 = NameSpec.NEVER;
      File file0 = FileUtil.canonicalFile("insertc013800d-00fb-2641-07ec-000000134f30");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      PrintWriter printWriter0 = mockPrintWriter0.append('<');
      // Undeclared exception!
      try { 
        SQLUtil.renderAddForeignKey((DBForeignKeyConstraint) null, nameSpec0, printWriter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      String string0 = "?{jP4PZsp)L-F0~W*";
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("!;`<T31C5&,m\"t");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("?{jP4PZsp)L-F0~W*", defaultDBTable0, 290, "?{jP4PZsp)L-F0~W*");
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String string1 = " columns";
      String string2 = null;
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint(" columns", false, (String) null, "Z$e");
      defaultDBTable0.addCheckConstraint(dBCheckConstraint0);
      SQLUtil.normalize("?{JP4PZSP)L-F0~W*", false);
      Recover recover0 = new Recover();
      String string3 = "mXU8{xllK[9";
      SQLUtil.mutatesDataOrStructure("mXU8{xllK[9");
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      PGConnectionPoolDataSource pGConnectionPoolDataSource0 = new PGConnectionPoolDataSource();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("exec`-i ~cqg)il$n3b");
      SQLUtil.renderCreateTable(defaultDBTable0, false, nameSpec0, mockPrintWriter0);
      // Undeclared exception!
      try { 
        SQLUtil.renderAddForeignKey((DBForeignKeyConstraint) null, nameSpec0, mockPrintWriter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("!;`<T315&,m\"t");
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      SQLUtil.normalize("~LI/13[", false);
      Recover recover0 = new Recover();
      SQLUtil.mutatesDataOrStructure("mU8{xll|KU9");
      ColumnDescriptorList columnDescriptorList0 = new ColumnDescriptorList();
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((List<DBColumn>) columnDescriptorList0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }
}
