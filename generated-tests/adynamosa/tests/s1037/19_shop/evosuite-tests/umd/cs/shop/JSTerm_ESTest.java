/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 24 12:47:10 GMT 2019
 */

package umd.cs.shop;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.Reader;
import java.io.StreamTokenizer;
import java.io.StringReader;
import java.nio.CharBuffer;
import java.util.Collection;
import java.util.Comparator;
import java.util.Spliterator;
import java.util.function.Consumer;
import java.util.function.Predicate;
import java.util.function.UnaryOperator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.util.SystemInUtil;
import org.junit.runner.RunWith;
import umd.cs.shop.JSEvaluate;
import umd.cs.shop.JSJshopVars;
import umd.cs.shop.JSPredicateForm;
import umd.cs.shop.JSSubstitution;
import umd.cs.shop.JSTerm;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSTerm_ESTest extends JSTerm_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("(+\"4ANy~o7R^f}<e/!");
      Predicate<Object> predicate0 = Predicate.isEqual((Object) "(+\"4ANy~o7R^f}<e/!");
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate0.and(predicate1);
      predicate0.or(predicate2);
      Predicate<Object> predicate3 = predicate2.or(predicate0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      Predicate<Object> predicate4 = Predicate.isEqual((Object) jSSubstitution0);
      predicate3.and(predicate4);
      Predicate.isEqual((Object) predicate3);
      Object object0 = new Object();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = null;
      try {
        jSTerm1 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      SystemInUtil.addInputLine("Expecting elements of th list");
      SystemInUtil.addInputLine("Expecting elements of th list");
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "Expecting elements of th list");
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      StringReader stringReader0 = new StringReader("Q");
      jSTerm1.isConstant();
      stringReader0.reset();
      JSSubstitution jSSubstitution0 = jSTerm0.matches(jSTerm1);
      UnaryOperator<JSTerm> unaryOperator0 = UnaryOperator.identity();
      jSSubstitution0.replaceAll(unaryOperator0);
      SystemInUtil.addInputLine((String) null);
      jSTerm1.addElement(jSTerm0);
      stringReader0.ready();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm2 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm3 = jSTerm1.call();
      SystemInUtil.addInputLine("o,4p84 3_");
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm4 = new JSTerm();
      jSTerm4.trimToSize();
      JSTerm jSTerm5 = new JSTerm();
      JSSubstitution jSSubstitution2 = jSTerm1.matches(jSTerm3, jSSubstitution0);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      streamTokenizer1.ttype = (-1);
      stringReader0.reset();
      streamTokenizer1.pushBack();
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader0);
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      jSSubstitution2.containsAll(jSTerm2);
      assertFalse(jSSubstitution0.fail());
      assertFalse(jSTerm2.isEval());
      
      JSTerm jSTerm6 = jSTerm3.cloneT();
      boolean boolean0 = jSTerm1.equals(jSTerm6);
      assertTrue(boolean0);
      assertEquals(10, jSTerm3.capacity());
      assertNotSame(jSTerm6, jSTerm3);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      SystemInUtil.addInputLine("Expecting elements of th list");
      SystemInUtil.addInputLine("Expecting elements of th list");
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "Expecting elements of th list");
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      SystemInUtil.addInputLine((String) null);
      StringReader stringReader0 = new StringReader("Q");
      jSTerm1.isConstant();
      stringReader0.reset();
      JSSubstitution jSSubstitution0 = jSTerm0.matches(jSTerm1);
      UnaryOperator<JSTerm> unaryOperator0 = UnaryOperator.identity();
      jSSubstitution0.replaceAll(unaryOperator0);
      SystemInUtil.addInputLine((String) null);
      jSTerm1.addElement(jSTerm0);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSJshopVars.greaterT = 58;
      jSTerm0.isEval();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      jSTerm1.equals(jSTerm1);
      JSJshopVars.leftPar = (-4);
      StringBuffer stringBuffer0 = jSTerm1.toStr();
      assertEquals(64, stringBuffer0.length());
      
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm2 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSSubstitution2.add((Object) null);
      SystemInUtil.addInputLine("`");
      System.setCurrentTimeMillis(58);
      boolean boolean0 = jSTerm1.equals(jSTerm2);
      assertFalse(boolean0);
      assertFalse(jSTerm2.isEval());
      
      jSTerm1.print();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      jSTerm0.isVariable();
      JSTerm jSTerm3 = jSTerm1.applySubstitutionT(jSSubstitution3);
      JSTerm jSTerm4 = jSTerm1.cloneT();
      JSSubstitution jSSubstitution4 = jSTerm1.matches(jSTerm3, jSSubstitution2);
      assertNotSame(jSTerm3, jSTerm1);
      assertFalse(jSSubstitution4.fail());
      assertTrue(jSTerm3.equals((Object)jSTerm4));
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      char[] charArray0 = new char[4];
      CharBuffer.wrap(charArray0);
      SystemInUtil.addInputLine("Pm+n)");
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "Expecting elements of th list");
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      jSTerm0.isGround();
      Spliterator spliterator0 = jSTerm1.spliterator();
      StringReader stringReader0 = new StringReader("Q");
      stringReader0.markSupported();
      stringReader0.mark(0);
      stringReader0.reset();
      JSSubstitution jSSubstitution0 = jSTerm0.matches(jSTerm1);
      jSTerm1.addElement(jSTerm0);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSSubstitution1.addAll(0, (Collection) jSTerm0);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      jSTerm1.equals(jSTerm1);
      jSSubstitution0.sort((Comparator) null);
      assertEquals("[Expecting elements of th list, [Expecting elements of th list]]", jSTerm1.toString());
      
      streamTokenizer0.pushBack();
      JSTerm jSTerm2 = new JSTerm(streamTokenizer0);
      jSTerm2.call();
      JSJshopVars.equalT = 2;
      JSTerm jSTerm3 = jSTerm1.applySubstitutionT(jSSubstitution0);
      Object object0 = jSTerm1.lastElement();
      jSTerm3.addElement(object0);
      jSSubstitution0.add((Object) spliterator0);
      jSTerm1.equals(jSTerm3);
      jSTerm3.applySubstitutionT(jSSubstitution0);
      jSTerm1.toStr();
      StringBuffer stringBuffer0 = jSTerm1.toStr();
      assertEquals("(Expecting elements of th list (Expecting elements of th list ))", stringBuffer0.toString());
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) jSTerm0);
      Predicate<Object> predicate1 = predicate0.negate();
      predicate0.or(predicate1);
      Predicate.isEqual((Object) predicate0);
      jSTerm0.addElement(predicate0);
      StringReader stringReader0 = new StringReader("(-e^A6P");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      jSTerm0.print();
      jSTerm0.equals(jSTerm0);
      jSTerm0.makeVariable();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution0);
      jSTerm1.call();
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer0.pushBack();
      JSTerm jSTerm2 = null;
      try {
        jSTerm2 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      char[] charArray0 = new char[4];
      CharBuffer.wrap(charArray0);
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "Expecting elements of the list");
      jSTerm0.toStr();
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      jSTerm0.equals(jSTerm1);
      jSTerm0.isGround();
      StringReader stringReader0 = new StringReader("u");
      stringReader0.reset();
      JSSubstitution jSSubstitution0 = jSTerm0.matches(jSTerm1);
      JSTerm jSTerm2 = (JSTerm)jSTerm1.clone();
      jSTerm1.addElement(jSTerm2);
      jSTerm0.addElement(jSSubstitution0);
      StringReader stringReader1 = new StringReader("[Qb1N/");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader1);
      jSTerm0.equals(jSTerm2);
      jSTerm1.stream();
      jSTerm2.print();
      jSTerm2.isGround();
      jSTerm1.toStr();
      jSTerm2.call();
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader1);
      JSTerm jSTerm3 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm1.parseList(streamTokenizer1);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      String string0 = "Expecting elements of the list";
      char[] charArray0 = new char[4];
      CharBuffer.wrap(charArray0);
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "Expecting elements of the list");
      jSTerm0.toStr();
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      jSTerm0.equals(jSTerm1);
      jSTerm0.isGround();
      StringReader stringReader0 = new StringReader("u");
      stringReader0.reset();
      JSSubstitution jSSubstitution0 = jSTerm0.matches(jSTerm1);
      Object object0 = jSTerm1.clone();
      jSTerm1.addElement(object0);
      jSTerm0.addElement(jSSubstitution0);
      // Undeclared exception!
      try { 
        jSTerm0.equals(jSTerm1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // umd.cs.shop.JSSubstitution cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) jSTerm0);
      Predicate.isEqual((Object) predicate0);
      predicate0.negate();
      jSTerm0.addElement(predicate0);
      StringReader stringReader0 = new StringReader("(e^A6P");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      jSTerm0.print();
      jSTerm0.equals(jSTerm0);
      jSTerm0.makeVariable();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      jSTerm1.call();
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm2 = new JSTerm();
      JSJshopVars.dot = 40;
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer2);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) jSTerm0);
      Predicate.isEqual((Object) predicate0);
      jSTerm0.addElement(predicate0);
      jSTerm0.toStr();
      StringReader stringReader0 = new StringReader("(Q^A6 ");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      jSTerm0.print();
      jSTerm0.isEmpty();
      jSTerm0.makeVariable();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSTerm0.applySubstitutionT(jSSubstitution1);
      JSTerm jSTerm1 = null;
      try {
        jSTerm1 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSJshopVars.VarCounter = (-352);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) jSTerm0);
      Predicate.isEqual((Object) predicate0);
      Predicate<Object> predicate1 = predicate0.negate();
      jSTerm0.addElement(predicate0);
      predicate0.and(predicate1);
      predicate0.negate();
      String string0 = "(e^A6P";
      StringReader stringReader0 = new StringReader("(e^A6P");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      stringReader0.reset();
      JSTerm jSTerm1 = null;
      try {
        jSTerm1 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) jSTerm0);
      Predicate<Integer> predicate1 = Predicate.isEqual((Object) predicate0);
      Predicate.isEqual((Object) "b6H3hi!t");
      jSTerm0.removeIf(predicate1);
      Object object0 = new Object();
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) predicate1;
      objectArray0[1] = object0;
      jSTerm0.toArray(objectArray0);
      jSTerm0.add((Object) "b6H3hi!t");
      StringReader stringReader0 = new StringReader("b6H3hi!t");
      jSTerm0.makeEval(true);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSTerm0.remove((Object) jSSubstitution0);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      JSTerm jSTerm2 = new JSTerm();
      JSTerm jSTerm3 = jSTerm1.cloneT();
      jSTerm3.print();
      assertTrue(jSTerm1.isFunction());
      
      StringReader stringReader1 = new StringReader("5.0");
      stringReader1.close();
      jSSubstitution2.add((Object) stringReader1);
      stringReader0.ready();
      jSTerm1.makeVariable();
      StringReader stringReader2 = new StringReader("");
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      jSTerm2.isGround();
      jSTerm1.call();
      jSTerm3.equals(jSTerm1);
      System.setCurrentTimeMillis(0L);
      jSTerm0.toStr();
      jSTerm1.call();
      assertFalse(jSTerm1.isFunction());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[1] = '=';
      CharBuffer.wrap(charArray0);
      JSTerm jSTerm0 = new JSTerm();
      Predicate.isEqual((Object) jSTerm0);
      jSTerm0.isEmpty();
      Object object0 = new Object();
      jSTerm0.add(object0);
      StringReader stringReader0 = new StringReader("variable");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      jSTerm1.makeEval(true);
      jSTerm0.addElement(jSTerm1);
      jSTerm0.isEmpty();
      jSTerm1.isGround();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm2 = jSTerm0.cloneT();
      JSSubstitution jSSubstitution1 = null;
      jSTerm0.cloneT();
      jSTerm2.matches(jSTerm1, (JSSubstitution) null);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      jSTerm2.applySubstitutionT(jSSubstitution0);
      JSTerm jSTerm3 = new JSTerm();
      jSTerm0.parallelStream();
      StringReader stringReader1 = new StringReader("list");
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm4 = null;
      try {
        jSTerm4 = new JSTerm(streamTokenizer1);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[1] = '=';
      CharBuffer.wrap(charArray0);
      JSTerm jSTerm0 = new JSTerm();
      Predicate.isEqual((Object) jSTerm0);
      jSTerm0.isEmpty();
      Object object0 = new Object();
      jSTerm0.add(object0);
      StringReader stringReader0 = new StringReader("variable");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      jSTerm1.makeEval(true);
      JSTerm jSTerm2 = new JSTerm();
      jSTerm0.addElement(jSTerm2);
      jSTerm0.isGround();
      jSTerm1.isGround();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm0.applySubstitutionT(jSSubstitution0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSJshopVars.greaterT = 46;
      jSTerm0.makeVariable();
      JSTerm jSTerm1 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.add((Object) jSSubstitution0);
      JSTerm jSTerm2 = jSTerm0.standardizerTerm();
      JSTerm jSTerm3 = jSTerm2.applySubstitutionT(jSSubstitution0);
      JSTerm jSTerm4 = jSTerm3.applySubstitutionT(jSSubstitution0);
      JSTerm jSTerm5 = new JSTerm();
      JSTerm jSTerm6 = new JSTerm();
      jSTerm4.spliterator();
      jSSubstitution0.add((Object) jSTerm6);
      jSTerm3.cloneT();
      jSTerm1.matches(jSTerm3, jSSubstitution0);
      jSTerm3.makeVariable();
      jSTerm3.makeEval(true);
      StringReader stringReader0 = new StringReader("Error flag1 : ");
      JSTerm jSTerm7 = new JSTerm();
      JSSubstitution jSSubstitution1 = jSTerm3.matches(jSTerm7);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      jSTerm6.makeFunction();
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      StringReader stringReader1 = new StringReader("Error flag1 : ");
      jSTerm3.cloneT();
      jSTerm6.containsAll(jSTerm5);
      JSTerm jSTerm8 = jSTerm4.standardizerTerm();
      jSTerm2.print();
      JSTerm jSTerm9 = new JSTerm(streamTokenizer0);
      jSTerm9.isGround();
      jSTerm2.call();
      jSTerm9.matches(jSTerm1);
      jSTerm9.call();
      jSTerm8.matches(jSTerm2, jSSubstitution1);
      // Undeclared exception!
      try { 
        jSTerm9.parseList(streamTokenizer1);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) jSTerm0);
      Predicate.isEqual((Object) predicate0);
      Predicate<Object> predicate1 = predicate0.negate();
      JSTerm jSTerm1 = new JSTerm();
      predicate1.test(jSTerm1);
      jSTerm0.addElement(predicate0);
      predicate0.negate();
      Predicate.isEqual((Object) jSTerm0);
      jSTerm0.isEval();
      StringReader stringReader0 = new StringReader("vQria7e");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm2 = new JSTerm(streamTokenizer0);
      JSJshopVars.leftBrac = (-242);
      jSTerm0.add((Object) jSTerm2);
      JSTerm jSTerm3 = new JSTerm();
      JSJshopVars.colon = 62;
      JSJshopVars.leftBrac = 179;
      jSTerm2.spliterator();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm4 = new JSTerm();
      jSTerm3.add((Object) jSTerm4);
      jSTerm0.toStr();
      jSTerm3.matches(jSTerm4, jSSubstitution0);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = jSTerm0.matches(jSTerm1, jSSubstitution0);
      jSSubstitution2.add((Object) jSTerm1);
      // Undeclared exception!
      try { 
        jSTerm1.standardizerTerm();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) jSTerm0);
      Predicate.isEqual((Object) predicate0);
      predicate0.negate();
      jSTerm0.addElement(predicate0);
      Predicate.isEqual((Object) jSTerm0);
      jSTerm0.removeIf(predicate0);
      StringReader stringReader0 = new StringReader("variable");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = jSTerm0.cloneT();
      jSTerm0.isGround();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.add((Object) jSTerm1);
      jSTerm1.isGround();
      jSTerm0.cloneT();
      jSTerm0.standardizerTerm();
      JSTerm jSTerm2 = jSTerm1.applySubstitutionT(jSSubstitution0);
      // Undeclared exception!
      try { 
        jSTerm2.clonePF();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.util.function.Predicate$$Lambda$54/371021418 cannot be cast to java.lang.String
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[1] = '=';
      CharBuffer.wrap(charArray0);
      JSTerm jSTerm0 = new JSTerm();
      Predicate.isEqual((Object) jSTerm0);
      jSTerm0.isEmpty();
      Object object0 = new Object();
      jSTerm0.add(object0);
      String string0 = "variable";
      StringReader stringReader0 = new StringReader("variable");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      jSTerm1.makeEval(true);
      JSTerm jSTerm2 = new JSTerm();
      jSTerm0.addElement(jSTerm2);
      jSTerm0.isGround();
      jSTerm0.stream();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSTerm0.remove((Object) null);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSTerm0.ensureCapacity((-1));
      jSTerm1.call();
      // Undeclared exception!
      try { 
        jSTerm1.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      char[] charArray0 = new char[3];
      CharBuffer.wrap(charArray0);
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "Expecting elements of the list");
      jSTerm0.toStr();
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      jSTerm0.equals(jSTerm1);
      jSTerm1.isFunction();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.add((Object) "Expecting elements of the list");
      StringReader stringReader0 = new StringReader("A|t#+NP=d8m+");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      jSTerm1.makeEval(true);
      jSTerm0.isGround();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      Object object0 = jSTerm0.clone();
      jSTerm1.remove(object0);
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      JSTerm jSTerm2 = new JSTerm(streamTokenizer0);
      jSTerm1.print();
      StringReader stringReader1 = new StringReader("variable");
      JSTerm jSTerm3 = jSTerm1.cloneT();
      jSTerm3.containsAll(jSSubstitution2);
      JSTerm jSTerm4 = jSTerm1.standardizerTerm();
      jSTerm2.print();
      JSTerm jSTerm5 = new JSTerm();
      JSTerm jSTerm6 = new JSTerm();
      JSTerm jSTerm7 = new JSTerm();
      jSTerm5.equals(jSTerm4);
      JSTerm jSTerm8 = null;
      try {
        jSTerm8 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[1] = '=';
      CharBuffer.wrap(charArray0);
      JSTerm jSTerm0 = new JSTerm();
      Predicate.isEqual((Object) jSTerm0);
      jSTerm0.isEmpty();
      Object object0 = new Object();
      jSTerm0.add(object0);
      String string0 = "variable";
      StringReader stringReader0 = new StringReader("variable");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      jSTerm0.makeEval(true);
      jSTerm0.isGround();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.isEval();
      jSTerm0.standardizerTerm();
      jSTerm0.print();
      JSTerm jSTerm1 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm1.print();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.makeVariable();
      JSTerm jSTerm1 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.add((Object) jSSubstitution0);
      JSTerm jSTerm2 = jSTerm0.standardizerTerm();
      JSTerm jSTerm3 = jSTerm2.applySubstitutionT(jSSubstitution0);
      JSTerm jSTerm4 = jSTerm3.applySubstitutionT(jSSubstitution0);
      JSTerm jSTerm5 = new JSTerm();
      JSTerm jSTerm6 = new JSTerm();
      jSTerm4.spliterator();
      jSSubstitution0.add((Object) jSTerm6);
      JSSubstitution jSSubstitution1 = jSTerm1.matches(jSTerm3, jSSubstitution0);
      jSTerm3.makeVariable();
      jSTerm3.makeEval(true);
      StringReader stringReader0 = new StringReader("Error flag1 : ");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      StringReader stringReader1 = new StringReader("Error flag1 : ");
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader1);
      JSTerm jSTerm7 = new JSTerm(streamTokenizer1);
      jSTerm3.matches(jSTerm6, jSSubstitution1);
      jSTerm7.toStr();
      jSTerm0.print();
      StringReader stringReader2 = null;
      try {
        stringReader2 = new StringReader((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      char[] charArray0 = new char[3];
      CharBuffer.wrap(charArray0);
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "Expecting elements of the list");
      jSTerm0.toStr();
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      jSTerm0.equals(jSTerm1);
      jSTerm0.isGround();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.add((Object) "Expecting elements of the list");
      String string0 = "variable";
      StringReader stringReader0 = new StringReader("A|t#+NP=d8m+");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      jSTerm1.makeEval(true);
      jSTerm0.isGround();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      Object object0 = jSTerm0.clone();
      jSTerm1.remove(object0);
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm1.call();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1 >= 1
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[1] = '=';
      CharBuffer.wrap(charArray0);
      JSTerm jSTerm0 = new JSTerm();
      Predicate.isEqual((Object) jSTerm0);
      jSTerm0.isEmpty();
      Object object0 = new Object();
      jSTerm0.add(object0);
      String string0 = "variable";
      StringReader stringReader0 = new StringReader("variable");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      jSTerm1.makeEval(true);
      jSTerm0.isGround();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSTerm0.remove((Object) null);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSTerm0.ensureCapacity((-1));
      jSTerm1.call();
      // Undeclared exception!
      try { 
        jSTerm1.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[1] = '=';
      CharBuffer.wrap(charArray0);
      JSTerm jSTerm0 = new JSTerm();
      Predicate.isEqual((Object) jSTerm0);
      jSTerm0.isEmpty();
      Object object0 = new Object();
      jSTerm0.add(object0);
      StringReader stringReader0 = new StringReader("variable");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      jSTerm0.makeEval(true);
      jSTerm0.isGround();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      StringReader stringReader1 = new StringReader("variable");
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      jSTerm1.print();
      jSTerm1.isGround();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSTerm1.applySubstitutionT(jSSubstitution0);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSTerm jSTerm2 = new JSTerm();
      StringReader stringReader2 = null;
      try {
        stringReader2 = new StringReader((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      StringReader stringReader0 = new StringReader("%At");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      Predicate.isEqual((Object) "%At");
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer1);
      System.setCurrentTimeMillis((-515L));
      JSTerm jSTerm1 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm2 = null;
      try {
        jSTerm2 = new JSTerm(streamTokenizer1);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) jSTerm0);
      Predicate<Integer> predicate1 = Predicate.isEqual((Object) predicate0);
      Predicate.isEqual((Object) "b6H3hi!t");
      jSTerm0.removeIf(predicate1);
      Object object0 = new Object();
      jSTerm0.add((Object) "b6H3hi!t");
      StringReader stringReader0 = new StringReader("b6H3hi!t");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      jSTerm0.makeEval(true);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSTerm0.remove((Object) jSSubstitution0);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSTerm0.ensureCapacity((-4));
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      JSTerm jSTerm2 = new JSTerm();
      JSTerm jSTerm3 = jSTerm1.cloneT();
      jSTerm3.print();
      StringReader stringReader1 = new StringReader("5.0");
      StringReader stringReader2 = new StringReader("b6H3hi!t");
      stringReader2.close();
      UnaryOperator<Integer> unaryOperator0 = UnaryOperator.identity();
      jSTerm1.replaceAll(unaryOperator0);
      jSTerm0.cloneT();
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm4 = new JSTerm(streamTokenizer1);
      jSTerm1.isGround();
      jSTerm0.add((Object) stringReader2);
      JSTerm jSTerm5 = null;
      try {
        jSTerm5 = new JSTerm(streamTokenizer1);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[1] = '=';
      CharBuffer.wrap(charArray0);
      JSTerm jSTerm0 = new JSTerm();
      Predicate<String> predicate0 = Predicate.isEqual((Object) jSTerm0);
      jSTerm0.removeIf(predicate0);
      Object object0 = new Object();
      jSTerm0.add(object0);
      StringReader stringReader0 = new StringReader("variable");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      jSTerm0.makeEval(true);
      jSTerm0.isGround();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSTerm0.remove((Object) jSSubstitution1);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      Consumer<Integer> consumer0 = (Consumer<Integer>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSTerm0.forEach(consumer0);
      JSSubstitution jSSubstitution3 = jSSubstitution2.standarizerSubs();
      jSTerm0.standardizerTerm();
      JSTerm jSTerm1 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm1.applySubstitutionT(jSSubstitution3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[1] = '=';
      CharBuffer.wrap(charArray0);
      JSTerm jSTerm0 = new JSTerm();
      Predicate<String> predicate0 = Predicate.isEqual((Object) jSTerm0);
      jSTerm0.removeIf(predicate0);
      Object object0 = new Object();
      jSTerm0.add(object0);
      StringReader stringReader0 = new StringReader("variable");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      jSTerm0.makeEval(true);
      jSTerm0.isGround();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSTerm0.remove((Object) jSSubstitution1);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSTerm0.ensureCapacity((-4));
      // Undeclared exception!
      try { 
        jSTerm0.call();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) jSTerm0);
      Predicate<Integer> predicate1 = Predicate.isEqual((Object) predicate0);
      Predicate<Object> predicate2 = Predicate.isEqual((Object) predicate1);
      Predicate<Object> predicate3 = predicate0.and(predicate2);
      predicate0.or(predicate3);
      predicate0.negate();
      jSTerm0.addElement(predicate0);
      jSTerm0.isEmpty();
      jSTerm0.toStr();
      jSTerm0.toStr();
      Predicate<Object> predicate4 = predicate0.negate();
      predicate0.or(predicate4);
      JSTerm jSTerm1 = jSTerm0.cloneT();
      jSTerm0.standardizerTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm2 = new JSTerm();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSTerm jSTerm3 = new JSTerm();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSSubstitution jSSubstitution3 = jSTerm3.matches(jSTerm1, jSSubstitution1);
      JSTerm jSTerm4 = new JSTerm();
      jSTerm4.matches(jSTerm0);
      JSTerm jSTerm5 = new JSTerm();
      jSTerm1.isGround();
      StringReader stringReader0 = new StringReader("of");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm6 = new JSTerm(streamTokenizer0);
      jSTerm0.call();
      // Undeclared exception!
      try { 
        jSTerm5.applySubstitutionT(jSSubstitution3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) jSTerm0);
      Predicate.isEqual((Object) predicate0);
      predicate0.negate();
      jSTerm0.addElement(predicate0);
      Object object0 = jSTerm0.elementAt(0);
      Predicate.isEqual(object0);
      jSTerm0.contains(object0);
      jSTerm0.toStr();
      jSTerm0.toStr();
      StringReader stringReader0 = new StringReader("(%{t");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = null;
      try {
        jSTerm1 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.makeVariable();
      JSTerm jSTerm1 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.add((Object) jSSubstitution0);
      JSTerm jSTerm2 = jSTerm0.standardizerTerm();
      JSTerm jSTerm3 = jSTerm2.standardizerTerm();
      Consumer<Integer> consumer0 = (Consumer<Integer>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSTerm1.forEach(consumer0);
      jSTerm2.equals(jSTerm1);
      jSTerm2.isGround();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSTerm1.matches((JSPredicateForm) jSTerm3, jSSubstitution1);
      jSTerm3.matches(jSTerm1, jSSubstitution1);
      JSTerm jSTerm4 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm1.call();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.makeVariable();
      JSTerm jSTerm1 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.add((Object) jSSubstitution0);
      JSTerm jSTerm2 = jSTerm0.standardizerTerm();
      JSTerm jSTerm3 = jSTerm2.applySubstitutionT(jSSubstitution0);
      JSTerm jSTerm4 = jSTerm3.applySubstitutionT(jSSubstitution0);
      JSTerm jSTerm5 = new JSTerm();
      jSSubstitution0.add((Object) jSTerm4);
      StringReader stringReader0 = new StringReader("Error flag1 : ");
      JSSubstitution jSSubstitution1 = jSTerm1.matches(jSTerm3, jSSubstitution0);
      jSTerm3.makeVariable();
      StringReader stringReader1 = new StringReader("Error flag1 : ");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader1);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader1);
      StringReader stringReader2 = new StringReader("Error flag1 : ");
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader2);
      JSTerm jSTerm6 = new JSTerm(streamTokenizer1);
      jSTerm2.matches(jSTerm1, jSSubstitution1);
      StringBuffer stringBuffer0 = jSTerm4.toStr();
      assertEquals("[[[]0]]", jSSubstitution0.toString());
      assertEquals(4, stringBuffer0.length());
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.makeVariable();
      JSJshopVars.verticalL = 1535;
      JSTerm jSTerm1 = new JSTerm();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) jSTerm0);
      Predicate<Object> predicate1 = predicate0.negate();
      predicate1.or(predicate0);
      predicate0.negate();
      StringReader stringReader0 = new StringReader("elements");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm2 = new JSTerm(streamTokenizer0);
      jSTerm0.add((Object) "j8'TS8[/b<?L8L$(");
      jSTerm1.isFunction();
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm3 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm4 = new JSTerm();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSTerm2.matches(jSTerm4, jSSubstitution1);
      jSTerm4.matches(jSTerm0);
      JSTerm jSTerm5 = new JSTerm();
      jSTerm0.isGround();
      JSTerm jSTerm6 = null;
      try {
        jSTerm6 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) jSTerm0);
      Predicate<Integer> predicate1 = Predicate.isEqual((Object) predicate0);
      Predicate<Object> predicate2 = Predicate.isEqual((Object) predicate1);
      Predicate<Object> predicate3 = predicate0.and(predicate2);
      predicate0.or(predicate3);
      predicate0.negate();
      jSTerm0.addElement(predicate0);
      jSTerm0.isEmpty();
      jSTerm0.toStr();
      jSTerm0.toStr();
      Predicate<Object> predicate4 = predicate0.negate();
      predicate0.or(predicate4);
      JSTerm jSTerm1 = jSTerm0.cloneT();
      JSTerm jSTerm2 = jSTerm0.standardizerTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm3 = jSTerm1.applySubstitutionT(jSSubstitution0);
      assertTrue(jSTerm3.equals((Object)jSTerm2));
      
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSTerm jSTerm4 = new JSTerm();
      JSJshopVars.apostrophe = 39;
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSTerm3.add((Object) jSTerm0);
      jSTerm2.toStr();
      jSTerm3.print();
      jSTerm3.call();
      jSTerm1.matches(jSTerm0);
      System.setCurrentTimeMillis((-1L));
      boolean boolean0 = jSTerm0.isGround();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) jSTerm0);
      Predicate<Integer> predicate1 = Predicate.isEqual((Object) predicate0);
      Predicate<Object> predicate2 = Predicate.isEqual((Object) predicate1);
      Predicate<Object> predicate3 = predicate0.and(predicate2);
      predicate0.or(predicate3);
      predicate0.negate();
      jSTerm0.addElement(predicate0);
      jSTerm0.isEmpty();
      jSTerm0.toStr();
      jSTerm0.toStr();
      Predicate<Object> predicate4 = predicate0.negate();
      predicate0.or(predicate4);
      JSTerm jSTerm1 = jSTerm0.cloneT();
      jSTerm0.standardizerTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm1.applySubstitutionT(jSSubstitution0);
      jSTerm1.add((Object) null);
      JSTerm jSTerm2 = new JSTerm();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      Object object0 = new Object();
      jSTerm1.add(object0);
      // Undeclared exception!
      try { 
        jSTerm1.toStr();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) jSTerm0);
      Predicate.isEqual((Object) predicate0);
      predicate0.negate();
      jSTerm0.addElement(predicate0);
      jSTerm0.isEmpty();
      StringBuffer stringBuffer0 = jSTerm0.toStr();
      jSTerm0.toStr();
      jSTerm0.add((Object) stringBuffer0);
      StringReader stringReader0 = new StringReader("NmP)i'UH/y,w`Pet=g");
      JSTerm jSTerm1 = new JSTerm();
      jSTerm1.add((Object) ">^}AOp`");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm2 = new JSTerm(streamTokenizer0);
      jSTerm2.toStr();
      JSTerm jSTerm3 = jSTerm1.standardizerTerm();
      jSTerm2.print();
      jSTerm0.matches(jSTerm3);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      // Undeclared exception!
      try { 
        jSTerm2.parseList(streamTokenizer1);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      StringReader stringReader0 = new StringReader("51bw^)");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.parseNumbers();
      JSTerm jSTerm0 = new JSTerm();
      JSJshopVars.leftPar = (-3);
      jSTerm0.setSize(42);
      JSTerm jSTerm1 = new JSTerm();
      jSTerm0.equals(jSTerm1);
      JSTerm jSTerm2 = new JSTerm(streamTokenizer0);
      jSTerm2.toStr();
      jSTerm2.toStr();
      StringReader stringReader1 = new StringReader("rHe");
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader1);
      JSTerm jSTerm3 = null;
      try {
        jSTerm3 = new JSTerm(streamTokenizer1);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.makeVariable();
      JSJshopVars.verticalL = 1535;
      JSTerm jSTerm1 = new JSTerm();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) jSTerm0);
      Predicate<Object> predicate1 = predicate0.negate();
      predicate1.or(predicate0);
      predicate0.negate();
      StringReader stringReader0 = new StringReader("elements");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm2 = new JSTerm(streamTokenizer0);
      jSTerm1.add((Object) jSTerm2);
      jSTerm0.isFunction();
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm3 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm1.matches(jSTerm0, jSSubstitution0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) jSTerm0);
      Predicate.isEqual((Object) predicate0);
      Predicate<Object> predicate1 = predicate0.negate();
      jSTerm0.addElement(predicate0);
      Predicate.isEqual((Object) jSTerm0);
      jSTerm0.removeIf(predicate0);
      jSTerm0.add((Object) predicate1);
      StringReader stringReader0 = new StringReader("variable");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      // Undeclared exception!
      try { 
        jSTerm0.cloneT();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) jSTerm0);
      Predicate.isEqual((Object) predicate0);
      Predicate<Object> predicate1 = predicate0.negate();
      jSTerm0.addElement(predicate0);
      jSTerm0.removeIf(predicate0);
      jSTerm0.add((Object) predicate1);
      StringReader stringReader0 = new StringReader("variable");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      jSTerm1.firstElement();
      streamTokenizer0.pushBack();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      Predicate.isEqual((Object) jSSubstitution0);
      jSTerm0.add((Object) null);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm0.applySubstitutionT(jSSubstitution2);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) jSTerm0);
      Predicate.isEqual((Object) predicate0);
      predicate0.negate();
      jSTerm0.addElement(predicate0);
      jSTerm0.isEmpty();
      StringBuffer stringBuffer0 = jSTerm0.toStr();
      jSTerm0.toStr();
      jSTerm0.add((Object) stringBuffer0);
      StringReader stringReader0 = new StringReader("NmP)i'UH/y,w`Pet=g");
      JSTerm jSTerm1 = new JSTerm();
      jSTerm1.add((Object) ">^}AOp`");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm2 = new JSTerm(streamTokenizer0);
      jSTerm2.toStr();
      jSTerm1.standardizerTerm();
      // Undeclared exception!
      try { 
        jSTerm0.print();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.StringBuffer cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) jSTerm0);
      Predicate.isEqual((Object) predicate0);
      predicate0.negate();
      jSTerm0.addElement(predicate0);
      jSTerm0.isEmpty();
      jSTerm0.toStr();
      jSTerm0.toStr();
      Predicate<Object> predicate1 = predicate0.negate();
      predicate0.or(predicate1);
      jSTerm0.cloneT();
      StringReader stringReader0 = new StringReader("elements");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.add((Object) null);
      // Undeclared exception!
      try { 
        jSTerm0.isGround();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) jSTerm0);
      Predicate.isEqual((Object) predicate0);
      Predicate<Object> predicate1 = predicate0.negate();
      jSTerm0.addElement(predicate0);
      Predicate.isEqual((Object) jSTerm0);
      jSTerm0.removeIf(predicate0);
      jSTerm0.add((Object) predicate1);
      StringReader stringReader0 = new StringReader("variable");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      jSTerm1.add((Object) jSTerm0);
      JSTerm jSTerm2 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm1.add((Object) jSSubstitution0);
      jSTerm1.toStr();
      // Undeclared exception!
      try { 
        jSTerm0.standardizerTerm();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      StringReader stringReader0 = new StringReader("51bw^)");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.parseNumbers();
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.parseList(streamTokenizer0);
      jSTerm0.setSize(42);
      JSTerm jSTerm1 = null;
      try {
        jSTerm1 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.makeVariable();
      JSTerm jSTerm1 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.add((Object) jSSubstitution0);
      JSTerm jSTerm2 = jSTerm0.standardizerTerm();
      JSTerm jSTerm3 = jSTerm2.applySubstitutionT(jSSubstitution0);
      JSTerm jSTerm4 = jSTerm0.applySubstitutionT(jSSubstitution0);
      jSSubstitution0.add((Object) jSTerm2);
      StringReader stringReader0 = new StringReader("B>u[3^s");
      jSTerm4.call();
      jSTerm2.call();
      // Undeclared exception!
      try { 
        jSTerm3.equals(jSTerm0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // umd.cs.shop.JSSubstitution cannot be cast to java.lang.String
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.makeVariable();
      JSTerm jSTerm1 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.add((Object) jSSubstitution0);
      JSTerm jSTerm2 = jSTerm0.standardizerTerm();
      jSTerm2.applySubstitutionT(jSSubstitution0);
      JSTerm jSTerm3 = jSTerm0.applySubstitutionT(jSSubstitution0);
      jSSubstitution0.add((Object) jSTerm2);
      StringReader stringReader0 = new StringReader("B>u[3^s");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm4 = new JSTerm(streamTokenizer0);
      // Undeclared exception!
      try { 
        jSTerm3.matches(jSTerm4, jSSubstitution0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) jSTerm0);
      Predicate.isEqual((Object) predicate0);
      predicate0.negate();
      jSTerm0.addElement(predicate0);
      jSTerm0.isEmpty();
      jSTerm0.toStr();
      StringBuffer stringBuffer0 = jSTerm0.toStr();
      assertEquals(61, stringBuffer0.length());
      
      Predicate<Object> predicate1 = predicate0.negate();
      predicate0.or(predicate1);
      JSTerm jSTerm1 = jSTerm0.cloneT();
      JSTerm jSTerm2 = jSTerm0.standardizerTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm3 = jSTerm1.applySubstitutionT(jSSubstitution0);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSTerm2.applySubstitutionT(jSSubstitution1);
      assertFalse(jSTerm2.isEval());
      
      JSTerm jSTerm4 = jSTerm2.call();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      jSTerm4.sort(comparator0);
      assertTrue(jSTerm4.isFunction());
      assertEquals(10, jSTerm4.capacity());
      assertNotSame(jSTerm2, jSTerm4);
      assertTrue(jSTerm2.isFunction());
      
      boolean boolean0 = jSTerm3.isFunction();
      assertNotSame(jSTerm3, jSTerm1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) jSTerm0);
      Predicate.isEqual((Object) predicate0);
      predicate0.negate();
      jSTerm0.addElement(predicate0);
      jSTerm0.removeIf(predicate0);
      jSTerm0.toStr();
      jSTerm0.toStr();
      StringReader stringReader0 = new StringReader("(_Yy1sR';!Qa9K%X]6/");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = null;
      try {
        jSTerm1 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.makeVariable();
      JSJshopVars.verticalL = 1535;
      JSTerm jSTerm1 = new JSTerm();
      JSTerm jSTerm2 = jSTerm0.call();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm3 = new JSTerm();
      jSTerm2.equals(jSTerm3);
      StringReader stringReader0 = new StringReader("S");
      StringReader stringReader1 = new StringReader("variable");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm4 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSTerm jSTerm5 = new JSTerm();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm5.applySubstitutionT(jSSubstitution2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.makeVariable();
      JSJshopVars.verticalL = 1535;
      StringReader stringReader0 = new StringReader("' ");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      jSTerm0.addElement("ecting");
      jSTerm0.isGround();
      Object object0 = jSTerm0.clone();
      jSTerm0.add(object0);
      jSTerm0.isGround();
      jSTerm0.cloneT();
      jSTerm0.isGround();
      jSTerm0.standardizerTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      assertTrue(jSSubstitution1.equals((Object)jSSubstitution0));
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.makeVariable();
      JSJshopVars.verticalL = 1535;
      JSTerm jSTerm1 = new JSTerm();
      JSTerm jSTerm2 = jSTerm0.call();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm3 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm2.equals(jSTerm0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      StringReader stringReader0 = new StringReader(")5|&w_on");
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.addElement(")5|&w_on");
      Predicate.isEqual((Object) jSTerm0);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = jSTerm0.parseList(streamTokenizer0);
      JSTerm jSTerm2 = jSTerm1.call();
      jSTerm2.isConstant();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm1.applySubstitutionPF(jSSubstitution0);
      JSTerm jSTerm3 = new JSTerm(streamTokenizer0);
      jSTerm0.trimToSize();
      jSTerm2.isEval();
      jSTerm0.standardizerTerm();
      JSTerm jSTerm4 = null;
      try {
        jSTerm4 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.makeVariable();
      JSTerm jSTerm1 = new JSTerm();
      StringReader stringReader0 = new StringReader("B>u[3^s");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm2 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.add((Object) jSSubstitution0);
      jSTerm2.isGround();
      jSTerm2.cloneT();
      JSTerm jSTerm3 = jSTerm0.standardizerTerm();
      jSTerm3.applySubstitutionT(jSSubstitution0);
      jSTerm0.applySubstitutionT(jSSubstitution0);
      // Undeclared exception!
      try { 
        jSTerm1.call();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      StringReader stringReader0 = new StringReader(")5|&w_on");
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.addElement(")5|&w_on");
      Predicate<Object> predicate0 = Predicate.isEqual((Object) jSTerm0);
      Predicate<Object> predicate1 = predicate0.or(predicate0);
      Predicate<Object> predicate2 = predicate1.and(predicate0);
      predicate2.or(predicate0);
      Predicate<Object> predicate3 = predicate2.negate();
      jSTerm0.removeIf(predicate3);
      jSTerm0.add((Object) ")5|&w_on");
      jSTerm0.isGround();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.commentChar((-357));
      JSTerm jSTerm1 = new JSTerm();
      jSTerm0.add((Object) predicate2);
      // Undeclared exception!
      try { 
        jSTerm0.toStr();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "Expecting elementsod the list");
      jSTerm0.toStr();
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      StringReader stringReader0 = new StringReader("u");
      stringReader0.reset();
      jSTerm0.matches(jSTerm1);
      JSTerm jSTerm2 = (JSTerm)jSTerm1.clone();
      jSTerm1.addElement(jSTerm2);
      jSTerm0.equals(jSTerm1);
      jSTerm1.stream();
      jSTerm0.print();
      jSTerm1.isGround();
      jSTerm0.toStr();
      JSTerm jSTerm3 = jSTerm0.call();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm3.applySubstitutionT(jSSubstitution0);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm4 = new JSTerm();
      jSTerm2.makeVariable();
      jSTerm4.iterator();
      streamTokenizer0.ordinaryChars((-1), 36);
      streamTokenizer0.ordinaryChars((-1), 45);
      StringReader stringReader1 = new StringReader("D06s]4!H[_yi@XR");
      stringReader1.ready();
      JSJshopVars.semicolon = (-2015);
      streamTokenizer0.nval = (double) (-4);
      jSTerm1.isGround();
      // Undeclared exception!
      try { 
        jSTerm4.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.makeVariable();
      Comparator<JSTerm> comparator0 = (Comparator<JSTerm>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      jSTerm0.sort(comparator0);
      jSTerm0.isEmpty();
      jSTerm0.isEval();
      jSTerm0.isGround();
      StringReader stringReader0 = new StringReader("MK/pauS");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer1);
      stringReader0.close();
      jSTerm0.removeAllElements();
      JSTerm jSTerm2 = null;
      try {
        jSTerm2 = new JSTerm(streamTokenizer1);
        fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      StringReader stringReader0 = new StringReader(")5|&w_on");
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.addElement(")5|&w_on");
      Predicate<Object> predicate0 = Predicate.isEqual((Object) jSTerm0);
      Predicate<Object> predicate1 = predicate0.or(predicate0);
      Predicate<Object> predicate2 = predicate1.and(predicate0);
      Predicate<Object> predicate3 = predicate2.negate();
      jSTerm0.removeIf(predicate3);
      jSTerm0.add((Object) ")5|&w_on");
      jSTerm0.isGround();
      JSTerm jSTerm1 = jSTerm0.cloneT();
      boolean boolean0 = jSTerm0.isGround();
      assertTrue(boolean0);
      
      JSTerm jSTerm2 = jSTerm0.standardizerTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = jSTerm2.matches(jSTerm1, jSSubstitution0);
      assertFalse(jSTerm2.isEval());
      assertTrue(jSTerm2.isFunction());
      assertFalse(jSTerm2.isConstant());
      assertEquals(0, jSSubstitution1.size());
      assertFalse(jSSubstitution1.fail());
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.makeVariable();
      int int0 = 1535;
      JSJshopVars.verticalL = 1535;
      JSTerm jSTerm1 = new JSTerm();
      JSTerm jSTerm2 = jSTerm0.call();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm2.applySubstitutionT(jSSubstitution0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) jSTerm0);
      Predicate.isEqual((Object) predicate0);
      Predicate<Object> predicate1 = predicate0.negate();
      jSTerm0.addElement(predicate0);
      jSTerm0.removeIf(predicate0);
      jSTerm0.add((Object) predicate1);
      // Undeclared exception!
      try { 
        jSTerm0.isGround();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Expecting elements of the list");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      char[] charArray0 = new char[3];
      charArray0[0] = '1';
      charArray0[1] = '=';
      charArray0[2] = 'f';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      stringReader0.read(charBuffer0);
      streamTokenizer0.commentChar((-2090));
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "Expecting elements of the list");
      StringBuffer stringBuffer0 = jSTerm0.toStr();
      assertEquals(33, stringBuffer0.length());
      assertEquals("(Expecting elements of the list )", stringBuffer0.toString());
      
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      assertFalse(jSTerm1.isConstant());
      assertTrue(jSTerm1.isFunction());
      assertFalse(jSTerm1.isEval());
      assertFalse(jSTerm1.isVariable());
      
      boolean boolean0 = jSTerm0.equals(jSTerm1);
      assertFalse(jSTerm1.isConstant());
      assertTrue(boolean0);
      assertFalse(jSTerm1.isVariable());
      assertFalse(jSTerm1.isEval());
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      StringReader stringReader0 = new StringReader("6qVs");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSJshopVars.interrogation = (-2);
      streamTokenizer0.pushBack();
      char[] charArray0 = new char[5];
      charArray0[0] = 'h';
      charArray0[1] = '';
      charArray0[2] = 'g';
      charArray0[3] = 'I';
      charArray0[4] = '&';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      stringReader0.read(charBuffer0);
      streamTokenizer0.lowerCaseMode(true);
      streamTokenizer0.ordinaryChar(0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      JSJshopVars.equalT = 0;
      // Undeclared exception!
      try { 
        stringReader0.read((CharBuffer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Reader", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.makeVariable();
      JSTerm jSTerm1 = new JSTerm();
      StringReader stringReader0 = new StringReader("B>u[3^s");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm2 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm3 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm3.add((Object) jSSubstitution0);
      jSTerm3.isGround();
      JSTerm jSTerm4 = jSTerm3.cloneT();
      jSTerm4.isGround();
      // Undeclared exception!
      try { 
        jSTerm0.standardizerTerm();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      StringReader stringReader0 = new StringReader("?");
      stringReader0.markSupported();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = null;
      try {
        jSTerm0 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      System.setCurrentTimeMillis(0L);
      JSTerm jSTerm0 = new JSTerm();
      String string0 = "cD1z%`C";
      StringReader stringReader0 = new StringReader("%");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = null;
      try {
        jSTerm1 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      StringReader stringReader0 = new StringReader("expecting");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = jSTerm0.matches(jSTerm1, jSSubstitution0);
      assertTrue(jSSubstitution1.fail());
      assertFalse(jSTerm0.isEval());
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.spliterator();
      // Undeclared exception!
      try { 
        jSTerm0.matches((JSTerm) null, jSSubstitution0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) jSSubstitution1;
      objectArray0[1] = (Object) jSSubstitution1;
      objectArray0[2] = (Object) jSSubstitution1;
      objectArray0[3] = (Object) jSSubstitution1;
      jSSubstitution2.toArray(objectArray0);
      jSSubstitution2.print();
      JSTerm jSTerm0 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm0.equals((JSTerm) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) jSTerm0);
      Predicate.isEqual((Object) predicate0);
      predicate0.negate();
      jSTerm0.addElement(predicate0);
      jSTerm0.removeIf(predicate0);
      jSTerm0.toStr();
      StringBuffer stringBuffer0 = jSTerm0.toStr();
      //  // Unstable assertion: assertEquals(60, stringBuffer0.length());
      
      jSTerm0.isGround();
      JSTerm jSTerm1 = jSTerm0.call();
      //  // Unstable assertion: assertFalse(jSTerm1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) null);
      JSJshopVars.backquote = 720;
      JSJshopVars.rightPar = 720;
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution0);
      JSTerm jSTerm2 = jSTerm1.cloneT();
      assertFalse(jSTerm2.isEval());
      assertTrue(jSTerm2.isFunction());
      assertTrue(jSTerm1.isFunction());
      assertNotSame(jSTerm2, jSTerm1);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      StringReader stringReader0 = new StringReader("yiGw@Zog*COZ{OI|%");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = jSTerm0.call();
      assertFalse(jSTerm1.isFunction());
      
      jSTerm0.print();
      assertFalse(jSTerm0.isEval());
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      StringReader stringReader0 = new StringReader("2gBXBV");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = jSTerm0.call();
      assertFalse(jSTerm1.isEval());
      assertTrue(jSTerm1.isConstant());
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.makeVariable();
      boolean boolean0 = jSTerm0.isVariable();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("`Zj;");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      StringReader stringReader0 = new StringReader("%Jb,pg~}g*y");
      stringReader0.reset();
      stringReader0.read();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.isFunction();
      JSTerm jSTerm1 = new JSTerm();
      jSTerm1.removeAllElements();
      jSTerm0.equals(jSTerm1);
      streamTokenizer0.pushBack();
      JSEvaluate.numericValue(jSTerm0);
      jSTerm1.stream();
      JSJshopVars.leftPar = 37;
      streamTokenizer0.slashStarComments(false);
      JSTerm jSTerm2 = jSTerm0.standardizerTerm();
      JSJshopVars.slash = (-1);
      jSTerm2.isGround();
      streamTokenizer0.quoteChar(37);
      streamTokenizer0.ordinaryChar(37);
      stringReader0.markSupported();
      jSTerm0.matches(jSTerm2, (JSSubstitution) null);
      // Undeclared exception!
      try { 
        jSTerm1.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSTerm jSTerm1 = null;
      // Undeclared exception!
      try { 
        jSTerm0.matches((JSTerm) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.add((Object) jSTerm0);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSTerm0.addElement(jSSubstitution1);
      jSTerm0.removeElement(jSSubstitution0);
      jSTerm0.print();
      JSTerm jSTerm1 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm1.applySubstitutionT((JSSubstitution) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSJshopVars.rightPar = 720;
      jSTerm0.stream();
      jSTerm0.isEval();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      StringReader stringReader0 = new StringReader("expecting");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm();
      streamTokenizer0.resetSyntax();
      // Undeclared exception!
      try { 
        jSTerm1.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      StringReader stringReader0 = new StringReader("nil");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.toStr();
      StringReader stringReader1 = new StringReader("equal");
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer1);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      StringReader stringReader0 = new StringReader(": Error reading control parameters: ");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = null;
      try {
        jSTerm0 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      JSJshopVars.VarCounter = 0;
      JSJshopVars.coma = 0;
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      StringReader stringReader0 = new StringReader("+^P_D");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = null;
      try {
        jSTerm0 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSJshopVars.rightPar = 720;
      jSTerm0.stream();
      jSTerm0.isEval();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm0.applySubstitutionT(jSSubstitution0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.makeVariable();
      // Undeclared exception!
      try { 
        jSTerm0.cloneT();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Expecting variable name in term");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      char[] charArray0 = new char[0];
      streamTokenizer0.parseNumbers();
      JSTerm jSTerm1 = new JSTerm();
      jSSubstitution0.add((Object) jSTerm1);
      stringReader0.read(charArray0);
      jSSubstitution0.stream();
      JSTerm jSTerm2 = jSTerm0.applySubstitutionT(jSSubstitution0);
      jSTerm2.equals(jSTerm0);
      jSTerm2.matches(jSTerm0);
      JSTerm jSTerm3 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm4 = new JSTerm();
      jSTerm3.matches(jSTerm4);
      assertFalse(jSTerm3.isEval());
      
      jSTerm3.makeEval(true);
      assertTrue(jSTerm3.isEval());
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.listIterator();
      jSTerm0.makeVariable();
      jSTerm0.isConstant();
      // Undeclared exception!
      try { 
        jSTerm0.toStr();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Expecting variable name in term");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      char[] charArray0 = new char[0];
      streamTokenizer0.parseNumbers();
      stringReader0.read(charArray0);
      jSSubstitution0.stream();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution0);
      boolean boolean0 = jSTerm1.equals(jSTerm0);
      JSTerm jSTerm2 = jSTerm0.standardizerTerm();
      Object object0 = new Object();
      jSSubstitution0.add(object0);
      JSTerm jSTerm3 = jSTerm0.cloneT();
      jSTerm3.matches(jSTerm2, jSSubstitution0);
      JSJshopVars.rightBrac = 0;
      JSTerm jSTerm4 = jSTerm0.standardizerTerm();
      JSJshopVars.backquote = 0;
      jSTerm2.makeConstant();
      JSTerm jSTerm5 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution1 = jSTerm2.matches(jSTerm5, jSSubstitution0);
      assertTrue(jSSubstitution1.fail());
      
      boolean boolean1 = jSTerm2.isVariable();
      assertTrue(jSTerm2.isConstant());
      assertFalse(jSTerm2.isFunction());
      assertFalse(boolean1 == boolean0);
      assertNotSame(jSTerm2, jSTerm4);
      assertFalse(jSTerm2.isEval());
      assertNotSame(jSTerm0, jSTerm3);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSTerm jSTerm1 = new JSTerm();
      jSTerm1.parallelStream();
      JSJshopVars.VarCounter = 0;
      JSJshopVars.coma = 0;
      // Undeclared exception!
      try { 
        jSTerm0.standardizerTerm();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.listIterator();
      jSTerm0.makeVariable();
      JSTerm jSTerm1 = jSTerm0.call();
      // Undeclared exception!
      try { 
        jSTerm1.print();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      boolean boolean0 = jSTerm0.isGround();
      assertTrue(boolean0);
      
      jSTerm0.makeConstant();
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) jSTerm0;
      objectArray0[1] = (Object) jSTerm0;
      objectArray0[2] = (Object) jSTerm0;
      objectArray0[3] = (Object) jSTerm0;
      objectArray0[4] = (Object) jSTerm0;
      objectArray0[5] = (Object) jSTerm0;
      objectArray0[6] = (Object) jSTerm0;
      objectArray0[7] = (Object) jSTerm0;
      objectArray0[8] = (Object) jSTerm0;
      jSTerm0.toArray(objectArray0);
      jSTerm0.isFunction();
      JSTerm jSTerm1 = new JSTerm();
      jSTerm0.matches(jSTerm1);
      StringReader stringReader0 = new StringReader("iqC\"wd/('6g");
      stringReader0.skip((-139L));
      stringReader0.reset();
      stringReader0.markSupported();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Expecting variable name in term");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      char[] charArray0 = new char[0];
      streamTokenizer0.parseNumbers();
      stringReader0.read(charArray0);
      jSSubstitution0.stream();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution0);
      boolean boolean0 = jSTerm1.equals(jSTerm0);
      assertTrue(boolean0);
      
      JSTerm jSTerm2 = jSTerm0.standardizerTerm();
      JSTerm jSTerm3 = jSTerm0.cloneT();
      JSTerm jSTerm4 = jSTerm0.standardizerTerm();
      JSJshopVars.backquote = 0;
      jSTerm2.makeConstant();
      assertEquals(1, jSTerm0.size());
      
      JSTerm jSTerm5 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution1 = jSTerm2.matches(jSTerm5, jSSubstitution0);
      assertFalse(jSTerm2.isEval());
      assertNotSame(jSTerm2, jSTerm4);
      assertNotSame(jSTerm0, jSTerm3);
      assertFalse(jSTerm2.isFunction());
      assertTrue(jSSubstitution1.fail());
      assertTrue(jSTerm2.isConstant());
      assertFalse(jSTerm2.isVariable());
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.makeConstant();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm0.applySubstitutionT(jSSubstitution0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.makeVariable();
      jSTerm0.makeFunction();
      assertTrue(jSTerm0.isFunction());
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      StringReader stringReader0 = new StringReader("CD][ct,");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.isConstant();
      JSTerm jSTerm1 = jSTerm0.call();
      jSTerm1.isGround();
      // Undeclared exception!
      try { 
        CharBuffer.allocate((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.makeConstant();
      // Undeclared exception!
      try { 
        jSTerm0.cloneT();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSTerm jSTerm1 = new JSTerm();
      JSSubstitution jSSubstitution0 = jSTerm0.matches(jSTerm1);
      assertTrue(jSSubstitution0.fail());
      
      JSJshopVars.percent = (-2595);
      jSTerm0.makeEval(false);
      jSTerm0.isConstant();
      assertFalse(jSTerm0.isEval());
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.parallelStream();
      // Undeclared exception!
      try { 
        jSTerm0.toStr();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSTerm jSTerm1 = new JSTerm();
      jSTerm0.removeAll(jSTerm1);
      JSJshopVars.lessT = 344;
      JSTerm jSTerm2 = new JSTerm();
      JSJshopVars.leftBrac = 0;
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.retainAll(jSTerm1);
      jSTerm1.matches(jSTerm2, jSSubstitution0);
      jSTerm0.listIterator(0);
      JSJshopVars.colon = 0;
      jSTerm1.makeVariable();
      // Undeclared exception!
      try { 
        jSTerm0.matches(jSTerm1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.isGround();
      StreamTokenizer streamTokenizer0 = null;
      // Undeclared exception!
      try { 
        jSTerm0.parseList((StreamTokenizer) null);
        fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm0.cloneT();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Expecting elements of the list");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      char[] charArray0 = new char[3];
      charArray0[0] = '1';
      charArray0[1] = '=';
      charArray0[2] = 'f';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      stringReader0.read(charBuffer0);
      streamTokenizer0.commentChar((-2090));
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.add((Object) "Expecting elements of the list");
      jSTerm0.toStr();
      jSTerm0.standardizerTerm();
      assertEquals("[ecting, Expecting elements of the list]", jSTerm0.toString());
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm0.call();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("JSTerm");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.commentChar(2);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      jSTerm0.removeAll(jSTerm1);
      jSTerm0.isVariable();
      jSTerm0.makeEval(true);
      jSTerm0.makeEval(false);
      jSTerm0.isFunction();
      jSTerm0.makeConstant();
      assertTrue(jSTerm0.isConstant());
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.isConstant();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.isGround();
      jSSubstitution0.addElement(jSTerm0);
      // Undeclared exception!
      try { 
        jSTerm0.applySubstitutionT(jSSubstitution0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = null;
      try {
        jSTerm0 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      JSTerm jSTerm0 = null;
      try {
        jSTerm0 = new JSTerm((StreamTokenizer) null);
        fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSJshopVars.whiteSpace = 2353;
      StringReader stringReader0 = new StringReader("CED-:4^mv");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.makeVariable();
      JSTerm jSTerm1 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm0.applySubstitutionT((JSSubstitution) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSTerm jSTerm1 = new JSTerm();
      JSJshopVars.whiteSpace = (-474);
      jSTerm0.removeElement(jSTerm1);
      int int0 = 96;
      jSTerm0.makeEval(false);
      // Undeclared exception!
      try { 
        jSTerm1.set(47, jSTerm0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: 47
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.isVariable();
      JSTerm jSTerm1 = new JSTerm();
      jSTerm0.equals(jSTerm1);
      StreamTokenizer streamTokenizer0 = null;
      try {
        streamTokenizer0 = new StreamTokenizer((Reader) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StreamTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSTerm jSTerm1 = new JSTerm();
      int int0 = 660;
      JSJshopVars.backquote = 660;
      jSTerm0.equals(jSTerm1);
      // Undeclared exception!
      try { 
        jSTerm0.print();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm0.print();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }
}
