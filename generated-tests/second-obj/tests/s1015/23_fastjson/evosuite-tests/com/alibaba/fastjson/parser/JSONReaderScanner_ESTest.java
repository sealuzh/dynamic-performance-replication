/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 03:28:49 GMT 2018
 */

package com.alibaba.fastjson.parser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.alibaba.fastjson.parser.JSONLexerBase;
import com.alibaba.fastjson.parser.JSONReaderScanner;
import com.alibaba.fastjson.parser.SymbolTable;
import java.io.CharArrayReader;
import java.io.PipedReader;
import java.math.BigDecimal;
import java.util.Calendar;
import java.util.Collection;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.UUID;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONReaderScanner_ESTest extends JSONReaderScanner_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      JSONReaderScanner jSONReaderScanner0 = null;
      try {
        jSONReaderScanner0 = new JSONReaderScanner(pipedReader0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Pipe not connected
         //
         verifyException("com.alibaba.fastjson.parser.JSONReaderScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("\":n/c%'1Ev");
      jSONReaderScanner0.stringVal();
      jSONReaderScanner0.close();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.stringVal();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONReaderScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("TODO");
      // Undeclared exception!
      try { 
        jSONReaderScanner0.numberString();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.alibaba.fastjson.parser.JSONReaderScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 70);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.arrayCopy(70, charArray0, 70, 83);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("");
      jSONReaderScanner0.isEOF();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.decimalValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.alibaba.fastjson.parser.JSONReaderScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("", 16384);
      char char0 = jSONReaderScanner0.charAt(2660);
      assertEquals('\u001A', char0);
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      linkedList0.poll();
      LinkedList<Locale> linkedList1 = new LinkedList<Locale>();
      Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedList1);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Locale locale0 = Locale.CANADA;
      Locale locale1 = Locale.CHINESE;
      locale1.stripExtensions();
      int int0 = Calendar.WEEK_OF_YEAR;
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 70);
      String string0 = jSONReaderScanner0.stringVal();
      assertEquals("", string0);
      
      int int1 = jSONReaderScanner0.indexOf('|', 70);
      assertEquals((-1), int1);
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[1] = '2';
      charArray0[2] = '\u0000';
      charArray0[3] = 'j';
      charArray0[4] = 'g';
      charArray0[5] = 'A';
      charArray0[5] = 'U';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 161);
      assertNotNull(jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertArrayEquals(new char[] {'\u0000', '2', '\u0000', 'j', 'g', 'U', '\u0000'}, charArray0);
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals("", jSONReaderScanner0.info());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      
      double double0 = jSONReaderScanner0.scanDouble('\u0000');
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new char[] {'\u0000', '2', '\u0000', 'j', 'g', 'U', '\u0000'}, charArray0);
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals("", jSONReaderScanner0.info());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      
      // Undeclared exception!
      try { 
        jSONReaderScanner0.subString(9, (-1081));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -1081
         //
         verifyException("com.alibaba.fastjson.parser.JSONReaderScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ".");
      assertFalse(boolean0);
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(".", 1418);
      assertNotNull(jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals('.', jSONReaderScanner0.getCurrent());
      assertEquals(1418, jSONReaderScanner0.getFeatures());
      assertEquals("", jSONReaderScanner0.info());
      assertFalse(jSONReaderScanner0.isEOF());
      
      char char0 = jSONReaderScanner0.next();
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals('\u001A', char0);
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals('\u001A', jSONReaderScanner0.getCurrent());
      assertEquals(1418, jSONReaderScanner0.getFeatures());
      assertEquals("", jSONReaderScanner0.info());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("\":n/c%'1Ev");
      assertNotNull(jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals('\"', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals("", jSONReaderScanner0.info());
      assertFalse(jSONReaderScanner0.isEOF());
      
      jSONReaderScanner0.close();
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals('\"', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals("", jSONReaderScanner0.info());
      
      // Undeclared exception!
      try { 
        jSONReaderScanner0.copyTo(1501, 1501, (char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("R", 359);
      assertNotNull(jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(359, jSONReaderScanner0.getFeatures());
      assertEquals("", jSONReaderScanner0.info());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('R', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      
      byte[] byteArray0 = jSONReaderScanner0.bytesValue();
      assertNotNull(byteArray0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(359, jSONReaderScanner0.getFeatures());
      assertEquals("", jSONReaderScanner0.info());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('R', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = '3';
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 39);
      assertNotNull(jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertArrayEquals(new char[] {'3', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals("", jSONReaderScanner0.info());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('3', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      
      jSONReaderScanner0.nextToken((int) '3');
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertArrayEquals(new char[] {'3', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(2, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals("", jSONReaderScanner0.info());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      
      Locale locale0 = Locale.ROOT;
      assertNotNull(locale0);
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.toString());
      
      Locale locale1 = Locale.ROOT;
      assertNotNull(locale1);
      assertSame(locale1, locale0);
      assertEquals("", locale1.toString());
      assertEquals("", locale1.getCountry());
      assertEquals("", locale1.getISO3Language());
      assertEquals("", locale1.getLanguage());
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.getISO3Country());
      
      int int0 = Calendar.WEEK_OF_YEAR;
      assertEquals(3, int0);
      
      System.setCurrentTimeMillis(5944107969236155580L);
      String string0 = jSONReaderScanner0.numberString();
      assertNotNull(string0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals("3", string0);
      assertArrayEquals(new char[] {'3', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(2, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals("", jSONReaderScanner0.info());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("R");
      assertNotNull(jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals("", jSONReaderScanner0.info());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('R', jSONReaderScanner0.getCurrent());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      
      boolean boolean0 = jSONReaderScanner0.isBlankInput();
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertFalse(boolean0);
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals("", jSONReaderScanner0.info());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('R', jSONReaderScanner0.getCurrent());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      
      boolean boolean1 = jSONReaderScanner0.isEOF();
      assertTrue(boolean1 == boolean0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertFalse(boolean1);
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals("", jSONReaderScanner0.info());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('R', jSONReaderScanner0.getCurrent());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = 'X';
      charArray0[1] = 'P';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'X', 'P'}, charArray0);
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArrayReader0, 144);
      assertNotNull(jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertArrayEquals(new char[] {'X', 'P'}, charArray0);
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals('X', jSONReaderScanner0.getCurrent());
      assertEquals("", jSONReaderScanner0.info());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(144, jSONReaderScanner0.getFeatures());
      
      UUID uUID0 = jSONReaderScanner0.scanFieldUUID(charArray0);
      assertNull(uUID0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertArrayEquals(new char[] {'X', 'P'}, charArray0);
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals('X', jSONReaderScanner0.getCurrent());
      assertEquals("", jSONReaderScanner0.info());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(144, jSONReaderScanner0.getFeatures());
      
      // Undeclared exception!
      try { 
        jSONReaderScanner0.copyTo(144, 144, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("InternFieldNames");
      assertNotNull(jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals('I', jSONReaderScanner0.getCurrent());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.token());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals("", jSONReaderScanner0.info());
      
      char[] charArray0 = new char[6];
      charArray0[0] = 'X';
      charArray0[1] = '4';
      charArray0[2] = 'r';
      charArray0[3] = 'j';
      charArray0[4] = 'c';
      charArray0[5] = '6';
      float float0 = jSONReaderScanner0.scanFieldFloat(charArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertEquals(0.0F, float0, 0.01F);
      assertArrayEquals(new char[] {'X', '4', 'r', 'j', 'c', '6'}, charArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals('I', jSONReaderScanner0.getCurrent());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals("", jSONReaderScanner0.info());
      
      String string0 = jSONReaderScanner0.subString(4, 988);
      assertNotNull(string0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertEquals("rnFieldNames\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string0);
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals('I', jSONReaderScanner0.getCurrent());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals("", jSONReaderScanner0.info());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("%EkeDwH0dD*sh@Q");
      assertNotNull(jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.token());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals("", jSONReaderScanner0.info());
      assertEquals('%', jSONReaderScanner0.getCurrent());
      
      SymbolTable symbolTable0 = new SymbolTable(2045);
      assertNotNull(symbolTable0);
      
      String string0 = jSONReaderScanner0.addSymbol(79, 2045, 79, symbolTable0);
      assertNotNull(string0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.token());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals("", jSONReaderScanner0.info());
      assertEquals('%', jSONReaderScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 0, 0);
      assertNotNull(jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals("", jSONReaderScanner0.info());
      assertEquals(0, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertTrue(jSONReaderScanner0.isEOF());
      
      String string0 = jSONReaderScanner0.subString(76, 116);
      assertNotNull(string0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals("", jSONReaderScanner0.info());
      assertEquals(0, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertTrue(jSONReaderScanner0.isEOF());
      
      boolean boolean0 = jSONReaderScanner0.charArrayCompare(charArray0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertTrue(boolean0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals("", jSONReaderScanner0.info());
      assertEquals(0, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertTrue(jSONReaderScanner0.isEOF());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      LinkedList<Locale> linkedList0 = new LinkedList<Locale>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      System.setCurrentTimeMillis(86);
      char[] charArray0 = new char[3];
      charArray0[0] = '\u009C';
      charArray0[1] = '\u009C';
      charArray0[2] = '\u009C';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 3155);
      assertNotNull(jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertArrayEquals(new char[] {'\u009C', '\u009C', '\u009C'}, charArray0);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals("", jSONReaderScanner0.info());
      assertEquals('\u009C', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      
      int int0 = jSONReaderScanner0.indexOf('w', 2930);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals((-1), int0);
      assertArrayEquals(new char[] {'\u009C', '\u009C', '\u009C'}, charArray0);
      assertTrue(jSONReaderScanner0.isEOF());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals("", jSONReaderScanner0.info());
      assertEquals('\u009C', jSONReaderScanner0.getCurrent());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      
      CharArrayReader charArrayReader0 = null;
      try {
        charArrayReader0 = new CharArrayReader(charArray0, (-1804), 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.CharArrayReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("a}&V75{y$`z", (-1));
      assertNotNull(jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals("", jSONReaderScanner0.info());
      assertEquals("", jSONReaderScanner0.stringDefaultValue());
      assertEquals((-1), jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals('a', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      
      // Undeclared exception!
      try { 
        jSONReaderScanner0.sub_chars((-1), 26);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("qr0/%0E'`T", 20);
      assertNotNull(jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals('q', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals("", jSONReaderScanner0.info());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(20, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat());
      
      // Undeclared exception!
      try { 
        jSONReaderScanner0.sub_chars(2010, (-3353));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -3353
         //
         verifyException("com.alibaba.fastjson.parser.JSONReaderScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      int int0 = 2515;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("\":n/c%'1Ev", 2515);
      assertNotNull(jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals("", jSONReaderScanner0.info());
      assertEquals(2515, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('\"', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      
      // Undeclared exception!
      try { 
        jSONReaderScanner0.decimalValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.alibaba.fastjson.parser.JSONReaderScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      char[] charArray0 = new char[4];
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      charArray0[2] = 'U';
      charArray0[0] = '\u0089';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 86, 86);
      assertNotNull(jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertArrayEquals(new char[] {'\u0089', '\u0000', 'U', '\u0000'}, charArray0);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(86, jSONReaderScanner0.getFeatures());
      assertEquals("", jSONReaderScanner0.info());
      assertEquals('\u0089', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      assertFalse(boolean0);
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("<Tj");
      assertNotNull(jSONReaderScanner1);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals(0, jSONReaderScanner1.pos());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertEquals("", jSONReaderScanner1.info());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals('<', jSONReaderScanner1.getCurrent());
      
      char char0 = jSONReaderScanner0.next();
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner1));
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals('\u0000', char0);
      assertNotSame(jSONReaderScanner0, jSONReaderScanner1);
      assertArrayEquals(new char[] {'\u0089', '\u0000', 'U', '\u0000'}, charArray0);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(86, jSONReaderScanner0.getFeatures());
      assertEquals("", jSONReaderScanner0.info());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      
      Locale locale0 = Locale.ROOT;
      assertNotNull(locale0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      
      Locale locale1 = Locale.ROOT;
      assertNotNull(locale1);
      assertSame(locale1, locale0);
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getISO3Language());
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.getLanguage());
      assertEquals("", locale1.toString());
      assertEquals("", locale1.getCountry());
      
      jSONReaderScanner1.setLocale(locale1);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertSame(locale1, locale0);
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals(0, jSONReaderScanner1.pos());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertEquals("", jSONReaderScanner1.info());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals('<', jSONReaderScanner1.getCurrent());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getISO3Language());
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.getLanguage());
      assertEquals("", locale1.toString());
      assertEquals("", locale1.getCountry());
      
      char[] charArray1 = jSONReaderScanner0.sub_chars(0, 2);
      assertNotNull(charArray1);
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner1));
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotSame(charArray0, charArray1);
      assertNotSame(jSONReaderScanner0, jSONReaderScanner1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'\u0089', '\u0000', 'U', '\u0000'}, charArray0);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(86, jSONReaderScanner0.getFeatures());
      assertEquals("", jSONReaderScanner0.info());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      
      int int0 = jSONReaderScanner1.indexOf('p', 119);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertEquals((-1), int0);
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertTrue(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals(0, jSONReaderScanner1.pos());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertEquals("", jSONReaderScanner1.info());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertEquals('<', jSONReaderScanner1.getCurrent());
      
      jSONReaderScanner1.close();
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertTrue(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals(0, jSONReaderScanner1.pos());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertEquals("", jSONReaderScanner1.info());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertEquals('<', jSONReaderScanner1.getCurrent());
      
      String string0 = jSONReaderScanner0.stringVal();
      assertNotNull(string0);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner1));
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals("", string0);
      assertNotSame(charArray0, charArray1);
      assertNotSame(jSONReaderScanner0, jSONReaderScanner1);
      assertArrayEquals(new char[] {'\u0089', '\u0000', 'U', '\u0000'}, charArray0);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(86, jSONReaderScanner0.getFeatures());
      assertEquals("", jSONReaderScanner0.info());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = '9';
      charArray0[0] = '~';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 'G', 'G');
      assertNotNull(jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertArrayEquals(new char[] {'~', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals("", jSONReaderScanner0.info());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals('~', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(71, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      
      Locale locale0 = Locale.ROOT;
      assertNotNull(locale0);
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getCountry());
      
      Locale locale1 = locale0.stripExtensions();
      assertNotNull(locale1);
      assertSame(locale0, locale1);
      assertSame(locale1, locale0);
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale1.toString());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.getISO3Language());
      assertEquals("", locale1.getLanguage());
      assertEquals("", locale1.getCountry());
      
      jSONReaderScanner0.setLocale(locale0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertSame(locale0, locale1);
      assertArrayEquals(new char[] {'~', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals("", jSONReaderScanner0.info());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals('~', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(71, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getCountry());
      
      char[] charArray1 = jSONReaderScanner0.sub_chars('G', 38);
      assertNotNull(charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'~', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals("", jSONReaderScanner0.info());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals('~', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(71, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      
      int int0 = jSONReaderScanner0.indexOf('\u0000', 76);
      assertFalse(charArray0.equals((Object)charArray1));
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(76, int0);
      assertNotSame(charArray0, charArray1);
      assertArrayEquals(new char[] {'~', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals("", jSONReaderScanner0.info());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals('~', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(71, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      
      int int1 = jSONReaderScanner0.indexOf('_', 76);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(int1 == int0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals((-1), int1);
      assertNotSame(charArray0, charArray1);
      assertArrayEquals(new char[] {'~', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals("", jSONReaderScanner0.info());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals('~', jSONReaderScanner0.getCurrent());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(71, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      
      // Undeclared exception!
      try { 
        jSONReaderScanner0.sub_chars((-523), (-523));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -523
         //
         verifyException("com.alibaba.fastjson.parser.JSONReaderScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      char[] charArray0 = new char[4];
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      charArray0[0] = '-';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 128, 151);
      assertNotNull(jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertArrayEquals(new char[] {'-', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(151, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals('-', jSONReaderScanner0.getCurrent());
      assertEquals("", jSONReaderScanner0.info());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      jSONReaderScanner0.nextToken(128);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertArrayEquals(new char[] {'-', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(2, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(151, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals("", jSONReaderScanner0.info());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Locale locale0 = Locale.ROOT;
      assertNotNull(locale0);
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getCountry());
      
      Locale locale1 = Locale.ROOT;
      assertNotNull(locale1);
      assertSame(locale1, locale0);
      assertEquals("", locale1.toString());
      assertEquals("", locale1.getCountry());
      assertEquals("", locale1.getISO3Language());
      assertEquals("", locale1.getLanguage());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getVariant());
      
      jSONReaderScanner0.np = 192;
      assertEquals(2, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(151, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals("", jSONReaderScanner0.info());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      
      // Undeclared exception!
      try { 
        jSONReaderScanner0.decimalValue();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      char[] charArray0 = new char[5];
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      charArray0[0] = '\u0019';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, '\u0019', 95);
      assertNotNull(jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertArrayEquals(new char[] {'\u0019', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals("", jSONReaderScanner0.info());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(95, jSONReaderScanner0.getFeatures());
      assertEquals('\u0019', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      
      Locale locale0 = Locale.ROOT;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      
      LinkedHashSet<Locale> linkedHashSet0 = new LinkedHashSet<Locale>();
      assertNotNull(linkedHashSet0);
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      
      Locale locale1 = Locale.ITALY;
      assertNotNull(locale1);
      assertFalse(locale1.equals((Object)locale0));
      assertNotSame(locale1, locale0);
      assertEquals("ita", locale1.getISO3Language());
      assertEquals("ITA", locale1.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertEquals("it", locale1.getLanguage());
      assertEquals("IT", locale1.getCountry());
      assertEquals("it_IT", locale1.toString());
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string0 = locale1.toLanguageTag();
      assertNotNull(string0);
      assertFalse(locale1.equals((Object)locale0));
      assertEquals("it-IT", string0);
      assertNotSame(locale1, locale0);
      assertEquals("ita", locale1.getISO3Language());
      assertEquals("ITA", locale1.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertEquals("it", locale1.getLanguage());
      assertEquals("IT", locale1.getCountry());
      assertEquals("it_IT", locale1.toString());
      
      LinkedList<Locale> linkedList0 = new LinkedList<Locale>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      LinkedList<Locale.LanguageRange> linkedList1 = new LinkedList<Locale.LanguageRange>();
      assertNotNull(linkedList1);
      assertEquals(0, linkedList1.size());
      
      boolean boolean2 = jSONReaderScanner0.isBlankInput();
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertFalse(boolean2);
      assertArrayEquals(new char[] {'\u0019', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals("", jSONReaderScanner0.info());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(95, jSONReaderScanner0.getFeatures());
      assertEquals('\u0019', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      
      Locale locale2 = Locale.CANADA;
      assertNotNull(locale2);
      assertFalse(locale2.equals((Object)locale1));
      assertFalse(locale2.equals((Object)locale0));
      assertNotSame(locale2, locale1);
      assertNotSame(locale2, locale0);
      assertEquals("eng", locale2.getISO3Language());
      assertEquals("CAN", locale2.getISO3Country());
      assertEquals("en_CA", locale2.toString());
      assertEquals("en", locale2.getLanguage());
      assertEquals("", locale2.getVariant());
      assertEquals("CA", locale2.getCountry());
      
      Locale locale3 = Locale.CHINESE;
      assertNotNull(locale3);
      assertFalse(locale3.equals((Object)locale1));
      assertFalse(locale3.equals((Object)locale2));
      assertFalse(locale3.equals((Object)locale0));
      assertNotSame(locale3, locale1);
      assertNotSame(locale3, locale2);
      assertNotSame(locale3, locale0);
      assertEquals("zho", locale3.getISO3Language());
      assertEquals("zh", locale3.toString());
      assertEquals("", locale3.getISO3Country());
      assertEquals("zh", locale3.getLanguage());
      assertEquals("", locale3.getVariant());
      assertEquals("", locale3.getCountry());
      
      Locale locale4 = Locale.US;
      assertNotNull(locale4);
      assertFalse(locale4.equals((Object)locale0));
      assertFalse(locale4.equals((Object)locale2));
      assertFalse(locale4.equals((Object)locale1));
      assertFalse(locale4.equals((Object)locale3));
      assertNotSame(locale4, locale0);
      assertNotSame(locale4, locale2);
      assertNotSame(locale4, locale1);
      assertNotSame(locale4, locale3);
      assertEquals("en_US", locale4.toString());
      assertEquals("US", locale4.getCountry());
      assertEquals("eng", locale4.getISO3Language());
      assertEquals("en", locale4.getLanguage());
      assertEquals("", locale4.getVariant());
      assertEquals("USA", locale4.getISO3Country());
      
      Locale locale5 = Locale.ROOT;
      assertNotNull(locale5);
      assertFalse(locale5.equals((Object)locale1));
      assertFalse(locale5.equals((Object)locale2));
      assertFalse(locale5.equals((Object)locale4));
      assertFalse(locale5.equals((Object)locale3));
      assertSame(locale5, locale0);
      assertNotSame(locale5, locale1);
      assertNotSame(locale5, locale2);
      assertNotSame(locale5, locale4);
      assertNotSame(locale5, locale3);
      assertEquals("", locale5.getISO3Language());
      assertEquals("", locale5.getISO3Country());
      assertEquals("", locale5.getVariant());
      assertEquals("", locale5.getCountry());
      assertEquals("", locale5.getLanguage());
      assertEquals("", locale5.toString());
      
      Locale locale6 = Locale.ROOT;
      assertNotNull(locale6);
      assertFalse(locale6.equals((Object)locale3));
      assertFalse(locale6.equals((Object)locale2));
      assertFalse(locale6.equals((Object)locale1));
      assertFalse(locale6.equals((Object)locale4));
      assertNotSame(locale6, locale3);
      assertNotSame(locale6, locale2);
      assertNotSame(locale6, locale1);
      assertNotSame(locale6, locale4);
      assertSame(locale6, locale0);
      assertSame(locale6, locale5);
      assertEquals("", locale6.getVariant());
      assertEquals("", locale6.toString());
      assertEquals("", locale6.getISO3Country());
      assertEquals("", locale6.getISO3Language());
      assertEquals("", locale6.getCountry());
      assertEquals("", locale6.getLanguage());
      
      int int0 = Calendar.WEEK_OF_YEAR;
      assertEquals(3, int0);
      
      jSONReaderScanner0.scanIdent();
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertArrayEquals(new char[] {'\u0019', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals("", jSONReaderScanner0.info());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(95, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(18, jSONReaderScanner0.token());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      
      String string1 = jSONReaderScanner0.numberString();
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals("\u0019", string1);
      assertArrayEquals(new char[] {'\u0019', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals("", jSONReaderScanner0.info());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(95, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(18, jSONReaderScanner0.token());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      
      // Undeclared exception!
      try { 
        jSONReaderScanner0.sub_chars((-138), (-138));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -138
         //
         verifyException("com.alibaba.fastjson.parser.JSONReaderScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      char[] charArray0 = new char[4];
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      charArray0[0] = 'U';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 86, 86);
      assertNotNull(jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertArrayEquals(new char[] {'U', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals("", jSONReaderScanner0.info());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(86, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('U', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      jSONReaderScanner0.nextToken(86);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertArrayEquals(new char[] {'U', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals("", jSONReaderScanner0.info());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(86, jSONReaderScanner0.getFeatures());
      assertEquals(1, jSONReaderScanner0.token());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      assertNotNull(fileSystemHandling1);
      assertFalse(fileSystemHandling1.equals((Object)fileSystemHandling0));
      
      LinkedList<Locale> linkedList1 = new LinkedList<Locale>();
      assertNotNull(linkedList1);
      assertEquals(0, linkedList1.size());
      
      Locale locale0 = Locale.ROOT;
      assertNotNull(locale0);
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.toString());
      
      char[] charArray1 = jSONReaderScanner0.sub_chars(0, 0);
      assertNotNull(charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'U', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals("", jSONReaderScanner0.info());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(86, jSONReaderScanner0.getFeatures());
      assertEquals(1, jSONReaderScanner0.token());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      
      int int0 = Calendar.WEEK_OF_YEAR;
      assertEquals(3, int0);
      
      byte[] byteArray0 = jSONReaderScanner0.bytesValue();
      assertNotNull(byteArray0);
      assertFalse(charArray0.equals((Object)charArray1));
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotSame(charArray0, charArray1);
      assertArrayEquals(new char[] {'U', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals("", jSONReaderScanner0.info());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(86, jSONReaderScanner0.getFeatures());
      assertEquals(1, jSONReaderScanner0.token());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      
      String string0 = jSONReaderScanner0.stringVal();
      assertNotNull(string0);
      assertFalse(charArray0.equals((Object)charArray1));
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals("", string0);
      assertNotSame(charArray0, charArray1);
      assertArrayEquals(new char[] {'U', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals("", jSONReaderScanner0.info());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(86, jSONReaderScanner0.getFeatures());
      assertEquals(1, jSONReaderScanner0.token());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      
      // Undeclared exception!
      try { 
        jSONReaderScanner0.decimalValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.alibaba.fastjson.parser.JSONReaderScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      char[] charArray0 = new char[3];
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      charArray0[2] = 'U';
      charArray0[0] = '\u0089';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 86, 86);
      assertNotNull(jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertArrayEquals(new char[] {'\u0089', '\u0000', 'U'}, charArray0);
      assertEquals('\u0089', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals("", jSONReaderScanner0.info());
      assertEquals(86, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      LinkedList<Locale> linkedList1 = new LinkedList<Locale>();
      assertNotNull(linkedList1);
      assertEquals(0, linkedList1.size());
      
      Locale locale0 = Locale.lookup(linkedList0, linkedList1);
      assertNull(locale0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, linkedList1.size());
      
      Locale locale1 = Locale.ROOT;
      assertNotNull(locale1);
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getISO3Language());
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.getLanguage());
      assertEquals("", locale1.toString());
      assertEquals("", locale1.getCountry());
      
      Locale locale2 = Locale.ROOT;
      assertNotNull(locale2);
      assertSame(locale2, locale1);
      assertEquals("", locale2.toString());
      assertEquals("", locale2.getISO3Country());
      assertEquals("", locale2.getVariant());
      assertEquals("", locale2.getISO3Language());
      assertEquals("", locale2.getLanguage());
      assertEquals("", locale2.getCountry());
      
      char[] charArray1 = jSONReaderScanner0.sub_chars(17, 17);
      assertNotNull(charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'\u0089', '\u0000', 'U'}, charArray0);
      assertEquals('\u0089', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals("", jSONReaderScanner0.info());
      assertEquals(86, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      
      int int0 = Calendar.WEEK_OF_YEAR;
      assertEquals(3, int0);
      
      byte[] byteArray0 = jSONReaderScanner0.bytesValue();
      assertNotNull(byteArray0);
      assertFalse(charArray0.equals((Object)charArray1));
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotSame(charArray0, charArray1);
      assertArrayEquals(new char[] {'\u0089', '\u0000', 'U'}, charArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals('\u0089', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals("", jSONReaderScanner0.info());
      assertEquals(86, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      
      boolean boolean0 = jSONReaderScanner0.matchField(charArray0);
      assertFalse(charArray0.equals((Object)charArray1));
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertTrue(boolean0);
      assertNotSame(charArray0, charArray1);
      assertArrayEquals(new char[] {'\u0089', '\u0000', 'U'}, charArray0);
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals(20, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals("", jSONReaderScanner0.info());
      assertEquals('\u001A', jSONReaderScanner0.getCurrent());
      assertEquals(86, jSONReaderScanner0.getFeatures());
      
      System.setCurrentTimeMillis(17);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = 'J';
      char char0 = 'u';
      charArray0[1] = 'u';
      charArray0[2] = 'J';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 4569, 2651);
      assertNotNull(jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertArrayEquals(new char[] {'J', 'u', 'J'}, charArray0);
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals("", jSONReaderScanner0.info());
      assertEquals('J', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(2651, jSONReaderScanner0.getFeatures());
      
      jSONReaderScanner0.nextToken((int) (byte)107);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertArrayEquals(new char[] {'J', 'u', 'J'}, charArray0);
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals("", jSONReaderScanner0.info());
      assertFalse(jSONReaderScanner0.isEOF());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(1, jSONReaderScanner0.token());
      assertEquals('u', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(2651, jSONReaderScanner0.getFeatures());
      
      jSONReaderScanner0.scanIdent();
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertArrayEquals(new char[] {'J', 'u', 'J'}, charArray0);
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals("", jSONReaderScanner0.info());
      assertEquals('\u001A', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals(18, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(2651, jSONReaderScanner0.getFeatures());
      
      char char1 = jSONReaderScanner0.next();
      assertFalse(char1 == char0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals('\u001A', char1);
      assertArrayEquals(new char[] {'J', 'u', 'J'}, charArray0);
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals("", jSONReaderScanner0.info());
      assertEquals('\u001A', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals(18, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(2651, jSONReaderScanner0.getFeatures());
      
      long long0 = JSONLexerBase.MULTMIN_RADIX_TEN;
      assertEquals((-922337203685477580L), long0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        jSONReaderScanner0.decimalValue();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 2232, (-1005));
      assertNotNull(jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals((-1005), jSONReaderScanner0.getFeatures());
      assertEquals("", jSONReaderScanner0.info());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals("", jSONReaderScanner0.stringDefaultValue());
      
      jSONReaderScanner0.nextToken((-1005));
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals((-1005), jSONReaderScanner0.getFeatures());
      assertEquals("", jSONReaderScanner0.info());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(20, jSONReaderScanner0.token());
      assertEquals("", jSONReaderScanner0.stringDefaultValue());
      
      int int0 = Calendar.WEEK_OF_YEAR;
      assertEquals(3, int0);
      
      jSONReaderScanner0.scanIdent();
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals((-1005), jSONReaderScanner0.getFeatures());
      assertEquals("", jSONReaderScanner0.info());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals(18, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals("", jSONReaderScanner0.stringDefaultValue());
      
      long long0 = jSONReaderScanner0.longValue();
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals((-48L), long0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals((-1005), jSONReaderScanner0.getFeatures());
      assertEquals("", jSONReaderScanner0.info());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals(18, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals("", jSONReaderScanner0.stringDefaultValue());
      
      // Undeclared exception!
      try { 
        jSONReaderScanner0.decimalValue();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      LinkedList<Locale> linkedList0 = new LinkedList<Locale>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'S';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 86, 72);
      assertNotNull(jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertArrayEquals(new char[] {'S', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals('S', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(72, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals("", jSONReaderScanner0.info());
      
      LinkedList<Locale.LanguageRange> linkedList1 = new LinkedList<Locale.LanguageRange>();
      assertNotNull(linkedList1);
      assertEquals(0, linkedList1.size());
      
      jSONReaderScanner0.nextToken(72);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertArrayEquals(new char[] {'S', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(18, jSONReaderScanner0.token());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals(72, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals("", jSONReaderScanner0.info());
      
      LinkedList<Locale> linkedList2 = new LinkedList<Locale>();
      assertNotNull(linkedList2);
      assertTrue(linkedList2.equals((Object)linkedList0));
      assertEquals(0, linkedList2.size());
      
      LinkedList<Locale.LanguageRange> linkedList3 = new LinkedList<Locale.LanguageRange>();
      assertNotNull(linkedList3);
      assertTrue(linkedList3.equals((Object)linkedList1));
      assertEquals(0, linkedList3.size());
      
      Locale locale0 = Locale.lookup(linkedList3, linkedList0);
      assertNull(locale0);
      assertTrue(linkedList0.equals((Object)linkedList2));
      assertTrue(linkedList3.equals((Object)linkedList1));
      assertNotSame(linkedList0, linkedList2);
      assertNotSame(linkedList3, linkedList1);
      assertEquals(0, linkedList0.size());
      assertEquals(0, linkedList3.size());
      
      Locale locale1 = Locale.CHINESE;
      assertNotNull(locale1);
      assertEquals("zh", locale1.getLanguage());
      assertEquals("", locale1.getCountry());
      assertEquals("", locale1.getVariant());
      assertEquals("zho", locale1.getISO3Language());
      assertEquals("zh", locale1.toString());
      assertEquals("", locale1.getISO3Country());
      
      Locale locale2 = Locale.lookup(linkedList1, linkedList2);
      assertNull(locale2);
      assertTrue(linkedList1.equals((Object)linkedList3));
      assertTrue(linkedList2.equals((Object)linkedList0));
      assertNotSame(linkedList1, linkedList3);
      assertNotSame(linkedList2, linkedList0);
      assertEquals(0, linkedList1.size());
      assertEquals(0, linkedList2.size());
      
      Locale locale3 = Locale.ROOT;
      assertNotNull(locale3);
      assertFalse(locale3.equals((Object)locale1));
      assertNotSame(locale3, locale1);
      assertEquals("", locale3.getISO3Country());
      assertEquals("", locale3.getISO3Language());
      assertEquals("", locale3.getLanguage());
      assertEquals("", locale3.getVariant());
      assertEquals("", locale3.getCountry());
      assertEquals("", locale3.toString());
      
      Locale locale4 = Locale.ROOT;
      assertNotNull(locale4);
      assertFalse(locale4.equals((Object)locale1));
      assertSame(locale4, locale3);
      assertNotSame(locale4, locale1);
      assertEquals("", locale4.getVariant());
      assertEquals("", locale4.toString());
      assertEquals("", locale4.getLanguage());
      assertEquals("", locale4.getCountry());
      assertEquals("", locale4.getISO3Country());
      assertEquals("", locale4.getISO3Language());
      
      int int0 = Calendar.WEEK_OF_YEAR;
      assertEquals(3, int0);
      
      System.setCurrentTimeMillis(4147696707147271408L);
      String string0 = jSONReaderScanner0.numberString();
      assertNotNull(string0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals("", string0);
      assertArrayEquals(new char[] {'S', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(18, jSONReaderScanner0.token());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals(72, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals("", jSONReaderScanner0.info());
      
      boolean boolean0 = jSONReaderScanner0.isEOF();
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertFalse(boolean0);
      assertArrayEquals(new char[] {'S', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(18, jSONReaderScanner0.token());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals(72, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals("", jSONReaderScanner0.info());
      
      // Undeclared exception!
      try { 
        jSONReaderScanner0.arrayCopy(3, charArray0, 101, 101);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      LinkedList<Locale> linkedList0 = new LinkedList<Locale>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'S';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 86, 72);
      assertNotNull(jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertArrayEquals(new char[] {'S', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals("", jSONReaderScanner0.info());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(72, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals('S', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      
      jSONReaderScanner0.nextToken(72);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertArrayEquals(new char[] {'S', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals("", jSONReaderScanner0.info());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(18, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(72, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      
      LinkedList<Locale> linkedList1 = new LinkedList<Locale>();
      assertNotNull(linkedList1);
      assertTrue(linkedList1.equals((Object)linkedList0));
      assertEquals(0, linkedList1.size());
      
      LinkedList<Locale.LanguageRange> linkedList2 = new LinkedList<Locale.LanguageRange>();
      assertNotNull(linkedList2);
      assertEquals(0, linkedList2.size());
      
      Locale locale0 = Locale.lookup(linkedList2, linkedList0);
      assertNull(locale0);
      assertTrue(linkedList0.equals((Object)linkedList1));
      assertNotSame(linkedList0, linkedList1);
      assertEquals(0, linkedList0.size());
      assertEquals(0, linkedList2.size());
      
      Locale locale1 = Locale.CHINESE;
      assertNotNull(locale1);
      assertEquals("zh", locale1.getLanguage());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getCountry());
      assertEquals("zh", locale1.toString());
      assertEquals("", locale1.getVariant());
      assertEquals("zho", locale1.getISO3Language());
      
      Locale locale2 = Locale.ROOT;
      assertNotNull(locale2);
      assertFalse(locale2.equals((Object)locale1));
      assertNotSame(locale2, locale1);
      assertEquals("", locale2.toString());
      assertEquals("", locale2.getISO3Country());
      assertEquals("", locale2.getVariant());
      assertEquals("", locale2.getLanguage());
      assertEquals("", locale2.getISO3Language());
      assertEquals("", locale2.getCountry());
      
      Locale locale3 = Locale.ROOT;
      assertNotNull(locale3);
      assertFalse(locale3.equals((Object)locale1));
      assertSame(locale3, locale2);
      assertNotSame(locale3, locale1);
      assertEquals("", locale3.getISO3Country());
      assertEquals("", locale3.getISO3Language());
      assertEquals("", locale3.getLanguage());
      assertEquals("", locale3.getVariant());
      assertEquals("", locale3.getCountry());
      assertEquals("", locale3.toString());
      
      int int0 = Calendar.WEEK_OF_YEAR;
      assertEquals(3, int0);
      
      System.setCurrentTimeMillis(4147696707147271408L);
      String string0 = jSONReaderScanner0.numberString();
      assertNotNull(string0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals("", string0);
      assertArrayEquals(new char[] {'S', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals("", jSONReaderScanner0.info());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(18, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(72, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      
      char char0 = jSONReaderScanner0.next();
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals('\u0000', char0);
      assertArrayEquals(new char[] {'S', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals("", jSONReaderScanner0.info());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(18, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(72, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      
      boolean boolean0 = jSONReaderScanner0.isEOF();
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertFalse(boolean0);
      assertArrayEquals(new char[] {'S', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals("", jSONReaderScanner0.info());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(18, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(72, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      
      // Undeclared exception!
      try { 
        jSONReaderScanner0.decimalValue();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      char[] charArray0 = new char[0];
      int int0 = 26;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 26, 26);
      assertNotNull(jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertArrayEquals(new char[] {}, charArray0);
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(26, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals("", jSONReaderScanner0.info());
      
      jSONReaderScanner0.token = 26;
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(26, jSONReaderScanner0.getFeatures());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals("", jSONReaderScanner0.info());
      assertEquals(26, jSONReaderScanner0.token());
      
      // Undeclared exception!
      try { 
        jSONReaderScanner0.bytesValue();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TODO
         //
         verifyException("com.alibaba.fastjson.parser.JSONReaderScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      char[] charArray0 = new char[5];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 128, 95);
      assertNotNull(jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals("", jSONReaderScanner0.info());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals(95, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      jSONReaderScanner0.nextToken(128);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals("", jSONReaderScanner0.info());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals(95, jSONReaderScanner0.getFeatures());
      assertEquals(20, jSONReaderScanner0.token());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals('\u001A', jSONReaderScanner0.getCurrent());
      
      Locale locale0 = Locale.ROOT;
      assertNotNull(locale0);
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getISO3Language());
      
      LinkedHashSet<Locale> linkedHashSet0 = new LinkedHashSet<Locale>();
      assertNotNull(linkedHashSet0);
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      
      Locale locale1 = Locale.lookup(linkedList0, linkedHashSet0);
      assertNull(locale1);
      assertEquals(0, linkedList0.size());
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      
      char[] charArray1 = jSONReaderScanner0.sub_chars(128, 101);
      assertNotNull(charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals("", jSONReaderScanner0.info());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals(95, jSONReaderScanner0.getFeatures());
      assertEquals(20, jSONReaderScanner0.token());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals('\u001A', jSONReaderScanner0.getCurrent());
      
      boolean boolean1 = jSONReaderScanner0.matchField(charArray0);
      assertFalse(charArray0.equals((Object)charArray1));
      assertTrue(boolean1 == boolean0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertFalse(boolean1);
      assertNotSame(charArray0, charArray1);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals("", jSONReaderScanner0.info());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals(95, jSONReaderScanner0.getFeatures());
      assertEquals(20, jSONReaderScanner0.token());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals('\u001A', jSONReaderScanner0.getCurrent());
      
      System.setCurrentTimeMillis(128);
      char[] charArray2 = new char[3];
      assertFalse(charArray2.equals((Object)charArray1));
      assertFalse(charArray2.equals((Object)charArray0));
      
      charArray2[0] = '\f';
      charArray2[1] = '\f';
      charArray2[2] = '\f';
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(charArray2, 11);
      assertNotNull(jSONReaderScanner1);
      assertFalse(charArray2.equals((Object)charArray1));
      assertFalse(charArray2.equals((Object)charArray0));
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertArrayEquals(new char[] {'\f', '\f', '\f'}, charArray2);
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals('\f', jSONReaderScanner1.getCurrent());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals("", jSONReaderScanner1.info());
      assertEquals(0, jSONReaderScanner1.pos());
      
      boolean boolean2 = jSONReaderScanner1.isBlankInput();
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(charArray2.equals((Object)charArray1));
      assertFalse(charArray2.equals((Object)charArray0));
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertFalse(boolean2);
      assertNotSame(charArray2, charArray1);
      assertNotSame(charArray2, charArray0);
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertArrayEquals(new char[] {'\f', '\f', '\f'}, charArray2);
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals('\f', jSONReaderScanner1.getCurrent());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals("", jSONReaderScanner1.info());
      assertEquals(0, jSONReaderScanner1.pos());
      
      // Undeclared exception!
      try { 
        jSONReaderScanner1.scanString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed string : \u001A
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      char char0 = 'D';
      char[] charArray0 = new char[3];
      charArray0[0] = 'D';
      charArray0[1] = 'J';
      charArray0[2] = 'D';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 19, 4040);
      assertNotNull(jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertArrayEquals(new char[] {'D', 'J', 'D'}, charArray0);
      assertEquals("", jSONReaderScanner0.info());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(4040, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('D', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      
      jSONReaderScanner0.nextToken((int) (byte)34);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertArrayEquals(new char[] {'D', 'J', 'D'}, charArray0);
      assertEquals("", jSONReaderScanner0.info());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals('J', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(4040, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(1, jSONReaderScanner0.token());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      
      jSONReaderScanner0.scanIdent();
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertArrayEquals(new char[] {'D', 'J', 'D'}, charArray0);
      assertEquals("", jSONReaderScanner0.info());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals('\u001A', jSONReaderScanner0.getCurrent());
      assertEquals(4040, jSONReaderScanner0.getFeatures());
      assertEquals(18, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertTrue(jSONReaderScanner0.isEOF());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      
      char char1 = jSONReaderScanner0.next();
      assertFalse(char1 == char0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals('\u001A', char1);
      assertArrayEquals(new char[] {'D', 'J', 'D'}, charArray0);
      assertEquals("", jSONReaderScanner0.info());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals('\u001A', jSONReaderScanner0.getCurrent());
      assertEquals(4040, jSONReaderScanner0.getFeatures());
      assertEquals(18, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertTrue(jSONReaderScanner0.isEOF());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      
      long long0 = JSONLexerBase.MULTMIN_RADIX_TEN;
      assertEquals((-922337203685477580L), long0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        jSONReaderScanner0.decimalValue();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte)107;
      byteArray0[5] = (byte)30;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)34;
      char[] charArray0 = new char[4];
      charArray0[0] = 'L';
      charArray0[2] = 'J';
      charArray0[3] = 'D';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 3583, 92);
      assertNotNull(jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertArrayEquals(new char[] {'L', '\u0000', 'J', 'D'}, charArray0);
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(92, jSONReaderScanner0.getFeatures());
      assertEquals('L', jSONReaderScanner0.getCurrent());
      assertEquals("", jSONReaderScanner0.info());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      
      int int0 = Calendar.WEEK_OF_YEAR;
      assertEquals(3, int0);
      
      jSONReaderScanner0.scanIdent();
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertArrayEquals(new char[] {'L', '\u0000', 'J', 'D'}, charArray0);
      assertEquals(18, jSONReaderScanner0.token());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals(92, jSONReaderScanner0.getFeatures());
      assertEquals("", jSONReaderScanner0.info());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      
      char char0 = jSONReaderScanner0.next();
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals('J', char0);
      assertArrayEquals(new char[] {'L', '\u0000', 'J', 'D'}, charArray0);
      assertEquals(18, jSONReaderScanner0.token());
      assertEquals(92, jSONReaderScanner0.getFeatures());
      assertEquals("", jSONReaderScanner0.info());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals('J', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      
      long long0 = jSONReaderScanner0.longValue();
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(28L, long0);
      assertArrayEquals(new char[] {'L', '\u0000', 'J', 'D'}, charArray0);
      assertEquals(18, jSONReaderScanner0.token());
      assertEquals(92, jSONReaderScanner0.getFeatures());
      assertEquals("", jSONReaderScanner0.info());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals('J', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      
      // Undeclared exception!
      try { 
        jSONReaderScanner0.decimalValue();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte)0;
      byteArray0[1] = (byte)107;
      byte byte0 = (byte)30;
      byteArray0[5] = (byte)30;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)80;
      char[] charArray0 = new char[4];
      charArray0[0] = '5';
      charArray0[2] = 'J';
      charArray0[3] = 'D';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 3583, 92);
      assertNotNull(jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertArrayEquals(new char[] {'5', '\u0000', 'J', 'D'}, charArray0);
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(92, jSONReaderScanner0.getFeatures());
      assertEquals("", jSONReaderScanner0.info());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('5', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      
      jSONReaderScanner0.nextToken((-1046));
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertArrayEquals(new char[] {'5', '\u0000', 'J', 'D'}, charArray0);
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(92, jSONReaderScanner0.getFeatures());
      assertEquals("", jSONReaderScanner0.info());
      assertEquals(2, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      
      int int0 = Calendar.WEEK_OF_YEAR;
      assertEquals(3, int0);
      
      jSONReaderScanner0.scanIdent();
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertArrayEquals(new char[] {'5', '\u0000', 'J', 'D'}, charArray0);
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals('\u001A', jSONReaderScanner0.getCurrent());
      assertEquals(92, jSONReaderScanner0.getFeatures());
      assertEquals("", jSONReaderScanner0.info());
      assertEquals(18, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertTrue(jSONReaderScanner0.isEOF());
      
      try { 
        jSONReaderScanner0.longValue();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // 5\u0000J
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte)0;
      byteArray0[1] = (byte)107;
      byteArray0[5] = (byte)30;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)34;
      char[] charArray0 = new char[4];
      charArray0[0] = 'L';
      charArray0[2] = 'J';
      charArray0[3] = 'D';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 3583, 92);
      assertNotNull(jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertArrayEquals(new char[] {'L', '\u0000', 'J', 'D'}, charArray0);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals("", jSONReaderScanner0.info());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals('L', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(92, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      
      Locale locale0 = Locale.ROOT;
      assertNotNull(locale0);
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getVariant());
      
      Locale locale1 = Locale.FRENCH;
      assertNotNull(locale1);
      assertFalse(locale1.equals((Object)locale0));
      assertNotSame(locale1, locale0);
      assertEquals("", locale1.getCountry());
      assertEquals("fra", locale1.getISO3Language());
      assertEquals("", locale1.getVariant());
      assertEquals("fr", locale1.toString());
      assertEquals("fr", locale1.getLanguage());
      assertEquals("", locale1.getISO3Country());
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      assertFalse(boolean0);
      
      int int0 = Calendar.MINUTE;
      assertEquals(12, int0);
      
      jSONReaderScanner0.scanIdent();
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertArrayEquals(new char[] {'L', '\u0000', 'J', 'D'}, charArray0);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals("", jSONReaderScanner0.info());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(92, jSONReaderScanner0.getFeatures());
      assertEquals(18, jSONReaderScanner0.token());
      
      String string0 = jSONReaderScanner0.numberString();
      assertNotNull(string0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals("", string0);
      assertArrayEquals(new char[] {'L', '\u0000', 'J', 'D'}, charArray0);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals("", jSONReaderScanner0.info());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(92, jSONReaderScanner0.getFeatures());
      assertEquals(18, jSONReaderScanner0.token());
      
      // Undeclared exception!
      try { 
        jSONReaderScanner0.sub_chars((-1), 68);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      char[] charArray0 = new char[24];
      charArray0[0] = 'B';
      charArray0[4] = 'B';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 1056, (-1));
      assertNotNull(jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals("", jSONReaderScanner0.info());
      assertEquals('B', jSONReaderScanner0.getCurrent());
      assertEquals((-1), jSONReaderScanner0.getFeatures());
      assertEquals("", jSONReaderScanner0.stringDefaultValue());
      
      LinkedHashSet<Locale> linkedHashSet0 = new LinkedHashSet<Locale>();
      assertNotNull(linkedHashSet0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      
      Locale locale0 = Locale.ITALY;
      assertNotNull(locale0);
      assertEquals("it_IT", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.getLanguage());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("IT", locale0.getCountry());
      assertEquals("ita", locale0.getISO3Language());
      
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Locale.LanguageRange locale_LanguageRange0 = linkedList0.poll();
      assertNull(locale_LanguageRange0);
      assertEquals(0, linkedList0.size());
      
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedHashSet0, locale_FilteringMode0);
      assertNotNull(list0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertEquals(0, linkedList0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      LinkedList<Locale> linkedList1 = new LinkedList<Locale>();
      assertNotNull(linkedList1);
      assertEquals(0, linkedList1.size());
      
      boolean boolean1 = jSONReaderScanner0.isBlankInput();
      assertFalse(boolean1 == boolean0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertFalse(boolean1);
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals("", jSONReaderScanner0.info());
      assertEquals('B', jSONReaderScanner0.getCurrent());
      assertEquals((-1), jSONReaderScanner0.getFeatures());
      assertEquals("", jSONReaderScanner0.stringDefaultValue());
      
      Locale locale1 = Locale.CANADA;
      assertNotNull(locale1);
      assertFalse(locale1.equals((Object)locale0));
      assertNotSame(locale1, locale0);
      assertEquals("en", locale1.getLanguage());
      assertEquals("", locale1.getVariant());
      assertEquals("eng", locale1.getISO3Language());
      assertEquals("CAN", locale1.getISO3Country());
      assertEquals("en_CA", locale1.toString());
      assertEquals("CA", locale1.getCountry());
      
      Locale locale2 = Locale.CHINESE;
      assertNotNull(locale2);
      assertFalse(locale2.equals((Object)locale1));
      assertFalse(locale2.equals((Object)locale0));
      assertNotSame(locale2, locale1);
      assertNotSame(locale2, locale0);
      assertEquals("zh", locale2.toString());
      assertEquals("", locale2.getISO3Country());
      assertEquals("", locale2.getVariant());
      assertEquals("zh", locale2.getLanguage());
      assertEquals("", locale2.getCountry());
      assertEquals("zho", locale2.getISO3Language());
      
      Locale locale3 = Locale.US;
      assertNotNull(locale3);
      assertFalse(locale3.equals((Object)locale1));
      assertFalse(locale3.equals((Object)locale0));
      assertFalse(locale3.equals((Object)locale2));
      assertNotSame(locale3, locale1);
      assertNotSame(locale3, locale0);
      assertNotSame(locale3, locale2);
      assertEquals("USA", locale3.getISO3Country());
      assertEquals("en_US", locale3.toString());
      assertEquals("US", locale3.getCountry());
      assertEquals("eng", locale3.getISO3Language());
      assertEquals("en", locale3.getLanguage());
      assertEquals("", locale3.getVariant());
      
      Locale locale4 = Locale.CHINA;
      assertNotNull(locale4);
      assertFalse(locale4.equals((Object)locale1));
      assertFalse(locale4.equals((Object)locale0));
      assertFalse(locale4.equals((Object)locale3));
      assertFalse(locale4.equals((Object)locale2));
      assertNotSame(locale4, locale1);
      assertNotSame(locale4, locale0);
      assertNotSame(locale4, locale3);
      assertNotSame(locale4, locale2);
      assertEquals("CHN", locale4.getISO3Country());
      assertEquals("zho", locale4.getISO3Language());
      assertEquals("CN", locale4.getCountry());
      assertEquals("", locale4.getVariant());
      assertEquals("zh", locale4.getLanguage());
      assertEquals("zh_CN", locale4.toString());
      
      int int0 = Calendar.WEEK_OF_YEAR;
      assertEquals(3, int0);
      
      jSONReaderScanner0.scanIdent();
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(18, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals("", jSONReaderScanner0.info());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals((-1), jSONReaderScanner0.getFeatures());
      assertEquals("", jSONReaderScanner0.stringDefaultValue());
      
      String string0 = jSONReaderScanner0.numberString();
      assertNotNull(string0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals("", string0);
      assertEquals(18, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals("", jSONReaderScanner0.info());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals((-1), jSONReaderScanner0.getFeatures());
      assertEquals("", jSONReaderScanner0.stringDefaultValue());
      
      char[] charArray1 = jSONReaderScanner0.sub_chars(9, 'B');
      assertNotNull(charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(18, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals("", jSONReaderScanner0.info());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals((-1), jSONReaderScanner0.getFeatures());
      assertEquals("", jSONReaderScanner0.stringDefaultValue());
      
      String string1 = jSONReaderScanner0.numberString();
      assertNotNull(string1);
      assertFalse(charArray0.equals((Object)charArray1));
      assertTrue(string1.equals((Object)string0));
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals("", string1);
      assertNotSame(charArray0, charArray1);
      assertEquals(18, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals("", jSONReaderScanner0.info());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals((-1), jSONReaderScanner0.getFeatures());
      assertEquals("", jSONReaderScanner0.stringDefaultValue());
      
      boolean boolean2 = jSONReaderScanner0.isEOF();
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertFalse(boolean2);
      assertNotSame(charArray0, charArray1);
      assertEquals(18, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals("", jSONReaderScanner0.info());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals((-1), jSONReaderScanner0.getFeatures());
      assertEquals("", jSONReaderScanner0.stringDefaultValue());
      
      int int1 = 47;
      SymbolTable symbolTable0 = new SymbolTable(1056);
      assertNotNull(symbolTable0);
      
      String string2 = jSONReaderScanner0.addSymbol(47, 47, 39, symbolTable0);
      assertNotNull(string2);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string2);
      assertNotSame(charArray0, charArray1);
      assertEquals(18, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals("", jSONReaderScanner0.info());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals((-1), jSONReaderScanner0.getFeatures());
      assertEquals("", jSONReaderScanner0.stringDefaultValue());
      
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed string : \u001A
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }
}
