/*
 * This file was automatically generated by EvoSuite
 * Fri Mar 22 21:10:27 GMT 2019
 */

package us.codecraft.webmagic.utils;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.HashMap;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import us.codecraft.webmagic.utils.DoubleKeyMap;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DoubleKeyMap_ESTest extends DoubleKeyMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      HashMap<String, HashMap<Object, String>> hashMap0 = new HashMap<String, HashMap<Object, String>>();
      HashMap<Object, Map<Map<String, HashMap<Object, String>>, Map<String, HashMap<Object, String>>>> hashMap1 = new HashMap<Object, Map<Map<String, HashMap<Object, String>>, Map<String, HashMap<Object, String>>>>();
      DoubleKeyMap<Object, Map<String, HashMap<Object, String>>, Map<String, HashMap<Object, String>>> doubleKeyMap0 = new DoubleKeyMap<Object, Map<String, HashMap<Object, String>>, Map<String, HashMap<Object, String>>>(hashMap1);
      doubleKeyMap0.put((Object) null, (Map<String, HashMap<Object, String>>) hashMap0, (Map<String, HashMap<Object, String>>) hashMap0);
      doubleKeyMap0.remove((Object) null, (Map<String, HashMap<Object, String>>) hashMap0);
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DoubleKeyMap<String, HashMap<Map<String, HashMap<Object, String>>, Object>, Integer> doubleKeyMap0 = new DoubleKeyMap<String, HashMap<Map<String, HashMap<Object, String>>, Object>, Integer>();
      HashMap<Map<String, HashMap<Object, String>>, Object> hashMap0 = new HashMap<Map<String, HashMap<Object, String>>, Object>();
      Integer integer0 = new Integer(1);
      doubleKeyMap0.put("us.codecraft.webmagic.utils.MultiKeyMapBase", hashMap0, integer0);
      Map<HashMap<Map<String, HashMap<Object, String>>, Object>, Integer> map0 = doubleKeyMap0.remove("us.codecraft.webmagic.utils.MultiKeyMapBase");
      assertEquals(1, map0.size());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      HashMap<HashMap<Integer, Object>, Map<Integer, Integer>> hashMap0 = new HashMap<HashMap<Integer, Object>, Map<Integer, Integer>>();
      HashMap<Integer, Object> hashMap1 = new HashMap<Integer, Object>();
      HashMap<Integer, Integer> hashMap2 = new HashMap<Integer, Integer>();
      hashMap0.put(hashMap1, hashMap2);
      Class<Map> class0 = Map.class;
      DoubleKeyMap<HashMap<Integer, Object>, Integer, Integer> doubleKeyMap0 = new DoubleKeyMap<HashMap<Integer, Object>, Integer, Integer>(hashMap0, class0);
      Map<Integer, Integer> map0 = doubleKeyMap0.get(hashMap1);
      assertEquals(0, map0.size());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DoubleKeyMap<Object, Map<String, HashMap<Object, String>>, HashMap<Object, Map<String, HashMap<Object, String>>>> doubleKeyMap0 = new DoubleKeyMap<Object, Map<String, HashMap<Object, String>>, HashMap<Object, Map<String, HashMap<Object, String>>>>();
      HashMap<Object, Map<Object, Object>> hashMap0 = new HashMap<Object, Map<Object, Object>>();
      DoubleKeyMap<Object, Object, Object> doubleKeyMap1 = new DoubleKeyMap<Object, Object, Object>(hashMap0);
      Object object0 = doubleKeyMap1.remove((Object) hashMap0, (Object) doubleKeyMap0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      HashMap<Object, Map<String, String>> hashMap0 = new HashMap<Object, Map<String, String>>();
      DoubleKeyMap<Object, String, String> doubleKeyMap0 = new DoubleKeyMap<Object, String, String>(hashMap0);
      Map<String, Map<String, Object>> map0 = doubleKeyMap0.newMap();
      Class<Map> class0 = Map.class;
      DoubleKeyMap<String, String, Object> doubleKeyMap1 = new DoubleKeyMap<String, String, Object>(map0, class0);
      Object object0 = doubleKeyMap1.remove((String) null, (String) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DoubleKeyMap<HashMap<Object, Map<String, HashMap<Object, String>>>, Integer, Object> doubleKeyMap0 = new DoubleKeyMap<HashMap<Object, Map<String, HashMap<Object, String>>>, Integer, Object>();
      HashMap<Object, Map<HashMap<Object, Object>, Integer>> hashMap0 = new HashMap<Object, Map<HashMap<Object, Object>, Integer>>();
      Class<Map> class0 = Map.class;
      DoubleKeyMap<Object, HashMap<Object, Object>, Integer> doubleKeyMap1 = new DoubleKeyMap<Object, HashMap<Object, Object>, Integer>(hashMap0, class0);
      HashMap<Object, Object> hashMap1 = new HashMap<Object, Object>();
      Integer integer0 = doubleKeyMap1.remove((Object) doubleKeyMap0, hashMap1);
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DoubleKeyMap<Map<String, HashMap<Object, String>>, String, Map<String, HashMap<Object, String>>> doubleKeyMap0 = new DoubleKeyMap<Map<String, HashMap<Object, String>>, String, Map<String, HashMap<Object, String>>>();
      Map<String, Map<String, HashMap<Object, String>>> map0 = doubleKeyMap0.remove((Map<String, HashMap<Object, String>>) null);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DoubleKeyMap<Object, Map<String, HashMap<Object, String>>, HashMap<Object, Map<String, HashMap<Object, String>>>> doubleKeyMap0 = new DoubleKeyMap<Object, Map<String, HashMap<Object, String>>, HashMap<Object, Map<String, HashMap<Object, String>>>>();
      HashMap<Object, Map<Object, Object>> hashMap0 = new HashMap<Object, Map<Object, Object>>();
      DoubleKeyMap<Object, Object, Object> doubleKeyMap1 = new DoubleKeyMap<Object, Object, Object>(hashMap0);
      Map<Object, Object> map0 = doubleKeyMap1.remove((Object) doubleKeyMap0);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DoubleKeyMap<HashMap<Object, Object>, HashMap<Object, Object>, Object> doubleKeyMap0 = new DoubleKeyMap<HashMap<Object, Object>, HashMap<Object, Object>, Object>();
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      Object object0 = new Object();
      Object object1 = doubleKeyMap0.put(hashMap0, hashMap0, object0);
      assertNull(object1);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Integer integer0 = new Integer(5230);
      HashMap<Integer, Map<Object, String>> hashMap0 = new HashMap<Integer, Map<Object, String>>();
      Class<Map> class0 = Map.class;
      DoubleKeyMap<Integer, Object, String> doubleKeyMap0 = new DoubleKeyMap<Integer, Object, String>(hashMap0, class0);
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        doubleKeyMap0.put(integer0, object0, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Class<Map> class0 = Map.class;
      HashMap<HashMap<String, String>, Map<Object, Map<Object, Map<Map<Object, Object>, String>>>> hashMap0 = new HashMap<HashMap<String, String>, Map<Object, Map<Object, Map<Map<Object, Object>, String>>>>();
      DoubleKeyMap<HashMap<String, String>, Object, Map<Object, Map<Map<Object, Object>, String>>> doubleKeyMap0 = new DoubleKeyMap<HashMap<String, String>, Object, Map<Object, Map<Map<Object, Object>, String>>>(hashMap0);
      Map<Object, Map<Map<Object, Object>, String>> map0 = doubleKeyMap0.newMap();
      DoubleKeyMap<Object, Map<Object, Object>, String> doubleKeyMap1 = new DoubleKeyMap<Object, Map<Object, Object>, String>(map0, class0);
      Object object0 = new Object();
      DoubleKeyMap<Object, Map<String, HashMap<Object, String>>, Map<Object, Object>> doubleKeyMap2 = new DoubleKeyMap<Object, Map<String, HashMap<Object, String>>, Map<Object, Object>>();
      Map<Object, Object> map1 = doubleKeyMap2.newMap();
      // Undeclared exception!
      try { 
        doubleKeyMap1.put(object0, map1, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DoubleKeyMap<Object, Map<String, HashMap<Object, String>>, HashMap<Object, Map<String, HashMap<Object, String>>>> doubleKeyMap0 = new DoubleKeyMap<Object, Map<String, HashMap<Object, String>>, HashMap<Object, Map<String, HashMap<Object, String>>>>();
      HashMap<String, Map<Object, Object>> hashMap0 = new HashMap<String, Map<Object, Object>>();
      Class<Map> class0 = Map.class;
      DoubleKeyMap<String, Object, Object> doubleKeyMap1 = new DoubleKeyMap<String, Object, Object>(hashMap0, class0);
      Object object0 = doubleKeyMap1.get("guv\"5R,!r~3", (Object) doubleKeyMap0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DoubleKeyMap<String, Object, Object> doubleKeyMap0 = new DoubleKeyMap<String, Object, Object>();
      Object object0 = doubleKeyMap0.get((String) null, (Object) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DoubleKeyMap<Object, Map<String, HashMap<Object, String>>, HashMap<Object, Map<String, HashMap<Object, String>>>> doubleKeyMap0 = new DoubleKeyMap<Object, Map<String, HashMap<Object, String>>, HashMap<Object, Map<String, HashMap<Object, String>>>>();
      DoubleKeyMap<Object, String, Object> doubleKeyMap1 = new DoubleKeyMap<Object, String, Object>();
      Object object0 = doubleKeyMap1.get((Object) doubleKeyMap0, "wrong proto type map ");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DoubleKeyMap<Object, String, String> doubleKeyMap0 = new DoubleKeyMap<Object, String, String>();
      HashMap<Object, Map<Map<Object, Map<String, HashMap<Object, String>>>, Object>> hashMap0 = new HashMap<Object, Map<Map<Object, Map<String, HashMap<Object, String>>>, Object>>();
      Class<Map> class0 = Map.class;
      DoubleKeyMap<Object, Map<Object, Map<String, HashMap<Object, String>>>, Object> doubleKeyMap1 = new DoubleKeyMap<Object, Map<Object, Map<String, HashMap<Object, String>>>, Object>(hashMap0, class0);
      Map<Map<Object, Map<String, HashMap<Object, String>>>, Object> map0 = doubleKeyMap1.get((Object) doubleKeyMap0);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      HashMap<Object, Map<Map<String, Object>, Object>> hashMap0 = new HashMap<Object, Map<Map<String, Object>, Object>>();
      DoubleKeyMap<Object, Map<String, Object>, Object> doubleKeyMap0 = new DoubleKeyMap<Object, Map<String, Object>, Object>(hashMap0);
      // Undeclared exception!
      try { 
        doubleKeyMap0.put((Object) hashMap0, (Map<String, Object>) null, (Object) hashMap0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Class<Map> class0 = Map.class;
      DoubleKeyMap<Object, String, String> doubleKeyMap0 = null;
      try {
        doubleKeyMap0 = new DoubleKeyMap<Object, String, String>((Map<Object, Map<String, String>>) null, class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DoubleKeyMap<HashMap<String, Object>, Map<String, Map<String, HashMap<Object, String>>>, Object> doubleKeyMap0 = null;
      try {
        doubleKeyMap0 = new DoubleKeyMap<HashMap<String, Object>, Map<String, Map<String, HashMap<Object, String>>>, Object>((Class<? extends Map>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DoubleKeyMap<String, HashMap<Map<String, HashMap<Object, String>>, Object>, Integer> doubleKeyMap0 = new DoubleKeyMap<String, HashMap<Map<String, HashMap<Object, String>>, Object>, Integer>();
      HashMap<Map<String, HashMap<Object, String>>, Object> hashMap0 = new HashMap<Map<String, HashMap<Object, String>>, Object>();
      Integer integer0 = doubleKeyMap0.remove("", hashMap0);
      HashMap<HashMap<Object, Map<String, HashMap<Object, String>>>, Map<Object, Integer>> hashMap1 = new HashMap<HashMap<Object, Map<String, HashMap<Object, String>>>, Map<Object, Integer>>();
      DoubleKeyMap<HashMap<Object, Map<String, HashMap<Object, String>>>, Object, Integer> doubleKeyMap1 = new DoubleKeyMap<HashMap<Object, Map<String, HashMap<Object, String>>>, Object, Integer>(hashMap1);
      Map<Object, Map<String, String>> map0 = doubleKeyMap1.newMap();
      Class<Map> class0 = Map.class;
      DoubleKeyMap<Object, String, String> doubleKeyMap2 = new DoubleKeyMap<Object, String, String>(map0, class0);
      Map<String, String> map1 = doubleKeyMap2.get((Object) integer0);
      assertNull(map1);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DoubleKeyMap<String, HashMap<Map<String, HashMap<Object, String>>, Object>, Integer> doubleKeyMap0 = new DoubleKeyMap<String, HashMap<Map<String, HashMap<Object, String>>, Object>, Integer>();
      HashMap<Map<String, HashMap<Object, String>>, Object> hashMap0 = new HashMap<Map<String, HashMap<Object, String>>, Object>();
      doubleKeyMap0.put("us.codecraft.webmagic.utils.MultiKeyMapBase", hashMap0, (Integer) null);
      hashMap0.put((Map<String, HashMap<Object, String>>) null, "^D");
      Integer integer0 = doubleKeyMap0.remove("us.codecraft.webmagic.utils.MultiKeyMapBase", hashMap0);
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DoubleKeyMap<String, Map<Object, Object>, Object> doubleKeyMap0 = new DoubleKeyMap<String, Map<Object, Object>, Object>();
      Integer integer0 = new Integer(0);
      doubleKeyMap0.put("", (Map<Object, Object>) null, (Object) integer0);
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      Object object0 = doubleKeyMap0.put("", (Map<Object, Object>) hashMap0, (Object) "");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      HashMap<Object, Map<String, HashMap<Object, String>>> hashMap0 = new HashMap<Object, Map<String, HashMap<Object, String>>>();
      HashMap<HashMap<Object, Map<String, HashMap<Object, String>>>, Map<String, String>> hashMap1 = new HashMap<HashMap<Object, Map<String, HashMap<Object, String>>>, Map<String, String>>();
      DoubleKeyMap<HashMap<Object, Map<String, HashMap<Object, String>>>, String, String> doubleKeyMap0 = new DoubleKeyMap<HashMap<Object, Map<String, HashMap<Object, String>>>, String, String>(hashMap1);
      doubleKeyMap0.put(hashMap0, "", "");
      doubleKeyMap0.get(hashMap0, "Id*Amy*Y");
      assertEquals(1, hashMap1.size());
      assertFalse(hashMap1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Class<Map> class0 = Map.class;
      DoubleKeyMap<Object, Object, HashMap<String, String>> doubleKeyMap0 = null;
      try {
        doubleKeyMap0 = new DoubleKeyMap<Object, Object, HashMap<String, String>>(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }
}
