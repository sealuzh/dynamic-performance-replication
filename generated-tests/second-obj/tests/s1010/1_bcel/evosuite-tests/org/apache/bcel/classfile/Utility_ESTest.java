/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 06 23:32:17 GMT 2018
 */

package org.apache.bcel.classfile;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayOutputStream;
import java.io.DataInput;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.File;
import java.io.InputStream;
import java.io.ObjectInputStream;
import java.io.ObjectStreamConstants;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.UnsupportedEncodingException;
import java.util.LinkedList;
import java.util.Locale;
import java.util.regex.Pattern;
import java.util.zip.ZipException;
import org.apache.bcel.Constants;
import org.apache.bcel.classfile.Constant;
import org.apache.bcel.classfile.ConstantClass;
import org.apache.bcel.classfile.ConstantFieldref;
import org.apache.bcel.classfile.ConstantFloat;
import org.apache.bcel.classfile.ConstantInteger;
import org.apache.bcel.classfile.ConstantInvokeDynamic;
import org.apache.bcel.classfile.ConstantLong;
import org.apache.bcel.classfile.ConstantMethodType;
import org.apache.bcel.classfile.ConstantMethodref;
import org.apache.bcel.classfile.ConstantNameAndType;
import org.apache.bcel.classfile.ConstantPool;
import org.apache.bcel.classfile.ConstantString;
import org.apache.bcel.classfile.ConstantUtf8;
import org.apache.bcel.classfile.ElementValue;
import org.apache.bcel.classfile.EmptyVisitor;
import org.apache.bcel.classfile.JavaClass;
import org.apache.bcel.classfile.LocalVariableTable;
import org.apache.bcel.classfile.Method;
import org.apache.bcel.classfile.Signature;
import org.apache.bcel.classfile.Utility;
import org.apache.bcel.util.BCELComparator;
import org.apache.bcel.util.ByteSequence;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.io.MockRandomAccessFile;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.mock.java.time.MockLocalDate;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Utility_ESTest extends Utility_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("Meccsh>W");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Meccsh>W'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Utility.compactClassName("?}sXP/2W");
      // Undeclared exception!
      try { 
        Utility.signatureToString("?}sXP.2W");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `?}sXP.2W'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      String string0 = Utility.printArray((Object[]) null, true, true);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "G5u0.Q=v)*auA");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-58);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-58), (-53786696), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)109;
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-74), 249);
      assertEquals("0:    ldiv\n", string0);
      
      String string1 = Utility.fillup("0:    ldiv\n", (byte) (-74), false, 'A');
      assertEquals("0:    ldiv\n", string1);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      String string0 = Utility.accessToString(71, true);
      assertEquals("public private protected volatile", string0);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "public private protected volatile";
      String string1 = Utility.printArray(objectArray0);
      assertEquals("{public private protected volatile}", string1);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      int int0 = Utility.setBit((-287), (-287));
      assertEquals((-285), int0);
      
      String string0 = Utility.compactClassName("org.apache.bcel.util.SyntheticRepository", "org.apache.bcel.util.SyntheticRepository", true);
      assertEquals("", string0);
      
      String string1 = Utility.accessToString(112, true);
      assertEquals("final volatile", string1);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      String string0 = Utility.format(0, 0, true, 'b');
      assertEquals("0", string0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      String string0 = Utility.format(123, 123, false, '\\');
      assertEquals("\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\123", string0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      try { 
        Utility.methodSignatureArgumentTypes(" (");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature:  (
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      int int0 = Utility.setBit((-287), (-287));
      assertEquals((-285), int0);
      
      String string0 = Utility.compactClassName("org.apache.bcel.util.SyntheticRepository", "org.apache.bcel.util.SyntheticRepository", false);
      assertEquals("org.apache.bcel.util.SyntheticRepository", string0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      boolean boolean0 = Utility.isSet((-835), 60);
      assertTrue(boolean0);
      
      Object[] objectArray0 = new Object[0];
      String string0 = Utility.printArray(objectArray0);
      assertEquals("{}", string0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("new");
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "new";
      Utility.printArray((PrintStream) mockPrintStream0, objectArray0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      Utility.printArray(objectArray0);
      Utility.classOrInterface(0);
      try { 
        Utility.methodSignatureArgumentTypes("class");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: class
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      short short0 = Utility.searchOpcode("_ZP");
      assertEquals((short) (-1), short0);
      
      String string0 = Utility.convertString("_ZP");
      assertEquals("_ZP", string0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      byte byte0 = Constants.ITEM_NewObject;
      String[] stringArray0 = new String[8];
      stringArray0[0] = "\nAttribute(s) = ";
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature("Xp:HE?/iXCg", stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Utility.clearBit(3, 49);
      // Undeclared exception!
      try { 
        Utility.signatureToString((String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      String string0 = Utility.compactClassName("%!HuW>.L~`XMB3 ");
      assertEquals("%!HuW>.L~`XMB3 ", string0);
      
      String string1 = Utility.getSignature("%!HuW>.L~`XMB3 ");
      assertEquals("L%!HuW>/L~`XMB3;", string1);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Utility.getSignature("he iter mustnot be null");
      String[] stringArray0 = Constants.SHORT_TYPE_NAMES;
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("(=Y7/mXC7I'/<^L", "he iter mustnot be null", "void", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `=Y7/mXC7I'/<^L'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      String string0 = Utility.classOrInterface((-3508));
      assertEquals("interface", string0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-16);
      String string1 = Utility.toHexString(byteArray0);
      assertEquals("f0 00", string1);
      
      boolean boolean0 = Utility.isJavaIdentifierPart('[');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      try { 
        Utility.typeOfSignature("_V:mk,7-*df");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: _V:mk,7-*df
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      byte[] byteArray0 = new byte[12];
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      try { 
        Utility.typeOfSignature("XB+\"}Hpm");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: XB+\"}Hpm
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      try { 
        Utility.typeOfSignature("7bxXdA+X0sA'sk");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 7bxXdA+X0sA'sk
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Utility.printArray(objectArray0, false);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("java.lang.Object@2bca126b", "Lbo6Lu/;V", "jF`h{@C?/a&", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: java.lang.Object@2bca126b
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.getSignature("'!2:mIR[fK");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegally nested brackets:[fK
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Utility.convertString("hsPe/']oaD3_l,A1$");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "G5u0.Q=v)*auA");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-58);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)89, (-53786696), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) null;
      // Undeclared exception!
      try { 
        Utility.printArray((PrintStream) null, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      boolean boolean0 = Utility.isSet(174, (-1085));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("T$c!h");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: T$c!h
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      int int0 = Utility.setBit((-287), (-287));
      assertEquals((-285), int0);
      
      Utility.classOrInterface((-287));
      String string0 = Utility.classOrInterface((-287));
      assertEquals("interface", string0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Utility.getSignature("monitorexit");
      Utility.searchOpcode("monitorexit");
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-48);
      byteArray0[1] = (byte)13;
      byteArray0[2] = (byte) (-75);
      byteArray0[3] = (byte) (-117);
      byteArray0[4] = (byte) (-91);
      byteArray0[5] = (byte)34;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool(byteSequence0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid byte tag in constant pool: -75
         //
         verifyException("org.apache.bcel.classfile.Constant", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("QD6Y`bSr+&F{,k", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `QD6Y`bSr+&F{,k'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      boolean boolean0 = Utility.isJavaIdentifierPart('y');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Utility.isJavaIdentifierPart('|');
      // Undeclared exception!
      try { 
        Utility.toHexString((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      String string0 = Utility.compactClassName("QD6Y`bSr+&F{,k", true);
      assertEquals("QD6Y`bSr+&F{,k", string0);
      
      boolean boolean0 = Utility.isJavaIdentifierPart('S');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) null;
      Utility.isJavaIdentifierPart('_');
      try { 
        Utility.methodSignatureReturnType("w");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `w'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      // Undeclared exception!
      try { 
        Utility.encode((byte[]) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-106);
      Utility.encode(byteArray0, true);
      try { 
        Utility.methodSignatureReturnType("b&H\"V)()dB", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `dB'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      String string0 = Utility.getSignature("null");
      assertEquals("Lnull;", string0);
      
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)39;
      String string1 = Utility.encode(byteArray0, false);
      assertEquals("$t", string1);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      // Undeclared exception!
      try { 
        Utility.encode((byte[]) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      int int0 = Pattern.LITERAL;
      Utility.accessToString(927, true);
      ByteSequence byteSequence0 = null;
      try {
        byteSequence0 = new ByteSequence((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Utility.isJavaIdentifierPart('7');
      byte[] byteArray0 = new byte[0];
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-63), (int) (byte) (-63));
      try { 
        Utility.typeOfSignature("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      int int0 = Utility.setBit((-287), (-287));
      assertEquals((-285), int0);
      
      String string0 = Utility.compactClassName("org.apache.bcel.util.SyntheticRepository", "org.apache.bcel.util.SyntheticRepository", true);
      assertEquals("", string0);
      
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "org.apache.bcel.util.SyntheticRepository";
      objectArray0[1] = (Object) "";
      objectArray0[2] = (Object) "";
      objectArray0[3] = (Object) "";
      String string1 = Utility.printArray(objectArray0, false, true);
      assertEquals("\"org.apache.bcel.util.SyntheticRepository\", \"\", \"\", \"\"", string1);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Utility.setBit(3033, 3033);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("iconst_5", "java.lang.", "");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: iconst_5
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      String string0 = File.separator;
      int int0 = Utility.clearBit((-1085), (-906));
      assertEquals((-4195389), int0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Utility.setBit(282, 282);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "udA-n[g^/^`%";
      stringArray0[6] = "udA-n[g^/^`%";
      stringArray0[3] = "udA-n[g^/^`%";
      stringArray0[4] = "udA-n[g^/^`%";
      try { 
        Utility.typeOfSignature("$|K{U;.sBRu*-\"S1dT");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: $|K{U;.sBRu*-\"S1dT
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = Utility.format(3200, (-1759), true, 'V');
      String string1 = Utility.replace("3200", "?W>6GOQ%Z@5_r", "3200");
      assertTrue(string1.equals((Object)string0));
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)114;
      String string2 = Utility.encode(byteArray0, false);
      assertEquals("r", string2);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)59;
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean0);
      
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)0, 56);
      assertEquals("0:    istore_0\n1:    nop\n", string0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-62);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Utility.equals(byteArray0, byteArray0);
      int int0 = 44;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 44, (-1846));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)62;
      byteArray0[1] = (byte)62;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      // Undeclared exception!
      try { 
        Utility.equals((byte[]) null, (byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)65;
      byteArray0[1] = (byte)62;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("IYgeY>U](X 3FT'5 kR");
      constantUtf8_0.copy();
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      // Undeclared exception!
      try { 
        Utility.equals((byte[]) null, (byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      byte[] byteArray0 = new byte[20];
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)0, (int) (byte)0, false);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      String string0 = Utility.methodSignatureReturnType("^mv#')B~ZuB*");
      assertEquals("byte", string0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-7);
      byteArray0[1] = (byte) (-7);
      byteArray0[2] = (byte)59;
      byteArray0[3] = (byte) (-7);
      Utility.typeOfSignature("The filter must not be null");
      String string0 = Constants.ILLEGAL_OPCODE;
      Utility.convertString("<illegal opcode>");
      try { 
        Utility.methodSignatureArgumentTypes("The filter must not be null");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: The filter must not be null
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)40;
      byteArray0[1] = (byte)96;
      byteArray0[2] = (byte)90;
      byteArray0[3] = (byte)40;
      byteArray0[4] = (byte) (-96);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)42, (int) (byte)40);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      String string0 = Constants.ILLEGAL_OPCODE;
      Utility.signatureToString("CONSTANT_String", false);
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte)40;
      byteArray0[2] = (byte)66;
      byteArray0[3] = (byte)74;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      Utility.equals(byteArray0, byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 146, (int) (byte)74);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      String string0 = Constants.CONSTRUCTOR_NAME;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "<init>");
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-75);
      byteArray0[1] = (byte)68;
      byteArray0[2] = (byte)68;
      byteArray0[3] = (byte)105;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 4, 1186, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      String string0 = Constants.ILLEGAL_OPCODE;
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte)40;
      byteArray0[3] = (byte)74;
      byteArray0[4] = (byte)40;
      Object object0 = new Object();
      Object object1 = new Object();
      byte[] byteArray1 = new byte[0];
      boolean boolean0 = Utility.equals(byteArray0, byteArray1);
      String string1 = Utility.classOrInterface((byte)0);
      assertEquals("class", string1);
      
      boolean boolean1 = Utility.isJavaIdentifierPart('A');
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      boolean boolean0 = true;
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)14;
      byteArray0[1] = (byte)54;
      byteArray0[2] = (byte)20;
      Utility.encode(byteArray0, true);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) byteArray0;
      objectArray0[1] = (Object) byteArray0;
      objectArray0[2] = (Object) byteArray0;
      objectArray0[3] = (Object) "$l$8b$I$A$A$A$A$A$A$A";
      objectArray0[4] = (Object) byteArray0;
      Utility.printArray(objectArray0);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "{[B@524c0cc7, [B@524c0cc7, [B@524c0cc7, $l$8b$I$A$A$A$A$A$A$A, [B@524c0cc7}";
      stringArray0[1] = "{[B@524c0cc7, [B@524c0cc7, [B@524c0cc7, $l$8b$I$A$A$A$A$A$A$A, [B@524c0cc7}";
      stringArray0[2] = "$l$8b$I$A$A$A$A$A$A$A";
      stringArray0[3] = "$l$8b$I$A$A$A$A$A$A$A";
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature("{[B@524c0cc7, [B@524c0cc7, [B@524c0cc7, $l$8b$I$A$A$A$A$A$A$A, [B@524c0cc7}", stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegally nested brackets:[B@524c0cc7, [B@524c0cc7, [B@524c0cc7, $l$8b$I$A$A$A$A$A$A$A, [B@524c0cc7}
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("KT=LqH oZ' vHm$u |", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `KT=LqH oZ' vHm$u |'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Utility.methodSignatureReturnType("V(5");
      Utility.setBit(5367, 5367);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("ID0u-a1`u`,Ac2", "\"t.aK", "\"t.aK", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ID0u-a1`u`,Ac2
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      byte byte0 = Constants.ATTR_PMG;
      String string0 = Utility.replace("QG%Pw]%Yw", "QG%Pw]%Yw", "QG%Pw]%Yw");
      assertEquals("QG%Pw]%Yw", string0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      String string0 = Utility.methodSignatureReturnType("Illegal type: ", false);
      assertEquals("int", string0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Utility.getSignature("?}sXP/}W");
      Utility.signatureToString("L?}sXP/}W;");
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("L?}sXP/}W;", "\\", "]TZ%_EDo", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: L?}sXP/}W;
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Utility.convertString("hspPe/']oaD3_l,QA1$");
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("java.lang.java.lang.checkcast");
      Utility.typeOfSignature("CONSTANT_String");
      // Undeclared exception!
      try { 
        Utility.methodSignatureArgumentTypes((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Utility.compactClassName("\t", false);
      Object[] objectArray0 = new Object[5];
      objectArray0[2] = (Object) "\t";
      Object object0 = new Object();
      objectArray0[4] = object0;
      Utility.printArray(objectArray0, false);
      short short0 = Utility.searchOpcode("fload_3");
      assertEquals((short)37, short0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)68;
      byteArray0[1] = (byte)86;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      String string0 = Utility.compactClassName("\t");
      assertEquals("\t", string0);
      
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean0);
      
      String string1 = Utility.encode(byteArray0, false);
      assertEquals("DV", string1);
      
      String string2 = Utility.methodSignatureReturnType("DV", false);
      assertEquals("double", string2);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Utility.methodSignatureReturnType("ZP");
      ConstantClass constantClass0 = new ConstantClass((-638));
      ConstantClass constantClass1 = new ConstantClass(constantClass0);
      Utility.typeOfSignature("ZP");
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      try { 
        Utility.methodSignatureArgumentTypes("(1Oqn-G}h/MRqEky", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `1Oqn-G}h/MRqEky'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)20;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("Invalid signature: ");
      Constant[] constantArray0 = new Constant[1];
      Utility.equals(byteArray0, byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (-379), (int) (byte)92);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      String string0 = Constants.CONSTRUCTOR_NAME;
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)46;
      byteArray0[1] = (byte)20;
      byteArray0[3] = (byte)46;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("<init>");
      Constant[] constantArray0 = new Constant[2];
      constantArray0[1] = (Constant) constantUtf8_0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.copy();
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)46, (int) (byte)20, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 46. Constant pool size is: 2
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Locale locale0 = Locale.ROOT;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-99);
      String string0 = File.pathSeparator;
      Utility.getSignature("\n\t\tthrows ");
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      String string0 = Constants.ILLEGAL_TYPE;
      String string1 = "&`]V ";
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("KT=LqH oZ' vHm$u |");
      try { 
        Utility.typeOfSignature("<illegal type>");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: <illegal type>
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      Utility.toHexString(byteArray0);
      Utility.compactClassName("null");
      Utility.equals(byteArray0, byteArray0);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantClass constantClass0 = new ConstantClass(1869);
      try { 
        Utility.typeOfSignature("00 00 00");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 00 00 00
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "? extends ");
      Object[] objectArray0 = new Object[0];
      Utility.printArray(objectArray0, false);
      String string0 = "MBhY'FG@~N\"";
      try { 
        Utility.typeOfSignature("MBhY'FG@~N\"");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: MBhY'FG@~N\"
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      byte byte0 = Utility.typeOfSignature("Z!cVw02jqL{$&8?");
      assertEquals((byte)4, byte0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String string0 = File.pathSeparator;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)4;
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean0);
      
      byte byte1 = Utility.typeOfSignature("D#QJG");
      assertEquals((byte)7, byte1);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "The filter must not be null";
      byte[] byteArray0 = new byte[1];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Utility.encode(byteArray0, false);
      String string0 = Constants.STATIC_INITIALIZER_NAME;
      try { 
        Utility.typeOfSignature("GVt6hq(<");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: GVt6hq(<
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Utility.isSet(641, 641);
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte)55;
      byteArray0[2] = (byte)93;
      ConstantInteger constantInteger0 = new ConstantInteger((byte)0);
      ConstantInteger constantInteger1 = new ConstantInteger((byte)0);
      ConstantInteger constantInteger2 = new ConstantInteger(constantInteger1);
      constantInteger1.setBytes(242);
      constantInteger2.setBytes(141);
      constantInteger2.copy();
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Utility.convertString("Zwt8T\"1");
      constantPool0.copy();
      String string0 = "#qcw`:k> Ub";
      try { 
        Utility.typeOfSignature("#qcw`:k> Ub");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: #qcw`:k> Ub
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Invalid IOCase name: ");
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Invalid IOCase name: ");
      Utility.compactClassName("Invalid IOCase name: ");
      // Undeclared exception!
      try { 
        Utility.decode("w$coi1M<F/z/GRo+", true);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"co\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      Utility.compactClassName("B{6=$%g", false);
      try { 
        Utility.decode("B{6=$%g", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Locale locale0 = Locale.UK;
      String string0 = "IYBeY>U](;E3FT'5 kR";
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("}kdB\"");
      String string1 = ";RC*'(l.,qR2Y";
      try { 
        Utility.typeOfSignature(";RC*'(l.,qR2Y");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ;RC*'(l.,qR2Y
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Utility.isSet(641, 236);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)59;
      byteArray0[1] = (byte)59;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Constants.ILLEGAL_TYPE;
      // Undeclared exception!
      try { 
        Utility.signatureToString("EnclosingMethod");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `EnclosingMethod'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Object object0 = new Object();
      String string0 = "5QuVS-(KW6D2VO<e";
      try { 
        Utility.typeOfSignature("5QuVS-(KW6D2VO<e");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 5QuVS-(KW6D2VO<e
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      try { 
        Utility.typeOfSignature(", end_pc = ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: , end_pc = 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Utility.methodSignatureReturnType("SPC#{J");
      byte byte0 = (byte) (-67);
      Utility.getSignature("int");
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.classOrInterface((byte) (-67));
      try { 
        Utility.methodSignatureArgumentTypes("interface");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: interface
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-1);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean0);
      
      Object[] objectArray0 = new Object[0];
      String string0 = Utility.printArray(objectArray0, false);
      byte byte0 = Utility.typeOfSignature("FCajX");
      assertEquals((byte)6, byte0);
      
      String string1 = Utility.compactClassName("The size must be non-negative", "The size must be non-negative", true);
      assertTrue(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      String string0 = Constants.CONSTRUCTOR_NAME;
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)88;
      byteArray0[1] = (byte) (-87);
      byteArray0[2] = (byte)88;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-87), 1, false);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      String string0 = "The filter must not be null";
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)93;
      byteArray0[1] = (byte) (-7);
      byteArray0[2] = (byte)59;
      byteArray0[3] = (byte)93;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)93, (byte) (-7), (byte)59, (byte)93}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("The filter must not be null");
      assertNotNull(constantUtf8_0);
      assertEquals("The filter must not be null", constantUtf8_0.getBytes());
      assertEquals((byte)1, constantUtf8_0.getTag());
      
      try { 
        Utility.typeOfSignature(":aPR53[t'*GtD");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: :aPR53[t'*GtD
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      byte[] byteArray0 = new byte[23];
      String string0 = Utility.methodTypeToSignature("wide", (String[]) null);
      assertNotNull(string0);
      assertEquals("()Lwide;", string0);
      
      int int0 = Utility.setBit(249, 55);
      assertEquals(8388857, int0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)101;
      byteArray0[2] = (byte)101;
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      assertFalse(boolean0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)101, (byte)0, (byte)101, (byte)0}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      boolean boolean2 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
      
      byte byte0 = Utility.typeOfSignature("B+\"H");
      assertEquals((byte)8, byte0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("LAttribute(s);V");
      assertNotNull(constantUtf8_0);
      assertEquals("LAttribute(s);V", constantUtf8_0.getBytes());
      assertEquals((byte)1, constantUtf8_0.getTag());
      
      byte byte0 = Utility.typeOfSignature("LAttribute(s);V");
      assertEquals((byte)14, byte0);
      
      try { 
        Utility.methodSignatureArgumentTypes("IYBHe2>U](;E3FT'5 kR");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: IYBHe2>U](;E3FT'5 kR
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)90;
      byteArray0[1] = (byte) (-104);
      byteArray0[4] = (byte) (-106);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)90, (int) (byte)90);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      byte byte0 = Constants.ITEM_NewObject;
      assertEquals((byte)8, byte0);
      
      try { 
        Utility.typeOfSignature(")");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: )
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      Object object2 = new Object();
      assertFalse(object2.equals((Object)object1));
      assertFalse(object2.equals((Object)object0));
      assertNotNull(object2);
      
      Object object3 = new Object();
      assertFalse(object3.equals((Object)object0));
      assertFalse(object3.equals((Object)object2));
      assertFalse(object3.equals((Object)object1));
      assertNotNull(object3);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-75);
      byteArray0[1] = (byte)51;
      byteArray0[3] = (byte)70;
      byteArray0[4] = (byte)51;
      byteArray0[5] = (byte) (-75);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-75), (byte)51, (byte)0, (byte)70, (byte)51, (byte) (-75)}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("g");
      assertNotNull(constantUtf8_0);
      assertEquals((byte)1, constantUtf8_0.getTag());
      assertEquals("g", constantUtf8_0.getBytes());
      
      ConstantUtf8 constantUtf8_1 = new ConstantUtf8(constantUtf8_0);
      assertTrue(constantUtf8_1.equals((Object)constantUtf8_0));
      assertNotNull(constantUtf8_1);
      assertEquals((byte)1, constantUtf8_0.getTag());
      assertEquals("g", constantUtf8_0.getBytes());
      assertEquals("g", constantUtf8_1.getBytes());
      assertEquals((byte)1, constantUtf8_1.getTag());
      
      Constant[] constantArray0 = new Constant[4];
      constantArray0[0] = (Constant) constantUtf8_1;
      constantArray0[1] = (Constant) constantUtf8_0;
      constantArray0[2] = (Constant) constantUtf8_1;
      constantArray0[3] = (Constant) constantUtf8_0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(4, constantPool0.getLength());
      
      ConstantPool constantPool1 = constantPool0.copy();
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertNotNull(constantPool1);
      assertEquals(4, constantPool0.getLength());
      assertEquals(4, constantPool1.getLength());
      
      int int0 = byteSequence0.readUnsignedByte();
      assertArrayEquals(new byte[] {(byte) (-75), (byte)51, (byte)0, (byte)70, (byte)51, (byte) (-75)}, byteArray0);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals(181, int0);
      
      String string0 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertArrayEquals(new byte[] {(byte) (-75), (byte)51, (byte)0, (byte)70, (byte)51, (byte) (-75)}, byteArray0);
      assertNotSame(constantPool0, constantPool1);
      assertFalse(constantPool0.equals((Object)constantPool1));
      assertNotNull(string0);
      assertEquals(4, constantPool0.getLength());
      assertEquals(2, byteSequence0.getIndex());
      assertEquals("baload", string0);
      
      boolean boolean0 = Utility.isJavaIdentifierPart('w');
      assertTrue(boolean0);
      
      String string1 = Utility.compactClassName("Illegal type: ", true);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("Illegal type: ", string1);
      
      String string2 = Utility.classOrInterface(241);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("class", string2);
      
      try { 
        Utility.typeOfMethodSignature("class");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: class
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      try { 
        Utility.typeOfSignature("Oz'k6Ud+U");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Oz'k6Ud+U
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertTrue(boolean0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      
      Constant[] constantArray0 = new Constant[4];
      BCELComparator bCELComparator0 = JavaClass.getComparator();
      assertNotNull(bCELComparator0);
      
      boolean boolean1 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(4, constantPool0.getLength());
      
      int int0 = byteSequence0.available();
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(4, int0);
      
      ConstantPool constantPool1 = constantPool0.copy();
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertNotNull(constantPool1);
      assertEquals(4, constantPool0.getLength());
      assertEquals(4, constantPool1.getLength());
      
      ConstantPool constantPool2 = constantPool1.copy();
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool0, constantPool2);
      assertNotSame(constantPool1, constantPool0);
      assertNotSame(constantPool1, constantPool2);
      assertNotSame(constantPool2, constantPool0);
      assertNotSame(constantPool2, constantPool1);
      assertFalse(constantPool0.equals((Object)constantPool1));
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertFalse(constantPool2.equals((Object)constantPool0));
      assertFalse(constantPool2.equals((Object)constantPool1));
      assertNotNull(constantPool2);
      assertEquals(4, constantPool0.getLength());
      assertEquals(4, constantPool1.getLength());
      assertEquals(4, constantPool2.getLength());
      
      ConstantPool constantPool3 = constantPool2.copy();
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool0, constantPool3);
      assertNotSame(constantPool0, constantPool2);
      assertNotSame(constantPool1, constantPool0);
      assertNotSame(constantPool1, constantPool2);
      assertNotSame(constantPool1, constantPool3);
      assertNotSame(constantPool2, constantPool0);
      assertNotSame(constantPool2, constantPool3);
      assertNotSame(constantPool2, constantPool1);
      assertNotSame(constantPool3, constantPool1);
      assertNotSame(constantPool3, constantPool0);
      assertNotSame(constantPool3, constantPool2);
      assertFalse(constantPool0.equals((Object)constantPool1));
      assertFalse(constantPool0.equals((Object)constantPool2));
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertFalse(constantPool1.equals((Object)constantPool2));
      assertFalse(constantPool2.equals((Object)constantPool0));
      assertFalse(constantPool2.equals((Object)constantPool1));
      assertFalse(constantPool3.equals((Object)constantPool1));
      assertFalse(constantPool3.equals((Object)constantPool0));
      assertFalse(constantPool3.equals((Object)constantPool2));
      assertNotNull(constantPool3);
      assertEquals(4, constantPool0.getLength());
      assertEquals(4, constantPool1.getLength());
      assertEquals(4, constantPool2.getLength());
      assertEquals(4, constantPool3.getLength());
      
      byte[] byteArray1 = new byte[8];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray0[0] = (byte)71;
      byteArray1[0] = (byte)18;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, constantPool2, (int) (byte)18, (int) (byte)18, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      String string0 = Utility.compactClassName("is-jtore_2");
      assertNotNull(string0);
      assertEquals("is-jtore_2", string0);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, " arg");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      String string1 = Utility.compactClassName("=}E]&U2/]w[W(jQW6%", false);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("=}E]&U2.]w[W(jQW6%", string1);
      
      byte[] byteArray0 = Utility.decode("is-jtore_2", false);
      assertArrayEquals(new byte[] {(byte)105, (byte)115, (byte)45, (byte)106, (byte)116, (byte)111, (byte)114, (byte)101, (byte)95, (byte)50}, byteArray0);
      assertNotNull(byteArray0);
      
      byte[] byteArray1 = new byte[2];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte) (-126);
      byteArray1[1] = (byte) (-126);
      boolean boolean3 = Utility.equals(byteArray0, byteArray1);
      assertArrayEquals(new byte[] {(byte)105, (byte)115, (byte)45, (byte)106, (byte)116, (byte)111, (byte)114, (byte)101, (byte)95, (byte)50}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-126), (byte) (-126)}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 401, (int) (byte) (-126));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)6;
      byteArray0[1] = (byte)87;
      byteArray0[2] = (byte) (-125);
      byteArray0[3] = (byte) (-40);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "Rj";
      stringArray0[1] = "Rj";
      stringArray0[2] = "Rj";
      stringArray0[3] = "Rj";
      stringArray0[4] = "java.lang.]";
      stringArray0[5] = "Rj";
      String string0 = Utility.methodTypeToSignature("Rj", stringArray0);
      assertNotNull(string0);
      assertEquals("(LRj;LRj;LRj;LRj;Ljava/lang/];LRj;)LRj;", string0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 169, (int) (byte)87, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-115);
      ConstantClass constantClass0 = new ConstantClass((byte) (-115));
      assertNotNull(constantClass0);
      assertEquals((-115), constantClass0.getNameIndex());
      assertEquals((byte)7, constantClass0.getTag());
      
      BCELComparator bCELComparator0 = JavaClass.getComparator();
      assertNotNull(bCELComparator0);
      
      constantClass0.setNameIndex((byte) (-115));
      assertEquals((-115), constantClass0.getNameIndex());
      assertEquals((byte)7, constantClass0.getTag());
      
      Constant.setComparator(bCELComparator0);
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      assertNotNull(emptyVisitor0);
      
      constantClass0.accept(emptyVisitor0);
      assertEquals((-115), constantClass0.getNameIndex());
      assertEquals((byte)7, constantClass0.getTag());
      
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "zRjPD");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      String string0 = Utility.encode(byteArray0, false);
      assertArrayEquals(new byte[] {(byte) (-115), (byte)0}, byteArray0);
      assertNotNull(string0);
      assertEquals("$8d$A", string0);
      
      int int0 = 489;
      String string1 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-115), 489);
      assertArrayEquals(new byte[] {(byte) (-115), (byte)0}, byteArray0);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("0:    f2d\n1:    nop\n", string1);
      
      String string2 = "Object";
      short short0 = Utility.searchOpcode("Object");
      assertEquals((short) (-1), short0);
      
      MockFile mockFile0 = null;
      try {
        mockFile0 = new MockFile((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("lor");
      assertNotNull(constantUtf8_0);
      assertEquals((byte)1, constantUtf8_0.getTag());
      assertEquals("lor", constantUtf8_0.getBytes());
      
      byte byte0 = Utility.typeOfSignature("[]");
      assertEquals((byte)13, byte0);
      
      try { 
        Utility.methodSignatureArgumentTypes("lor");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: lor
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte)123;
      try { 
        Utility.typeOfSignature("-7ECB1D=r-");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: -7ECB1D=r-
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byte byte0 = (byte)72;
      byteArray0[0] = (byte)72;
      try { 
        Utility.typeOfSignature("?Cs;(A5-xG[Q|a");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ?Cs;(A5-xG[Q|a
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      String string0 = Constants.ILLEGAL_TYPE;
      assertNotNull(string0);
      assertEquals("<illegal type>", string0);
      
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("Invalid signature: ");
      assertNotNull(constantUtf8_0);
      assertEquals((byte)1, constantUtf8_0.getTag());
      assertEquals("Invalid signature: ", constantUtf8_0.getBytes());
      
      try { 
        Utility.typeOfSignature("A_hPg#HA(#mH");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: A_hPg#HA(#mH
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      byte[] byteArray0 = new byte[17];
      byteArray0[2] = (byte)93;
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) byteArray0;
      objectArray0[1] = (Object) byteArray0;
      String string0 = "Warning: Padding byte != 0 in ";
      try { 
        Utility.typeOfSignature("Warning: Padding byte != 0 in ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Warning: Padding byte != 0 in 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)48;
      byteArray0[1] = (byte)14;
      byteArray0[2] = (byte)27;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)48, (byte)14, (byte)27}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertArrayEquals(new byte[] {(byte)48, (byte)14, (byte)27}, byteArray0);
      assertTrue(boolean0);
      
      boolean boolean1 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 812, (int) (byte)48, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      try { 
        Utility.typeOfSignature("9?o#+");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 9?o#+
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte)95;
      byteArray0[2] = (byte)95;
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      byteArray0[4] = (byte)127;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)95, (byte)95, (byte)0, (byte)127, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      String string0 = Utility.codeToString(byteSequence0, constantPool0);
      assertArrayEquals(new byte[] {(byte)0, (byte)95, (byte)95, (byte)0, (byte)127, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(string0);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals(0, constantPool0.getLength());
      assertEquals("nop", string0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "char");
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      byte[] byteArray0 = new byte[16];
      byteArray0[0] = (byte) (-75);
      byteArray0[1] = (byte) (-75);
      byteArray0[6] = (byte)102;
      String string0 = Utility.compactClassName("H%XG1uVZ}mPu>v-FWxV");
      assertNotNull(string0);
      assertEquals("H%XG1uVZ}mPu>v-FWxV", string0);
      
      byte[] byteArray1 = new byte[9];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte)102;
      byteArray1[1] = (byte) (-75);
      byteArray1[2] = (byte) (-75);
      byteArray1[3] = (byte)102;
      byteArray1[5] = (byte) (-75);
      byteArray1[7] = (byte)102;
      byteArray1[8] = (byte) (-75);
      boolean boolean2 = Utility.equals(byteArray0, byteArray1);
      assertArrayEquals(new byte[] {(byte)102, (byte) (-75), (byte) (-75), (byte)102, (byte)0, (byte) (-75), (byte)0, (byte)102, (byte) (-75)}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, (ConstantPool) null, (int) (byte)102, (int) (byte)0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("H|24", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `H|24'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)48;
      byteArray0[1] = (byte)48;
      try { 
        Utility.typeOfSignature("2$`O");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 2$`O
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)41;
      byteArray0[1] = (byte)55;
      ConstantPool constantPool0 = null;
      int int0 = 192;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 192, 361);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      String string0 = "*ECvWSo7e)]";
      try { 
        Utility.typeOfSignature("*ECvWSo7e)]");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ECvWSo7e)]
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      byte byte0 = (byte)48;
      try { 
        Utility.typeOfSignature("KU5Z>|OX\"8:nwbG");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: KU5Z>|OX\"8:nwbG
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "Attribute(";
      stringArray0[1] = "Attribute(";
      stringArray0[2] = "Attribute(";
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)69;
      byteArray0[1] = (byte)42;
      byteArray0[2] = (byte)42;
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertArrayEquals(new byte[] {(byte)69, (byte)42, (byte)42}, byteArray0);
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)42, 71);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "HF]|V+~Qh'");
      assertFalse(boolean0);
      
      boolean boolean1 = Utility.isJavaIdentifierPart('i');
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string0 = Utility.classOrInterface(18);
      assertNotNull(string0);
      assertEquals("class", string0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)89;
      byteArray0[1] = (byte)98;
      byteArray0[2] = (byte)89;
      byteArray0[3] = (byte)89;
      byteArray0[4] = (byte)74;
      byteArray0[5] = (byte) (-106);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)89, (byte)98, (byte)89, (byte)89, (byte)74, (byte) (-106)}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertArrayEquals(new byte[] {(byte)89, (byte)98, (byte)89, (byte)89, (byte)74, (byte) (-106)}, byteArray0);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals("dup", string1);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("Invalidssignature: ");
      assertEquals((byte)10, byte0);
      
      String string0 = Utility.signatureToString("Invalidssignature: ", false);
      assertNotNull(string0);
      assertEquals("int", string0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)92;
      byteArray0[1] = (byte)92;
      byteArray0[2] = (byte)92;
      byteArray0[3] = (byte)10;
      byteArray0[4] = (byte)10;
      byteArray0[5] = (byte)10;
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      byteArray0[6] = (byte)10;
      byteArray0[7] = (byte)10;
      byteArray0[8] = (byte)10;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)92, (byte)92, (byte)92, (byte)10, (byte)10, (byte)10, (byte)10, (byte)10, (byte)10}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertArrayEquals(new byte[] {(byte)92, (byte)92, (byte)92, (byte)10, (byte)10, (byte)10, (byte)10, (byte)10, (byte)10}, byteArray0);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals("dup2", string1);
      
      String string2 = Utility.replace("PxV's", "interface", "Invalidssignature: ");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("PxV's", string2);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      String string0 = Constants.CONSTRUCTOR_NAME;
      assertNotNull(string0);
      assertEquals("<init>", string0);
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "<init>");
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)105;
      byteArray0[1] = (byte)68;
      byteArray0[2] = (byte)68;
      byteArray0[3] = (byte)105;
      String string1 = Utility.codeToString(byteArray0, (ConstantPool) null, 4, 1186, false);
      assertArrayEquals(new byte[] {(byte)105, (byte)68, (byte)68, (byte)105}, byteArray0);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      String string0 = Utility.compactClassName("java.@`ng.StlingBTffer");
      assertNotNull(string0);
      assertEquals("java.@`ng.StlingBTffer", string0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-96);
      byteArray0[1] = (byte) (-96);
      byteArray0[2] = (byte) (-92);
      byteArray0[3] = (byte) (-11);
      byteArray0[4] = (byte) (-96);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 238, (int) (byte) (-92));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-39);
      byteArray0[1] = (byte)95;
      byteArray0[2] = (byte)127;
      byteArray0[3] = (byte)127;
      String string0 = Utility.convertString("athrow");
      assertNotNull(string0);
      assertEquals("athrow", string0);
      
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      assertNotNull(emptyVisitor0);
      
      String string1 = Utility.encode(byteArray0, true);
      assertArrayEquals(new byte[] {(byte) (-39), (byte)95, (byte)127, (byte)127, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("$l$8b$I$A$A$A$A$A$A$A", string1);
      
      byte[] byteArray1 = new byte[4];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte)11;
      byteArray1[1] = (byte)127;
      byteArray1[2] = (byte)11;
      byteArray1[3] = (byte) (-39);
      boolean boolean0 = Utility.equals(byteArray1, byteArray1);
      assertArrayEquals(new byte[] {(byte)11, (byte)127, (byte)11, (byte) (-39)}, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertTrue(boolean0);
      
      String string2 = Utility.signatureToString("[B[TD;Nk*;Y;x1_ke4", false);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("byte[]", string2);
      
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("rl3#],/", "LYK&& ,;7w", "athrow");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: rl3#],/
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      String string0 = "809?6.Km&7D/Z";
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "809?6.Km&7D/Z");
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string1 = Utility.methodTypeToSignature("?:", (String[]) null);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("()L?:;", string1);
      
      int int0 = Pattern.COMMENTS;
      assertEquals(4, int0);
      
      String string2 = Utility.methodSignatureToString("()L?:;", "qyU=I_x:|BeuI", "?:");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("?: ?: qyU=I_x:|BeuI()", string2);
      
      String string3 = Utility.classOrInterface((byte) (-126));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals("interface", string3);
      
      String string4 = Constants.ILLEGAL_OPCODE;
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
      assertEquals("<illegal opcode>", string4);
      
      boolean boolean2 = Utility.isSet((byte) (-126), 4);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      String string5 = Utility.classOrInterface(4);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertNotNull(string5);
      assertEquals("class", string5);
      
      // Undeclared exception!
      try { 
        Utility.signatureToString((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "Attribute(";
      stringArray0[1] = "Attribute(";
      stringArray0[2] = "Attribute(";
      stringArray0[3] = "Attribute(";
      stringArray0[4] = "_ZP";
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertFalse(boolean0);
      
      stringArray0[5] = "Attribute(";
      stringArray0[6] = "_ZP";
      stringArray0[7] = "Attribute(";
      String string0 = Utility.methodTypeToSignature("Attribute(", stringArray0);
      assertNotNull(string0);
      assertEquals("(LAttribute(;LAttribute(;LAttribute(;LAttribute(;L_ZP;LAttribute(;L_ZP;LAttribute(;)LAttribute(;", string0);
      
      int int0 = Utility.setBit((-663), (-663));
      assertEquals((-151), int0);
      
      byte[] byteArray1 = new byte[2];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      assertNotNull(emptyVisitor0);
      
      String string1 = Utility.methodSignatureToString("(LAttribute(;LAttribute(;LAttribute(;LAttribute(;L_ZP;LAttribute(;L_ZP;LAttribute(;)LAttribute(;", "LLthe;;V", "Attribute(");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("Attribute( Attribute( LLthe;;V(Attribute( arg1, Attribute( arg2, Attribute( arg3, Attribute( arg4, _ZP arg5, Attribute( arg6, _ZP arg7, Attribute( arg8)", string1);
      
      String string2 = Utility.classOrInterface((-663));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("class", string2);
      
      String string3 = Constants.ILLEGAL_OPCODE;
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals("<illegal opcode>", string3);
      
      boolean boolean1 = Utility.isJavaIdentifierPart('1');
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "v");
      assertFalse(boolean0);
      
      Object[] objectArray0 = new Object[8];
      objectArray0[3] = (Object) null;
      // Undeclared exception!
      try { 
        Utility.signatureToString("YKXiW/Y6]Lgl&r6", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `YKXiW/Y6]Lgl&r6'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      String string0 = Utility.fillup("Wd)+Gs}ur|]}%", (-743), false, '.');
      assertNotNull(string0);
      assertEquals("Wd)+Gs}ur|]}%", string0);
      
      String string1 = Utility.convertString("yAcM*^dCv<>Wf28z+`");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("yAcM*^dCv<>Wf28z+`", string1);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)69;
      byteArray0[1] = (byte)116;
      boolean boolean1 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertArrayEquals(new byte[] {(byte)69, (byte)116}, byteArray0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      try { 
        Utility.typeOfSignature("@bU%otwJ;+F:qo<Onj");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: @bU%otwJ;+F:qo<Onj
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)44;
      byteArray0[1] = (byte)81;
      boolean boolean1 = true;
      boolean boolean2 = true;
      boolean boolean3 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3);
      
      boolean boolean4 = Utility.equals(byteArray0, byteArray0);
      assertArrayEquals(new byte[] {(byte)44, (byte)81, (byte)0}, byteArray0);
      assertFalse(boolean4 == boolean0);
      assertFalse(boolean4 == boolean3);
      assertTrue(boolean4 == boolean1);
      assertTrue(boolean4 == boolean2);
      assertTrue(boolean4);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 170, (int) (byte)44);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)107;
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      byteArray0[1] = (byte) (-10);
      byteArray0[2] = (byte) (-119);
      String string0 = Utility.methodTypeToSignature("ddiv", (String[]) null);
      assertNotNull(string0);
      assertEquals("()Lddiv;", string0);
      
      try { 
        Utility.methodSignatureReturnType("O%]USBd\"]hd[w~");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `O%]USBd\"]hd[w~'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)110;
      byteArray0[1] = (byte) (-14);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)110, (byte) (-14)}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      
      boolean boolean0 = true;
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertArrayEquals(new byte[] {(byte)110, (byte) (-14)}, byteArray0);
      assertNotNull(string0);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals("fdiv", string0);
      
      Object[] objectArray0 = new Object[0];
      // Undeclared exception!
      try { 
        Utility.signatureToString("fdiv", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `fdiv'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      boolean boolean0 = Utility.isSet(186, 34);
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)48;
      byteArray0[1] = (byte)48;
      byteArray0[2] = (byte) (-19);
      byteArray0[3] = (byte) (-75);
      byteArray0[4] = (byte)90;
      String string0 = Utility.compactClassName("3<~^fT");
      assertNotNull(string0);
      assertEquals("3<~^fT", string0);
      
      String string1 = Utility.toHexString(byteArray0);
      assertArrayEquals(new byte[] {(byte)48, (byte)48, (byte) (-19), (byte) (-75), (byte)90, (byte)0}, byteArray0);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("30 30 ed b5 5a 00", string1);
      
      try { 
        Utility.typeOfSignature("3<~^fT");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 3<~^fT
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      byte byte0 = (byte) (-87);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-87);
      byteArray0[1] = (byte)98;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-87), (byte)98}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      
      ConstantClass constantClass0 = new ConstantClass((byte) (-87));
      assertNotNull(constantClass0);
      assertEquals((-87), constantClass0.getNameIndex());
      assertEquals((byte)7, constantClass0.getTag());
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)98, (int) (byte) (-87));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)89;
      byteArray0[1] = (byte)74;
      byteArray0[2] = (byte)74;
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertArrayEquals(new byte[] {(byte)89, (byte)74, (byte)74}, byteArray0);
      assertTrue(boolean0);
      
      ConstantPool constantPool0 = null;
      boolean boolean1 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "V");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 1156, (int) (byte)74);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)49;
      byteArray0[1] = (byte)49;
      boolean boolean1 = Utility.equals(byteArray0, byteArray0);
      assertArrayEquals(new byte[] {(byte)49, (byte)49}, byteArray0);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)49, 56);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)72;
      byteArray0[2] = (byte)30;
      String string0 = Utility.compactClassName("y++kh$b4bu6m.");
      assertNotNull(string0);
      assertEquals("y++kh$b4bu6m.", string0);
      
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertArrayEquals(new byte[] {(byte)72, (byte)0, (byte)30}, byteArray0);
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 10, 10);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      boolean boolean0 = Utility.isSet(636, 236);
      assertFalse(boolean0);
      
      String string0 = Constants.ILLEGAL_OPCODE;
      assertNotNull(string0);
      assertEquals("<illegal opcode>", string0);
      
      try { 
        Utility.typeOfSignature("QG%P%Yw");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: QG%P%Yw
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      int int0 = 641;
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte)93;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)93, (byte)0}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      
      ConstantInteger constantInteger0 = new ConstantInteger((byte)0);
      assertNotNull(constantInteger0);
      assertEquals((byte)3, constantInteger0.getTag());
      assertEquals(0, constantInteger0.getBytes());
      
      ConstantInteger constantInteger1 = new ConstantInteger((byte)0);
      assertTrue(constantInteger1.equals((Object)constantInteger0));
      assertNotNull(constantInteger1);
      assertEquals((byte)3, constantInteger1.getTag());
      assertEquals(0, constantInteger1.getBytes());
      
      ConstantInteger constantInteger2 = (ConstantInteger)constantInteger1.copy();
      assertNotSame(constantInteger1, constantInteger2);
      assertNotSame(constantInteger1, constantInteger0);
      assertNotSame(constantInteger2, constantInteger1);
      assertNotSame(constantInteger2, constantInteger0);
      assertTrue(constantInteger1.equals((Object)constantInteger0));
      assertTrue(constantInteger2.equals((Object)constantInteger1));
      assertTrue(constantInteger2.equals((Object)constantInteger0));
      assertNotNull(constantInteger2);
      assertEquals((byte)3, constantInteger1.getTag());
      assertEquals(0, constantInteger1.getBytes());
      assertEquals((byte)3, constantInteger2.getTag());
      assertEquals(0, constantInteger2.getBytes());
      
      ConstantInteger constantInteger3 = (ConstantInteger)constantInteger1.clone();
      assertNotSame(constantInteger1, constantInteger2);
      assertNotSame(constantInteger1, constantInteger3);
      assertNotSame(constantInteger1, constantInteger0);
      assertNotSame(constantInteger3, constantInteger1);
      assertNotSame(constantInteger3, constantInteger0);
      assertNotSame(constantInteger3, constantInteger2);
      assertTrue(constantInteger1.equals((Object)constantInteger0));
      assertTrue(constantInteger1.equals((Object)constantInteger2));
      assertTrue(constantInteger3.equals((Object)constantInteger0));
      assertTrue(constantInteger3.equals((Object)constantInteger2));
      assertTrue(constantInteger3.equals((Object)constantInteger1));
      assertNotNull(constantInteger3);
      assertEquals((byte)3, constantInteger1.getTag());
      assertEquals(0, constantInteger1.getBytes());
      assertEquals(0, constantInteger3.getBytes());
      assertEquals((byte)3, constantInteger3.getTag());
      
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.signatureToString("Rk8{Co\"zA\"Db5b{y", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Rk8{Co\"zA\"Db5b{y'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      
      String string0 = "&`]VG ";
      String string1 = "LAttribute(s);V";
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("LAttribute(s);V");
      assertNotNull(constantUtf8_0);
      assertEquals((byte)1, constantUtf8_0.getTag());
      assertEquals("LAttribute(s);V", constantUtf8_0.getBytes());
      
      try { 
        Utility.typeOfSignature("&`]VG ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: &`]VG 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Locale locale0 = Locale.ROOT;
      assertNotNull(locale0);
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.toString());
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-85);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 167, 193);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-86);
      byteArray0[1] = (byte) (-86);
      boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      byteArray0[2] = (byte) (-86);
      byteArray0[3] = (byte) (-86);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-86), (byte) (-86), (byte) (-86), (byte) (-86), (byte)0}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-86), (int) (byte) (-86), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      String string0 = Constants.CONSTRUCTOR_NAME;
      assertNotNull(string0);
      assertEquals("<init>", string0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[1] = (byte)32;
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)32, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(boolean0);
      
      byte byte0 = (byte) (-74);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)127, 18, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)72;
      byte byte0 = (byte)55;
      byteArray0[2] = (byte)55;
      byteArray0[2] = (byte) (-113);
      String string0 = Utility.toHexString(byteArray0);
      assertArrayEquals(new byte[] {(byte)72, (byte)0, (byte) (-113)}, byteArray0);
      assertNotNull(string0);
      assertEquals("48 00 8f", string0);
      
      String string1 = Utility.compactClassName("final");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("final", string1);
      
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertArrayEquals(new byte[] {(byte)72, (byte)0, (byte) (-113)}, byteArray0);
      assertTrue(boolean0);
      
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)72, (-1325));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)77;
      byteArray0[1] = (byte)55;
      byte byte0 = (byte)92;
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertArrayEquals(new byte[] {(byte)77, (byte)55, (byte)0}, byteArray0);
      assertTrue(boolean0);
      
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 192, 361);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)77;
      byteArray0[1] = (byte)55;
      byteArray0[2] = (byte) (-102);
      String string0 = Constants.ILLEGAL_OPCODE;
      assertNotNull(string0);
      assertEquals("<illegal opcode>", string0);
      
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertFalse(boolean0);
      
      byte[] byteArray1 = new byte[4];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte)77;
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      byteArray1[1] = (byte) (-102);
      byteArray1[2] = (byte)77;
      byteArray0[2] = (byte)55;
      boolean boolean2 = Utility.equals(byteArray0, byteArray1);
      assertArrayEquals(new byte[] {(byte)77, (byte)55, (byte)55}, byteArray0);
      assertArrayEquals(new byte[] {(byte)77, (byte) (-102), (byte)77, (byte)0}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, (ConstantPool) null, 4, (int) (byte)77);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Locale locale0 = Locale.UK;
      assertNotNull(locale0);
      assertEquals("en", locale0.getLanguage());
      assertEquals("GB", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en_GB", locale0.toString());
      assertEquals("GBR", locale0.getISO3Country());
      
      EvoSuiteFile evoSuiteFile0 = null;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-99);
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-99)}, byteArray0);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string0 = Utility.encode(byteArray0, false);
      assertArrayEquals(new byte[] {(byte) (-99)}, byteArray0);
      assertNotNull(string0);
      assertEquals("$9d", string0);
      
      boolean boolean2 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      boolean boolean3 = Utility.equals(byteArray0, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-99)}, byteArray0);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3);
      
      byte[] byteArray1 = new byte[5];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte) (-99);
      byteArray1[1] = (byte) (-19);
      byteArray1[2] = (byte)14;
      byte[] byteArray2 = Utility.decode("$9d", false);
      assertArrayEquals(new byte[] {(byte) (-99)}, byteArray2);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertNotNull(byteArray2);
      
      String string1 = "jJ]H']1{3UiMF5Hq4]h";
      try { 
        Utility.typeOfMethodSignature("jJ]H']1{3UiMF5Hq4]h");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: jJ]H']1{3UiMF5Hq4]h
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)41;
      byteArray0[1] = (byte)55;
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertArrayEquals(new byte[] {(byte)41, (byte)55, (byte)0}, byteArray0);
      assertFalse(boolean0);
      
      String string0 = Utility.encode(byteArray0, false);
      assertArrayEquals(new byte[] {(byte)41, (byte)55, (byte)0}, byteArray0);
      assertNotNull(string0);
      assertEquals("$v7$A", string0);
      
      try { 
        Utility.decode("$v7$A", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      boolean boolean0 = Utility.isSet((-2604), (-2937));
      assertTrue(boolean0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      
      DataInputStream dataInputStream0 = new DataInputStream(byteSequence0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(dataInputStream0);
      assertEquals(0, byteSequence0.getIndex());
      
      ConstantMethodType constantMethodType0 = new ConstantMethodType(dataInputStream0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(constantMethodType0);
      assertEquals(2, byteSequence0.getIndex());
      assertEquals((byte)16, constantMethodType0.getTag());
      assertEquals(0, constantMethodType0.getDescriptorIndex());
      
      ConstantInteger constantInteger0 = new ConstantInteger((-87));
      assertNotNull(constantInteger0);
      assertEquals((byte)3, constantInteger0.getTag());
      assertEquals((-87), constantInteger0.getBytes());
      
      ConstantInteger constantInteger1 = new ConstantInteger((-2937));
      assertFalse(constantInteger1.equals((Object)constantInteger0));
      assertNotNull(constantInteger1);
      assertEquals((-2937), constantInteger1.getBytes());
      assertEquals((byte)3, constantInteger1.getTag());
      
      BCELComparator bCELComparator0 = Method.getComparator();
      assertNotNull(bCELComparator0);
      
      Constant.setComparator(bCELComparator0);
      MockFile mockFile0 = new MockFile("void");
      assertNotNull(mockFile0);
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.isDirectory());
      assertEquals("void", mockFile0.getName());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.canRead());
      assertEquals("void", mockFile0.toString());
      assertEquals(0L, mockFile0.lastModified());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.canWrite());
      
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      assertNotNull(mockFileOutputStream0);
      assertFalse(mockFile0.isDirectory());
      assertEquals("void", mockFile0.getName());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canExecute());
      assertEquals("void", mockFile0.toString());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.length());
      
      boolean boolean1 = mockFile0.setReadable(true, true);
      assertTrue(boolean1 == boolean0);
      assertFalse(mockFile0.isDirectory());
      assertEquals("void", mockFile0.getName());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canExecute());
      assertEquals("void", mockFile0.toString());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.length());
      assertTrue(boolean1);
      
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockFileOutputStream0);
      assertNotNull(dataOutputStream0);
      assertFalse(mockFile0.isDirectory());
      assertEquals("void", mockFile0.getName());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canExecute());
      assertEquals("void", mockFile0.toString());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.length());
      
      constantInteger1.dump(dataOutputStream0);
      assertNotSame(constantInteger1, constantInteger0);
      assertEquals((-2937), constantInteger1.getBytes());
      assertEquals((byte)3, constantInteger1.getTag());
      assertEquals(5L, mockFile0.length());
      assertFalse(mockFile0.isDirectory());
      assertEquals("void", mockFile0.getName());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canExecute());
      assertEquals("void", mockFile0.toString());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.isAbsolute());
      
      ConstantInteger constantInteger2 = new ConstantInteger(constantInteger1);
      assertNotNull(constantInteger2);
      assertEquals((-2937), constantInteger1.getBytes());
      assertEquals((byte)3, constantInteger1.getTag());
      assertEquals((byte)3, constantInteger2.getTag());
      assertEquals((-2937), constantInteger2.getBytes());
      
      ConstantInteger constantInteger3 = (ConstantInteger)constantInteger0.copy();
      assertNotSame(constantInteger0, constantInteger2);
      assertNotSame(constantInteger0, constantInteger3);
      assertNotSame(constantInteger0, constantInteger1);
      assertNotSame(constantInteger3, constantInteger0);
      assertNotSame(constantInteger3, constantInteger2);
      assertNotSame(constantInteger3, constantInteger1);
      assertNotNull(constantInteger3);
      assertEquals((byte)3, constantInteger0.getTag());
      assertEquals((-87), constantInteger0.getBytes());
      assertEquals((-87), constantInteger3.getBytes());
      assertEquals((byte)3, constantInteger3.getTag());
      
      String string0 = Utility.compactClassName("Z39SJ2j", true);
      assertNotNull(string0);
      assertEquals("Z39SJ2j", string0);
      
      String string1 = Utility.methodSignatureReturnType("Z39SJ2j");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("boolean", string1);
      
      String[] stringArray0 = new String[13];
      stringArray0[0] = "void";
      stringArray0[1] = "boolean";
      stringArray0[2] = "Z39SJ2j";
      stringArray0[3] = "Z39SJ2j";
      stringArray0[4] = "boolean";
      try { 
        Utility.methodTypeToSignature("Z39SJ2j", stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid type: void
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      String string0 = Utility.convertString("hsPe/']oaD3_l,A1$");
      assertNotNull(string0);
      assertEquals("hsPe/\\']oaD3_l,A1$", string0);
      
      byte byte0 = (byte) (-106);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)92;
      byteArray0[1] = (byte) (-79);
      byteArray0[2] = (byte) (-70);
      byteArray0[3] = (byte)92;
      byteArray0[5] = (byte)92;
      byteArray0[6] = (byte)92;
      byteArray0[7] = (byte) (-70);
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertArrayEquals(new byte[] {(byte)92, (byte) (-79), (byte) (-70), (byte)92, (byte)0, (byte)92, (byte)92, (byte) (-70)}, byteArray0);
      assertTrue(boolean0);
      
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 1142, (int) (byte) (-106));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ">\t");
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)125;
      byteArray0[1] = (byte)33;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)125, (byte)33}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertArrayEquals(new byte[] {(byte)125, (byte)33}, byteArray0);
      assertNotNull(string0);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals("lushr", string0);
      
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("KT=LH oZ' vHm$u|", "KT=LH oZ' vHm$u|", "KT=LH oZ' vHm$u|", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: KT=LH oZ' vHm$u|
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "v");
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[2] = (byte) (-55);
      byteArray0[4] = (byte) (-55);
      int int0 = Pattern.CANON_EQ;
      assertEquals(128, int0);
      
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (-3706), (int) (byte) (-55), false);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte) (-55), (byte)0, (byte) (-55), (byte)0, (byte)0}, byteArray0);
      assertNotNull(string0);
      assertEquals("0:    nop\n1:    nop\n2:    jsr_w\t\t#13172738\n", string0);
      
      String string1 = Utility.replace("v", "0:    nop\n1:    nop\n2:    jsr_w\t\t#13172738\n", "java.lang.?floit");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("v", string1);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      String string0 = Constants.CONSTRUCTOR_NAME;
      assertNotNull(string0);
      assertEquals("<init>", string0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)98;
      byteArray0[1] = (byte) (-87);
      byteArray0[2] = (byte)98;
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertArrayEquals(new byte[] {(byte)98, (byte) (-87), (byte)98, (byte)0, (byte)0}, byteArray0);
      assertFalse(boolean0);
      
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-87), 1, false);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("UlC4a\"5@J__!uL/OmN");
      assertNotNull(constantUtf8_0);
      assertEquals((byte)1, constantUtf8_0.getTag());
      assertEquals("UlC4a\"5@J__!uL/OmN", constantUtf8_0.getBytes());
      
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      assertNotNull(emptyVisitor0);
      
      int int0 = (-109);
      char char0 = '\'';
      String string0 = Utility.format(200, 200, false, '9');
      assertNotNull(string0);
      assertEquals("99999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999200", string0);
      
      String string1 = "athrow";
      MockFile mockFile0 = new MockFile("athrow");
      assertNotNull(mockFile0);
      assertFalse(mockFile0.exists());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("athrow", mockFile0.toString());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.isDirectory());
      assertEquals("athrow", mockFile0.getName());
      
      try { 
        Utility.typeOfSignature("UlC4a\"5@J__!uL/OmN");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: UlC4a\"5@J__!uL/OmN
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      String string0 = File.pathSeparator;
      assertNotNull(string0);
      assertEquals(":", string0);
      
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      ConstantPool constantPool0 = null;
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte) (-77);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (-622), (-2327), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    nop
         // 1:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)86;
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertArrayEquals(new byte[] {(byte)86, (byte)0}, byteArray0);
      assertTrue(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 151, 182);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      String string0 = Utility.classOrInterface(4773);
      assertNotNull(string0);
      assertEquals("interface", string0);
      
      String string1 = Utility.compactClassName("java.lang.Integer", true);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("Integer", string1);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-59);
      byteArray0[1] = (byte) (-59);
      byteArray0[0] = (byte) (-59);
      byteArray0[3] = (byte) (-59);
      byteArray0[4] = (byte)73;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 4136, (int) (byte) (-59));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      byte[] byteArray0 = new byte[20];
      boolean boolean0 = true;
      boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      byte byte0 = Utility.typeOfSignature("!S");
      assertEquals((byte)9, byte0);
      
      String string0 = "?Y}S;Qc<^*w$q22q-";
      String string1 = "NhyjC#mt_$";
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("vZO|Q ", "multianewarray", "Oz'k6Ud+U");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: vZO|Q 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("Visiting non-standard PMGClass object");
      assertEquals((byte)12, byte0);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("Visiting non-standard PMGClass object");
      assertNotNull(mockPrintWriter0);
      
      Object[] objectArray0 = new Object[3];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      objectArray0[1] = (Object) mockPrintWriter0;
      objectArray0[2] = (Object) "Visiting non-standard PMGClass object";
      Utility.printArray((PrintWriter) mockPrintWriter0, objectArray0);
      String string0 = Utility.replace("Visiting non-standard PMGClass object", "invokevirtual", "");
      assertNotNull(string0);
      assertEquals("Visiting non-standard PMGClass object", string0);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      String string0 = Utility.convertString("hsPe.']oaD");
      assertNotNull(string0);
      assertEquals("hsPe.\\']oaD", string0);
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "631f5numV");
      assertFalse(boolean0);
      
      String string1 = Utility.compactClassName(";", true);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(";", string1);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      String string2 = Utility.encode(byteArray0, false);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("$A", string2);
      
      String string3 = Utility.signatureToString("JV");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals("long", string3);
      
      String string4 = Utility.toHexString(byteArray0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      assertEquals("00", string4);
      
      boolean boolean1 = Utility.isJavaIdentifierPart('\"');
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)63;
      byteArray0[1] = (byte)31;
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertArrayEquals(new byte[] {(byte)63, (byte)31, (byte)0}, byteArray0);
      assertFalse(boolean0);
      
      boolean boolean1 = Utility.equals(byteArray0, byteArray0);
      assertArrayEquals(new byte[] {(byte)63, (byte)31, (byte)0}, byteArray0);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      Constant[] constantArray0 = new Constant[1];
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic((-967), (byte)63);
      assertNotNull(constantInvokeDynamic0);
      assertEquals((-967), constantInvokeDynamic0.getClassIndex());
      assertEquals((byte)18, constantInvokeDynamic0.getTag());
      assertEquals(63, constantInvokeDynamic0.getNameAndTypeIndex());
      assertEquals((-967), constantInvokeDynamic0.getBootstrapMethodAttrIndex());
      
      constantArray0[0] = (Constant) constantInvokeDynamic0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(1, constantPool0.getLength());
      
      BCELComparator bCELComparator0 = Method.getComparator();
      assertNotNull(bCELComparator0);
      
      Constant.setComparator(bCELComparator0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 2143, 12);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-117);
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 873, 873);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        Utility.signatureToString("Gb7W@j*$rK", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Gb7W@j*$rK'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)72;
      byteArray0[2] = (byte)29;
      boolean boolean1 = Utility.equals(byteArray0, byteArray0);
      assertArrayEquals(new byte[] {(byte)72, (byte)0, (byte)29}, byteArray0);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 22, (int) (byte)72);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      boolean boolean1 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "fstore");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      
      String string0 = Utility.compactClassName("fstore", false);
      assertNotNull(string0);
      assertEquals("fstore", string0);
      
      String string1 = Utility.compactClassName("boolean");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("boolean", string1);
      
      byte[] byteArray0 = Utility.decode("F", false);
      assertArrayEquals(new byte[] {(byte)70}, byteArray0);
      assertNotNull(byteArray0);
      
      int int0 = 193;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 193, 165);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-127);
      byteArray0[1] = (byte) (-127);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      ConstantPool constantPool1 = constantPool0.copy();
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertNotNull(constantPool1);
      assertEquals(0, constantPool0.getLength());
      assertEquals(0, constantPool1.getLength());
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, 224, (-2296));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Locale locale0 = Locale.ROOT;
      assertNotNull(locale0);
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.toString());
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-88);
      byteArray0[1] = (byte) (-88);
      byteArray0[2] = (byte) (-88);
      byteArray0[3] = (byte) (-88);
      byteArray0[4] = (byte) (-88);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-88), (byte) (-88), (byte) (-88), (byte) (-88), (byte) (-88)}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      
      byteSequence0.mark((-990));
      assertArrayEquals(new byte[] {(byte) (-88), (byte) (-88), (byte) (-88), (byte) (-88), (byte) (-88)}, byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertArrayEquals(new byte[] {(byte) (-88), (byte) (-88), (byte) (-88), (byte) (-88), (byte) (-88)}, byteArray0);
      assertNotNull(string0);
      assertEquals(3, byteSequence0.getIndex());
      assertEquals("jsr\t\t#-22360", string0);
      
      int int0 = Utility.setBit((-990), (-990));
      assertEquals((-986), int0);
      
      String string1 = Utility.format(194, (byte) (-88), true, 'D');
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("194", string1);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("PuW^1^S.~;fyt");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `PuW^1^S.~;fyt'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ">\t");
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)125;
      byteArray0[1] = (byte)33;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)125, (byte)33}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      
      int int0 = 2371;
      String string0 = Utility.classOrInterface(2371);
      assertNotNull(string0);
      assertEquals("class", string0);
      
      byte byte0 = ObjectStreamConstants.TC_RESET;
      assertEquals((byte)121, byte0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 164, 1154, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      try { 
        Utility.typeOfSignature("8&%P(");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 8&%P(
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)115;
      byteArray0[1] = (byte)115;
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-121), (int) (byte) (-106), false);
      assertArrayEquals(new byte[] {(byte)115, (byte)115}, byteArray0);
      assertNotNull(string0);
      assertEquals("0:    drem\n1:    drem\n", string0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)115, (byte)115}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      
      // Undeclared exception!
      try { 
        Signature.translate("0:    drem\n1:    drem\n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal signature: 0:    drem
         // 1:    drem
         //  read e
         //
         verifyException("org.apache.bcel.classfile.Signature", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Invalid IOCase name: ");
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Invalid IOCase name: ");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-70);
      byteArray0[1] = (byte)21;
      byteArray0[2] = (byte) (-70);
      byteArray0[4] = (byte) (-70);
      boolean boolean2 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-70), (byte)21, (byte) (-70), (byte)0, (byte) (-70), (byte)0}, byteArray0);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      boolean boolean3 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3);
      
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      constantPool0.setConstantPool(constantArray0);
      assertEquals(0, constantPool0.getLength());
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-70), (int) (byte) (-70), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 5562. Constant pool size is: 0
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)72;
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertArrayEquals(new byte[] {(byte)72, (byte)0}, byteArray0);
      assertFalse(boolean0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      // Undeclared exception!
      try { 
        Utility.signatureToString("Unreachable default case reached!", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Unreachable default case reached!'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean2 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      ConstantPool constantPool0 = null;
      byte[] byteArray1 = new byte[1];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte)43;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, (ConstantPool) null, (int) (byte)100, (int) (byte)43);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      byte[] byteArray0 = Utility.decode("C#dM", false);
      assertArrayEquals(new byte[] {(byte)67, (byte)35, (byte)100, (byte)77}, byteArray0);
      assertNotNull(byteArray0);
      
      boolean boolean2 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertArrayEquals(new byte[] {(byte)67, (byte)35, (byte)100, (byte)77}, byteArray0);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)67, (byte)35, (byte)100, (byte)77}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      
      ConstantPool constantPool0 = null;
      boolean boolean3 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "C#dM");
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3);
      
      boolean boolean4 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertTrue(boolean4 == boolean3);
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4 == boolean2);
      assertTrue(boolean4 == boolean1);
      assertFalse(boolean4);
      
      String string0 = "access flags\t\t";
      short short0 = Utility.searchOpcode("access flags\t\t");
      assertEquals((short) (-1), short0);
      
      boolean boolean5 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertTrue(boolean5 == boolean2);
      assertTrue(boolean5 == boolean1);
      assertTrue(boolean5 == boolean3);
      assertTrue(boolean5 == boolean4);
      assertTrue(boolean5 == boolean0);
      assertFalse(boolean5);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 1079, 4123);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-80);
      byteArray0[1] = (byte) (-87);
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-80), (byte) (-87)}, byteArray0);
      assertTrue(boolean0);
      
      byte[] byteArray1 = new byte[7];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte)93;
      byteArray1[1] = (byte) (-87);
      byteArray1[2] = (byte) (-80);
      byteArray1[3] = (byte) (-87);
      byteArray1[4] = (byte) (-80);
      byteArray1[5] = (byte) (-80);
      byteArray1[6] = (byte) (-87);
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      assertArrayEquals(new byte[] {(byte)93, (byte) (-87), (byte) (-80), (byte) (-87), (byte) (-80), (byte) (-80), (byte) (-87)}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      
      Constant[] constantArray0 = new Constant[2];
      ConstantFloat constantFloat0 = new ConstantFloat(byteSequence0);
      assertArrayEquals(new byte[] {(byte)93, (byte) (-87), (byte) (-80), (byte) (-87), (byte) (-80), (byte) (-80), (byte) (-87)}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(constantFloat0);
      assertEquals(4, byteSequence0.getIndex());
      assertEquals((byte)4, constantFloat0.getTag());
      assertEquals(1.52843235E18F, constantFloat0.getBytes(), 0.01F);
      
      ConstantFloat constantFloat1 = new ConstantFloat(constantFloat0);
      assertArrayEquals(new byte[] {(byte)93, (byte) (-87), (byte) (-80), (byte) (-87), (byte) (-80), (byte) (-80), (byte) (-87)}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertTrue(constantFloat1.equals((Object)constantFloat0));
      assertNotNull(constantFloat1);
      assertEquals(4, byteSequence0.getIndex());
      assertEquals((byte)4, constantFloat0.getTag());
      assertEquals(1.52843235E18F, constantFloat0.getBytes(), 0.01F);
      assertEquals((byte)4, constantFloat1.getTag());
      assertEquals(1.52843235E18F, constantFloat1.getBytes(), 0.01F);
      
      constantArray0[0] = (Constant) constantFloat1;
      ConstantString constantString0 = new ConstantString((-83));
      assertNotNull(constantString0);
      assertEquals((byte)8, constantString0.getTag());
      assertEquals((-83), constantString0.getStringIndex());
      
      constantArray0[1] = (Constant) constantString0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(2, constantPool0.getLength());
      
      String string0 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertArrayEquals(new byte[] {(byte)93, (byte) (-87), (byte) (-80), (byte) (-87), (byte) (-80), (byte) (-80), (byte) (-87)}, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(string0);
      assertEquals(2, constantPool0.getLength());
      assertEquals(5, byteSequence0.getIndex());
      assertEquals("areturn", string0);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      String string0 = "HOsN1`*?S'v{";
      EvoSuiteFile evoSuiteFile0 = null;
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte)115;
      byteArray0[0] = (byte)115;
      byteArray0[1] = (byte)115;
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "HOsN1`*?S'v{");
      assertFalse(boolean0);
      
      String string1 = Utility.toHexString(byteArray0);
      assertArrayEquals(new byte[] {(byte)115, (byte)115}, byteArray0);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("73 73", string1);
      
      try { 
        Utility.typeOfSignature("HOsN1`*?S'v{");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: HOsN1`*?S'v{
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      LinkedList<Locale> linkedList0 = new LinkedList<Locale>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-122);
      byteArray0[1] = (byte) (-63);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      boolean boolean0 = Utility.isJavaIdentifierPart('7');
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 250, 209);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)21;
      byteArray0[3] = (byte)24;
      byteArray0[3] = (byte)24;
      byteArray0[4] = (byte) (-112);
      byteArray0[6] = (byte)24;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 71, (int) (byte)24, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      String string0 = "_ZP";
      short short0 = Utility.searchOpcode("_ZP");
      assertEquals((short) (-1), short0);
      
      String string1 = "\"PR{!K-T#Z^Km";
      try { 
        Utility.typeOfSignature("\"PR{!K-T#Z^Km");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: \"PR{!K-T#Z^Km
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "constant pool\t\t");
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2);
      
      boolean boolean3 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)52;
      byteArray0[1] = (byte) (-98);
      byteArray0[2] = (byte)52;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)52, 1598);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-30);
      byte byte0 = (byte)67;
      byteArray0[1] = (byte)67;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)67, 71, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      boolean boolean1 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Illegally nested brackets:");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-62);
      String string0 = Utility.toHexString(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-62)}, byteArray0);
      assertNotNull(string0);
      assertEquals("c2", string0);
      
      byte[] byteArray1 = new byte[1];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte) (-113);
      boolean boolean2 = Utility.equals(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-62)}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-113)}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      try { 
        Utility.typeOfSignature("c2");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: c2
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)27;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)27}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("Invalid signature: ");
      assertNotNull(constantUtf8_0);
      assertEquals("Invalid signature: ", constantUtf8_0.getBytes());
      assertEquals((byte)1, constantUtf8_0.getTag());
      
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertArrayEquals(new byte[] {(byte)27}, byteArray0);
      assertTrue(boolean0);
      
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (-379), (int) (byte)92);
      assertArrayEquals(new byte[] {(byte)27}, byteArray0);
      assertNotNull(string0);
      assertEquals("0:    iload_1\n", string0);
      
      try { 
        Utility.typeOfSignature("RSi`+Wqqa`iR");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: RSi`+Wqqa`iR
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)6;
      byteArray0[1] = (byte)78;
      byteArray0[2] = (byte)106;
      byteArray0[3] = (byte) (-40);
      byteArray0[4] = (byte)13;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 169, (int) (byte)78, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      String string0 = Utility.compactClassName("JV");
      assertNotNull(string0);
      assertEquals("JV", string0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-34);
      byteArray0[1] = (byte) (-34);
      byte byte0 = (byte) (-70);
      byte[] byteArray1 = new byte[3];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte)34;
      byteArray1[1] = (byte)42;
      byteArray1[2] = (byte) (-55);
      boolean boolean1 = Utility.equals(byteArray0, byteArray1);
      assertArrayEquals(new byte[] {(byte) (-34), (byte) (-34), (byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)34, (byte)42, (byte) (-55)}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, (ConstantPool) null, 3633, 125);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte)123;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)123, (byte)0}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)123, (byte)0}, byteArray0);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 167, (-2118));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      String string0 = Pattern.quote("Gb7W@j*$rK");
      assertNotNull(string0);
      assertEquals("\\QGb7W@j*$rK\\E", string0);
      
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "ZtR|L-wLGLru'o)j-");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string1 = Utility.classOrInterface(8);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("class", string1);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)79;
      byteArray0[1] = (byte) (-96);
      byteArray0[2] = (byte)79;
      byteArray0[3] = (byte)59;
      byteArray0[4] = (byte) (-96);
      byteArray0[5] = (byte) (-96);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)79, (byte) (-96), (byte)79, (byte)59, (byte) (-96), (byte) (-96), (byte)0}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      constantPool0.setConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertNotNull(constantPool1);
      assertEquals(0, constantPool1.getLength());
      
      String string2 = Utility.codeToString(byteSequence0, constantPool1, false);
      assertArrayEquals(new byte[] {(byte)79, (byte) (-96), (byte)79, (byte)59, (byte) (-96), (byte) (-96), (byte)0}, byteArray0);
      assertNotSame(constantPool1, constantPool0);
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals(0, constantPool1.getLength());
      assertEquals("iastore", string2);
      
      boolean boolean2 = true;
      // Undeclared exception!
      try { 
        Utility.signatureToString("QGb7W@j*$rKE", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `QGb7W@j*$rKE'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      String string0 = Utility.classOrInterface(88);
      assertNotNull(string0);
      assertEquals("class", string0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-77);
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-77)}, byteArray0);
      assertTrue(boolean0);
      
      String string1 = "LocalVariable";
      // Undeclared exception!
      try { 
        Utility.signatureToString("LocalVariable", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: LocalVariable
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      byte byte0 = (byte)65;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)65;
      byteArray0[1] = (byte)62;
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("+48Gz6ZMG<iM/5+7]");
      assertNotNull(constantUtf8_0);
      assertEquals("+48Gz6ZMG<iM/5+7]", constantUtf8_0.getBytes());
      assertEquals((byte)1, constantUtf8_0.getTag());
      
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      assertNotNull(emptyVisitor0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      constantUtf8_0.accept(emptyVisitor0);
      assertEquals("+48Gz6ZMG<iM/5+7]", constantUtf8_0.getBytes());
      assertEquals((byte)1, constantUtf8_0.getTag());
      
      ConstantUtf8 constantUtf8_1 = (ConstantUtf8)constantUtf8_0.copy();
      assertNotSame(constantUtf8_0, constantUtf8_1);
      assertNotSame(constantUtf8_1, constantUtf8_0);
      assertTrue(constantUtf8_1.equals((Object)constantUtf8_0));
      assertNotNull(constantUtf8_1);
      assertEquals("+48Gz6ZMG<iM/5+7]", constantUtf8_0.getBytes());
      assertEquals((byte)1, constantUtf8_0.getTag());
      assertEquals((byte)1, constantUtf8_1.getTag());
      assertEquals("+48Gz6ZMG<iM/5+7]", constantUtf8_1.getBytes());
      
      try { 
        Utility.typeOfSignature("+48Gz6ZMG<iM/5+7]");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 48Gz6ZMG<iM/5+7]
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      String string0 = Utility.toHexString(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(string0);
      assertEquals("00 00 00 00 00 00 00 00 00", string0);
      
      String string1 = Utility.convertString("00 00 00 00 00 00 00 00 00");
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("00 00 00 00 00 00 00 00 00", string1);
      
      int int0 = 167;
      ConstantClass constantClass0 = new ConstantClass(167);
      assertNotNull(constantClass0);
      assertEquals(167, constantClass0.getNameIndex());
      assertEquals((byte)7, constantClass0.getTag());
      
      ConstantClass constantClass1 = new ConstantClass(constantClass0);
      assertTrue(constantClass1.equals((Object)constantClass0));
      assertNotNull(constantClass1);
      assertEquals(167, constantClass0.getNameIndex());
      assertEquals((byte)7, constantClass0.getTag());
      assertEquals((byte)7, constantClass1.getTag());
      assertEquals(167, constantClass1.getNameIndex());
      
      try { 
        Utility.typeOfSignature(">vz=Y Ai'<a.cTTmI");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: >vz=Y Ai'<a.cTTmI
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      byte[] byteArray0 = new byte[12];
      Object object0 = new Object();
      assertNotNull(object0);
      
      byte[] byteArray1 = new byte[4];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte)124;
      byteArray1[1] = (byte) (-81);
      byteArray1[2] = (byte)124;
      boolean boolean0 = true;
      String string0 = Utility.format((byte)124, 14, true, ',');
      assertNotNull(string0);
      assertEquals("124,,,,,,,,,,,", string0);
      
      MockFile mockFile0 = new MockFile("124,,,,,,,,,,,");
      assertNotNull(mockFile0);
      assertEquals("124,,,,,,,,,,,", mockFile0.toString());
      assertFalse(mockFile0.exists());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.isDirectory());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.canRead());
      assertEquals("124,,,,,,,,,,,", mockFile0.getName());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getTotalSpace());
      
      try { 
        Utility.typeOfSignature("%[033#;;N7A(+2bx");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: %[033#;;N7A(+2bx
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)107;
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      int int0 = Pattern.CANON_EQ;
      assertEquals(128, int0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 122, 76, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      byteArray0[0] = (byte)99;
      byte byte0 = (byte) (-10);
      byteArray0[2] = (byte) (-119);
      byte[] byteArray1 = new byte[5];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[1] = (byte)99;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 77, 32, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      String string0 = Utility.compactClassName("is-jtore_2");
      assertNotNull(string0);
      assertEquals("is-jtore_2", string0);
      
      String string1 = Utility.getSignature("? super ");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("L?;", string1);
      
      boolean boolean1 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[3] = (byte)48;
      byteArray0[1] = (byte) (-123);
      byteArray0[2] = (byte) (-118);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)38, (int) (byte)38);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      byte byte0 = (byte) (-56);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-56);
      boolean boolean1 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-56)}, byteArray0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 60, (-600), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      String string0 = Constants.ILLEGAL_TYPE;
      assertNotNull(string0);
      assertEquals("<illegal type>", string0);
      
      byte[] byteArray0 = new byte[5];
      byte byte0 = (byte)90;
      byteArray0[0] = (byte)90;
      byteArray0[1] = (byte)47;
      byteArray0[4] = (byte)57;
      String string1 = Utility.compactClassName("KT=LqH oZ' vHm$u |");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("KT=LqH oZ' vHm$u |", string1);
      
      String string2 = Utility.convertString("KT=LqH oZ' vHm$u |");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("KT=LqH oZ\\' vHm$u |", string2);
      
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertArrayEquals(new byte[] {(byte)90, (byte)47, (byte)0, (byte)0, (byte)57}, byteArray0);
      assertTrue(boolean0);
      
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (-2368), 23);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    dup_x1
         // 1:    laload
         // 2:    nop
         // 3:    nop
         // 4:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      String string0 = Pattern.quote("Invalid type: ");
      assertNotNull(string0);
      assertEquals("\\QInvalid type: \\E", string0);
      
      byte[] byteArray0 = new byte[5];
      byte byte0 = (byte)90;
      byteArray0[0] = (byte)90;
      byteArray0[1] = (byte)87;
      byteArray0[4] = (byte)57;
      String string1 = Utility.compactClassName("Invalid type: ");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("Invalid type: ", string1);
      
      String string2 = Utility.convertString("Invalid type: ");
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("Invalid type: ", string2);
      
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertArrayEquals(new byte[] {(byte)90, (byte)87, (byte)0, (byte)0, (byte)57}, byteArray0);
      assertTrue(boolean0);
      
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (-2368), 23);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    dup_x1
         // 1:    pop
         // 2:    nop
         // 3:    nop
         // 4:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-117);
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      byte[] byteArray1 = new byte[1];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte) (-125);
      String string0 = Utility.codeToString(byteArray1, (ConstantPool) null, (int) (byte) (-117), 873, true);
      assertArrayEquals(new byte[] {(byte) (-125)}, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(string0);
      assertEquals("0:    lxor\n", string0);
      
      boolean boolean1 = Utility.isJavaIdentifierPart('?');
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, (ConstantPool) null, 2062, 873);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)50;
      byteArray0[1] = (byte)50;
      byteArray0[2] = (byte)19;
      byteArray0[3] = (byte)19;
      byteArray0[5] = (byte)50;
      byteArray0[5] = (byte)127;
      byteArray0[6] = (byte)19;
      boolean boolean2 = Utility.equals(byteArray0, byteArray0);
      assertArrayEquals(new byte[] {(byte)50, (byte)50, (byte)19, (byte)19, (byte)0, (byte)127, (byte)19}, byteArray0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)50, (int) (byte)127);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      String string0 = Constants.CONSTRUCTOR_NAME;
      assertNotNull(string0);
      assertEquals("<init>", string0);
      
      byte byte0 = (byte)71;
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte)95;
      byteArray0[2] = (byte)95;
      byte byte1 = (byte) (-70);
      byteArray0[3] = (byte) (-70);
      byteArray0[4] = (byte)95;
      byteArray0[5] = (byte)71;
      byteArray0[6] = (byte)11;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)71, (int) (byte)95, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[6] = (byte) (-71);
      boolean boolean3 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3);
      
      byteArray0[1] = (byte)101;
      byteArray0[2] = (byte) (-71);
      byteArray0[3] = (byte) (-71);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)101, (int) (byte)101);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[2] = (byte)127;
      byteArray0[3] = (byte) (-74);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)0, (-1265), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    nop
         // 1:    nop
         // 2:    land
         // 3:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      int int0 = Utility.setBit((-298), (-298));
      assertEquals((-298), int0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-74);
      byteArray0[1] = (byte) (-61);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (-298), (int) (byte) (-74), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "O%]USBd\"]hd[w~");
      assertFalse(boolean0);
      
      String string0 = "=Ss_$./hRGs%!d}As4";
      try { 
        Utility.typeOfSignature("=Ss_$./hRGs%!d}As4");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: =Ss_$./hRGs%!d}As4
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      Locale locale0 = Locale.UK;
      assertNotNull(locale0);
      assertEquals("en_GB", locale0.toString());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("GB", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "protected");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-60);
      boolean boolean3 = Utility.equals(byteArray0, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-60)}, byteArray0);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 161, (int) (byte) (-70));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      String string0 = "$!'Y,}4'yj5G^f";
      boolean boolean0 = false;
      Constant[] constantArray0 = new Constant[5];
      ConstantMethodType constantMethodType0 = new ConstantMethodType(177);
      assertNotNull(constantMethodType0);
      assertEquals((byte)16, constantMethodType0.getTag());
      assertEquals(177, constantMethodType0.getDescriptorIndex());
      
      constantArray0[0] = (Constant) constantMethodType0;
      ConstantMethodref constantMethodref0 = new ConstantMethodref(16384, 136);
      assertNotNull(constantMethodref0);
      assertEquals(136, constantMethodref0.getNameAndTypeIndex());
      assertEquals((byte)10, constantMethodref0.getTag());
      assertEquals(16384, constantMethodref0.getClassIndex());
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)71;
      byteArray0[1] = (byte)18;
      byteArray0[2] = (byte)71;
      byteArray0[3] = (byte)71;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (-3727), 14, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      Locale locale0 = Locale.UK;
      assertNotNull(locale0);
      assertEquals("GB", locale0.getCountry());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("en_GB", locale0.toString());
      assertEquals("GBR", locale0.getISO3Country());
      
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      String[] stringArray0 = Locale.getISOCountries();
      assertNotNull(stringArray0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)80;
      byte byte0 = (byte)71;
      byteArray0[1] = (byte)71;
      byte byte1 = (byte)48;
      byteArray0[2] = (byte)48;
      String string0 = Utility.toHexString(byteArray0);
      assertArrayEquals(new byte[] {(byte)80, (byte)71, (byte)48}, byteArray0);
      assertNotNull(string0);
      assertEquals("50 47 30", string0);
      
      String string1 = Utility.compactClassName("f;Jb)4Z");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("f;Jb)4Z", string1);
      
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertArrayEquals(new byte[] {(byte)80, (byte)71, (byte)48}, byteArray0);
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 14, 1301);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byte byte0 = (byte) (-99);
      byteArray0[0] = (byte) (-99);
      byteArray0[1] = (byte)35;
      byteArray0[2] = (byte)97;
      byteArray0[3] = (byte)104;
      byteArray0[4] = (byte) (-101);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-99), (byte)35, (byte)97, (byte)104, (byte) (-101)}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      
      ConstantInteger constantInteger0 = new ConstantInteger((byte)35);
      assertNotNull(constantInteger0);
      assertEquals((byte)3, constantInteger0.getTag());
      assertEquals(35, constantInteger0.getBytes());
      
      ConstantInteger constantInteger1 = new ConstantInteger(constantInteger0);
      assertTrue(constantInteger1.equals((Object)constantInteger0));
      assertNotNull(constantInteger1);
      assertEquals((byte)3, constantInteger0.getTag());
      assertEquals(35, constantInteger0.getBytes());
      assertEquals(35, constantInteger1.getBytes());
      assertEquals((byte)3, constantInteger1.getTag());
      
      ConstantInteger constantInteger2 = new ConstantInteger(constantInteger1);
      assertTrue(constantInteger0.equals((Object)constantInteger1));
      assertTrue(constantInteger1.equals((Object)constantInteger0));
      assertTrue(constantInteger2.equals((Object)constantInteger1));
      assertTrue(constantInteger2.equals((Object)constantInteger0));
      assertNotNull(constantInteger2);
      assertEquals((byte)3, constantInteger0.getTag());
      assertEquals(35, constantInteger0.getBytes());
      assertEquals(35, constantInteger1.getBytes());
      assertEquals((byte)3, constantInteger1.getTag());
      assertEquals((byte)3, constantInteger2.getTag());
      assertEquals(35, constantInteger2.getBytes());
      
      ConstantInteger constantInteger3 = new ConstantInteger(constantInteger1);
      assertTrue(constantInteger0.equals((Object)constantInteger1));
      assertTrue(constantInteger0.equals((Object)constantInteger2));
      assertTrue(constantInteger1.equals((Object)constantInteger0));
      assertTrue(constantInteger1.equals((Object)constantInteger2));
      assertTrue(constantInteger3.equals((Object)constantInteger1));
      assertTrue(constantInteger3.equals((Object)constantInteger0));
      assertTrue(constantInteger3.equals((Object)constantInteger2));
      assertNotNull(constantInteger3);
      assertEquals((byte)3, constantInteger0.getTag());
      assertEquals(35, constantInteger0.getBytes());
      assertEquals(35, constantInteger1.getBytes());
      assertEquals((byte)3, constantInteger1.getTag());
      assertEquals((byte)3, constantInteger3.getTag());
      assertEquals(35, constantInteger3.getBytes());
      
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-99), (byte)35, (byte)97, (byte)104, (byte) (-101)}, byteArray0);
      assertFalse(boolean0);
      
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      assertNotNull(emptyVisitor0);
      
      constantInteger3.accept(emptyVisitor0);
      assertNotSame(constantInteger0, constantInteger2);
      assertNotSame(constantInteger0, constantInteger3);
      assertNotSame(constantInteger0, constantInteger1);
      assertNotSame(constantInteger1, constantInteger2);
      assertNotSame(constantInteger1, constantInteger0);
      assertNotSame(constantInteger1, constantInteger3);
      assertNotSame(constantInteger3, constantInteger1);
      assertNotSame(constantInteger3, constantInteger2);
      assertNotSame(constantInteger3, constantInteger0);
      assertTrue(constantInteger0.equals((Object)constantInteger3));
      assertTrue(constantInteger0.equals((Object)constantInteger1));
      assertTrue(constantInteger0.equals((Object)constantInteger2));
      assertTrue(constantInteger1.equals((Object)constantInteger0));
      assertTrue(constantInteger1.equals((Object)constantInteger2));
      assertTrue(constantInteger1.equals((Object)constantInteger3));
      assertTrue(constantInteger3.equals((Object)constantInteger1));
      assertTrue(constantInteger3.equals((Object)constantInteger0));
      assertTrue(constantInteger3.equals((Object)constantInteger2));
      assertEquals((byte)3, constantInteger0.getTag());
      assertEquals(35, constantInteger0.getBytes());
      assertEquals(35, constantInteger1.getBytes());
      assertEquals((byte)3, constantInteger1.getTag());
      assertEquals((byte)3, constantInteger3.getTag());
      assertEquals(35, constantInteger3.getBytes());
      
      ConstantPool constantPool0 = null;
      Constant[] constantArray0 = new Constant[6];
      constantArray0[0] = (Constant) constantInteger2;
      constantArray0[1] = (Constant) constantInteger0;
      constantArray0[2] = (Constant) constantInteger2;
      constantArray0[3] = (Constant) constantInteger2;
      constantArray0[4] = (Constant) constantInteger1;
      constantArray0[5] = (Constant) constantInteger1;
      ConstantPool constantPool1 = new ConstantPool(constantArray0);
      assertNotNull(constantPool1);
      assertEquals(6, constantPool1.getLength());
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, (int) (byte)97, (int) (byte) (-101));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)64;
      boolean boolean1 = Utility.equals(byteArray0, byteArray0);
      assertArrayEquals(new byte[] {(byte)64, (byte)0}, byteArray0);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)64, (int) (byte)64);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      objectArray0[1] = object1;
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "4");
      assertFalse(boolean0);
      
      Object object2 = new Object();
      assertFalse(object2.equals((Object)object1));
      assertFalse(object2.equals((Object)object0));
      assertNotNull(object2);
      
      Object object3 = new Object();
      assertFalse(object3.equals((Object)object1));
      assertFalse(object3.equals((Object)object2));
      assertFalse(object3.equals((Object)object0));
      assertNotNull(object3);
      
      objectArray0[4] = object3;
      Object object4 = new Object();
      assertFalse(object4.equals((Object)object2));
      assertFalse(object4.equals((Object)object0));
      assertFalse(object4.equals((Object)object1));
      assertFalse(object4.equals((Object)object3));
      assertNotNull(object4);
      
      objectArray0[5] = object4;
      Object object5 = new Object();
      assertFalse(object5.equals((Object)object1));
      assertFalse(object5.equals((Object)object2));
      assertFalse(object5.equals((Object)object3));
      assertFalse(object5.equals((Object)object4));
      assertFalse(object5.equals((Object)object0));
      assertNotNull(object5);
      
      objectArray0[6] = object5;
      String string0 = Utility.printArray(objectArray0, true);
      assertNotNull(string0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)119;
      objectArray0[2] = (Object) (byte)34;
      byteArray0[2] = (byte) (-58);
      byteArray0[3] = (byte) (-94);
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      byteArray0[4] = (byte)119;
      byteArray0[5] = (byte)42;
      byteArray0[6] = (byte)84;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)84, (int) (byte) (-58), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-85);
      byteArray0[1] = (byte) (-17);
      byteArray0[3] = (byte)17;
      byteArray0[4] = (byte) (-121);
      byteArray0[5] = (byte) (-17);
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte) (-106);
      byteArray0[8] = (byte)0;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)0, (int) (byte) (-17));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      String string0 = Utility.signatureToString("F9By", false);
      assertNotNull(string0);
      assertEquals("float", string0);
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      short short0 = Utility.searchOpcode("Warnfng: Padding>bytej!= 0 in ");
      assertEquals((short) (-1), short0);
      
      // Undeclared exception!
      try { 
        Utility.signatureToString("Warnfng: Padding>bytej!= 0 in ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Warnfng: Padding>bytej!= 0 in '
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      ConstantPool constantPool0 = null;
      String string0 = Constants.ILLEGAL_TYPE;
      assertNotNull(string0);
      assertEquals("<illegal type>", string0);
      
      int int0 = 156;
      String string1 = Utility.classOrInterface(156);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("class", string1);
      
      String string2 = Utility.compactClassName("java.lang.Integer", true);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("Integer", string2);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-57);
      byteArray0[1] = (byte) (-57);
      byteArray0[2] = (byte) (-57);
      byteArray0[3] = (byte) (-57);
      byte byte0 = (byte)73;
      byteArray0[4] = (byte)73;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 4088, (int) (byte) (-57));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)119;
      byteArray0[1] = (byte)119;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)119, (byte)119}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("IYgeY>U](X 3FT'5 kR");
      assertNotNull(constantUtf8_0);
      assertEquals((byte)1, constantUtf8_0.getTag());
      assertEquals("IYgeY>U](X 3FT'5 kR", constantUtf8_0.getBytes());
      
      ConstantUtf8 constantUtf8_1 = new ConstantUtf8("IYgeY>U](X 3FT'5 kR");
      assertTrue(constantUtf8_1.equals((Object)constantUtf8_0));
      assertNotNull(constantUtf8_1);
      assertEquals((byte)1, constantUtf8_1.getTag());
      assertEquals("IYgeY>U](X 3FT'5 kR", constantUtf8_1.getBytes());
      
      int int0 = byteSequence0.available();
      assertArrayEquals(new byte[] {(byte)119, (byte)119}, byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(2, int0);
      
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertArrayEquals(new byte[] {(byte)119, (byte)119}, byteArray0);
      assertNotNull(string0);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals("dneg", string0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 300, (int) (byte)119);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      String string0 = Utility.methodSignatureReturnType("SPC#{J");
      assertNotNull(string0);
      assertEquals("short", string0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      try { 
        Utility.typeOfMethodSignature("void");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: void
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      byteArray0[0] = (byte)50;
      byteArray0[1] = (byte)124;
      byteArray0[2] = (byte)101;
      byteArray0[3] = (byte)17;
      byteArray0[4] = (byte) (-121);
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte) (-74);
      byteArray0[7] = (byte) (-106);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-74), (int) (byte)50, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    aaload
         // 1:    iushr
         // 2:    lsub
         // 3:    sipush\t\t-30976
         // 6:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      byte byte0 = (byte) (-121);
      ConstantPool constantPool0 = null;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)17;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)17, (int) (byte)17, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      String string0 = Utility.compactClassName("t:");
      assertNotNull(string0);
      assertEquals("t:", string0);
      
      ConstantPool constantPool0 = null;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)16;
      byteArray0[1] = (byte) (-99);
      int int0 = 76;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 76, (int) (byte)16);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      boolean boolean0 = Utility.isJavaIdentifierPart('h');
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)103;
      byteArray0[2] = (byte)36;
      byteArray0[3] = (byte) (-15);
      byteArray0[4] = (byte)10;
      byteArray0[5] = (byte)93;
      byteArray0[6] = (byte)109;
      Constant[] constantArray0 = new Constant[6];
      ConstantFieldref constantFieldref0 = new ConstantFieldref(57, 46);
      assertNotNull(constantFieldref0);
      assertEquals(46, constantFieldref0.getNameAndTypeIndex());
      assertEquals((byte)9, constantFieldref0.getTag());
      assertEquals(57, constantFieldref0.getClassIndex());
      
      ConstantFieldref constantFieldref1 = new ConstantFieldref(constantFieldref0);
      assertTrue(constantFieldref1.equals((Object)constantFieldref0));
      assertNotNull(constantFieldref1);
      assertEquals(46, constantFieldref0.getNameAndTypeIndex());
      assertEquals((byte)9, constantFieldref0.getTag());
      assertEquals(57, constantFieldref0.getClassIndex());
      assertEquals((byte)9, constantFieldref1.getTag());
      assertEquals(46, constantFieldref1.getNameAndTypeIndex());
      assertEquals(57, constantFieldref1.getClassIndex());
      
      constantArray0[0] = (Constant) constantFieldref1;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)103, (byte)36, (byte) (-15), (byte)10, (byte)93, (byte)109}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      
      ConstantFieldref constantFieldref2 = new ConstantFieldref(byteSequence0);
      assertArrayEquals(new byte[] {(byte)0, (byte)103, (byte)36, (byte) (-15), (byte)10, (byte)93, (byte)109}, byteArray0);
      assertFalse(constantFieldref2.equals((Object)constantFieldref1));
      assertFalse(constantFieldref2.equals((Object)constantFieldref0));
      assertNotNull(constantFieldref2);
      assertEquals(4, byteSequence0.getIndex());
      assertEquals(9457, constantFieldref2.getNameAndTypeIndex());
      assertEquals(103, constantFieldref2.getClassIndex());
      assertEquals((byte)9, constantFieldref2.getTag());
      
      constantArray0[1] = (Constant) constantFieldref2;
      ConstantMethodType constantMethodType0 = new ConstantMethodType(byteSequence0);
      assertArrayEquals(new byte[] {(byte)0, (byte)103, (byte)36, (byte) (-15), (byte)10, (byte)93, (byte)109}, byteArray0);
      assertNotNull(constantMethodType0);
      assertEquals((byte)16, constantMethodType0.getTag());
      assertEquals(2653, constantMethodType0.getDescriptorIndex());
      assertEquals(6, byteSequence0.getIndex());
      
      constantArray0[2] = (Constant) constantMethodType0;
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)103, (byte)36, (byte) (-15), (byte)10, (byte)93, (byte)109}, byteArray0);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertNotNull(byteSequence1);
      assertEquals(0, byteSequence1.getIndex());
      
      ConstantInteger constantInteger0 = new ConstantInteger(byteSequence1);
      assertArrayEquals(new byte[] {(byte)0, (byte)103, (byte)36, (byte) (-15), (byte)10, (byte)93, (byte)109}, byteArray0);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertNotNull(constantInteger0);
      assertEquals(4, byteSequence1.getIndex());
      assertEquals((byte)3, constantInteger0.getTag());
      assertEquals(6759665, constantInteger0.getBytes());
      
      constantArray0[3] = (Constant) constantInteger0;
      ConstantMethodref constantMethodref0 = new ConstantMethodref((byte)109, (byte)10);
      assertNotNull(constantMethodref0);
      assertEquals((byte)10, constantMethodref0.getTag());
      assertEquals(10, constantMethodref0.getNameAndTypeIndex());
      assertEquals(109, constantMethodref0.getClassIndex());
      
      ConstantMethodref constantMethodref1 = new ConstantMethodref(constantMethodref0);
      assertTrue(constantMethodref1.equals((Object)constantMethodref0));
      assertNotNull(constantMethodref1);
      assertEquals((byte)10, constantMethodref0.getTag());
      assertEquals(10, constantMethodref0.getNameAndTypeIndex());
      assertEquals(109, constantMethodref0.getClassIndex());
      assertEquals(109, constantMethodref1.getClassIndex());
      assertEquals((byte)10, constantMethodref1.getTag());
      assertEquals(10, constantMethodref1.getNameAndTypeIndex());
      
      constantArray0[4] = (Constant) constantMethodref1;
      ConstantFloat constantFloat0 = new ConstantFloat((byte)93);
      assertNotNull(constantFloat0);
      assertEquals(93.0F, constantFloat0.getBytes(), 0.01F);
      assertEquals((byte)4, constantFloat0.getTag());
      
      constantArray0[5] = (Constant) constantFloat0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(6, constantPool0.getLength());
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 90, 46, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      byte byte0 = (byte) (-106);
      byte byte1 = (byte)14;
      String string0 = Utility.compactClassName("'L+TJ:a!!9u");
      assertNotNull(string0);
      assertEquals("'L+TJ:a!!9u", string0);
      
      ConstantPool constantPool0 = null;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)14;
      int int0 = Pattern.COMMENTS;
      assertEquals(4, int0);
      
      try { 
        Utility.typeOfSignature("'L+TJ:a!!9u");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 'L+TJ:a!!9u
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      Locale locale0 = Locale.UK;
      assertNotNull(locale0);
      assertEquals("GB", locale0.getCountry());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en_GB", locale0.toString());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)77;
      byteArray0[1] = (byte) (-99);
      byteArray0[2] = (byte)77;
      byteArray0[3] = (byte)14;
      String string0 = Utility.compactClassName("N>z:");
      assertNotNull(string0);
      assertEquals("N>z:", string0);
      
      ConstantPool constantPool0 = null;
      int int0 = 46;
      String string1 = Utility.codeToString(byteArray0, (ConstantPool) null, (-772), 46);
      assertArrayEquals(new byte[] {(byte)77, (byte) (-99), (byte)77, (byte)14}, byteArray0);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("0:    astore_2\n1:    ifgt\t\t#19727\n", string1);
      
      int int1 = Pattern.COMMENTS;
      assertFalse(int1 == int0);
      assertEquals(4, int1);
      
      try { 
        Utility.typeOfSignature("N>z:");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: N>z:
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "fstore");
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      boolean boolean3 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3);
      
      String string0 = "CONSTANT_MethodHandle";
      boolean boolean4 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "CONSTANT_MethodHandle");
      assertTrue(boolean4 == boolean1);
      assertTrue(boolean4 == boolean3);
      assertFalse(boolean4 == boolean0);
      assertTrue(boolean4 == boolean2);
      assertFalse(boolean4);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-81);
      boolean boolean5 = Utility.equals(byteArray0, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-81)}, byteArray0);
      assertFalse(boolean5 == boolean3);
      assertFalse(boolean5 == boolean1);
      assertFalse(boolean5 == boolean4);
      assertFalse(boolean5 == boolean2);
      assertTrue(boolean5 == boolean0);
      assertTrue(boolean5);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 1834, 196);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      String string0 = "SPC#{J";
      String string1 = Utility.methodSignatureReturnType("SPC#{J");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("short", string1);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)82;
      byteArray0[1] = (byte) (-75);
      byteArray0[3] = (byte)74;
      byteArray0[4] = (byte) (-75);
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertArrayEquals(new byte[] {(byte)82, (byte) (-75), (byte)0, (byte)74, (byte) (-75)}, byteArray0);
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-75), 46);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      String string0 = Utility.methodSignatureReturnType("SPC#{J");
      assertNotNull(string0);
      assertEquals("short", string0);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Code");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      String string1 = Utility.compactClassName("java.lang.]", false);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("java.lang.]", string1);
      
      byte[] byteArray0 = Utility.decode("SPC#{J", false);
      assertArrayEquals(new byte[] {(byte)83, (byte)80, (byte)67, (byte)35, (byte)123, (byte)74}, byteArray0);
      assertNotNull(byteArray0);
      
      boolean boolean3 = Utility.equals(byteArray0, byteArray0);
      assertArrayEquals(new byte[] {(byte)83, (byte)80, (byte)67, (byte)35, (byte)123, (byte)74}, byteArray0);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3);
      
      String string2 = Utility.codeToString(byteArray0, (ConstantPool) null, (-1458), (-1458));
      assertArrayEquals(new byte[] {(byte)83, (byte)80, (byte)67, (byte)35, (byte)123, (byte)74}, byteArray0);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("0:    aastore\n1:    lastore\n2:    fstore_0\n3:    fload_1\n4:    lshr\n5:    dstore_3\n", string2);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)83, (byte)80, (byte)67, (byte)35, (byte)123, (byte)74}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      
      try { 
        Utility.methodSignatureArgumentTypes("Code", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Code
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      String string0 = Constants.CONSTRUCTOR_NAME;
      assertNotNull(string0);
      assertEquals("<init>", string0);
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "<init>");
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-76);
      byteArray0[1] = (byte) (-68);
      byteArray0[2] = (byte)18;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-76), (byte) (-68), (byte)18}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("*C1>SQ<Wfp5M8\"");
      assertNotNull(constantUtf8_0);
      assertEquals((byte)1, constantUtf8_0.getTag());
      assertEquals("*C1>SQ<Wfp5M8\"", constantUtf8_0.getBytes());
      
      String string1 = Utility.replace("<init>", "Nxd'l4Vc ", "o01$w5dlwjK'3(6");
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("<init>", string1);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-70), 11);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "6Ev<");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      byte[] byteArray0 = new byte[23];
      byteArray0[0] = (byte) (-78);
      byteArray0[1] = (byte) (-78);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-78), (int) (byte) (-78));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      String string0 = Utility.accessToString(167);
      assertNotNull(string0);
      assertEquals("public private protected synchronized transient", string0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[1] = (byte)32;
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      String string1 = Utility.compactClassName("public private protected synchronized transient", false);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("public private protected synchronized transient", string1);
      
      String string2 = Utility.compactClassName("public private protected synchronized transient");
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("public private protected synchronized transient", string2);
      
      byte[] byteArray1 = Utility.decode(":=W;", false);
      assertArrayEquals(new byte[] {(byte)58, (byte)61, (byte)87, (byte)59}, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      
      byte[] byteArray2 = new byte[6];
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      
      byteArray2[0] = (byte)32;
      byteArray2[1] = (byte) (-85);
      byteArray2[2] = (byte) (-85);
      byte byte0 = (byte)84;
      byteArray2[3] = (byte)84;
      byteArray2[4] = (byte) (-85);
      byteArray2[5] = (byte)32;
      boolean boolean1 = Utility.equals(byteArray1, byteArray2);
      assertArrayEquals(new byte[] {(byte)58, (byte)61, (byte)87, (byte)59}, byteArray1);
      assertArrayEquals(new byte[] {(byte)32, (byte) (-85), (byte) (-85), (byte)84, (byte) (-85), (byte)32}, byteArray2);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray1.equals((Object)byteArray2));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string3 = Utility.codeToString(byteArray1, (ConstantPool) null, (-1457), (int) (byte) (-85));
      assertArrayEquals(new byte[] {(byte)58, (byte)61, (byte)87, (byte)59}, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray1, byteArray2);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray1.equals((Object)byteArray2));
      assertNotNull(string3);
      assertEquals("0:    astore\t\t%61\n2:    pop\n3:    istore_0\n", string3);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "public private protected synchronized transient";
      stringArray0[1] = "public private protected synchronized transient";
      String string4 = Utility.methodTypeToSignature("public private protected synchronized transient", stringArray0);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      assertEquals("(Lpublic;Lpublic;)Lpublic;", string4);
      
      try { 
        Utility.methodSignatureArgumentTypes("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("N1-^)NR'_v(T~&_K");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `N1-^)NR'_v(T~&_K'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      byte byte0 = (byte)17;
      String string0 = Utility.compactClassName("-h>^e2G<BJ?");
      assertNotNull(string0);
      assertEquals("-h>^e2G<BJ?", string0);
      
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string1 = "long";
      boolean boolean2 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "M[LbCyce76\"Z");
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-60);
      byteArray0[1] = (byte)13;
      byteArray0[2] = (byte)97;
      byteArray0[3] = (byte)13;
      byteArray0[4] = (byte) (-78);
      byteArray0[5] = (byte)17;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (-3018), (int) (byte)17);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    wide\t(wide)
         // 1:    fconst_2
         // 2:    ladd
         // 3:    fconst_2
         // 4:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      byte byte0 = (byte)95;
      boolean boolean2 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "fstore");
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      
      boolean boolean3 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3);
      
      String string0 = Utility.compactClassName("i", false);
      assertNotNull(string0);
      assertEquals("i", string0);
      
      String string1 = Utility.compactClassName("\t\t");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("\t\t", string1);
      
      byte[] byteArray0 = Utility.decode("null", false);
      assertArrayEquals(new byte[] {(byte)110, (byte)117, (byte)108, (byte)108}, byteArray0);
      assertNotNull(byteArray0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)95, (int) (byte)95);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      Object object2 = new Object();
      assertFalse(object2.equals((Object)object0));
      assertFalse(object2.equals((Object)object1));
      assertNotNull(object2);
      
      Object object3 = new Object();
      assertFalse(object3.equals((Object)object0));
      assertFalse(object3.equals((Object)object1));
      assertFalse(object3.equals((Object)object2));
      assertNotNull(object3);
      
      String string0 = Utility.compactClassName("istore_2");
      assertNotNull(string0);
      assertEquals("istore_2", string0);
      
      String string1 = Utility.classOrInterface((byte)68);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("class", string1);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[6] = (byte)51;
      byteArray0[2] = (byte)118;
      byteArray0[3] = (byte)51;
      byteArray0[4] = (byte)72;
      byteArray0[5] = (byte)51;
      byteArray0[6] = (byte)51;
      byteArray0[7] = (byte)68;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 1154, (int) (byte)72, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "6Ev<");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      byte[] byteArray0 = new byte[23];
      byteArray0[0] = (byte) (-78);
      byteArray0[1] = (byte) (-78);
      boolean boolean2 = false;
      byte[] byteArray1 = Utility.decode("6Ev<", false);
      assertArrayEquals(new byte[] {(byte)54, (byte)69, (byte)118, (byte)60}, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      
      try { 
        Utility.typeOfSignature("6Ev<");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 6Ev<
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      Object object2 = new Object();
      assertFalse(object2.equals((Object)object1));
      assertFalse(object2.equals((Object)object0));
      assertNotNull(object2);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)51;
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      String string0 = "/D-l";
      short short0 = Utility.searchOpcode("/D-l");
      assertEquals((short) (-1), short0);
      
      // Undeclared exception!
      try { 
        Utility.signatureToString("X;buqo");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `X;buqo'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      short short0 = Utility.searchOpcode("QME$h5VG7ra!3oY,p");
      assertEquals((short) (-1), short0);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)117;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte)117}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      String string0 = Utility.codeToString(byteSequence0, constantPool0);
      assertArrayEquals(new byte[] {(byte)117}, byteArray0);
      assertNotNull(string0);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals(0, constantPool0.getLength());
      assertEquals("lneg", string0);
      
      String string1 = "Ae\\}!v&IXR4o";
      try { 
        Utility.methodSignatureArgumentTypes("Ae}!v&IXR4o");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Ae}!v&IXR4o
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      int int0 = Utility.setBit((-298), (-298));
      assertEquals((-298), int0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-23);
      byteArray0[1] = (byte) (-12);
      byteArray0[2] = (byte)91;
      byteArray0[3] = (byte) (-56);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-12), (int) (byte)91);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    <illegal opcode>
         // 1:    <illegal opcode>
         // 2:    dup_x2
         // 3:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      int int0 = Pattern.DOTALL;
      assertEquals(32, int0);
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      assertFalse(boolean0);
      
      LinkedList<Locale> linkedList0 = new LinkedList<Locale>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      byte byte0 = (byte)72;
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-92);
      byteArray0[1] = (byte)75;
      byteArray0[2] = (byte)13;
      byteArray0[3] = (byte)75;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)72, (int) (byte) (-92), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      assertFalse(boolean0);
      
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      boolean boolean1 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "~rJe&!p5");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "~rJe&!p5");
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      Object object2 = new Object();
      assertFalse(object2.equals((Object)object0));
      assertFalse(object2.equals((Object)object1));
      assertNotNull(object2);
      
      Object object3 = new Object();
      assertFalse(object3.equals((Object)object1));
      assertFalse(object3.equals((Object)object0));
      assertFalse(object3.equals((Object)object2));
      assertNotNull(object3);
      
      Object object4 = new Object();
      assertFalse(object4.equals((Object)object0));
      assertFalse(object4.equals((Object)object1));
      assertFalse(object4.equals((Object)object3));
      assertFalse(object4.equals((Object)object2));
      assertNotNull(object4);
      
      Object object5 = new Object();
      assertFalse(object5.equals((Object)object4));
      assertFalse(object5.equals((Object)object3));
      assertFalse(object5.equals((Object)object2));
      assertFalse(object5.equals((Object)object1));
      assertFalse(object5.equals((Object)object0));
      assertNotNull(object5);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-6);
      byte byte0 = (byte)14;
      byteArray0[1] = (byte)14;
      byteArray0[1] = (byte)112;
      byteArray0[3] = (byte) (-85);
      byteArray0[4] = (byte) (-17);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 225, (int) (byte) (-85));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      String string0 = Constants.ILLEGAL_TYPE;
      assertNotNull(string0);
      assertEquals("<illegal type>", string0);
      
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)114;
      byte byte0 = (byte)19;
      byteArray0[1] = (byte)19;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 1140, (int) (byte)114);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      Locale locale0 = Locale.UK;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_GB", locale0.toString());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("GB", locale0.getCountry());
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-99);
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-99)}, byteArray0);
      assertFalse(boolean0);
      
      byte byte0 = (byte)89;
      boolean boolean1 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-99)}, byteArray0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string0 = Utility.encode(byteArray0, false);
      assertArrayEquals(new byte[] {(byte) (-99)}, byteArray0);
      assertNotNull(string0);
      assertEquals("$9d", string0);
      
      boolean boolean2 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      boolean boolean3 = Utility.equals(byteArray0, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-99)}, byteArray0);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3);
      
      ConstantPool constantPool0 = null;
      byte[] byteArray1 = new byte[5];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte) (-99);
      String string1 = "getfield";
      byte[] byteArray2 = Utility.decode("getfield", false);
      assertArrayEquals(new byte[] {(byte)103, (byte)101, (byte)116, (byte)102, (byte)105, (byte)101, (byte)108, (byte)100}, byteArray2);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertNotNull(byteArray2);
      
      boolean boolean4 = Utility.equals(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-99)}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-99), (byte)0, (byte)0, (byte)0, (byte)0}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray1.equals((Object)byteArray2));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertTrue(boolean4 == boolean2);
      assertFalse(boolean4 == boolean3);
      assertTrue(boolean4 == boolean1);
      assertTrue(boolean4 == boolean0);
      assertFalse(boolean4);
      
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool1 = new ConstantPool(constantArray0);
      assertNotNull(constantPool1);
      assertEquals(0, constantPool1.getLength());
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray2, constantPool1, 190, 187);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("$!'Y,}4'yj5G^f", false);
      assertNotNull(byteArray0);
      
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      
      ConstantMethodType constantMethodType0 = new ConstantMethodType(4);
      assertNotNull(constantMethodType0);
      assertEquals(4, constantMethodType0.getDescriptorIndex());
      assertEquals((byte)16, constantMethodType0.getTag());
      
      ConstantMethodref constantMethodref0 = new ConstantMethodref(82, (-1723925435));
      assertNotNull(constantMethodref0);
      assertEquals((byte)10, constantMethodref0.getTag());
      assertEquals(82, constantMethodref0.getClassIndex());
      assertEquals((-1723925435), constantMethodref0.getNameAndTypeIndex());
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 69, 123, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      byteArray0[0] = (byte)50;
      byteArray0[1] = (byte)95;
      byteArray0[2] = (byte)95;
      byteArray0[3] = (byte)11;
      boolean boolean2 = Utility.equals(byteArray0, byteArray0);
      assertArrayEquals(new byte[] {(byte)50, (byte)95, (byte)95, (byte)11, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2);
      
      String string0 = Utility.format((byte)127, (-3077), true, '#');
      assertNotNull(string0);
      assertEquals("127", string0);
      
      MockFile mockFile0 = new MockFile("c0iSL!6s7-T?H,<E");
      assertNotNull(mockFile0);
      assertFalse(mockFile0.exists());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("c0iSL!6s7-T?H,<E", mockFile0.getName());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertNull(mockFile0.getParent());
      assertEquals("c0iSL!6s7-T?H,<E", mockFile0.toString());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.lastModified());
      
      try { 
        Utility.typeOfSignature("127");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 127
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)13;
      byteArray0[1] = (byte)17;
      byteArray0[6] = (byte) (-106);
      byteArray0[3] = (byte) (-106);
      byteArray0[4] = (byte) (-121);
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte) (-106);
      byteArray0[7] = (byte)0;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)115, (int) (byte)0, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      Locale locale0 = Locale.UK;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals("GB", locale0.getCountry());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en_GB", locale0.toString());
      assertEquals("GBR", locale0.getISO3Country());
      
      ConstantPool constantPool0 = null;
      int int0 = 117;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-92);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-92), (int) (byte) (-92));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-66);
      byteArray0[1] = (byte) (-59);
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Invalid IOCase name: ");
      assertFalse(boolean0);
      
      byteArray0[2] = (byte)87;
      boolean boolean1 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-66), (byte) (-59), (byte)87, (byte)0}, byteArray0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2);
      
      boolean boolean3 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3);
      
      boolean boolean4 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "(Tfy-Ya>Q[]\t*l*J");
      assertTrue(boolean4 == boolean1);
      assertTrue(boolean4 == boolean3);
      assertTrue(boolean4 == boolean0);
      assertFalse(boolean4 == boolean2);
      assertFalse(boolean4);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)87, (-1793955938), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Locale locale0 = Locale.ROOT;
      assertNotNull(locale0);
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getISO3Language());
      
      byte[] byteArray0 = new byte[5];
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      byteArray0[0] = (byte) (-83);
      byteArray0[1] = (byte) (-83);
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "XG_1SAwg70oQ");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-83), (int) (byte) (-83));
      assertArrayEquals(new byte[] {(byte) (-83), (byte) (-83), (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(string0);
      assertEquals("0:    lreturn\n1:    lreturn\n2:    nop\n3:    nop\n4:    nop\n", string0);
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      byte[] byteArray1 = new byte[1];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte) (-125);
      boolean boolean1 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray1);
      assertArrayEquals(new byte[] {(byte) (-125)}, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray1);
      assertArrayEquals(new byte[] {(byte) (-125)}, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      
      String string0 = Utility.encode(byteArray1, true);
      assertArrayEquals(new byte[] {(byte) (-125)}, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(string0);
      assertEquals("$l$8b$I$A$A$A$A$A$A$A", string0);
      
      boolean boolean3 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3);
      
      boolean boolean4 = Utility.equals(byteArray0, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(boolean4 == boolean3);
      assertFalse(boolean4 == boolean2);
      assertTrue(boolean4 == boolean0);
      assertFalse(boolean4 == boolean1);
      assertTrue(boolean4);
      
      byte[] byteArray2 = new byte[5];
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      
      byteArray2[0] = (byte)54;
      byteArray2[1] = (byte)89;
      byteArray2[2] = (byte) (-125);
      byteArray2[2] = (byte) (-19);
      byteArray2[4] = (byte)89;
      String string1 = Utility.codeToString(byteArray2, (ConstantPool) null, (-1205), (-1205));
      assertArrayEquals(new byte[] {(byte)54, (byte)89, (byte) (-19), (byte)0, (byte)89}, byteArray2);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("0:    istore\t\t%89\n2:    <illegal opcode>\n3:    nop\n4:    dup\n", string1);
      
      String string2 = Utility.codeToString(byteArray1, (ConstantPool) null, (int) (byte)0, 1708);
      assertArrayEquals(new byte[] {(byte) (-125)}, byteArray1);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(byteArray1.equals((Object)byteArray2));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(string2);
      assertEquals("0:    lxor\n", string2);
      
      // Undeclared exception!
      try { 
        Utility.signatureToString("0:    istore\t\t%89\n2:    <illegal opcode>\n3:    nop\n4:    dup\n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `0:    istore\t\t%89
         // 2:    <illegal opcode>
         // 3:    nop
         // 4:    dup
         // '
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      byte byte0 = (byte)59;
      ConstantPool constantPool0 = null;
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-46);
      byteArray0[1] = (byte) (-46);
      byteArray0[2] = (byte) (-46);
      byteArray0[3] = (byte)126;
      byteArray0[4] = (byte) (-7);
      byteArray0[5] = (byte)59;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 1762, 184, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte) (-107);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 39, (int) (byte)0, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      Object object2 = new Object();
      assertFalse(object2.equals((Object)object0));
      assertFalse(object2.equals((Object)object1));
      assertNotNull(object2);
      
      Object object3 = new Object();
      assertFalse(object3.equals((Object)object2));
      assertFalse(object3.equals((Object)object1));
      assertFalse(object3.equals((Object)object0));
      assertNotNull(object3);
      
      Object object4 = new Object();
      assertFalse(object4.equals((Object)object1));
      assertFalse(object4.equals((Object)object0));
      assertFalse(object4.equals((Object)object3));
      assertFalse(object4.equals((Object)object2));
      assertNotNull(object4);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)16;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-85);
      byteArray0[4] = (byte) (-17);
      Constant[] constantArray0 = null;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 225, (int) (byte) (-85));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      BCELComparator bCELComparator0 = JavaClass.getComparator();
      assertNotNull(bCELComparator0);
      
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)38;
      byteArray0[1] = (byte)24;
      byteArray0[2] = (byte)24;
      byteArray0[3] = (byte)24;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)21, 158, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "C#dM");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      String string0 = Utility.compactClassName("ifnonnull", false);
      assertNotNull(string0);
      assertEquals("ifnonnull", string0);
      
      byte[] byteArray0 = Utility.decode("=Qh=YqM]g&4ZTUB", false);
      assertNotNull(byteArray0);
      
      boolean boolean3 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      
      String string1 = Utility.getSignature("=Qh=YqM]g&4ZTUB");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("L=Qh=YqM]g&4ZTUB;", string1);
      
      boolean boolean4 = Utility.isJavaIdentifierPart('6');
      assertTrue(boolean4 == boolean3);
      assertFalse(boolean4 == boolean0);
      assertFalse(boolean4 == boolean2);
      assertFalse(boolean4 == boolean1);
      assertTrue(boolean4);
      
      boolean boolean5 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertTrue(boolean5 == boolean1);
      assertFalse(boolean5 == boolean3);
      assertFalse(boolean5 == boolean4);
      assertTrue(boolean5 == boolean2);
      assertTrue(boolean5 == boolean0);
      assertFalse(boolean5);
      
      boolean boolean6 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean6 == boolean1);
      assertFalse(boolean6 == boolean4);
      assertFalse(boolean6 == boolean3);
      assertTrue(boolean6 == boolean0);
      assertTrue(boolean6 == boolean2);
      assertTrue(boolean6 == boolean5);
      assertFalse(boolean6);
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) byteArray0;
      objectArray0[2] = (Object) "C#dM";
      String string2 = Utility.printArray(objectArray0, false, false);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals("istore_2", string3);
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      Object object2 = new Object();
      assertFalse(object2.equals((Object)object1));
      assertFalse(object2.equals((Object)object0));
      assertNotNull(object2);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-82);
      byteArray0[1] = (byte)85;
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-82), (byte)85}, byteArray0);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string0 = Utility.encode(byteArray0, false);
      assertArrayEquals(new byte[] {(byte) (-82), (byte)85}, byteArray0);
      assertNotNull(string0);
      assertEquals("$aeU", string0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 1356, (int) (byte) (-82));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)113;
      boolean boolean0 = true;
      String string0 = Utility.compactClassName("$rMv+TUDL", true);
      assertNotNull(string0);
      assertEquals("$rMv+TUDL", string0);
      
      boolean boolean1 = Utility.equals(byteArray0, byteArray0);
      assertArrayEquals(new byte[] {(byte)113, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      ConstantPool constantPool0 = null;
      String string1 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-10), 10);
      assertArrayEquals(new byte[] {(byte)113, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("0:    lrem\n1:    nop\n2:    nop\n3:    nop\n", string1);
      
      boolean boolean2 = Utility.equals(byteArray0, byteArray0);
      assertArrayEquals(new byte[] {(byte)113, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2);
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      assertNotNull(pipedOutputStream0);
      
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream(pipedOutputStream0, true, "Vt}Td*2ps");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // Vt}Td*2ps
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byte byte0 = (byte) (-114);
      byteArray0[2] = (byte) (-114);
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 14, 52, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-127);
      byteArray0[1] = (byte)53;
      byteArray0[2] = (byte) (-91);
      byteArray0[3] = (byte) (-40);
      byteArray0[4] = (byte) (-121);
      byteArray0[5] = (byte)60;
      byteArray0[6] = (byte)75;
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-121), 34);
      assertArrayEquals(new byte[] {(byte) (-127), (byte)53, (byte) (-91), (byte) (-40), (byte) (-121), (byte)60, (byte)75}, byteArray0);
      assertNotNull(string0);
      assertEquals("0:    lor\n1:    saload\n2:    if_acmpeq\t\t#-10103\n5:    istore_1\n6:    astore_0\n", string0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream("6=k#d^v");
      assertNotNull(mockPrintStream0);
      
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      boolean boolean1 = Utility.equals(byteArray0, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-127), (byte)53, (byte) (-91), (byte) (-40), (byte) (-121), (byte)60, (byte)75}, byteArray0);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string1 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-91), (int) (byte)75);
      assertArrayEquals(new byte[] {(byte) (-127), (byte)53, (byte) (-91), (byte) (-40), (byte) (-121), (byte)60, (byte)75}, byteArray0);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("0:    lor\n1:    saload\n2:    if_acmpeq\t\t#-10103\n5:    istore_1\n6:    astore_0\n", string1);
      
      String string2 = Utility.accessToString((int) (byte) (-40));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("static final volatile transient native interface abstract strictfp synthetic annotation enum", string2);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-127), (byte)53, (byte) (-91), (byte) (-40), (byte) (-121), (byte)60, (byte)75}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      
      int int0 = byteSequence0.skipBytes((byte) (-127));
      assertArrayEquals(new byte[] {(byte) (-127), (byte)53, (byte) (-91), (byte) (-40), (byte) (-121), (byte)60, (byte)75}, byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(0, int0);
      
      String string3 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertArrayEquals(new byte[] {(byte) (-127), (byte)53, (byte) (-91), (byte) (-40), (byte) (-121), (byte)60, (byte)75}, byteArray0);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals("lor", string3);
      
      try { 
        Utility.methodSignatureReturnType("org.apache.commons.io.filefilter.RegexFileFilter", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `org.apache.commons.io.filefilter.RegexFileFilter'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      byteArray0[1] = (byte)48;
      byteArray0[2] = (byte)24;
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      String string0 = Utility.encode(byteArray0, false);
      assertArrayEquals(new byte[] {(byte)0, (byte)48, (byte)24}, byteArray0);
      assertNotNull(string0);
      assertEquals("$A0$Y", string0);
      
      boolean boolean1 = Utility.equals(byteArray0, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)48, (byte)24}, byteArray0);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      ConstantClass constantClass0 = new ConstantClass((byte)24);
      assertNotNull(constantClass0);
      assertEquals(24, constantClass0.getNameIndex());
      assertEquals((byte)7, constantClass0.getTag());
      
      boolean boolean2 = Utility.isJavaIdentifierPart('3');
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2);
      
      ConstantClass constantClass1 = new ConstantClass(constantClass0);
      assertTrue(constantClass1.equals((Object)constantClass0));
      assertNotNull(constantClass1);
      assertEquals(24, constantClass0.getNameIndex());
      assertEquals((byte)7, constantClass0.getTag());
      assertEquals(24, constantClass1.getNameIndex());
      assertEquals((byte)7, constantClass1.getTag());
      
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      assertNotNull(emptyVisitor0);
      
      constantClass1.accept(emptyVisitor0);
      assertNotSame(constantClass0, constantClass1);
      assertNotSame(constantClass1, constantClass0);
      assertTrue(constantClass0.equals((Object)constantClass1));
      assertTrue(constantClass1.equals((Object)constantClass0));
      assertEquals(24, constantClass0.getNameIndex());
      assertEquals((byte)7, constantClass0.getTag());
      assertEquals(24, constantClass1.getNameIndex());
      assertEquals((byte)7, constantClass1.getTag());
      
      String string1 = constantClass0.toString();
      assertNotSame(constantClass0, constantClass1);
      assertTrue(constantClass0.equals((Object)constantClass1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(24, constantClass0.getNameIndex());
      assertEquals((byte)7, constantClass0.getTag());
      assertEquals("CONSTANT_Class[7](name_index = 24)", string1);
      
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("fstore_0", "CONSTANT_Class[7](name_index = 24)", "putstatic");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: fstore_0
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      byte byte0 = (byte)111;
      byteArray0[7] = (byte)111;
      ConstantPool constantPool0 = null;
      int int0 = 184;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)111, 184, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte) (-64);
      byteArray0[2] = (byte) (-106);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (-2171), (-1858), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    nop
         // 1:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      String string0 = Utility.format(185, 51, true, 'W');
      assertNotNull(string0);
      assertEquals("185WWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWW", string0);
      
      byte[] byteArray0 = new byte[3];
      boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      byteArray0[0] = (byte)33;
      byteArray0[1] = (byte)33;
      byteArray0[2] = (byte) (-91);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)33, (int) (byte)33);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)56;
      byteArray0[1] = (byte)117;
      byteArray0[2] = (byte) (-123);
      byteArray0[3] = (byte)77;
      byteArray0[4] = (byte) (-55);
      byteArray0[5] = (byte) (-113);
      byteArray0[6] = (byte)106;
      byteArray0[7] = (byte)6;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)106, (int) (byte)56);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = true;
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)25;
      byteArray0[1] = (byte)16;
      byteArray0[2] = (byte) (-82);
      byteArray0[3] = (byte)20;
      byteArray0[4] = (byte)16;
      byteArray0[5] = (byte) (-34);
      byteArray0[6] = (byte) (-19);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 79, 79, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      Object object2 = new Object();
      assertFalse(object2.equals((Object)object1));
      assertFalse(object2.equals((Object)object0));
      assertNotNull(object2);
      
      Object object3 = new Object();
      assertFalse(object3.equals((Object)object1));
      assertFalse(object3.equals((Object)object0));
      assertFalse(object3.equals((Object)object2));
      assertNotNull(object3);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-93);
      byteArray0[2] = (byte) (-93);
      byteArray0[4] = (byte) (-93);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-93), (byte)0, (byte) (-93), (byte)0, (byte) (-93), (byte)0}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-93), (byte)0, (byte) (-93), (byte)0, (byte) (-93), (byte)0}, byteArray0);
      assertTrue(boolean0);
      
      boolean boolean1 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "char");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)0, 20000, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    if_icmpgt\t\t#163
         // 3:    nop
         // 4:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      Locale locale0 = Locale.ROOT;
      assertNotNull(locale0);
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getCountry());
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-112);
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 2115, 161);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      Locale locale0 = Locale.UK;
      assertNotNull(locale0);
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("GB", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_GB", locale0.toString());
      assertEquals("GBR", locale0.getISO3Country());
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)120;
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      ConstantPool constantPool0 = null;
      int int0 = 238;
      int int1 = 2115;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 2115, 169);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      Object object2 = new Object();
      assertFalse(object2.equals((Object)object0));
      assertFalse(object2.equals((Object)object1));
      assertNotNull(object2);
      
      Object object3 = new Object();
      assertFalse(object3.equals((Object)object1));
      assertFalse(object3.equals((Object)object2));
      assertFalse(object3.equals((Object)object0));
      assertNotNull(object3);
      
      String string0 = "is-jtore_2";
      String string1 = Utility.compactClassName("is-jtore_2");
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("is-jtore_2", string1);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[2] = (byte)68;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-95);
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)68, (byte)0, (byte)0, (byte) (-95), (byte)0, (byte)0}, byteArray0);
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 150, (int) (byte)68);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      ConstantPool constantPool0 = null;
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-67);
      byteArray0[4] = (byte) (-67);
      byteArray0[2] = (byte) (-67);
      byteArray0[3] = (byte) (-67);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-67), (int) (byte) (-67));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      String string0 = Utility.getSignature("(Tfy-Ya>Q[]\t*l*J");
      assertNotNull(string0);
      assertEquals("[L(Tfy-Ya>Q;", string0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      boolean boolean2 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      // Undeclared exception!
      try { 
        Utility.getSignature("[L(Tfy-Ya>Q;");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal type: [L(Tfy-Ya>Q;
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      String string0 = Utility.classOrInterface(4773);
      assertNotNull(string0);
      assertEquals("interface", string0);
      
      String string1 = Utility.compactClassName("instanceof", true);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("instanceof", string1);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)73;
      byteArray0[1] = (byte)73;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 189, 4136);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      String string0 = Utility.compactClassName("is-jtore_2");
      assertNotNull(string0);
      assertEquals("is-jtore_2", string0);
      
      String string1 = "? super ";
      String string2 = Utility.getSignature("? super ");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("L?;", string2);
      
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      ConstantPool constantPool0 = null;
      boolean boolean2 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-94);
      byte byte0 = (byte) (-123);
      byteArray0[1] = (byte) (-123);
      boolean boolean3 = Utility.equals(byteArray0, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-94), (byte) (-123), (byte)0, (byte)0}, byteArray0);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3);
      
      String string3 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-94), (int) (byte) (-123));
      assertArrayEquals(new byte[] {(byte) (-94), (byte) (-123), (byte)0, (byte)0}, byteArray0);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals("0:    if_icmpge\t\t#-31488\n3:    nop\n", string3);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 143, (int) (byte) (-94), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      String string0 = "@_iPghCa9r";
      try { 
        Utility.typeOfMethodSignature("(");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: (
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[2] = (byte) (-118);
      byteArray0[3] = (byte) (-74);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)0, (-1265), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    nop
         // 1:    nop
         // 2:    l2d
         // 3:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Invalid IOCase name: ");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      boolean boolean3 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3);
      
      byte[] byteArray0 = new byte[7];
      boolean boolean4 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4 == boolean3);
      assertTrue(boolean4 == boolean1);
      assertTrue(boolean4 == boolean2);
      assertFalse(boolean4);
      
      byteArray0[0] = (byte) (-69);
      byteArray0[1] = (byte) (-128);
      byteArray0[2] = (byte) (-92);
      byteArray0[3] = (byte) (-17);
      byteArray0[5] = (byte)20;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 194, 205);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      String string0 = Utility.getSignature("(Tfy-Ya>Q[]\t*l*J");
      assertNotNull(string0);
      assertEquals("[L(Tfy-Ya>Q;", string0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      byte byte0 = (byte) (-101);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-101);
      byteArray0[1] = (byte) (-101);
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-101), 184, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      byte byte0 = (byte) (-10);
      byteArray0[2] = (byte) (-105);
      byte[] byteArray1 = new byte[8];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[1] = (byte)99;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 77, 32, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Invalid IOCase name: ");
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-96);
      byteArray0[1] = (byte) (-103);
      byteArray0[2] = (byte) (-92);
      byteArray0[3] = (byte) (-17);
      byteArray0[4] = (byte) (-103);
      byteArray0[5] = (byte)20;
      byteArray0[6] = (byte) (-76);
      int int0 = 205;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 194, 205);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-121);
      byteArray0[2] = (byte)39;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)13;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-121), (byte)0, (byte)39, (byte)0, (byte)13}, byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      
      long long0 = byteSequence0.skip((byte) (-121));
      assertArrayEquals(new byte[] {(byte) (-121), (byte)0, (byte)39, (byte)0, (byte)13}, byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(0L, long0);
      
      int int0 = byteSequence0.skipBytes((byte)0);
      assertArrayEquals(new byte[] {(byte) (-121), (byte)0, (byte)39, (byte)0, (byte)13}, byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(0, int0);
      
      ConstantInteger constantInteger0 = new ConstantInteger(byteSequence0);
      assertArrayEquals(new byte[] {(byte) (-121), (byte)0, (byte)39, (byte)0, (byte)13}, byteArray0);
      assertNotNull(constantInteger0);
      assertEquals(4, byteSequence0.getIndex());
      assertEquals((-2030033152), constantInteger0.getBytes());
      assertEquals((byte)3, constantInteger0.getTag());
      
      ConstantInteger constantInteger1 = new ConstantInteger((byte)0);
      assertFalse(constantInteger1.equals((Object)constantInteger0));
      assertNotNull(constantInteger1);
      assertEquals((byte)3, constantInteger1.getTag());
      assertEquals(0, constantInteger1.getBytes());
      
      boolean boolean2 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-121), (byte)0, (byte)39, (byte)0, (byte)13}, byteArray0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      
      ConstantPool constantPool0 = null;
      boolean boolean3 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3);
      
      String string0 = Utility.compactClassName("j+5\"DX;[#(]*bVRl");
      assertNotNull(string0);
      assertEquals("j+5\"DX;[#(]*bVRl", string0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream("j+5\"DX;[#(]*bVRl");
      assertNotNull(mockPrintStream0);
      
      mockPrintStream0.print('v');
      mockPrintStream0.println("j+5\"DX;[#(]*bVRl");
      mockPrintStream0.println('D');
      boolean boolean4 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean4 == boolean0);
      assertTrue(boolean4 == boolean3);
      assertTrue(boolean4 == boolean2);
      assertTrue(boolean4 == boolean1);
      assertFalse(boolean4);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 192, 200, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)27;
      byteArray0[1] = (byte) (-111);
      String string0 = Constants.ILLEGAL_TYPE;
      assertNotNull(string0);
      assertEquals("<illegal type>", string0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 1444, (int) (byte)27);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)27;
      byte byte0 = (byte) (-111);
      byteArray0[1] = (byte) (-111);
      ConstantPool constantPool0 = null;
      String string0 = Constants.ILLEGAL_TYPE;
      assertNotNull(string0);
      assertEquals("<illegal type>", string0);
      
      String string1 = Utility.classOrInterface((byte) (-111));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("interface", string1);
      
      String string2 = Utility.compactClassName("getfield", false);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("getfield", string2);
      
      byte[] byteArray1 = new byte[5];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte) (-61);
      byteArray1[1] = (byte) (-111);
      byteArray1[2] = (byte)75;
      byteArray1[3] = (byte) (-8);
      byteArray1[4] = (byte)27;
      String string3 = Utility.codeToString(byteArray1, (ConstantPool) null, (int) (byte) (-61), (int) (byte) (-61));
      assertArrayEquals(new byte[] {(byte) (-61), (byte) (-111), (byte)75, (byte) (-8), (byte)27}, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals("0:    monitorexit\n1:    i2b\n2:    astore_0\n3:    <illegal opcode>\n4:    iload_1\n", string3);
      
      try { 
        Utility.decode("if_icmple", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)27;
      byteArray0[1] = (byte) (-107);
      try { 
        Utility.typeOfSignature(".MvP;A3!x|e\"H");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: .MvP;A3!x|e\"H
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "xlPm(X%Y ceF$^w");
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      ConstantPool constantPool0 = null;
      String string0 = Utility.getSignature("&q9o$");
      assertNotNull(string0);
      assertEquals("L&q9o$;", string0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-72);
      byteArray0[1] = (byte) (-58);
      byte byte0 = (byte)75;
      byteArray0[2] = (byte)75;
      byteArray0[3] = (byte)122;
      byteArray0[4] = (byte) (-72);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 181, (int) (byte) (-58), false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertFalse(boolean0);
      
      byte byte0 = Utility.typeOfSignature("ZcVw02jqL{R&8?");
      assertEquals((byte)4, byte0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      String string0 = File.pathSeparator;
      assertNotNull(string0);
      assertEquals(":", string0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)76;
      byteArray0[1] = (byte)72;
      byteArray0[2] = (byte)72;
      byteArray0[3] = (byte)72;
      Constant[] constantArray0 = new Constant[1];
      ConstantMethodref constantMethodref0 = new ConstantMethodref((byte)76, (byte)72);
      assertNotNull(constantMethodref0);
      assertEquals((byte)10, constantMethodref0.getTag());
      assertEquals(72, constantMethodref0.getNameAndTypeIndex());
      assertEquals(76, constantMethodref0.getClassIndex());
      
      constantArray0[0] = (Constant) constantMethodref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(1, constantPool0.getLength());
      
      String string1 = Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-98), 80);
      assertArrayEquals(new byte[] {(byte)76, (byte)72, (byte)72, (byte)72}, byteArray0);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(1, constantPool0.getLength());
      assertEquals("0:    astore_1\n1:    dstore_1\n2:    dstore_1\n3:    dstore_1\n", string1);
      
      String string2 = Utility.encode(byteArray0, false);
      assertArrayEquals(new byte[] {(byte)76, (byte)72, (byte)72, (byte)72}, byteArray0);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("LHHH", string2);
      
      String string3 = Utility.convertString("newarray");
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals("newarray", string3);
      
      boolean boolean2 = Utility.isJavaIdentifierPart('Z');
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2);
      
      try { 
        Utility.decode("ZcVw02jqL{R&8?", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "809?6.Km&7D/Z");
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String[] stringArray0 = null;
      String string0 = Utility.methodTypeToSignature("?:", (String[]) null);
      assertNotNull(string0);
      assertEquals("()L?:;", string0);
      
      int int0 = Pattern.COMMENTS;
      assertEquals(4, int0);
      
      String string1 = Utility.methodSignatureToString("()L?:;", "qyU=I_x:|BeuI", "?:");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("?: ?: qyU=I_x:|BeuI()", string1);
      
      boolean boolean2 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2);
      
      ConstantMethodref constantMethodref0 = new ConstantMethodref(136, 136);
      assertNotNull(constantMethodref0);
      assertEquals((byte)10, constantMethodref0.getTag());
      assertEquals(136, constantMethodref0.getNameAndTypeIndex());
      assertEquals(136, constantMethodref0.getClassIndex());
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-126);
      Constant[] constantArray0 = new Constant[3];
      constantArray0[0] = (Constant) constantMethodref0;
      constantArray0[1] = (Constant) constantMethodref0;
      constantArray0[2] = (Constant) constantMethodref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(3, constantPool0.getLength());
      
      ConstantPool constantPool1 = constantPool0.copy();
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertNotNull(constantPool1);
      assertEquals(3, constantPool0.getLength());
      assertEquals(3, constantPool1.getLength());
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 82, 39);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)24;
      byte[] byteArray1 = new byte[5];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte)24;
      byteArray1[1] = (byte)122;
      byteArray1[2] = (byte)12;
      byteArray1[3] = (byte)122;
      byteArray1[4] = (byte)12;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, (ConstantPool) null, 2059, 90, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Constant[] constantArray0 = new Constant[4];
      BCELComparator bCELComparator0 = JavaClass.getComparator();
      assertNotNull(bCELComparator0);
      
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(4, constantPool0.getLength());
      
      ConstantPool constantPool1 = constantPool0.copy();
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertNotNull(constantPool1);
      assertEquals(4, constantPool0.getLength());
      assertEquals(4, constantPool1.getLength());
      
      ConstantPool constantPool2 = constantPool1.copy();
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool0, constantPool2);
      assertNotSame(constantPool1, constantPool0);
      assertNotSame(constantPool1, constantPool2);
      assertNotSame(constantPool2, constantPool0);
      assertNotSame(constantPool2, constantPool1);
      assertFalse(constantPool0.equals((Object)constantPool1));
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertFalse(constantPool2.equals((Object)constantPool0));
      assertFalse(constantPool2.equals((Object)constantPool1));
      assertNotNull(constantPool2);
      assertEquals(4, constantPool0.getLength());
      assertEquals(4, constantPool1.getLength());
      assertEquals(4, constantPool2.getLength());
      
      ConstantPool constantPool3 = constantPool0.copy();
      assertNotSame(constantPool0, constantPool3);
      assertNotSame(constantPool0, constantPool2);
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool3, constantPool1);
      assertNotSame(constantPool3, constantPool2);
      assertNotSame(constantPool3, constantPool0);
      assertFalse(constantPool0.equals((Object)constantPool1));
      assertFalse(constantPool0.equals((Object)constantPool2));
      assertFalse(constantPool3.equals((Object)constantPool1));
      assertFalse(constantPool3.equals((Object)constantPool2));
      assertFalse(constantPool3.equals((Object)constantPool0));
      assertNotNull(constantPool3);
      assertEquals(4, constantPool0.getLength());
      assertEquals(4, constantPool3.getLength());
      
      String string0 = constantPool0.toString();
      assertNotSame(constantPool0, constantPool3);
      assertNotSame(constantPool0, constantPool2);
      assertNotSame(constantPool0, constantPool1);
      assertFalse(constantPool0.equals((Object)constantPool3));
      assertFalse(constantPool0.equals((Object)constantPool2));
      assertFalse(constantPool0.equals((Object)constantPool1));
      assertNotNull(string0);
      assertEquals(4, constantPool0.getLength());
      assertEquals("1)null\n2)null\n3)null\n", string0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-1);
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      byteArray0[1] = (byte)41;
      byteArray0[2] = (byte) (-120);
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte)41;
      String string1 = Utility.codeToString(byteArray0, constantPool1, (int) (byte) (-1), (-1445), false);
      assertArrayEquals(new byte[] {(byte) (-1), (byte)41, (byte) (-120), (byte) (-1), (byte) (-1), (byte)41}, byteArray0);
      assertNotSame(constantPool0, constantPool3);
      assertNotSame(constantPool0, constantPool2);
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      assertNotSame(constantPool1, constantPool2);
      assertNotSame(constantPool1, constantPool3);
      assertFalse(string1.equals((Object)string0));
      assertFalse(constantPool0.equals((Object)constantPool3));
      assertFalse(constantPool0.equals((Object)constantPool2));
      assertFalse(constantPool0.equals((Object)constantPool1));
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertFalse(constantPool1.equals((Object)constantPool2));
      assertFalse(constantPool1.equals((Object)constantPool3));
      assertNotNull(string1);
      assertEquals(4, constantPool0.getLength());
      assertEquals(4, constantPool1.getLength());
      assertEquals("0:    impdep2\n1:    dload_3\n2:    l2i\n3:    impdep2\n4:    impdep2\n5:    dload_3\n", string1);
      
      try { 
        Utility.typeOfSignature("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      String string0 = Utility.convertString("\nAttribue(s):\n");
      assertNotNull(string0);
      assertEquals("\\nAttribue(s):\\n", string0);
      
      String string1 = Pattern.quote("\nAttribue(s):\n");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("\\Q\nAttribue(s):\n\\E", string1);
      
      String[] stringArray0 = Constants.ITEM_NAMES;
      assertNotNull(stringArray0);
      
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)33;
      byteArray0[2] = (byte) (-65);
      byteArray0[2] = (byte) (-65);
      byteArray0[3] = (byte)33;
      byteArray0[4] = (byte)33;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 8, (int) (byte)0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(boolean0);
      
      byteArray0[0] = (byte) (-68);
      byteArray0[1] = (byte) (-78);
      byteArray0[2] = (byte) (-79);
      byteArray0[3] = (byte)5;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 65, (int) (byte) (-68), false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -78
         //
         verifyException("org.apache.bcel.Const", e);
      }
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      assertFalse(fileSystemHandling1.equals((Object)fileSystemHandling0));
      assertNotNull(fileSystemHandling1);
      
      String string0 = Constants.ILLEGAL_TYPE;
      assertNotNull(string0);
      assertEquals("<illegal type>", string0);
      
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte)19;
      boolean boolean2 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      String string1 = Constants.ILLEGAL_TYPE;
      assertNotNull(string1);
      assertEquals("<illegal type>", string1);
      
      boolean boolean3 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3);
      
      boolean boolean4 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "OBt8YO");
      assertFalse(boolean4 == boolean3);
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4 == boolean1);
      assertTrue(boolean4 == boolean2);
      assertFalse(boolean4);
      
      String string2 = Utility.classOrInterface((-2773));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("class", string2);
      
      boolean boolean5 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "class");
      assertTrue(boolean5 == boolean4);
      assertTrue(boolean5 == boolean1);
      assertTrue(boolean5 == boolean2);
      assertFalse(boolean5 == boolean3);
      assertTrue(boolean5 == boolean0);
      assertFalse(boolean5);
      
      boolean boolean6 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      assertTrue(boolean6 == boolean5);
      assertTrue(boolean6 == boolean2);
      assertTrue(boolean6 == boolean1);
      assertTrue(boolean6 == boolean0);
      assertTrue(boolean6 == boolean4);
      assertFalse(boolean6 == boolean3);
      assertFalse(boolean6);
      
      boolean boolean7 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertTrue(boolean7 == boolean4);
      assertTrue(boolean7 == boolean0);
      assertTrue(boolean7 == boolean6);
      assertTrue(boolean7 == boolean1);
      assertFalse(boolean7 == boolean3);
      assertTrue(boolean7 == boolean2);
      assertTrue(boolean7 == boolean5);
      assertFalse(boolean7);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "6zM44}!T$Z%%P+H%mgW";
      stringArray0[1] = "<illegal type>";
      String string3 = Utility.methodTypeToSignature("<illegal type>", stringArray0);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals("(L6zM44}!T$Z%%P+H%mgW;L<illegal;)L<illegal;", string3);
      
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      assertEquals(1, int0);
      
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      assertNotNull(emptyVisitor0);
      
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("(L6zM44}!T$Z%%P+H%mgW;L<illegal;)L<illegal;", "athrow", "wide");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: L6zM44}!T$Z%%P+H%mgW;L<illegal;)L<illegal;
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      Constant[] constantArray0 = null;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      ConstantPool constantPool1 = null;
      String string0 = Constants.ILLEGAL_TYPE;
      assertNotNull(string0);
      assertEquals("<illegal type>", string0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-27);
      byteArray0[1] = (byte)127;
      byte byte0 = (byte) (-7);
      byteArray0[2] = (byte) (-7);
      byte byte1 = (byte) (-110);
      byteArray0[3] = (byte) (-110);
      byteArray0[4] = (byte)59;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 545, (int) (byte) (-27));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Locale locale0 = Locale.ROOT;
      assertNotNull(locale0);
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      
      byte[] byteArray0 = new byte[5];
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      byteArray0[0] = (byte) (-108);
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      byteArray0[1] = (byte) (-108);
      boolean boolean2 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "XG_1SAwg70oQ");
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
      
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-108), (int) (byte) (-108));
      assertArrayEquals(new byte[] {(byte) (-108), (byte) (-108), (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(string0);
      assertEquals("0:    lcmp\n1:    lcmp\n2:    nop\n3:    nop\n4:    nop\n", string0);
      
      boolean boolean3 = Utility.isSet((byte) (-108), 2853);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3);
      
      String string1 = Utility.replace("XG_1SAwg70oQ", "0:    lcmp\n1:    lcmp\n2:    nop\n3:    nop\n4:    nop\n", "XG_1SAwg70oQ");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("XG_1SAwg70oQ", string1);
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      ConstantPool constantPool0 = null;
      String string0 = Utility.getSignature("i");
      assertNotNull(string0);
      assertEquals("Li;", string0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-84);
      byteArray0[4] = (byte) (-84);
      byteArray0[2] = (byte) (-84);
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Li;");
      assertFalse(boolean0);
      
      byteArray0[3] = (byte) (-84);
      String string1 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-84), (int) (byte) (-84));
      assertArrayEquals(new byte[] {(byte) (-84), (byte)0, (byte) (-84), (byte) (-84), (byte) (-84), (byte)0, (byte)0}, byteArray0);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("0:    ireturn\n1:    nop\n2:    ireturn\n3:    ireturn\n4:    ireturn\n5:    nop\n6:    nop\n", string1);
      
      MockRandomAccessFile mockRandomAccessFile0 = null;
      try {
        mockRandomAccessFile0 = new MockRandomAccessFile("<illegal opcode>", "0:    ireturn\n1:    nop\n2:    ireturn\n3:    ireturn\n4:    ireturn\n5:    nop\n6:    nop\n");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal mode \"0:    ireturn
         // 1:    nop
         // 2:    ireturn
         // 3:    ireturn
         // 4:    ireturn
         // 5:    nop
         // 6:    nop
         // \" must be one of \"r\", \"rw\", \"rws\", or \"rwd\"
         //
         verifyException("java.io.RandomAccessFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      boolean boolean2 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      boolean boolean3 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3);
      
      String string0 = Constants.ILLEGAL_TYPE;
      assertNotNull(string0);
      assertEquals("<illegal type>", string0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-100);
      byteArray0[1] = (byte)19;
      byteArray0[2] = (byte)19;
      byteArray0[3] = (byte)19;
      byteArray0[4] = (byte)19;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (-100), (-100));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    ifge\t\t#4883
         // 3:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      String string0 = File.separator;
      assertNotNull(string0);
      assertEquals("/", string0);
      
      String string1 = Utility.compactClassName("breakpoint", "uf+^QOZK.{)1~(", true);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("breakpoint", string1);
      
      String string2 = Utility.compactClassName("uf+^QOZK.{)1~(", ")08#DQS", true);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("uf+^QOZK.{)1~(", string2);
      
      try { 
        Utility.typeOfSignature("PV~d!");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: PV~d!
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }
}
