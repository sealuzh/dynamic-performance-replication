/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 24 23:52:24 GMT 2019
 */

package com.alibaba.fastjson.parser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.alibaba.fastjson.parser.Feature;
import com.alibaba.fastjson.parser.JSONLexerBase;
import com.alibaba.fastjson.parser.JSONReaderScanner;
import com.alibaba.fastjson.parser.JSONScanner;
import com.alibaba.fastjson.parser.SymbolTable;
import java.io.StringReader;
import java.time.ZoneId;
import java.util.ArrayList;
import java.util.Collection;
import java.util.LinkedList;
import java.util.Locale;
import java.util.Set;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONLexerBase_ESTest extends JSONLexerBase_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(" 5Z-p-");
      jSONReaderScanner0.scanNumber();
      assertEquals(2, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("ydHs4bT", (-256));
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanHex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal state. y
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("'[Hez2VOB3c61#l");
      jSONReaderScanner0.skipWhitespace();
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals('\'', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'o';
      // Undeclared exception!
      try { 
        JSONLexerBase.readString(charArray0, 'o');
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      char[] charArray0 = new char[1];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFalse();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'o';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 107, 1440);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanNullOrNew();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse null or new
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("true");
      char[] charArray0 = new char[0];
      jSONReaderScanner0.scanFieldFloatArray(charArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("");
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      jSONReaderScanner0.scanInt(';');
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("w:d/^", 1261);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      jSONReaderScanner0.scanStringArray(arrayList0, '(');
      assertEquals((-1), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("unclosed single-quote string");
      assertEquals(0, jSONScanner0.matchStat);
      
      jSONScanner0.scanString(';');
      assertEquals(989, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      char[] charArray0 = new char[5];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 23);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed string : \u001A
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("'#(W]bI");
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed string : \u001A
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[2] = 'u';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 2680);
      SymbolTable symbolTable0 = new SymbolTable(2004);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanSymbol(symbolTable0, 'g');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed.str
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      char[] charArray0 = new char[2];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 391, 8);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.skipComment();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid comment
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      char[] charArray0 = new char[1];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 11);
      jSONReaderScanner0.np = 11;
      jSONReaderScanner0.integerValue();
      assertTrue(jSONReaderScanner0.isEOF());
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("g9f|^!");
      jSONReaderScanner0.nextToken(11);
      jSONReaderScanner0.nextToken(46);
      assertEquals('f', jSONReaderScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("0{o|GWw]");
      jSONScanner0.nextToken((-877));
      assertEquals(2, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("true");
      jSONReaderScanner0.nextToken((-529));
      assertEquals('\u001A', jSONReaderScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("My*7`C'");
      jSONReaderScanner0.stringVal();
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("ydHs4bT", (-256));
      String string0 = jSONReaderScanner0.stringDefaultValue();
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNotNull(string0);
      assertEquals((-256), jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("3*XM-)fMcpj:UQbtTL");
      jSONReaderScanner0.next();
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(".a)t", 1785);
      assertEquals(0, jSONScanner0.matchStat);
      
      char[] charArray0 = new char[3];
      jSONScanner0.matchField2(charArray0);
      assertEquals(1785, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      char[] charArray0 = new char[4];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 0);
      jSONReaderScanner0.isBlankInput();
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("", 0);
      jSONScanner0.info();
      assertEquals(0, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("3*XM-)fMcpj:UQbtTL");
      jSONReaderScanner0.nextToken(239);
      assertEquals(2, jSONReaderScanner0.token());
      
      jSONReaderScanner0.doubleValue();
      assertEquals(0, jSONReaderScanner0.pos());
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("\":\"");
      jSONReaderScanner0.bytesValue();
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      char[] charArray0 = new char[6];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 110, 110);
      jSONReaderScanner0.subString(110, 108);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(110, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      char[] charArray0 = new char[4];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 0);
      jSONReaderScanner0.setToken(0);
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("toString");
      jSONReaderScanner0.setToken(119);
      assertEquals(119, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("\":\"");
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(101, "TreeSeq");
      jSONReaderScanner0.setTimeZone(simpleTimeZone0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(")v");
      jSONReaderScanner0.setLocale((Locale) null);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      char[] charArray0 = new char[1];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 11);
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      jSONReaderScanner0.scanUUID('0');
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("3*XM-)fMcpj:UQbtTL");
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      jSONReaderScanner0.scanUUID('a');
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("#%!~B}FFW{wm49");
      int int0 = jSONReaderScanner0.scanType(",^(");
      assertEquals((-2), int0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("", 0);
      int int0 = jSONScanner0.scanType("");
      assertEquals(0, jSONScanner0.getFeatures());
      assertEquals((-2), int0);
      assertEquals(0, jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("Set");
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      SymbolTable symbolTable0 = new SymbolTable(4);
      jSONReaderScanner0.scanSymbolWithSeperator(symbolTable0, 'A');
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      char[] charArray0 = new char[5];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 23);
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      jSONReaderScanner0.scanSymbolWithSeperator((SymbolTable) null, '7');
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      char[] charArray0 = new char[6];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 110, 110);
      SymbolTable symbolTable0 = new SymbolTable(40);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanSymbol(symbolTable0, '8');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed.str
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("E,^(");
      SymbolTable symbolTable0 = new SymbolTable(2688);
      jSONReaderScanner0.scanSymbol(symbolTable0);
      assertEquals(',', jSONReaderScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      char[] charArray0 = new char[1];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 11);
      jSONReaderScanner0.scanStringArray((Collection<String>) null, '1');
      assertEquals((-1), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("toString");
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      long long0 = jSONReaderScanner0.scanLong('/');
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("TreeSet");
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      long long0 = jSONReaderScanner0.scanLong('8');
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("\":\"");
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      int int0 = jSONReaderScanner0.scanInt(':');
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      StringReader stringReader0 = new StringReader(",^(");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      jSONReaderScanner0.scanInt('Z');
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(".");
      float float0 = jSONReaderScanner0.scanFloat('-');
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      char[] charArray0 = new char[4];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 11);
      float float0 = jSONReaderScanner0.scanFloat('4');
      assertEquals(0.0F, float0, 0.01F);
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("\":\"");
      float float0 = jSONReaderScanner0.scanFloat('A');
      assertEquals(0.0F, float0, 0.01F);
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("IIm_m/y", (-934));
      SymbolTable symbolTable0 = new SymbolTable(1251);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFieldStringArray((char[]) null, 44, symbolTable0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("*<XM-)fMcpj:UQbtTL");
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFieldStringArray((char[]) null, (-669), (SymbolTable) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("}}M5FsY *>tM0fs<");
      assertEquals(0, jSONScanner0.matchStat);
      
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldStringArray(charArray0, (-2965), (SymbolTable) null);
      assertEquals(989, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("unclosed single-quote string");
      Class<Object> class0 = Object.class;
      SymbolTable symbolTable0 = new SymbolTable(1569);
      jSONScanner0.scanEnum(class0, symbolTable0, '\u0000');
      assertEquals(989, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("TreeSet");
      assertEquals(0, jSONScanner0.matchStat);
      
      Class<Integer> class0 = Integer.class;
      SymbolTable symbolTable0 = new SymbolTable(43);
      jSONScanner0.scanEnum(class0, symbolTable0, '1');
      assertEquals(989, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      char[] charArray0 = new char[3];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 6219, 123);
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      double double0 = jSONReaderScanner0.scanDouble('A');
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("*<XM-)fMcpj:UQbtTL");
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      jSONReaderScanner0.scanDecimal('3');
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("3*XM-)fMcpj:UQbtTL");
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanDecimal('z');
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(")v;bw1@!xZ", 1261);
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      jSONReaderScanner0.scanDate('#');
      assertEquals(1261, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      char[] charArray0 = new char[4];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 11);
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      jSONReaderScanner0.scanDate('Z');
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("null");
      boolean boolean0 = jSONReaderScanner0.scanBoolean('\'');
      assertFalse(boolean0);
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      char[] charArray0 = new char[1];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 11);
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      boolean boolean0 = jSONReaderScanner0.scanBoolean('2');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      char[] charArray0 = new char[1];
      String string0 = JSONLexerBase.readString(charArray0, 0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONLexerBase.readString((char[]) null, (-957));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("Set", (-2));
      jSONReaderScanner0.putChar('!');
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals((-2), jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      StringReader stringReader0 = new StringReader("CpU-?F");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0, 2581);
      jSONReaderScanner0.putChar('2');
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(2581, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(")v;bw1@!xZ", 1261);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextTokenWithColon(2812);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - ), info : 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      char[] charArray0 = new char[1];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 13);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextTokenWithColon((-1678));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - \u0000, info : 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      char[] charArray0 = new char[5];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 83);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextTokenWithChar(' ');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match   - \u0000, info : 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("*<XM-)fMcpj:UQbtTL");
      // Undeclared exception!
      try { 
        jSONReaderScanner0.matchField2((char[]) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("", 102);
      jSONReaderScanner0.lexError("", (Object[]) null);
      assertEquals(1, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      char[] charArray0 = new char[1];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 11);
      Object[] objectArray0 = new Object[5];
      jSONReaderScanner0.lexError((String) null, objectArray0);
      assertEquals(1, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("\":\"");
      Object[] objectArray0 = new Object[0];
      jSONReaderScanner0.lexError("\":\"", objectArray0);
      assertEquals(1, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      boolean boolean0 = JSONLexerBase.isWhitespace('z');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("d");
      boolean boolean0 = jSONReaderScanner0.isEnabled(4);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("SortField");
      // Undeclared exception!
      try { 
        jSONScanner0.subString((-208), (-208));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("L", (-2));
      jSONReaderScanner0.indexOf('%', 400);
      // Undeclared exception!
      jSONReaderScanner0.scanIdent();
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      char[] charArray0 = new char[13];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 11);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFieldUUID((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONReaderScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("My*7`C'");
      char[] charArray0 = new char[0];
      Class<Integer> class0 = Integer.class;
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFieldStringArray(charArray0, class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.Integer
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      char[] charArray0 = new char[1];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 11);
      Class<Integer> class0 = Integer.class;
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFieldStringArray((char[]) null, class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONReaderScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("E,^(");
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFieldString((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONReaderScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(")v;bw1@!xZ", 1261);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFieldLong((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONReaderScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("*<XM-)fMcpj:UQbtTL");
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFieldInt((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONReaderScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("", 4);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFieldFloatArray2((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONReaderScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("true");
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFieldFloatArray((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONReaderScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("com.alibaba.fastjsonxparser.JSONLexerBase", 289);
      // Undeclared exception!
      try { 
        jSONScanner0.scanFieldDouble((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("*<XM-)fMcpj:UQbtT");
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFieldDecimal((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONReaderScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("", 102);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFieldDate((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONReaderScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("3*XM-)fMcpj:UQbtTL");
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFieldBoolean((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONReaderScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        JSONLexerBase.readString(charArray0, 120);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("unclosed single-quote string");
      // Undeclared exception!
      try { 
        jSONScanner0.numberString();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      char[] charArray0 = new char[1];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 13);
      jSONReaderScanner0.nextToken((-669));
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextIdent();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // EOF error
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("St");
      // Undeclared exception!
      try { 
        jSONReaderScanner0.matchField((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONReaderScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      char[] charArray0 = new char[13];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 11);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.matchField(charArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.CharArrayReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("", 0);
      // Undeclared exception!
      try { 
        jSONScanner0.floatValue();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("#%!~B}FFW{wm49");
      // Undeclared exception!
      try { 
        jSONReaderScanner0.floatValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("`m*YN1", 113);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.decimalValue(false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("2Ym)-*uP]op|wHX*`", 4583);
      jSONReaderScanner0.scanNumber();
      assertEquals(2, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("g9f|^!");
      jSONReaderScanner0.skipWhitespace();
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(")v;bw1@!xZ", 1261);
      jSONReaderScanner0.scanIdent();
      assertEquals(';', jSONReaderScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("St");
      jSONReaderScanner0.scanNumber();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanTrue();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse true
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("\"");
      Class<Object> class0 = Object.class;
      jSONReaderScanner0.newCollectionByType(class0);
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("L", 686);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanSymbolUnQuoted((SymbolTable) null);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("illegal state. ", 39);
      boolean boolean0 = jSONScanner0.isEnabled((-185));
      assertEquals(0, jSONScanner0.matchStat);
      assertTrue(boolean0);
      assertEquals(39, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("TreeSet");
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextTokenWithChar('2');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match 2 - T, info : 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Q`=S?=v-NX,");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0);
      jSONReaderScanner0.nextToken();
      assertEquals('`', jSONReaderScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      char[] charArray0 = new char[16];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 11);
      jSONReaderScanner0.nextToken();
      assertTrue(jSONReaderScanner0.isEOF());
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(")v;bw1@!xZ");
      jSONReaderScanner0.nextToken();
      assertEquals(11, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("[-KyNRPw@y\"}[C6z ", 2856);
      jSONReaderScanner0.info();
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(2856, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      boolean boolean0 = JSONLexerBase.isWhitespace(' ');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("St");
      jSONReaderScanner0.scanNumber();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.decimalValue(true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // null, 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("3*XM-)fMcpj:UQbtTL");
      jSONReaderScanner0.nextToken((-673));
      assertEquals(2, jSONReaderScanner0.token());
      
      Number number0 = jSONReaderScanner0.decimalValue(false);
      assertEquals(3.0, number0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("Set");
      jSONReaderScanner0.scanNumber();
      long long0 = jSONReaderScanner0.longValue();
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(35L, long0);
      assertEquals(0, jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("My*7`C'");
      long long0 = jSONReaderScanner0.longValue();
      assertEquals(0L, long0);
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("EOF error");
      jSONReaderScanner0.scanNumber();
      assertEquals('O', jSONReaderScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("e0", 7);
      jSONReaderScanner0.scanNumber();
      assertTrue(jSONReaderScanner0.isEOF());
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("D", 2887);
      jSONReaderScanner0.scanNumber();
      assertEquals(3, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(".");
      jSONReaderScanner0.scanNumber();
      assertEquals('\u001A', jSONReaderScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("\":\"");
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanHex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal state. \"
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("");
      jSONReaderScanner0.skipWhitespace();
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      char[] charArray0 = new char[2];
      String string0 = JSONLexerBase.readString(charArray0, 2);
      assertEquals("\u0000\u0000", string0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("TreeSet");
      jSONReaderScanner0.nextToken(11);
      assertEquals('\u001A', jSONReaderScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("undefined");
      jSONReaderScanner0.nextToken(52429);
      assertEquals('\u001A', jSONReaderScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("false");
      jSONScanner0.scanIdent();
      assertEquals('\u001A', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("true");
      jSONReaderScanner0.scanIdent();
      assertTrue(jSONReaderScanner0.isEOF());
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("unclosed single-quote string");
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFalse();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("null");
      jSONReaderScanner0.nextToken(2);
      assertEquals(8, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      char[] charArray0 = new char[1];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 107, 1440);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanNullOrNew();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse null or new
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("true");
      jSONReaderScanner0.scanTrue();
      long long0 = jSONReaderScanner0.longValue();
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0L, long0);
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("St");
      jSONReaderScanner0.scanNumber();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextToken();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse true
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("new", 0);
      // Undeclared exception!
      try { 
        jSONScanner0.scanTrue();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse true
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("null");
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      jSONReaderScanner0.scanUUID('T');
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("\":\"");
      jSONReaderScanner0.scanUUID('m');
      assertEquals((-1), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("");
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      jSONReaderScanner0.scanUUID('|');
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("85*h6[EV0b");
      char[] charArray0 = new char[5];
      jSONReaderScanner0.scanFieldUUID(charArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      char[] charArray0 = new char[9];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 12, 12);
      jSONReaderScanner0.scanFieldUUID(charArray0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("TreeSet");
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      jSONReaderScanner0.scanDate('U');
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("", 1261);
      char[] charArray0 = new char[9];
      jSONReaderScanner0.scanFieldDate(charArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("");
      char[] charArray0 = new char[0];
      jSONReaderScanner0.scanFieldDate(charArray0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("c[W");
      char[] charArray0 = new char[5];
      jSONReaderScanner0.scanFieldBigInteger(charArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      char[] charArray0 = new char[4];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 11);
      jSONReaderScanner0.scanFieldBigInteger(charArray0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = '?';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 116);
      char[] charArray1 = new char[0];
      jSONReaderScanner0.scanFieldDecimal(charArray1);
      assertEquals((-1), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(")v;bw1@!xZ");
      char[] charArray0 = new char[1];
      jSONReaderScanner0.scanFieldDecimal(charArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      char[] charArray0 = new char[1];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 11);
      jSONReaderScanner0.scanFieldDecimal(charArray0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(".a)t", 4);
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldDouble(charArray0);
      assertEquals(4, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("AS?s/f:pu'l/");
      char[] charArray0 = new char[4];
      double double0 = jSONReaderScanner0.scanFieldDouble(charArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("My*7`C'");
      char[] charArray0 = new char[0];
      jSONReaderScanner0.scanFieldDouble(charArray0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("\":\"");
      char[] charArray0 = new char[7];
      jSONReaderScanner0.scanFieldFloatArray2(charArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("");
      char[] charArray0 = new char[0];
      jSONReaderScanner0.scanFieldFloatArray2(charArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("", 1261);
      char[] charArray0 = new char[2];
      jSONReaderScanner0.scanFieldFloatArray(charArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("");
      char[] charArray0 = new char[0];
      jSONReaderScanner0.scanFieldFloatArray(charArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("TreeSet");
      jSONReaderScanner0.scanDecimal('u');
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("\"");
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      jSONReaderScanner0.scanDecimal('_');
      assertFalse(jSONReaderScanner0.isEOF());
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("");
      jSONReaderScanner0.scanDecimal('e');
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("null");
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      double double0 = jSONReaderScanner0.scanDouble('.');
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = '2';
      charArray0[1] = '2';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 317, 97);
      double double0 = jSONReaderScanner0.scanDouble('I');
      assertEquals(97, jSONReaderScanner0.getFeatures());
      assertEquals(22.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("3*XM-)fMcpj:UQbtTL");
      double double0 = jSONReaderScanner0.scanDouble('2');
      assertEquals(3.0, double0, 0.01);
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = '-';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 102, 2181);
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      double double0 = jSONReaderScanner0.scanDouble('-');
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("\":\"");
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      double double0 = jSONReaderScanner0.scanDouble('-');
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("null");
      float float0 = jSONReaderScanner0.scanFloat('Y');
      assertEquals(0.0F, float0, 0.01F);
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("L");
      char[] charArray0 = new char[1];
      float float0 = jSONScanner0.scanFieldFloat(charArray0);
      assertEquals((-2), jSONScanner0.matchStat);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("");
      char[] charArray0 = new char[0];
      jSONReaderScanner0.scanFieldFloat(charArray0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("new");
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      long long0 = jSONReaderScanner0.scanLong('K');
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("");
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      jSONReaderScanner0.scanLong('K');
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("St");
      char[] charArray0 = new char[0];
      jSONReaderScanner0.scanFieldLong(charArray0);
      int int0 = jSONReaderScanner0.matchStat();
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("*<XM-)fMcpj:UQbtTL");
      char[] charArray0 = new char[8];
      long long0 = jSONReaderScanner0.scanFieldLong(charArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("");
      char[] charArray0 = new char[0];
      jSONReaderScanner0.scanFieldLong(charArray0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("type not match error");
      char[] charArray0 = new char[0];
      boolean boolean0 = jSONReaderScanner0.scanFieldBoolean(charArray0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("treeset");
      char[] charArray0 = new char[0];
      jSONReaderScanner0.scanFieldBoolean(charArray0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("*<XM-)fMcpj:UQbtT");
      char[] charArray0 = new char[6];
      boolean boolean0 = jSONReaderScanner0.scanFieldBoolean(charArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("My*7`C'");
      char[] charArray0 = new char[0];
      jSONReaderScanner0.scanFieldBoolean(charArray0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("G-Ivu;;4");
      jSONReaderScanner0.nextToken(2466);
      int int0 = jSONReaderScanner0.scanInt('S');
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, int0);
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("3*XM-)fMcpj:UQbtTL");
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      int int0 = jSONReaderScanner0.scanInt('s');
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("treeset");
      jSONReaderScanner0.scanBoolean('A');
      assertEquals((-1), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(")v;bw1@!xZ", 1261);
      char[] charArray0 = new char[2];
      jSONReaderScanner0.scanFieldIntArray(charArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(")v;bw1@!xZ");
      char[] charArray0 = new char[0];
      jSONReaderScanner0.scanFieldIntArray(charArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      char[] charArray0 = new char[1];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 11);
      jSONReaderScanner0.scanFieldInt(charArray0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("L", 686);
      char[] charArray0 = new char[6];
      int int0 = jSONReaderScanner0.scanFieldInt(charArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("My*7`C'");
      char[] charArray0 = new char[0];
      jSONReaderScanner0.scanFieldInt(charArray0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("[-KyNRPw@y\"}[C6z ", 2856);
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      jSONReaderScanner0.scanStringArray(set0, 'm');
      assertEquals(2856, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("null");
      LinkedList<String> linkedList0 = new LinkedList<String>();
      jSONReaderScanner0.scanStringArray(linkedList0, 'i');
      jSONReaderScanner0.scanDouble('.');
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("*<XM-)fMcpj:UQbtT");
      char[] charArray0 = new char[3];
      Class<Object> class0 = Object.class;
      jSONReaderScanner0.scanFieldStringArray(charArray0, class0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("\":\"");
      char[] charArray0 = new char[0];
      Class<Object> class0 = Object.class;
      jSONReaderScanner0.scanFieldStringArray(charArray0, class0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("");
      Class<Integer> class0 = Integer.class;
      // Undeclared exception!
      try { 
        jSONReaderScanner0.newCollectionByType(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.Integer
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("\":\"");
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      SymbolTable symbolTable0 = new SymbolTable(91);
      jSONReaderScanner0.scanSymbolWithSeperator(symbolTable0, 'f');
      assertFalse(jSONReaderScanner0.isEOF());
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      SymbolTable symbolTable0 = new SymbolTable(92);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("null", 123);
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      jSONReaderScanner0.scanSymbolWithSeperator(symbolTable0, ']');
      assertEquals(123, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("error parse null");
      char[] charArray0 = new char[9];
      long long0 = jSONReaderScanner0.scanFieldSymbol(charArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("");
      char[] charArray0 = new char[0];
      long long0 = jSONReaderScanner0.scanFieldSymbol(charArray0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\"");
      // Undeclared exception!
      try { 
        jSONScanner0.scanString(';');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed str
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("\":\"");
      jSONReaderScanner0.scanString('m');
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanUUID('m');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed str
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      char[] charArray0 = new char[13];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 11);
      char[] charArray1 = new char[6];
      charArray1[0] = 'C';
      jSONReaderScanner0.scanFieldString(charArray1);
      assertEquals((-2), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(")v;bw1@!xZ", 1261);
      char[] charArray0 = new char[3];
      boolean boolean0 = jSONReaderScanner0.matchField(charArray0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertFalse(boolean0);
      assertEquals(1261, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      char[] charArray0 = new char[4];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 10);
      boolean boolean0 = jSONReaderScanner0.matchField(charArray0);
      assertEquals('\u001A', jSONReaderScanner0.getCurrent());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("true");
      int int0 = jSONReaderScanner0.scanType((String) null);
      assertEquals((-2), int0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("");
      boolean boolean0 = jSONReaderScanner0.isRef();
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("Set");
      jSONReaderScanner0.close();
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      StringReader stringReader0 = new StringReader("unclosed single-quote string");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0, (-1241));
      jSONReaderScanner0.nextToken(44);
      int int0 = jSONReaderScanner0.intValue();
      assertEquals(' ', jSONReaderScanner0.getCurrent());
      assertEquals(757770282, int0);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("F");
      jSONReaderScanner0.scanNumber();
      int int0 = jSONReaderScanner0.intValue();
      assertEquals(3, jSONReaderScanner0.token());
      assertEquals(22, int0);
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = 'g';
      charArray0[1] = 'Z';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 6219, 123);
      SymbolTable symbolTable0 = new SymbolTable(123);
      jSONReaderScanner0.scanSymbolUnQuoted(symbolTable0);
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      char[] charArray0 = new char[1];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 6219, (-881));
      SymbolTable symbolTable0 = new SymbolTable(255);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanSymbolUnQuoted(symbolTable0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal identifier : \u0000
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("\":\"");
      SymbolTable symbolTable0 = new SymbolTable(256);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanSymbol(symbolTable0, ',');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed.str
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      StringReader stringReader0 = new StringReader("new");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.skipComment();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid comment
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("85*h6[EV0b");
      boolean boolean0 = jSONReaderScanner0.isEnabled(Integer.MIN_VALUE, Integer.MIN_VALUE);
      assertTrue(boolean0);
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("lQ");
      boolean boolean0 = jSONReaderScanner0.isEnabled(45, (-1830));
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertTrue(boolean0);
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      char[] charArray0 = new char[3];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 6219, 123);
      Feature feature0 = Feature.DisableSpecialKeyDetect;
      boolean boolean0 = jSONReaderScanner0.isEnabled(feature0);
      assertEquals(123, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      Feature feature0 = Feature.IgnoreNotMatch;
      char[] charArray0 = new char[6];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 48, (-306));
      jSONReaderScanner0.config(feature0, true);
      assertEquals((-50), jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("", 102);
      Feature feature0 = Feature.IgnoreNotMatch;
      jSONReaderScanner0.config(feature0, false);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(102, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("3*XM-)fMcpj:UQbtTL");
      jSONReaderScanner0.nextToken((-673));
      assertEquals(2, jSONReaderScanner0.token());
      
      jSONReaderScanner0.floatValue();
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("Set");
      jSONReaderScanner0.scanNumber();
      jSONReaderScanner0.integerValue();
      assertEquals('e', jSONReaderScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(" 5Z-p-");
      // Undeclared exception!
      try { 
        jSONReaderScanner0.integerValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("SortField");
      jSONScanner0.nextIdent();
      assertEquals(18, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = '$';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 84);
      jSONReaderScanner0.nextIdent();
      assertEquals(18, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("St");
      jSONReaderScanner0.nextToken(4);
      assertEquals('\u001A', jSONReaderScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("string");
      jSONReaderScanner0.nextToken(19);
      assertEquals(1, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("\":\"");
      jSONReaderScanner0.nextToken(18);
      assertEquals('\u001A', jSONReaderScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("Set");
      jSONReaderScanner0.nextToken(17);
      assertEquals('\u001A', jSONReaderScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      char[] charArray0 = new char[5];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 0);
      jSONReaderScanner0.nextToken(14);
      assertEquals(20, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(" 5Z-p-");
      jSONReaderScanner0.nextToken(7);
      jSONReaderScanner0.integerValue();
      assertEquals(1, jSONReaderScanner0.pos());
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("Set");
      jSONReaderScanner0.nextToken(5);
      assertTrue(jSONReaderScanner0.isEOF());
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("");
      jSONReaderScanner0.nextToken(4);
      assertEquals(20, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("St");
      jSONReaderScanner0.nextToken(2);
      long long0 = jSONReaderScanner0.longValue();
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(418L, long0);
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = '';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 8);
      jSONReaderScanner0.nextToken((-477));
      assertTrue(jSONReaderScanner0.isEOF());
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("");
      jSONReaderScanner0.nextToken(0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextToken(15);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // EOF error
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("}}M5FsY *>tM0fs<");
      jSONScanner0.nextIdent();
      assertEquals(13, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = '{';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 696);
      jSONReaderScanner0.nextToken((-673));
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("treeset");
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextToken((-2680));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse true
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("new", 0);
      jSONScanner0.nextToken(0);
      assertTrue(jSONScanner0.isEOF());
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("SortField");
      jSONReaderScanner0.nextToken((-697));
      jSONReaderScanner0.integerValue();
      assertEquals(18, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("NXk<`7k>");
      jSONReaderScanner0.nextToken(44);
      assertEquals('<', jSONReaderScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(";(W=ZEI:");
      jSONReaderScanner0.nextToken(109);
      assertEquals('(', jSONReaderScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("T:");
      jSONReaderScanner0.nextToken((-1));
      jSONReaderScanner0.nextToken((-850));
      assertEquals(17, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = '.';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 11);
      jSONReaderScanner0.nextToken((-3112));
      assertEquals(25, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(")v");
      jSONReaderScanner0.nextToken(3);
      assertEquals('v', jSONReaderScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("(v!}W?*DWa;.?Vq", 13);
      jSONReaderScanner0.nextToken(13);
      assertEquals(10, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = '-';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 1);
      jSONReaderScanner0.nextToken(0);
      assertTrue(jSONReaderScanner0.isEOF());
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("T,3nR", 11);
      jSONReaderScanner0.nextToken((-3050));
      jSONReaderScanner0.nextToken((-3050));
      assertEquals(1, jSONReaderScanner0.pos());
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("", 1261);
      int int0 = jSONReaderScanner0.intValue();
      assertEquals(1261, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("c[W");
      jSONReaderScanner0.scanSymbol((SymbolTable) null);
      assertEquals('[', jSONReaderScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      char[] charArray0 = new char[1];
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 0, 78);
      int int0 = jSONScanner0.token();
      assertEquals(78, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("'#(W]bI");
      // Undeclared exception!
      try { 
        jSONReaderScanner0.doubleValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("My*7`C'");
      int int0 = jSONReaderScanner0.pos();
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, int0);
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("");
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextTokenWithColon();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - \u0000, info : 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("}}M5FsY *>tM0fs<");
      jSONScanner0.getLocale();
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(989, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      StringReader stringReader0 = new StringReader("new");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0);
      int int0 = jSONReaderScanner0.matchStat();
      assertEquals(0, int0);
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("(v!}W?*DWa;.?Vq", 13);
      jSONReaderScanner0.setTimeZone((TimeZone) null);
      TimeZone timeZone0 = jSONReaderScanner0.getTimeZone();
      assertEquals(13, jSONReaderScanner0.getFeatures());
      assertNull(timeZone0);
      assertEquals(0, jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("Set", (-2));
      jSONReaderScanner0.setToken((-2106));
      assertEquals((-2106), jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(")v;bw1@!xZ", 1261);
      char[] charArray0 = new char[8];
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFieldStringArray(charArray0, 1261, (SymbolTable) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("", 0);
      // Undeclared exception!
      try { 
        jSONScanner0.nextTokenWithColon(0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - \u001A, info : pos 0, json : 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("", 9);
      jSONScanner0.getCalendar();
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(9, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(")v;bw1@!xZ", 1261);
      jSONReaderScanner0.resetStringPosition();
      assertEquals(1261, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("'#(W]bI");
      String string0 = jSONReaderScanner0.tokenName();
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals("Unknown", string0);
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("TreeSet");
      int int0 = jSONScanner0.getFeatures();
      assertEquals(989, int0);
      assertEquals(0, jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("");
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        jSONReaderScanner0.matchField2(charArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("");
      String string0 = jSONReaderScanner0.stringDefaultValue();
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertNull(string0);
      assertEquals(0, jSONReaderScanner0.matchStat);
  }
}
