/*
 * This file was automatically generated by EvoSuite
 * Mon Jul 16 16:18:14 GMT 2018
 */

package com.alibaba.fastjson.parser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.alibaba.fastjson.parser.Feature;
import com.alibaba.fastjson.parser.JSONLexerBase;
import com.alibaba.fastjson.parser.JSONReaderScanner;
import com.alibaba.fastjson.parser.JSONScanner;
import com.alibaba.fastjson.parser.SymbolTable;
import java.io.ByteArrayInputStream;
import java.io.CharArrayReader;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.LineNumberReader;
import java.io.ObjectStreamConstants;
import java.io.PushbackReader;
import java.io.Reader;
import java.io.SequenceInputStream;
import java.math.BigDecimal;
import java.time.ZoneId;
import java.time.chrono.ChronoLocalDate;
import java.util.Calendar;
import java.util.Collection;
import java.util.LinkedHashSet;
import java.util.Locale;
import java.util.Set;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileReader;
import org.evosuite.runtime.mock.java.time.chrono.MockHijrahDate;
import org.evosuite.runtime.mock.java.time.chrono.MockJapaneseDate;
import org.evosuite.runtime.mock.java.time.chrono.MockMinguoDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONLexerBase_ESTest extends JSONLexerBase_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 44);
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      jSONReaderScanner0.scanDate(']');
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("N iV}$%t5_^9s*p");
      jSONScanner0.scanUUID('8');
      // Undeclared exception!
      try { 
        jSONScanner0.sub_chars((-1438), 69);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("@(X71*JG[t");
      char[] charArray0 = new char[3];
      charArray0[0] = 'A';
      jSONReaderScanner0.scanUUID(' ');
      char char0 = 'f';
      jSONReaderScanner0.scanDate('A');
      charArray0[1] = 'f';
      charArray0[2] = 'C';
      jSONReaderScanner0.scanFieldFloatArray2(charArray0);
      jSONReaderScanner0.matchStat();
      int int0 = 0;
      jSONReaderScanner0.lexError("i%=:", (Object[]) null);
      jSONReaderScanner0.scanFieldLong(charArray0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.copyTo((-2), 0, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("iWiE}*8");
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) "iWiE}*8";
      jSONReaderScanner0.scanDate('w');
      jSONReaderScanner0.token = 12;
      objectArray0[2] = (Object) jSONReaderScanner0;
      jSONReaderScanner0.lexError("iWiE}*8", objectArray0);
      assertEquals(1, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("@(X71*JG[t");
      char[] charArray0 = new char[3];
      charArray0[0] = 'A';
      jSONReaderScanner0.scanDate('A');
      charArray0[1] = 'f';
      charArray0[2] = 'C';
      jSONReaderScanner0.scanFieldFloatArray2(charArray0);
      jSONReaderScanner0.matchStat();
      int int0 = 0;
      jSONReaderScanner0.lexError("@(X71*JG[t", (Object[]) null);
      jSONReaderScanner0.scanFieldLong(charArray0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.skipComment();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid comment
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("qz}0W@P<,c-eE");
      jSONScanner0.longValue();
      char[] charArray0 = new char[5];
      charArray0[0] = 'N';
      charArray0[1] = '_';
      charArray0[2] = 'Y';
      charArray0[3] = '|';
      charArray0[4] = 'n';
      jSONScanner0.scanFieldDouble(charArray0);
      jSONScanner0.bytesValue();
      jSONScanner0.scanNumber();
      assertEquals((-2), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("-e#");
      char[] charArray0 = new char[1];
      charArray0[0] = '$';
      jSONScanner0.scanFieldDouble(charArray0);
      jSONScanner0.isBlankInput();
      jSONScanner0.scanNumber();
      assertEquals((-2), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("EOF error");
      JSONLexerBase.readString((char[]) null, 0);
      jSONScanner0.scanNumber();
      jSONScanner0.nextIdent();
      assertEquals(' ', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("j");
      jSONReaderScanner0.scanDecimal('F');
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("F#9&,H,1dwPKn,L78mN", 18);
      jSONScanner0.scanInt('g');
      jSONScanner0.scanDecimal('I');
      jSONScanner0.next();
      char[] charArray0 = new char[4];
      charArray0[0] = 'g';
      charArray0[1] = 'I';
      charArray0[2] = 'I';
      charArray0[3] = ')';
      jSONScanner0.scanFieldDate(charArray0);
      char[] charArray1 = new char[2];
      charArray1[0] = '#';
      charArray1[1] = 'g';
      jSONScanner0.scanFieldDouble(charArray1);
      jSONScanner0.getLocale();
      jSONScanner0.scanFieldBoolean(charArray1);
      // Undeclared exception!
      try { 
        jSONScanner0.numberString();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("_");
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextTokenWithChar('7');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match 7 - _, info : 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("g$i}ch0", 21);
      Class<MockHijrahDate> class0 = MockHijrahDate.class;
      char char0 = 'u';
      jSONScanner0.scanBoolean('u');
      jSONScanner0.hasSpecial = true;
      // Undeclared exception!
      try { 
        jSONScanner0.numberString();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("java.time.LocalTime", (-1442));
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFalse();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      char[] charArray0 = new char[3];
      char char0 = 'z';
      charArray0[0] = 'z';
      char char1 = '#';
      charArray0[1] = '#';
      char char2 = 'C';
      charArray0[2] = 'C';
      int int0 = 0;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 0, 0);
      char[] charArray1 = new char[3];
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextTokenWithColon();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - \u0000, info : 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("syntax error");
      jSONScanner0.nextToken(17);
      jSONScanner0.getCalendar();
      assertEquals('y', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("wmV");
      char[] charArray0 = new char[5];
      charArray0[0] = '2';
      charArray0[1] = 'H';
      charArray0[2] = '}';
      charArray0[3] = '|';
      charArray0[4] = '|';
      jSONScanner0.scanFieldDate(charArray0);
      jSONScanner0.nextToken(46);
      jSONScanner0.close();
      SimpleTimeZone simpleTimeZone0 = null;
      try {
        simpleTimeZone0 = new SimpleTimeZone((-2782), "wmV", (-2782), 601, 36, 24, 999999, (-2), 10, 120, (-2782));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal start month -2782
         //
         verifyException("java.util.SimpleTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("uwx");
      jSONScanner0.close();
      // Undeclared exception!
      try { 
        jSONScanner0.floatValue();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = 'o';
      charArray0[1] = 'G';
      charArray0[2] = '<';
      charArray0[3] = 'T';
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 0, 0);
      jSONScanner0.tokenName();
      jSONScanner0.scanFieldDouble(charArray0);
      jSONScanner0.np = (-1464);
      jSONScanner0.next();
      jSONScanner0.scanFieldLong(charArray0);
      jSONScanner0.scanFieldLong(charArray0);
      jSONScanner0.scanISO8601DateIfMatch();
      jSONScanner0.setTimeZone((TimeZone) null);
      jSONScanner0.scanUUID('<');
      // Undeclared exception!
      try { 
        jSONScanner0.setTime('o', '+', 'T', 'o', '<', 'T');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = ',';
      charArray0[1] = '@';
      charArray0[2] = '(';
      int int0 = 0;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 0, 0);
      jSONReaderScanner0.scanFloat('c');
      jSONReaderScanner0.stringVal();
      jSONReaderScanner0.scanBoolean('(');
      int int1 = 207;
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner(charArray0, 207, 0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("synDax error");
      jSONScanner0.scanFloat('<');
      // Undeclared exception!
      try { 
        jSONScanner0.decimalValue(false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("");
      char[] charArray0 = new char[7];
      charArray0[0] = '\"';
      charArray0[1] = 'G';
      charArray0[2] = 'D';
      charArray0[3] = '$';
      charArray0[4] = '\"';
      charArray0[5] = '0';
      charArray0[6] = 'p';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 689, 689);
      jSONReaderScanner0.eofPos = 689;
      assertEquals(0, jSONReaderScanner0.matchStat());
      
      jSONReaderScanner0.scanUUID('G');
      jSONReaderScanner0.isBlankInput();
      assertEquals(689, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("");
      jSONScanner0.nextToken(7);
      jSONScanner0.scanNumber();
      char[] charArray0 = new char[3];
      charArray0[0] = 'z';
      charArray0[1] = 'o';
      charArray0[2] = ';';
      boolean boolean0 = jSONScanner0.matchField(charArray0);
      assertEquals(2, jSONScanner0.token());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("wmV");
      char[] charArray0 = new char[5];
      char char0 = ']';
      char char1 = 'o';
      jSONScanner0.matchField(charArray0);
      jSONScanner0.next();
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("d?", 0);
      jSONScanner0.scanFloat('o');
      String string0 = null;
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFalse();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("");
      boolean boolean0 = jSONReaderScanner0.isEnabled(0);
      assertFalse(boolean0);
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("uwx<");
      jSONReaderScanner0.pos();
      char[] charArray0 = new char[4];
      charArray0[0] = '{';
      charArray0[1] = '{';
      charArray0[2] = '{';
      charArray0[3] = 'r';
      long long0 = jSONReaderScanner0.scanFieldSymbol(charArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("]");
      int int0 = Calendar.SECOND;
      jSONReaderScanner0.longValue();
      jSONReaderScanner0.indexOf('5', 123);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.skipComment();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid comment
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("", (-3198));
      char[] charArray0 = new char[6];
      charArray0[0] = '$';
      charArray0[1] = ',';
      charArray0[2] = ' ';
      charArray0[3] = '}';
      charArray0[4] = 'l';
      charArray0[5] = '-';
      jSONReaderScanner0.scanFieldDate(charArray0);
      jSONReaderScanner0.scanUUID('R');
      jSONReaderScanner0.isBlankInput();
      jSONReaderScanner0.getCurrent();
      JSONScanner jSONScanner0 = new JSONScanner("", 83);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-3198), 1836, (-1), 8, 76, (-88));
      // Undeclared exception!
      try { 
        jSONScanner0.setTime(' ', ' ', 'E', ']', ' ', ' ');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("");
      char[] charArray0 = new char[9];
      charArray0[0] = 'j';
      charArray0[1] = ':';
      charArray0[2] = '.';
      charArray0[3] = 'i';
      charArray0[4] = '$';
      charArray0[5] = '_';
      charArray0[6] = 'j';
      charArray0[7] = 'i';
      charArray0[8] = 'A';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 0);
      jSONReaderScanner0.scanFieldDecimal(charArray0);
      jSONScanner0.scanFieldUUID(charArray0);
      jSONScanner0.nextToken((-2));
      assertEquals(20, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("");
      jSONScanner0.nextToken(21);
      jSONScanner0.getCalendar();
      assertEquals(20, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("x)m~F:");
      jSONScanner0.scanBoolean('[');
      jSONScanner0.intValue();
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldUUID(charArray0);
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("false");
      char[] charArray0 = new char[6];
      charArray0[0] = '\'';
      charArray0[1] = 'U';
      charArray0[2] = 'm';
      jSONReaderScanner0.scanFloat('U');
      charArray0[3] = '>';
      charArray0[4] = 'c';
      charArray0[5] = 'R';
      jSONReaderScanner0.scanFieldDate(charArray0);
      jSONReaderScanner0.nextIdent();
      jSONReaderScanner0.charAt(1238);
      jSONReaderScanner0.scanFieldUUID(charArray0);
      int int0 = jSONReaderScanner0.pos();
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("uwx<");
      jSONReaderScanner0.pos();
      char[] charArray0 = new char[0];
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 0);
      char[] charArray1 = new char[5];
      charArray1[0] = ';';
      charArray1[1] = 'j';
      charArray1[2] = 'K';
      charArray1[2] = 'U';
      charArray1[4] = '`';
      jSONScanner0.scanFieldDouble(charArray1);
      jSONScanner0.bytesValue();
      jSONScanner0.scanNumber();
      jSONScanner0.getTimeZone();
      assertEquals(2, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(" ");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      // Undeclared exception!
      try { 
        jSONScanner0.nextTokenWithColon(27);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - \u001A, info : pos 1, json :  
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("uwx<");
      jSONReaderScanner0.pos();
      char[] charArray0 = new char[9];
      charArray0[0] = 'G';
      charArray0[1] = 'B';
      charArray0[2] = ':';
      charArray0[3] = 's';
      charArray0[4] = 'B';
      charArray0[5] = '[';
      charArray0[6] = '[';
      charArray0[7] = '%';
      charArray0[8] = 'X';
      jSONReaderScanner0.scanFieldString(charArray0);
      char[] charArray1 = new char[0];
      jSONReaderScanner0.scanFieldDecimal(charArray1);
      jSONReaderScanner0.isEOF();
      assertEquals((-1), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = '6';
      charArray0[1] = '>';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 22);
      jSONReaderScanner0.scanFieldFloatArray(charArray0);
      jSONReaderScanner0.scanFieldString(charArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("sO%(rr2", (-454));
      jSONReaderScanner0.stringDefaultValue();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanHex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal state. s
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("");
      char[] charArray0 = new char[8];
      charArray0[0] = 'w';
      charArray0[1] = 'k';
      charArray0[2] = '{';
      charArray0[3] = 'f';
      charArray0[5] = 'k';
      charArray0[6] = '0';
      charArray0[7] = '$';
      int int0 = 100;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 100);
      jSONReaderScanner0.scanFieldDecimal(charArray0);
      int int1 = 15;
      int int2 = 40;
      SymbolTable symbolTable0 = null;
      try {
        symbolTable0 = new SymbolTable((-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.SymbolTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("]Wf=&b*8_dr4liv.");
      boolean boolean0 = jSONScanner0.isRef();
      assertFalse(boolean0);
      
      jSONScanner0.getLocale();
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("2o8+8-");
      SymbolTable symbolTable0 = new SymbolTable(1512);
      jSONReaderScanner0.addSymbol(32, 1512, 26, symbolTable0);
      jSONReaderScanner0.longValue();
      char[] charArray0 = new char[0];
      jSONReaderScanner0.scanFieldSymbol(charArray0);
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner(charArray0, 32);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 255);
      Class<Feature> class0 = Feature.class;
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFieldStringArray(charArray0, class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // com.alibaba.fastjson.parser.Feature
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("'4");
      // Undeclared exception!
      try { 
        jSONScanner0.nextToken(19);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed single-quote string
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Locale locale0 = Locale.CHINA;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("'");
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextIdent();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed single-quote string
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("syntax error, expect {, actual ");
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldFloatArray(charArray0);
      jSONScanner0.nextToken(9);
      jSONScanner0.getCalendar();
      assertEquals('y', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("uwx<");
      int int0 = jSONReaderScanner0.pos();
      assertEquals(0, int0);
      
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "com.alibaba.fastjson.parser.JSONLexerBase");
      Feature feature0 = Feature.SupportArrayToBean;
      jSONReaderScanner0.config(feature0, false);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("]");
      jSONScanner0.getCalendar();
      jSONScanner0.nextIdent();
      char[] charArray0 = new char[8];
      charArray0[0] = ',';
      charArray0[1] = 'A';
      charArray0[2] = 't';
      charArray0[3] = ';';
      charArray0[4] = 'S';
      charArray0[5] = '9';
      charArray0[6] = '>';
      charArray0[7] = ')';
      jSONScanner0.scanFieldString(charArray0);
      assertEquals(15, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      JSONScanner jSONScanner0 = new JSONScanner("");
      boolean boolean0 = jSONScanner0.scanBoolean('9');
      assertFalse(boolean0);
      
      jSONScanner0.getCalendar();
      int int0 = jSONScanner0.token();
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      JSONScanner jSONScanner0 = new JSONScanner("syntax error, expect {, actual ");
      jSONScanner0.scanNumber();
      int int0 = jSONScanner0.scanType("fastjson.parser.autoTypeSupport");
      assertEquals(2, jSONScanner0.token());
      assertEquals((-2), int0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("");
      jSONScanner0.intValue();
      jSONScanner0.getCalendar();
      char[] charArray0 = new char[1];
      charArray0[0] = 'g';
      float float0 = jSONScanner0.scanFieldFloat(charArray0);
      assertEquals((-2), jSONScanner0.matchStat);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("new");
      int int0 = Calendar.SECOND;
      char[] charArray0 = new char[9];
      jSONReaderScanner0.scanDouble('E');
      charArray0[0] = 'x';
      charArray0[1] = 'x';
      charArray0[2] = 'x';
      charArray0[3] = 'x';
      charArray0[4] = 'x';
      charArray0[5] = 'x';
      charArray0[6] = 'x';
      charArray0[7] = 'x';
      charArray0[8] = 'x';
      jSONReaderScanner0.charArrayCompare(charArray0);
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("syntax error, expect ");
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      jSONReaderScanner0.scanDouble('A');
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\":\"");
      jSONScanner0.nextToken(2011);
      boolean boolean0 = jSONScanner0.isEOF();
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-677), (-677), 3, (-677), (-1649));
      JSONScanner jSONScanner0 = new JSONScanner("w_PYYe`[>&!vdW ", (-677));
      char[] charArray0 = new char[7];
      charArray0[0] = ';';
      charArray0[1] = '1';
      char char0 = '$';
      // Undeclared exception!
      try { 
        jSONScanner0.scanString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed string : \u001A
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("<S", 125);
      jSONScanner0.nextToken(125);
      jSONScanner0.scanString('+');
      jSONScanner0.longValue();
      // Undeclared exception!
      try { 
        jSONScanner0.scanString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed string : \u001A
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("new");
      char[] charArray0 = new char[0];
      JSONScanner jSONScanner1 = new JSONScanner(charArray0, 0);
      jSONScanner1.getCalendar();
      jSONScanner1.scanFieldFloatArray2(charArray0);
      assertEquals((-2), jSONScanner1.matchStat);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("true");
      jSONScanner0.scanString('0');
      jSONScanner0.lexError("}", (Object[]) null);
      jSONScanner0.scanNumber();
      assertEquals(2, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)99;
      byteArray0[1] = (byte)15;
      byteArray0[2] = (byte)122;
      byteArray0[3] = (byte)73;
      byteArray0[4] = (byte)79;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      JSONScanner jSONScanner0 = new JSONScanner("syntax error, expect {, actual ");
      jSONScanner0.scanNumber();
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      jSONScanner0.setLocale(locale0);
      assertEquals(2, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("+M24t6;nk<hhFAt2");
      jSONScanner0.longValue();
      char[] charArray0 = new char[5];
      charArray0[0] = 'P';
      charArray0[1] = '(';
      charArray0[2] = '(';
      charArray0[3] = 'w';
      charArray0[4] = '-';
      jSONScanner0.scanFieldIntArray(charArray0);
      char[] charArray1 = new char[0];
      jSONScanner0.matchField(charArray1);
      assertEquals((-2), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("uwx<");
      jSONReaderScanner0.pos();
      char[] charArray0 = new char[0];
      jSONReaderScanner0.matchField(charArray0);
      char[] charArray1 = new char[0];
      jSONReaderScanner0.scanFieldDecimal(charArray1);
      jSONReaderScanner0.scanFieldFloat(charArray1);
      assertEquals((-1), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      JSONScanner jSONScanner0 = new JSONScanner("springfox.documentation.spring.web.json.Json");
      char char0 = Locale.UNICODE_LOCALE_EXTENSION;
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldBigInteger(charArray0);
      jSONScanner0.scanFieldFloat(charArray0);
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(".");
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      jSONScanner0.scanStringArray(set0, 'O');
      jSONScanner0.nextToken(102);
      assertEquals(25, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("syntax error");
      JSONScanner jSONScanner1 = new JSONScanner("syntax error");
      char[] charArray0 = new char[5];
      charArray0[0] = '\'';
      charArray0[1] = 'Y';
      charArray0[2] = 'n';
      charArray0[3] = 'l';
      charArray0[4] = 'T';
      Class<MockMinguoDate> class0 = MockMinguoDate.class;
      jSONScanner1.scanFieldStringArray(charArray0, class0);
      jSONScanner0.scanStringArray((Collection<String>) null, '\'');
      jSONScanner0.getCalendar();
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("]");
      jSONScanner0.getCalendar();
      char[] charArray0 = new char[2];
      // Undeclared exception!
      try { 
        jSONScanner0.doubleValue();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("\"G", (-1775));
      Class<ChronoLocalDate> class0 = ChronoLocalDate.class;
      // Undeclared exception!
      try { 
        jSONReaderScanner0.newCollectionByType(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.time.chrono.ChronoLocalDate
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("");
      int int0 = jSONScanner0.intValue();
      assertEquals(0, int0);
      
      jSONScanner0.getCalendar();
      long long0 = jSONScanner0.longValue();
      assertEquals(0L, long0);
      assertEquals(989, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("new");
      jSONScanner0.nextToken(117);
      jSONScanner0.getCalendar();
      jSONScanner0.setToken(123);
      assertTrue(jSONScanner0.isEOF());
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("null");
      char[] charArray0 = new char[4];
      charArray0[0] = '2';
      charArray0[1] = 'F';
      charArray0[2] = '?';
      charArray0[3] = '`';
      jSONReaderScanner0.scanFieldInt(charArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      jSONReaderScanner0.scanDecimal('F');
      assertFalse(jSONReaderScanner0.isEOF());
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("new", (-1673));
      int int0 = Calendar.MINUTE;
      char[] charArray0 = new char[9];
      charArray0[0] = '`';
      charArray0[1] = '`';
      charArray0[2] = 'q';
      charArray0[3] = '.';
      charArray0[4] = '&';
      charArray0[5] = '<';
      charArray0[6] = '<';
      charArray0[7] = '2';
      charArray0[8] = '+';
      jSONReaderScanner0.scanFieldDecimal(charArray0);
      jSONReaderScanner0.scanFieldInt(charArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      
      Locale locale0 = Locale.KOREAN;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      jSONReaderScanner0.scanStringArray(set0, '<');
      assertEquals((-1673), jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("true");
      jSONScanner0.nextToken(17);
      jSONScanner0.getCalendar();
      assertTrue(jSONScanner0.isEOF());
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("");
      jSONScanner0.scanNumber();
      jSONScanner0.tokenName();
      jSONScanner0.scanBoolean('9');
      jSONScanner0.getCalendar();
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldFloat(charArray0);
      assertEquals(2, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("flse");
      char[] charArray0 = new char[9];
      charArray0[0] = '#';
      charArray0[2] = 'b';
      jSONScanner0.scanBoolean('L');
      jSONScanner0.isRef();
      // Undeclared exception!
      try { 
        jSONScanner0.charAt((-1016));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("]Wf=&b*8_dr4liv.");
      jSONScanner0.scanNumber();
      jSONScanner0.nextToken((-1438718860));
      jSONScanner0.nextToken();
      jSONScanner0.scanBoolean('!');
      jSONScanner0.getCalendar();
      assertEquals(1, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("new");
      jSONScanner0.scanString('0');
      assertEquals((-1), jSONScanner0.matchStat);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-104);
      byteArray0[1] = (byte)9;
      byteArray0[2] = (byte)27;
      byteArray0[3] = (byte)18;
      byteArray0[4] = (byte) (-109);
      byteArray0[5] = (byte) (-45);
      byteArray0[6] = (byte)82;
      byteArray0[7] = (byte)83;
      byteArray0[8] = (byte)31;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      JSONScanner jSONScanner1 = new JSONScanner("N7:_gu9Q005UB_rD", 2);
      jSONScanner1.lexError("vq*9jf;(.", (Object[]) null);
      JSONScanner jSONScanner2 = new JSONScanner("N7:_gu9Q005UB_rD", (-1));
      jSONScanner2.scanNumber();
      assertEquals((-1), jSONScanner2.getFeatures());
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("");
      jSONScanner0.skipWhitespace();
      jSONScanner0.scanBoolean('9');
      jSONScanner0.getCalendar();
      SymbolTable symbolTable0 = null;
      try {
        symbolTable0 = new SymbolTable((-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.SymbolTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("h!jV+eTnpQgv=8S");
      jSONScanner0.skipWhitespace();
      jSONScanner0.getCalendar();
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldIntArray(charArray0);
      assertEquals((-2), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("j");
      SymbolTable symbolTable0 = new SymbolTable(31);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanSymbolUnQuoted(symbolTable0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("");
      char char0 = 'j';
      SymbolTable symbolTable0 = new SymbolTable(1543);
      // Undeclared exception!
      try { 
        jSONScanner0.scanSymbolUnQuoted(symbolTable0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal identifier : \u001Apos 0, json : 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("set");
      SymbolTable symbolTable0 = new SymbolTable(3);
      jSONScanner0.scanSymbol(symbolTable0);
      jSONScanner0.scanDouble('6');
      long long0 = jSONScanner0.longValue();
      assertTrue(jSONScanner0.isEOF());
      assertEquals(7298L, long0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("new");
      jSONScanner0.nextToken(118);
      SymbolTable symbolTable0 = new SymbolTable(922);
      jSONScanner0.scanSymbol(symbolTable0);
      assertEquals(20, jSONScanner0.token());
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'g';
      charArray0[1] = 'V';
      charArray0[2] = 'G';
      charArray0[3] = 'g';
      charArray0[4] = '#';
      charArray0[5] = 'c';
      charArray0[6] = 'E';
      charArray0[7] = '>';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArrayReader0, (-3311));
      jSONReaderScanner0.charArrayCompare(charArray0);
      assertEquals((-3311), jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("false");
      jSONScanner0.scanBoolean('9');
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar('9', (-1), '9');
      char[] charArray0 = new char[0];
      boolean boolean0 = jSONScanner0.matchField(charArray0);
      boolean boolean1 = JSONLexerBase.isWhitespace('y');
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("false");
      jSONScanner0.nextToken(21);
      jSONScanner0.getCalendar();
      // Undeclared exception!
      try { 
        jSONScanner0.decimalValue();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("flse");
      // Undeclared exception!
      try { 
        jSONScanner0.nextToken(31);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("_");
      jSONScanner0.getLocale();
      boolean boolean0 = jSONScanner0.isEnabled((-2676), 1);
      assertTrue(boolean0);
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(989, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("Set");
      jSONScanner0.nextToken(76);
      jSONScanner0.getCalendar();
      assertTrue(jSONScanner0.isEOF());
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("true");
      jSONScanner0.skipWhitespace();
      assertEquals(0, jSONScanner0.matchStat);
      
      jSONScanner0.scanString('0');
      jSONScanner0.longValue();
      jSONScanner0.resetStringPosition();
      assertEquals(989, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("syntax error, expect {, actual ");
      assertEquals(0, jSONScanner0.matchStat);
      
      int int0 = Calendar.DATE;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "syntax error, expect {, actual ");
      Class<String> class0 = String.class;
      SymbolTable symbolTable0 = new SymbolTable(5);
      jSONScanner0.scanEnum(class0, symbolTable0, 'X');
      assertEquals(989, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("|hiZz", 9);
      jSONReaderScanner0.scanType("E^5N:|L _Wo");
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      SymbolTable symbolTable0 = new SymbolTable(9);
      jSONReaderScanner0.scanSymbolWithSeperator(symbolTable0, 'X');
      assertEquals(9, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("");
      assertEquals(0, jSONScanner0.matchStat);
      
      Class<Object> class0 = Object.class;
      SymbolTable symbolTable0 = new SymbolTable(10);
      jSONScanner0.scanEnum(class0, symbolTable0, 'n');
      jSONScanner0.getCalendar();
      jSONScanner0.isEnabled(58);
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldBigInteger(charArray0);
      assertEquals(989, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("new");
      jSONScanner0.nextToken(4);
      jSONScanner0.getCalendar();
      jSONScanner0.resetStringPosition();
      assertEquals(9, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("*+$PbjS.9Iz>nvwdG[");
      jSONScanner0.nextToken(4);
      jSONScanner0.getCalendar();
      jSONScanner0.resetStringPosition();
      assertEquals('+', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("_");
      jSONScanner0.nextToken(13);
      jSONScanner0.getCalendar();
      // Undeclared exception!
      try { 
        jSONScanner0.decimalValue();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      String string0 = "Z=i*v%[ff";
      JSONScanner jSONScanner0 = new JSONScanner("Z=i*v%[ff");
      jSONScanner0.nextToken(19);
      jSONScanner0.getCalendar();
      // Undeclared exception!
      try { 
        jSONScanner0.decimalValue();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("_");
      jSONScanner0.nextToken(8);
      jSONScanner0.getCalendar();
      // Undeclared exception!
      try { 
        jSONScanner0.decimalValue();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("syntax error, expect {, actual ");
      jSONScanner0.isBlankInput();
      jSONScanner0.nextToken(9);
      jSONScanner0.getCalendar();
      // Undeclared exception!
      try { 
        jSONScanner0.scanFieldSymbol((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Set");
      JSONScanner jSONScanner0 = new JSONScanner("_v|v&~XS]_");
      jSONScanner0.isBlankInput();
      // Undeclared exception!
      try { 
        jSONScanner0.floatValue();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("DisableASM");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      jSONScanner0.token = (-752);
      // Undeclared exception!
      try { 
        jSONScanner0.scanSymbol((SymbolTable) null, '(');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed.str
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("new");
      jSONScanner0.scanSymbolWithSeperator((SymbolTable) null, '');
      // Undeclared exception!
      try { 
        jSONScanner0.scanSymbol((SymbolTable) null, '$');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed.str
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      int int0 = 125;
      JSONScanner jSONScanner0 = new JSONScanner("<S", 125);
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldUUID(charArray0);
      JSONScanner jSONScanner1 = null;
      try {
        jSONScanner1 = new JSONScanner(charArray0, 4);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("uwx<");
      JSONScanner jSONScanner0 = new JSONScanner("uwx<", 0);
      jSONScanner0.isEnabled(0, 58);
      jSONReaderScanner0.nextToken();
      assertEquals(18, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("uwx");
      jSONReaderScanner0.next();
      char[] charArray0 = new char[1];
      Feature feature0 = Feature.InitStringFieldAsEmpty;
      jSONReaderScanner0.config(feature0, false);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      charArray0[0] = 'M';
      jSONReaderScanner0.nextIdent();
      jSONReaderScanner0.pos = 8;
      // Undeclared exception!
      try { 
        jSONReaderScanner0.matchField2(charArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("new");
      char[] charArray0 = new char[0];
      jSONScanner0.matchField(charArray0);
      jSONScanner0.scanDecimal('6');
      jSONScanner0.scanBoolean('V');
      assertEquals(9, jSONScanner0.token());
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("new", (-1));
      jSONReaderScanner0.scanFieldIntArray(charArray0);
      jSONReaderScanner0.bytesValue();
      int int0 = jSONReaderScanner0.pos();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("3e&#?#c\"jh{ivn");
      jSONScanner0.nextToken(386);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("3e&#?#c\"jh{ivn");
      jSONReaderScanner0.scanDate('k');
      SymbolTable symbolTable0 = new SymbolTable(80);
      // Undeclared exception!
      try { 
        jSONScanner0.scanSymbol(symbolTable0, 'Y');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed.str
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      String string0 = "N\\ \\iV}$%t5_^9s*p";
      JSONScanner jSONScanner0 = new JSONScanner("N iV}$%t5_^9s*p");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("N iV}$%t5_^9s*p");
      char[] charArray0 = new char[3];
      charArray0[1] = 'Z';
      SymbolTable symbolTable0 = new SymbolTable(20);
      // Undeclared exception!
      try { 
        jSONScanner0.scanSymbol(symbolTable0, '8');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed.str
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("N iV}$%t5_^9s*p");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("N iV}$%t5_^9s*p");
      char[] charArray0 = new char[3];
      charArray0[1] = 'Z';
      charArray0[2] = '8';
      jSONScanner0.scanFieldFloatArray(charArray0);
      JSONScanner jSONScanner1 = new JSONScanner("N iV}$%t5_^9s*p", (-3776));
      jSONScanner0.nextToken();
      assertEquals(18, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("un)defined");
      jSONReaderScanner0.pos();
      char[] charArray0 = new char[7];
      charArray0[0] = 'R';
      charArray0[1] = 'g';
      charArray0[2] = 'U';
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 0);
      jSONScanner0.scanString();
      char char0 = '';
      jSONScanner0.scanFloat(char0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("EOF error");
      jSONScanner0.isRef();
      jSONScanner0.nextToken(550);
      jSONScanner0.putChar('D');
      assertEquals(1, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("N iV}$%t5_^9s*p");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("N iV}$%t5_^9s*p");
      long long0 = JSONLexerBase.MULTMIN_RADIX_TEN;
      // Undeclared exception!
      try { 
        jSONScanner0.scanString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed string : \u001A
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = 'z';
      charArray0[1] = '#';
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      charArray0[2] = 'C';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 5, 5);
      jSONReaderScanner0.scanFieldDouble(charArray0);
      char[] charArray1 = new char[3];
      jSONReaderScanner0.scanIdent();
      JSONScanner jSONScanner0 = new JSONScanner("null", 5);
      jSONScanner0.info();
      charArray1[0] = '#';
      charArray1[1] = 'z';
      charArray1[2] = 'C';
      jSONReaderScanner0.eofPos = 1921;
      jSONReaderScanner0.scanFieldDate(charArray1);
      jSONReaderScanner0.nextIdent();
      jSONReaderScanner0.charAt(5);
      jSONReaderScanner0.scanFieldUUID(charArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      JSONScanner jSONScanner0 = new JSONScanner("WriteNonStringValueAsString");
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldDouble(charArray0);
      jSONScanner0.scanNumber();
      assertEquals(2, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("un-defined");
      jSONScanner0.nextToken(84);
      int int0 = jSONScanner0.intValue();
      assertEquals('-', jSONScanner0.getCurrent());
      assertEquals(752, int0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("uwx<");
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      char[] charArray0 = new char[0];
      jSONReaderScanner0.scanFieldDecimal(charArray0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      
      JSONScanner jSONScanner0 = new JSONScanner("uwx<", (-140));
      jSONScanner0.nextToken(1);
      int int1 = jSONScanner0.intValue();
      assertEquals(7682, int1);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("7)9x$9!4-Qn");
      JSONScanner jSONScanner0 = new JSONScanner("7)9x$9!4-Qn");
      jSONScanner0.nextToken(30);
      jSONScanner0.nextToken(48);
      jSONScanner0.getCalendar();
      // Undeclared exception!
      try { 
        jSONScanner0.scanHex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal state. 9
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("uwx<");
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      char[] charArray0 = new char[0];
      jSONReaderScanner0.scanFieldDecimal(charArray0);
      Locale locale0 = Locale.JAPAN;
      locale0.getUnicodeLocaleKeys();
      jSONReaderScanner0.scanFieldDate(charArray0);
      jSONReaderScanner0.nextIdent();
      jSONReaderScanner0.charAt(34);
      jSONReaderScanner0.scanFieldUUID(charArray0);
      assertEquals(18, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("");
      jSONScanner0.intValue();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      int int0 = jSONScanner0.intValue();
      assertEquals(0, int0);
      
      int int1 = jSONScanner0.getFeatures();
      assertEquals(989, int1);
      assertEquals(0, jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("set");
      jSONScanner0.nextToken(15);
      jSONScanner0.scanNumber();
      assertEquals(3, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("( @)'N\"z=_");
      char[] charArray0 = new char[9];
      charArray0[0] = 'Z';
      charArray0[1] = 'C';
      charArray0[2] = ':';
      charArray0[3] = '@';
      charArray0[4] = '#';
      charArray0[5] = '_';
      charArray0[6] = '.';
      charArray0[7] = '#';
      charArray0[8] = 'v';
      jSONScanner0.scanFieldFloatArray(charArray0);
      jSONScanner0.nextToken(9);
      jSONScanner0.scanNumber();
      assertEquals(2, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("null");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      jSONScanner0.nextToken(0);
      jSONScanner0.scanNumber();
      assertEquals(2, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(" ]5(s=g&@]");
      jSONScanner0.nextToken(10);
      jSONScanner0.scanNumber();
      assertEquals(2, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("7)9x$9!4-Qn");
      jSONScanner0.scanNumber();
      assertEquals(2, jSONScanner0.token());
      
      jSONScanner0.decimalValue(false);
      int int0 = jSONScanner0.scanType("7)9x$9!4-Qn");
      assertEquals((-2), int0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("null");
      jSONReaderScanner0.scanDecimal('F');
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("8Jwy,");
      float float0 = jSONScanner0.scanFloat('D');
      assertEquals(8.0F, float0, 0.01F);
      
      jSONScanner0.scanBoolean('[');
      jSONScanner0.isRef();
      assertEquals(989, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("z");
      jSONScanner0.nextToken(7);
      jSONScanner0.scanNumber();
      assertEquals('\u001A', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("8Jwy,");
      SymbolTable symbolTable0 = new SymbolTable(160);
      jSONScanner0.scanSymbol(symbolTable0, '');
      assertEquals('\u001A', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      JSONScanner jSONScanner0 = new JSONScanner("springfox.documentation.spring.web.json.Json");
      jSONScanner0.next();
      char[] charArray0 = new char[0];
      SymbolTable symbolTable0 = new SymbolTable(83);
      jSONScanner0.scanSymbol(symbolTable0, 'p');
      jSONScanner0.scanFieldBigInteger(charArray0);
      jSONScanner0.scanFloat('');
      assertEquals('r', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Dc3hp");
      JSONScanner jSONScanner0 = new JSONScanner("n]QV");
      float float0 = jSONScanner0.scanFloat('D');
      assertEquals(0.0F, float0, 0.01F);
      assertEquals(989, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("3k^*]5S:jCqo:t.");
      Locale locale0 = Locale.UK;
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanDecimal(')');
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("8Jwy,");
      SymbolTable symbolTable0 = new SymbolTable(160);
      jSONScanner0.scanDecimal('^');
      SymbolTable symbolTable1 = new SymbolTable(92);
      long long0 = jSONScanner0.longValue();
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      String string0 = "h!jV+eTnpQgv=8S";
      int int0 = 7;
      char char0 = ':';
      char[] charArray0 = new char[3];
      charArray0[0] = ':';
      charArray0[1] = '\\';
      charArray0[2] = ':';
      // Undeclared exception!
      try { 
        JSONLexerBase.readString(charArray0, 839);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed.str.lit
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = '?';
      charArray0[1] = 'B';
      charArray0[2] = '\\';
      charArray0[3] = 'i';
      charArray0[4] = 'L';
      // Undeclared exception!
      try { 
        JSONLexerBase.readString(charArray0, 66);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed.str.lit
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("syntax error, expech {, actual ");
      JSONScanner jSONScanner1 = new JSONScanner("\u0000");
      jSONScanner1.nextToken(4);
      assertEquals(20, jSONScanner1.token());
      
      char[] charArray0 = new char[5];
      charArray0[0] = '#';
      charArray0[1] = 'D';
      charArray0[2] = '/';
      charArray0[3] = 'n';
      charArray0[4] = '$';
      JSONScanner jSONScanner2 = new JSONScanner(charArray0, 0, 4);
      int int0 = jSONScanner2.intValue();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("");
      jSONScanner0.nextToken(14);
      jSONScanner0.scanNumber();
      assertEquals(2, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("x)m~F:");
      // Undeclared exception!
      try { 
        jSONScanner0.nextToken(97);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal state. )
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("+M24t6;nk<hhFAt2");
      jSONScanner0.getCalendar();
      jSONScanner0.nextIdent();
      assertEquals(2, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("scan false error");
      jSONScanner0.nextToken(2);
      jSONScanner0.isRef();
      JSONLexerBase.isWhitespace('T');
      // Undeclared exception!
      try { 
        jSONScanner0.numberString();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("null");
      jSONScanner0.scanLong('(');
      SymbolTable symbolTable0 = new SymbolTable(25);
      jSONScanner0.scanSymbol(symbolTable0);
      jSONScanner0.nextToken((-1));
      jSONScanner0.scanNumber();
      assertEquals('\u001A', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(" ](s=g&@]");
      jSONScanner0.scanISO8601DateIfMatch(false);
      char[] charArray0 = new char[7];
      charArray0[0] = 'G';
      charArray0[1] = 'm';
      charArray0[2] = 'Y';
      charArray0[3] = 'C';
      charArray0[4] = '>';
      charArray0[5] = 'e';
      charArray0[6] = 'R';
      jSONScanner0.matchField2(charArray0);
      jSONScanner0.nextToken(10);
      jSONScanner0.scanNumber();
      assertEquals(2, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("undefined");
      jSONScanner0.nextToken(16);
      // Undeclared exception!
      try { 
        jSONScanner0.intValue();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // undefined
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = 'a';
      charArray0[1] = '4';
      charArray0[2] = 'D';
      charArray0[3] = 'y';
      charArray0[4] = 'c';
      charArray0[5] = 'f';
      charArray0[6] = 'Y';
      charArray0[7] = '$';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 1161);
      jSONReaderScanner0.scanLong('9');
      jSONReaderScanner0.scanFieldUUID(charArray0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(".");
      jSONScanner0.scanNumber();
      assertEquals(3, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("8Jwy,");
      jSONScanner0.scanNumber();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      jSONScanner0.integerValue();
      int int0 = Calendar.JUNE;
      // Undeclared exception!
      try { 
        jSONScanner0.scanHex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal state. J
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("new");
      jSONScanner0.nextIdent();
      jSONScanner0.integerValue();
      jSONScanner0.intValue();
      jSONScanner0.nextToken();
      jSONScanner0.indexOf('z', 44);
      // Undeclared exception!
      try { 
        jSONScanner0.nextTokenWithColon((-1));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - \u001A, info : pos 0, json : new
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'g';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 255);
      Class<Feature> class0 = Feature.class;
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFieldStringArray(charArray0, class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // com.alibaba.fastjson.parser.Feature
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("new");
      int int0 = 7;
      char[] charArray0 = new char[9];
      charArray0[0] = 'u';
      charArray0[1] = 'V';
      charArray0[2] = 'E';
      charArray0[3] = ':';
      charArray0[4] = '1';
      charArray0[5] = 'D';
      charArray0[6] = '\\';
      charArray0[7] = '|';
      charArray0[8] = 'p';
      // Undeclared exception!
      try { 
        JSONLexerBase.readString(charArray0, 7);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed.str.lit
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("new");
      jSONScanner0.scanSymbolWithSeperator((SymbolTable) null, '');
      jSONScanner0.nextToken(7);
      // Undeclared exception!
      try { 
        jSONScanner0.floatValue();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("null");
      JSONScanner jSONScanner0 = new JSONScanner("TreeSet", 44);
      jSONScanner0.nextToken(986);
      assertTrue(jSONScanner0.isEOF());
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("|hizz");
      jSONScanner0.nextToken(611);
      jSONScanner0.scanNumber();
      assertEquals(0, jSONScanner0.matchStat);
      
      char[] charArray0 = new char[4];
      charArray0[0] = '1';
      charArray0[1] = ' ';
      charArray0[2] = '!';
      charArray0[3] = 'q';
      Class<ChronoLocalDate> class0 = ChronoLocalDate.class;
      jSONScanner0.scanFieldStringArray(charArray0, class0);
      jSONScanner0.getLocale();
      Number number0 = jSONScanner0.integerValue();
      assertEquals(0, number0);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("null", 102);
      jSONScanner0.bytesValue();
      char[] charArray0 = new char[7];
      charArray0[0] = ';';
      charArray0[1] = '<';
      charArray0[2] = '^';
      charArray0[3] = '0';
      charArray0[5] = '\\';
      jSONScanner0.scanUUID('Y');
      charArray0[6] = '_';
      Class<MockJapaneseDate> class0 = MockJapaneseDate.class;
      jSONScanner0.scanFieldStringArray(charArray0, class0);
      jSONScanner0.scanStringArray((Collection<String>) null, '{');
      assertEquals(102, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("null", 102);
      jSONScanner0.bytesValue();
      jSONScanner0.scanUUID('Y');
      // Undeclared exception!
      try { 
        jSONScanner0.scanFalse();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("true");
      char char0 = '!';
      jSONScanner0.scanString('!');
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(":q@B3O`uT", (-1));
      int int0 = 31;
      jSONReaderScanner0.nextToken(31);
      SymbolTable symbolTable0 = new SymbolTable(93);
      jSONScanner0.scanSymbolUnQuoted(symbolTable0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanTrue();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse true
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("new");
      jSONScanner0.scanNumber();
      assertEquals(2, jSONScanner0.token());
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("Set");
      jSONReaderScanner0.bytesValue();
      jSONReaderScanner0.scanDouble('D');
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = 'W';
      FileSystemHandling.shouldAllThrowIOExceptions();
      charArray0[5] = '8';
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 70, 386);
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(charArray0, 45);
      jSONReaderScanner1.scanFieldDate(charArray0);
      JSONScanner.checkDate('H', '-', 'n', '^', '|', 'W', (-1), 1645);
      jSONReaderScanner1.scanIdent();
      assertEquals((-1), jSONReaderScanner1.matchStat);
      
      char[] charArray1 = new char[1];
      charArray1[0] = 'W';
      jSONReaderScanner0.scanFieldLong(charArray1);
      assertEquals(386, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("undefined");
      jSONScanner0.scanBoolean('#');
      jSONScanner0.isRef();
      jSONScanner0.scanUUID('Y');
      char[] charArray0 = new char[4];
      charArray0[0] = '#';
      charArray0[1] = '#';
      charArray0[2] = 'Y';
      charArray0[3] = 'Y';
      Class<MockHijrahDate> class0 = MockHijrahDate.class;
      jSONScanner0.scanFieldStringArray(charArray0, class0);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 8192);
      double double0 = jSONReaderScanner0.scanDouble('2');
      assertEquals(0.0, double0, 0.01);
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("new");
      jSONScanner0.scanNumber();
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("Set");
      jSONScanner0.scanUUID('Y');
      JSONScanner jSONScanner1 = new JSONScanner("new", 2060);
      char[] charArray0 = new char[7];
      charArray0[0] = 'D';
      charArray0[1] = '_';
      charArray0[2] = 'Y';
      charArray0[3] = 'Y';
      charArray0[4] = 'Y';
      charArray0[5] = 'Y';
      charArray0[6] = 'Y';
      Class<SequenceInputStream> class0 = SequenceInputStream.class;
      jSONScanner1.scanFieldStringArray(charArray0, class0);
      jSONScanner0.scanStringArray((Collection<String>) null, 'D');
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("-e#");
      char[] charArray0 = new char[5];
      charArray0[0] = 'e';
      charArray0[1] = '|';
      charArray0[2] = 'G';
      charArray0[3] = 'G';
      jSONScanner0.scanFieldFloat(charArray0);
      jSONScanner0.nextToken((-1532));
      int int0 = jSONScanner0.intValue();
      assertEquals((-2), jSONScanner0.matchStat);
      assertEquals((-53), int0);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("H4");
      jSONScanner0.nextToken(19);
      SymbolTable symbolTable0 = new SymbolTable(985);
      // Undeclared exception!
      try { 
        jSONScanner0.scanSymbolUnQuoted(symbolTable0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal identifier : 4pos 0, json : H4
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("8Jwy,");
      assertEquals(989, jSONScanner0.getFeatures());
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("8Jwy,", 0);
      double double0 = jSONReaderScanner0.scanDouble('S');
      assertEquals(8.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("null", 102);
      byte[] byteArray0 = jSONScanner0.bytesValue();
      char[] charArray0 = new char[7];
      charArray0[0] = ';';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 2);
      jSONReaderScanner0.nextToken(907);
      SymbolTable symbolTable0 = new SymbolTable(45);
      jSONScanner0.scanSymbolUnQuoted(symbolTable0);
      SymbolTable symbolTable1 = new SymbolTable(907);
      jSONScanner0.scanSymbolWithSeperator(symbolTable1, '.');
      jSONScanner0.scanNumber();
      TimeZone timeZone0 = TimeZone.getTimeZone("z");
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      jSONReaderScanner0.setTimeZone(timeZone0);
      // Undeclared exception!
      try { 
        jSONScanner0.copyTo((-4082), 6, charArray0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("null");
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldFloat(charArray0);
      jSONScanner0.scanFieldDecimal(charArray0);
      int int0 = Calendar.DATE;
      jSONScanner0.nextToken((-2429));
      boolean boolean0 = jSONScanner0.isEOF();
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("new");
      char[] charArray0 = new char[0];
      jSONScanner0.isRef();
      jSONScanner0.scanFieldFloatArray2(charArray0);
      jSONScanner0.scanFieldString(charArray0);
      jSONScanner0.scanFieldFloat(charArray0);
      jSONScanner0.scanFieldDecimal(charArray0);
      // Undeclared exception!
      try { 
        jSONScanner0.sub_chars(84, (-175));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("null");
      JSONScanner jSONScanner0 = new JSONScanner("null");
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldFloat(charArray0);
      jSONScanner0.scanFieldDecimal(charArray0);
      jSONScanner0.sub_chars(0, 0);
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("new");
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldFloatArray2(charArray0);
      assertEquals((-2), jSONScanner0.matchStat);
      
      jSONScanner0.scanFieldString(charArray0);
      jSONScanner0.scanFieldFloat(charArray0);
      jSONScanner0.intValue();
      jSONScanner0.lexError("new", (Object[]) null);
      assertEquals(989, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("H4");
      jSONScanner0.nextToken(19);
      jSONScanner0.nextToken(117);
      float float0 = jSONScanner0.floatValue();
      assertEquals(1, jSONScanner0.pos());
      assertEquals(4.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("new");
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldFloatArray2(charArray0);
      jSONScanner0.scanFieldString(charArray0);
      jSONScanner0.scanFieldBigInteger(charArray0);
      jSONScanner0.nextToken();
      jSONScanner0.scanString();
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("new");
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldFloatArray2(charArray0);
      jSONScanner0.scanFieldString(charArray0);
      jSONScanner0.scanFieldBigInteger(charArray0);
      jSONScanner0.nextToken(8);
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("null", 102);
      jSONScanner0.bytesValue();
      char[] charArray0 = new char[7];
      charArray0[0] = ';';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("null", 0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      jSONReaderScanner0.scanDouble('|');
      assertEquals(0, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("null");
      char[] charArray0 = new char[20];
      charArray0[0] = '\\';
      charArray0[1] = 'l';
      charArray0[2] = '\\';
      charArray0[3] = '\\';
      charArray0[5] = '\\';
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 0);
      jSONScanner0.scanUUID(':');
      jSONReaderScanner0.scanDate('A');
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanHex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal state. n
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("i#;r$+(RM");
      char[] charArray0 = new char[3];
      charArray0[0] = 'u';
      charArray0[1] = 'D';
      charArray0[2] = 'E';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 0);
      jSONReaderScanner0.scanInt('D');
      jSONReaderScanner0.nextToken(68);
      SymbolTable symbolTable0 = null;
      try {
        symbolTable0 = new SymbolTable(0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("'ni%%hUeg6");
      jSONReaderScanner0.next();
      jSONReaderScanner0.scanString('n');
      char[] charArray0 = new char[8];
      charArray0[0] = 'J';
      charArray0[1] = 'I';
      charArray0[2] = 'n';
      charArray0[4] = '=';
      charArray0[5] = 'n';
      charArray0[6] = '=';
      jSONReaderScanner0.scanFieldLong(charArray0);
      charArray0[7] = 'n';
      boolean boolean0 = jSONReaderScanner0.scanFieldBoolean(charArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("EOF Wrror");
      jSONScanner0.nextToken(18);
      jSONScanner0.nextToken(999999);
      // Undeclared exception!
      try { 
        jSONScanner0.floatValue();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("null");
      char[] charArray0 = new char[13];
      char char0 = '4';
      charArray0[0] = '4';
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFieldStringArray(charArray0, 6, (SymbolTable) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("null");
      JSONScanner jSONScanner0 = new JSONScanner("null", 0);
      assertEquals(0, jSONScanner0.matchStat);
      
      jSONScanner0.scanFloat(':');
      jSONScanner0.skipWhitespace();
      assertEquals(0, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("H4");
      JSONScanner jSONScanner1 = new JSONScanner("!m]");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("H4", (-3637));
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)55;
      byteArray0[1] = (byte)42;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)6;
      byteArray0[4] = (byte)116;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      InputStreamReader inputStreamReader0 = new InputStreamReader(byteArrayInputStream0);
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(inputStreamReader0);
      double double0 = jSONReaderScanner1.scanDouble('=');
      assertEquals(7.0, double0, 0.01);
      assertEquals(989, jSONReaderScanner1.getFeatures());
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("springfox.documentation.spring.web.json.Json");
      jSONScanner0.pos = (-3246);
      jSONScanner0.nextIdent();
      jSONScanner0.longValue();
      jSONScanner0.scanNumber();
      assertEquals('d', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("null");
      JSONScanner jSONScanner0 = new JSONScanner("null");
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldBigInteger(charArray0);
      JSONScanner jSONScanner1 = new JSONScanner("null", (-1));
      jSONScanner1.nextToken(0);
      assertTrue(jSONScanner1.isEOF());
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("null");
      BigDecimal bigDecimal0 = new BigDecimal(0);
      SymbolTable symbolTable0 = new SymbolTable(548);
      JSONScanner jSONScanner0 = new JSONScanner("null");
      FileSystemHandling.shouldAllThrowIOExceptions();
      Class<InputStream> class0 = InputStream.class;
      jSONScanner0.scanEnum(class0, symbolTable0, 'F');
      jSONScanner0.close();
      jSONScanner0.nextToken(0);
      // Undeclared exception!
      try { 
        jSONScanner0.decimalValue();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("null", 102);
      jSONScanner0.bytesValue();
      char[] charArray0 = new char[6];
      charArray0[0] = '\\';
      charArray0[1] = 'J';
      charArray0[2] = 'R';
      charArray0[3] = '2';
      charArray0[4] = 's';
      charArray0[5] = 'Y';
      jSONScanner0.scanFieldDecimal(charArray0);
      assertEquals((-2), jSONScanner0.matchStat);
      
      jSONScanner0.scanLong('{');
      jSONScanner0.scanFloat('2');
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("|uc#");
      Locale locale0 = Locale.UK;
      Locale locale1 = Locale.CHINESE;
      Set<String> set0 = locale1.getUnicodeLocaleKeys();
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("null", 23);
      jSONReaderScanner1.scanStringArray(set0, 'Y');
      JSONReaderScanner jSONReaderScanner2 = new JSONReaderScanner("null");
      jSONReaderScanner2.next();
      SymbolTable symbolTable0 = new SymbolTable(91);
      Class<Feature> class0 = Feature.class;
      jSONScanner0.scanEnum(class0, symbolTable0, '9');
      assertEquals(102, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("unclosed single-quote string", (-3451));
      char[] charArray0 = new char[5];
      charArray0[0] = 'G';
      charArray0[2] = 'G';
      charArray0[3] = 'G';
      charArray0[4] = 'G';
      jSONScanner0.scanFieldFloat(charArray0);
      jSONScanner0.nextToken((int) '\u0000');
      jSONScanner0.intValue();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-2), 'G', 'G', 15, 'G', 6);
      jSONScanner0.skipWhitespace();
      assertEquals((-2), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("i#;r$+(RM");
      char[] charArray0 = new char[3];
      charArray0[0] = 'u';
      charArray0[2] = 'U';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("i#;r$+(RM", 'u');
      jSONReaderScanner0.scanInt('D');
      jSONReaderScanner0.nextToken((-1));
      SymbolTable symbolTable0 = null;
      try {
        symbolTable0 = new SymbolTable(0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("H4");
      jSONScanner0.nextToken(19);
      jSONScanner0.nextToken(117);
      assertEquals(2, jSONScanner0.token());
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'n';
      charArray0[1] = '&';
      charArray0[2] = 'I';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 19, 117);
      jSONReaderScanner0.scanDecimal('>');
      assertEquals(117, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("null");
      JSONScanner jSONScanner0 = new JSONScanner("e'4'(AZi6O$I=b,3i_");
      jSONScanner0.nextToken(563);
      jSONScanner0.nextToken(1);
      assertEquals(4, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("null");
      JSONScanner jSONScanner0 = new JSONScanner("null");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JSONScanner jSONScanner1 = new JSONScanner("mLW", 1063);
      jSONScanner0.nextToken(3);
      jSONScanner0.intValue();
      assertEquals(8, jSONScanner0.token());
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("mLW", 0);
      jSONReaderScanner1.stringVal();
      int int0 = jSONReaderScanner1.scanType("%F%5UIpW-v");
      assertEquals((-2), int0);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("null");
      jSONScanner0.scanString('F');
      // Undeclared exception!
      try { 
        jSONScanner0.scanFalse();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("S{/=-1m0brCR>");
      JSONScanner jSONScanner0 = new JSONScanner("S{/=-1m0brCR>", 0);
      jSONScanner0.nextToken((-291));
      jSONScanner0.nextToken(44);
      assertEquals('/', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("!Cct/]23*qM8-`", (-2727));
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("illegal.char");
      TimeZone timeZone0 = TimeZone.getDefault();
      jSONReaderScanner0.timeZone = timeZone0;
      jSONReaderScanner0.nextToken(1685);
      JSONScanner jSONScanner1 = new JSONScanner("e'4'(AZi6O$I=b,3i_");
      jSONScanner0.nextToken(0);
      jSONScanner0.nextToken(20);
      assertEquals(1, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("8Jwy,");
      char[] charArray0 = new char[5];
      charArray0[0] = 'D';
      char[] charArray1 = new char[8];
      charArray1[0] = '9';
      charArray1[1] = 'D';
      charArray1[2] = '2';
      charArray1[3] = '2';
      charArray1[4] = 'D';
      charArray1[5] = 'D';
      charArray1[6] = 'O';
      charArray1[7] = 'D';
      jSONScanner0.scanFieldBigInteger(charArray1);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray1, 1997);
      jSONReaderScanner0.scanDate('D');
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray1);
      LineNumberReader lineNumberReader0 = new LineNumberReader(charArrayReader0);
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(lineNumberReader0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)34;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 1997, (-3705));
      Class<Integer> class0 = Integer.class;
      JSONReaderScanner jSONReaderScanner2 = new JSONReaderScanner("8Jwy,", (-1417));
      jSONReaderScanner2.scanFieldStringArray(charArray0, class0);
      // Undeclared exception!
      try { 
        jSONReaderScanner2.charAt((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      char char0 = 'u';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("null", (-808));
      jSONReaderScanner0.scanInt('u');
      int int0 = 403;
      char[] charArray0 = new char[7];
      charArray0[0] = 'u';
      charArray0[1] = 'u';
      charArray0[2] = 'u';
      charArray0[3] = 'u';
      charArray0[4] = 'u';
      charArray0[5] = 'u';
      charArray0[6] = '`';
      jSONReaderScanner0.scanFieldString(charArray0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextToken(403);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse null
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("null");
      jSONReaderScanner0.scanLong('/');
      JSONScanner jSONScanner0 = new JSONScanner("null");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JSONScanner jSONScanner1 = new JSONScanner("mLW", 1063);
      jSONReaderScanner0.scanDate('6');
      char[] charArray0 = new char[3];
      charArray0[0] = '6';
      charArray0[1] = '6';
      charArray0[2] = '6';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      LineNumberReader lineNumberReader0 = new LineNumberReader(charArrayReader0);
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(charArrayReader0);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)82;
      byteArray0[1] = (byte)51;
      JSONScanner.checkDate('6', '}', 'v', '6', 'Y', '6', (byte)82, 2248);
      jSONReaderScanner1.scanIdent();
      jSONReaderScanner0.scanFieldLong(charArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      char[] charArray0 = new char[18];
      charArray0[0] = 'G';
      charArray0[1] = '\\';
      charArray0[2] = 'M';
      charArray0[9] = 'D';
      charArray0[4] = '!';
      charArray0[5] = '-';
      charArray0[6] = 'd';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 611);
      jSONReaderScanner0.scanFieldIntArray(charArray0);
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      jSONReaderScanner0.scanStringArray(linkedHashSet0, 'M');
      char char0 = Locale.PRIVATE_USE_EXTENSION;
      SymbolTable symbolTable0 = new SymbolTable(1860);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed string : M
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("!Cct/]23*qM8-`", (-2727));
      jSONScanner0.setToken(4915);
      char[] charArray0 = new char[6];
      charArray0[0] = 'Y';
      charArray0[1] = 'C';
      charArray0[2] = 'j';
      charArray0[3] = 'C';
      charArray0[4] = 'C';
      charArray0[5] = 'C';
      jSONScanner0.scanFieldDecimal(charArray0);
      jSONScanner0.scanLong('C');
      assertEquals(4915, jSONScanner0.token());
      
      JSONScanner jSONScanner1 = new JSONScanner("!Cct/]23*qM8-`", (-1087));
      jSONScanner1.scanFloat('7');
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("!Cct/]23*qM8-`");
      Locale locale0 = Locale.UK;
      locale0.getUnicodeLocaleKeys();
      jSONReaderScanner0.next();
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("nul");
      jSONReaderScanner1.scanDouble('@');
      assertEquals(989, jSONReaderScanner1.getFeatures());
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("63/(7j%]*3m4U}fQ");
      char[] charArray0 = new char[0];
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 0);
      jSONScanner0.nextToken(0);
      assertEquals(20, jSONScanner0.token());
      
      JSONScanner jSONScanner1 = new JSONScanner("63/(7j%]*3m4U}fQ", 44);
      jSONScanner1.scanFieldUUID(charArray0);
      jSONScanner1.scanFieldBigInteger(charArray0);
      assertEquals(44, jSONScanner1.getFeatures());
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("null");
      jSONReaderScanner0.scanLong('/');
      jSONReaderScanner0.scanInt('-');
      int int0 = 403;
      char[] charArray0 = new char[2];
      charArray0[0] = '/';
      charArray0[1] = '`';
      jSONReaderScanner0.scanFieldString(charArray0);
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(charArray0, 85);
      // Undeclared exception!
      try { 
        jSONReaderScanner1.nextToken(1147);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid comment
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = 'W';
      FileSystemHandling.shouldAllThrowIOExceptions();
      charArray0[5] = '8';
      JSONScanner jSONScanner0 = new JSONScanner("0", 386);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("0");
      jSONReaderScanner0.scanDate('W');
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      LineNumberReader lineNumberReader0 = new LineNumberReader(charArrayReader0);
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(charArrayReader0);
      int int0 = 2248;
      JSONScanner.checkDate(':', ':', '}', 'Y', 'v', 'Y', 660, (byte)51);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanIdent();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONReaderScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = 'W';
      charArray0[5] = '8';
      JSONScanner jSONScanner0 = new JSONScanner("0", 386);
      jSONScanner0.scanFloat('u');
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("0");
      Locale locale0 = Locale.UK;
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanDecimal('v');
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = 'W';
      FileSystemHandling.shouldAllThrowIOExceptions();
      charArray0[5] = '8';
      JSONScanner jSONScanner0 = new JSONScanner("0", 386);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("0");
      jSONReaderScanner0.scanInt('8');
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("0");
      jSONReaderScanner1.nextToken(119);
      SymbolTable symbolTable0 = new SymbolTable(403);
      // Undeclared exception!
      try { 
        jSONScanner0.skipComment();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid comment
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = 'W';
      FileSystemHandling.shouldAllThrowIOExceptions();
      charArray0[5] = '8';
      JSONScanner jSONScanner0 = new JSONScanner("0", 386);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("0");
      jSONReaderScanner0.scanInt('8');
      jSONScanner0.nextToken((-3053));
      assertTrue(jSONScanner0.isEOF());
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("63/(7j%]*3m4U}fQ");
      char[] charArray0 = new char[0];
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 0);
      jSONScanner0.nextToken(0);
      JSONScanner jSONScanner1 = new JSONScanner("63/(7j%]*3m4U}fQ", 44);
      SymbolTable symbolTable0 = new SymbolTable(4360);
      // Undeclared exception!
      try { 
        jSONScanner1.scanSymbol(symbolTable0, 'q');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed.str
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("S");
      jSONScanner0.scanNumber();
      jSONScanner0.integerValue();
      jSONScanner0.token();
      assertEquals(2, jSONScanner0.token());
      
      JSONScanner jSONScanner1 = new JSONScanner("S", 13);
      jSONScanner1.nextToken(13);
      assertEquals(18, jSONScanner1.token());
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("-e#");
      char[] charArray0 = new char[5];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("-e#");
      jSONReaderScanner0.scanDate('u');
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      LineNumberReader lineNumberReader0 = new LineNumberReader(charArrayReader0);
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(charArrayReader0);
      JSONScanner.checkDate('Y', 'Y', 'v', 'Q', 'a', 'Q', (-935), 0);
      jSONReaderScanner1.scanIdent();
      JSONReaderScanner jSONReaderScanner2 = new JSONReaderScanner(charArray0, (byte)51, 90);
      jSONReaderScanner1.scanFieldLong(charArray0);
      JSONReaderScanner jSONReaderScanner3 = new JSONReaderScanner("-e#", (byte)51);
      // Undeclared exception!
      try { 
        jSONReaderScanner3.nextTokenWithChar('^');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match ^ - -, info : 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("null");
      jSONReaderScanner0.scanLong('/');
      jSONReaderScanner0.scanInt('-');
      char[] charArray0 = new char[2];
      charArray0[0] = '/';
      charArray0[1] = '`';
      jSONReaderScanner0.scanFieldString(charArray0);
      jSONReaderScanner0.scanDouble('G');
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(charArray0, 0);
      char[] charArray1 = new char[2];
      charArray1[0] = '`';
      charArray1[1] = '/';
      jSONReaderScanner1.scanFieldDate(charArray1);
      ByteArrayInputStream byteArrayInputStream0 = null;
      try {
        byteArrayInputStream0 = new ByteArrayInputStream((byte[]) null, (-3322), 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("null");
      jSONReaderScanner0.scanLong('/');
      jSONReaderScanner0.scanInt('-');
      char[] charArray0 = new char[2];
      charArray0[0] = '/';
      charArray0[1] = '`';
      jSONReaderScanner0.scanString('-');
      jSONReaderScanner0.scanFieldString(charArray0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextToken(1147);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse new
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("null");
      JSONScanner jSONScanner0 = new JSONScanner("null");
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldFloat(charArray0);
      jSONReaderScanner0.scanFieldDouble(charArray0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      
      jSONScanner0.scanFieldDecimal(charArray0);
      int int0 = Calendar.DATE;
      jSONReaderScanner0.scanDecimal('k');
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("8Jwy,");
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) jSONScanner0;
      jSONScanner0.lexError("error parse null", objectArray0);
      SymbolTable symbolTable0 = new SymbolTable(160);
      SymbolTable symbolTable1 = new SymbolTable(554);
      // Undeclared exception!
      try { 
        jSONScanner0.scanSymbolUnQuoted(symbolTable1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal identifier : 8pos 0, json : 8Jwy,
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("null");
      JSONScanner jSONScanner0 = new JSONScanner("null");
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldFloat(charArray0);
      assertEquals((-1), jSONScanner0.matchStat);
      
      JSONScanner jSONScanner1 = new JSONScanner("6", 44);
      jSONScanner0.scanFieldUUID(charArray0);
      jSONScanner0.scanFieldBigInteger(charArray0);
      assertEquals(989, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = 'y';
      charArray0[1] = '.';
      charArray0[2] = 'd';
      charArray0[3] = 'S';
      charArray0[4] = '%';
      charArray0[5] = '!';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 'y');
      jSONReaderScanner0.scanFieldInt(charArray0);
      jSONReaderScanner0.close();
      assertEquals((-1), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = 'y';
      charArray0[1] = '.';
      charArray0[2] = 'd';
      charArray0[3] = 'S';
      charArray0[4] = '%';
      charArray0[5] = '!';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 999999999);
      jSONReaderScanner0.scanFieldInt(charArray0);
      jSONReaderScanner0.close();
      assertEquals((-1), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("null");
      JSONScanner jSONScanner0 = new JSONScanner("null");
      char[] charArray0 = new char[0];
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      LineNumberReader lineNumberReader0 = new LineNumberReader(charArrayReader0);
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(charArrayReader0);
      JSONScanner.checkDate('W', 'W', 'e', ' ', 'Y', '', 0, 0);
      jSONReaderScanner1.scanIdent();
      jSONReaderScanner0.scanFieldLong(charArray0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      char[] charArray0 = new char[9];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 17);
      jSONReaderScanner0.scanFieldString(charArray0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      
      jSONReaderScanner0.scanString('(');
      jSONReaderScanner0.close();
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      char[] charArray0 = new char[3];
      charArray0[0] = 'W';
      charArray0[1] = '8';
      charArray0[2] = '8';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 75);
      jSONReaderScanner0.scanFieldString(charArray0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      
      JSONScanner jSONScanner0 = new JSONScanner(".19-7mn", (-1));
      SymbolTable symbolTable0 = new SymbolTable(75);
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(charArray0, 75, 2815);
      JSONReaderScanner jSONReaderScanner2 = new JSONReaderScanner("heWzil\"82Y8");
      jSONReaderScanner2.scanString();
      assertEquals(989, jSONReaderScanner2.getFeatures());
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("null");
      JSONScanner jSONScanner0 = new JSONScanner("HZYc:");
      jSONScanner0.nextToken(3254);
      jSONScanner0.scanDecimal('P');
      jSONScanner0.nextToken(6);
      ZoneId.getAvailableZoneIds();
      char[] charArray0 = new char[3];
      charArray0[0] = ']';
      charArray0[1] = 'P';
      charArray0[2] = ']';
      JSONScanner jSONScanner1 = null;
      try {
        jSONScanner1 = new JSONScanner(charArray0, (-1));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("63/(7j%]*3m4U}fQ");
      char[] charArray0 = new char[0];
      JSONScanner jSONScanner0 = new JSONScanner("!a%qS <TQGw[3Ebgu", 2755);
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("!a%qS <TQGw[3Ebgu");
      jSONReaderScanner1.scanFieldUUID(charArray0);
      jSONReaderScanner1.scanDate(':');
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      LineNumberReader lineNumberReader0 = new LineNumberReader(charArrayReader0);
      JSONReaderScanner jSONReaderScanner2 = new JSONReaderScanner(lineNumberReader0);
      JSONScanner.checkDate('a', ':', 'a', 'a', 's', 'a', ':', 12);
      jSONReaderScanner2.scanIdent();
      JSONReaderScanner jSONReaderScanner3 = new JSONReaderScanner(charArray0, 0, 3);
      jSONReaderScanner0.scanFieldLong(charArray0);
      JSONReaderScanner jSONReaderScanner4 = new JSONReaderScanner(charArrayReader0, 12);
      // Undeclared exception!
      try { 
        jSONReaderScanner4.nextTokenWithChar('a');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match a - \u0000, info : 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("Di|\\%A1rpqU< q.");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("Di|\\%A1rpqU< q.", 123);
      SymbolTable symbolTable0 = new SymbolTable(125);
      SymbolTable symbolTable1 = new SymbolTable(78);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed string : %
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("3e&#?#c\"jh{ivn");
      char[] charArray0 = new char[5];
      charArray0[2] = '4';
      charArray0[3] = 'u';
      charArray0[4] = 'E';
      int int0 = (-176);
      JSONScanner jSONScanner1 = new JSONScanner(charArray0, 0, (-176));
      jSONScanner1.nextToken((-176));
      // Undeclared exception!
      try { 
        jSONScanner0.scanDecimal('N');
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("3e&#?#c\"jh{ivn");
      char[] charArray0 = new char[5];
      char char0 = '4';
      charArray0[2] = '4';
      charArray0[3] = 'u';
      charArray0[4] = 'E';
      int int0 = (-176);
      JSONScanner jSONScanner1 = new JSONScanner(charArray0, 0, (-176));
      jSONScanner1.nextToken((-176));
      // Undeclared exception!
      try { 
        jSONScanner0.scanDecimal('N');
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("rp2@>1%;");
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 0, 44);
      jSONReaderScanner0.putChar('e');
      jSONReaderScanner0.nextToken(44);
      Class<Object> class0 = Object.class;
      jSONReaderScanner0.scanFieldStringArray(charArray0, class0);
      jSONReaderScanner0.scanDecimal('a');
      long long0 = JSONLexerBase.MULTMIN_RADIX_TEN;
      assertEquals((-922337203685477580L), long0);
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("new");
      int int0 = 7;
      char[] charArray0 = new char[9];
      charArray0[0] = 'u';
      charArray0[1] = 'V';
      charArray0[2] = 'E';
      charArray0[3] = ':';
      charArray0[4] = 'E';
      charArray0[5] = 'D';
      charArray0[6] = '\\';
      charArray0[7] = 'D';
      charArray0[8] = 'p';
      // Undeclared exception!
      try { 
        JSONLexerBase.readString(charArray0, 7);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed.str.lit
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("new");
      int int0 = 7;
      char[] charArray0 = new char[9];
      charArray0[0] = 'u';
      charArray0[1] = 'V';
      charArray0[2] = 'V';
      char char0 = ':';
      charArray0[3] = ':';
      charArray0[4] = 'V';
      charArray0[5] = 'V';
      charArray0[6] = '\\';
      charArray0[7] = 'V';
      charArray0[8] = 'p';
      // Undeclared exception!
      try { 
        JSONLexerBase.readString(charArray0, 7);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed.str.lit
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      String string0 = "h!jV+eTnpQgv=8S";
      int int0 = 7;
      char[] charArray0 = new char[3];
      charArray0[0] = ':';
      charArray0[1] = '\\';
      charArray0[2] = ':';
      // Undeclared exception!
      try { 
        JSONLexerBase.readString(charArray0, 839);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed.str.lit
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("null");
      JSONScanner jSONScanner0 = new JSONScanner("A8RxeX\"");
      char[] charArray0 = new char[0];
      int int0 = 11;
      jSONScanner0.nextToken(11);
      jSONScanner0.intValue();
      SymbolTable symbolTable0 = new SymbolTable(4903);
      // Undeclared exception!
      try { 
        jSONScanner0.scanSymbol(symbolTable0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal identifier : 8pos 0, json : A8RxeX\"
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("-e#");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("-e#");
      jSONScanner0.scanDecimal('u');
      jSONScanner0.nextToken(2097);
      ZoneId.getAvailableZoneIds();
      jSONScanner0.nextToken(135);
      SymbolTable symbolTable0 = new SymbolTable(19);
      // Undeclared exception!
      try { 
        jSONScanner0.scanSymbolUnQuoted(symbolTable0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal identifier : \u001Apos 3, json : -e#
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("Di|\\%A1rpqU< q.");
      jSONScanner0.scanString('M');
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("Di|\\%A1rpqU< q.", 123);
      char[] charArray0 = new char[0];
      jSONReaderScanner0.scanFieldString(charArray0);
      jSONReaderScanner0.scanString('M');
      jSONReaderScanner0.scanFieldInt(charArray0);
      jSONReaderScanner0.close();
      jSONReaderScanner0.resetStringPosition();
      assertEquals((-1), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("Di|\\%A1rpqU< q.", 123);
      char[] charArray0 = new char[6];
      charArray0[0] = '\\';
      charArray0[1] = 'L';
      charArray0[2] = '>';
      charArray0[3] = 'p';
      charArray0[4] = '\\';
      charArray0[5] = '\\';
      int int0 = 16384;
      // Undeclared exception!
      try { 
        JSONLexerBase.readString(charArray0, 16384);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed.str.lit
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("|hizz");
      jSONScanner0.isRef();
      char[] charArray0 = new char[10];
      charArray0[1] = ';';
      charArray0[2] = 'b';
      charArray0[3] = 'b';
      charArray0[4] = 'G';
      jSONScanner0.scanFieldString(charArray0);
      JSONScanner jSONScanner1 = new JSONScanner(charArray0, 2, (-2));
      jSONScanner1.nextToken(2);
      SymbolTable symbolTable0 = null;
      try {
        symbolTable0 = new SymbolTable(0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("null");
      JSONScanner jSONScanner0 = new JSONScanner("null", 0);
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldFloat(charArray0);
      Class<ChronoLocalDate> class0 = ChronoLocalDate.class;
      SymbolTable symbolTable0 = new SymbolTable(77);
      jSONScanner0.scanEnum(class0, symbolTable0, 'i');
      jSONReaderScanner0.scanFieldBoolean(charArray0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(charArray0, 2398);
      jSONReaderScanner1.next();
      assertEquals(989, jSONReaderScanner1.getFeatures());
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("new");
      jSONScanner0.nextIdent();
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(";bbekt");
      char[] charArray0 = new char[8];
      charArray0[0] = '\\';
      charArray0[1] = '\\';
      charArray0[2] = '\\';
      charArray0[3] = '\\';
      charArray0[4] = '\\';
      charArray0[5] = '\\';
      charArray0[6] = '\\';
      charArray0[7] = '\\';
      // Undeclared exception!
      try { 
        JSONLexerBase.readString(charArray0, 306);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("Di|\\%A1rpqU< q.", 123);
      char[] charArray0 = new char[6];
      charArray0[0] = '\\';
      charArray0[1] = 'w';
      charArray0[2] = '>';
      charArray0[3] = 'p';
      charArray0[4] = '\\';
      charArray0[5] = '\\';
      int int0 = 16384;
      // Undeclared exception!
      try { 
        JSONLexerBase.readString(charArray0, 16384);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed.str.lit
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }
}
