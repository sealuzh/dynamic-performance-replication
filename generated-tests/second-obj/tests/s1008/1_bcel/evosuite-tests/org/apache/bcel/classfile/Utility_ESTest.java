/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 06 21:52:18 GMT 2018
 */

package org.apache.bcel.classfile;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedOutputStream;
import java.io.ByteArrayOutputStream;
import java.io.DataInput;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.EOFException;
import java.io.File;
import java.io.FilterOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectStreamConstants;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.lang.reflect.Member;
import java.net.URI;
import java.util.regex.Pattern;
import java.util.zip.ZipException;
import org.apache.bcel.Constants;
import org.apache.bcel.classfile.Constant;
import org.apache.bcel.classfile.ConstantClass;
import org.apache.bcel.classfile.ConstantDouble;
import org.apache.bcel.classfile.ConstantFieldref;
import org.apache.bcel.classfile.ConstantInvokeDynamic;
import org.apache.bcel.classfile.ConstantMethodHandle;
import org.apache.bcel.classfile.ConstantMethodType;
import org.apache.bcel.classfile.ConstantMethodref;
import org.apache.bcel.classfile.ConstantNameAndType;
import org.apache.bcel.classfile.ConstantPool;
import org.apache.bcel.classfile.ConstantString;
import org.apache.bcel.classfile.ConstantUtf8;
import org.apache.bcel.classfile.ElementValue;
import org.apache.bcel.classfile.EmptyVisitor;
import org.apache.bcel.classfile.Field;
import org.apache.bcel.classfile.JavaClass;
import org.apache.bcel.classfile.LocalVariableTable;
import org.apache.bcel.classfile.Method;
import org.apache.bcel.classfile.Signature;
import org.apache.bcel.classfile.Utility;
import org.apache.bcel.util.BCELComparator;
import org.apache.bcel.util.ByteSequence;
import org.apache.bcel.util.ClassPath;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.io.MockRandomAccessFile;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Utility_ESTest extends Utility_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("'Bx}EjO", "'Bx}EjO", "\t(wide)");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 'Bx}EjO
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Utility.printArray((Object[]) null, true);
      boolean boolean0 = Utility.isJavaIdentifierPart('(');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      try { 
        Utility.typeOfSignature("`ggX~C.[y");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: `ggX~C.[y
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      Utility.convertString("Warning: Padding byte != 0 in ");
      Utility.accessToString(0, true);
      try { 
        Utility.typeOfSignature("9");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 9
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("V");
      assertEquals((byte)12, byte0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      String string0 = Utility.classOrInterface(172);
      assertEquals("class", string0);
      
      String string1 = Utility.fillup("class", 172, false, 'C');
      assertEquals("CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCclass", string1);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      String string0 = Utility.classOrInterface(0);
      String string1 = Utility.fillup("class", 0, false, '1');
      assertTrue(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      String string0 = Utility.classOrInterface(0);
      assertEquals("class", string0);
      
      String string1 = Utility.fillup("double", 0, true, '1');
      assertEquals("double", string1);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      String string0 = Utility.accessToString((-1869));
      assertEquals("public private final synchronized transient strictfp synthetic annotation enum", string0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Utility.accessToString(172, true);
      try { 
        Utility.typeOfMethodSignature("protected static transient");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: protected static transient
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      String string0 = Utility.format(75, 75, true, '}');
      assertEquals("75}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}", string0);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "75}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}";
      String string1 = Utility.methodTypeToSignature("new", stringArray0);
      assertEquals("(L75}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}};)Lnew;", string1);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Utility.convertString("V");
      Utility.getSignature("\tdefault = ");
      try { 
        Utility.typeOfSignature("\tdefault = ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: \tdefault = 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.getSignature("`ggX~C.[y");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegally nested brackets:[y
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      String string0 = Utility.compactClassName("long", "K9?", false);
      assertEquals("long", string0);
      
      boolean boolean0 = Utility.isSet((-316), 58);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      boolean boolean0 = Utility.isJavaIdentifierPart('d');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      boolean boolean0 = Utility.isJavaIdentifierPart('}');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Utility.isJavaIdentifierPart('.');
      try { 
        Utility.methodSignatureReturnType("{*@&(q5 E");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `{*@&(q5 E'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.encode((byte[]) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Utility.getSignature("return");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)43;
      byteArray0[1] = (byte)0;
      Utility.encode(byteArray0, false);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("$x$A", "$x$A", "$x$A", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: $x$A
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)93;
      byteArray0[1] = (byte)93;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte) (-114);
      byteArray1[1] = (byte)87;
      byteArray1[2] = (byte)11;
      String string0 = Utility.encode(byteArray1, false);
      String string1 = Utility.convertString("java.lang.java.lang.Object@42214e35, java.lang.Object@608eaa31, java.lang.Object@45618ee6, java.lang.Object@7737b8d5, java.lang.Object@3faf00e0, null");
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      String string0 = "z)W";
      try { 
        Utility.methodSignatureReturnType("z)W");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `W'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      String string0 = Utility.convertString("p!x*1Y8");
      assertEquals("p!x*1Y8", string0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      String string0 = Utility.methodSignatureReturnType("BCxe;Wx-JA[?'a");
      assertEquals("byte", string0);
      
      String string1 = Utility.compactClassName("BCxe;Wx-JA[?'a", "byte", false);
      assertEquals("BCxe;Wx-JA[?'a", string1);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("LeturH");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: LeturH
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      String string0 = Utility.format((-1314), (-1314), false, ')');
      assertEquals("-1314", string0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      Utility.printArray(objectArray0, false);
      String string0 = Constants.ILLEGAL_TYPE;
      Object object0 = new Object();
      try { 
        Utility.typeOfSignature(";y909a+");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ;y909a+
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      String string0 = Utility.toHexString(byteArray0);
      assertEquals("00", string0);
      
      String string1 = Utility.replace("K", ", low = ", ">+LD.)w(1-81\"k=~$");
      assertEquals("K", string1);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      boolean boolean0 = Utility.isJavaIdentifierPart('?');
      assertFalse(boolean0);
      
      int int0 = Utility.clearBit(4389, 4389);
      assertEquals(4357, int0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)81;
      String string0 = Utility.toHexString(byteArray0);
      assertEquals("51", string0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      JavaClass.getComparator();
      byte byte0 = Utility.typeOfSignature("Illegal type: ");
      assertEquals((byte)10, byte0);
      
      String string0 = Utility.methodSignatureReturnType("Illegal type: ", false);
      assertEquals("int", string0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)10;
      byteArray0[1] = (byte)10;
      String string1 = Utility.toHexString(byteArray0);
      assertEquals("0a 0a", string1);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)41;
      byteArray0[1] = (byte) (-109);
      String string0 = Utility.toHexString(byteArray0);
      assertEquals("29 93", string0);
      
      boolean boolean0 = Utility.isSet(201, (byte)41);
      assertFalse(boolean0);
      
      String string1 = Utility.getSignature("short");
      assertEquals("S", string1);
      
      String string2 = Utility.compactClassName(":kv/]Fd#B8}P", ":kv/]Fd#B8}P", false);
      assertEquals(":kv.]Fd#B8}P", string2);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      short short0 = Utility.searchOpcode("areturn");
      assertEquals((short)176, short0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-70);
      byteArray0[1] = (byte) (-77);
      byteArray0[2] = (byte) (-99);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-77), (int) (byte) (-99));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 45981. Constant pool size is: 0
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Utility.convertString("Warning: Padding byte != 0 in ");
      byte[] byteArray0 = new byte[1];
      // Undeclared exception!
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-120), (int) (byte)0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      byte byte0 = (byte) (-71);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-71);
      ConstantDouble constantDouble0 = new ConstantDouble((byte) (-71));
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 60, 60);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("Cc#o8)BQW9FT'");
      mockPrintWriter0.append((CharSequence) "Cc#o8)BQW9FT'");
      Object[] objectArray0 = new Object[6];
      // Undeclared exception!
      try { 
        Utility.printArray((PrintWriter) null, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      Object[] objectArray0 = new Object[0];
      Utility.printArray(objectArray0);
      // Undeclared exception!
      try { 
        Utility.signatureToString("{}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `{}'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      Object object5 = new Object();
      objectArray0[5] = object5;
      Utility.printArray(objectArray0, false);
      Utility.printArray(objectArray0);
      Utility.convertString("P$axMOBK?-+6I]rd/j");
      Utility.compactClassName("java.lang.Object@642e7f40, java.lang.Object@13d923d2, java.lang.Object@61367f15, java.lang.Object@273ac84e, java.lang.Object@30f96796, java.lang.Object@6ae415e8", "c", false);
      Utility.compactClassName("java.lang.Object@642e7f40, java.lang.Object@13d923d2, java.lang.Object@61367f15, java.lang.Object@273ac84e, java.lang.Object@30f96796, java.lang.Object@6ae415e8");
      try { 
        Utility.typeOfSignature("java.lang.Object@642e7f40, java.lang.Object@13d923d2, java.lang.Object@61367f15, java.lang.Object@273ac84e, java.lang.Object@30f96796, java.lang.Object@6ae415e8");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: java.lang.Object@642e7f40, java.lang.Object@13d923d2, java.lang.Object@61367f15, java.lang.Object@273ac84e, java.lang.Object@30f96796, java.lang.Object@6ae415e8
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      try { 
        Utility.typeOfMethodSignature("L8i*sot;V");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: L8i*sot;V
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(2819);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      constantPool0.setConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[1];
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      constantPool0.accept(emptyVisitor0);
      Utility.codeToString(byteArray0, constantPool0, (int) (byte)0, 7);
      // Undeclared exception!
      try { 
        Utility.signatureToString("Pvt/P$J");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Pvt/P$J'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Constant[] constantArray0 = new Constant[2];
      ConstantMethodref constantMethodref0 = new ConstantMethodref(1041, 122);
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.copy();
      String string0 = Constants.ILLEGAL_TYPE;
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)23;
      byteArray0[1] = (byte)23;
      byteArray0[2] = (byte)4;
      byteArray0[3] = (byte)19;
      byteArray0[4] = (byte)19;
      constantPool0.setConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 1257, (int) (byte)4);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Utility.printArray((Object[]) null);
      byte byte0 = (byte)62;
      String string0 = Constants.STATIC_INITIALIZER_NAME;
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-55);
      byteArray0[1] = (byte) (-80);
      byteArray0[5] = (byte)62;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantClass constantClass0 = new ConstantClass((byte) (-55));
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 61, (-1071));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-74);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)95, (int) (byte) (-74));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Constant pool at index 0 is null.
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      short short0 = Constants.BREAKPOINT;
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)62;
      byteArray0[1] = (byte) (-28);
      byteArray0[2] = (byte) (-61);
      byteArray0[3] = (byte)19;
      byteArray0[5] = (byte)23;
      byteArray0[6] = (byte)19;
      ConstantMethodref constantMethodref0 = new ConstantMethodref((byte)19, (-1034));
      Constant[] constantArray0 = new Constant[1];
      constantArray0[0] = (Constant) constantMethodref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      constantPool0.copy();
      String string0 = Constants.ILLEGAL_TYPE;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, (int) (byte)19, (int) (byte)62);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 23. Constant pool size is: 1
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      String string0 = Constants.ILLEGAL_TYPE;
      Utility.clearBit((byte) (-81), (byte) (-81));
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)54;
      byteArray0[1] = (byte)54;
      byteArray0[2] = (byte)54;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals(2, byteSequence0.getIndex());
      assertEquals("istore\t\t%54", string1);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Utility.getSignature("O}f1'k_~Skp^a</>q");
      byte[] byteArray0 = null;
      // Undeclared exception!
      try { 
        Utility.encode((byte[]) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      Utility.getSignature("lookupswitch");
      Utility.encode(byteArray0, true);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("lookupswitch", "$l$8b$I$A$A$A$A$A$A$A", "Invalid StackMap frame_type: ", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: lookupswitch
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Utility.replace("<", "<", "<");
      try { 
        Utility.typeOfSignature("<");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: <
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      int int0 = Utility.clearBit(86, (-1503));
      assertEquals(84, int0);
      
      String string0 = Utility.classOrInterface((-273));
      assertEquals("interface", string0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("L<init>;V", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `init>;V'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      String string0 = Utility.getSignature("Warning: Padding byte != 0 in ");
      assertEquals("LWarning:;", string0);
      
      int int0 = Utility.clearBit(66, 1213);
      assertEquals(66, int0);
      
      String string1 = Utility.fillup("$GA|ih6Jg;slV&{^j", (-587), false, ';');
      assertEquals("$GA|ih6Jg;slV&{^j", string1);
      
      String string2 = Utility.methodSignatureReturnType("LWarning:;");
      assertEquals("Warning:", string2);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Method.getComparator();
      byte byte0 = Constants.ATTR_INNER_CLASSES;
      Utility.signatureToString("SAME");
      // Undeclared exception!
      try { 
        Utility.codeToString((ByteSequence) null, (ConstantPool) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "<illegal opcode>");
      Utility.clearBit(53, 1210);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-85);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (-1620), (int) (byte) (-11));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "<illegal opcode>");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-86);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (-1620), (int) (byte) (-11));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      String string0 = Constants.CONSTRUCTOR_NAME;
      String string1 = Utility.getSignature("'");
      assertEquals("L';", string1);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-101);
      byteArray0[1] = (byte)17;
      byteArray0[2] = (byte) (-11);
      byteArray0[3] = (byte)98;
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte)48;
      byteArray1[1] = (byte)17;
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      String string2 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("faload", string2);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      String string0 = Constants.CONSTRUCTOR_NAME;
      Utility.getSignature("'");
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-101);
      byteArray0[1] = (byte)17;
      byteArray0[2] = (byte) (-11);
      byteArray0[3] = (byte)98;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 196, 256);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Utility.getSignature("return");
      Utility.decode("(\"", false);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("(\"", "d&rdKLj7", ")!O9ZV`1p", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `\"'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      try { 
        Utility.typeOfSignature("Only element values of type annotation can be built with this ctor-- type specified: ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Only element values of type annotation can be built with this ctor-- type specified: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = object3;
      objectArray0[1] = object0;
      objectArray0[2] = object0;
      objectArray0[3] = object2;
      Utility.printArray(objectArray0);
      Utility.convertString("*>x%xxR;V91H;DP");
      String string0 = "BootstrapMethod(";
      boolean boolean0 = true;
      Utility.compactClassName("BootstrapMethod(", "BootstrapMethod(", true);
      Utility.compactClassName("\"eJ'zs P@!2m");
      try { 
        Utility.typeOfSignature("*>x%xxR;V91H;DP");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: >x%xxR;V91H;DP
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Utility.convertString("Warning: Padding byte != 0 in ");
      ConstantDouble constantDouble0 = new ConstantDouble((byte) (-16));
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      try { 
        Utility.typeOfSignature("Warning: Padding byte != 0 in ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Warning: Padding byte != 0 in 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Utility.convertString("Warning: Padding byte != 0 in ");
      Utility.accessToString((-5194), true);
      try { 
        Utility.typeOfSignature("private protected final transient native strictfp annotation enum");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: private protected final transient native strictfp annotation enum
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      String string0 = Constants.ILLEGAL_TYPE;
      Utility.clearBit(183, (-2887));
      Utility.isJavaIdentifierPart('2');
      Utility.methodTypeToSignature("O}f1'k_~Skp^a</>q", (String[]) null);
      String string1 = "instanceof";
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("instanceof", "TRWiZ.:<KUjh&+rUs", "S&`J");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: instanceof
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Utility.typeOfSignature("[");
      // Undeclared exception!
      try { 
        Utility.getSignature("[");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal type: [
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Utility.fillup(", name_and_type_index = ", 43, false, 'z');
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Utility.replace(", name_and_type_index = ", "zzzzzzzzzzzzzzzzzzz, name_and_type_index = ", "zzzzzzzzzzzzzzzzzzz, name_and_type_index = ");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      String string0 = "#uC";
      try { 
        Utility.typeOfSignature("#uC");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: #uC
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      String string0 = Constants.CONSTRUCTOR_NAME;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      ConstantPool constantPool2 = new ConstantPool(constantArray0);
      constantPool2.toString();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)37;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, (int) (byte)37, (int) (byte) (-61));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      boolean boolean0 = true;
      try { 
        Utility.typeOfSignature("\"x^J0#H");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: \"x^J0#H
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      String string0 = Utility.convertString("&*t6");
      assertEquals("&*t6", string0);
      
      String string1 = Utility.signatureToString("CtBm-ORS[= -r_:2dD", true);
      assertEquals("char", string1);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "impdep2";
      stringArray0[1] = "impdep2";
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-101);
      byteArray0[3] = (byte) (-101);
      byteArray0[5] = (byte) (-101);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (-1270), (-1270));
      assertEquals("0:    iflt\t\t#0\n3:    iflt\t\t#158\n", string0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-91);
      byteArray0[1] = (byte) (-91);
      try { 
        Utility.typeOfSignature(",");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ,
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      String string0 = Constants.CONSTRUCTOR_NAME;
      Utility.clearBit(122, 1210);
      try { 
        Utility.methodSignatureReturnType("G:");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `G:'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      byte byte0 = (byte) (-68);
      Field.getComparator();
      try { 
        Utility.typeOfSignature("'/EBw[:");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: '/EBw[:
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      String string0 = Utility.classOrInterface((-145));
      assertEquals("interface", string0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-60);
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte) (-60);
      byteArray1[1] = (byte) (-60);
      byteArray1[2] = (byte) (-60);
      byteArray1[3] = (byte) (-60);
      byteArray1[4] = (byte) (-60);
      byteArray1[5] = (byte) (-60);
      boolean boolean0 = Utility.equals(byteArray0, byteArray1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Utility.getSignature("Warning: Padding byte != 0 in ");
      Utility.compactClassName("D(8", true);
      Utility.methodSignatureReturnType("D(8");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Utility.printArray((Object[]) null, true, true);
      try { 
        Utility.typeOfSignature("(0phN&PO!y=cWB2PBa}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: (0phN&PO!y=cWB2PBa}
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-64);
      Utility.methodTypeToSignature("org.apache.bcel.classfile.Utility", (String[]) null);
      try { 
        Utility.typeOfSignature("4f");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 4f
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) null;
      Object object0 = new Object();
      objectArray0[2] = object0;
      // Undeclared exception!
      try { 
        Utility.printArray((PrintStream) null, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "impdep2";
      stringArray0[1] = "impdep2";
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)17;
      byteArray0[1] = (byte)17;
      byteArray0[2] = (byte) (-11);
      byteArray0[3] = (byte)17;
      byteArray0[5] = (byte) (-101);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (-1270), (-1270));
      assertEquals("0:    sipush\t\t4597\n3:    sipush\t\t155\n", string0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Utility.getSignature("Warning: Padding byte != 0 in ");
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte)48;
      byteArray0[2] = (byte)8;
      byteArray0[3] = (byte)98;
      byteArray0[4] = (byte) (-85);
      byteArray0[5] = (byte) (-101);
      Utility.toHexString(byteArray0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.searchOpcode("object");
      Utility.typeOfSignature("D4lh`c");
      try { 
        Utility.typeOfSignature("*");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Utility.typeOfSignature("Sy~dVNsvm7v<x");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)9;
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Utility.typeOfSignature("[");
      // Undeclared exception!
      try { 
        Utility.signatureToString("[", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: [
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      String string0 = Utility.convertString("Zvt6");
      String string1 = Utility.compactClassName("Zvt6");
      assertTrue(string1.equals((Object)string0));
      
      byte byte0 = Utility.typeOfSignature("Illegal type: ");
      assertEquals((byte)10, byte0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      String string0 = "F8!8V$k9]RyA-gB4";
      Utility.typeOfSignature("F8!8V$k9]RyA-gB4");
      String[] stringArray0 = new String[2];
      stringArray0[1] = "[]";
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature("[]", stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      ConstantMethodref constantMethodref0 = new ConstantMethodref((-1222), (byte) (-40));
      constantMethodref0.toString();
      constantArray0[0] = (Constant) constantMethodref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.toString();
      Utility.isSet(92, 3124);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-42);
      try { 
        Utility.methodSignatureReturnType("K\"7");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `K\"7'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Utility.isJavaIdentifierPart('^');
      Utility.convertString("G~fp");
      try { 
        Utility.typeOfSignature("P$axMOBK?-+6I]rd/j");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: P$axMOBK?-+6I]rd/j
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      String string0 = Constants.CONSTRUCTOR_NAME;
      Utility.clearBit(122, 1210);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-69);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 101, 122);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Utility.getSignature("etgn");
      try { 
        Utility.typeOfSignature("0&V,JW");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 0&V,JW
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = object3;
      objectArray0[1] = object0;
      objectArray0[2] = object0;
      objectArray0[3] = object2;
      Utility.printArray(objectArray0);
      Utility.convertString("*>x%xxR;V91H;DP");
      Utility.clearBit(97, 97);
      try { 
        Utility.methodSignatureReturnType("Q");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Q'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-102);
      byteArray0[1] = (byte) (-98);
      boolean boolean1 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new byte[] {(byte) (-102), (byte) (-98)}, byteArray0);
      
      String string0 = Utility.convertString("%$eN4[8'`v'q");
      assertEquals("%$eN4[8\\'`v\\'q", string0);
      assertNotNull(string0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)60, 187);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("BootstrapMethods");
      assertEquals((byte)8, byte0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      ConstantMethodref constantMethodref0 = new ConstantMethodref((byte)18, (byte)18);
      assertEquals(18, constantMethodref0.getNameAndTypeIndex());
      assertEquals(18, constantMethodref0.getClassIndex());
      assertEquals((byte)10, constantMethodref0.getTag());
      assertNotNull(constantMethodref0);
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      assertFalse(boolean0);
      
      try { 
        Utility.typeOfSignature("... (truncated)");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ... (truncated)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      try { 
        Utility.typeOfSignature("!-haW*xc`");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: -haW*xc`
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Constant[] constantArray0 = new Constant[8];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(8, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      String string0 = constantPool0.toString();
      assertEquals("1)null\n2)null\n3)null\n4)null\n5)null\n6)null\n7)null\n", string0);
      assertEquals(8, constantPool0.getLength());
      assertNotNull(string0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)45;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 2656, (-1222));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      byte[] byteArray0 = new byte[14];
      byteArray0[1] = (byte) (-3);
      byteArray0[2] = (byte) (-59);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 8, 162);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      try { 
        Utility.typeOfSignature("%T8=]q");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: %T8=]q
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Constant[] constantArray0 = new Constant[2];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(2, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      ConstantPool constantPool1 = constantPool0.copy();
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertEquals(2, constantPool0.getLength());
      assertEquals(2, constantPool1.getLength());
      assertNotNull(constantPool1);
      
      ConstantPool constantPool2 = constantPool0.copy();
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool0, constantPool2);
      assertNotSame(constantPool2, constantPool0);
      assertNotSame(constantPool2, constantPool1);
      assertFalse(constantPool0.equals((Object)constantPool1));
      assertFalse(constantPool2.equals((Object)constantPool0));
      assertFalse(constantPool2.equals((Object)constantPool1));
      assertEquals(2, constantPool0.getLength());
      assertEquals(2, constantPool2.getLength());
      assertNotNull(constantPool2);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)103;
      byteArray0[1] = (byte)103;
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(716, (-721));
      assertEquals((byte)12, constantNameAndType0.getTag());
      assertEquals(716, constantNameAndType0.getNameIndex());
      assertEquals((-721), constantNameAndType0.getSignatureIndex());
      assertNotNull(constantNameAndType0);
      
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic(5662, (-2426));
      assertEquals(5662, constantInvokeDynamic0.getClassIndex());
      assertEquals((-2426), constantInvokeDynamic0.getNameAndTypeIndex());
      assertEquals((byte)18, constantInvokeDynamic0.getTag());
      assertEquals(5662, constantInvokeDynamic0.getBootstrapMethodAttrIndex());
      assertNotNull(constantInvokeDynamic0);
      
      ConstantPool constantPool3 = new ConstantPool(constantArray0);
      assertFalse(constantPool3.equals((Object)constantPool2));
      assertFalse(constantPool3.equals((Object)constantPool1));
      assertFalse(constantPool3.equals((Object)constantPool0));
      assertEquals(2, constantPool3.getLength());
      assertNotNull(constantPool3);
      
      ConstantPool constantPool4 = constantPool1.copy();
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool0, constantPool3);
      assertNotSame(constantPool0, constantPool4);
      assertNotSame(constantPool0, constantPool2);
      assertNotSame(constantPool1, constantPool3);
      assertNotSame(constantPool1, constantPool2);
      assertNotSame(constantPool1, constantPool4);
      assertNotSame(constantPool1, constantPool0);
      assertNotSame(constantPool4, constantPool2);
      assertNotSame(constantPool4, constantPool1);
      assertNotSame(constantPool4, constantPool3);
      assertNotSame(constantPool4, constantPool0);
      assertFalse(constantPool0.equals((Object)constantPool1));
      assertFalse(constantPool0.equals((Object)constantPool3));
      assertFalse(constantPool0.equals((Object)constantPool2));
      assertFalse(constantPool1.equals((Object)constantPool3));
      assertFalse(constantPool1.equals((Object)constantPool2));
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertFalse(constantPool4.equals((Object)constantPool2));
      assertFalse(constantPool4.equals((Object)constantPool1));
      assertFalse(constantPool4.equals((Object)constantPool3));
      assertFalse(constantPool4.equals((Object)constantPool0));
      assertEquals(2, constantPool0.getLength());
      assertEquals(2, constantPool1.getLength());
      assertEquals(2, constantPool4.getLength());
      assertNotNull(constantPool4);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)103, (byte)103}, byteArray0);
      assertNotNull(byteSequence0);
      
      String string0 = Utility.codeToString(byteSequence0, constantPool0);
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool0, constantPool3);
      assertNotSame(constantPool0, constantPool4);
      assertNotSame(constantPool0, constantPool2);
      assertEquals("dsub", string0);
      assertFalse(constantPool0.equals((Object)constantPool1));
      assertFalse(constantPool0.equals((Object)constantPool3));
      assertFalse(constantPool0.equals((Object)constantPool4));
      assertFalse(constantPool0.equals((Object)constantPool2));
      assertEquals(2, constantPool0.getLength());
      assertEquals(1, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)103, (byte)103}, byteArray0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      try { 
        Utility.typeOfSignature("3~?_UV<7|f");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 3~?_UV<7|f
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      byte byte0 = Constants.T_ADDRESS;
      assertEquals((byte)16, byte0);
      
      // Undeclared exception!
      try { 
        Utility.signatureToString("Y4g");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Y4g'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      String string0 = Utility.convertString("<unkn&own o");
      assertEquals("<unkn&own o", string0);
      assertNotNull(string0);
      
      String string1 = Utility.signatureToString("V$Zi)q4'e");
      assertEquals("void", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean0 = Utility.isSet(501, 501);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      String string0 = Utility.convertString("Warning: Padding byte != 0 in ");
      assertEquals("Warning: Padding byte != 0 in ", string0);
      assertNotNull(string0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-91);
      byteArray0[1] = (byte)68;
      byteArray0[2] = (byte) (-120);
      byteArray0[3] = (byte) (-3);
      byteArray0[4] = (byte)24;
      byteArray0[5] = (byte) (-3);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)24, (-1651));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      String string0 = Utility.getSignature("\t");
      assertEquals("L;", string0);
      assertNotNull(string0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-91);
      byteArray0[1] = (byte)24;
      byteArray0[2] = (byte) (-91);
      byteArray0[3] = (byte) (-91);
      byteArray0[4] = (byte) (-91);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-91), (-4008));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    if_acmpeq\t\t#6309
         // 3:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      byte byte0 = (byte)19;
      byte[] byteArray0 = new byte[10];
      byteArray0[0] = (byte)19;
      String string0 = Utility.classOrInterface(1978);
      assertEquals("interface", string0);
      assertNotNull(string0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)19, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteSequence0);
      
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 2396, 2396);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      try { 
        Utility.typeOfSignature("5XB?X6^N#phS?oq");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 5XB?X6^N#phS?oq
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      String string0 = Utility.convertString("Warning: Padding byte != 0 in ");
      assertEquals("Warning: Padding byte != 0 in ", string0);
      assertNotNull(string0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)68;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 179, (-1655));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      String string0 = Utility.convertString(")");
      assertEquals(")", string0);
      assertNotNull(string0);
      
      ConstantPool constantPool0 = null;
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-120);
      byteArray0[1] = (byte) (-120);
      byteArray0[2] = (byte) (-98);
      byteArray0[3] = (byte) (-120);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-120), (byte) (-120), (byte) (-98), (byte) (-120)}, byteArray0);
      assertNotNull(byteSequence0);
      
      int int0 = byteSequence0.skipBytes((byte) (-98));
      assertEquals(0, int0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-120), (byte) (-120), (byte) (-98), (byte) (-120)}, byteArray0);
      
      int int1 = byteSequence0.readUnsignedShort();
      assertEquals(34952, int1);
      assertFalse(int1 == int0);
      assertEquals(2, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-120), (byte) (-120), (byte) (-98), (byte) (-120)}, byteArray0);
      
      boolean boolean1 = byteSequence0.readBoolean();
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      assertEquals(3, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-120), (byte) (-120), (byte) (-98), (byte) (-120)}, byteArray0);
      
      byteSequence0.mark((byte) (-120));
      assertEquals(3, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-120), (byte) (-120), (byte) (-98), (byte) (-120)}, byteArray0);
      
      boolean boolean2 = false;
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("l2i", string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals(4, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-120), (byte) (-120), (byte) (-98), (byte) (-120)}, byteArray0);
      assertNotNull(string1);
      
      int int2 = byteSequence0.available();
      assertEquals(0, int2);
      assertFalse(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals(4, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-120), (byte) (-120), (byte) (-98), (byte) (-120)}, byteArray0);
      
      try { 
        DataInputStream.readUTF((DataInput) byteSequence0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-43);
      String string0 = Utility.encode(byteArray0, false);
      assertEquals("$d5$A$A$A$A", string0);
      assertArrayEquals(new byte[] {(byte) (-43), (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(string0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-43), (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteSequence0);
      
      try { 
        Utility.decode("$d5$A$A$A$A", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)45;
      String string0 = Utility.encode(byteArray0, true);
      assertEquals("$l$8b$I$A$A$A$A$A$A$A", string0);
      assertArrayEquals(new byte[] {(byte)45, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(string0);
      
      byte[] byteArray1 = Utility.decode("$l$8b$I$A$A$A$A$A$A$A", false);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)31, (byte) (-117), (byte)8, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray1);
      assertNotNull(byteArray1);
      
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("multianewarray", "'ycQgD:FF}r?", "L,;V", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: multianewarray
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[3] = (byte)38;
      String string0 = Utility.encode(byteArray0, false);
      assertEquals("$A$A$A$s$A$A", string0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)38, (byte)0, (byte)0}, byteArray0);
      assertNotNull(string0);
      
      byte[] byteArray1 = Utility.decode("$A$A$A$s$A$A", false);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)38, (byte)0, (byte)0}, byteArray1);
      assertNotNull(byteArray1);
      
      String string1 = Utility.convertString("multianewarray");
      assertEquals("multianewarray", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = Utility.toHexString(byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals("00 00 00 26 00 00", string2);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)38, (byte)0, (byte)0}, byteArray1);
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      String string0 = Utility.getSignature("boolean");
      assertEquals("Z", string0);
      assertNotNull(string0);
      
      String string1 = Utility.signatureToString("Z");
      assertEquals("boolean", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "#v";
      String string0 = Constants.CONSTRUCTOR_NAME;
      assertEquals("<init>", string0);
      assertNotNull(string0);
      
      String string1 = Utility.compactClassName("double");
      assertEquals("double", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      byte[] byteArray0 = Utility.decode("#v", false);
      assertArrayEquals(new byte[] {(byte)35, (byte)118}, byteArray0);
      assertNotNull(byteArray0);
      
      String string2 = Utility.codeToString(byteArray0, (ConstantPool) null, (-2342), 185);
      assertEquals("0:    fload_1\n1:    fneg\n", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertArrayEquals(new byte[] {(byte)35, (byte)118}, byteArray0);
      assertNotNull(string2);
      
      // Undeclared exception!
      try { 
        Utility.printArray((PrintStream) null, (Object[]) stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[1] = (byte)39;
      byteArray0[2] = (byte)39;
      byteArray0[3] = (byte)39;
      byteArray0[2] = (byte)77;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)39, (int) (byte)39);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Constant[] constantArray0 = new Constant[2];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(2, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      String string0 = Utility.printArray((Object[]) null);
      assertNull(string0);
      
      String string1 = Utility.printArray((Object[]) constantArray0, false);
      assertEquals("null, null", string1);
      assertNotNull(string1);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)50;
      byteArray0[1] = (byte)124;
      byteArray0[2] = (byte)63;
      byteArray0[3] = (byte)56;
      ConstantPool constantPool1 = new ConstantPool(constantArray0);
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertEquals(2, constantPool1.getLength());
      assertNotNull(constantPool1);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 183, 80);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-111);
      byteArray0[1] = (byte) (-4);
      byteArray0[2] = (byte) (-4);
      byteArray0[3] = (byte) (-3);
      byteArray0[4] = (byte) (-111);
      byte byte0 = (byte)57;
      byteArray0[6] = (byte)57;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 64, (int) (byte)57);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      ConstantMethodref constantMethodref0 = new ConstantMethodref((-1989), (byte) (-74));
      assertEquals((byte)10, constantMethodref0.getTag());
      assertEquals((-74), constantMethodref0.getNameAndTypeIndex());
      assertEquals((-1989), constantMethodref0.getClassIndex());
      assertNotNull(constantMethodref0);
      
      ConstantMethodref constantMethodref1 = new ConstantMethodref(constantMethodref0);
      assertTrue(constantMethodref1.equals((Object)constantMethodref0));
      assertEquals((byte)10, constantMethodref0.getTag());
      assertEquals((-74), constantMethodref0.getNameAndTypeIndex());
      assertEquals((-1989), constantMethodref0.getClassIndex());
      assertEquals((byte)10, constantMethodref1.getTag());
      assertEquals((-74), constantMethodref1.getNameAndTypeIndex());
      assertEquals((-1989), constantMethodref1.getClassIndex());
      assertNotNull(constantMethodref1);
      
      Constant[] constantArray0 = new Constant[4];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(4, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      ConstantPool constantPool1 = new ConstantPool(constantArray0);
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertEquals(4, constantPool1.getLength());
      assertNotNull(constantPool1);
      
      ConstantUtf8.clearStats();
      String string0 = constantPool0.toString();
      assertNotSame(constantPool0, constantPool1);
      assertEquals("1)null\n2)null\n3)null\n", string0);
      assertFalse(constantPool0.equals((Object)constantPool1));
      assertEquals(4, constantPool0.getLength());
      assertNotNull(string0);
      
      ConstantPool constantPool2 = constantPool1.copy();
      assertNotSame(constantPool1, constantPool0);
      assertNotSame(constantPool1, constantPool2);
      assertNotSame(constantPool2, constantPool0);
      assertNotSame(constantPool2, constantPool1);
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertFalse(constantPool2.equals((Object)constantPool0));
      assertFalse(constantPool2.equals((Object)constantPool1));
      assertEquals(4, constantPool1.getLength());
      assertEquals(4, constantPool2.getLength());
      assertNotNull(constantPool2);
      
      String string1 = Utility.convertString("1)null\n2)null\n3)null\n");
      assertEquals("1)null\\n2)null\\n3)null\\n", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-74);
      byteArray0[1] = (byte) (-74);
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      byte[] byteArray1 = new byte[1];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte)66;
      String string2 = Utility.codeToString(byteArray1, constantPool1, (-269036740), (-1286));
      assertNotSame(constantPool1, constantPool0);
      assertNotSame(constantPool1, constantPool2);
      assertNotSame(byteArray1, byteArray0);
      assertEquals("0:    lstore_3\n", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertFalse(constantPool1.equals((Object)constantPool2));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(4, constantPool1.getLength());
      assertArrayEquals(new byte[] {(byte)66}, byteArray1);
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      String string0 = Constants.ILLEGAL_TYPE;
      assertEquals("<illegal type>", string0);
      assertNotNull(string0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)67;
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "<illegal type>");
      assertFalse(boolean0);
      
      byteArray0[1] = (byte)120;
      byteArray0[4] = (byte) (-81);
      byteArray0[6] = (byte) (-81);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)67, (byte)120, (byte)0, (byte)0, (byte) (-81), (byte)0, (byte) (-81)}, byteArray0);
      assertNotNull(byteSequence0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 93, 3);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      byteArray0[0] = (byte)81;
      byteArray0[1] = (byte) (-3);
      byteArray0[2] = (byte) (-59);
      byteArray0[3] = (byte) (-59);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)81, (byte) (-3), (byte) (-59), (byte) (-59), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteSequence0);
      
      Constant[] constantArray0 = new Constant[4];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(4, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      ConstantPool constantPool1 = constantPool0.copy();
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertEquals(4, constantPool0.getLength());
      assertEquals(4, constantPool1.getLength());
      assertNotNull(constantPool1);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, 76, (int) (byte) (-3));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 50432. Constant pool size is: 4
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      String string0 = Utility.getSignature("e]&sxwrN1E}$T");
      assertEquals("Le]&sxwrN1E}$T;", string0);
      assertNotNull(string0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)84;
      constantPool0.setConstantPool(constantArray0);
      assertEquals(0, constantPool0.getLength());
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 11, (-46));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)39;
      byteArray0[1] = (byte)39;
      byteArray0[2] = (byte)87;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)39, (int) (byte)39);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-58);
      byteArray0[3] = (byte)92;
      BCELComparator bCELComparator0 = JavaClass.getComparator();
      assertNotNull(bCELComparator0);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte) (-58), (byte)0, (byte)0, (byte)92, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      String string0 = Utility.getSignature("lstore_1");
      assertEquals("Llstore_1;", string0);
      assertNotNull(string0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 1503, 6);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-124);
      byteArray0[2] = (byte) (-124);
      byteArray0[3] = (byte) (-124);
      byteArray0[4] = (byte)99;
      byteArray0[5] = (byte)99;
      byteArray0[6] = (byte)99;
      ConstantPool constantPool1 = new ConstantPool(constantArray0);
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertEquals(0, constantPool1.getLength());
      assertNotNull(constantPool1);
      
      String string0 = Utility.codeToString(byteArray0, constantPool0, 3, (int) (byte) (-124));
      assertNotSame(constantPool0, constantPool1);
      assertEquals("", string0);
      assertFalse(constantPool0.equals((Object)constantPool1));
      assertEquals(0, constantPool0.getLength());
      assertArrayEquals(new byte[] {(byte) (-124), (byte)0, (byte) (-124), (byte) (-124), (byte)99, (byte)99, (byte)99}, byteArray0);
      assertNotNull(string0);
      
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean0);
      assertArrayEquals(new byte[] {(byte) (-124), (byte)0, (byte) (-124), (byte) (-124), (byte)99, (byte)99, (byte)99}, byteArray0);
      
      int int0 = Utility.clearBit(150, (byte)99);
      assertEquals(150, int0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      String string0 = Utility.compactClassName("O}f1'k_~Skp^a</>q", "O}f1'k_~Skp^a</>q", true);
      assertEquals("O}f1'k_~Skp^a<.>q", string0);
      assertNotNull(string0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)111;
      byteArray0[1] = (byte) (-119);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-59);
      byteArray0[4] = (byte) (-7);
      byteArray0[5] = (byte) (-119);
      byteArray0[6] = (byte) (-59);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-59), 165, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)18;
      String string0 = Constants.CONSTRUCTOR_NAME;
      assertEquals("<init>", string0);
      assertNotNull(string0);
      
      String string1 = Utility.classOrInterface((byte)0);
      assertEquals("class", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 439, (-125));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      String string0 = Constants.CONSTRUCTOR_NAME;
      assertEquals("<init>", string0);
      assertNotNull(string0);
      
      String string1 = Utility.getSignature("long");
      assertEquals("J", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      constantPool0.setConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      
      byte[] byteArray0 = new byte[6];
      byteArray0[5] = (byte) (-66);
      byteArray0[1] = (byte) (-66);
      byteArray0[2] = (byte) (-66);
      constantPool0.setConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      
      byteArray0[3] = (byte) (-66);
      byteArray0[4] = (byte) (-66);
      byteArray0[5] = (byte) (-66);
      String string2 = Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-66), (-1653));
      assertEquals("0:    nop\n1:    arraylength\n2:    arraylength\n3:    arraylength\n4:    arraylength\n5:    arraylength\n", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals(0, constantPool0.getLength());
      assertArrayEquals(new byte[] {(byte)0, (byte) (-66), (byte) (-66), (byte) (-66), (byte) (-66), (byte) (-66)}, byteArray0);
      assertNotNull(string2);
      
      String string3 = Utility.fillup("+aK/i?*:]r", (byte) (-66), true, 'D');
      assertEquals("+aK/i?*:]r", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      try { 
        Utility.typeOfSignature("+aK/i?*:]r");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: aK/i?*:]r
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      String string0 = Utility.convertString("Zvt6");
      assertEquals("Zvt6", string0);
      assertNotNull(string0);
      
      byte byte0 = Utility.typeOfSignature("Zvt6");
      assertEquals((byte)4, byte0);
      
      String[] stringArray0 = Constants.ATTRIBUTE_NAMES;
      assertNotNull(stringArray0);
      
      String string1 = Utility.convertString("Zvt6");
      assertEquals("Zvt6", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      String string0 = "?e\\+xISNL^357)fnM";
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "?e+xISNL^357)fnM");
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String[] stringArray0 = new String[0];
      String string1 = Utility.methodTypeToSignature("2\u0002M9a<", stringArray0);
      assertEquals("()L2\u0002M9a<;", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      try { 
        Utility.methodSignatureReturnType("UgKgQ~");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `UgKgQ~'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte)79;
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      byteArray0[2] = (byte)98;
      try { 
        Utility.methodSignatureReturnType("OE#asyLD/bA", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `OE#asyLD/bA'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      String string0 = Utility.getSignature("\t");
      assertEquals("L;", string0);
      assertNotNull(string0);
      
      byte[] byteArray0 = new byte[4];
      String string1 = ", handler_pc = ";
      String string2 = Utility.convertString(", handler_pc = ");
      assertEquals(", handler_pc = ", string2);
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertNotNull(string2);
      
      try { 
        Utility.typeOfSignature("UPKp3@r`");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: UPKp3@r`
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      ConstantPool constantPool0 = null;
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)93;
      byteArray0[1] = (byte) (-98);
      byteArray0[2] = (byte) (-3);
      byteArray0[3] = (byte)93;
      byteArray0[5] = (byte)93;
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ";");
      assertFalse(boolean0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)93, (byte) (-98), (byte) (-3), (byte)93, (byte)0, (byte)93, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteSequence0);
      
      int int0 = byteSequence0.readUnsignedShort();
      assertEquals(23966, int0);
      assertEquals(2, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)93, (byte) (-98), (byte) (-3), (byte)93, (byte)0, (byte)93, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      boolean boolean1 = byteSequence0.readBoolean();
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      assertEquals(3, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)93, (byte) (-98), (byte) (-3), (byte)93, (byte)0, (byte)93, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      byteSequence0.mark((byte)93);
      assertEquals(3, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)93, (byte) (-98), (byte) (-3), (byte)93, (byte)0, (byte)93, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("dup2_x1", string0);
      assertEquals(4, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)93, (byte) (-98), (byte) (-3), (byte)93, (byte)0, (byte)93, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(string0);
      
      int int1 = byteSequence0.available();
      assertEquals(5, int1);
      assertFalse(int1 == int0);
      assertEquals(4, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)93, (byte) (-98), (byte) (-3), (byte)93, (byte)0, (byte)93, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      try { 
        DataInputStream.readUTF((DataInput) byteSequence0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      String string0 = constantPool0.toString();
      assertEquals("", string0);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(string0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)21;
      byteArray0[1] = (byte)21;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)21, (byte)21}, byteArray0);
      assertNotNull(byteSequence0);
      
      byteSequence0.mark((byte)21);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)21, (byte)21}, byteArray0);
      
      boolean boolean0 = byteSequence0.readBoolean();
      assertTrue(boolean0);
      assertEquals(1, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)21, (byte)21}, byteArray0);
      
      try { 
        Utility.codeToString(byteSequence0, constantPool0, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      String string0 = Utility.convertString("V");
      assertEquals("V", string0);
      assertNotNull(string0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-120);
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      boolean boolean2 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ";");
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      String string1 = Utility.classOrInterface((byte) (-120));
      assertEquals("interface", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      byte[] byteArray1 = new byte[7];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte)100;
      byteArray1[1] = (byte) (-72);
      byteArray1[2] = (byte)100;
      byteArray1[3] = (byte) (-120);
      byteArray1[4] = (byte)100;
      byteArray1[5] = (byte) (-120);
      byteArray1[6] = (byte)52;
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)100, (byte) (-72), (byte)100, (byte) (-120), (byte)100, (byte) (-120), (byte)52}, byteArray1);
      assertNotNull(byteSequence0);
      
      String string2 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertNotSame(byteArray1, byteArray0);
      assertEquals("isub", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(1, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)100, (byte) (-72), (byte)100, (byte) (-120), (byte)100, (byte) (-120), (byte)52}, byteArray1);
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("($pIC$Qo", "($pIC$Qo", "($pIC$Qo", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `$pIC$Qo'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)50;
      byteArray0[1] = (byte) (-42);
      byte byte0 = Utility.typeOfSignature("The prefix must not be null");
      assertEquals((byte)14, byte0);
      
      byte[] byteArray1 = new byte[5];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte)14;
      byteArray1[1] = (byte)14;
      byteArray1[2] = (byte) (-42);
      byteArray1[3] = (byte)50;
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.methodSignatureArgumentTypes((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      String string0 = "Invalid";
      try { 
        Utility.typeOfSignature("M.Jf,V P0tnmEh#?z9.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: M.Jf,V P0tnmEh#?z9.
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      String string0 = Utility.getSignature("\t");
      assertEquals("L;", string0);
      assertNotNull(string0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)18;
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "L;");
      assertFalse(boolean0);
      
      ConstantMethodref constantMethodref0 = new ConstantMethodref((-1989), (byte)18);
      assertEquals((-1989), constantMethodref0.getClassIndex());
      assertEquals(18, constantMethodref0.getNameAndTypeIndex());
      assertEquals((byte)10, constantMethodref0.getTag());
      assertNotNull(constantMethodref0);
      
      String string1 = Utility.encode(byteArray0, false);
      assertEquals("$S$A$A$A", string1);
      assertFalse(string1.equals((Object)string0));
      assertArrayEquals(new byte[] {(byte)18, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(string1);
      
      String string2 = "N6Yu;q5t>a";
      try { 
        Utility.methodSignatureReturnType("N6Yu;q5t>a", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `N6Yu;q5t>a'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      byte byte0 = Constants.ATTR_RUNTIMEVISIBLE_ANNOTATIONS;
      assertEquals((byte)12, byte0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)76;
      byteArray0[1] = (byte)12;
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte)76, (byte)12}, byteArray0);
      
      ConstantClass constantClass0 = new ConstantClass((byte)76);
      assertEquals((byte)7, constantClass0.getTag());
      assertEquals(76, constantClass0.getNameIndex());
      assertNotNull(constantClass0);
      
      boolean boolean1 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "F8!8V$k9]RyA-gB4");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      Constant[] constantArray0 = new Constant[18];
      ConstantClass constantClass1 = (ConstantClass)constantClass0.clone();
      assertNotSame(constantClass0, constantClass1);
      assertNotSame(constantClass1, constantClass0);
      assertTrue(constantClass1.equals((Object)constantClass0));
      assertEquals((byte)7, constantClass0.getTag());
      assertEquals(76, constantClass0.getNameIndex());
      assertEquals(76, constantClass1.getNameIndex());
      assertEquals((byte)7, constantClass1.getTag());
      assertNotNull(constantClass1);
      
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(18, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      ConstantPool constantPool1 = constantPool0.copy();
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertEquals(18, constantPool0.getLength());
      assertEquals(18, constantPool1.getLength());
      assertNotNull(constantPool1);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, 90, (int) (byte)12);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      String string0 = Utility.methodSignatureReturnType("Zvt6");
      assertEquals("boolean", string0);
      assertNotNull(string0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      try { 
        Utility.typeOfSignature("?!p");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ?!p
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      String string0 = Utility.getSignature("\t");
      assertEquals("L;", string0);
      assertNotNull(string0);
      
      int int0 = Utility.clearBit(1891, 2748);
      assertEquals(1891, int0);
      
      String string1 = Utility.convertString("\t");
      assertEquals("\t", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      try { 
        Utility.typeOfSignature("Y1zxQrG?[N");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Y1zxQrG?[N
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      ConstantClass constantClass0 = new ConstantClass(200);
      assertEquals(200, constantClass0.getNameIndex());
      assertEquals((byte)7, constantClass0.getTag());
      assertNotNull(constantClass0);
      
      Constant[] constantArray0 = new Constant[1];
      ConstantClass constantClass1 = new ConstantClass(160);
      assertFalse(constantClass1.equals((Object)constantClass0));
      assertEquals((byte)7, constantClass1.getTag());
      assertEquals(160, constantClass1.getNameIndex());
      assertNotNull(constantClass1);
      
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(1, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)41;
      byteArray0[1] = (byte)73;
      byteArray0[2] = (byte) (-61);
      byteArray0[3] = (byte)65;
      byteArray0[4] = (byte)127;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)41, (byte)73, (byte) (-61), (byte)65, (byte)127}, byteArray0);
      assertNotNull(byteSequence0);
      
      String string0 = Utility.codeToString(byteSequence0, constantPool0);
      assertEquals("dload_3", string0);
      assertEquals(1, constantPool0.getLength());
      assertEquals(1, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)41, (byte)73, (byte) (-61), (byte)65, (byte)127}, byteArray0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      String string0 = "3\"W0\\*kjVMUUP";
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) "3\"W0*kjVMUUP";
      objectArray0[1] = (Object) "3\"W0*kjVMUUP";
      ConstantMethodref constantMethodref0 = new ConstantMethodref(2706, 2706);
      assertEquals(2706, constantMethodref0.getNameAndTypeIndex());
      assertEquals((byte)10, constantMethodref0.getTag());
      assertEquals(2706, constantMethodref0.getClassIndex());
      assertNotNull(constantMethodref0);
      
      Constant[] constantArray0 = new Constant[5];
      constantArray0[2] = (Constant) constantMethodref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(5, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[1] = (byte)91;
      byteArray0[2] = (byte)41;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 76, 76);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      ConstantDouble constantDouble0 = new ConstantDouble(2706);
      assertEquals(2706.0, constantDouble0.getBytes(), 0.01);
      assertEquals((byte)6, constantDouble0.getTag());
      assertNotNull(constantDouble0);
      
      Constant[] constantArray0 = new Constant[9];
      constantArray0[0] = (Constant) constantDouble0;
      constantArray0[1] = (Constant) constantDouble0;
      constantArray0[4] = (Constant) constantDouble0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(9, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      byte[] byteArray0 = new byte[6];
      constantPool0.setConstantPool(constantArray0);
      assertEquals(9, constantPool0.getLength());
      
      byteArray0[2] = (byte)41;
      byteArray0[3] = (byte)83;
      byteArray0[4] = (byte)95;
      byteArray0[5] = (byte)83;
      String string0 = Utility.fillup("Illegally nested brackets:", (byte)83, true, '9');
      assertEquals("Illegally nested brackets:999999999999999999999999999999999999999999999999999999999", string0);
      assertNotNull(string0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 88, (-1442));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      assertFalse(boolean0);
      
      ConstantClass constantClass0 = new ConstantClass(2043);
      assertEquals(2043, constantClass0.getNameIndex());
      assertEquals((byte)7, constantClass0.getTag());
      assertNotNull(constantClass0);
      
      Constant[] constantArray0 = new Constant[7];
      constantArray0[0] = (Constant) constantClass0;
      constantArray0[1] = (Constant) constantClass0;
      constantArray0[3] = (Constant) constantClass0;
      ConstantString constantString0 = new ConstantString(2043);
      assertEquals((byte)8, constantString0.getTag());
      assertEquals(2043, constantString0.getStringIndex());
      assertNotNull(constantString0);
      
      constantArray0[4] = (Constant) constantString0;
      constantArray0[5] = (Constant) constantClass0;
      constantArray0[6] = (Constant) constantClass0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(7, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      ConstantPool constantPool1 = constantPool0.copy();
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertEquals(7, constantPool0.getLength());
      assertEquals(7, constantPool1.getLength());
      assertNotNull(constantPool1);
      
      ConstantPool constantPool2 = new ConstantPool(constantArray0);
      assertFalse(constantPool2.equals((Object)constantPool0));
      assertFalse(constantPool2.equals((Object)constantPool1));
      assertEquals(7, constantPool2.getLength());
      assertNotNull(constantPool2);
      
      try { 
        Utility.typeOfSignature("1e155Y1DodZ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 1e155Y1DodZ
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      String string0 = Utility.convertString("Zvt6");
      assertEquals("Zvt6", string0);
      assertNotNull(string0);
      
      String string1 = Utility.getSignature("Zvt6");
      assertEquals("LZvt6;", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[2] = (byte) (-102);
      try { 
        Utility.typeOfSignature("=class ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: =class 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      String string0 = "F7(C0H&B|/.fcT";
      String string1 = "zYK28zr{C";
      String string2 = Utility.compactClassName("zYK28zr{C", true);
      assertEquals("zYK28zr{C", string2);
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertNotNull(string2);
      
      byte byte0 = Constants.ATTR_RUNTIMEVISIBLE_ANNOTATIONS;
      assertEquals((byte)12, byte0);
      
      String string3 = "):\n";
      try { 
        Utility.typeOfSignature("):\n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ):
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      try { 
        Utility.typeOfSignature("AZzo");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: AZzo
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      BCELComparator bCELComparator0 = JavaClass.getComparator();
      assertNotNull(bCELComparator0);
      
      Constant.setComparator(bCELComparator0);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "A$;.";
      stringArray0[1] = "VVd>j[mM!e/b%0}[-8Z";
      stringArray0[2] = "A$;.";
      stringArray0[3] = "A$;.";
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature("A$;.", stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegally nested brackets:[mM!e/b%0}[-8Z
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      String string0 = Constants.CONSTRUCTOR_NAME;
      assertEquals("<init>", string0);
      assertNotNull(string0);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      byte byte0 = Utility.typeOfSignature("Zvt6");
      assertEquals((byte)4, byte0);
      
      String string1 = Utility.signatureToString("Illegal type: ");
      assertEquals("int", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      try { 
        Utility.methodSignatureArgumentTypes("p:j,-N%>ykz.Nxa;-");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: p:j,-N%>ykz.Nxa;-
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      byte[] byteArray0 = new byte[10];
      constantPool0.setConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      
      byteArray0[1] = (byte)17;
      String string0 = Utility.convertString("d\"$Ujh;>");
      assertEquals("d\\\"$Ujh;>", string0);
      assertNotNull(string0);
      
      try { 
        Utility.methodSignatureReturnType("Vfwla+Z^n;H:bet)", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      String string0 = Constants.CONSTRUCTOR_NAME;
      assertEquals("<init>", string0);
      assertNotNull(string0);
      
      String string1 = Utility.getSignature(", npairs = ");
      assertEquals("L,;", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[2] = (byte)17;
      byte byte0 = Utility.typeOfSignature("L,;");
      assertEquals((byte)14, byte0);
      
      try { 
        Utility.typeOfSignature("Ex");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Ex
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      String string0 = Utility.getSignature(", npairs = ");
      assertEquals("L,;", string0);
      assertNotNull(string0);
      
      String string1 = Constants.ILLEGAL_TYPE;
      assertEquals("<illegal type>", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = Utility.fillup("TG(_8Q9*", (byte)98, false, ',');
      assertEquals(",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,TG(_8Q9*", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      byte byte0 = Utility.typeOfSignature("JuG");
      assertEquals((byte)11, byte0);
      
      try { 
        Utility.typeOfSignature("putfield");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: putfield
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-66);
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      try { 
        Utility.typeOfSignature("XhZ:;J!3/&1Nv");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: XhZ:;J!3/&1Nv
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-54);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      byteArray0[1] = (byte) (-54);
      byteArray0[2] = (byte) (-86);
      byteArray0[3] = (byte) (-54);
      byteArray0[0] = (byte)116;
      byteArray0[6] = (byte)82;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 903, (int) (byte) (-86));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("F8!8V$k9]RyA-gB4");
      assertEquals((byte)6, byte0);
      
      ConstantClass constantClass0 = new ConstantClass((byte)78);
      assertEquals(78, constantClass0.getNameIndex());
      assertEquals((byte)7, constantClass0.getTag());
      assertNotNull(constantClass0);
      
      constantClass0.setNameIndex((-77));
      assertEquals((-77), constantClass0.getNameIndex());
      assertEquals((byte)7, constantClass0.getTag());
      
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType((byte)77, (-1980));
      assertEquals((-1980), constantNameAndType0.getSignatureIndex());
      assertEquals((byte)12, constantNameAndType0.getTag());
      assertEquals(77, constantNameAndType0.getNameIndex());
      assertNotNull(constantNameAndType0);
      
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic(185, (-1980));
      assertEquals((-1980), constantInvokeDynamic0.getNameAndTypeIndex());
      assertEquals(185, constantInvokeDynamic0.getBootstrapMethodAttrIndex());
      assertEquals((byte)18, constantInvokeDynamic0.getTag());
      assertEquals(185, constantInvokeDynamic0.getClassIndex());
      assertNotNull(constantInvokeDynamic0);
      
      Constant[] constantArray0 = new Constant[2];
      constantArray0[1] = (Constant) constantClass0;
      constantClass0.setNameIndex((byte)78);
      assertEquals(78, constantClass0.getNameIndex());
      assertEquals((byte)7, constantClass0.getTag());
      
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(2, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      String string0 = Utility.methodSignatureReturnType("F8!8V$k9]RyA-gB4", true);
      assertEquals("float", string0);
      assertNotNull(string0);
      
      int int0 = Pattern.UNICODE_CHARACTER_CLASS;
      assertEquals(256, int0);
      
      String string1 = Utility.printArray((Object[]) constantArray0, true, true);
      assertEquals("{null, \"CONSTANT_Class[7](name_index = 78)\"}", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Constant[] constantArray0 = new Constant[2];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(2, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      ConstantPool constantPool1 = new ConstantPool(constantArray0);
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertEquals(2, constantPool1.getLength());
      assertNotNull(constantPool1);
      
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic((byte) (-108), (byte) (-108));
      assertEquals((-108), constantInvokeDynamic0.getBootstrapMethodAttrIndex());
      assertEquals((-108), constantInvokeDynamic0.getNameAndTypeIndex());
      assertEquals((-108), constantInvokeDynamic0.getClassIndex());
      assertEquals((byte)18, constantInvokeDynamic0.getTag());
      assertNotNull(constantInvokeDynamic0);
      
      String string0 = Utility.printArray((Object[]) constantArray0, true);
      assertEquals("{null, null}", string0);
      assertNotNull(string0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-108);
      byteArray0[1] = (byte) (-108);
      byteArray0[2] = (byte) (-108);
      byteArray0[3] = (byte) (-108);
      byteArray0[4] = (byte) (-108);
      byteArray0[5] = (byte) (-108);
      byteArray0[6] = (byte) (-108);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-108), (byte) (-108), (byte) (-108), (byte) (-108), (byte) (-108), (byte) (-108), (byte) (-108)}, byteArray0);
      assertNotNull(byteSequence0);
      
      String string1 = Utility.compactClassName("{null, null}");
      assertEquals("{null, null}", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertEquals(0, byteSequence1.getIndex());
      assertArrayEquals(new byte[] {(byte) (-108), (byte) (-108), (byte) (-108), (byte) (-108), (byte) (-108), (byte) (-108), (byte) (-108)}, byteArray0);
      assertNotNull(byteSequence1);
      
      String string2 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(byteSequence0, byteSequence1);
      assertEquals("lcmp", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(constantPool0.equals((Object)constantPool1));
      assertFalse(byteSequence0.equals((Object)byteSequence1));
      assertEquals(2, constantPool0.getLength());
      assertEquals(1, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-108), (byte) (-108), (byte) (-108), (byte) (-108), (byte) (-108), (byte) (-108), (byte) (-108)}, byteArray0);
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      byte byte0 = ObjectStreamConstants.TC_ENDBLOCKDATA;
      assertEquals((byte)120, byte0);
      
      ConstantClass constantClass0 = new ConstantClass((byte)53);
      assertEquals(53, constantClass0.getNameIndex());
      assertEquals((byte)7, constantClass0.getTag());
      assertNotNull(constantClass0);
      
      ConstantClass constantClass1 = new ConstantClass(constantClass0);
      assertTrue(constantClass1.equals((Object)constantClass0));
      assertEquals(53, constantClass0.getNameIndex());
      assertEquals((byte)7, constantClass0.getTag());
      assertEquals((byte)7, constantClass1.getTag());
      assertEquals(53, constantClass1.getNameIndex());
      assertNotNull(constantClass1);
      
      String string0 = constantClass0.toString();
      assertNotSame(constantClass0, constantClass1);
      assertEquals("CONSTANT_Class[7](name_index = 53)", string0);
      assertTrue(constantClass0.equals((Object)constantClass1));
      assertEquals(53, constantClass0.getNameIndex());
      assertEquals((byte)7, constantClass0.getTag());
      assertNotNull(string0);
      
      String string1 = Utility.replace("CONSTANT_Class[7](name_index = 53)", "CONSTANT_Class[7](name_index = 53)", "CONSTANT_Class[7](name_index = 53)");
      assertEquals("CONSTANT_Class[7](name_index = 53)", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)53;
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream((byte)120);
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("", byteArrayOutputStream0.toString());
      assertNotNull(byteArrayOutputStream0);
      
      constantClass0.setNameIndex((byte)120);
      assertNotSame(constantClass0, constantClass1);
      assertFalse(constantClass0.equals((Object)constantClass1));
      assertEquals(120, constantClass0.getNameIndex());
      assertEquals((byte)7, constantClass0.getTag());
      
      byte byte1 = Utility.typeOfSignature("Illegal type: ");
      assertEquals((byte)10, byte1);
      assertFalse(byte1 == byte0);
      
      int int0 = Utility.clearBit((-1409), (byte)120);
      assertEquals((-16778625), int0);
      
      String string2 = Utility.getSignature("CONSTANT_Class[7](name_index = 53)");
      assertEquals("[LCONSTANT_Class;", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Constant[] constantArray0 = new Constant[2];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(2, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      String string0 = ",";
      String string1 = Utility.convertString(",");
      assertEquals(",", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      Constant[] constantArray1 = new Constant[0];
      assertFalse(constantArray1.equals((Object)constantArray0));
      
      ConstantPool constantPool1 = new ConstantPool(constantArray1);
      assertFalse(constantArray1.equals((Object)constantArray0));
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertEquals(0, constantPool1.getLength());
      assertNotNull(constantPool1);
      
      ConstantPool constantPool2 = constantPool0.copy();
      assertNotSame(constantArray0, constantArray1);
      assertNotSame(constantPool0, constantPool2);
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool2, constantPool0);
      assertNotSame(constantPool2, constantPool1);
      assertFalse(constantArray0.equals((Object)constantArray1));
      assertFalse(constantPool0.equals((Object)constantPool1));
      assertFalse(constantPool2.equals((Object)constantPool0));
      assertFalse(constantPool2.equals((Object)constantPool1));
      assertEquals(2, constantPool0.getLength());
      assertEquals(2, constantPool2.getLength());
      assertNotNull(constantPool2);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[6] = (byte)90;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, 1690, 2175);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Constant[] constantArray0 = new Constant[2];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(2, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      ConstantPool constantPool1 = constantPool0.copy();
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertEquals(2, constantPool0.getLength());
      assertEquals(2, constantPool1.getLength());
      assertNotNull(constantPool1);
      
      ConstantMethodref constantMethodref0 = new ConstantMethodref(52, 103);
      assertEquals((byte)10, constantMethodref0.getTag());
      assertEquals(52, constantMethodref0.getClassIndex());
      assertEquals(103, constantMethodref0.getNameAndTypeIndex());
      assertNotNull(constantMethodref0);
      
      String string0 = constantMethodref0.toString();
      assertEquals("CONSTANT_Methodref[10](class_index = 52, name_and_type_index = 103)", string0);
      assertEquals((byte)10, constantMethodref0.getTag());
      assertEquals(52, constantMethodref0.getClassIndex());
      assertEquals(103, constantMethodref0.getNameAndTypeIndex());
      assertNotNull(string0);
      
      String string1 = Utility.printArray((Object[]) null);
      assertNull(string1);
      
      String string2 = Utility.signatureToString("Bs- k", true);
      assertEquals("byte", string2);
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = Utility.printArray((Object[]) constantArray0, false);
      assertEquals("null, null", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      ConstantPool constantPool2 = new ConstantPool(constantArray0);
      assertFalse(constantPool2.equals((Object)constantPool1));
      assertFalse(constantPool2.equals((Object)constantPool0));
      assertEquals(2, constantPool2.getLength());
      assertNotNull(constantPool2);
      
      ConstantPool constantPool3 = constantPool2.copy();
      assertNotSame(constantPool2, constantPool1);
      assertNotSame(constantPool2, constantPool0);
      assertNotSame(constantPool2, constantPool3);
      assertNotSame(constantPool3, constantPool2);
      assertNotSame(constantPool3, constantPool1);
      assertNotSame(constantPool3, constantPool0);
      assertFalse(constantPool2.equals((Object)constantPool1));
      assertFalse(constantPool2.equals((Object)constantPool0));
      assertFalse(constantPool3.equals((Object)constantPool2));
      assertFalse(constantPool3.equals((Object)constantPool1));
      assertFalse(constantPool3.equals((Object)constantPool0));
      assertEquals(2, constantPool2.getLength());
      assertEquals(2, constantPool3.getLength());
      assertNotNull(constantPool3);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)34;
      byteArray0[1] = (byte) (-2);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool3, (int) (byte)34, (-1943));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      byteArray0[0] = (byte) (-37);
      String string0 = "\"x\\^J0H";
      byte[] byteArray1 = Utility.decode("\"x^J0H", false);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)34, (byte)120, (byte)94, (byte)74, (byte)48, (byte)72}, byteArray1);
      assertNotNull(byteArray1);
      
      Constant[] constantArray0 = new Constant[1];
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic((byte) (-37), (byte) (-37));
      assertEquals((-37), constantInvokeDynamic0.getNameAndTypeIndex());
      assertEquals((byte)18, constantInvokeDynamic0.getTag());
      assertEquals((-37), constantInvokeDynamic0.getClassIndex());
      assertEquals((-37), constantInvokeDynamic0.getBootstrapMethodAttrIndex());
      assertNotNull(constantInvokeDynamic0);
      
      constantArray0[0] = (Constant) constantInvokeDynamic0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(1, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      String string1 = constantPool0.toString();
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals(1, constantPool0.getLength());
      assertNotNull(string1);
      
      boolean boolean1 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(boolean1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new byte[] {(byte)34, (byte)120, (byte)94, (byte)74, (byte)48, (byte)72}, byteArray1);
      
      boolean boolean2 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, constantPool0, 1057, (int) (byte) (-37));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      String string0 = Utility.getSignature("Zvt6");
      assertEquals("LZvt6;", string0);
      assertNotNull(string0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)94;
      byteArray0[1] = (byte) (-3);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)94, (int) (byte) (-3));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      byte byte0 = ObjectStreamConstants.TC_ENDBLOCKDATA;
      assertEquals((byte)120, byte0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      ConstantClass constantClass0 = new ConstantClass((byte)53);
      assertEquals(53, constantClass0.getNameIndex());
      assertEquals((byte)7, constantClass0.getTag());
      assertNotNull(constantClass0);
      
      ConstantClass constantClass1 = new ConstantClass(constantClass0);
      assertTrue(constantClass1.equals((Object)constantClass0));
      assertEquals(53, constantClass0.getNameIndex());
      assertEquals((byte)7, constantClass0.getTag());
      assertEquals((byte)7, constantClass1.getTag());
      assertEquals(53, constantClass1.getNameIndex());
      assertNotNull(constantClass1);
      
      String string0 = constantClass0.toString();
      assertNotSame(constantClass0, constantClass1);
      assertEquals("CONSTANT_Class[7](name_index = 53)", string0);
      assertTrue(constantClass0.equals((Object)constantClass1));
      assertEquals(53, constantClass0.getNameIndex());
      assertEquals((byte)7, constantClass0.getTag());
      assertNotNull(string0);
      
      String string1 = Utility.replace("CONSTANT_Class[7](name_index = 53)", "CONSTANT_Class[7](name_index = 53)", "CONSTANT_Class[7](name_index = 53)");
      assertEquals("CONSTANT_Class[7](name_index = 53)", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)120;
      constantClass0.setNameIndex((byte)120);
      assertNotSame(constantClass0, constantClass1);
      assertFalse(constantClass0.equals((Object)constantClass1));
      assertEquals(120, constantClass0.getNameIndex());
      assertEquals((byte)7, constantClass0.getTag());
      
      boolean boolean2 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      byte byte1 = Utility.typeOfSignature("Illeal type: ");
      assertEquals((byte)10, byte1);
      assertFalse(byte1 == byte0);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      constantPool0.setConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      
      boolean boolean3 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean3);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 76, (-2731));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      Object object2 = new Object();
      assertFalse(object2.equals((Object)object1));
      assertFalse(object2.equals((Object)object0));
      assertNotNull(object2);
      
      Object object3 = new Object();
      assertFalse(object3.equals((Object)object0));
      assertFalse(object3.equals((Object)object2));
      assertFalse(object3.equals((Object)object1));
      assertNotNull(object3);
      
      Object[] objectArray0 = new Object[5];
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-23);
      byteArray0[1] = (byte) (-61);
      byteArray0[2] = (byte)14;
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte) (-23), (byte) (-61), (byte)14}, byteArray0);
      
      objectArray0[3] = object3;
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      byte[] byteArray1 = new byte[7];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte)17;
      byteArray1[2] = (byte)84;
      byteArray1[3] = (byte) (-101);
      byteArray1[4] = (byte)84;
      byteArray1[5] = (byte) (-101);
      byteArray1[6] = (byte) (-101);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("void", "checkcast", "getstatic");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: void
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "7t*8");
      assertFalse(boolean0);
      
      ConstantMethodref constantMethodref0 = new ConstantMethodref((-1989), (-1222));
      assertEquals((-1989), constantMethodref0.getClassIndex());
      assertEquals((byte)10, constantMethodref0.getTag());
      assertEquals((-1222), constantMethodref0.getNameAndTypeIndex());
      assertNotNull(constantMethodref0);
      
      String string0 = constantMethodref0.toString();
      assertEquals("CONSTANT_Methodref[10](class_index = -1989, name_and_type_index = -1222)", string0);
      assertEquals((-1989), constantMethodref0.getClassIndex());
      assertEquals((byte)10, constantMethodref0.getTag());
      assertEquals((-1222), constantMethodref0.getNameAndTypeIndex());
      assertNotNull(string0);
      
      Object[] objectArray0 = new Object[16];
      objectArray0[1] = (Object) "CONSTANT_Methodref[10](class_index = -1989, name_and_type_index = -1222)";
      objectArray0[2] = (Object) constantMethodref0;
      objectArray0[3] = (Object) "CONSTANT_Methodref[10](class_index = -1989, name_and_type_index = -1222)";
      objectArray0[4] = (Object) constantMethodref0;
      objectArray0[5] = (Object) "CONSTANT_Methodref[10](class_index = -1989, name_and_type_index = -1222)";
      objectArray0[6] = (Object) "7t*8";
      objectArray0[7] = (Object) "7t*8";
      objectArray0[8] = (Object) byteArray0;
      String string1 = Utility.printArray(objectArray0);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = Utility.replace("CONSTANT_Methodref[10](class_index = -1989, name_and_type_index = -1222)", "[r\";$)arH", "\t");
      assertEquals("CONSTANT_Methodref[10](class_index = -1989, name_and_type_index = -1222)", string2);
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      try { 
        Utility.typeOfSignature("7l\"%D7H*$");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 7l\"%D7H*$
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[1] = (byte) (-106);
      byteArray0[2] = (byte) (-106);
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      byteArray0[3] = (byte) (-106);
      byteArray0[1] = (byte) (-106);
      byte[] byteArray1 = new byte[5];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte) (-106);
      byteArray1[1] = (byte)100;
      byteArray1[2] = (byte) (-106);
      byteArray1[3] = (byte) (-106);
      byteArray1[4] = (byte)68;
      boolean boolean1 = Utility.equals(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(boolean1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-106), (byte) (-106), (byte) (-106), (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-106), (byte)100, (byte) (-106), (byte) (-106), (byte)68}, byteArray1);
      
      String string0 = Utility.compactClassName("c$*#cBd}|:?7");
      assertEquals("c$*#cBd}|:?7", string0);
      assertNotNull(string0);
      
      String string1 = Utility.signatureToString("Cl}0_OnR%I;aj>/`]z");
      assertEquals("char", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = Utility.signatureToString("Cl}0_OnR%I;aj>/`]z", false);
      assertEquals("char", string2);
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-121);
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)30, (int) (byte) (-117));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-78);
      ConstantMethodref constantMethodref0 = new ConstantMethodref((-1989), (byte) (-78));
      assertEquals((-1989), constantMethodref0.getClassIndex());
      assertEquals((byte)10, constantMethodref0.getTag());
      assertEquals((-78), constantMethodref0.getNameAndTypeIndex());
      assertNotNull(constantMethodref0);
      
      ConstantMethodref constantMethodref1 = new ConstantMethodref((byte) (-78), (byte) (-78));
      assertFalse(constantMethodref1.equals((Object)constantMethodref0));
      assertEquals((byte)10, constantMethodref1.getTag());
      assertEquals((-78), constantMethodref1.getClassIndex());
      assertEquals((-78), constantMethodref1.getNameAndTypeIndex());
      assertNotNull(constantMethodref1);
      
      String string0 = constantMethodref0.toString();
      assertNotSame(constantMethodref0, constantMethodref1);
      assertEquals("CONSTANT_Methodref[10](class_index = -1989, name_and_type_index = -78)", string0);
      assertFalse(constantMethodref0.equals((Object)constantMethodref1));
      assertEquals((-1989), constantMethodref0.getClassIndex());
      assertEquals((byte)10, constantMethodref0.getTag());
      assertEquals((-78), constantMethodref0.getNameAndTypeIndex());
      assertNotNull(string0);
      
      Constant[] constantArray0 = new Constant[4];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(4, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      byte byte0 = Utility.typeOfSignature("CONSTANT_Methodref[10](class_index = -1989, name_and_type_index = -78)");
      assertEquals((byte)5, byte0);
      
      String string1 = Utility.convertString("The list of prefixes must not be null");
      assertEquals("The list of prefixes must not be null", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = Utility.format((byte)5, 3283, false, 'e');
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      String string0 = Utility.convertString("V");
      assertEquals("V", string0);
      assertNotNull(string0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-120);
      byteArray0[1] = (byte) (-120);
      byteArray0[2] = (byte) (-120);
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      byteArray0[3] = (byte) (-120);
      byteArray0[4] = (byte) (-120);
      String string1 = Utility.signatureToString("V", true);
      assertEquals("void", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "V";
      stringArray0[1] = "V";
      stringArray0[2] = "void";
      try { 
        Utility.methodTypeToSignature("V", stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid type: void
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      String string0 = Utility.methodSignatureReturnType("Zvt6");
      assertEquals("boolean", string0);
      assertNotNull(string0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      boolean boolean1 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "bG2}wmiN#");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-47);
      byteArray0[1] = (byte)86;
      byteArray0[2] = (byte) (-47);
      byteArray0[3] = (byte)86;
      byteArray0[4] = (byte)77;
      byteArray0[5] = (byte) (-46);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-47), (byte)86, (byte) (-47), (byte)86, (byte)77, (byte) (-46)}, byteArray0);
      assertNotNull(byteSequence0);
      
      boolean boolean2 = byteSequence0.readBoolean();
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertEquals(1, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-47), (byte)86, (byte) (-47), (byte)86, (byte)77, (byte) (-46)}, byteArray0);
      
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("sastore", string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals(2, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-47), (byte)86, (byte) (-47), (byte)86, (byte)77, (byte) (-46)}, byteArray0);
      assertNotNull(string1);
      
      String string2 = Utility.compactClassName("7bS/ps`U]O(FA6}B/'{");
      assertEquals("7bS.ps`U]O(FA6}B.'{", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertEquals(0, byteSequence1.getIndex());
      assertArrayEquals(new byte[] {(byte) (-47), (byte)86, (byte) (-47), (byte)86, (byte)77, (byte) (-46)}, byteArray0);
      assertNotNull(byteSequence1);
      
      String string3 = Utility.codeToString(byteSequence1, (ConstantPool) null, false);
      assertNotSame(byteSequence1, byteSequence0);
      assertEquals("<illegal opcode>", string3);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals(1, byteSequence1.getIndex());
      assertArrayEquals(new byte[] {(byte) (-47), (byte)86, (byte) (-47), (byte)86, (byte)77, (byte) (-46)}, byteArray0);
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) "3\"W0*kjVMUUP";
      objectArray0[1] = (Object) "3\"W0*kjVMUUP";
      ConstantMethodref constantMethodref0 = new ConstantMethodref(2706, 2706);
      assertEquals((byte)10, constantMethodref0.getTag());
      assertEquals(2706, constantMethodref0.getClassIndex());
      assertEquals(2706, constantMethodref0.getNameAndTypeIndex());
      assertNotNull(constantMethodref0);
      
      ConstantDouble constantDouble0 = new ConstantDouble(2706);
      assertEquals((byte)6, constantDouble0.getTag());
      assertEquals(2706.0, constantDouble0.getBytes(), 0.01);
      assertNotNull(constantDouble0);
      
      Constant[] constantArray0 = new Constant[5];
      constantArray0[0] = (Constant) constantDouble0;
      constantArray0[1] = (Constant) constantDouble0;
      constantArray0[2] = (Constant) constantMethodref0;
      constantArray0[3] = (Constant) constantMethodref0;
      constantArray0[4] = (Constant) constantDouble0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(5, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-14);
      byteArray0[1] = (byte)91;
      ConstantPool constantPool1 = new ConstantPool(constantArray0);
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertEquals(5, constantPool1.getLength());
      assertNotNull(constantPool1);
      
      try { 
        Utility.typeOfSignature("/Jps)(I.(0lnL");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: /Jps)(I.(0lnL
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)114;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      byteArray0[1] = (byte) (-90);
      byteArray0[4] = (byte)9;
      byteArray0[5] = (byte) (-16);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)9, (int) (byte)9);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      String string0 = "<unknown o";
      String string1 = Utility.convertString("<unknown o");
      assertEquals("<unknown o", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      ConstantMethodref constantMethodref0 = new ConstantMethodref((-887), 69);
      assertEquals((byte)10, constantMethodref0.getTag());
      assertEquals((-887), constantMethodref0.getClassIndex());
      assertEquals(69, constantMethodref0.getNameAndTypeIndex());
      assertNotNull(constantMethodref0);
      
      ConstantDouble constantDouble0 = new ConstantDouble(69);
      assertEquals((byte)6, constantDouble0.getTag());
      assertEquals(69.0, constantDouble0.getBytes(), 0.01);
      assertNotNull(constantDouble0);
      
      Constant[] constantArray0 = new Constant[4];
      constantArray0[0] = (Constant) constantMethodref0;
      constantArray0[1] = (Constant) constantDouble0;
      constantArray0[2] = (Constant) constantDouble0;
      constantArray0[3] = (Constant) constantMethodref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(4, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-123);
      int int0 = 183;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 183, (int) (byte) (-123));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-64);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)12, (-2397));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      BCELComparator bCELComparator0 = JavaClass.getComparator();
      assertNotNull(bCELComparator0);
      
      try { 
        Utility.typeOfSignature("6s5+!b|rv");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 6s5+!b|rv
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      String string0 = "RM|CW3hK";
      try { 
        Utility.typeOfSignature("RM|CW3hK");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: RM|CW3hK
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteSequence0);
      
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertEquals(0, byteSequence1.getIndex());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteSequence1);
      
      ConstantPool constantPool0 = null;
      byte[] byteArray1 = new byte[17];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[1] = (byte) (-33);
      byteArray1[2] = (byte)40;
      byteArray1[3] = (byte) (-64);
      int int0 = Utility.setBit((byte) (-64), (byte)40);
      assertEquals((-64), int0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, (ConstantPool) null, (int) (byte)40, (int) (byte) (-33));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      ConstantMethodref constantMethodref0 = new ConstantMethodref((-3823), (-1633267328));
      assertEquals((-1633267328), constantMethodref0.getNameAndTypeIndex());
      assertEquals((-3823), constantMethodref0.getClassIndex());
      assertEquals((byte)10, constantMethodref0.getTag());
      assertNotNull(constantMethodref0);
      
      ConstantMethodref constantMethodref1 = (ConstantMethodref)constantMethodref0.clone();
      assertNotSame(constantMethodref0, constantMethodref1);
      assertNotSame(constantMethodref1, constantMethodref0);
      assertTrue(constantMethodref1.equals((Object)constantMethodref0));
      assertEquals((-1633267328), constantMethodref0.getNameAndTypeIndex());
      assertEquals((-3823), constantMethodref0.getClassIndex());
      assertEquals((byte)10, constantMethodref0.getTag());
      assertEquals((-3823), constantMethodref1.getClassIndex());
      assertEquals((byte)10, constantMethodref1.getTag());
      assertEquals((-1633267328), constantMethodref1.getNameAndTypeIndex());
      assertNotNull(constantMethodref1);
      
      ConstantMethodref constantMethodref2 = (ConstantMethodref)constantMethodref0.copy();
      assertNotSame(constantMethodref0, constantMethodref2);
      assertNotSame(constantMethodref0, constantMethodref1);
      assertNotSame(constantMethodref2, constantMethodref1);
      assertNotSame(constantMethodref2, constantMethodref0);
      assertTrue(constantMethodref0.equals((Object)constantMethodref1));
      assertTrue(constantMethodref2.equals((Object)constantMethodref0));
      assertTrue(constantMethodref2.equals((Object)constantMethodref1));
      assertEquals((-1633267328), constantMethodref0.getNameAndTypeIndex());
      assertEquals((-3823), constantMethodref0.getClassIndex());
      assertEquals((byte)10, constantMethodref0.getTag());
      assertEquals((-1633267328), constantMethodref2.getNameAndTypeIndex());
      assertEquals((-3823), constantMethodref2.getClassIndex());
      assertEquals((byte)10, constantMethodref2.getTag());
      assertNotNull(constantMethodref2);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      constantMethodref0.setNameAndTypeIndex((byte) (-55));
      assertNotSame(constantMethodref0, constantMethodref2);
      assertNotSame(constantMethodref0, constantMethodref1);
      assertFalse(constantMethodref0.equals((Object)constantMethodref2));
      assertFalse(constantMethodref0.equals((Object)constantMethodref1));
      assertEquals((-55), constantMethodref0.getNameAndTypeIndex());
      assertEquals((-3823), constantMethodref0.getClassIndex());
      assertEquals((byte)10, constantMethodref0.getTag());
      
      String string0 = constantMethodref1.toString();
      assertNotSame(constantMethodref0, constantMethodref2);
      assertNotSame(constantMethodref0, constantMethodref1);
      assertNotSame(constantMethodref1, constantMethodref0);
      assertNotSame(constantMethodref1, constantMethodref2);
      assertEquals("CONSTANT_Methodref[10](class_index = -3823, name_and_type_index = -1633267328)", string0);
      assertFalse(constantMethodref0.equals((Object)constantMethodref2));
      assertFalse(constantMethodref0.equals((Object)constantMethodref1));
      assertTrue(constantMethodref1.equals((Object)constantMethodref2));
      assertFalse(constantMethodref1.equals((Object)constantMethodref0));
      assertEquals((-55), constantMethodref0.getNameAndTypeIndex());
      assertEquals((-3823), constantMethodref0.getClassIndex());
      assertEquals((byte)10, constantMethodref0.getTag());
      assertEquals((-3823), constantMethodref1.getClassIndex());
      assertEquals((byte)10, constantMethodref1.getTag());
      assertEquals((-1633267328), constantMethodref1.getNameAndTypeIndex());
      assertNotNull(string0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)5;
      byteArray0[1] = (byte)82;
      byteArray0[2] = (byte) (-55);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-55), 112);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    iconst_2
         // 1:    dastore
         // 2:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      assertFalse(fileSystemHandling1.equals((Object)fileSystemHandling0));
      assertNotNull(fileSystemHandling1);
      
      ConstantPool constantPool0 = null;
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-68);
      byteArray0[1] = (byte) (-68);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 189, (-1250));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      String string0 = Utility.signatureToString("JV");
      assertEquals("long", string0);
      assertNotNull(string0);
      
      String string1 = Utility.convertString("JV");
      assertEquals("JV", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      int int0 = 1982;
      boolean boolean2 = Utility.isSet(742, 1982);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      String[] stringArray0 = null;
      String string2 = Utility.methodTypeToSignature("long", (String[]) null);
      assertEquals("()J", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      // Undeclared exception!
      try { 
        Utility.signatureToString("ifnonnull");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `ifnonnull'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Constant[] constantArray0 = new Constant[4];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(4, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      ConstantPool constantPool1 = constantPool0.copy();
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertEquals(4, constantPool0.getLength());
      assertEquals(4, constantPool1.getLength());
      assertNotNull(constantPool1);
      
      ConstantPool constantPool2 = constantPool0.copy();
      assertNotSame(constantPool0, constantPool2);
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool2, constantPool0);
      assertNotSame(constantPool2, constantPool1);
      assertFalse(constantPool0.equals((Object)constantPool1));
      assertFalse(constantPool2.equals((Object)constantPool0));
      assertFalse(constantPool2.equals((Object)constantPool1));
      assertEquals(4, constantPool0.getLength());
      assertEquals(4, constantPool2.getLength());
      assertNotNull(constantPool2);
      
      byte[] byteArray0 = new byte[18];
      byteArray0[0] = (byte)79;
      byteArray0[1] = (byte)82;
      byteArray0[2] = (byte)76;
      byteArray0[3] = (byte) (-28);
      byteArray0[4] = (byte)82;
      byteArray0[5] = (byte)82;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertNotNull(byteSequence0);
      
      ConstantClass constantClass0 = new ConstantClass((byte)82);
      assertEquals((byte)7, constantClass0.getTag());
      assertEquals(82, constantClass0.getNameIndex());
      assertNotNull(constantClass0);
      
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType((byte)82, 197);
      assertEquals(82, constantNameAndType0.getNameIndex());
      assertEquals((byte)12, constantNameAndType0.getTag());
      assertEquals(197, constantNameAndType0.getSignatureIndex());
      assertNotNull(constantNameAndType0);
      
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic((byte)62, (-2426));
      assertEquals((byte)18, constantInvokeDynamic0.getTag());
      assertEquals(62, constantInvokeDynamic0.getBootstrapMethodAttrIndex());
      assertEquals((-2426), constantInvokeDynamic0.getNameAndTypeIndex());
      assertEquals(62, constantInvokeDynamic0.getClassIndex());
      assertNotNull(constantInvokeDynamic0);
      
      ConstantPool constantPool3 = new ConstantPool(constantArray0);
      assertFalse(constantPool3.equals((Object)constantPool1));
      assertFalse(constantPool3.equals((Object)constantPool2));
      assertFalse(constantPool3.equals((Object)constantPool0));
      assertEquals(4, constantPool3.getLength());
      assertNotNull(constantPool3);
      
      ConstantPool constantPool4 = constantPool0.copy();
      assertNotSame(constantPool4, constantPool1);
      assertNotSame(constantPool4, constantPool0);
      assertNotSame(constantPool4, constantPool2);
      assertNotSame(constantPool4, constantPool3);
      assertNotSame(constantPool0, constantPool2);
      assertNotSame(constantPool0, constantPool3);
      assertNotSame(constantPool0, constantPool4);
      assertNotSame(constantPool0, constantPool1);
      assertFalse(constantPool4.equals((Object)constantPool1));
      assertFalse(constantPool4.equals((Object)constantPool0));
      assertFalse(constantPool4.equals((Object)constantPool2));
      assertFalse(constantPool4.equals((Object)constantPool3));
      assertFalse(constantPool0.equals((Object)constantPool2));
      assertFalse(constantPool0.equals((Object)constantPool3));
      assertFalse(constantPool0.equals((Object)constantPool1));
      assertEquals(4, constantPool4.getLength());
      assertEquals(4, constantPool0.getLength());
      assertNotNull(constantPool4);
      
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertEquals(0, byteSequence1.getIndex());
      assertNotNull(byteSequence1);
      
      String string0 = Utility.codeToString(byteSequence1, constantPool2);
      assertNotSame(byteSequence1, byteSequence0);
      assertNotSame(constantPool0, constantPool2);
      assertNotSame(constantPool0, constantPool3);
      assertNotSame(constantPool0, constantPool4);
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool2, constantPool4);
      assertNotSame(constantPool2, constantPool3);
      assertNotSame(constantPool2, constantPool0);
      assertNotSame(constantPool2, constantPool1);
      assertEquals("iastore", string0);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertFalse(constantPool0.equals((Object)constantPool2));
      assertFalse(constantPool0.equals((Object)constantPool3));
      assertFalse(constantPool0.equals((Object)constantPool4));
      assertFalse(constantPool0.equals((Object)constantPool1));
      assertFalse(constantPool2.equals((Object)constantPool4));
      assertFalse(constantPool2.equals((Object)constantPool3));
      assertFalse(constantPool2.equals((Object)constantPool0));
      assertFalse(constantPool2.equals((Object)constantPool1));
      assertEquals(1, byteSequence1.getIndex());
      assertEquals(4, constantPool0.getLength());
      assertEquals(4, constantPool2.getLength());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      boolean boolean0 = true;
      ConstantMethodref constantMethodref0 = new ConstantMethodref(2706, 2706);
      assertEquals(2706, constantMethodref0.getClassIndex());
      assertEquals(2706, constantMethodref0.getNameAndTypeIndex());
      assertEquals((byte)10, constantMethodref0.getTag());
      assertNotNull(constantMethodref0);
      
      ConstantDouble constantDouble0 = new ConstantDouble(0.0);
      assertEquals((byte)6, constantDouble0.getTag());
      assertEquals(0.0, constantDouble0.getBytes(), 0.01);
      assertNotNull(constantDouble0);
      
      Constant[] constantArray0 = new Constant[2];
      String string0 = "org.apache.bcel.Constants";
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(2, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte)113;
      byteArray0[0] = (byte)113;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)95, (int) (byte)83);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      String string0 = "F7(C0H&B|/.fcT";
      String string1 = "zYK28zr{C";
      String string2 = Utility.convertString("F7(C0H&B|/.fcT");
      assertEquals("F7(C0H&B|/.fcT", string2);
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      byte byte0 = Constants.CONSTANT_Methodref;
      assertEquals((byte)10, byte0);
      
      String string3 = ":";
      try { 
        Utility.typeOfSignature(":");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: :
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)50;
      boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      byteArray0[1] = (byte) (-42);
      byte[] byteArray1 = Utility.decode("YCGVo3,U%U%/", false);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(0, byteSequence0.getIndex());
      assertNotNull(byteSequence0);
      
      ConstantClass constantClass0 = new ConstantClass((byte) (-42));
      assertEquals((byte)7, constantClass0.getTag());
      assertEquals((-42), constantClass0.getNameIndex());
      assertNotNull(constantClass0);
      
      Constant[] constantArray0 = new Constant[7];
      constantArray0[0] = (Constant) constantClass0;
      constantArray0[1] = (Constant) constantClass0;
      constantArray0[2] = (Constant) constantClass0;
      constantArray0[3] = (Constant) constantClass0;
      constantArray0[4] = (Constant) constantClass0;
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertEquals(0, byteSequence1.getIndex());
      assertArrayEquals(new byte[] {(byte)50, (byte) (-42), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteSequence1);
      
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(7, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      ConstantPool constantPool1 = constantPool0.copy();
      assertNotSame(constantPool1, constantPool0);
      assertNotSame(constantPool0, constantPool1);
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertEquals(7, constantPool1.getLength());
      assertEquals(7, constantPool0.getLength());
      assertNotNull(constantPool1);
      
      String string0 = Utility.codeToString(byteSequence0, constantPool1, false);
      assertNotSame(constantPool1, constantPool0);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteSequence0, byteSequence1);
      assertNotSame(constantPool0, constantPool1);
      assertEquals("dup", string0);
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteSequence0.equals((Object)byteSequence1));
      assertFalse(constantPool0.equals((Object)constantPool1));
      assertEquals(7, constantPool1.getLength());
      assertEquals(1, byteSequence0.getIndex());
      assertEquals(7, constantPool0.getLength());
      assertNotNull(string0);
      
      String string1 = Utility.printArray((Object[]) constantArray0, false, true);
      assertEquals("\"CONSTANT_Class[7](name_index = -42)\", \"CONSTANT_Class[7](name_index = -42)\", \"CONSTANT_Class[7](name_index = -42)\", \"CONSTANT_Class[7](name_index = -42)\", \"CONSTANT_Class[7](name_index = -42)\", null, null", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      byte[] byteArray0 = new byte[17];
      byteArray0[0] = (byte)85;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 1168, 11);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      String string0 = Utility.getSignature("\t");
      assertEquals("L;", string0);
      assertNotNull(string0);
      
      int int0 = Utility.clearBit(1891, 2748);
      assertEquals(1891, int0);
      
      String string1 = Utility.convertString("\t");
      assertEquals("\t", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType((-1440), 100);
      assertEquals((byte)12, constantNameAndType0.getTag());
      assertEquals((-1440), constantNameAndType0.getNameIndex());
      assertEquals(100, constantNameAndType0.getSignatureIndex());
      assertNotNull(constantNameAndType0);
      
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic((byte)82, 100);
      assertEquals((byte)18, constantInvokeDynamic0.getTag());
      assertEquals(82, constantInvokeDynamic0.getClassIndex());
      assertEquals(100, constantInvokeDynamic0.getNameAndTypeIndex());
      assertEquals(82, constantInvokeDynamic0.getBootstrapMethodAttrIndex());
      assertNotNull(constantInvokeDynamic0);
      
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      String string2 = constantPool0.toString();
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals(0, constantPool0.getLength());
      assertNotNull(string2);
      
      ConstantPool constantPool1 = constantPool0.copy();
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertEquals(0, constantPool0.getLength());
      assertEquals(0, constantPool1.getLength());
      assertNotNull(constantPool1);
      
      try { 
        Utility.methodSignatureReturnType("E=?L80.lH^phk]|A|j");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `E=?L80.lH^phk]|A|j'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      String string0 = Utility.getSignature("x\"");
      assertEquals("Lx\";", string0);
      assertNotNull(string0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-63);
      byteArray0[2] = (byte) (-63);
      byteArray0[3] = (byte) (-63);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 1780, (int) (byte)0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Constant[] constantArray0 = new Constant[2];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(2, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      MockFile mockFile0 = new MockFile("P*[`A'ST-0~\"q", "P*[`A'ST-0~\"q");
      assertEquals(0L, mockFile0.lastModified());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.canExecute());
      assertEquals("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/1_bcel/P*[`A'ST-0~\"q", mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("P*[`A'ST-0~\"q", mockFile0.getName());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.canRead());
      assertEquals("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/1_bcel/P*[`A'ST-0~\"q/P*[`A'ST-0~\"q", mockFile0.toString());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertNotNull(mockFile0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canWrite());
      assertEquals("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/1_bcel/P*[`A'ST-0~\"q", mockFile0.getParent());
      assertTrue(mockFile0.canExecute());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("P*[`A'ST-0~\"q", mockFile0.getName());
      assertTrue(mockFile0.exists());
      assertFalse(mockFile0.isDirectory());
      assertEquals("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/1_bcel/P*[`A'ST-0~\"q/P*[`A'ST-0~\"q", mockFile0.toString());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertNotNull(mockPrintStream0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)44;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 83, 83);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic((-1278), (byte) (-86));
      assertEquals((-86), constantInvokeDynamic0.getNameAndTypeIndex());
      assertEquals((-1278), constantInvokeDynamic0.getClassIndex());
      assertEquals((byte)18, constantInvokeDynamic0.getTag());
      assertEquals((-1278), constantInvokeDynamic0.getBootstrapMethodAttrIndex());
      assertNotNull(constantInvokeDynamic0);
      
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) null;
      BCELComparator bCELComparator0 = Field.getComparator();
      assertNotNull(bCELComparator0);
      
      Constant.setComparator(bCELComparator0);
      objectArray0[5] = (Object) constantInvokeDynamic0;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)77;
      byteArray0[1] = (byte)47;
      byteArray0[2] = (byte)24;
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte)24;
      byteArray0[5] = (byte)24;
      byteArray0[6] = (byte)21;
      byteArray0[7] = (byte)86;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)77, (byte)47, (byte)24, (byte)1, (byte)24, (byte)24, (byte)21, (byte)86}, byteArray0);
      assertNotNull(byteSequence0);
      
      boolean boolean0 = byteSequence0.readBoolean();
      assertTrue(boolean0);
      assertEquals(1, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)77, (byte)47, (byte)24, (byte)1, (byte)24, (byte)24, (byte)21, (byte)86}, byteArray0);
      
      byteSequence0.mark(109);
      assertEquals(1, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)77, (byte)47, (byte)24, (byte)1, (byte)24, (byte)24, (byte)21, (byte)86}, byteArray0);
      
      String string0 = Utility.printArray(objectArray0);
      assertEquals("{null, null, null, null, null, CONSTANT_InvokeDynamic[18](bootstrap_method_attr_index = -1278, name_and_type_index = -86)}", string0);
      assertNotNull(string0);
      
      String string1 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals("laload", string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals(2, byteSequence0.getIndex());
      assertEquals(0, constantPool0.getLength());
      assertArrayEquals(new byte[] {(byte)77, (byte)47, (byte)24, (byte)1, (byte)24, (byte)24, (byte)21, (byte)86}, byteArray0);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      Constant[] constantArray0 = new Constant[2];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(2, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      ConstantPool constantPool1 = constantPool0.copy();
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertEquals(2, constantPool0.getLength());
      assertEquals(2, constantPool1.getLength());
      assertNotNull(constantPool1);
      
      ConstantMethodref constantMethodref0 = new ConstantMethodref(52, 103);
      assertEquals(103, constantMethodref0.getNameAndTypeIndex());
      assertEquals((byte)10, constantMethodref0.getTag());
      assertEquals(52, constantMethodref0.getClassIndex());
      assertNotNull(constantMethodref0);
      
      String string0 = constantMethodref0.toString();
      assertEquals("CONSTANT_Methodref[10](class_index = 52, name_and_type_index = 103)", string0);
      assertEquals(103, constantMethodref0.getNameAndTypeIndex());
      assertEquals((byte)10, constantMethodref0.getTag());
      assertEquals(52, constantMethodref0.getClassIndex());
      assertNotNull(string0);
      
      String string1 = Utility.printArray((Object[]) null);
      assertNull(string1);
      
      String string2 = Utility.signatureToString("Bs- k", true);
      assertEquals("byte", string2);
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      ConstantPool constantPool2 = new ConstantPool(constantArray0);
      assertFalse(constantPool2.equals((Object)constantPool1));
      assertFalse(constantPool2.equals((Object)constantPool0));
      assertEquals(2, constantPool2.getLength());
      assertNotNull(constantPool2);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)50;
      byteArray0[1] = (byte)119;
      byteArray0[2] = (byte)51;
      byteArray0[3] = (byte)36;
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte)50, (byte)119, (byte)51, (byte)36}, byteArray0);
      
      String string3 = Utility.codeToString(byteArray0, constantPool1, (-4300), (-4300));
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool0, constantPool2);
      assertNotSame(constantPool1, constantPool0);
      assertNotSame(constantPool1, constantPool2);
      assertEquals("0:    aaload\n1:    dneg\n2:    baload\n3:    fload_2\n", string3);
      assertFalse(constantPool0.equals((Object)constantPool1));
      assertFalse(constantPool0.equals((Object)constantPool2));
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertFalse(constantPool1.equals((Object)constantPool2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals(2, constantPool0.getLength());
      assertEquals(2, constantPool1.getLength());
      assertArrayEquals(new byte[] {(byte)50, (byte)119, (byte)51, (byte)36}, byteArray0);
      assertNotNull(string3);
      
      int int0 = Utility.setBit((byte)51, (-32768));
      assertEquals(51, int0);
      
      String string4 = Utility.compactClassName("yvl9Vdx?*", true);
      assertEquals("yvl9Vdx?*", string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      byte[] byteArray0 = Utility.decode("5G8A0\"Q2Yey\"U9", false);
      assertNotNull(byteArray0);
      
      ConstantPool constantPool1 = constantPool0.copy();
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertEquals(0, constantPool0.getLength());
      assertEquals(0, constantPool1.getLength());
      assertNotNull(constantPool1);
      
      String string0 = constantPool1.toString();
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      assertEquals("", string0);
      assertFalse(constantPool0.equals((Object)constantPool1));
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertEquals(0, constantPool0.getLength());
      assertEquals(0, constantPool1.getLength());
      assertNotNull(string0);
      
      ConstantPool constantPool2 = new ConstantPool(constantArray0);
      assertFalse(constantPool2.equals((Object)constantPool1));
      assertFalse(constantPool2.equals((Object)constantPool0));
      assertEquals(0, constantPool2.getLength());
      assertNotNull(constantPool2);
      
      ConstantPool constantPool3 = constantPool1.copy();
      assertNotSame(constantPool0, constantPool3);
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool0, constantPool2);
      assertNotSame(constantPool1, constantPool3);
      assertNotSame(constantPool1, constantPool2);
      assertNotSame(constantPool1, constantPool0);
      assertNotSame(constantPool3, constantPool1);
      assertNotSame(constantPool3, constantPool2);
      assertNotSame(constantPool3, constantPool0);
      assertFalse(constantPool0.equals((Object)constantPool1));
      assertFalse(constantPool0.equals((Object)constantPool2));
      assertFalse(constantPool1.equals((Object)constantPool2));
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertFalse(constantPool3.equals((Object)constantPool1));
      assertFalse(constantPool3.equals((Object)constantPool2));
      assertFalse(constantPool3.equals((Object)constantPool0));
      assertEquals(0, constantPool0.getLength());
      assertEquals(0, constantPool1.getLength());
      assertEquals(0, constantPool3.getLength());
      assertNotNull(constantPool3);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 3298, 3298);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      byte[] byteArray0 = new byte[17];
      byteArray0[0] = (byte)85;
      short short0 = Constants.BALOAD;
      assertEquals((short)51, short0);
      
      try { 
        Utility.methodSignatureReturnType("H");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `H'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      String string0 = "Warning: Padding byte != 0 in ";
      String string1 = Constants.CONSTRUCTOR_NAME;
      assertEquals("<init>", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      byte[] byteArray0 = new byte[0];
      ConstantPool constantPool0 = null;
      String string2 = Utility.compactClassName("<init>", true);
      assertEquals("<init>", string2);
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-30), 146);
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNotNull(string3);
      
      boolean boolean0 = Utility.isJavaIdentifierPart('_');
      assertTrue(boolean0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNotNull(byteSequence0);
      
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      boolean boolean0 = false;
      String string0 = Constants.ILLEGAL_TYPE;
      assertEquals("<illegal type>", string0);
      assertNotNull(string0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)54;
      byteArray0[1] = (byte)54;
      byteArray0[2] = (byte)77;
      byteArray0[3] = (byte)82;
      byteArray0[4] = (byte) (-83);
      byteArray0[5] = (byte)52;
      byteArray0[7] = (byte) (-28);
      Constant[] constantArray0 = new Constant[3];
      ConstantClass constantClass0 = new ConstantClass((byte)52);
      assertEquals(52, constantClass0.getNameIndex());
      assertEquals((byte)7, constantClass0.getTag());
      assertNotNull(constantClass0);
      
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(3, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      ConstantPool constantPool1 = constantPool0.copy();
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertEquals(3, constantPool0.getLength());
      assertEquals(3, constantPool1.getLength());
      assertNotNull(constantPool1);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, 66, (int) (byte) (-83));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)121;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 171, (int) (byte) (-3));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      String string0 = "reLurn";
      String string1 = Utility.getSignature("reLurn");
      assertEquals("LreLurn;", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      byte[] byteArray0 = new byte[10];
      byte[] byteArray1 = Utility.decode("reLurn", false);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)114, (byte)101, (byte)76, (byte)117, (byte)114, (byte)110}, byteArray1);
      assertNotNull(byteArray1);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteSequence0);
      
      ConstantString constantString0 = new ConstantString(76);
      assertEquals((byte)8, constantString0.getTag());
      assertEquals(76, constantString0.getStringIndex());
      assertNotNull(constantString0);
      
      Constant[] constantArray0 = new Constant[2];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(2, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      ConstantPool constantPool1 = constantPool0.copy();
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertEquals(2, constantPool0.getLength());
      assertEquals(2, constantPool1.getLength());
      assertNotNull(constantPool1);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, constantPool1, 76, 106);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      constantPool0.setConstantPool(constantArray0);
      assertEquals(0, constantPool0.getLength());
      
      String string0 = constantPool0.toString();
      assertEquals("", string0);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(string0);
      
      ConstantPool constantPool1 = constantPool0.copy();
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertEquals(0, constantPool0.getLength());
      assertEquals(0, constantPool1.getLength());
      assertNotNull(constantPool1);
      
      String string1 = Constants.ILLEGAL_TYPE;
      assertEquals("<illegal type>", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      byte[] byteArray0 = new byte[10];
      byteArray0[1] = (byte) (-91);
      byteArray0[2] = (byte)68;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      assertFalse(fileSystemHandling1.equals((Object)fileSystemHandling0));
      assertNotNull(fileSystemHandling1);
      
      byteArray0[5] = (byte)21;
      byteArray0[6] = (byte)68;
      byteArray0[7] = (byte)68;
      byteArray0[8] = (byte)21;
      ConstantPool constantPool2 = new ConstantPool(constantArray0);
      assertFalse(constantPool2.equals((Object)constantPool1));
      assertFalse(constantPool2.equals((Object)constantPool0));
      assertEquals(0, constantPool2.getLength());
      assertNotNull(constantPool2);
      
      String string2 = "[]";
      // Undeclared exception!
      try { 
        Utility.signatureToString("[]");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `]'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      String string0 = Utility.getSignature("return");
      assertEquals("Lreturn;", string0);
      assertNotNull(string0);
      
      byte byte0 = (byte)0;
      boolean boolean0 = false;
      byte[] byteArray0 = Utility.decode("/\"Xy\"$", false);
      assertArrayEquals(new byte[] {(byte)47, (byte)34, (byte)88, (byte)121, (byte)34}, byteArray0);
      assertNotNull(byteArray0);
      
      EvoSuiteFile evoSuiteFile0 = null;
      // Undeclared exception!
      try { 
        Utility.replace("Lreturn;", (String) null, "B(`:4(BPVPFF");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      String string0 = Utility.convertString("<unknown o");
      assertEquals("<unknown o", string0);
      assertNotNull(string0);
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "newarray");
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)109;
      byteArray0[1] = (byte)11;
      byte byte0 = (byte) (-63);
      byteArray0[2] = (byte) (-63);
      byte byte1 = (byte)63;
      byteArray0[3] = (byte)63;
      byteArray0[4] = (byte) (-92);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)109, (byte)11, (byte) (-63), (byte)63, (byte) (-92)}, byteArray0);
      assertNotNull(byteSequence0);
      
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertEquals(0, byteSequence1.getIndex());
      assertArrayEquals(new byte[] {(byte)109, (byte)11, (byte) (-63), (byte)63, (byte) (-92)}, byteArray0);
      assertNotNull(byteSequence1);
      
      boolean boolean1 = byteSequence1.readBoolean();
      assertNotSame(byteSequence1, byteSequence0);
      assertTrue(boolean1);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertFalse(boolean1 == boolean0);
      assertEquals(1, byteSequence1.getIndex());
      assertArrayEquals(new byte[] {(byte)109, (byte)11, (byte) (-63), (byte)63, (byte) (-92)}, byteArray0);
      
      ConstantPool constantPool0 = null;
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertNotSame(byteSequence0, byteSequence1);
      assertEquals("ldiv", string1);
      assertFalse(byteSequence0.equals((Object)byteSequence1));
      assertFalse(string1.equals((Object)string0));
      assertEquals(1, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)109, (byte)11, (byte) (-63), (byte)63, (byte) (-92)}, byteArray0);
      assertNotNull(string1);
      
      try { 
        DataInputStream.readUTF((DataInput) byteSequence1);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-58);
      byteArray0[3] = (byte)92;
      BCELComparator bCELComparator0 = JavaClass.getComparator();
      assertNotNull(bCELComparator0);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-58), (byte)0, (byte)0, (byte)92, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteSequence0);
      
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertEquals(0, constantPool1.getLength());
      assertNotNull(constantPool1);
      
      String string0 = Utility.codeToString(byteSequence0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      assertEquals("ifnull\t\t#0", string0);
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertEquals(3, byteSequence0.getIndex());
      assertEquals(0, constantPool1.getLength());
      assertArrayEquals(new byte[] {(byte) (-58), (byte)0, (byte)0, (byte)92, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(string0);
      
      try { 
        Utility.typeOfSignature("ifnull\t\t#0");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ifnull\t\t#0
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      Constant[] constantArray0 = new Constant[2];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(2, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      ConstantPool constantPool1 = constantPool0.copy();
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertEquals(2, constantPool0.getLength());
      assertEquals(2, constantPool1.getLength());
      assertNotNull(constantPool1);
      
      ConstantPool constantPool2 = constantPool1.copy();
      assertNotSame(constantPool0, constantPool2);
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      assertNotSame(constantPool1, constantPool2);
      assertNotSame(constantPool2, constantPool0);
      assertNotSame(constantPool2, constantPool1);
      assertFalse(constantPool0.equals((Object)constantPool1));
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertFalse(constantPool2.equals((Object)constantPool0));
      assertFalse(constantPool2.equals((Object)constantPool1));
      assertEquals(2, constantPool0.getLength());
      assertEquals(2, constantPool1.getLength());
      assertEquals(2, constantPool2.getLength());
      assertNotNull(constantPool2);
      
      String string0 = constantPool1.toString();
      assertNotSame(constantPool0, constantPool2);
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      assertNotSame(constantPool1, constantPool2);
      assertEquals("1)null\n", string0);
      assertFalse(constantPool0.equals((Object)constantPool2));
      assertFalse(constantPool0.equals((Object)constantPool1));
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertFalse(constantPool1.equals((Object)constantPool2));
      assertEquals(2, constantPool0.getLength());
      assertEquals(2, constantPool1.getLength());
      assertNotNull(string0);
      
      constantPool0.setConstantPool(constantArray0);
      assertNotSame(constantPool0, constantPool2);
      assertNotSame(constantPool0, constantPool1);
      assertFalse(constantPool0.equals((Object)constantPool2));
      assertFalse(constantPool0.equals((Object)constantPool1));
      assertEquals(2, constantPool0.getLength());
      
      String string1 = constantPool0.toString();
      assertNotSame(constantPool0, constantPool2);
      assertNotSame(constantPool0, constantPool1);
      assertEquals("1)null\n", string1);
      assertFalse(constantPool0.equals((Object)constantPool2));
      assertFalse(constantPool0.equals((Object)constantPool1));
      assertTrue(string1.equals((Object)string0));
      assertEquals(2, constantPool0.getLength());
      assertNotNull(string1);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-73);
      byteArray0[1] = (byte) (-73);
      byteArray0[2] = (byte) (-73);
      byteArray0[3] = (byte) (-73);
      byteArray0[4] = (byte) (-73);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-73), (int) (byte) (-73));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 47031. Constant pool size is: 2
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      String string0 = Utility.getSignature("return");
      assertEquals("Lreturn;", string0);
      assertNotNull(string0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-3);
      byteArray0[1] = (byte) (-3);
      byteArray0[2] = (byte)94;
      byteArray0[3] = (byte) (-3);
      byteArray0[4] = (byte) (-3);
      byteArray0[5] = (byte)59;
      byteArray0[6] = (byte) (-3);
      byteArray0[7] = (byte) (-3);
      byteArray0[8] = (byte) (-3);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 95, (int) (byte) (-3));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "impdep2";
      stringArray0[1] = "impdep2";
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)97;
      byteArray0[1] = (byte)64;
      byteArray0[2] = (byte)97;
      byteArray0[3] = (byte)23;
      byteArray0[4] = (byte)97;
      byteArray0[5] = (byte) (-23);
      byteArray0[6] = (byte)97;
      byteArray0[7] = (byte) (-105);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 84, (int) (byte)97);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      String string0 = Constants.ILLEGAL_TYPE;
      assertEquals("<illegal type>", string0);
      assertNotNull(string0);
      
      byte[] byteArray0 = Utility.decode("lL<S n", false);
      assertArrayEquals(new byte[] {(byte)108, (byte)76, (byte)60, (byte)83, (byte)32, (byte)110}, byteArray0);
      assertNotNull(byteArray0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)122, (int) (byte)122);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)121;
      byteArray0[1] = (byte) (-64);
      byteArray0[2] = (byte) (-3);
      byteArray0[3] = (byte) (-64);
      byteArray0[4] = (byte) (-64);
      byteArray0[5] = (byte)121;
      byte[] byteArray1 = new byte[5];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte) (-3);
      byteArray1[1] = (byte)20;
      byteArray1[2] = (byte)121;
      byteArray1[3] = (byte) (-3);
      byteArray1[4] = (byte) (-3);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, (ConstantPool) null, (int) (byte)20, 163);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)70;
      byteArray0[1] = (byte)18;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)70, (byte)18}, byteArray0);
      assertNotNull(byteSequence0);
      
      int int0 = byteSequence0.available();
      assertEquals(2, int0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)70, (byte)18}, byteArray0);
      
      int int1 = Utility.setBit(124, 2);
      assertEquals(124, int1);
      assertFalse(int1 == int0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)70, (int) (byte)40);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      boolean boolean1 = Utility.isSet(204, 204);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(1, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      String string0 = Utility.compactClassName("\t\t<", false);
      assertEquals("\t\t<", string0);
      assertNotNull(string0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-8);
      byteArray0[0] = (byte) (-114);
      byteArray0[2] = (byte) (-114);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 204, (int) (byte)0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      boolean boolean1 = true;
      boolean boolean2 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic(104, (byte)16);
      assertEquals((byte)18, constantInvokeDynamic0.getTag());
      assertEquals(16, constantInvokeDynamic0.getNameAndTypeIndex());
      assertEquals(104, constantInvokeDynamic0.getBootstrapMethodAttrIndex());
      assertEquals(104, constantInvokeDynamic0.getClassIndex());
      assertNotNull(constantInvokeDynamic0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)16;
      byteArray0[1] = (byte)16;
      byteArray0[2] = (byte) (-103);
      byteArray0[3] = (byte)16;
      byteArray0[4] = (byte)16;
      byteArray0[5] = (byte)16;
      byteArray0[6] = (byte)16;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)16, (byte)16, (byte) (-103), (byte)16, (byte)16, (byte)16, (byte)16}, byteArray0);
      assertNotNull(byteSequence0);
      
      boolean boolean3 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean3);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      
      byte[] byteArray1 = new byte[3];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte)16;
      byteArray1[1] = (byte) (-103);
      byteArray1[2] = (byte) (-103);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, (ConstantPool) null, 104, (-1573));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)121;
      byteArray0[1] = (byte) (-86);
      byteArray0[2] = (byte)9;
      byteArray0[3] = (byte) (-86);
      byteArray0[4] = (byte) (-86);
      byteArray0[5] = (byte)121;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)121, (byte) (-86), (byte)9, (byte) (-86), (byte) (-86), (byte)121, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteSequence0);
      
      short short0 = byteSequence0.readShort();
      assertEquals((short)31146, short0);
      assertEquals(2, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)121, (byte) (-86), (byte)9, (byte) (-86), (byte) (-86), (byte)121, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      boolean boolean1 = byteSequence0.readBoolean();
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      assertEquals(3, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)121, (byte) (-86), (byte)9, (byte) (-86), (byte) (-86), (byte)121, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[3] = (byte)45;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)45, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteSequence0);
      
      ConstantClass constantClass0 = new ConstantClass(1662);
      assertEquals(1662, constantClass0.getNameIndex());
      assertEquals((byte)7, constantClass0.getTag());
      assertNotNull(constantClass0);
      
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      ConstantPool constantPool1 = constantPool0.copy();
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertEquals(0, constantPool0.getLength());
      assertEquals(0, constantPool1.getLength());
      assertNotNull(constantPool1);
      
      String string0 = Utility.codeToString(byteArray0, constantPool1, (int) (byte) (-63), 168);
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      assertEquals("0:    nop\n1:    nop\n2:    nop\n3:    aload_3\n4:    nop\n5:    nop\n", string0);
      assertFalse(constantPool0.equals((Object)constantPool1));
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertEquals(0, constantPool0.getLength());
      assertEquals(0, constantPool1.getLength());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)45, (byte)0, (byte)0}, byteArray0);
      assertNotNull(string0);
      
      String string1 = "rKDBJGW]qI";
      try { 
        Utility.typeOfSignature("KI f!p");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: KI f!p
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-60);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-60), (byte)0}, byteArray0);
      assertNotNull(byteSequence0);
      
      ConstantClass constantClass0 = new ConstantClass((byte) (-60));
      assertEquals((-60), constantClass0.getNameIndex());
      assertEquals((byte)7, constantClass0.getTag());
      assertNotNull(constantClass0);
      
      Constant[] constantArray0 = new Constant[9];
      constantArray0[0] = (Constant) constantClass0;
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertEquals(0, byteSequence1.getIndex());
      assertArrayEquals(new byte[] {(byte) (-60), (byte)0}, byteArray0);
      assertNotNull(byteSequence1);
      
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(9, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      String string0 = Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-63), 199);
      assertEquals("0:    wide\t(wide)\n1:    nop\n", string0);
      assertEquals(9, constantPool0.getLength());
      assertArrayEquals(new byte[] {(byte) (-60), (byte)0}, byteArray0);
      assertNotNull(string0);
      
      int int0 = Utility.setBit(199, (byte)0);
      assertEquals(199, int0);
      
      String string1 = Utility.classOrInterface((byte)0);
      assertEquals("class", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)36;
      byteArray0[1] = (byte) (-119);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 1632, (int) (byte) (-119), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)9;
      byteArray0[1] = (byte) (-128);
      byteArray0[0] = (byte) (-102);
      byteArray0[0] = (byte) (-102);
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      byteArray0[4] = (byte)63;
      boolean boolean1 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new byte[] {(byte) (-102), (byte) (-128), (byte)0, (byte)0, (byte)63}, byteArray0);
      
      String string0 = Utility.convertString("Warning: Padding byte != 0 in ");
      assertEquals("Warning: Padding byte != 0 in ", string0);
      assertNotNull(string0);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      String string1 = Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-102), (int) (byte) (-102));
      assertEquals("0:    ifne\t\t#-32768\n3:    nop\n4:    lstore_0\n", string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals(0, constantPool0.getLength());
      assertArrayEquals(new byte[] {(byte) (-102), (byte) (-128), (byte)0, (byte)0, (byte)63}, byteArray0);
      assertNotNull(string1);
      
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertEquals(0, constantPool1.getLength());
      assertNotNull(constantPool1);
      
      // Undeclared exception!
      try { 
        constantPool1.copy();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      Constant[] constantArray0 = new Constant[2];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(2, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      String string0 = Utility.printArray((Object[]) null);
      assertNull(string0);
      
      boolean boolean0 = false;
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)50;
      byteArray0[1] = (byte)124;
      int int0 = 62;
      int int1 = 2220;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)50, 183);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      Object[] objectArray0 = null;
      String string0 = Utility.printArray((Object[]) null);
      assertNull(string0);
      
      String string1 = "Bs- k";
      String string2 = Utility.signatureToString("Bs- k", true);
      assertEquals("byte", string2);
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-98);
      byteArray0[2] = (byte) (-108);
      byteArray0[3] = (byte) (-80);
      byteArray0[4] = (byte)62;
      byteArray0[5] = (byte) (-76);
      String string3 = Constants.STATIC_INITIALIZER_NAME;
      assertEquals("<clinit>", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      String string4 = Utility.classOrInterface((byte)0);
      assertEquals("class", string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-98), (byte)0, (byte) (-108), (byte) (-80), (byte)62, (byte) (-76)}, byteArray0);
      assertNotNull(byteSequence0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 4484, 4484);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-76);
      byteArray0[3] = (byte)92;
      BCELComparator bCELComparator0 = JavaClass.getComparator();
      assertNotNull(bCELComparator0);
      
      Constant.setComparator(bCELComparator0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 167, (int) (byte) (-76));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic((byte)43, (byte)43);
      assertEquals(43, constantInvokeDynamic0.getNameAndTypeIndex());
      assertEquals(43, constantInvokeDynamic0.getClassIndex());
      assertEquals((byte)18, constantInvokeDynamic0.getTag());
      assertEquals(43, constantInvokeDynamic0.getBootstrapMethodAttrIndex());
      assertNotNull(constantInvokeDynamic0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)25;
      byteArray0[2] = (byte)43;
      byteArray0[4] = (byte)25;
      byteArray0[6] = (byte)25;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)25, (byte)0, (byte)43, (byte)0, (byte)25, (byte)0, (byte)25}, byteArray0);
      assertNotNull(byteSequence0);
      
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle((byte)25, 119);
      assertEquals((byte)15, constantMethodHandle0.getTag());
      assertEquals(119, constantMethodHandle0.getReferenceIndex());
      assertEquals(25, constantMethodHandle0.getReferenceKind());
      assertNotNull(constantMethodHandle0);
      
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      assertNotNull(emptyVisitor0);
      
      ConstantMethodHandle constantMethodHandle1 = new ConstantMethodHandle(constantMethodHandle0);
      assertTrue(constantMethodHandle1.equals((Object)constantMethodHandle0));
      assertEquals((byte)15, constantMethodHandle0.getTag());
      assertEquals(119, constantMethodHandle0.getReferenceIndex());
      assertEquals(25, constantMethodHandle0.getReferenceKind());
      assertEquals(119, constantMethodHandle1.getReferenceIndex());
      assertEquals((byte)15, constantMethodHandle1.getTag());
      assertEquals(25, constantMethodHandle1.getReferenceKind());
      assertNotNull(constantMethodHandle1);
      
      constantMethodHandle0.setReferenceIndex(119);
      assertNotSame(constantMethodHandle0, constantMethodHandle1);
      assertTrue(constantMethodHandle0.equals((Object)constantMethodHandle1));
      assertEquals((byte)15, constantMethodHandle0.getTag());
      assertEquals(119, constantMethodHandle0.getReferenceIndex());
      assertEquals(25, constantMethodHandle0.getReferenceKind());
      
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      String string0 = Utility.compactClassName(", high = ", true);
      assertEquals(", high = ", string0);
      assertNotNull(string0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 54, 170);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[1] = (byte) (-128);
      byteArray0[2] = (byte) (-102);
      byteArray0[3] = (byte)32;
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)0, (byte) (-128), (byte) (-102), (byte)32, (byte)0}, byteArray0);
      assertNotNull(byteSequence0);
      
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle((byte) (-128), (byte) (-102));
      assertEquals((byte)15, constantMethodHandle0.getTag());
      assertEquals((-128), constantMethodHandle0.getReferenceKind());
      assertEquals((-102), constantMethodHandle0.getReferenceIndex());
      assertNotNull(constantMethodHandle0);
      
      ConstantMethodHandle constantMethodHandle1 = new ConstantMethodHandle(constantMethodHandle0);
      assertTrue(constantMethodHandle1.equals((Object)constantMethodHandle0));
      assertEquals((byte)15, constantMethodHandle0.getTag());
      assertEquals((-128), constantMethodHandle0.getReferenceKind());
      assertEquals((-102), constantMethodHandle0.getReferenceIndex());
      assertEquals((-102), constantMethodHandle1.getReferenceIndex());
      assertEquals((byte)15, constantMethodHandle1.getTag());
      assertEquals((-128), constantMethodHandle1.getReferenceKind());
      assertNotNull(constantMethodHandle1);
      
      constantMethodHandle1.setReferenceIndex((-371));
      assertNotSame(constantMethodHandle0, constantMethodHandle1);
      assertNotSame(constantMethodHandle1, constantMethodHandle0);
      assertFalse(constantMethodHandle0.equals((Object)constantMethodHandle1));
      assertFalse(constantMethodHandle1.equals((Object)constantMethodHandle0));
      assertEquals((byte)15, constantMethodHandle0.getTag());
      assertEquals((-128), constantMethodHandle0.getReferenceKind());
      assertEquals((-102), constantMethodHandle0.getReferenceIndex());
      assertEquals((byte)15, constantMethodHandle1.getTag());
      assertEquals((-371), constantMethodHandle1.getReferenceIndex());
      assertEquals((-128), constantMethodHandle1.getReferenceKind());
      
      Constant[] constantArray0 = new Constant[3];
      constantArray0[0] = (Constant) constantMethodHandle1;
      constantArray0[1] = (Constant) constantMethodHandle1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(3, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 159, (int) (byte) (-128));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-127);
      byteArray0[1] = (byte) (-81);
      boolean boolean0 = true;
      String string0 = Utility.compactClassName("Invalid frame type found while parsing stack map table: ", "Invalid frame type found while parsing stack map table: ", true);
      assertEquals("", string0);
      assertNotNull(string0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-127), (byte) (-81), (byte)0}, byteArray0);
      assertNotNull(byteSequence0);
      
      ConstantClass constantClass0 = new ConstantClass((byte) (-127));
      assertEquals((-127), constantClass0.getNameIndex());
      assertEquals((byte)7, constantClass0.getTag());
      assertNotNull(constantClass0);
      
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 5272, (int) (byte) (-127));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      Constant[] constantArray0 = new Constant[2];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(2, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      String string0 = Constants.ILLEGAL_TYPE;
      assertEquals("<illegal type>", string0);
      assertNotNull(string0);
      
      ConstantPool constantPool1 = constantPool0.copy();
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertEquals(2, constantPool0.getLength());
      assertEquals(2, constantPool1.getLength());
      assertNotNull(constantPool1);
      
      ConstantPool constantPool2 = new ConstantPool(constantArray0);
      assertFalse(constantPool2.equals((Object)constantPool0));
      assertFalse(constantPool2.equals((Object)constantPool1));
      assertEquals(2, constantPool2.getLength());
      assertNotNull(constantPool2);
      
      String string1 = constantPool2.toString();
      assertNotSame(constantPool2, constantPool0);
      assertNotSame(constantPool2, constantPool1);
      assertEquals("1)null\n", string1);
      assertFalse(constantPool2.equals((Object)constantPool0));
      assertFalse(constantPool2.equals((Object)constantPool1));
      assertFalse(string1.equals((Object)string0));
      assertEquals(2, constantPool2.getLength());
      assertNotNull(string1);
      
      ConstantPool constantPool3 = new ConstantPool(constantArray0);
      assertFalse(constantPool3.equals((Object)constantPool1));
      assertFalse(constantPool3.equals((Object)constantPool2));
      assertFalse(constantPool3.equals((Object)constantPool0));
      assertEquals(2, constantPool3.getLength());
      assertNotNull(constantPool3);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-106);
      String string2 = Constants.ILLEGAL_TYPE;
      assertEquals("<illegal type>", string2);
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool2, 1503, 10);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      ConstantClass constantClass0 = new ConstantClass((byte)78);
      assertEquals((byte)7, constantClass0.getTag());
      assertEquals(78, constantClass0.getNameIndex());
      assertNotNull(constantClass0);
      
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType((byte)77, (-1965));
      assertEquals((-1965), constantNameAndType0.getSignatureIndex());
      assertEquals(77, constantNameAndType0.getNameIndex());
      assertEquals((byte)12, constantNameAndType0.getTag());
      assertNotNull(constantNameAndType0);
      
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic(185, (-1965));
      assertEquals(185, constantInvokeDynamic0.getBootstrapMethodAttrIndex());
      assertEquals((-1965), constantInvokeDynamic0.getNameAndTypeIndex());
      assertEquals((byte)18, constantInvokeDynamic0.getTag());
      assertEquals(185, constantInvokeDynamic0.getClassIndex());
      assertNotNull(constantInvokeDynamic0);
      
      Constant[] constantArray0 = new Constant[2];
      constantArray0[1] = (Constant) constantClass0;
      constantClass0.setNameIndex((byte)78);
      assertEquals((byte)7, constantClass0.getTag());
      assertEquals(78, constantClass0.getNameIndex());
      
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(2, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      constantClass0.setNameIndex(4);
      assertEquals((byte)7, constantClass0.getTag());
      assertEquals(4, constantClass0.getNameIndex());
      
      byte[] byteArray0 = new byte[7];
      byteArray0[1] = (byte)77;
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      byteArray0[6] = (byte) (-93);
      ConstantPool constantPool1 = new ConstantPool(constantArray0);
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertEquals(2, constantPool1.getLength());
      assertNotNull(constantPool1);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, (int) (byte)77, (int) (byte)0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte) (-122);
      byteArray0[2] = (byte)9;
      byteArray0[3] = (byte) (-122);
      byteArray0[4] = (byte) (-122);
      byteArray0[5] = (byte)121;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)0, (byte) (-122), (byte)9, (byte) (-122), (byte) (-122), (byte)121, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteSequence0);
      
      boolean boolean1 = byteSequence0.readBoolean();
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(1, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)0, (byte) (-122), (byte)9, (byte) (-122), (byte) (-122), (byte)121, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      String string0 = Utility.convertString("]9`}+ug,V7,~P");
      assertEquals("]9`}+ug,V7,~P", string0);
      assertNotNull(string0);
      
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals("i2f", string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals(2, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)0, (byte) (-122), (byte)9, (byte) (-122), (byte) (-122), (byte)121, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(string1);
      
      try { 
        Utility.methodSignatureArgumentTypes("<unknown");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: <unknown
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      String string0 = Utility.getSignature("\t");
      assertEquals("L;", string0);
      assertNotNull(string0);
      
      int int0 = Utility.clearBit(1891, 2748);
      assertEquals(1891, int0);
      
      String string1 = Utility.convertString("\t");
      assertEquals("\t", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      ConstantMethodref constantMethodref0 = new ConstantMethodref(171, 219);
      assertEquals(219, constantMethodref0.getNameAndTypeIndex());
      assertEquals((byte)10, constantMethodref0.getTag());
      assertEquals(171, constantMethodref0.getClassIndex());
      assertNotNull(constantMethodref0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      assertFalse(fileSystemHandling1.equals((Object)fileSystemHandling0));
      assertNotNull(fileSystemHandling1);
      
      Constant[] constantArray0 = new Constant[1];
      constantArray0[0] = (Constant) constantMethodref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(1, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      ConstantPool constantPool1 = new ConstantPool(constantArray0);
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertEquals(1, constantPool1.getLength());
      assertNotNull(constantPool1);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-42);
      byteArray0[1] = (byte) (-40);
      byteArray0[2] = (byte)22;
      byteArray0[3] = (byte)74;
      byteArray0[4] = (byte)88;
      int int1 = 65536;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, 65536, 39);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      byte byte0 = ObjectStreamConstants.TC_BLOCKDATA;
      assertEquals((byte)119, byte0);
      
      ConstantClass constantClass0 = new ConstantClass((byte)53);
      assertEquals((byte)7, constantClass0.getTag());
      assertEquals(53, constantClass0.getNameIndex());
      assertNotNull(constantClass0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)53;
      byteArray0[1] = (byte)119;
      byteArray0[2] = (byte)119;
      byteArray0[3] = (byte)119;
      byteArray0[4] = (byte)119;
      byteArray0[5] = (byte)53;
      byteArray0[6] = (byte)119;
      byteArray0[7] = (byte)119;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)53, (byte)119, (byte)119, (byte)119, (byte)119, (byte)53, (byte)119, (byte)119, (byte)0}, byteArray0);
      assertNotNull(byteSequence0);
      
      int int0 = byteSequence0.available();
      assertEquals(9, int0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)53, (byte)119, (byte)119, (byte)119, (byte)119, (byte)53, (byte)119, (byte)119, (byte)0}, byteArray0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)119, (int) (byte)119);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      ConstantMethodref constantMethodref0 = new ConstantMethodref((-1989), (byte) (-74));
      assertEquals((-1989), constantMethodref0.getClassIndex());
      assertEquals((byte)10, constantMethodref0.getTag());
      assertEquals((-74), constantMethodref0.getNameAndTypeIndex());
      assertNotNull(constantMethodref0);
      
      ConstantMethodref constantMethodref1 = (ConstantMethodref)constantMethodref0.clone();
      assertNotSame(constantMethodref0, constantMethodref1);
      assertNotSame(constantMethodref1, constantMethodref0);
      assertTrue(constantMethodref1.equals((Object)constantMethodref0));
      assertEquals((-1989), constantMethodref0.getClassIndex());
      assertEquals((byte)10, constantMethodref0.getTag());
      assertEquals((-74), constantMethodref0.getNameAndTypeIndex());
      assertEquals((byte)10, constantMethodref1.getTag());
      assertEquals((-74), constantMethodref1.getNameAndTypeIndex());
      assertEquals((-1989), constantMethodref1.getClassIndex());
      assertNotNull(constantMethodref1);
      
      ConstantMethodref constantMethodref2 = new ConstantMethodref(constantMethodref0);
      assertTrue(constantMethodref0.equals((Object)constantMethodref1));
      assertTrue(constantMethodref2.equals((Object)constantMethodref0));
      assertTrue(constantMethodref2.equals((Object)constantMethodref1));
      assertEquals((-1989), constantMethodref0.getClassIndex());
      assertEquals((byte)10, constantMethodref0.getTag());
      assertEquals((-74), constantMethodref0.getNameAndTypeIndex());
      assertEquals((byte)10, constantMethodref2.getTag());
      assertEquals((-1989), constantMethodref2.getClassIndex());
      assertEquals((-74), constantMethodref2.getNameAndTypeIndex());
      assertNotNull(constantMethodref2);
      
      Constant[] constantArray0 = new Constant[4];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(4, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      ConstantPool constantPool1 = constantPool0.copy();
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertEquals(4, constantPool0.getLength());
      assertEquals(4, constantPool1.getLength());
      assertNotNull(constantPool1);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      ConstantPool constantPool2 = constantPool0.copy();
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool0, constantPool2);
      assertNotSame(constantPool2, constantPool0);
      assertNotSame(constantPool2, constantPool1);
      assertFalse(constantPool0.equals((Object)constantPool1));
      assertFalse(constantPool2.equals((Object)constantPool0));
      assertFalse(constantPool2.equals((Object)constantPool1));
      assertEquals(4, constantPool0.getLength());
      assertEquals(4, constantPool2.getLength());
      assertNotNull(constantPool2);
      
      ConstantUtf8.clearStats();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-75);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool2, (-889275714), (-889275714));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-127);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-127), 95);
      assertEquals("0:    lor\n1:    nop\n2:    nop\n", string0);
      assertArrayEquals(new byte[] {(byte) (-127), (byte)0, (byte)0}, byteArray0);
      assertNotNull(string0);
      
      // Undeclared exception!
      try { 
        Utility.signatureToString((String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      String string0 = "RM|CWH";
      Object[] objectArray0 = null;
      String string1 = Utility.classOrInterface(183);
      assertEquals("class", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      // Undeclared exception!
      try { 
        Utility.signatureToString("RM|CWH", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `RM|CWH'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      Constant[] constantArray0 = new Constant[2];
      String string0 = Constants.ILLEGAL_TYPE;
      assertEquals("<illegal type>", string0);
      assertNotNull(string0);
      
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(2, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      String string1 = constantPool0.toString();
      assertEquals("1)null\n", string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals(2, constantPool0.getLength());
      assertNotNull(string1);
      
      ConstantPool constantPool1 = new ConstantPool(constantArray0);
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertEquals(2, constantPool1.getLength());
      assertNotNull(constantPool1);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      String string2 = Utility.getSignature("1)null\n");
      assertEquals("L1)null;", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String string3 = Utility.compactClassName("if_icmpgt", "<illegal type>", true);
      assertEquals("if_icmpgt", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      
      boolean boolean1 = Utility.isJavaIdentifierPart('(');
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string4 = Utility.format((-1317), 6, true, '.');
      assertEquals("-1317.", string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      String string0 = Utility.methodSignatureReturnType("Zvt6");
      assertEquals("boolean", string0);
      assertNotNull(string0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-47);
      byteArray0[1] = (byte)102;
      byteArray0[2] = (byte) (-69);
      byteArray0[3] = (byte) (-88);
      byteArray0[4] = (byte)125;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-47), (byte)102, (byte) (-69), (byte) (-88), (byte)125}, byteArray0);
      assertNotNull(byteSequence0);
      
      String string1 = Utility.classOrInterface(156);
      assertEquals("class", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertEquals(0, byteSequence1.getIndex());
      assertArrayEquals(new byte[] {(byte) (-47), (byte)102, (byte) (-69), (byte) (-88), (byte)125}, byteArray0);
      assertNotNull(byteSequence1);
      
      String string2 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertNotSame(byteSequence0, byteSequence1);
      assertEquals("<illegal opcode>", string2);
      assertFalse(byteSequence0.equals((Object)byteSequence1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals(1, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-47), (byte)102, (byte) (-69), (byte) (-88), (byte)125}, byteArray0);
      assertNotNull(string2);
      
      String string3 = Utility.toHexString(byteArray0);
      assertEquals("d1 66 bb a8 7d", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertArrayEquals(new byte[] {(byte) (-47), (byte)102, (byte) (-69), (byte) (-88), (byte)125}, byteArray0);
      assertNotNull(string3);
      
      String string4 = Utility.getSignature("class");
      assertEquals("Lclass;", string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)125, (int) (byte) (-69));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)36;
      byteArray0[1] = (byte)125;
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 1632, (int) (byte)125, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-78);
      byteArray0[1] = (byte) (-78);
      byteArray0[3] = (byte) (-78);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-78);
      byteArray0[6] = (byte) (-78);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-78), (int) (byte) (-78));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-62);
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle((-22), 45);
      assertEquals((-22), constantMethodHandle0.getReferenceKind());
      assertEquals(45, constantMethodHandle0.getReferenceIndex());
      assertEquals((byte)15, constantMethodHandle0.getTag());
      assertNotNull(constantMethodHandle0);
      
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      assertNotNull(emptyVisitor0);
      
      ConstantMethodHandle constantMethodHandle1 = new ConstantMethodHandle(constantMethodHandle0);
      assertTrue(constantMethodHandle1.equals((Object)constantMethodHandle0));
      assertEquals((-22), constantMethodHandle0.getReferenceKind());
      assertEquals(45, constantMethodHandle0.getReferenceIndex());
      assertEquals((byte)15, constantMethodHandle0.getTag());
      assertEquals((-22), constantMethodHandle1.getReferenceKind());
      assertEquals(45, constantMethodHandle1.getReferenceIndex());
      assertEquals((byte)15, constantMethodHandle1.getTag());
      assertNotNull(constantMethodHandle1);
      
      constantMethodHandle0.setReferenceIndex(4181);
      assertNotSame(constantMethodHandle0, constantMethodHandle1);
      assertFalse(constantMethodHandle0.equals((Object)constantMethodHandle1));
      assertEquals((-22), constantMethodHandle0.getReferenceKind());
      assertEquals((byte)15, constantMethodHandle0.getTag());
      assertEquals(4181, constantMethodHandle0.getReferenceIndex());
      
      Constant[] constantArray0 = new Constant[1];
      constantArray0[0] = (Constant) constantMethodHandle0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(1, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      ConstantPool constantPool1 = constantPool0.copy();
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertEquals(1, constantPool0.getLength());
      assertEquals(1, constantPool1.getLength());
      assertNotNull(constantPool1);
      
      ConstantPool constantPool2 = constantPool1.copy();
      assertNotSame(constantPool0, constantPool2);
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      assertNotSame(constantPool1, constantPool2);
      assertNotSame(constantPool2, constantPool0);
      assertNotSame(constantPool2, constantPool1);
      assertFalse(constantPool0.equals((Object)constantPool1));
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertFalse(constantPool2.equals((Object)constantPool0));
      assertFalse(constantPool2.equals((Object)constantPool1));
      assertEquals(1, constantPool0.getLength());
      assertEquals(1, constantPool1.getLength());
      assertEquals(1, constantPool2.getLength());
      assertNotNull(constantPool2);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 119, 4181);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-111);
      Object[] objectArray0 = new Object[8];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-111), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteSequence0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 45, 124);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("F7(C0H&B|/.fcT", false);
      assertNotNull(byteArray0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)122, (int) (byte)122);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      byte[] byteArray0 = Utility.decode("l.bJCFVQ", false);
      assertArrayEquals(new byte[] {(byte)108, (byte)46, (byte)98, (byte)74, (byte)67, (byte)70, (byte)86, (byte)81}, byteArray0);
      assertNotNull(byteArray0);
      
      ConstantPool constantPool1 = new ConstantPool(constantArray0);
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertEquals(0, constantPool1.getLength());
      assertNotNull(constantPool1);
      
      int int0 = 128;
      String string0 = constantPool0.toString();
      assertNotSame(constantPool0, constantPool1);
      assertEquals("", string0);
      assertFalse(constantPool0.equals((Object)constantPool1));
      assertEquals(0, constantPool0.getLength());
      assertNotNull(string0);
      
      ConstantClass constantClass0 = new ConstantClass(128);
      assertEquals((byte)7, constantClass0.getTag());
      assertEquals(128, constantClass0.getNameIndex());
      assertNotNull(constantClass0);
      
      ConstantPool constantPool2 = new ConstantPool(constantArray0);
      assertFalse(constantPool2.equals((Object)constantPool0));
      assertFalse(constantPool2.equals((Object)constantPool1));
      assertEquals(0, constantPool2.getLength());
      assertNotNull(constantPool2);
      
      ConstantPool constantPool3 = constantPool1.copy();
      assertNotSame(constantPool1, constantPool0);
      assertNotSame(constantPool1, constantPool2);
      assertNotSame(constantPool1, constantPool3);
      assertNotSame(constantPool3, constantPool0);
      assertNotSame(constantPool3, constantPool1);
      assertNotSame(constantPool3, constantPool2);
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertFalse(constantPool1.equals((Object)constantPool2));
      assertFalse(constantPool3.equals((Object)constantPool0));
      assertFalse(constantPool3.equals((Object)constantPool1));
      assertFalse(constantPool3.equals((Object)constantPool2));
      assertEquals(0, constantPool1.getLength());
      assertEquals(0, constantPool3.getLength());
      assertNotNull(constantPool3);
      
      int int1 = 20;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool3, 20, 3807);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      assertFalse(boolean0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      ConstantClass constantClass0 = new ConstantClass((byte) (-70));
      assertEquals((byte)7, constantClass0.getTag());
      assertEquals((-70), constantClass0.getNameIndex());
      assertNotNull(constantClass0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)127;
      byteArray0[1] = (byte) (-70);
      byteArray0[2] = (byte) (-70);
      byteArray0[3] = (byte) (-70);
      byteArray0[4] = (byte)127;
      boolean boolean2 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertArrayEquals(new byte[] {(byte)127, (byte) (-70), (byte) (-70), (byte) (-70), (byte)127}, byteArray0);
      
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 441, (int) (byte)127);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 47802. Constant pool size is: 0
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      ConstantDouble constantDouble0 = new ConstantDouble(932.3453557249047);
      assertEquals((byte)6, constantDouble0.getTag());
      assertEquals(932.3453557249047, constantDouble0.getBytes(), 0.01);
      assertNotNull(constantDouble0);
      
      BCELComparator bCELComparator0 = Field.getComparator();
      assertNotNull(bCELComparator0);
      
      Constant.setComparator(bCELComparator0);
      ConstantDouble constantDouble1 = new ConstantDouble(constantDouble0);
      assertEquals((byte)6, constantDouble0.getTag());
      assertEquals(932.3453557249047, constantDouble0.getBytes(), 0.01);
      assertEquals(932.3453557249047, constantDouble1.getBytes(), 0.01);
      assertEquals((byte)6, constantDouble1.getTag());
      assertNotNull(constantDouble1);
      
      BCELComparator bCELComparator1 = Method.getComparator();
      assertFalse(bCELComparator1.equals((Object)bCELComparator0));
      assertNotNull(bCELComparator1);
      
      Constant.setComparator(bCELComparator0);
      assertFalse(bCELComparator0.equals((Object)bCELComparator1));
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      String string0 = constantDouble0.toString();
      assertNotSame(constantDouble0, constantDouble1);
      assertEquals("CONSTANT_Double[6](bytes = 932.3453557249047)", string0);
      assertEquals((byte)6, constantDouble0.getTag());
      assertEquals(932.3453557249047, constantDouble0.getBytes(), 0.01);
      assertNotNull(string0);
      
      String[] stringArray0 = new String[9];
      stringArray0[0] = "enum";
      stringArray0[1] = "CONSTANT_Double[6](bytes = 932.3453557249047)";
      stringArray0[2] = "enum";
      stringArray0[3] = "CONSTANT_Double[6](bytes = 932.3453557249047)";
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      ConstantPool constantPool1 = constantPool0.copy();
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertEquals(0, constantPool0.getLength());
      assertEquals(0, constantPool1.getLength());
      assertNotNull(constantPool1);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-103);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, (int) (byte) (-103), (int) (byte) (-103));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      String string0 = Constants.ILLEGAL_TYPE;
      assertEquals("<illegal type>", string0);
      assertNotNull(string0);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      byte[] byteArray0 = Utility.decode("<illegal type>", false);
      assertNotNull(byteArray0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)122, (int) (byte)122);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)73;
      byteArray0[1] = (byte)126;
      byteArray0[2] = (byte)118;
      byteArray0[3] = (byte) (-91);
      byteArray0[4] = (byte)126;
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (-1840700267), (int) (byte)73, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    dstore_2
         // 1:    iand
         // 2:    fneg
         // 3:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "if_acmpne");
      assertFalse(boolean0);
      
      boolean boolean1 = false;
      byte[] byteArray0 = Utility.decode("if_acmpne", false);
      assertArrayEquals(new byte[] {(byte)105, (byte)102, (byte)95, (byte)97, (byte)99, (byte)109, (byte)112, (byte)110, (byte)101}, byteArray0);
      assertNotNull(byteArray0);
      
      byte[] byteArray1 = new byte[3];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte)122;
      byteArray1[1] = (byte)122;
      byteArray1[2] = (byte)122;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, (ConstantPool) null, (int) (byte)122, 92);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      byte byte0 = ObjectStreamConstants.TC_ENDBLOCKDATA;
      assertEquals((byte)120, byte0);
      
      byte byte1 = (byte)53;
      ConstantClass constantClass0 = new ConstantClass((byte)53);
      assertEquals((byte)7, constantClass0.getTag());
      assertEquals(53, constantClass0.getNameIndex());
      assertNotNull(constantClass0);
      
      ConstantClass constantClass1 = new ConstantClass(constantClass0);
      assertTrue(constantClass1.equals((Object)constantClass0));
      assertEquals((byte)7, constantClass0.getTag());
      assertEquals(53, constantClass0.getNameIndex());
      assertEquals(53, constantClass1.getNameIndex());
      assertEquals((byte)7, constantClass1.getTag());
      assertNotNull(constantClass1);
      
      String string0 = constantClass0.toString();
      assertNotSame(constantClass0, constantClass1);
      assertEquals("CONSTANT_Class[7](name_index = 53)", string0);
      assertTrue(constantClass0.equals((Object)constantClass1));
      assertEquals((byte)7, constantClass0.getTag());
      assertEquals(53, constantClass0.getNameIndex());
      assertNotNull(string0);
      
      String string1 = Utility.replace("CONSTANT_Class[7](name_index = 53)", "CONSTANT_Class[7](name_index = 53)", "CONSTANT_Class[7](name_index = 53)");
      assertEquals("CONSTANT_Class[7](name_index = 53)", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)53;
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream((byte)120);
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
      assertNotNull(byteArrayOutputStream0);
      
      DataOutputStream dataOutputStream0 = new DataOutputStream(byteArrayOutputStream0);
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
      assertNotNull(dataOutputStream0);
      
      boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      ConstantClass constantClass2 = new ConstantClass((byte)120);
      assertFalse(constantClass2.equals((Object)constantClass0));
      assertFalse(constantClass2.equals((Object)constantClass1));
      assertEquals(120, constantClass2.getNameIndex());
      assertEquals((byte)7, constantClass2.getTag());
      assertNotNull(constantClass2);
      
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 80, (int) (byte)120);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      ConstantDouble constantDouble0 = new ConstantDouble((-3817.9));
      assertEquals((byte)6, constantDouble0.getTag());
      assertEquals((-3817.9), constantDouble0.getBytes(), 0.01);
      assertNotNull(constantDouble0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-94);
      byteArray0[1] = (byte) (-94);
      byteArray0[3] = (byte) (-99);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (-3751), (int) (byte) (-19));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    if_icmpge\t\t#-24064
         // 3:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      byte[] byteArray0 = Utility.decode("ElY,<MJc>/T", false);
      assertNotNull(byteArray0);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      ConstantClass constantClass0 = new ConstantClass(150);
      assertEquals((byte)7, constantClass0.getTag());
      assertEquals(150, constantClass0.getNameIndex());
      assertNotNull(constantClass0);
      
      ConstantString constantString0 = new ConstantString(150);
      assertEquals(150, constantString0.getStringIndex());
      assertEquals((byte)8, constantString0.getTag());
      assertNotNull(constantString0);
      
      Constant[] constantArray0 = new Constant[4];
      constantArray0[1] = (Constant) constantClass0;
      constantArray0[2] = (Constant) constantString0;
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(4, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      ConstantUtf8.clearStats();
      ClassPath classPath0 = new ClassPath("ElY,<MJc>/T");
      assertNotNull(classPath0);
      
      String string0 = constantPool0.toString();
      assertEquals("1)CONSTANT_Class[7](name_index = 150)\n2)CONSTANT_String[8](string_index = 150)\n3)null\n", string0);
      assertEquals(4, constantPool0.getLength());
      assertNotNull(string0);
      
      ConstantPool constantPool1 = constantPool0.copy();
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertEquals(4, constantPool0.getLength());
      assertEquals(4, constantPool1.getLength());
      assertNotNull(constantPool1);
      
      byte[] byteArray1 = new byte[2];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte) (-96);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, constantPool1, (int) (byte) (-96), 3761);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      String string0 = "2";
      try { 
        Utility.typeOfSignature("2");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 2
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      String string0 = "M%;^";
      String string1 = Utility.getSignature("LXhZ:;J!3/&1Nv;V");
      assertEquals("LLXhZ:;J!3/&1Nv;V;", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      try { 
        Utility.methodSignatureReturnType("XhZ:;J!3/&1Nv");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `XhZ:;J!3/&1Nv'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      ConstantPool constantPool0 = null;
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-86);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      byteArray0[2] = (byte) (-86);
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-86), (int) (byte) (-86), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertFalse(boolean0);
      
      ConstantPool constantPool0 = null;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      byte byte0 = (byte) (-111);
      int int0 = 1810;
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)104;
      byteArray0[1] = (byte) (-111);
      byteArray0[2] = (byte) (-111);
      byteArray0[3] = (byte) (-111);
      byteArray0[4] = (byte) (-111);
      byteArray0[5] = (byte) (-111);
      byteArray0[6] = (byte)36;
      byteArray0[7] = (byte) (-111);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 44, (int) (byte) (-111));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(1, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic((-3867), (-3867));
      assertEquals((-3867), constantInvokeDynamic0.getNameAndTypeIndex());
      assertEquals((byte)18, constantInvokeDynamic0.getTag());
      assertEquals((-3867), constantInvokeDynamic0.getClassIndex());
      assertEquals((-3867), constantInvokeDynamic0.getBootstrapMethodAttrIndex());
      assertNotNull(constantInvokeDynamic0);
      
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertFalse(boolean0);
      
      ConstantClass constantClass0 = new ConstantClass(818);
      assertEquals((byte)7, constantClass0.getTag());
      assertEquals(818, constantClass0.getNameIndex());
      assertNotNull(constantClass0);
      
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      assertNotNull(emptyVisitor0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-118);
      byteArray0[1] = (byte)15;
      byteArray0[2] = (byte)115;
      byteArray0[3] = (byte) (-105);
      boolean boolean1 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new byte[] {(byte) (-118), (byte)15, (byte)115, (byte) (-105)}, byteArray0);
      
      ConstantPool constantPool1 = new ConstantPool(constantArray0);
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertEquals(1, constantPool1.getLength());
      assertNotNull(constantPool1);
      
      int int0 = 184;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 48, 184);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      Constant[] constantArray0 = new Constant[2];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(2, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      ConstantPool constantPool1 = constantPool0.copy();
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertEquals(2, constantPool0.getLength());
      assertEquals(2, constantPool1.getLength());
      assertNotNull(constantPool1);
      
      ConstantPool constantPool2 = constantPool0.copy();
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool0, constantPool2);
      assertNotSame(constantPool2, constantPool1);
      assertNotSame(constantPool2, constantPool0);
      assertFalse(constantPool0.equals((Object)constantPool1));
      assertFalse(constantPool2.equals((Object)constantPool1));
      assertFalse(constantPool2.equals((Object)constantPool0));
      assertEquals(2, constantPool0.getLength());
      assertEquals(2, constantPool2.getLength());
      assertNotNull(constantPool2);
      
      ConstantPool constantPool3 = new ConstantPool(constantArray0);
      assertFalse(constantPool3.equals((Object)constantPool0));
      assertFalse(constantPool3.equals((Object)constantPool1));
      assertFalse(constantPool3.equals((Object)constantPool2));
      assertEquals(2, constantPool3.getLength());
      assertNotNull(constantPool3);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-110);
      byteArray0[1] = (byte) (-110);
      byteArray0[2] = (byte) (-110);
      byteArray0[3] = (byte)86;
      byteArray0[4] = (byte) (-110);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-110), (byte) (-110), (byte) (-110), (byte)86, (byte) (-110)}, byteArray0);
      assertNotNull(byteSequence0);
      
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertEquals(0, byteSequence1.getIndex());
      assertArrayEquals(new byte[] {(byte) (-110), (byte) (-110), (byte) (-110), (byte)86, (byte) (-110)}, byteArray0);
      assertNotNull(byteSequence1);
      
      byte byte0 = byteSequence0.readByte();
      assertNotSame(byteSequence0, byteSequence1);
      assertEquals((byte) (-110), byte0);
      assertFalse(byteSequence0.equals((Object)byteSequence1));
      assertEquals(1, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-110), (byte) (-110), (byte) (-110), (byte)86, (byte) (-110)}, byteArray0);
      
      boolean boolean0 = Utility.isSet(34, 7);
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 153, (int) (byte)86);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)107;
      byteArray0[1] = (byte)122;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)107, (byte)122}, byteArray0);
      assertNotNull(byteSequence0);
      
      byteSequence0.reset();
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)107, (byte)122}, byteArray0);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      String string0 = Utility.codeToString(byteSequence0, constantPool0);
      assertEquals("dmul", string0);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals(0, constantPool0.getLength());
      assertArrayEquals(new byte[] {(byte)107, (byte)122}, byteArray0);
      assertNotNull(string0);
      
      String string1 = Utility.convertString("dmul");
      assertEquals("dmul", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = "<illegal opcode>";
      try { 
        byteSequence0.readFloat();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      ConstantPool constantPool1 = constantPool0.copy();
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertEquals(0, constantPool0.getLength());
      assertEquals(0, constantPool1.getLength());
      assertNotNull(constantPool1);
      
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic((-270), (-36833786));
      assertEquals((-36833786), constantInvokeDynamic0.getNameAndTypeIndex());
      assertEquals((-270), constantInvokeDynamic0.getClassIndex());
      assertEquals((byte)18, constantInvokeDynamic0.getTag());
      assertEquals((-270), constantInvokeDynamic0.getBootstrapMethodAttrIndex());
      assertNotNull(constantInvokeDynamic0);
      
      String string0 = constantInvokeDynamic0.toString();
      assertEquals("CONSTANT_InvokeDynamic[18](bootstrap_method_attr_index = -270, name_and_type_index = -36833786)", string0);
      assertEquals((-36833786), constantInvokeDynamic0.getNameAndTypeIndex());
      assertEquals((-270), constantInvokeDynamic0.getClassIndex());
      assertEquals((byte)18, constantInvokeDynamic0.getTag());
      assertEquals((-270), constantInvokeDynamic0.getBootstrapMethodAttrIndex());
      assertNotNull(string0);
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ",,LSc");
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)27;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)27}, byteArray0);
      assertNotNull(byteSequence0);
      
      String string1 = Utility.codeToString(byteSequence0, constantPool1);
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      assertEquals("iload_1", string1);
      assertFalse(constantPool0.equals((Object)constantPool1));
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertFalse(string1.equals((Object)string0));
      assertEquals(0, constantPool0.getLength());
      assertEquals(0, constantPool1.getLength());
      assertEquals(1, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)27}, byteArray0);
      assertNotNull(string1);
      
      boolean boolean1 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "(class_index = ");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string2 = Utility.methodTypeToSignature(",,LSc", (String[]) null);
      assertEquals("()L,,LSc;", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      boolean boolean2 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-55);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      String string0 = constantPool0.toString();
      assertEquals("", string0);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(string0);
      
      String string1 = Constants.CONSTRUCTOR_NAME;
      assertEquals("<init>", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = Utility.classOrInterface(733);
      assertEquals("interface", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (-125), (int) (byte) (-55));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      byte byte0 = (byte) (-80);
      String string0 = Constants.STATIC_INITIALIZER_NAME;
      assertEquals("<clinit>", string0);
      assertNotNull(string0);
      
      byte[] byteArray0 = Utility.decode(":", false);
      assertArrayEquals(new byte[] {(byte)58}, byteArray0);
      assertNotNull(byteArray0);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      boolean boolean1 = Utility.isSet(2551, (byte) (-80));
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "dreturn");
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      ConstantString constantString0 = new ConstantString((byte) (-80));
      assertEquals((-80), constantString0.getStringIndex());
      assertEquals((byte)8, constantString0.getTag());
      assertNotNull(constantString0);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      constantPool0.setConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertEquals(0, constantPool1.getLength());
      assertNotNull(constantPool1);
      
      ConstantPool constantPool2 = new ConstantPool((Constant[]) null);
      assertFalse(constantPool2.equals((Object)constantPool0));
      assertFalse(constantPool2.equals((Object)constantPool1));
      assertEquals(0, constantPool2.getLength());
      assertNotNull(constantPool2);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool2, 204, (-1));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      byte[] byteArray0 = Utility.decode("ziOx,L%L_vAY=4", false);
      assertNotNull(byteArray0);
      
      boolean boolean1 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      int int0 = 204;
      boolean boolean2 = Utility.isSet(204, 204);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      ConstantString constantString0 = new ConstantString(204);
      assertEquals((byte)8, constantString0.getTag());
      assertEquals(204, constantString0.getStringIndex());
      assertNotNull(constantString0);
      
      Constant[] constantArray0 = new Constant[8];
      constantArray0[0] = (Constant) constantString0;
      constantArray0[1] = (Constant) constantString0;
      constantArray0[2] = (Constant) constantString0;
      constantArray0[3] = (Constant) constantString0;
      constantArray0[4] = (Constant) constantString0;
      constantArray0[5] = (Constant) constantString0;
      constantArray0[6] = (Constant) constantString0;
      constantArray0[7] = (Constant) constantString0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(8, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      ConstantPool constantPool1 = constantPool0.copy();
      assertNotSame(constantPool1, constantPool0);
      assertNotSame(constantPool0, constantPool1);
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertEquals(8, constantPool1.getLength());
      assertEquals(8, constantPool0.getLength());
      assertNotNull(constantPool1);
      
      int int1 = (-161);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 204, (-161));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("F8!8V$k9]RyA-gB4");
      assertEquals((byte)6, byte0);
      
      ConstantMethodref constantMethodref0 = new ConstantMethodref(32, (-1633267328));
      assertEquals(32, constantMethodref0.getClassIndex());
      assertEquals((byte)10, constantMethodref0.getTag());
      assertEquals((-1633267328), constantMethodref0.getNameAndTypeIndex());
      assertNotNull(constantMethodref0);
      
      String string0 = constantMethodref0.toString();
      assertEquals("CONSTANT_Methodref[10](class_index = 32, name_and_type_index = -1633267328)", string0);
      assertEquals(32, constantMethodref0.getClassIndex());
      assertEquals((byte)10, constantMethodref0.getTag());
      assertEquals((-1633267328), constantMethodref0.getNameAndTypeIndex());
      assertNotNull(string0);
      
      ConstantMethodref constantMethodref1 = (ConstantMethodref)constantMethodref0.clone();
      assertNotSame(constantMethodref0, constantMethodref1);
      assertNotSame(constantMethodref1, constantMethodref0);
      assertTrue(constantMethodref1.equals((Object)constantMethodref0));
      assertEquals(32, constantMethodref0.getClassIndex());
      assertEquals((byte)10, constantMethodref0.getTag());
      assertEquals((-1633267328), constantMethodref0.getNameAndTypeIndex());
      assertEquals(32, constantMethodref1.getClassIndex());
      assertEquals((-1633267328), constantMethodref1.getNameAndTypeIndex());
      assertEquals((byte)10, constantMethodref1.getTag());
      assertNotNull(constantMethodref1);
      
      String string1 = Constants.STATIC_INITIALIZER_NAME;
      assertEquals("<clinit>", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = Utility.methodTypeToSignature("<clinit>", (String[]) null);
      assertEquals("()L<clinit>;", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      byte byte1 = ElementValue.PRIMITIVE_BYTE;
      assertEquals((byte)66, byte1);
      assertFalse(byte1 == byte0);
      
      Constant[] constantArray0 = new Constant[3];
      constantArray0[0] = (Constant) constantMethodref1;
      constantArray0[1] = (Constant) constantMethodref0;
      constantArray0[2] = (Constant) constantMethodref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(3, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)6;
      byteArray0[1] = (byte)6;
      byteArray0[2] = (byte)6;
      byteArray0[3] = (byte)6;
      byteArray0[4] = (byte)61;
      byteArray0[5] = (byte)66;
      byteArray0[6] = (byte)6;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)61, (int) (byte)6);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      String string0 = Constants.STATIC_INITIALIZER_NAME;
      assertEquals("<clinit>", string0);
      assertNotNull(string0);
      
      boolean boolean0 = false;
      byte[] byteArray0 = Utility.decode("<clinit>", false);
      assertArrayEquals(new byte[] {(byte)60, (byte)99, (byte)108, (byte)105, (byte)110, (byte)105, (byte)116, (byte)62}, byteArray0);
      assertNotNull(byteArray0);
      
      int int0 = 12;
      int int1 = (-2372);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 12, (-2372));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("F8!8V$k9]RyA-gB4");
      assertEquals((byte)6, byte0);
      
      ConstantClass constantClass0 = new ConstantClass((byte)78);
      assertEquals(78, constantClass0.getNameIndex());
      assertEquals((byte)7, constantClass0.getTag());
      assertNotNull(constantClass0);
      
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType((byte)77, (byte)77);
      assertEquals((byte)12, constantNameAndType0.getTag());
      assertEquals(77, constantNameAndType0.getNameIndex());
      assertEquals(77, constantNameAndType0.getSignatureIndex());
      assertNotNull(constantNameAndType0);
      
      MockFile mockFile0 = new MockFile("putfield");
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals("putfield", mockFile0.toString());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isAbsolute());
      assertEquals("putfield", mockFile0.getName());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.canExecute());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.exists());
      assertNotNull(mockFile0);
      
      Constant[] constantArray0 = new Constant[4];
      constantArray0[1] = (Constant) constantClass0;
      constantArray0[2] = (Constant) constantClass0;
      constantArray0[2] = (Constant) constantNameAndType0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(4, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      ClassPath classPath0 = new ClassPath("invokestatic");
      assertNotNull(classPath0);
      
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      assertNotNull(emptyVisitor0);
      
      String string0 = Utility.compactClassName("<illegal opcode>", false);
      assertEquals("<illegal opcode>", string0);
      assertNotNull(string0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-114);
      byteArray0[1] = (byte)78;
      byteArray0[2] = (byte)6;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 2908, 54);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      String string0 = "invokeinterface";
      String string1 = Utility.compactClassName("invokeinterface", false);
      assertEquals("invokeinterface", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-72);
      byteArray0[1] = (byte) (-55);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-72), (int) (byte) (-55));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      String string0 = Utility.printArray((Object[]) null);
      assertNull(string0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)26;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)26}, byteArray0);
      assertNotNull(byteSequence0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      constantPool0.setConstantPool(constantArray0);
      assertEquals(0, constantPool0.getLength());
      
      String string1 = constantPool0.toString();
      assertEquals("", string1);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(string1);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 3078, 122);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-90);
      byte[] byteArray1 = new byte[7];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte) (-90);
      byteArray1[1] = (byte) (-73);
      byteArray1[3] = (byte) (-90);
      byteArray1[4] = (byte) (-90);
      byteArray1[5] = (byte) (-90);
      byteArray1[6] = (byte) (-73);
      boolean boolean1 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(boolean1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new byte[] {(byte) (-90), (byte) (-73), (byte)0, (byte) (-90), (byte) (-90), (byte) (-90), (byte) (-73)}, byteArray1);
      
      String string0 = Utility.getSignature("org.apache");
      assertEquals("Lorg/apache;", string0);
      assertNotNull(string0);
      
      String string1 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-90), (-196));
      assertNotSame(byteArray0, byteArray1);
      assertEquals("0:    if_acmpne\t\t#0\n3:    nop\n", string1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(string1.equals((Object)string0));
      assertArrayEquals(new byte[] {(byte) (-90), (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(string1);
      
      String string2 = "(ce]5-q+$v";
      try { 
        Utility.typeOfMethodSignature("(ce]5-q+$v");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: (ce]5-q+$v
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      Constant[] constantArray0 = new Constant[2];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(2, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      ConstantPool constantPool1 = constantPool0.copy();
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertEquals(2, constantPool0.getLength());
      assertEquals(2, constantPool1.getLength());
      assertNotNull(constantPool1);
      
      byte byte0 = (byte)79;
      String string0 = "The magic number cannot be null";
      try { 
        Utility.methodSignatureReturnType("The magic number cannot be null", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: The magic number cannot be null
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      Constant[] constantArray0 = new Constant[2];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(2, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      ConstantPool constantPool1 = constantPool0.copy();
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertEquals(2, constantPool0.getLength());
      assertEquals(2, constantPool1.getLength());
      assertNotNull(constantPool1);
      
      Object[] objectArray0 = null;
      String string0 = Utility.methodSignatureReturnType("The magic number cannot be ;ull", false);
      assertEquals("he magic number cannot be ", string0);
      assertNotNull(string0);
      
      String string1 = Utility.accessToString((int) (byte)79, false);
      assertEquals("public private protected static volatile", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      try { 
        Utility.methodSignatureToString("x2]XsI", "he magic number cannot be ", "x2]XsI", false, (LocalVariableTable) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: x2]XsI
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-127);
      byteArray0[1] = (byte) (-127);
      byteArray0[2] = (byte) (-89);
      byteArray0[3] = (byte) (-127);
      byteArray0[4] = (byte) (-89);
      byteArray0[5] = (byte) (-89);
      byteArray0[7] = (byte) (-127);
      byteArray0[7] = (byte) (-127);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-127), (byte) (-127), (byte) (-89), (byte) (-127), (byte) (-89), (byte) (-89), (byte)0, (byte) (-127)}, byteArray0);
      assertNotNull(byteSequence0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      constantPool0.setConstantPool(constantArray0);
      assertEquals(0, constantPool0.getLength());
      
      String string0 = constantPool0.toString();
      assertEquals("", string0);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(string0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 166, 76);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-74);
      String string0 = Constants.CONSTRUCTOR_NAME;
      assertEquals("<init>", string0);
      assertNotNull(string0);
      
      try { 
        Utility.typeOfSignature("$;Kju!@");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: $;Kju!@
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      String string0 = "=|Q;f2";
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "=|Q;f2");
      assertFalse(boolean0);
      
      String string1 = Utility.methodTypeToSignature("oolef2an", (String[]) null);
      assertEquals("()Loolef2an;", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte) (-88);
      byteArray0[7] = (byte) (-43);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)0, (byte) (-88), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte) (-43)}, byteArray0);
      assertNotNull(byteSequence0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 201, (-829));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte)79;
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      byteArray0[2] = (byte)98;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertEquals(0, constantPool1.getLength());
      assertNotNull(constantPool1);
      
      byte[] byteArray1 = new byte[5];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte)98;
      byteArray1[1] = (byte)79;
      byteArray1[2] = (byte)70;
      byteArray1[3] = (byte)80;
      byteArray1[4] = (byte)79;
      String string0 = Utility.codeToString(byteArray1, constantPool0, (-283), 87);
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals("0:    fadd\n1:    iastore\n2:    fstore_3\n3:    lastore\n4:    iastore\n", string0);
      assertFalse(constantPool0.equals((Object)constantPool1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(0, constantPool0.getLength());
      assertArrayEquals(new byte[] {(byte)98, (byte)79, (byte)70, (byte)80, (byte)79}, byteArray1);
      assertNotNull(string0);
      
      String string1 = Utility.compactClassName("(descriptor_index = ");
      assertEquals("(descriptor_index = ", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      String string0 = Utility.getSignature("]V_-%X(L!X&i");
      assertEquals("L]V_-%X(L!X&i;", string0);
      assertNotNull(string0);
      
      String string1 = "Invalid IOCase name: ";
      byte byte0 = Utility.typeOfSignature("Invalid IOCase name: ");
      assertEquals((byte)10, byte0);
      
      try { 
        Utility.methodSignatureArgumentTypes("(d(,KHw2:27", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `d(,KHw2:27'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      ConstantPool constantPool0 = null;
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-54);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      byteArray0[1] = (byte) (-54);
      byteArray0[2] = (byte) (-87);
      byteArray0[3] = (byte) (-54);
      byte byte0 = (byte)82;
      byteArray0[6] = (byte)82;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 903, (int) (byte) (-87));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      Constant[] constantArray0 = new Constant[2];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(2, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      ConstantPool constantPool1 = constantPool0.copy();
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertEquals(2, constantPool0.getLength());
      assertEquals(2, constantPool1.getLength());
      assertNotNull(constantPool1);
      
      byte[] byteArray0 = new byte[4];
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, " #");
      assertFalse(boolean0);
      
      byteArray0[0] = (byte) (-97);
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 230, (int) (byte) (-83));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      String string0 = Utility.compactClassName("x!.@}t OJeV;", true);
      assertEquals("x!.@}t OJeV;", string0);
      assertNotNull(string0);
      
      byte[] byteArray0 = Utility.decode("LM%;V", false);
      assertArrayEquals(new byte[] {(byte)76, (byte)77, (byte)37, (byte)59, (byte)86}, byteArray0);
      assertNotNull(byteArray0);
      
      // Undeclared exception!
      try { 
        Utility.signatureToString("MYj15 #^9$\"mZd,h");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `MYj15 #^9$\"mZd,h'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      String string0 = Utility.getSignature("reLurn");
      assertEquals("LreLurn;", string0);
      assertNotNull(string0);
      
      ConstantClass constantClass0 = new ConstantClass(175);
      assertEquals((byte)7, constantClass0.getTag());
      assertEquals(175, constantClass0.getNameIndex());
      assertNotNull(constantClass0);
      
      ConstantClass constantClass1 = new ConstantClass(constantClass0);
      assertTrue(constantClass1.equals((Object)constantClass0));
      assertEquals((byte)7, constantClass0.getTag());
      assertEquals(175, constantClass0.getNameIndex());
      assertEquals(175, constantClass1.getNameIndex());
      assertEquals((byte)7, constantClass1.getTag());
      assertNotNull(constantClass1);
      
      ConstantClass constantClass2 = (ConstantClass)constantClass1.copy();
      assertNotSame(constantClass0, constantClass1);
      assertNotSame(constantClass0, constantClass2);
      assertNotSame(constantClass1, constantClass0);
      assertNotSame(constantClass1, constantClass2);
      assertNotSame(constantClass2, constantClass0);
      assertNotSame(constantClass2, constantClass1);
      assertTrue(constantClass0.equals((Object)constantClass1));
      assertTrue(constantClass1.equals((Object)constantClass0));
      assertTrue(constantClass2.equals((Object)constantClass1));
      assertTrue(constantClass2.equals((Object)constantClass0));
      assertEquals((byte)7, constantClass0.getTag());
      assertEquals(175, constantClass0.getNameIndex());
      assertEquals(175, constantClass1.getNameIndex());
      assertEquals((byte)7, constantClass1.getTag());
      assertEquals((byte)7, constantClass2.getTag());
      assertEquals(175, constantClass2.getNameIndex());
      assertNotNull(constantClass2);
      
      String string1 = Utility.compactClassName("reLurn", false);
      assertEquals("reLurn", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)14;
      byteArray0[1] = (byte)14;
      byteArray0[2] = (byte) (-104);
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte)14, (byte)14, (byte) (-104)}, byteArray0);
      
      String string2 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-104), 18);
      assertEquals("0:    dconst_0\n1:    dconst_0\n2:    dcmpg\n", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertArrayEquals(new byte[] {(byte)14, (byte)14, (byte) (-104)}, byteArray0);
      assertNotNull(string2);
      
      boolean boolean1 = Utility.isSet((byte)14, 179);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)14, (byte)14, (byte) (-104)}, byteArray0);
      assertNotNull(byteSequence0);
      
      String string3 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals("dconst_0", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals(1, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)14, (byte)14, (byte) (-104)}, byteArray0);
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      Constant[] constantArray0 = new Constant[2];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(2, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      String string0 = Constants.ILLEGAL_TYPE;
      assertEquals("<illegal type>", string0);
      assertNotNull(string0);
      
      ConstantPool constantPool1 = constantPool0.copy();
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertEquals(2, constantPool0.getLength());
      assertEquals(2, constantPool1.getLength());
      assertNotNull(constantPool1);
      
      ConstantPool constantPool2 = new ConstantPool(constantArray0);
      assertFalse(constantPool2.equals((Object)constantPool1));
      assertFalse(constantPool2.equals((Object)constantPool0));
      assertEquals(2, constantPool2.getLength());
      assertNotNull(constantPool2);
      
      String string1 = constantPool2.toString();
      assertNotSame(constantPool2, constantPool1);
      assertNotSame(constantPool2, constantPool0);
      assertEquals("1)null\n", string1);
      assertFalse(constantPool2.equals((Object)constantPool1));
      assertFalse(constantPool2.equals((Object)constantPool0));
      assertFalse(string1.equals((Object)string0));
      assertEquals(2, constantPool2.getLength());
      assertNotNull(string1);
      
      ConstantDouble constantDouble0 = new ConstantDouble(1875.6827);
      assertEquals((byte)6, constantDouble0.getTag());
      assertEquals(1875.6827, constantDouble0.getBytes(), 0.01);
      assertNotNull(constantDouble0);
      
      ConstantPool constantPool3 = new ConstantPool(constantArray0);
      assertFalse(constantPool3.equals((Object)constantPool1));
      assertFalse(constantPool3.equals((Object)constantPool0));
      assertFalse(constantPool3.equals((Object)constantPool2));
      assertEquals(2, constantPool3.getLength());
      assertNotNull(constantPool3);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      String string2 = Utility.getSignature("<illegal type>");
      assertEquals("L<illegal;", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)70;
      byteArray0[1] = (byte)52;
      byteArray0[2] = (byte) (-84);
      byteArray0[3] = (byte) (-60);
      byteArray0[4] = (byte) (-112);
      byteArray0[5] = (byte)42;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, 84, 1503);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      String string0 = Utility.compactClassName("'");
      assertEquals("'", string0);
      assertNotNull(string0);
      
      byte byte0 = (byte) (-101);
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(1, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      byte byte1 = (byte)106;
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)106;
      byteArray0[3] = (byte)106;
      byteArray0[2] = (byte) (-101);
      byteArray0[3] = (byte)115;
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "h");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      byteArray0[4] = (byte)106;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)106, (int) (byte)115);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-65);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-65), 36);
      assertEquals("0:    athrow\n", string0);
      assertArrayEquals(new byte[] {(byte) (-65)}, byteArray0);
      assertNotNull(string0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object[] objectArray0 = new Object[5];
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      objectArray0[0] = object1;
      objectArray0[1] = (Object) "0:    athrow\n";
      objectArray0[2] = (Object) byteArray0;
      objectArray0[3] = (Object) byteArray0;
      objectArray0[4] = object0;
      // Undeclared exception!
      try { 
        Utility.printArray((PrintWriter) null, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      String string0 = Constants.CONSTRUCTOR_NAME;
      assertEquals("<init>", string0);
      assertNotNull(string0);
      
      byte[] byteArray0 = new byte[2];
      String string1 = Utility.getSignature("<init>");
      assertEquals("L<init>;", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      boolean boolean2 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      Object[] objectArray0 = new Object[6];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[1] = (Object) byteArray0;
      String[] stringArray0 = new String[5];
      stringArray0[0] = "MI";
      stringArray0[1] = "<init>";
      stringArray0[2] = ":";
      stringArray0[3] = "<init>";
      stringArray0[4] = "<init>";
      String string2 = Utility.methodTypeToSignature("<init>", stringArray0);
      assertEquals("(LMI;L<init>;L:;L<init>;L<init>;)L<init>;", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(1325);
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("", byteArrayOutputStream0.toString());
      assertNotNull(byteArrayOutputStream0);
      
      boolean boolean3 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "lLQUQ`=v''");
      assertFalse(boolean3);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      
      try { 
        Utility.typeOfSignature("@/lx`;;");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: @/lx`;;
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      Constant[] constantArray0 = new Constant[2];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(2, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      String string0 = Constants.ILLEGAL_TYPE;
      assertEquals("<illegal type>", string0);
      assertNotNull(string0);
      
      ConstantPool constantPool1 = constantPool0.copy();
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertEquals(2, constantPool0.getLength());
      assertEquals(2, constantPool1.getLength());
      assertNotNull(constantPool1);
      
      String string1 = constantPool1.toString();
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      assertEquals("1)null\n", string1);
      assertFalse(constantPool0.equals((Object)constantPool1));
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertFalse(string1.equals((Object)string0));
      assertEquals(2, constantPool0.getLength());
      assertEquals(2, constantPool1.getLength());
      assertNotNull(string1);
      
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      assertFalse(boolean0);
      
      String string2 = "lL<S n";
      byte[] byteArray0 = Utility.decode("_~QwEo[ ", false);
      assertArrayEquals(new byte[] {(byte)127, (byte)95, (byte)126, (byte)81, (byte)119, (byte)69, (byte)111, (byte)91, (byte)32}, byteArray0);
      assertNotNull(byteArray0);
      
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, (int) (byte)122, (int) (byte)122);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      String[] stringArray0 = new String[1];
      stringArray0[0] = "\t\t#";
      String string0 = Utility.methodTypeToSignature("\t\t#", stringArray0);
      assertEquals("(L#;)L#;", string0);
      assertNotNull(string0);
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "\t\t#");
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      
      boolean boolean3 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean3);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      
      boolean boolean4 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean4);
      assertTrue(boolean4 == boolean1);
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4 == boolean2);
      assertTrue(boolean4 == boolean3);
      
      boolean boolean5 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean5);
      assertTrue(boolean5 == boolean1);
      assertTrue(boolean5 == boolean3);
      assertTrue(boolean5 == boolean2);
      assertTrue(boolean5 == boolean4);
      assertTrue(boolean5 == boolean0);
      
      byte[] byteArray1 = new byte[4];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[1] = (byte)0;
      String[] stringArray1 = Utility.methodSignatureArgumentTypes("(L#;)L#;");
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      byte byte0 = (byte) (-76);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-76);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "impdep2";
      String string0 = Utility.methodTypeToSignature("impdep2", stringArray0);
      assertEquals("(Limpdep2;)Limpdep2;", string0);
      assertNotNull(string0);
      
      String string1 = Utility.methodSignatureToString("(Limpdep2;)Limpdep2;", "Qq]>%#\"7kf0)k", "int");
      assertEquals("int impdep2 Qq]>%#\"7kf0)k(impdep2 arg1)", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      try { 
        Utility.typeOfSignature("8:");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 8:
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      byte[] byteArray0 = new byte[7];
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      byteArray0[6] = (byte) (-109);
      byteArray0[3] = (byte)0;
      String string0 = Utility.codeToString(byteArray0, constantPool0, (-695), (-695));
      assertEquals("0:    nop\n1:    nop\n2:    nop\n3:    nop\n4:    nop\n5:    nop\n6:    i2s\n", string0);
      assertEquals(0, constantPool0.getLength());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte) (-109)}, byteArray0);
      assertNotNull(string0);
      
      String string1 = Utility.toHexString(byteArray0);
      assertEquals("00 00 00 00 00 00 93", string1);
      assertFalse(string1.equals((Object)string0));
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte) (-109)}, byteArray0);
      assertNotNull(string1);
      
      try { 
        Utility.decode("0:    nop\n1:    nop\n2:    nop\n3:    nop\n4:    nop\n5:    nop\n6:    i2s\n", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-67);
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte) (-67), (byte)0, (byte)0}, byteArray0);
      
      boolean boolean1 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new byte[] {(byte) (-67), (byte)0, (byte)0}, byteArray0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)126, (int) (byte) (-67));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("F8!8V$k9]RyA-gB4");
      assertEquals((byte)6, byte0);
      
      byte byte1 = (byte)77;
      String string0 = "HUr";
      try { 
        Utility.typeOfSignature("HUr");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: HUr
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      Constant[] constantArray0 = new Constant[5];
      ConstantFieldref constantFieldref0 = new ConstantFieldref(4436, 251);
      assertEquals(251, constantFieldref0.getNameAndTypeIndex());
      assertEquals(4436, constantFieldref0.getClassIndex());
      assertEquals((byte)9, constantFieldref0.getTag());
      assertNotNull(constantFieldref0);
      
      constantArray0[0] = (Constant) constantFieldref0;
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(251, 512);
      assertEquals(512, constantNameAndType0.getSignatureIndex());
      assertEquals((byte)12, constantNameAndType0.getTag());
      assertEquals(251, constantNameAndType0.getNameIndex());
      assertNotNull(constantNameAndType0);
      
      constantArray0[1] = (Constant) constantNameAndType0;
      ConstantNameAndType constantNameAndType1 = new ConstantNameAndType(155, (byte) (-127));
      assertFalse(constantNameAndType1.equals((Object)constantNameAndType0));
      assertEquals((byte)12, constantNameAndType1.getTag());
      assertEquals((-127), constantNameAndType1.getSignatureIndex());
      assertEquals(155, constantNameAndType1.getNameIndex());
      assertNotNull(constantNameAndType1);
      
      constantArray0[2] = (Constant) constantNameAndType1;
      ConstantMethodType constantMethodType0 = new ConstantMethodType((byte) (-127));
      assertEquals((byte)16, constantMethodType0.getTag());
      assertEquals((-127), constantMethodType0.getDescriptorIndex());
      assertNotNull(constantMethodType0);
      
      constantArray0[3] = (Constant) constantMethodType0;
      ConstantDouble constantDouble0 = new ConstantDouble(155);
      assertEquals((byte)6, constantDouble0.getTag());
      assertEquals(155.0, constantDouble0.getBytes(), 0.01);
      assertNotNull(constantDouble0);
      
      constantArray0[4] = (Constant) constantDouble0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(5, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      String string0 = constantPool0.toString();
      assertEquals("1)CONSTANT_NameAndType[12](name_index = 251, signature_index = 512)\n2)CONSTANT_NameAndType[12](name_index = 155, signature_index = -127)\n3)CONSTANT_MethodType[16](descriptor_index = -127)\n4)CONSTANT_Double[6](bytes = 155.0)\n", string0);
      assertEquals(5, constantPool0.getLength());
      assertNotNull(string0);
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Qw`Ud:l,D}OV!8");
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      byte[] byteArray0 = Utility.decode("rnV*/`Mr/%", false);
      assertNotNull(byteArray0);
      
      String string1 = Utility.codeToString(byteArray0, constantPool0, (-963), (int) (byte)122);
      assertEquals("0:    frem\n1:    fdiv\n2:    sastore\n3:    aload_0\n4:    laload\n5:    land\n6:    iadd\n7:    astore_2\n8:    frem\n9:    laload\n10:   fload_3\n", string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals(5, constantPool0.getLength());
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      Object[] objectArray0 = null;
      String string0 = Utility.printArray((Object[]) null);
      assertNull(string0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      String string1 = "B4- k";
      boolean boolean0 = true;
      String string2 = Utility.signatureToString("B4- k", true);
      assertEquals("byte", string2);
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-98);
      byteArray0[2] = (byte) (-108);
      byteArray0[3] = (byte) (-80);
      byteArray0[4] = (byte)62;
      byteArray0[5] = (byte) (-77);
      String string3 = Constants.STATIC_INITIALIZER_NAME;
      assertEquals("<clinit>", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string4 = Utility.signatureToString("B4- k", true);
      assertEquals("byte", string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte) (-98), (byte)0, (byte) (-108), (byte) (-80), (byte)62, (byte) (-77)}, byteArray0);
      assertNotNull(byteSequence0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 4484, 4484);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-55);
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte) (-55), (byte)0}, byteArray0);
      
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "XhZ:;J!3/&1Nv");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "XhZ:;J!3/&1Nv");
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      boolean boolean3 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean3);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertArrayEquals(new byte[] {(byte) (-55), (byte)0}, byteArray0);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "return";
      stringArray0[1] = "return";
      stringArray0[2] = "XhZ:;J!3/&1Nv";
      stringArray0[3] = "XhZ:;J!3/&1Nv";
      String string0 = Utility.methodTypeToSignature("return", stringArray0);
      assertEquals("(Lreturn;Lreturn;LXhZ:;J!3/&1Nv;LXhZ:;J!3/&1Nv;)Lreturn;", string0);
      assertNotNull(string0);
      
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("(Lreturn;Lreturn;LXhZ:;J!3/&1Nv;LXhZ:;J!3/&1Nv;)Lreturn;", "XhZ:;J!3/&1Nv", "!0Q- :j");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `!3/&1Nv;LXhZ:;J!3/&1Nv;)Lreturn;'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      String string0 = "Invalid method signature: ";
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Invalid method signature: ");
      assertFalse(boolean0);
      
      try { 
        Utility.typeOfSignature("&]2heIXBKu");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: &]2heIXBKu
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[4] = (byte)30;
      byteArray0[1] = (byte) (-86);
      byteArray0[2] = (byte)30;
      byteArray0[0] = (byte)123;
      byteArray0[4] = (byte) (-54);
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte)123, (byte) (-86), (byte)30, (byte)0, (byte) (-54)}, byteArray0);
      
      boolean boolean1 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new byte[] {(byte)123, (byte) (-86), (byte)30, (byte)0, (byte) (-54)}, byteArray0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-86), (int) (byte)30);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    lshr
         // 1:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-24);
      byteArray0[1] = (byte)111;
      byteArray0[2] = (byte)123;
      byteArray0[3] = (byte) (-118);
      byteArray0[4] = (byte) (-7);
      byteArray0[5] = (byte) (-119);
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)54;
      byteArray0[8] = (byte) (-59);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 1898, (int) (byte)0, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      ConstantDouble constantDouble0 = new ConstantDouble((-3817.9));
      assertEquals((byte)6, constantDouble0.getTag());
      assertEquals((-3817.9), constantDouble0.getBytes(), 0.01);
      assertNotNull(constantDouble0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-94);
      byteArray0[1] = (byte) (-1);
      byte byte0 = (byte) (-19);
      byteArray0[2] = (byte) (-19);
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte) (-56);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (-2312), (int) (byte) (-19));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    if_icmpge\t\t#-19
         // 3:    impdep2
         // 4:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      byte byte0 = (byte)126;
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-92);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)126, (int) (byte) (-92));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)126;
      ConstantPool constantPool0 = null;
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte)126, (byte)0, (byte)0}, byteArray0);
      
      boolean boolean1 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new byte[] {(byte)126, (byte)0, (byte)0}, byteArray0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)126, (int) (byte) (-67));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      ConstantMethodref constantMethodref0 = new ConstantMethodref((-1989), (byte) (-74));
      assertEquals((-1989), constantMethodref0.getClassIndex());
      assertEquals((-74), constantMethodref0.getNameAndTypeIndex());
      assertEquals((byte)10, constantMethodref0.getTag());
      assertNotNull(constantMethodref0);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-117);
      byteArray0[1] = (byte) (-59);
      byteArray0[2] = (byte) (-117);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 76, (int) (byte) (-74));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("F8!8V$k9]RyA-gB4");
      assertEquals((byte)6, byte0);
      
      ConstantClass constantClass0 = new ConstantClass((byte)78);
      assertEquals(78, constantClass0.getNameIndex());
      assertEquals((byte)7, constantClass0.getTag());
      assertNotNull(constantClass0);
      
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType((byte)77, (byte)77);
      assertEquals((byte)12, constantNameAndType0.getTag());
      assertEquals(77, constantNameAndType0.getSignatureIndex());
      assertEquals(77, constantNameAndType0.getNameIndex());
      assertNotNull(constantNameAndType0);
      
      MockFile mockFile0 = new MockFile("putfield");
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.lastModified());
      assertTrue(mockFile0.isFile());
      assertEquals("putfield", mockFile0.getName());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.canRead());
      assertEquals("putfield", mockFile0.toString());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertNotNull(mockFile0);
      
      Constant[] constantArray0 = new Constant[4];
      constantArray0[1] = (Constant) constantNameAndType0;
      constantArray0[1] = (Constant) constantClass0;
      constantArray0[2] = (Constant) constantClass0;
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      assertFalse(boolean0);
      
      byte[] byteArray0 = Utility.decode("O}f1'k_~Skp^a</>q", false);
      assertNotNull(byteArray0);
      
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      ConstantPool constantPool0 = null;
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)6, (int) (byte)77);
      assertEquals("6:    swap\n7:    iand\n8:    aastore\n9:    dmul\n10:   irem\n11:   dup2_x2\n12:   land\n13:   ladd\n14:   istore_1\n15:   laload\n16:   istore_3\n17:   lrem\n", string0);
      assertNotNull(string0);
      
      String string1 = Utility.format((byte)77, 3416, true, 'W');
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      try { 
        Utility.methodSignatureReturnType("&[{fEUoucz!*", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `&[{fEUoucz!*'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      Constant[] constantArray0 = new Constant[2];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(2, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[1];
      boolean boolean1 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      
      boolean boolean2 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      boolean boolean3 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean3);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      
      boolean boolean4 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean4);
      assertTrue(boolean4 == boolean2);
      assertTrue(boolean4 == boolean1);
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4 == boolean3);
      
      ConstantPool constantPool1 = new ConstantPool(constantArray0);
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertEquals(2, constantPool1.getLength());
      assertNotNull(constantPool1);
      
      constantPool0.setConstantPool(constantArray0);
      assertNotSame(constantPool0, constantPool1);
      assertFalse(constantPool0.equals((Object)constantPool1));
      assertEquals(2, constantPool0.getLength());
      
      try { 
        Utility.typeOfSignature("G<");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: G<
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      ConstantPool constantPool0 = null;
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-121);
      byte byte0 = (byte)30;
      byteArray0[1] = (byte)30;
      byteArray0[2] = (byte)76;
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte) (-121), (byte)30, (byte)76}, byteArray0);
      
      boolean boolean1 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new byte[] {(byte) (-121), (byte)30, (byte)76}, byteArray0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)76, (int) (byte) (-121));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      ConstantDouble constantDouble0 = new ConstantDouble((-3817.9));
      assertEquals((-3817.9), constantDouble0.getBytes(), 0.01);
      assertEquals((byte)6, constantDouble0.getTag());
      assertNotNull(constantDouble0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-107);
      byteArray0[1] = (byte) (-107);
      byteArray0[2] = (byte) (-19);
      byteArray0[3] = (byte) (-99);
      byteArray0[4] = (byte) (-56);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 71, (int) (byte) (-19));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      byte byte0 = (byte) (-82);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-39);
      byteArray0[1] = (byte) (-82);
      byteArray0[2] = (byte) (-39);
      byteArray0[3] = (byte) (-39);
      byteArray0[4] = (byte) (-39);
      byteArray0[5] = (byte) (-39);
      byteArray0[6] = (byte) (-82);
      byteArray0[7] = (byte) (-39);
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte) (-39), (byte) (-82), (byte) (-39), (byte) (-39), (byte) (-39), (byte) (-39), (byte) (-82), (byte) (-39)}, byteArray0);
      
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      boolean boolean3 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean3);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 328, 61);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("\"?.^J0H", false);
      assertArrayEquals(new byte[] {(byte)34, (byte)63, (byte)46, (byte)94, (byte)74, (byte)48, (byte)72}, byteArray0);
      assertNotNull(byteArray0);
      
      boolean boolean0 = false;
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string0 = Utility.encode(byteArray0, false);
      assertEquals("$o$3f$$$5eJ0H", string0);
      assertArrayEquals(new byte[] {(byte)34, (byte)63, (byte)46, (byte)94, (byte)74, (byte)48, (byte)72}, byteArray0);
      assertNotNull(string0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)34, (byte)63, (byte)46, (byte)94, (byte)74, (byte)48, (byte)72}, byteArray0);
      assertNotNull(byteSequence0);
      
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      assertFalse(byteSequence1.equals((Object)byteSequence0));
      assertEquals(0, byteSequence1.getIndex());
      assertArrayEquals(new byte[] {(byte)34, (byte)63, (byte)46, (byte)94, (byte)74, (byte)48, (byte)72}, byteArray0);
      assertNotNull(byteSequence1);
      
      char char0 = byteSequence0.readChar();
      assertNotSame(byteSequence0, byteSequence1);
      assertEquals('\u223F', char0);
      assertFalse(byteSequence0.equals((Object)byteSequence1));
      assertEquals(2, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)34, (byte)63, (byte)46, (byte)94, (byte)74, (byte)48, (byte)72}, byteArray0);
      
      char char1 = byteSequence0.readChar();
      assertNotSame(byteSequence0, byteSequence1);
      assertEquals('\u2E5E', char1);
      assertFalse(byteSequence0.equals((Object)byteSequence1));
      assertFalse(char1 == char0);
      assertEquals(4, byteSequence0.getIndex());
      assertArrayEquals(new byte[] {(byte)34, (byte)63, (byte)46, (byte)94, (byte)74, (byte)48, (byte)72}, byteArray0);
      
      try { 
        Utility.decode("$o$3f$$$5c$5eJ0H", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }
}
