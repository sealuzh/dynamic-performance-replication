/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 14:12:41 GMT 2018
 */

package wheel.asm;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.EOFException;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectInputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PushbackInputStream;
import java.io.SequenceInputStream;
import java.util.Enumeration;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import wheel.asm.ClassReader;
import wheel.asm.ClassVisitor;
import wheel.asm.ClassWriter;
import wheel.asm.Edge;
import wheel.asm.Frame;
import wheel.asm.Label;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ClassReader_ESTest extends ClassReader_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("wheel.asm.ClassWriter");
      char[] charArray0 = new char[2];
      charArray0[0] = '>';
      charArray0[1] = 'h';
      // Undeclared exception!
      try { 
        classReader0.readUTF8(260, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("wheel.asm.ClassWriter");
      classReader0.getClassName();
      ClassReader classReader1 = null;
      try {
        classReader1 = new ClassReader(classReader0.b, 7316, (-2215));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 17273
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("wheel.asm.ClassWriter");
      classReader0.getInterfaces();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      ClassWriter classWriter0 = new ClassWriter((-2404));
      classReader0.accept((ClassVisitor) classWriter0, 5717);
      classReader0.readInt(1);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(classReader0.b, (-1020), 2);
      int int0 = 76;
      classReader0.readInt(2);
      ClassReader classReader1 = null;
      try {
        classReader1 = new ClassReader("newLong");
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Class not found
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("wheel.asm.ClassWriter");
      char[] charArray0 = new char[5];
      ClassWriter classWriter0 = new ClassWriter(4);
      int int0 = 1181;
      // Undeclared exception!
      try { 
        classReader0.readClass(1181, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("wheel.asm.ClassWriter");
      char[] charArray0 = new char[5];
      classReader0.readConst(306, charArray0);
      // Undeclared exception!
      try { 
        classReader0.readClass(306, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 54536
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("wheel.asm.ClassWriter");
      char[] charArray0 = new char[5];
      charArray0[0] = 'D';
      charArray0[1] = '\\';
      ClassWriter classWriter0 = new ClassWriter(7316);
      classReader0.copyPool(classWriter0);
      charArray0[2] = 'D';
      charArray0[3] = '}';
      charArray0[4] = 'X';
      classReader0.accept((ClassVisitor) classWriter0, 2);
      classReader0.readInt(5);
      classReader0.copyPool(classWriter0);
      classReader0.readUnsignedShort(3094);
      classReader0.readByte(59);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("wheel.asm.ClassWriter");
      char[] charArray0 = new char[5];
      charArray0[0] = 'D';
      charArray0[1] = '\\';
      ClassWriter classWriter0 = new ClassWriter(629);
      classReader0.copyPool(classWriter0);
      classReader0.accept((ClassVisitor) classWriter0, 637);
      classReader0.readInt(2);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(classReader0.b, 4096, 1);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0);
      PushbackInputStream pushbackInputStream1 = new PushbackInputStream(pushbackInputStream0);
      ObjectInputStream objectInputStream0 = null;
      try {
        objectInputStream0 = new ObjectInputStream(pushbackInputStream1);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ObjectInputStream$PeekInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("wheel.asm.ClassWriter");
      classReader0.getInterfaces();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      ClassWriter classWriter0 = new ClassWriter((-3324));
      classReader0.copyPool(classWriter0);
      classReader0.accept((ClassVisitor) classWriter0, 4);
      classReader0.readInt(4);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(classReader0.b, (-1020), 1446);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0);
      DataInputStream dataInputStream0 = new DataInputStream(pushbackInputStream0);
      classReader0.readInt(1);
      classReader0.getSuperName();
      classReader0.getItem((-21316096));
      int int0 = 16419;
      Label[] labelArray0 = new Label[1];
      Label label0 = new Label();
      labelArray0[0] = label0;
      classReader0.readLabel(int0, labelArray0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("wheel.asm.ClassWriter");
      char[] charArray0 = new char[5];
      charArray0[0] = 'D';
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      ClassWriter classWriter0 = new ClassWriter((-1500));
      classReader0.copyPool(classWriter0);
      classReader0.accept((ClassVisitor) classWriter0, 618);
      classReader0.readInt(1);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(classReader0.b, 2, 1);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0);
      PushbackInputStream pushbackInputStream1 = new PushbackInputStream(pipedInputStream0);
      DataInputStream dataInputStream0 = new DataInputStream(pushbackInputStream1);
      ClassReader classReader1 = new ClassReader(pipedInputStream0);
      classReader1.getSuperName();
      String string0 = "7<m?L7DH";
      ClassReader classReader2 = new ClassReader(string0);
      classReader2.getClassName();
      classReader2.getSuperName();
      int int0 = (-2230);
      classReader1.readInt(int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("wheel.asm.ClassWriter");
      classReader0.getInterfaces();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      char[] charArray0 = new char[7];
      charArray0[0] = 'E';
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      // Undeclared exception!
      try { 
        classReader0.readConst(46, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("wheel.asm.ClassWriter");
      classReader0.getInterfaces();
      char[] charArray0 = new char[4];
      charArray0[0] = '9';
      charArray0[1] = 'd';
      charArray0[2] = 'J';
      charArray0[3] = '#';
      String string0 = File.pathSeparator;
      String string1 = File.pathSeparator;
      Label label0 = new Label();
      Label label1 = label0.getFirst();
      Label[] labelArray0 = new Label[7];
      labelArray0[0] = label1;
      labelArray0[1] = label1;
      labelArray0[2] = label0;
      labelArray0[3] = label0;
      ClassWriter classWriter0 = new ClassWriter(8);
      classReader0.copyPool(classWriter0);
      classReader0.accept((ClassVisitor) classWriter0, (-2012));
      classReader0.readInt(306);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
      classReader0.getClassName();
      classReader0.getAccess();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("wheel.asm.ClassWriter");
      char[] charArray0 = new char[5];
      charArray0[0] = 'D';
      ClassWriter classWriter0 = new ClassWriter(12);
      ClassWriter classWriter1 = new ClassWriter(1);
      classReader0.copyPool(classWriter1);
      classReader0.accept((ClassVisitor) classWriter1, 2);
      classReader0.getInterfaces();
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(classReader0.b, 175, 7316);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(classReader0.b);
      ClassReader classReader1 = new ClassReader("wheel.asm.ClassWriter");
      classReader0.readConst(76, charArray0);
      int int0 = (-300);
      classReader1.readUnsignedShort(int0);
      classReader1.readByte(classWriter1.COMPUTE_FRAMES);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("wheel.asm.ClassWriter");
      char[] charArray0 = new char[5];
      charArray0[0] = 'D';
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      ClassWriter classWriter0 = new ClassWriter(12);
      ClassWriter classWriter1 = new ClassWriter(1);
      classReader0.copyPool(classWriter1);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "wheel.asm.ClassWriter");
      classReader0.accept((ClassVisitor) classWriter1, 2);
      classReader0.getInterfaces();
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(classReader0.b, 185, 7316);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0);
      ClassWriter classWriter2 = new ClassWriter(2);
      classReader0.copyPool(classWriter1);
      classWriter2.threshold = (-1412);
      ClassReader classReader1 = new ClassReader(classReader0.b, 2176, 2);
      int int0 = 19;
      classReader1.accept((ClassVisitor) classWriter2, int0);
      classReader1.readInt(classWriter0.COMPUTE_MAXS);
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(classReader0.b);
      ClassReader classReader2 = new ClassReader(byteArrayInputStream0);
      classReader0.getSuperName();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      String string0 = "wheel.asm.ClassWriter";
      ClassReader classReader0 = new ClassReader("wheel.asm.ClassWriter");
      char[] charArray0 = new char[5];
      charArray0[0] = 'D';
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, classReader0.b);
      ClassWriter classWriter0 = new ClassWriter(7316);
      ClassWriter classWriter1 = new ClassWriter(2);
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      ClassReader classReader1 = null;
      try {
        classReader1 = new ClassReader(sequenceInputStream0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
