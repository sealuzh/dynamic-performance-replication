/*
 * This file was automatically generated by EvoSuite
 * Mon Jul 16 14:13:48 GMT 2018
 */

package okio;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.EOFException;
import java.io.IOException;
import java.io.InterruptedIOException;
import java.util.concurrent.TimeUnit;
import java.util.zip.Inflater;
import okio.AsyncTimeout;
import okio.Buffer;
import okio.HashingSource;
import okio.InflaterSource;
import okio.Pipe;
import okio.Sink;
import okio.Source;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.io.MockIOException;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AsyncTimeout_ESTest extends AsyncTimeout_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      AsyncTimeout asyncTimeout0 = new AsyncTimeout();
      long long0 = 1L;
      asyncTimeout0.deadlineNanoTime(1L);
      asyncTimeout0.enter();
      // Undeclared exception!
      try { 
        asyncTimeout0.enter();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Unbalanced enter/exit
         //
         verifyException("okio.AsyncTimeout", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      AsyncTimeout asyncTimeout0 = new AsyncTimeout();
      MockIOException mockIOException0 = new MockIOException("");
      asyncTimeout0.enter();
      IOException iOException0 = asyncTimeout0.newTimeoutException(mockIOException0);
      assertEquals("java.io.InterruptedIOException: timeout", iOException0.toString());
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      AsyncTimeout asyncTimeout0 = new AsyncTimeout();
      asyncTimeout0.exit(false);
      assertFalse(asyncTimeout0.hasDeadline());
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      AsyncTimeout asyncTimeout0 = new AsyncTimeout();
      Buffer buffer0 = new Buffer();
      asyncTimeout0.source(buffer0);
      MockIOException mockIOException0 = new MockIOException("");
      IOException iOException0 = asyncTimeout0.exit((IOException) mockIOException0);
      assertSame(iOException0, mockIOException0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      AsyncTimeout asyncTimeout0 = new AsyncTimeout();
      asyncTimeout0.exit((IOException) null);
      asyncTimeout0.exit();
      asyncTimeout0.newTimeoutException((IOException) null);
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      asyncTimeout0.deadline(10000000L, timeUnit0);
      IOException iOException0 = null;
      asyncTimeout0.exit((IOException) null);
      Source source0 = null;
      Source source1 = asyncTimeout0.source((Source) null);
      asyncTimeout0.throwIfReached();
      asyncTimeout0.source(source1);
      asyncTimeout0.exit();
      asyncTimeout0.newTimeoutException((IOException) null);
      Pipe pipe0 = new Pipe(10000000L);
      Buffer buffer0 = pipe0.buffer;
      asyncTimeout0.sink(buffer0);
      asyncTimeout0.exit();
      try { 
        buffer0.require(32L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      AsyncTimeout asyncTimeout0 = new AsyncTimeout();
      asyncTimeout0.clearTimeout();
      asyncTimeout0.deadlineNanoTime(0L);
      asyncTimeout0.deadlineNanoTime();
      asyncTimeout0.enter();
      asyncTimeout0.timedOut();
      asyncTimeout0.timedOut();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-3);
      MockIOException mockIOException0 = new MockIOException("");
      MockIOException mockIOException1 = new MockIOException("", mockIOException0);
      IOException iOException0 = asyncTimeout0.newTimeoutException(mockIOException1);
      asyncTimeout0.exit(iOException0);
      System.setCurrentTimeMillis((-3849L));
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      AsyncTimeout asyncTimeout0 = new AsyncTimeout();
      AsyncTimeout asyncTimeout1 = (AsyncTimeout)asyncTimeout0.clearTimeout();
      asyncTimeout1.deadlineNanoTime(0L);
      asyncTimeout1.enter();
      asyncTimeout0.timedOut();
      MockIOException mockIOException0 = new MockIOException("");
      asyncTimeout0.exit(false);
      // Undeclared exception!
      try { 
        AsyncTimeout.awaitTimeout();
        fail("Expecting exception: IllegalMonitorStateException");
      
      } catch(IllegalMonitorStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.Object", e);
      }
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      AsyncTimeout asyncTimeout0 = new AsyncTimeout();
      AsyncTimeout asyncTimeout1 = (AsyncTimeout)asyncTimeout0.clearTimeout();
      asyncTimeout0.deadlineNanoTime(0L);
      asyncTimeout0.deadlineNanoTime();
      asyncTimeout0.enter();
      asyncTimeout0.timedOut();
      asyncTimeout0.timedOut();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-3);
      MockIOException mockIOException0 = new MockIOException("");
      asyncTimeout1.exit(false);
      // Undeclared exception!
      try { 
        AsyncTimeout.awaitTimeout();
        fail("Expecting exception: IllegalMonitorStateException");
      
      } catch(IllegalMonitorStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.Object", e);
      }
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      AsyncTimeout asyncTimeout0 = new AsyncTimeout();
      asyncTimeout0.clearTimeout();
      AsyncTimeout asyncTimeout1 = (AsyncTimeout)asyncTimeout0.deadlineNanoTime(0L);
      asyncTimeout0.deadlineNanoTime();
      asyncTimeout0.enter();
      asyncTimeout0.timedOut();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-3);
      MockIOException mockIOException0 = new MockIOException("");
      MockIOException mockIOException1 = new MockIOException("", mockIOException0);
      InterruptedIOException interruptedIOException0 = (InterruptedIOException)asyncTimeout0.newTimeoutException(mockIOException1);
      asyncTimeout0.exit((IOException) interruptedIOException0);
      AsyncTimeout asyncTimeout2 = AsyncTimeout.head;
      asyncTimeout1.enter();
      AsyncTimeout.awaitTimeout();
      System.setCurrentTimeMillis((byte) (-3));
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      AsyncTimeout asyncTimeout0 = new AsyncTimeout();
      asyncTimeout0.clearTimeout();
      asyncTimeout0.deadlineNanoTime(0L);
      asyncTimeout0.deadlineNanoTime();
      asyncTimeout0.enter();
      AsyncTimeout asyncTimeout1 = AsyncTimeout.awaitTimeout();
      MockIOException mockIOException0 = new MockIOException("Jr2D`6b");
      asyncTimeout0.exit((IOException) mockIOException0);
      MockIOException mockIOException1 = new MockIOException(mockIOException0);
      IOException iOException0 = asyncTimeout1.exit((IOException) mockIOException1);
      asyncTimeout0.exit(iOException0);
  }
}
