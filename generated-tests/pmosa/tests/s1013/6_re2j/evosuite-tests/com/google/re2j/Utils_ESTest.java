/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 18 00:57:08 GMT 2018
 */

package com.google.re2j;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.re2j.Utils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Utils_ESTest extends Utils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      int int0 = Utils.unhex(10);
      assertEquals((-1), int0);
      
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = Utils.subarray(byteArray0, (-1), (-1));
      assertArrayEquals(new byte[] {}, byteArray1);
      assertNotSame(byteArray1, byteArray0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Utils.runeToString((-2255));
      Utils.runeToString(625);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-11);
      byteArray0[1] = (byte) (-72);
      byteArray0[2] = (byte) (-11);
      // Undeclared exception!
      try { 
        Utils.subarray(byteArray0, (-1245), (-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1245
         //
         verifyException("com.google.re2j.Utils", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      boolean boolean0 = Utils.isWordRune((-2272));
      assertFalse(boolean0);
      
      int[] intArray0 = Utils.stringToRunes("");
      assertArrayEquals(new int[] {}, intArray0);
      
      byte[] byteArray0 = new byte[0];
      int int0 = Utils.indexOf(byteArray0, byteArray0, (-2272));
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-75);
      int int0 = Utils.indexOf(byteArray0, byteArray0, 125);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      int int0 = Utils.indexOf(byteArray0, byteArray0, (byte)0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      int int0 = Utils.indexOf(byteArray0, byteArray0, 0);
      assertEquals(0, int0);
      
      int int1 = Utils.emptyOpContext((-1011), (-1011));
      assertEquals(47, int1);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte)0;
      int int0 = Utils.indexOf(byteArray0, byteArray0, (byte)0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Utils.emptyOpContext(0, (-2637));
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)55;
      byteArray0[1] = (byte) (-24);
      byteArray0[2] = (byte)57;
      byteArray0[3] = (byte) (-46);
      byteArray0[4] = (byte) (-94);
      byteArray0[5] = (byte) (-37);
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte)0;
      // Undeclared exception!
      try { 
        Utils.subarray(byteArray0, (byte) (-46), 42);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -46
         //
         verifyException("com.google.re2j.Utils", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder("h#dE$|!1<");
      stringBuilder0.append(1060L);
      Utils.escapeRune(stringBuilder0, 10);
      assertEquals("h#dE$|!1<1060\\n", stringBuilder0.toString());
      
      int int0 = Utils.unhex(1053);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      int int0 = Utils.unhex((-5364));
      assertEquals((-1), int0);
      
      boolean boolean0 = Utils.isalnum((-5364));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      int int0 = Utils.unhex(1695);
      Utils.stringToRunes("Sundanese");
      int[] intArray0 = Utils.stringToRunes("Sundanese");
      assertArrayEquals(new int[] {83, 117, 110, 100, 97, 110, 101, 115, 101}, intArray0);
      
      int int1 = Utils.unhex(0);
      boolean boolean0 = Utils.isWordRune((-1));
      assertFalse(boolean0);
      
      int int2 = Utils.unhex((-1));
      assertTrue(int2 == int0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-85);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)23;
      int int3 = Utils.indexOf(byteArray0, byteArray0, (byte) (-85));
      assertFalse(int3 == int1);
      assertEquals(0, int3);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 64946;
      int[] intArray1 = Utils.subarray(intArray0, 64946, 64946);
      assertArrayEquals(new int[] {}, intArray1);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder("3xgq%;jEU?");
      Utils.escapeRune(stringBuilder0, 70);
      assertEquals("3xgq%;jEU?F", stringBuilder0.toString());
      
      int int0 = Utils.EMPTY_END_TEXT;
      boolean boolean0 = Utils.isWordRune(70);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder("3xgq%;jEU?");
      StringBuilder stringBuilder1 = new StringBuilder();
      Utils.escapeRune(stringBuilder0, 31);
      assertEquals("3xgq%;jEU?\\x1f", stringBuilder0.toString());
      
      boolean boolean0 = Utils.isWordRune(320);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      boolean boolean0 = Utils.isWordRune(102);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      boolean boolean0 = Utils.isalnum((-1275));
      assertFalse(boolean0);
      
      int[] intArray0 = new int[9];
      intArray0[0] = (-1275);
      intArray0[1] = (-1275);
      intArray0[2] = (-1275);
      intArray0[3] = (-1275);
      intArray0[4] = (-1275);
      intArray0[5] = (-467);
      intArray0[6] = 12;
      intArray0[7] = (-1275);
      intArray0[8] = (-1275);
      int[] intArray1 = Utils.subarray(intArray0, 12, 12);
      assertArrayEquals(new int[] {}, intArray1);
      
      int int0 = Utils.emptyOpContext((-1554), 793);
      assertEquals(37, int0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Utils.runeToString(2167);
      int[] intArray0 = new int[1];
      intArray0[0] = 2167;
      Utils.subarray(intArray0, 2167, 2167);
      int int0 = 57;
      Utils.emptyOpContext(57, (-3024));
      Utils.emptyOpContext(26, 2167);
      String string0 = "";
      Utils.stringToRunes("");
      Utils.runeToString(2167);
      Utils.stringToRunes("\u0877");
      Utils.isalnum(2167);
      Utils.unhex(57);
      Utils.runeToString((-460));
      Utils.isalnum((-328));
      StringBuilder stringBuilder0 = null;
      try {
        stringBuilder0 = new StringBuilder((-922));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byte byte0 = (byte)0;
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-15);
      byteArray0[2] = (byte) (-27);
      byte byte1 = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)32;
      byteArray0[5] = (byte)1;
      byteArray0[6] = (byte)16;
      byteArray0[7] = (byte)61;
      byte[] byteArray1 = Utils.subarray(byteArray0, (byte)0, 0);
      Utils.isalnum((byte)61);
      Utils.runeToString((byte)1);
      Utils.emptyOpContext((byte) (-15), 0);
      Utils.indexOf(byteArray0, byteArray0, (byte) (-27));
      Utils.indexOf(byteArray0, byteArray1, 0);
      StringBuilder stringBuilder0 = new StringBuilder("\u0001");
      // Undeclared exception!
      try { 
        stringBuilder0.insert((-1427), "\u0001");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -1427
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Utils.isalnum((-1275));
      int[] intArray0 = new int[9];
      intArray0[0] = (-1275);
      intArray0[1] = (-1275);
      intArray0[2] = (-1275);
      intArray0[3] = (-1275);
      intArray0[4] = (-1275);
      intArray0[5] = (-467);
      intArray0[6] = 12;
      intArray0[7] = (-1275);
      intArray0[8] = (-1275);
      int[] intArray1 = Utils.stringToRunes("o'K4");
      StringBuilder stringBuilder0 = new StringBuilder("o'K4");
      StringBuilder stringBuilder1 = stringBuilder0.delete(2, 12);
      StringBuilder stringBuilder2 = stringBuilder1.append((Object) intArray1);
      Utils.escapeRune(stringBuilder1, (-36));
      assertSame(stringBuilder1, stringBuilder2);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder("h#dE$|!1<");
      Utils.escapeRune(stringBuilder0, 2222);
      assertEquals("h#dE$|!1<\\x{8ae}", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-75);
      byteArray0[1] = (byte)114;
      int int0 = Utils.indexOf(byteArray0, byteArray0, (byte) (-75));
      assertEquals(0, int0);
      
      boolean boolean0 = Utils.isalnum(65);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)127;
      byteArray0[2] = (byte) (-80);
      byteArray0[2] = (byte) (-96);
      byteArray0[3] = (byte) (-96);
      byteArray0[4] = (byte)57;
      byteArray0[5] = (byte) (-125);
      byteArray0[6] = (byte)0;
      int int0 = Utils.indexOf(byteArray0, byteArray0, (byte) (-96));
      int[] intArray0 = Utils.stringToRunes("](P(^P,");
      assertArrayEquals(new int[] {93, 40, 80, 40, 94, 80, 44}, intArray0);
      
      Utils.runeToString(8653);
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte)93;
      byteArray1[1] = (byte)93;
      byteArray1[2] = (byte)57;
      byteArray1[3] = (byte) (-96);
      byteArray1[4] = (byte)0;
      int int1 = Utils.indexOf(byteArray0, byteArray1, 8653);
      assertFalse(int1 == int0);
      
      Utils.stringToRunes("\u21CD");
      boolean boolean0 = Utils.isWordRune((byte)127);
      boolean boolean1 = Utils.isalnum(65079);
      assertTrue(boolean1 == boolean0);
      
      byte[] byteArray2 = new byte[9];
      byteArray2[0] = (byte) (-96);
      byteArray2[1] = (byte) (-80);
      byteArray2[2] = (byte)127;
      byteArray2[3] = (byte)57;
      byteArray2[4] = (byte) (-80);
      byteArray2[5] = (byte)0;
      byteArray2[6] = (byte) (-125);
      byteArray2[7] = (byte) (-125);
      byteArray2[8] = (byte)0;
      int int2 = Utils.indexOf(byteArray2, byteArray1, (byte) (-96));
      assertFalse(int2 == int0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      Utils.escapeRune(stringBuilder0, 70);
      assertEquals("F", stringBuilder0.toString());
      
      byte[] byteArray0 = new byte[2];
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte)71;
      int int0 = Utils.indexOf(byteArray0, byteArray1, (byte)0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      int int0 = Utils.unhex(147);
      assertEquals((-1), int0);
      
      int int1 = Utils.emptyOpContext(3686, 3686);
      assertEquals(32, int1);
      
      boolean boolean0 = Utils.isWordRune(147);
      boolean boolean1 = Utils.isWordRune(65);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      int int0 = 122;
      Utils.isWordRune(122);
      StringBuilder stringBuilder0 = new StringBuilder();
      String string0 = "4G[0%RAL}I";
      StringBuffer stringBuffer0 = new StringBuffer("4G[0%RAL}I");
      int int1 = (-1827);
      // Undeclared exception!
      try { 
        stringBuilder0.append((CharSequence) stringBuffer0, 122, (-1827));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // start 122, end -1827, s.length() 10
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)127;
      byteArray0[2] = (byte)127;
      byteArray0[2] = (byte) (-96);
      byte byte0 = (byte)93;
      byteArray0[3] = (byte) (-96);
      byteArray0[5] = (byte) (-125);
      byteArray0[6] = (byte)0;
      Utils.indexOf(byteArray0, byteArray0, (byte) (-96));
      Utils.stringToRunes("](P(^P,");
      Utils.runeToString(8653);
      byte[] byteArray1 = new byte[5];
      byteArray1[1] = (byte)93;
      Utils.indexOf(byteArray0, byteArray1, (byte) (-96));
      Utils.runeToString((-1));
      StringBuilder stringBuilder0 = new StringBuilder("");
      // Undeclared exception!
      try { 
        stringBuilder0.insert((int) (byte) (-96), (float) (byte) (-96));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -96
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      Utils.isalnum(57);
      Utils.runeToString(16);
      Utils.emptyOpContext((byte)16, (byte)16);
      int int0 = Utils.EMPTY_NO_WORD_BOUNDARY;
      Utils.indexOf(byteArray0, byteArray0, (-779));
      Utils.indexOf(byteArray0, byteArray0, 702);
      Utils.indexOf(byteArray0, byteArray0, 1);
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "\u0010");
      Utils.escapeRune(stringBuilder0, 905);
      assertEquals("\u0010\u0389", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      Utils.indexOf(byteArray0, byteArray0, (byte) (-15));
      String string0 = "h#dE$|!1<";
      StringBuilder stringBuilder0 = new StringBuilder("h#dE$|!1<");
      StringBuilder stringBuilder1 = stringBuilder0.append(true);
      Utils.escapeRune(stringBuilder1, 10);
      int[] intArray0 = new int[5];
      intArray0[0] = 10;
      intArray0[1] = 10;
      int int0 = (-15);
      intArray0[2] = (-15);
      intArray0[3] = 0;
      intArray0[4] = 0;
      // Undeclared exception!
      try { 
        Utils.subarray(intArray0, 40960, (byte) (-15));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Utils", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byte[] byteArray1 = new byte[0];
      Utils.indexOf(byteArray0, byteArray1, 1274);
      StringBuilder stringBuilder0 = new StringBuilder("h#dE$|!1<");
      Utils.escapeRune(stringBuilder0, 8);
      assertEquals("h#dE$|!1<\\b", stringBuilder0.toString());
      
      int int0 = Utils.EMPTY_END_TEXT;
      assertTrue(int0 == int1);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[3] = (byte) (-15);
      byteArray0[2] = (byte) (-67);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[6] = (byte)16;
      byteArray0[7] = (byte)61;
      Utils.isalnum((byte)61);
      StringBuilder stringBuilder0 = new StringBuilder("h#dE$|!1<");
      Utils.escapeRune(stringBuilder0, 4351);
      int int0 = Utils.EMPTY_END_TEXT;
      assertEquals(8, int0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[3] = (byte) (-15);
      byteArray0[2] = (byte) (-67);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[6] = (byte)16;
      byteArray0[7] = (byte)61;
      Utils.isalnum((byte)61);
      Utils.runeToString((byte)1);
      Utils.emptyOpContext((byte) (-15), 0);
      Utils.emptyOpContext((byte) (-67), 1702);
      Utils.emptyOpContext((byte)16, 1702);
      int int0 = Utils.EMPTY_END_TEXT;
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte)61;
      byteArray1[1] = (byte)0;
      byteArray1[2] = (byte) (-15);
      byteArray1[3] = (byte)16;
      byteArray1[4] = (byte)16;
      byteArray1[5] = (byte)1;
      Utils.indexOf(byteArray1, byteArray1, (byte)16);
      Utils.indexOf(byteArray0, byteArray1, (byte)0);
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "\u0001");
      StringBuilder stringBuilder1 = stringBuilder0.reverse();
      Utils.escapeRune(stringBuilder1, 12);
      assertEquals("\u0001\\f", stringBuilder1.toString());
      assertEquals("\u0001\\f", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder("h#dE$|!1<");
      stringBuilder0.append(true);
      Utils.escapeRune(stringBuilder0, 13);
      StringBuilder stringBuilder1 = new StringBuilder("");
      Utils.escapeRune(stringBuilder1, 13);
      int int0 = Utils.EMPTY_END_TEXT;
      assertEquals(8, int0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder("h#dE$|!1<");
      StringBuilder stringBuilder1 = stringBuilder0.append(false);
      Utils.escapeRune(stringBuilder1, 9);
      Utils.escapeRune(stringBuilder1, 763);
      StringBuilder stringBuilder2 = stringBuilder0.append(9);
      Utils.escapeRune(stringBuilder2, (-5034));
      int int0 = Utils.EMPTY_END_TEXT;
      assertEquals(8, int0);
  }
}
