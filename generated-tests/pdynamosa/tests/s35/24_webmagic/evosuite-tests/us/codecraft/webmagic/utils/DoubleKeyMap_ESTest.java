/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 23 23:28:52 GMT 2019
 */

package us.codecraft.webmagic.utils;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.HashMap;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import us.codecraft.webmagic.utils.DoubleKeyMap;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DoubleKeyMap_ESTest extends DoubleKeyMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      HashMap<HashMap<String, Integer>, Map<String, String>> hashMap0 = new HashMap<HashMap<String, Integer>, Map<String, String>>();
      DoubleKeyMap<HashMap<String, Integer>, String, String> doubleKeyMap0 = new DoubleKeyMap<HashMap<String, Integer>, String, String>(hashMap0);
      doubleKeyMap0.put((HashMap<String, Integer>) null, "WMF", "WMF");
      doubleKeyMap0.remove((HashMap<String, Integer>) null, "WMF");
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      HashMap<HashMap<Integer, Integer>, Map<Map<Integer, String>, String>> hashMap0 = new HashMap<HashMap<Integer, Integer>, Map<Map<Integer, String>, String>>();
      HashMap<Integer, Integer> hashMap1 = new HashMap<Integer, Integer>();
      HashMap<Map<Integer, String>, String> hashMap2 = new HashMap<Map<Integer, String>, String>();
      hashMap0.putIfAbsent(hashMap1, hashMap2);
      DoubleKeyMap<HashMap<Integer, Integer>, Map<Integer, String>, String> doubleKeyMap0 = new DoubleKeyMap<HashMap<Integer, Integer>, Map<Integer, String>, String>(hashMap0);
      Map<Map<Integer, String>, String> map0 = doubleKeyMap0.remove(hashMap1);
      assertTrue(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      HashMap<Map<Integer, String>, Map<Object, Map<Object, String>>> hashMap0 = new HashMap<Map<Integer, String>, Map<Object, Map<Object, String>>>();
      DoubleKeyMap<Map<Integer, String>, Object, Map<Object, String>> doubleKeyMap0 = new DoubleKeyMap<Map<Integer, String>, Object, Map<Object, String>>(hashMap0);
      DoubleKeyMap<Object, String, HashMap<String, Object>> doubleKeyMap1 = new DoubleKeyMap<Object, String, HashMap<String, Object>>();
      HashMap<Integer, String> hashMap1 = new HashMap<Integer, String>();
      HashMap<Object, Map<Object, String>> hashMap2 = new HashMap<Object, Map<Object, String>>();
      HashMap<Object, String> hashMap3 = new HashMap<Object, String>();
      hashMap2.put(doubleKeyMap1, hashMap3);
      hashMap0.put(hashMap1, hashMap2);
      Map<Object, Map<Object, String>> map0 = doubleKeyMap0.remove((Map<Integer, String>) hashMap1);
      assertFalse(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DoubleKeyMap<HashMap<Integer, Integer>, Object, Map<String, Object>> doubleKeyMap0 = new DoubleKeyMap<HashMap<Integer, Integer>, Object, Map<String, Object>>();
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      Map<String, Object> map0 = doubleKeyMap0.remove(hashMap0, (Object) null);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DoubleKeyMap<Map<Integer, String>, Integer, HashMap<Integer, Object>> doubleKeyMap0 = new DoubleKeyMap<Map<Integer, String>, Integer, HashMap<Integer, Object>>();
      Map<HashMap<Object, Object>, Map<Object, Object>> map0 = doubleKeyMap0.newMap();
      DoubleKeyMap<HashMap<Object, Object>, Object, Object> doubleKeyMap1 = new DoubleKeyMap<HashMap<Object, Object>, Object, Object>(map0);
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      Object object0 = new Object();
      Object object1 = doubleKeyMap1.remove(hashMap0, object0);
      assertNull(object1);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DoubleKeyMap<Object, Object, Object> doubleKeyMap0 = new DoubleKeyMap<Object, Object, Object>();
      HashMap<Integer, String> hashMap0 = new HashMap<Integer, String>();
      DoubleKeyMap<Object, Map<Integer, String>, Map<Object, Map<Integer, String>>> doubleKeyMap1 = new DoubleKeyMap<Object, Map<Integer, String>, Map<Object, Map<Integer, String>>>();
      Map<Object, Map<Integer, String>> map0 = doubleKeyMap1.remove((Object) doubleKeyMap0, (Map<Integer, String>) hashMap0);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DoubleKeyMap<Object, Object, Object> doubleKeyMap0 = new DoubleKeyMap<Object, Object, Object>((Map<Object, Map<Object, Object>>) null);
      Map<Object, Object> map0 = doubleKeyMap0.remove((Object) null);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DoubleKeyMap<String, Map<Map<Object, Map<Map<Integer, String>, Map<Object, Map<Integer, String>>>>, Map<HashMap<Object, Object>, Map<Object, Map<Map<Integer, String>, Map<Object, Map<Integer, String>>>>>>, Object> doubleKeyMap0 = new DoubleKeyMap<String, Map<Map<Object, Map<Map<Integer, String>, Map<Object, Map<Integer, String>>>>, Map<HashMap<Object, Object>, Map<Object, Map<Map<Integer, String>, Map<Object, Map<Integer, String>>>>>>, Object>();
      Map<Map<Object, Map<Map<Integer, String>, Map<Object, Map<Integer, String>>>>, Map<HashMap<Object, Object>, Map<Object, Map<Map<Integer, String>, Map<Object, Map<Integer, String>>>>>> map0 = doubleKeyMap0.newMap();
      DoubleKeyMap<Map<Object, Map<Map<Integer, String>, Map<Object, Map<Integer, String>>>>, HashMap<Object, Object>, Map<Object, Map<Map<Integer, String>, Map<Object, Map<Integer, String>>>>> doubleKeyMap1 = new DoubleKeyMap<Map<Object, Map<Map<Integer, String>, Map<Object, Map<Integer, String>>>>, HashMap<Object, Object>, Map<Object, Map<Map<Integer, String>, Map<Object, Map<Integer, String>>>>>(map0);
      Map<Object, Map<Map<Integer, String>, Map<Object, Map<Integer, String>>>> map1 = doubleKeyMap1.newMap();
      Class<Map> class0 = Map.class;
      DoubleKeyMap<Object, Map<Integer, String>, Map<Object, Map<Integer, String>>> doubleKeyMap2 = new DoubleKeyMap<Object, Map<Integer, String>, Map<Object, Map<Integer, String>>>(map1, class0);
      Object object0 = new Object();
      Map<Map<Integer, String>, Map<Object, Map<Integer, String>>> map2 = doubleKeyMap2.remove(object0);
      assertNull(map2);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DoubleKeyMap<HashMap<String, Object>, String, Map<Object, Object>> doubleKeyMap0 = new DoubleKeyMap<HashMap<String, Object>, String, Map<Object, Object>>();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      Map<Object, Object> map0 = doubleKeyMap0.put(hashMap0, "", (Map<Object, Object>) null);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DoubleKeyMap<Map<Integer, String>, Integer, Object> doubleKeyMap0 = new DoubleKeyMap<Map<Integer, String>, Integer, Object>();
      HashMap<Integer, String> hashMap0 = new HashMap<Integer, String>();
      Object object0 = new Object();
      Object object1 = doubleKeyMap0.put((Map<Integer, String>) hashMap0, (Integer) null, object0);
      assertNull(object1);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DoubleKeyMap<HashMap<Integer, Map<Integer, String>>, Object, String> doubleKeyMap0 = new DoubleKeyMap<HashMap<Integer, Map<Integer, String>>, Object, String>();
      HashMap<Integer, String> hashMap0 = new HashMap<Integer, String>();
      DoubleKeyMap<Map<Object, Integer>, Object, HashMap<Integer, String>> doubleKeyMap1 = new DoubleKeyMap<Map<Object, Integer>, Object, HashMap<Integer, String>>();
      DoubleKeyMap<String, Object, Object> doubleKeyMap2 = new DoubleKeyMap<String, Object, Object>((Map<String, Map<Object, Object>>) null);
      Map<Object, Integer> map0 = doubleKeyMap2.newMap();
      HashMap<Integer, String> hashMap1 = doubleKeyMap1.put(map0, (Object) doubleKeyMap0, hashMap0);
      assertNull(hashMap1);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DoubleKeyMap<String, Object, Object> doubleKeyMap0 = new DoubleKeyMap<String, Object, Object>();
      DoubleKeyMap<HashMap<Object, String>, Map<Object, Map<Object, HashMap<Object, Integer>>>, Object> doubleKeyMap1 = new DoubleKeyMap<HashMap<Object, String>, Map<Object, Map<Object, HashMap<Object, Integer>>>, Object>();
      Map<Object, Map<Object, HashMap<Object, Integer>>> map0 = doubleKeyMap1.newMap();
      DoubleKeyMap<Object, Object, HashMap<Object, Integer>> doubleKeyMap2 = new DoubleKeyMap<Object, Object, HashMap<Object, Integer>>(map0);
      HashMap<Object, Integer> hashMap0 = new HashMap<Object, Integer>();
      HashMap<Object, Integer> hashMap1 = doubleKeyMap2.put((Object) doubleKeyMap0, (Object) "p", hashMap0);
      assertNull(hashMap1);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      HashMap<Integer, Map<Integer, String>> hashMap0 = new HashMap<Integer, Map<Integer, String>>();
      HashMap<HashMap<Integer, Map<Integer, String>>, Map<Object, String>> hashMap1 = new HashMap<HashMap<Integer, Map<Integer, String>>, Map<Object, String>>();
      DoubleKeyMap<HashMap<Integer, Map<Integer, String>>, Object, String> doubleKeyMap0 = new DoubleKeyMap<HashMap<Integer, Map<Integer, String>>, Object, String>(hashMap1);
      String string0 = doubleKeyMap0.get(hashMap0, (Object) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      HashMap<String, Map<HashMap<Object, Object>, String>> hashMap0 = new HashMap<String, Map<HashMap<Object, Object>, String>>();
      DoubleKeyMap<String, HashMap<Object, Object>, String> doubleKeyMap0 = new DoubleKeyMap<String, HashMap<Object, Object>, String>(hashMap0);
      HashMap<Object, Object> hashMap1 = new HashMap<Object, Object>();
      String string0 = doubleKeyMap0.get((String) null, hashMap1);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      HashMap<String, Map<HashMap<Object, Integer>, Integer>> hashMap0 = new HashMap<String, Map<HashMap<Object, Integer>, Integer>>();
      DoubleKeyMap<String, HashMap<Object, Integer>, Integer> doubleKeyMap0 = new DoubleKeyMap<String, HashMap<Object, Integer>, Integer>(hashMap0);
      Map<HashMap<Object, Integer>, Integer> map0 = doubleKeyMap0.get((String) null);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Class<Map> class0 = Map.class;
      Integer integer0 = new Integer((-3364));
      HashMap<Integer, Map<Map<String, Object>, Integer>> hashMap0 = new HashMap<Integer, Map<Map<String, Object>, Integer>>();
      DoubleKeyMap<Integer, Map<String, Object>, Integer> doubleKeyMap0 = new DoubleKeyMap<Integer, Map<String, Object>, Integer>(hashMap0, class0);
      // Undeclared exception!
      try { 
        doubleKeyMap0.put(integer0, (Map<String, Object>) null, integer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Class<Map> class0 = Map.class;
      DoubleKeyMap<HashMap<String, String>, Integer, Integer> doubleKeyMap0 = new DoubleKeyMap<HashMap<String, String>, Integer, Integer>();
      HashMap<Object, Map<HashMap<String, Integer>, Object>> hashMap0 = new HashMap<Object, Map<HashMap<String, Integer>, Object>>();
      DoubleKeyMap<Object, HashMap<String, Integer>, Object> doubleKeyMap1 = new DoubleKeyMap<Object, HashMap<String, Integer>, Object>(hashMap0, class0);
      Map<HashMap<String, Integer>, Object> map0 = doubleKeyMap1.get((Object) doubleKeyMap0);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      HashMap<HashMap<String, Integer>, Map<String, String>> hashMap0 = new HashMap<HashMap<String, Integer>, Map<String, String>>();
      DoubleKeyMap<HashMap<String, Integer>, String, String> doubleKeyMap0 = new DoubleKeyMap<HashMap<String, Integer>, String, String>(hashMap0);
      doubleKeyMap0.put((HashMap<String, Integer>) null, "us.codecraft.webmagic.utils.DoubleKeyMap", "9YG<<q");
      doubleKeyMap0.remove((HashMap<String, Integer>) null, "WMF");
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DoubleKeyMap<Object, Object, Integer> doubleKeyMap0 = new DoubleKeyMap<Object, Object, Integer>();
      Map<Object, Map<Object, String>> map0 = doubleKeyMap0.newMap();
      DoubleKeyMap<Object, Object, String> doubleKeyMap1 = new DoubleKeyMap<Object, Object, String>(map0);
      String string0 = doubleKeyMap1.get((Object) doubleKeyMap0, (Object) doubleKeyMap0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DoubleKeyMap<HashMap<Map<Integer, String>, String>, Integer, String> doubleKeyMap0 = new DoubleKeyMap<HashMap<Map<Integer, String>, String>, Integer, String>();
      Map<Integer, Map<Map<Integer, Integer>, String>> map0 = doubleKeyMap0.newMap();
      DoubleKeyMap<Integer, Map<Integer, Integer>, String> doubleKeyMap1 = new DoubleKeyMap<Integer, Map<Integer, Integer>, String>(map0);
      Integer integer0 = new Integer((-3364));
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      doubleKeyMap1.put(integer0, (Map<Integer, Integer>) hashMap0, "!*X$Pr");
      doubleKeyMap1.get(integer0, (Map<Integer, Integer>) hashMap0);
      assertFalse(map0.isEmpty());
      assertEquals(1, map0.size());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Class<Map> class0 = Map.class;
      DoubleKeyMap<Integer, String, Map<Integer, String>> doubleKeyMap0 = null;
      try {
        doubleKeyMap0 = new DoubleKeyMap<Integer, String, Map<Integer, String>>(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      HashMap<HashMap<String, Integer>, Map<String, String>> hashMap0 = new HashMap<HashMap<String, Integer>, Map<String, String>>();
      DoubleKeyMap<HashMap<String, Integer>, String, String> doubleKeyMap0 = new DoubleKeyMap<HashMap<String, Integer>, String, String>(hashMap0);
      doubleKeyMap0.put((HashMap<String, Integer>) null, "us.codecraft.webmagic.utils.DoubleKeyMap", "9YG<<q");
      doubleKeyMap0.put((HashMap<String, Integer>) null, "WMF", "WMF");
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
  }
}
