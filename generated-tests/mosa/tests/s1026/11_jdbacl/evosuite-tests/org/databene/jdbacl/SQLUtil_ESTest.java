/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 17:34:26 GMT 2018
 */

package org.databene.jdbacl;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayOutputStream;
import java.io.DataOutputStream;
import java.io.PrintWriter;
import java.io.Reader;
import java.io.StreamTokenizer;
import java.io.StringReader;
import org.apache.derby.iapi.services.io.DynamicByteArrayOutputStream;
import org.apache.derby.iapi.store.raw.RawStoreFactory;
import org.apache.derby.iapi.store.raw.xact.RawTransaction;
import org.apache.derby.iapi.types.TypeId;
import org.databene.jdbacl.NameSpec;
import org.databene.jdbacl.SQLUtil;
import org.databene.jdbacl.model.CompositeDBObject;
import org.databene.jdbacl.model.DBCatalog;
import org.databene.jdbacl.model.DBCheckConstraint;
import org.databene.jdbacl.model.DBColumn;
import org.databene.jdbacl.model.DBConstraint;
import org.databene.jdbacl.model.DBDataType;
import org.databene.jdbacl.model.DBForeignKeyConstraint;
import org.databene.jdbacl.model.DBNonUniqueIndex;
import org.databene.jdbacl.model.DBObject;
import org.databene.jdbacl.model.DBPrimaryKeyConstraint;
import org.databene.jdbacl.model.DBSchema;
import org.databene.jdbacl.model.DBSequence;
import org.databene.jdbacl.model.DBTable;
import org.databene.jdbacl.model.DBUniqueConstraint;
import org.databene.jdbacl.model.DBUniqueIndex;
import org.databene.jdbacl.model.DefaultDBColumn;
import org.databene.jdbacl.model.DefaultDBTable;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteLocalAddress;
import org.evosuite.runtime.testdata.EvoSuiteRemoteAddress;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.h2.value.ValueDecimal;
import org.h2.value.ValueLobDb;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SQLUtil_ESTest extends SQLUtil_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "pzCk6{S\"cyl85dG4=w";
      String string0 = SQLUtil.innerJoin("Qe4,`-FCa,r)3", stringArray0, "pzCk6{S\"cyl85dG4=w", "Qe4,`-FCa,r)3", stringArray0);
      assertEquals("pzCk6{S\"cyl85dG4=w as Qe4,`-FCa,r)3 on Qe4,`-FCa,r)3.pzCk6{S\"cyl85dG4=w = Qe4,`-FCa,r)3.pzCk6{S\"cyl85dG4=w", string0);
      
      String string1 = SQLUtil.renderWhereClause(stringArray0, stringArray0);
      assertEquals("pzCk6{S\"cyl85dG4=w = 'pzCk6{S\"cyl85dG4=w'", string1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "=h{W)Q !W^,gEN";
      stringArray0[1] = "=h{W)Q !W^,gEN";
      stringArray0[2] = "=h{W)Q !W^,gEN";
      String string0 = SQLUtil.leftJoin("=h{W)Q !W^,gEN", stringArray0, "=h{W)Q !W^,gEN", "=h{W)Q !W^,gEN", stringArray0);
      assertEquals("left join =h{W)Q !W^,gEN as =h{W)Q !W^,gEN on =h{W)Q !W^,gEN.=h{W)Q !W^,gEN = =h{W)Q !W^,gEN.=h{W)Q !W^,gEN and =h{W)Q !W^,gEN.=h{W)Q !W^,gEN = =h{W)Q !W^,gEN.=h{W)Q !W^,gEN and =h{W)Q !W^,gEN.=h{W)Q !W^,gEN = =h{W)Q !W^,gEN.=h{W)Q !W^,gEN", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      String[] stringArray1 = new String[1];
      stringArray1[0] = "";
      // Undeclared exception!
      try { 
        SQLUtil.join("", "", stringArray0, stringArray0[5], "", stringArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema("");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("'j03%5M)", dBSchema0);
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "", true, (String[]) null);
      NameSpec nameSpec0 = NameSpec.NEVER;
      String string0 = SQLUtil.pkSpec(dBPrimaryKeyConstraint0, nameSpec0);
      String string1 = SQLUtil.constraintName(dBPrimaryKeyConstraint0);
      assertEquals("CONSTRAINT  ", string1);
      
      DBColumn[] dBColumnArray0 = new DBColumn[1];
      DBDataType dBDataType0 = DBDataType.getInstance(39, "callt>z.t(");
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      Integer integer1 = RawTransaction.LOCK_ESCALATE;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("PRIMARY KEY ()", defaultDBTable0, dBDataType0, integer0, integer1);
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      String string2 = SQLUtil.renderColumnNames(dBColumnArray0);
      assertTrue(string2.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress(".", 804);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("");
      String string0 = SQLUtil.typeAndName(defaultDBTable0);
      assertNotNull(string0);
      assertEquals("table ", string0);
      
      SQLUtil sQLUtil0 = new SQLUtil();
      DBColumn[] dBColumnArray0 = new DBColumn[3];
      DBDataType dBDataType0 = DBDataType.getInstance(6, "drop materialized view.");
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("", defaultDBTable0, dBDataType0, (Integer) null, integer0);
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      DefaultDBTable defaultDBTable1 = new DefaultDBTable("");
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("drop materialized view.", defaultDBTable1, dBDataType0);
      dBColumnArray0[1] = (DBColumn) defaultDBColumn1;
      DefaultDBColumn defaultDBColumn2 = new DefaultDBColumn("BITAND", defaultDBTable1, dBDataType0, (Integer) null, integer0);
      dBColumnArray0[2] = (DBColumn) defaultDBColumn2;
      String string1 = SQLUtil.renderColumnNames(dBColumnArray0);
      assertEquals(", drop materialized view., BITAND", string1);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure(" DEFAULTE` ");
      assertNull(boolean0);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = " DEFAULTE` ";
      stringArray0[1] = " DEFAULTE` ";
      stringArray0[2] = " DEFAULTE` ";
      String string0 = SQLUtil.renderColumnListWithTableName(" DEFAULTE` ", stringArray0);
      assertEquals(" DEFAULTE` . DEFAULTE` ,  DEFAULTE` . DEFAULTE` ,  DEFAULTE` . DEFAULTE` ", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("alter materialized view65%c");
      assertTrue(boolean0);
      assertNotNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnTypeWithSize((DBColumn) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("C|Ct<f(n#.O&oG3ak");
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "C|Ct<f(n#.O&oG3ak", true, (String[]) null);
      SQLUtil.constraintName(dBPrimaryKeyConstraint0);
      // Undeclared exception!
      try { 
        SQLUtil.renderQuery(defaultDBTable0, (String[]) null, (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String string0 = SQLUtil.normalize(";My!g-cQ", true);
      assertEquals("; My ! g - cQ", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("truncate", true, "truncate", "truncate");
      NameSpec nameSpec0 = NameSpec.NEVER;
      String string0 = SQLUtil.constraintSpec(dBCheckConstraint0, nameSpec0);
      assertEquals("CHECK truncate", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      String string0 = SQLUtil.substituteMarkers("select intopztk", "select intopztk", "select intopztk");
      assertEquals("'select intopztk'", string0);
      
      String string1 = SQLUtil.removeComments("select intopztk");
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable((String) null);
      DynamicByteArrayOutputStream dynamicByteArrayOutputStream0 = new DynamicByteArrayOutputStream((byte[]) null);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(dynamicByteArrayOutputStream0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      SQLUtil.renderCreateTable(defaultDBTable0, false, nameSpec0, mockPrintWriter0);
      assertNull(defaultDBTable0.getDoc());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      NetworkHandling.sendDataOnTcp((EvoSuiteLocalAddress) null, (byte[]) null);
      Boolean.valueOf("/letep-Da[hk[");
      SQLUtil.normalize("/letep-Da[hk[", false);
      StringBuilder stringBuilder0 = new StringBuilder(90059);
      StringBuilder stringBuilder1 = SQLUtil.addRequiredCondition("alter sessionhu-w}fbi%* $@e%k", stringBuilder0);
      StringBuilder stringBuilder2 = SQLUtil.addOptionalCondition("cbj{8VCDBs", stringBuilder1);
      SQLUtil.addOptionalCondition("alter sessionhu-w}fbi%* $@e%k", stringBuilder2);
      assertEquals("alter sessionhu-w}fbi%* $@e%k or cbj{8VCDBs or alter sessionhu-w}fbi%* $@e%k", stringBuilder2.toString());
      assertEquals("alter sessionhu-w}fbi%* $@e%k or cbj{8VCDBs or alter sessionhu-w}fbi%* $@e%k", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      String[] stringArray0 = new String[19];
      stringArray0[0] = "";
      stringArray0[2] = "";
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "");
      StringBuilder stringBuilder1 = SQLUtil.addOptionalCondition("JxZ%$]`EKMEm(sXf;'.", stringBuilder0);
      stringBuilder0.append((-3722L));
      SQLUtil.addRequiredCondition("$63=[@@x>Y~6C-^&", stringBuilder0);
      stringBuilder1.append(344.5F);
      stringBuilder1.append((float) (-3722L));
      stringBuilder0.appendCodePoint(2475);
      Boolean boolean0 = Boolean.valueOf(">AlskrKtZuqm");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("truncate", true, "truncate", "truncate");
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String string0 = SQLUtil.constraintSpec(dBCheckConstraint0, nameSpec0);
      assertEquals("CONSTRAINT truncate CHECK truncate", string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("truncate", false, "truncate", "truncate");
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String string0 = SQLUtil.constraintSpec(dBCheckConstraint0, nameSpec0);
      assertEquals("CHECK truncate", string0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      String string0 = SQLUtil.normalize("C|Ct<f(n#.O&oG3ak", false);
      assertEquals("C | Ct < f (n #.O & oG3ak", string0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DBSequence dBSequence0 = new DBSequence("p-ak[", "p-ak[", "Only warnings can be wrapped.");
      String string0 = SQLUtil.ownerDotComponent(dBSequence0);
      assertEquals("p-ak[", string0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ValueDecimal valueDecimal0 = (ValueDecimal)ValueDecimal.ZERO;
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("5&+4[,*:_A1Xf");
      defaultDBTable0.getPrimaryKeyConstraint();
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      // Undeclared exception!
      try { 
        SQLUtil.constraintSpec((DBConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("execute");
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("tuncate", false, "tuncate", "tuncate");
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      String string0 = SQLUtil.constraintSpec(dBCheckConstraint0, nameSpec0);
      assertEquals("CONSTRAINT tuncate CHECK tuncate", string0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("HU-W}fBI%* $@E%k");
      DynamicByteArrayOutputStream dynamicByteArrayOutputStream0 = new DynamicByteArrayOutputStream((byte[]) null);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(dynamicByteArrayOutputStream0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, mockPrintWriter0);
      assertEquals("table", defaultDBTable0.getObjectType());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable((String) null);
      DynamicByteArrayOutputStream dynamicByteArrayOutputStream0 = new DynamicByteArrayOutputStream((byte[]) null);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(dynamicByteArrayOutputStream0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      String[] stringArray0 = new String[1];
      stringArray0[0] = "Mn";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "Mn", false, stringArray0);
      String string0 = SQLUtil.constraintSpec(dBUniqueConstraint0, nameSpec0);
      assertEquals("UNIQUE (Mn)", string0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      DynamicByteArrayOutputStream dynamicByteArrayOutputStream0 = new DynamicByteArrayOutputStream();
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("truncate");
      assertNotNull(boolean0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      SQLUtil.removeComments("C|Ct<f(n#.O&oG3ak");
      String string0 = null;
      StringBuilder stringBuilder0 = new StringBuilder();
      StringBuilder stringBuilder1 = SQLUtil.addOptionalCondition((String) null, stringBuilder0);
      int int0 = (-3754);
      // Undeclared exception!
      try { 
        stringBuilder1.insert((-3754), (float) (-3754));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -3754
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      String string0 = SQLUtil.normalize("alter index( as , as). as , ( as , as).as", true);
      assertEquals("alter index (as, as).as, (as, as).as", string0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      String string0 = SQLUtil.normalize(":Yl3b~9za5=mpedS'", false);
      assertEquals(": Yl3b ~ 9za5 = mpedS ''", string0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      SQLUtil.parseColumnTypeAndSize("eaM0-?E63=Df0gEn");
      DynamicByteArrayOutputStream dynamicByteArrayOutputStream0 = new DynamicByteArrayOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(dynamicByteArrayOutputStream0);
      mockPrintStream0.append('L');
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockPrintStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      ValueDecimal valueDecimal0 = (ValueDecimal)ValueDecimal.ZERO;
      Character character0 = new Character('L');
      String string0 = SQLUtil.substituteMarkers("B9N;va%", "B9N;va%", character0);
      String string1 = SQLUtil.normalize("", true);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[2];
      defaultDBTable0.addReferrer((DBTable) null);
      stringArray0[0] = "alter indexnull";
      stringArray0[1] = "alter indexnull";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("alter indexnull", false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String string0 = SQLUtil.constraintSpec(dBForeignKeyConstraint0, nameSpec0);
      assertEquals("FOREIGN KEY (alter indexnull, alter indexnull) REFERENCES null(alter indexnull, alter indexnull)", string0);
      
      String string1 = SQLUtil.substituteMarkers("alter indexnull", "SJDc^7QvK+", "alter indexnull");
      assertEquals("alter indexnull", string1);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      SQLUtil.isDDL(" NULL");
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("setBlob(String, InputStream)", true, "CONSTRAINT ", " NULL");
      String string0 = RawStoreFactory.PAGE_RESERVED_SPACE_PARAMETER;
      DBSchema dBSchema0 = new DBSchema(" NULL");
      DBSequence dBSequence0 = new DBSequence("og;_", " NULL", "bfgu");
      dBSchema0.addSequence(dBSequence0);
      String string1 = TypeId.TIMESTAMP_NAME;
      // Undeclared exception!
      try { 
        SQLUtil.appendConstraintName((DBConstraint) dBCheckConstraint0, (StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("create table ", false, "create table ", "truncate");
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      String string0 = SQLUtil.constraintSpec(dBCheckConstraint0, nameSpec0);
      assertEquals("CONSTRAINT \"create table \" CHECK truncate", string0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      String string0 = SQLUtil.normalize("create materialized viewhu-w}fbi%* $@e%k", false);
      assertEquals("create materialized viewhu - w } fbi % * $ @ e % k", string0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      ValueDecimal valueDecimal0 = (ValueDecimal)ValueDecimal.ZERO;
      SQLUtil.normalize(".NY.|>@", false);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint(".NY.|>@", false, defaultDBTable0, (String[]) null, defaultDBTable0, (String[]) null);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      // Undeclared exception!
      try { 
        SQLUtil.renderAddForeignKey(dBForeignKeyConstraint0, nameSpec0, (PrintWriter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      DBCatalog dBCatalog0 = new DBCatalog();
      DynamicByteArrayOutputStream dynamicByteArrayOutputStream0 = new DynamicByteArrayOutputStream();
      CompositeDBObject<DBNonUniqueIndex> compositeDBObject0 = (CompositeDBObject<DBNonUniqueIndex>) mock(CompositeDBObject.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(compositeDBObject0).toString();
      dBCatalog0.setOwner(compositeDBObject0);
      SQLUtil.mutatesDataOrStructure("select into");
      String string0 = SQLUtil.ownerDotComponent(dBCatalog0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      SQLUtil.isDDL("alter materialized view65%c");
      SQLUtil.isQuery("select into- 0");
      SQLUtil.typeAndName((DBObject) null);
      Object[] objectArray0 = SQLUtil.parseColumnTypeAndSize("select into- 0");
      assertNotNull(objectArray0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("drop materialized viewsetbyte(string,byte)");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"string\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      String[] stringArray0 = null;
      SQLUtil.renderColumnNames((String[]) null);
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("C|Ct<f(n#.O&oG3ak");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal column type format: C|Ct<f(n#.O&oG3ak
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      DBCatalog dBCatalog0 = new DBCatalog();
      String string0 = SQLUtil.typeAndName(dBCatalog0);
      assertEquals("catalog null", string0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      boolean boolean0 = SQLUtil.isProcedureCall("TsAdyTDA");
      assertFalse(boolean0);
      
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("TsAdyTDA");
      String string0 = SQLUtil.typeAndName(defaultDBTable0);
      assertEquals("table TsAdyTDA", string0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema("");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("'j03%5M)", dBSchema0);
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "", true, (String[]) null);
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint1 = defaultDBTable0.getPrimaryKeyConstraint();
      NameSpec nameSpec0 = NameSpec.NEVER;
      String string0 = SQLUtil.constraintSpec(dBPrimaryKeyConstraint1, nameSpec0);
      assertEquals("PRIMARY KEY ()", string0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      ValueDecimal valueDecimal0 = (ValueDecimal)ValueDecimal.ZERO;
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("p-ak[");
      DBDataType dBDataType0 = DBDataType.getInstance(1199, "p-ak[");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("p-ak[", defaultDBTable0, dBDataType0, integer0, integer0);
      String string0 = SQLUtil.renderColumn(defaultDBColumn0);
      assertEquals("p-ak[ P-AK[(3,3) NULL", string0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBDataType dBDataType0 = DBDataType.getInstance((-3744), "C|Ct<f(n#.O&oG3ak");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("C|Ct<f(n#.O&oG3ak", defaultDBTable0, dBDataType0);
      String string0 = SQLUtil.renderColumn(defaultDBColumn0);
      assertEquals("C|Ct<f(n#.O&oG3ak C|CT<F(N#.O&OG3AK NULL", string0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      String[] stringArray0 = new String[4];
      SQLUtil.renderColumnNames(stringArray0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("*?}Qe");
      String[] stringArray1 = new String[0];
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "9&3#r*zQrP)", false, stringArray1);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("org.firebirdsql.gds.impl.jni.BaseGDSImpl", true, dBPrimaryKeyConstraint0);
      DBTable dBTable0 = dBUniqueIndex0.getTable();
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint(stringArray0[3], true, dBTable0, stringArray1, defaultDBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "l|*");
      SQLUtil.renderAddForeignKey(dBForeignKeyConstraint0, nameSpec0, printWriter0);
      Random.setNextRandom((-2045373092));
      SQLUtil.renderQuery(dBTable0, stringArray0, stringArray0);
      NameSpec nameSpec1 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.renderCreateTable(dBTable0, true, nameSpec1, printWriter0);
      Random.setNextRandom((-2045373092));
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint1 = new DBPrimaryKeyConstraint(defaultDBTable0, "l|*", false, stringArray0);
      assertEquals("l|*", dBPrimaryKeyConstraint1.getName());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, (String) null, false, (String[]) null);
      String string0 = SQLUtil.constraintName(dBPrimaryKeyConstraint0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint((String) null, true, (String) null, "BLkB");
      NameSpec nameSpec0 = NameSpec.NEVER;
      String string0 = SQLUtil.constraintSpec(dBCheckConstraint0, nameSpec0);
      assertEquals("CHECK BLkB", string0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      ValueDecimal valueDecimal0 = (ValueDecimal)ValueDecimal.ZERO;
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("\nLIMIT ");
      DBDataType dBDataType0 = DBDataType.getInstance(15, "imD'C+PG;Xz$pchww");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("5&+4[,*:_A1Xf", defaultDBTable0, dBDataType0, (Integer) 7, (Integer) null);
      String string0 = SQLUtil.renderColumn(defaultDBColumn0);
      assertEquals("5&+4[,*:_A1Xf IMD'C+PG;XZ$PCHWW(7) NULL", string0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      SQLUtil.isProcedureCall("T>Z.T(");
      byte[] byteArray0 = new byte[0];
      ValueLobDb valueLobDb0 = ValueLobDb.createSmallLob((-1393), byteArray0, (-1393));
      Reader reader0 = valueLobDb0.getReader();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(reader0);
      SQLUtil.renderNumber(streamTokenizer0);
      SQLUtil.isDML("");
      DBSchema dBSchema0 = new DBSchema((String) null);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("BFgU", dBSchema0);
      String[] stringArray0 = new String[6];
      stringArray0[0] = null;
      stringArray0[1] = "Xi@6~>d9r135\"";
      defaultDBTable0.isIdentical(dBSchema0);
      stringArray0[2] = "- 0";
      stringArray0[3] = "- 0";
      stringArray0[4] = "\u0001\u01F7";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, (String) null, false, stringArray0);
      SQLUtil.appendConstraintName((DBConstraint) dBPrimaryKeyConstraint0, (StringBuilder) null);
      Object[] objectArray0 = SQLUtil.parseColumnTypeAndSize("egWZu^f\"Dr0'YVUP5V");
      assertNotNull(objectArray0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      boolean boolean0 = SQLUtil.isProcedureCall("T>Z.T(");
      byte[] byteArray0 = new byte[0];
      ValueLobDb valueLobDb0 = ValueLobDb.createSmallLob((-1393), byteArray0, (-1393));
      Reader reader0 = valueLobDb0.getReader();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(reader0);
      String string0 = SQLUtil.renderNumber(streamTokenizer0);
      assertEquals("- 0", string0);
      
      boolean boolean1 = SQLUtil.isDML("");
      assertTrue(boolean1 == boolean0);
      
      DBSchema dBSchema0 = new DBSchema((String) null);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("BFgU", dBSchema0);
      String[] stringArray0 = new String[6];
      stringArray0[0] = null;
      stringArray0[1] = "Xi@6~>d9r135\"";
      defaultDBTable0.isIdentical(dBSchema0);
      stringArray0[2] = "- 0";
      stringArray0[3] = "- 0";
      stringArray0[4] = "\u0001\u01F7";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, (String) null, false, stringArray0);
      String string1 = SQLUtil.typeAndName(dBPrimaryKeyConstraint0);
      assertEquals("unique constraint constraint", string1);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      String string0 = SQLUtil.normalize("w;\"s!DoTv&w8XaBXe", true);
      assertEquals("w ; \"s!DoTv&w8XaBXe\"", string0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "l|*";
      stringArray0[2] = "9&3#r*zQrP)";
      stringArray0[3] = "java.lang.Short";
      String string0 = SQLUtil.renderColumnNames(stringArray0);
      assertEquals("(l|*, , 9&3#r*zQrP), java.lang.Short)", string0);
      
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("*?}Qe");
      String[] stringArray1 = new String[0];
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "9&3#r*zQrP)", false, stringArray1);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("org.firebirdsql.gds.impl.jni.BaseGDSImpl", true, dBPrimaryKeyConstraint0);
      DBTable dBTable0 = dBUniqueIndex0.getTable();
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("java.lang.Short", true, dBTable0, stringArray1, defaultDBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "l|*");
      SQLUtil.renderAddForeignKey(dBForeignKeyConstraint0, nameSpec0, printWriter0);
      Random.setNextRandom((-2045373092));
      String string1 = SQLUtil.renderQuery(dBTable0, stringArray0, stringArray0);
      assertEquals("SELECT * FROM *?}Qe WHERE l|* = 'l|*' AND null = null AND 9&3#r*zQrP) = '9&3#r*zQrP)' AND java.lang.Short = 'java.lang.Short'", string1);
      
      Boolean boolean0 = SQLUtil.mutatesStructure("SELECT * FROM *?}Qe WHERE l|* = 'l|*' AND null = null AND 9&3#r*zQrP) = '9&3#r*zQrP)' AND java.lang.Short = 'java.lang.Short'");
      assertFalse(boolean0);
      
      NameSpec nameSpec1 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.renderCreateTable(dBTable0, true, nameSpec1, printWriter0);
      Random.setNextRandom((-2045373092));
      Boolean boolean1 = SQLUtil.mutatesDataOrStructure("alter session");
      assertNotNull(boolean1);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      StringReader stringReader0 = new StringReader("HU-W}fBI%* $@E%k");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.parseNumbers();
      streamTokenizer0.nval = (-664.963590036648);
      String string0 = SQLUtil.renderNumber(streamTokenizer0);
      assertEquals("- 664.963590036648", string0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      String string0 = SQLUtil.normalize("/eletep-a[hk[", true);
      assertEquals("/ eletep - a [ hk [", string0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Integer integer0 = RawTransaction.COMMIT;
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBDataType dBDataType0 = DBDataType.getInstance((-770), "cYeate materialized viewhu-w}fbi%* $@e%k");
      Integer integer1 = RawTransaction.SAVEPOINT_ROLLBACK;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn((String) null, defaultDBTable0, dBDataType0, integer0, integer1);
      Integer.max((-770), (-1495));
      defaultDBColumn0.setDefaultValue("[AP)YH%yyA6A5");
      String string0 = SQLUtil.renderColumn(defaultDBColumn0);
      assertEquals("null CYEATE MATERIALIZED VIEWHU-W}FBI%* $@E%K(0,2) DEFAULT [AP)YH%yyA6A5 NULL", string0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("Cannot call deleteRow() when on the insert row.");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }
}
