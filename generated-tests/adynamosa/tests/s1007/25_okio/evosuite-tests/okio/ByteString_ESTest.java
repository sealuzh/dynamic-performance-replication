/*
 * This file was automatically generated by EvoSuite
 * Mon Jul 22 08:15:22 GMT 2019
 */

package okio;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.EOFException;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.SequenceInputStream;
import java.nio.ByteBuffer;
import java.nio.charset.Charset;
import java.util.zip.Inflater;
import okio.Buffer;
import okio.BufferedSource;
import okio.ByteString;
import okio.HashingSink;
import okio.HashingSource;
import okio.InflaterSource;
import okio.Pipe;
import okio.RealBufferedSink;
import okio.RealBufferedSource;
import okio.Sink;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ByteString_ESTest extends ByteString_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      ByteString byteString0 = ByteString.EMPTY;
      byteString0.hashCode();
      byteString0.hashCode();
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      ByteString byteString0 = ByteString.of(byteArray0);
      ByteString byteString1 = ByteString.encodeUtf8("F0=o0%~>Gv");
      boolean boolean0 = byteString1.equals(byteString0);
      assertFalse(boolean0);
      assertEquals(11, byteString1.size());
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      ByteString byteString0 = ByteString.encodeString("Iz8P4V5^{}+AH&", charset0);
      ByteString byteString1 = byteString0.toAsciiUppercase();
      assertNotSame(byteString1, byteString0);
      assertFalse(byteString1.equals((Object)byteString0));
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte)89;
      ByteString byteString0 = new ByteString(byteArray0);
      Charset charset0 = Charset.defaultCharset();
      ByteString byteString1 = ByteString.encodeString("@[", charset0);
      ByteString byteString2 = byteString0.hmacSha1(byteString1);
      ByteString byteString3 = byteString2.toAsciiUppercase();
      assertNotSame(byteString3, byteString2);
      assertFalse(byteString3.equals((Object)byteString2));
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      ByteString byteString0 = ByteString.encodeUtf8("charset == null");
      ByteString byteString1 = byteString0.toAsciiUppercase();
      ByteString byteString2 = byteString1.toAsciiLowercase();
      assertTrue(byteString2.equals((Object)byteString0));
      assertNotSame(byteString2, byteString1);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)65, (byte)58);
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray0);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, byteArrayInputStream1);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(sequenceInputStream0);
      try { 
        ByteString.read(bufferedInputStream0, (byte)58);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      ByteString byteString0 = ByteString.decodeHex("458642476664ded9b157cb8f98a4953a61f439b9");
      assertEquals(20, byteString0.size());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      // Undeclared exception!
      try { 
        ByteString.decodeHex("46b(kDIF:2CT2q");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected hex digit: (
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      ByteString byteString0 = ByteString.decodeHex("");
      byte[] byteArray0 = byteString0.toByteArray();
      assertArrayEquals(new byte[] {}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      ByteString byteString0 = ByteString.EMPTY;
      ByteString byteString1 = byteString0.EMPTY.toAsciiUppercase();
      assertSame(byteString0, byteString1);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      ByteString byteString0 = realBufferedSource0.readByteString(0L);
      ByteString byteString1 = byteString0.toAsciiLowercase();
      assertSame(byteString0, byteString1);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ByteString byteString0 = ByteString.of(byteArray0);
      Charset charset0 = Charset.defaultCharset();
      ByteString byteString1 = ByteString.encodeString("A{mYF@|", charset0);
      boolean boolean0 = byteString0.startsWith(byteString1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      ByteString byteString0 = ByteString.encodeUtf8("uT\"&wKKv@'9B2");
      int int0 = byteString0.size();
      assertEquals(13, int0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      ByteString byteString0 = new ByteString(byteArray0);
      byte[] byteArray1 = new byte[0];
      int int0 = byteString0.lastIndexOf(byteArray1, 1);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ByteString byteString0 = ByteString.of(byteArray0);
      int int0 = byteString0.lastIndexOf(byteArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      ByteString byteString0 = ByteString.EMPTY;
      ByteString byteString1 = byteString0.md5();
      int int0 = byteString1.lastIndexOf(byteString0, 2989);
      assertEquals(16, int0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      ByteString byteString0 = ByteString.EMPTY;
      ByteString byteString1 = byteString0.md5();
      int int0 = byteString1.lastIndexOf(byteString0);
      assertEquals(16, int0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      ByteString byteString0 = ByteString.decodeHex("");
      ByteString byteString1 = ByteString.of(byteArray0);
      int int0 = byteString0.lastIndexOf(byteString1);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      ByteString byteString0 = ByteString.encodeString("ncCyVM(Q)m<f", charset0);
      byte[] byteArray0 = byteString0.internalArray();
      assertEquals(13, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      ByteString byteString0 = ByteString.EMPTY;
      byte[] byteArray0 = byteString0.internalArray();
      assertArrayEquals(new byte[] {}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      ByteString byteString0 = ByteString.encodeUtf8("@~");
      byte[] byteArray0 = new byte[0];
      int int0 = byteString0.indexOf(byteArray0, 2);
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      ByteBuffer byteBuffer0 = charset0.encode("");
      ByteString byteString0 = ByteString.of(byteBuffer0);
      int int0 = byteString0.indexOf(byteString0, (-1359));
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      ByteString byteString0 = ByteString.EMPTY;
      ByteString byteString1 = byteString0.md5();
      int int0 = byteString1.indexOf(byteString0, (int) (byte)1);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      ByteString byteString0 = ByteString.encodeUtf8(")");
      int int0 = byteString0.EMPTY.indexOf(byteString0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      ByteString byteString0 = ByteString.decodeHex("");
      String string0 = byteString0.hex();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      ByteString byteString0 = ByteString.decodeBase64("42");
      Charset charset0 = Charset.defaultCharset();
      String string0 = byteString0.string(charset0);
      assertEquals("\uFFFD", string0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      int int0 = ByteString.codePointIndexToCharIndex("wkAh&\b$(->3(kB", (byte) (-3));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      ByteString byteString0 = ByteString.encodeString("size < 4: ", charset0);
      String string0 = byteString0.base64Url();
      assertEquals("c2l6ZSA8IDQ6IA==", string0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      ByteString byteString0 = ByteString.EMPTY;
      String string0 = byteString0.base64();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ByteString byteString0 = new ByteString(byteArray0);
      Buffer buffer0 = new Buffer();
      byteString0.write(buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      ByteString byteString0 = ByteString.EMPTY;
      // Undeclared exception!
      try { 
        byteString0.substring((-16777216), (-16777216));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // beginIndex < 0
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ByteString byteString0 = ByteString.of(byteArray0);
      ByteString byteString1 = byteString0.substring(0);
      assertSame(byteString1, byteString0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      ByteString byteString0 = ByteString.EMPTY;
      // Undeclared exception!
      try { 
        byteString0.substring((-97));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // beginIndex < 0
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      ByteString byteString0 = ByteString.EMPTY;
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = byteString0.EMPTY.startsWith(byteArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      ByteString byteString0 = ByteString.encodeString("A{mYF@|", charset0);
      boolean boolean0 = byteString0.startsWith(byteString0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      ByteString byteString0 = ByteString.of(byteArray0);
      boolean boolean0 = byteString0.rangeEquals((int) (byte) (-1), byteArray0, (int) (byte)0, 0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      ByteString byteString0 = new ByteString((byte[]) null);
      boolean boolean0 = byteString0.rangeEquals((-1811), (byte[]) null, 1713, (-1811));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      ByteString byteString0 = ByteString.of(byteArray0);
      boolean boolean0 = byteString0.rangeEquals((int) (byte)0, byteArray0, 65, 108);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      ByteString byteString0 = ByteString.EMPTY;
      boolean boolean0 = byteString0.rangeEquals(118, byteString0, 42, 118);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      ByteString byteString0 = realBufferedSource0.readByteString(0L);
      boolean boolean0 = byteString0.EMPTY.rangeEquals((-654), byteString0, (-654), (-654));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ByteString byteString0 = ByteString.of(byteArray0, 0, 0);
      assertEquals(0, byteString0.size());
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      // Undeclared exception!
      try { 
        ByteString.of(byteArray0, (int) (byte) (-101), 2091);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=3 offset=-101 byteCount=2091
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      ByteString byteString0 = realBufferedSource0.readByteString(0L);
      byte[] byteArray0 = new byte[2];
      int int0 = byteString0.lastIndexOf(byteArray0, (-2107));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      ByteString byteString0 = ByteString.encodeUtf8("@~");
      byte[] byteArray0 = new byte[0];
      int int0 = byteString0.lastIndexOf(byteArray0);
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      ByteString byteString0 = ByteString.EMPTY;
      int int0 = byteString0.lastIndexOf(byteString0, (-81));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      ByteString byteString0 = ByteString.of(byteArray0);
      int int0 = byteString0.lastIndexOf(byteString0, 2269);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      ByteString byteString0 = ByteString.EMPTY;
      int int0 = byteString0.lastIndexOf(byteString0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      ByteString byteString0 = ByteString.encodeUtf8("@~");
      byte[] byteArray0 = byteString0.toByteArray();
      int int0 = byteString0.indexOf(byteArray0, 0);
      assertEquals(0, int0);
      assertEquals(2, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      ByteString byteString0 = ByteString.EMPTY;
      byte[] byteArray0 = new byte[2];
      int int0 = byteString0.indexOf(byteArray0, 2349);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      ByteString byteString0 = ByteString.EMPTY;
      byte[] byteArray0 = new byte[0];
      int int0 = byteString0.indexOf(byteArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      ByteString byteString0 = ByteString.EMPTY;
      int int0 = byteString0.indexOf(byteString0, 70);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      ByteString byteString0 = ByteString.of(byteArray0);
      int int0 = byteString0.EMPTY.indexOf(byteString0, (int) (byte)36);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      ByteString byteString0 = ByteString.EMPTY;
      int int0 = byteString0.indexOf(byteString0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      ByteString byteString0 = ByteString.EMPTY;
      boolean boolean0 = byteString0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      ByteString byteString0 = ByteString.decodeBase64("\n");
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = byteString0.EMPTY.endsWith(byteArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      ByteString byteString0 = ByteString.decodeHex("");
      boolean boolean0 = byteString0.endsWith(byteString0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      ByteString byteString0 = ByteString.encodeUtf8("");
      boolean boolean0 = byteString0.rangeEquals(52, byteString0, 52, (-1919));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      ByteString byteString0 = ByteString.EMPTY;
      // Undeclared exception!
      try { 
        byteString0.write((Buffer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      ByteString byteString0 = new ByteString((byte[]) null);
      // Undeclared exception!
      try { 
        byteString0.startsWith((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      ByteString byteString0 = ByteString.of(byteArray0);
      // Undeclared exception!
      try { 
        byteString0.startsWith((ByteString) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
      try { 
        ByteString.read(dataInputStream0, 8);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      ByteString byteString0 = ByteString.encodeUtf8("@~");
      // Undeclared exception!
      try { 
        byteString0.rangeEquals(0, (ByteString) null, 0, (-592));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        ByteString.of(byteArray0, 65, 59);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=65 byteCount=59
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      ByteString byteString0 = ByteString.encodeString("W*d3w~;nL[3S6&~>!;", charset0);
      // Undeclared exception!
      try { 
        byteString0.lastIndexOf((byte[]) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      ByteString byteString0 = ByteString.of(byteArray0);
      // Undeclared exception!
      try { 
        byteString0.lastIndexOf((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      ByteString byteString0 = ByteString.decodeBase64("byteCount > Integer.MAX_VALUE: ");
      // Undeclared exception!
      try { 
        byteString0.EMPTY.lastIndexOf((ByteString) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      ByteString byteString0 = ByteString.of(byteArray0);
      // Undeclared exception!
      try { 
        byteString0.lastIndexOf((ByteString) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      ByteString byteString0 = new ByteString((byte[]) null);
      // Undeclared exception!
      try { 
        byteString0.EMPTY.indexOf((byte[]) null, (-896));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      ByteString byteString0 = ByteString.encodeUtf8("%");
      // Undeclared exception!
      try { 
        byteString0.indexOf((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      ByteString byteString0 = ByteString.decodeHex("");
      // Undeclared exception!
      try { 
        byteString0.indexOf((ByteString) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      ByteString byteString0 = ByteString.encodeUtf8("uT\"&wKKv@'9B2");
      // Undeclared exception!
      try { 
        byteString0.EMPTY.hmacSha512((ByteString) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      ByteString byteString0 = ByteString.EMPTY;
      // Undeclared exception!
      try { 
        byteString0.EMPTY.hmacSha512(byteString0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Empty key
         //
         verifyException("javax.crypto.spec.SecretKeySpec", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      ByteString byteString0 = ByteString.encodeUtf8(")");
      // Undeclared exception!
      try { 
        byteString0.hmacSha256((ByteString) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      ByteString byteString0 = realBufferedSource0.readByteString(0L);
      // Undeclared exception!
      try { 
        byteString0.hmacSha256(byteString0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Empty key
         //
         verifyException("javax.crypto.spec.SecretKeySpec", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      ByteString byteString0 = ByteString.EMPTY;
      // Undeclared exception!
      try { 
        byteString0.hmacSha1((ByteString) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ByteString byteString0 = ByteString.of(byteArray0);
      // Undeclared exception!
      try { 
        byteString0.hmacSha1(byteString0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Empty key
         //
         verifyException("javax.crypto.spec.SecretKeySpec", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      ByteString byteString0 = ByteString.EMPTY;
      // Undeclared exception!
      try { 
        byteString0.getByte((-4818));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      ByteString byteString0 = new ByteString((byte[]) null);
      // Undeclared exception!
      try { 
        byteString0.endsWith((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      ByteString byteString0 = new ByteString(byteArray0);
      // Undeclared exception!
      try { 
        byteString0.endsWith((ByteString) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      ByteString byteString0 = ByteString.encodeUtf8("@~");
      // Undeclared exception!
      try { 
        byteString0.compareTo((ByteString) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      // Undeclared exception!
      try { 
        ByteString.codePointIndexToCharIndex((String) null, 881);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ByteString byteString0 = ByteString.of(byteArray0);
      int int0 = byteString0.lastIndexOf(byteArray0, 0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      ByteString byteString0 = ByteString.encodeString("data", charset0);
      byte[] byteArray0 = new byte[1];
      int int0 = byteString0.indexOf(byteArray0, (-16777216));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      ByteString byteString0 = new ByteString(byteArray0);
      boolean boolean0 = byteString0.rangeEquals((int) (byte)3, byteArray0, (int) (byte)38, (int) (byte)3);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      ByteString byteString0 = ByteString.EMPTY;
      byte[] byteArray0 = new byte[3];
      boolean boolean0 = byteString0.rangeEquals(37, byteArray0, (int) (byte)11, (int) (byte) (-81));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      ByteString byteString0 = ByteString.decodeBase64("\n");
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = byteString0.rangeEquals(108, byteArray0, (-1527), (-1527));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      ByteString byteString0 = ByteString.encodeString("size < 4: ", charset0);
      ByteString byteString1 = byteString0.substring((int) (byte)4, 5);
      assertEquals(1, byteString1.size());
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ByteString byteString0 = ByteString.of(byteArray0);
      // Undeclared exception!
      try { 
        byteString0.substring(2908, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endIndex < beginIndex
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      ByteString byteString0 = ByteString.encodeUtf8("@~");
      String string0 = byteString0.hex();
      //  // Unstable assertion: assertEquals("777e", string0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      ByteString byteString0 = ByteString.of(byteArray0);
      String string0 = byteString0.utf8();
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000", string0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Pipe pipe0 = new Pipe((byte)4);
      Pipe.PipeSink pipe_PipeSink0 = pipe0.new PipeSink();
      HashingSink hashingSink0 = HashingSink.sha256(pipe_PipeSink0);
      ByteString byteString0 = hashingSink0.hash();
      String string0 = byteString0.toString();
      //  // Unstable assertion: assertEquals("[hex=e3b7777797f7171797fbf777997fb977777e71e7779b93777795991b7757b755]", string0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      int int0 = ByteString.codePointIndexToCharIndex("\r", (-1051));
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)123;
      byteArray0[1] = (byte)10;
      ByteString byteString0 = ByteString.of(byteArray0);
      String string0 = byteString0.toString();
      assertEquals("[hex=7b0a0000000000]", string0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      int int0 = ByteString.codePointIndexToCharIndex("?[S/AaQvj&^YwA.", 0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      ByteString byteString0 = ByteString.encodeString("@[", charset0);
      String string0 = byteString0.toString();
      assertEquals("[text=@[]", string0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      ByteString byteString0 = ByteString.EMPTY;
      ByteString byteString1 = byteString0.md5();
      int int0 = byteString1.compareTo(byteString0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      ByteString byteString0 = ByteString.EMPTY;
      byte[] byteArray0 = new byte[1];
      ByteString byteString1 = ByteString.of(byteArray0);
      int int0 = byteString0.compareTo(byteString1);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Inflater inflater0 = new Inflater();
      InflaterSource inflaterSource0 = new InflaterSource((BufferedSource) buffer0, inflater0);
      HashingSource hashingSource0 = HashingSource.sha1(inflaterSource0);
      Charset charset0 = Charset.defaultCharset();
      ByteString byteString0 = ByteString.encodeString("size < 4: ", charset0);
      HashingSource hashingSource1 = HashingSource.hmacSha1(hashingSource0, byteString0);
      ByteString byteString1 = hashingSource1.hash();
      int int0 = byteString0.compareTo(byteString1);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Inflater inflater0 = new Inflater();
      InflaterSource inflaterSource0 = new InflaterSource((BufferedSource) buffer0, inflater0);
      HashingSource hashingSource0 = HashingSource.sha1(inflaterSource0);
      Charset charset0 = Charset.defaultCharset();
      ByteString byteString0 = ByteString.encodeString("size < 4: ", charset0);
      ByteString byteString1 = hashingSource0.hash();
      int int0 = byteString0.compareTo(byteString1);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      ByteString byteString0 = ByteString.encodeUtf8("charset == null");
      byteString0.hashCode();
      byteString0.hashCode();
      assertEquals(15, byteString0.size());
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      ByteBuffer byteBuffer0 = charset0.encode("");
      ByteString byteString0 = ByteString.of(byteBuffer0);
      ByteString byteString1 = ByteString.decodeBase64("");
      assertNotNull(byteString1);
      
      boolean boolean0 = byteString1.equals(byteString0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      ByteString byteString0 = new ByteString(byteArray0);
      Object object0 = new Object();
      boolean boolean0 = byteString0.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      ByteString byteString0 = ByteString.encodeUtf8("@~");
      boolean boolean0 = byteString0.equals(byteString0);
      assertEquals(2, byteString0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
      ByteString byteString0 = ByteString.of(byteBuffer0);
      ByteString byteString1 = ByteString.decodeHex("F0");
      boolean boolean0 = byteString1.equals(byteString0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      ByteString byteString0 = ByteString.encodeUtf8("s:H7djj_~<\"h");
      byte[] byteArray0 = new byte[5];
      int int0 = byteString0.lastIndexOf(byteArray0, 3);
      assertEquals((-1), int0);
      assertEquals(13, byteString0.size());
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
      ByteString byteString0 = ByteString.of(byteBuffer0);
      ByteString byteString1 = ByteString.decodeHex("F0");
      boolean boolean0 = byteString0.endsWith(byteString1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      ByteString byteString0 = ByteString.EMPTY;
      boolean boolean0 = byteString0.rangeEquals(36, byteString0, 0, 0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      ByteString byteString0 = new ByteString((byte[]) null);
      // Undeclared exception!
      try { 
        byteString0.write((OutputStream) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // out == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteString byteString0 = ByteString.of(byteArray0);
      ByteString byteString1 = byteString0.substring((int) (byte)0, (int) (byte)0);
      assertEquals(0, byteString1.size());
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      ByteString byteString0 = ByteString.EMPTY;
      ByteString byteString1 = byteString0.substring((int) (byte)0, (int) (byte)0);
      assertSame(byteString1, byteString0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      ByteString byteString0 = ByteString.encodeString("", charset0);
      // Undeclared exception!
      try { 
        byteString0.EMPTY.substring(1024);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endIndex < beginIndex
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      ByteString byteString0 = ByteString.encodeString("size < 4: ", charset0);
      // Undeclared exception!
      try { 
        byteString0.substring(5, 1950);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endIndex > length(10)
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Inflater inflater0 = new Inflater();
      InflaterSource inflaterSource0 = new InflaterSource((BufferedSource) buffer0, inflater0);
      HashingSource hashingSource0 = HashingSource.sha1(inflaterSource0);
      Charset charset0 = Charset.defaultCharset();
      ByteString byteString0 = ByteString.encodeString("data", charset0);
      HashingSource hashingSource1 = HashingSource.hmacSha1(hashingSource0, byteString0);
      ByteString byteString1 = hashingSource1.hash();
      ByteString byteString2 = byteString1.toAsciiUppercase();
      int int0 = byteString2.compareTo(byteString1);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      ByteString byteString0 = ByteString.encodeString("ncCyVM(Q)m<f", charset0);
      ByteString byteString1 = byteString0.toAsciiLowercase();
      assertNotSame(byteString1, byteString0);
      assertFalse(byteString1.equals((Object)byteString0));
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      ByteString byteString0 = ByteString.encodeString("size < 4: ", charset0);
      ByteString byteString1 = byteString0.toAsciiUppercase();
      ByteString byteString2 = byteString1.toAsciiLowercase();
      assertTrue(byteString2.equals((Object)byteString0));
      assertNotSame(byteString2, byteString1);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      ByteString byteString0 = ByteString.encodeString("size < 4: ", charset0);
      ByteString byteString1 = byteString0.toAsciiLowercase();
      assertSame(byteString1, byteString0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      ByteString byteString0 = ByteString.encodeUtf8("charset == null");
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      byteString0.write(pipedOutputStream0);
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
      assertEquals(15, pipedInputStream0.available());
      
      ByteString byteString1 = ByteString.read(dataInputStream0, 15);
      assertTrue(byteString1.equals((Object)byteString0));
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      ByteString byteString0 = ByteString.read(pipedInputStream0, (byte)0);
      assertEquals(0, byteString0.size());
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-951), (byte)7);
      // Undeclared exception!
      try { 
        ByteString.read(byteArrayInputStream0, (-951));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // byteCount < 0: -951
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      // Undeclared exception!
      try { 
        ByteString.read((InputStream) null, (byte)14);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // in == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      // Undeclared exception!
      try { 
        ByteString.decodeHex("base64 == null");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected hex digit: s
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      // Undeclared exception!
      try { 
        ByteString.decodeHex("AV$rKzu0YPAxVv*<KD");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected hex digit: V
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      // Undeclared exception!
      try { 
        ByteString.decodeHex("15@2}");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected hex string: 15@2}
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      // Undeclared exception!
      try { 
        ByteString.decodeHex((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // hex == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      ByteString byteString0 = ByteString.decodeHex("");
      int int0 = byteString0.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      // Undeclared exception!
      try { 
        ByteString.decodeBase64((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // base64 == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      ByteString byteString0 = new ByteString(byteArray0);
      // Undeclared exception!
      try { 
        byteString0.string((Charset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // charset == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      ByteString byteString0 = ByteString.EMPTY;
      Charset charset0 = Charset.defaultCharset();
      String string0 = byteString0.EMPTY.string(charset0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      ByteString byteString0 = ByteString.encodeString("ncCyVM(Q)m<f", charset0);
      String string0 = byteString0.toString();
      assertEquals("[hex=6e634379564d2851297f6d3c66]", string0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSource hashingSource0 = HashingSource.md5(buffer0);
      ByteString byteString0 = hashingSource0.hash();
      String string0 = byteString0.EMPTY.toString();
      assertEquals("[size=0]", string0);
      
      HashingSource.md5(hashingSource0);
      ByteString byteString1 = byteString0.sha1();
      byte byte0 = byteString0.getByte(4);
      assertEquals((byte) (-113), byte0);
      
      byteString1.EMPTY.utf8();
      byteString0.toByteArray();
      ByteString byteString2 = hashingSource0.hash();
      int int0 = byteString0.indexOf(byteString2);
      assertEquals(0, int0);
      
      byteString2.base64();
      byte[] byteArray0 = byteString0.toByteArray();
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(4);
      ByteString.of(byteBuffer0);
      byteString2.EMPTY.asByteBuffer();
      ByteString byteString3 = byteString1.hmacSha1(byteString0);
      boolean boolean0 = byteString2.rangeEquals(699, byteString3, (-746), (int) (byte) (-113));
      assertFalse(boolean0);
      
      ByteString byteString4 = byteString2.sha256();
      int int1 = byteString4.indexOf(byteArray0);
      assertTrue(byteString2.equals((Object)byteString0));
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      int int2 = ByteString.codePointIndexToCharIndex("", 9);
      assertTrue(int2 == int0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      // Undeclared exception!
      try { 
        ByteString.encodeString("F0=o0%~>Gv", (Charset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // charset == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      // Undeclared exception!
      try { 
        ByteString.encodeString((String) null, (Charset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // s == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      // Undeclared exception!
      try { 
        ByteString.encodeUtf8((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // s == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      // Undeclared exception!
      try { 
        ByteString.of((ByteBuffer) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // data == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      // Undeclared exception!
      try { 
        ByteString.of((byte[]) null, 1547, (-706));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // data == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      byte[] byteArray0 = new byte[27];
      ByteString byteString0 = ByteString.of(byteArray0, (int) (byte)4, 10);
      assertEquals(10, byteString0.size());
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      // Undeclared exception!
      try { 
        ByteString.of((byte[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // data == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      ByteString byteString0 = ByteString.EMPTY;
      // Undeclared exception!
      try { 
        byteString0.indexOf((ByteString) null, (-1475));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = byteString0.hmacSha512(byteString0);
      assertEquals(64, byteString1.size());
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      ByteString byteString0 = ByteString.encodeUtf8("aYT1NV*~_]DJEK%i");
      Pipe pipe0 = new Pipe(1578L);
      Sink sink0 = pipe0.sink();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(sink0);
      byteString0.write(realBufferedSink0.buffer);
      assertEquals(16, byteString0.size());
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = byteString0.substring(6);
      assertEquals(2, byteString1.size());
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      ByteString byteString0 = ByteString.EMPTY;
      ByteString byteString1 = byteString0.EMPTY.sha512();
      ByteString byteString2 = byteString1.toAsciiUppercase();
      assertNotSame(byteString2, byteString1);
      assertFalse(byteString2.equals((Object)byteString1));
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      ByteString byteString0 = ByteString.EMPTY;
      String string0 = byteString0.base64Url();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      ByteString byteString0 = ByteString.EMPTY;
      boolean boolean0 = byteString0.startsWith(byteString0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      ByteString byteString0 = ByteString.encodeString("size < 4: ", charset0);
      ByteString byteString1 = byteString0.hmacSha256(byteString0);
      assertNotSame(byteString0, byteString1);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      ByteString byteString0 = ByteString.encodeString("size < 4: ", charset0);
      byte[] byteArray0 = new byte[14];
      boolean boolean0 = byteString0.endsWith(byteArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      ByteString byteString0 = ByteString.encodeString("size < 4: ", charset0);
      byte[] byteArray0 = new byte[14];
      boolean boolean0 = byteString0.startsWith(byteArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      ByteString byteString0 = ByteString.EMPTY;
      byte[] byteArray0 = new byte[27];
      int int0 = byteString0.lastIndexOf(byteArray0);
      assertEquals((-1), int0);
  }
}
