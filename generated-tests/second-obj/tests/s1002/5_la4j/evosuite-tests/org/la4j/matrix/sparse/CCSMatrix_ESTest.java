/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 06 16:39:42 GMT 2018
 */

package org.la4j.matrix.sparse;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.text.DecimalFormat;
import java.text.NumberFormat;
import java.util.Locale;
import java.util.Random;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;
import org.la4j.LinearAlgebra;
import org.la4j.Matrix;
import org.la4j.matrix.ColumnMajorSparseMatrix;
import org.la4j.matrix.DenseMatrix;
import org.la4j.matrix.RowMajorSparseMatrix;
import org.la4j.matrix.SparseMatrix;
import org.la4j.matrix.functor.MatrixAccumulator;
import org.la4j.matrix.functor.MatrixFunction;
import org.la4j.matrix.functor.MatrixPredicate;
import org.la4j.matrix.functor.MatrixProcedure;
import org.la4j.matrix.sparse.CCSMatrix;
import org.la4j.operation.ooplace.OoPlaceMatricesMultiplication;
import org.la4j.operation.ooplace.OoPlaceMatricesSubtraction;
import org.la4j.vector.SparseVector;
import org.la4j.vector.functor.VectorAccumulator;
import org.la4j.vector.functor.VectorFunction;
import org.la4j.vector.functor.VectorProcedure;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CCSMatrix_ESTest extends CCSMatrix_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CCSMatrix.fromCSV("");
      // Undeclared exception!
      try { 
        CCSMatrix.zero(Integer.MAX_VALUE, 878, 878);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: use 'Integer.MAX_VALUE - 1' instead.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[2] = (double) 0;
      doubleArray0[2] = (double) 0;
      CCSMatrix cCSMatrix0 = CCSMatrix.from1DArray(0, 0, doubleArray0);
      cCSMatrix0.columnMajorIterator();
      assertEquals(0, cCSMatrix0.rows());
      assertEquals(0, cCSMatrix0.columns());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      // Undeclared exception!
      try { 
        CCSMatrix.fromBinary(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can not decode CCSMatrix from the given byte array.
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      int int0 = 32;
      SparseVector sparseVector0 = SparseVector.zero(32);
      Matrix matrix0 = sparseVector0.toDiagonalMatrix();
      // Undeclared exception!
      try { 
        CCSMatrix.block(matrix0, matrix0, matrix0, matrix0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '33' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom((-1L));
      CCSMatrix cCSMatrix0 = CCSMatrix.randomSymmetric(0, (double) 0, (Random) mockRandom0);
      cCSMatrix0.setAll((-1L));
      cCSMatrix0.iteratorOfColumn(0);
      cCSMatrix0.iteratorOrNonZeroColumns();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      int int0 = 60;
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 60;
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.from1DArray(60, 0, doubleArray0);
      CCSMatrix cCSMatrix0 = CCSMatrix.block(rowMajorSparseMatrix0, rowMajorSparseMatrix0, rowMajorSparseMatrix0, rowMajorSparseMatrix0);
      DecimalFormat decimalFormat0 = new DecimalFormat("Akh?^.jG]:O^kO/tC");
      cCSMatrix0.toMatrixMarket((NumberFormat) decimalFormat0);
      // Undeclared exception!
      try { 
        cCSMatrix0.setColumn(2, (double) 60);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // This matrix can't grow up.
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      CCSMatrix.randomSymmetric(0, (double) 0, (Random) mockRandom0);
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(1);
      int int0 = 8;
      cCSMatrix0.setColumn(0, (double) 4596);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        cCSMatrix0.eachNonZeroInColumn(5, vectorProcedure0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      int int0 = 1;
      CCSMatrix cCSMatrix0 = new CCSMatrix(1, 4647, 1);
      cCSMatrix0.setColumn(1, (double) 1);
      cCSMatrix0.iteratorOrNonZeroColumns();
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = cCSMatrix0.toColumnMajorSparseMatrix();
      cCSMatrix0.nonZeroAt(4647, 4647);
      int int1 = 1;
      CCSMatrix cCSMatrix1 = new CCSMatrix(int0, int1);
      MockRandom mockRandom0 = new MockRandom();
      int int2 = 805;
      int int3 = (-3580);
      CCSMatrix cCSMatrix2 = CCSMatrix.random(int2, int3, (double) int3, (Random) mockRandom0);
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      Matrix matrix0 = ooPlaceMatricesMultiplication0.apply(columnMajorSparseMatrix0, (ColumnMajorSparseMatrix) cCSMatrix0);
      int int4 = (-370);
      int int5 = (-562);
      CCSMatrix.random(int4, int5, (double) int4, (Random) mockRandom0);
      cCSMatrix1.multiply(matrix0);
      CCSMatrix.randomSymmetric(int5, (double) int3, (Random) mockRandom0);
      int int6 = (-563);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix2.eachInColumn(int6, vectorProcedure0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      int int0 = 52;
      CCSMatrix cCSMatrix0 = new CCSMatrix(4, 4);
      int[] intArray0 = new int[1];
      cCSMatrix0.toDenseMatrix();
      // Undeclared exception!
      try { 
        cCSMatrix0.getColumn(52);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 53
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CCSMatrix.zero(32, 32, 32);
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(784);
      cCSMatrix0.maxInColumn(32);
      int[] intArray0 = new int[9];
      intArray0[0] = 1;
      intArray0[1] = 784;
      intArray0[2] = 784;
      intArray0[3] = 784;
      cCSMatrix0.getOrElse(1, 659, 784);
      Integer integer0 = new Integer(1);
      CCSMatrix.fromMatrixMarket("");
      String string0 = "Sides of blocks are incompatible!";
      CCSMatrix.fromMatrixMarket(string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      int int0 = 0;
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.nextGaussian();
      int int1 = 3318;
      SparseMatrix sparseMatrix0 = SparseMatrix.diagonal(3318, (-1102.97245));
      // Undeclared exception!
      try { 
        CCSMatrix.block(sparseMatrix0, sparseMatrix0, sparseMatrix0, sparseMatrix0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '3319' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Matrix matrix0 = Matrix.unit(0, 0);
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      double[][] doubleArray0 = new double[8][5];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (double) 0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[3];
      doubleArray2[0] = (double) 0;
      doubleArray2[1] = (double) 0;
      doubleArray2[2] = (double) 0;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[5];
      doubleArray3[0] = (double) 0;
      doubleArray3[1] = (double) 0;
      doubleArray3[2] = Double.POSITIVE_INFINITY;
      doubleArray3[3] = (double) 0;
      doubleArray3[4] = (double) 0;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[9];
      doubleArray4[0] = 2515.571602446976;
      doubleArray4[1] = 0.0;
      doubleArray4[3] = (double) 0;
      doubleArray4[4] = Double.POSITIVE_INFINITY;
      doubleArray4[5] = Double.POSITIVE_INFINITY;
      doubleArray4[6] = Double.POSITIVE_INFINITY;
      doubleArray4[7] = (double) 0;
      doubleArray4[8] = Double.POSITIVE_INFINITY;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[9];
      doubleArray5[0] = Double.POSITIVE_INFINITY;
      doubleArray5[1] = 0.0;
      doubleArray5[2] = Double.POSITIVE_INFINITY;
      doubleArray5[3] = 0.0;
      doubleArray5[5] = (-1012.11071986);
      doubleArray5[6] = (double) 0;
      doubleArray1[0] = 0.0;
      doubleArray5[8] = 0.0;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[6];
      doubleArray6[0] = (-1012.11071986);
      doubleArray6[1] = 0.0;
      doubleArray6[2] = Double.POSITIVE_INFINITY;
      doubleArray6[3] = Double.POSITIVE_INFINITY;
      doubleArray6[4] = Double.POSITIVE_INFINITY;
      doubleArray6[5] = (double) 0;
      doubleArray0[4] = doubleArray6;
      double[] doubleArray7 = new double[6];
      doubleArray7[0] = (-1012.11071986);
      doubleArray7[1] = 0.0;
      doubleArray7[2] = 0.0;
      doubleArray7[3] = (double) 0;
      doubleArray7[4] = 0.0;
      doubleArray7[5] = 2515.571602446976;
      doubleArray0[6] = doubleArray7;
      double[] doubleArray8 = new double[4];
      doubleArray8[0] = 0.0;
      doubleArray8[1] = 2515.571602446976;
      doubleArray8[2] = 0.0;
      doubleArray8[3] = (-1012.11071986);
      doubleArray0[7] = doubleArray8;
      CCSMatrix cCSMatrix0 = CCSMatrix.from2DArray(doubleArray0);
      DenseMatrix denseMatrix0 = DenseMatrix.diagonal(0, 0.0);
      Matrix matrix1 = ooPlaceMatricesMultiplication0.apply((ColumnMajorSparseMatrix) cCSMatrix0, denseMatrix0);
      // Undeclared exception!
      try { 
        CCSMatrix.block(matrix0, matrix0, matrix0, matrix1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Sides of blocks are incompatible!
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      cCSMatrix0.nonZeroIteratorOfColumn(0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      int int0 = 949;
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 949;
      int int1 = 2973;
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(2973, 949);
      MatrixAccumulator matrixAccumulator0 = mock(MatrixAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(matrixAccumulator0).accumulate();
      cCSMatrix0.foldNonZero(matrixAccumulator0);
      cCSMatrix0.foldColumns((VectorAccumulator) null);
      int int2 = (-2133);
      CCSMatrix cCSMatrix1 = CCSMatrix.zero(int2, int1);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      cCSMatrix1.transformRow(int0, vectorFunction0);
      double[][] doubleArray1 = new double[0][0];
      CCSMatrix.from2DArray(doubleArray1);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      int int0 = 1265;
      CCSMatrix cCSMatrix0 = new CCSMatrix(4, 784);
      Matrix matrix0 = cCSMatrix0.transpose();
      // Undeclared exception!
      try { 
        CCSMatrix.block(cCSMatrix0, matrix0, cCSMatrix0, matrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Sides of blocks are incompatible!
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(60);
      MockRandom mockRandom1 = new MockRandom();
      // Undeclared exception!
      try { 
        CCSMatrix.random(1002, (-1070), (-691.76230935), (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The density value should be between 0 and 1.0
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 2298;
      doubleArray0[1] = (double) 2298;
      doubleArray0[2] = (double) 2298;
      doubleArray0[3] = (double) 2298;
      doubleArray0[4] = (double) 2298;
      doubleArray0[5] = (double) 2298;
      doubleArray0[6] = (double) 2298;
      doubleArray0[7] = (double) 2298;
      int[] intArray0 = new int[2];
      intArray0[0] = 2298;
      intArray0[1] = 2298;
      CCSMatrix cCSMatrix0 = new CCSMatrix(2298, 2298, 2298, doubleArray0, intArray0, intArray0);
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(matrixPredicate0).test(anyInt() , anyInt());
      cCSMatrix0.non(matrixPredicate0);
      // Undeclared exception!
      try { 
        cCSMatrix0.select(intArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '2298' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(70, 70);
      cCSMatrix0.minInColumn(4);
      cCSMatrix0.iterator();
      cCSMatrix0.iteratorOfColumn(3);
      int[] intArray0 = new int[0];
      cCSMatrix0.select(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(1265);
      cCSMatrix0.copyOfShape(32, 32);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      int int0 = 964;
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 964;
      doubleArray0[1] = (-769.2549);
      doubleArray0[2] = (double) 964;
      doubleArray0[3] = (double) 964;
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(964);
      int int1 = 7;
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorAccumulator0).accumulate();
      cCSMatrix0.foldNonZeroInColumn(7, vectorAccumulator0);
      int int2 = 2062;
      cCSMatrix0.getColumn(2062);
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.eachNonZero(matrixProcedure0);
      cCSMatrix0.iteratorOfColumn(int2);
      int int3 = 0;
      int int4 = (-185);
      CCSMatrix cCSMatrix1 = CCSMatrix.from1DArray(int3, int4, doubleArray0);
      int int5 = 2183;
      cCSMatrix1.set(int4, int5, doubleArray0[3]);
      int int6 = (-22);
      int int7 = 1798;
      cCSMatrix1.nonZeroAt(int6, int7);
      long long0 = (-1L);
      MockRandom mockRandom0 = new MockRandom(long0);
      mockRandom0.ints((long) int1, int5, int7);
      int int8 = 2858;
      CCSMatrix.randomSymmetric(int8, (double) int0, (Random) mockRandom0);
      cCSMatrix1.minInColumn(int7);
      String string0 = "";
      CCSMatrix.fromMatrixMarket(string0);
      CCSMatrix.identity(int6);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      int[] intArray0 = new int[2];
      OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new OoPlaceMatricesSubtraction();
      DenseMatrix.fromCSV("");
      CCSMatrix cCSMatrix0 = new CCSMatrix(7, 4590, 7);
      cCSMatrix0.nonZeroAt(4590, 2641);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.eachInColumn(1, vectorProcedure0);
      cCSMatrix0.nonZeroColumnMajorIterator();
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      int int0 = 32;
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(32, 32, 32);
      DecimalFormat decimalFormat0 = new DecimalFormat("M?");
      cCSMatrix0.toMatrixMarket((NumberFormat) decimalFormat0);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cCSMatrix0.updateAt(32, 2, matrixFunction0);
      // Undeclared exception!
      try { 
        cCSMatrix0.nonZeroAt(2819, (-2289));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2289
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      int int0 = 0;
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(10, 10);
      cCSMatrix0.product();
      int int1 = Integer.MAX_VALUE;
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cCSMatrix0.updateAt(Integer.MAX_VALUE, 0, matrixFunction0);
      cCSMatrix0.copyOfShape(0, 9);
      int int2 = 1757;
      // Undeclared exception!
      try { 
        cCSMatrix0.set(1757, 0, 9);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '1757' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      CCSMatrix cCSMatrix0 = CCSMatrix.from1DArray(0, 0, doubleArray0);
      NumberFormat numberFormat0 = NumberFormat.getPercentInstance();
      cCSMatrix0.mkString(numberFormat0, " matrix.", " matrix.");
      cCSMatrix0.sum();
      cCSMatrix0.nonZeroColumnMajorIterator();
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(907, 2444.2073255958585);
      cCSMatrix0.maxInColumn(73);
      cCSMatrix0.foldNonZeroInRows((VectorAccumulator) null);
      int int0 = 2;
      int int1 = 102;
      int int2 = (-271);
      int int3 = (-2601);
      cCSMatrix0.getOrElse(int2, int3, int0);
      Integer integer0 = new Integer(int1);
      String string0 = "No rows or columns selected.";
      String string1 = null;
      CCSMatrix.fromMatrixMarket(string1);
      int int4 = 783;
      long long0 = (-223L);
      MockRandom mockRandom0 = new MockRandom(long0);
      Matrix.randomSymmetric(int4, mockRandom0);
      CCSMatrix.fromMatrixMarket(string0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      int[] intArray0 = new int[2];
      double[][] doubleArray1 = new double[7][3];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      doubleArray1[5] = doubleArray0;
      doubleArray1[6] = doubleArray0;
      CCSMatrix cCSMatrix0 = CCSMatrix.from2DArray(doubleArray1);
      cCSMatrix0.toColumnMajorSparseMatrix();
      cCSMatrix0.eachNonZeroInColumn(0, (VectorProcedure) null);
      // Undeclared exception!
      try { 
        CCSMatrix.fromCSV("=AC4,]v?owgeYVQQ");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      int int0 = 949;
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 949;
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(949, 949);
      byte byte0 = (byte)44;
      int int1 = (-557);
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = cCSMatrix0.toColumnMajorSparseMatrix();
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(vectorAccumulator0).accumulate();
      columnMajorSparseMatrix0.foldColumns(vectorAccumulator0);
      int int2 = 28;
      CCSMatrix cCSMatrix1 = CCSMatrix.zero(int0, int1);
      int[] intArray0 = new int[2];
      intArray0[0] = (int) byte0;
      intArray0[1] = int2;
      cCSMatrix1.select(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      int int0 = 0;
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(10, 10);
      cCSMatrix0.product();
      int int1 = Integer.MAX_VALUE;
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(604.86449).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cCSMatrix0.updateAt(Integer.MAX_VALUE, 0, matrixFunction0);
      cCSMatrix0.copyOfShape(0, 9);
      int int2 = 1757;
      // Undeclared exception!
      try { 
        cCSMatrix0.set(1757, 0, 9);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '1757' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      int int0 = 30;
      MockRandom mockRandom0 = new MockRandom(30);
      // Undeclared exception!
      try { 
        CCSMatrix.random(30, 21, (double) 21, (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The density value should be between 0 and 1.0
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      int int0 = 901;
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(901, 901);
      byte byte0 = (byte)44;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)44;
      cCSMatrix0.setAll((byte)44);
      LinearAlgebra.InverterFactory linearAlgebra_InverterFactory0 = LinearAlgebra.InverterFactory.NO_PIVOT_GAUSS;
      cCSMatrix0.withInverter(linearAlgebra_InverterFactory0);
      CCSMatrix.zero((int) byte0, (int) byte0);
      cCSMatrix0.minInColumn(int0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      int int0 = 2995;
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(2995);
      cCSMatrix0.max();
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn((-1437.580477), 1.0, (-1437.580477), 2875.0, (-1437.580477)).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cCSMatrix0.nonZeroIterator();
      cCSMatrix0.update(matrixFunction0);
      cCSMatrix0.transformRow(int0, vectorFunction0);
      int int1 = 1898;
      Random random0 = null;
      ColumnMajorSparseMatrix.random(int1, int0, (double) int0, random0);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.eachNonZeroInColumn(int0, vectorProcedure0);
      cCSMatrix0.columnMajorIterator();
      cCSMatrix0.min();
      int int2 = 1632;
      cCSMatrix0.maxInColumn(int2);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(3014);
      mockRandom0.longs();
      CCSMatrix cCSMatrix0 = CCSMatrix.random(5, 3014, 0.0, (Random) mockRandom0);
      cCSMatrix0.min();
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      int int0 = 784;
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(784, 784, 784);
      cCSMatrix0.copyOfShape(885, 48);
      CCSMatrix cCSMatrix1 = new CCSMatrix(3033, 306);
      int int1 = (-104);
      SparseMatrix.zero(784, (-104));
      cCSMatrix1.minInColumn(int0);
      cCSMatrix1.getColumn(int1);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix1.eachInColumn(int1, vectorProcedure0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(0);
      double[][] doubleArray0 = new double[1][8];
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = (double) 0;
      doubleArray1[3] = 274.404926;
      doubleArray1[4] = (double) 0;
      doubleArray1[5] = (double) 0;
      doubleArray1[6] = (double) 0;
      doubleArray1[8] = (double) 0;
      doubleArray0[0] = doubleArray1;
      CCSMatrix.from1DArray(2, 2, doubleArray1);
      // Undeclared exception!
      try { 
        cCSMatrix0.nonZeroAt((-76), 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      int int0 = 0;
      MockRandom mockRandom0 = new MockRandom();
      CCSMatrix cCSMatrix0 = CCSMatrix.randomSymmetric(0, (double) 0, (Random) mockRandom0);
      cCSMatrix0.setAll(0);
      // Undeclared exception!
      try { 
        cCSMatrix0.maxInColumn(3011);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3011
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      int int0 = 60;
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 60;
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.from1DArray(60, 0, doubleArray0);
      CCSMatrix cCSMatrix0 = CCSMatrix.block(rowMajorSparseMatrix0, rowMajorSparseMatrix0, rowMajorSparseMatrix0, rowMajorSparseMatrix0);
      cCSMatrix0.add((-1388.0567897294));
      double[][] doubleArray1 = new double[11][8];
      doubleArray1[0] = doubleArray0;
      doubleArray1[8] = doubleArray0;
      CCSMatrix cCSMatrix1 = CCSMatrix.from2DArray(doubleArray1);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(vectorAccumulator0).accumulate();
      cCSMatrix1.foldRows(vectorAccumulator0);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        cCSMatrix1.eachNonZeroInColumn((-1851), vectorProcedure0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1851
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 16;
      doubleArray0[2] = (-1710.658136);
      doubleArray0[3] = (double) 1732;
      doubleArray0[4] = (double) 1732;
      doubleArray0[5] = (double) 1732;
      double[][] doubleArray1 = new double[4][4];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      CCSMatrix cCSMatrix0 = CCSMatrix.from2DArray(doubleArray1);
      cCSMatrix0.mkString("+wW", (String) null);
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      CCSMatrix cCSMatrix1 = new CCSMatrix(117, 710, 321);
      cCSMatrix1.nonZeroRowMajorIterator();
      cCSMatrix0.min();
      // Undeclared exception!
      try { 
        cCSMatrix1.getColumn(1732);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1733
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(37, 37);
      cCSMatrix0.minInColumn(4);
      org.evosuite.runtime.Random.setNextRandom(4);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0).when(vectorAccumulator0).accumulate();
      cCSMatrix0.foldNonZeroInRows(vectorAccumulator0);
      cCSMatrix0.getColumn((-428));
      cCSMatrix0.spliterator();
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication1 = new OoPlaceMatricesMultiplication();
      ooPlaceMatricesMultiplication1.apply((ColumnMajorSparseMatrix) cCSMatrix0, (ColumnMajorSparseMatrix) cCSMatrix0);
      int int0 = 344;
      int int1 = (-163);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) int0;
      doubleArray0[1] = (double) int1;
      cCSMatrix0.toDenseMatrix();
      int[] intArray0 = new int[2];
      int int2 = 4633;
      cCSMatrix0.minInColumn(int2);
      int[] intArray1 = null;
      int int3 = 15;
      int int4 = 13;
      int int5 = (-1);
      CCSMatrix cCSMatrix1 = new CCSMatrix(int3, int4, int5, doubleArray0, intArray1, intArray0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix(48, 48);
      int int0 = 797;
      CCSMatrix cCSMatrix1 = new CCSMatrix(797, 49);
      int[] intArray0 = new int[3];
      intArray0[0] = 48;
      int int1 = 103;
      // Undeclared exception!
      try { 
        CCSMatrix.block(cCSMatrix0, cCSMatrix0, cCSMatrix1, cCSMatrix1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Sides of blocks are incompatible!
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(5, 5, 5);
      CCSMatrix cCSMatrix1 = CCSMatrix.diagonal(4, 5);
      cCSMatrix0.swapColumns(5, 5);
      org.evosuite.runtime.Random.setNextRandom(3);
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix1.each(matrixProcedure0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      CCSMatrix cCSMatrix0 = CCSMatrix.randomSymmetric(0, (double) 0, (Random) mockRandom0);
      CCSMatrix cCSMatrix1 = CCSMatrix.identity(1);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 1007;
      int[] intArray0 = new int[2];
      intArray0[0] = 134;
      intArray0[1] = (-1163);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.swapRows(1, (-1365));
      // Undeclared exception!
      try { 
        cCSMatrix1.maxInColumn(769);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 769
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      CCSMatrix.zero(48, 48, 48);
      CCSMatrix cCSMatrix0 = new CCSMatrix(784, 52);
      int[] intArray0 = new int[3];
      intArray0[0] = 48;
      intArray0[1] = 48;
      intArray0[2] = 48;
      cCSMatrix0.select(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      int int0 = 2995;
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(2995);
      cCSMatrix0.max();
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      CCSMatrix cCSMatrix1 = new CCSMatrix(764, 764);
      org.evosuite.runtime.Random.setNextRandom((-4613));
      cCSMatrix0.minInColumn((-7207));
      int int1 = 7;
      cCSMatrix1.blankOfShape(int0, int1);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      int int0 = 2995;
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(2995);
      cCSMatrix0.max();
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 1.0, (-1712.2536501585), (-52.0), (-1712.2536501585)).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cCSMatrix0.nonZeroIterator();
      cCSMatrix0.update(matrixFunction0);
      cCSMatrix0.transformRow(int0, vectorFunction0);
      int int1 = 1898;
      Random random0 = null;
      ColumnMajorSparseMatrix.random(int1, int0, (double) int0, random0);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.eachNonZeroInColumn(int0, vectorProcedure0);
      cCSMatrix0.columnMajorIterator();
      cCSMatrix0.min();
      int int2 = (-2129);
      CCSMatrix.identity(int2);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      CCSMatrix.zero(32, 32, 32);
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(784);
      cCSMatrix0.maxInColumn(32);
      double[][] doubleArrayArray0 = null;
      CCSMatrix.from2DArray((double[][]) null);
      CCSMatrix.from2DArray(doubleArrayArray0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      CCSMatrix.zero(32, 32, 32);
      CCSMatrix cCSMatrix0 = new CCSMatrix(2971, 784);
      CCSMatrix cCSMatrix1 = CCSMatrix.identity(784);
      cCSMatrix1.maxInColumn(32);
      int[] intArray0 = new int[9];
      intArray0[0] = 1;
      intArray0[1] = 784;
      intArray0[2] = 784;
      intArray0[3] = 784;
      intArray0[4] = 32;
      intArray0[5] = 2971;
      intArray0[6] = 2971;
      intArray0[7] = 2971;
      intArray0[8] = 784;
      int[] intArray1 = new int[0];
      cCSMatrix1.select(intArray0, intArray1);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      CCSMatrix.zero(32, 32, 32);
      CCSMatrix cCSMatrix0 = new CCSMatrix(2971, 784);
      CCSMatrix cCSMatrix1 = CCSMatrix.identity(784);
      cCSMatrix1.maxInColumn(32);
      int[] intArray0 = new int[9];
      intArray0[0] = 1;
      intArray0[1] = 784;
      intArray0[2] = 784;
      intArray0[3] = 784;
      intArray0[4] = 32;
      cCSMatrix1.select(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      int int0 = 116;
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(5);
      cCSMatrix0.setColumn(2, 191.0);
      int int1 = 5;
      int int2 = 1926;
      CCSMatrix cCSMatrix1 = (CCSMatrix)cCSMatrix0.copyOfShape(116, 1926);
      cCSMatrix1.slice(1926, 877, 1926, 1926);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 191.0;
      doubleArray0[1] = (double) 2;
      doubleArray0[2] = (-2407.077);
      int[] intArray0 = new int[2];
      intArray0[0] = 0;
      cCSMatrix1.select(intArray0, intArray0);
      intArray0[1] = 5;
      CCSMatrix cCSMatrix2 = new CCSMatrix(0, (-8), 0, doubleArray0, intArray0, intArray0);
      cCSMatrix2.getOrElse(int2, int2, doubleArray0[1]);
      int int3 = 32;
      CCSMatrix cCSMatrix3 = new CCSMatrix(int1, int3);
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      ooPlaceMatricesMultiplication0.apply((ColumnMajorSparseMatrix) cCSMatrix0, (ColumnMajorSparseMatrix) cCSMatrix0);
      cCSMatrix3.multiply((Matrix) cCSMatrix0);
      cCSMatrix1.isZeroAt(int3, int0);
      int int4 = 62;
      VectorProcedure vectorProcedure0 = null;
      cCSMatrix3.eachInRow(int4, vectorProcedure0);
      cCSMatrix1.columnMajorIterator();
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      CCSMatrix.zero(5, 110, 5);
      CCSMatrix cCSMatrix0 = new CCSMatrix(83, 109);
      CCSMatrix cCSMatrix1 = CCSMatrix.identity(2465);
      cCSMatrix1.set(89, 112, 112);
      cCSMatrix0.maxInColumn(3);
      CCSMatrix.fromMatrixMarket("Given vectors should have the same length: ");
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(32, 32, 32);
      DecimalFormat decimalFormat0 = new DecimalFormat("M?");
      decimalFormat0.format((double) 32);
      cCSMatrix0.toMatrixMarket((NumberFormat) decimalFormat0);
      int int0 = 2;
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)2).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cCSMatrix0.updateAt(32, 2, matrixFunction0);
      // Undeclared exception!
      try { 
        cCSMatrix0.swapRows((-1029), 2);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '-1029' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 2298;
      doubleArray0[1] = (double) 2298;
      doubleArray0[2] = (double) 2298;
      doubleArray0[5] = (double) 2298;
      doubleArray0[7] = (double) 2298;
      int[] intArray0 = new int[2];
      intArray0[0] = 2298;
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(32, 1.0);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.transformRow(3, vectorFunction0);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.eachNonZeroInColumn(16, vectorProcedure0);
      cCSMatrix0.columnMajorIterator();
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 2298;
      doubleArray0[1] = (double) 2298;
      doubleArray0[2] = (double) 2298;
      doubleArray0[5] = (double) 2298;
      doubleArray0[7] = (double) 2298;
      int[] intArray0 = new int[2];
      intArray0[0] = 2298;
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(32, 1.0);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.transformRow(3, vectorFunction0);
      ColumnMajorSparseMatrix.random((-4050), 2, 831.3667044741, (Random) null);
      int int0 = 16;
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.eachNonZeroInColumn(int0, vectorProcedure0);
      cCSMatrix0.columnMajorIterator();
      cCSMatrix0.min();
      int int1 = 2;
      CCSMatrix.identity(int1);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(37, 37);
      cCSMatrix0.minInColumn(4);
      org.evosuite.runtime.Random.setNextRandom(4);
      cCSMatrix0.getRow(4);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (-416);
      doubleArray0[1] = 0.0;
      doubleArray0[3] = (double) 3550;
      doubleArray0[4] = (double) 37;
      doubleArray0[5] = Double.NEGATIVE_INFINITY;
      CCSMatrix.from1DArray(37, 3550, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(1L);
      mockRandom0.longs();
      CCSMatrix.random(5, 923, (double) 1L, (Random) mockRandom0);
      CCSMatrix.identity(923);
      CCSMatrix.fromCSV((String) null);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      CCSMatrix.zero(48, 48, 48);
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(49, (-2683.3330983327));
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      cCSMatrix0.transformRow(48, vectorFunction0);
      MockRandom mockRandom0 = new MockRandom(0L);
      ColumnMajorSparseMatrix.random(3, (-4050), 0.5, (Random) mockRandom0);
      int int0 = (-1830);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.eachNonZeroInColumn(int0, vectorProcedure0);
      cCSMatrix0.columnMajorIterator();
      cCSMatrix0.min();
      int int1 = (-116);
      CCSMatrix.identity(int1);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      org.evosuite.runtime.Random.setNextRandom(8);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      org.evosuite.runtime.Random.setNextRandom((-2979));
      MockRandom mockRandom0 = new MockRandom(1L);
      CCSMatrix cCSMatrix0 = CCSMatrix.randomSymmetric(0, (double) 1380, (Random) mockRandom0);
      cCSMatrix0.max();
      VectorProcedure vectorProcedure1 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(907, (-966.0));
      CCSMatrix cCSMatrix1 = new CCSMatrix(783, 783);
      CCSMatrix cCSMatrix2 = new CCSMatrix(907, 1722);
      org.evosuite.runtime.Random.setNextRandom(27);
      cCSMatrix0.minInColumn(783);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.eachInColumn(907, vectorProcedure0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      CCSMatrix cCSMatrix0 = CCSMatrix.randomSymmetric(0, (double) 0, (Random) mockRandom0);
      int[] intArray0 = new int[2];
      intArray0[0] = 134;
      intArray0[1] = 0;
      int[] intArray1 = new int[7];
      intArray1[1] = 914;
      intArray1[2] = 0;
      intArray1[3] = 134;
      intArray1[4] = 0;
      intArray1[5] = 0;
      intArray1[6] = 0;
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      Matrix matrix0 = ooPlaceMatricesMultiplication0.apply((ColumnMajorSparseMatrix) cCSMatrix0, (ColumnMajorSparseMatrix) cCSMatrix0);
      MockRandom mockRandom1 = new MockRandom(0);
      MockRandom mockRandom2 = new MockRandom(1000L);
      CCSMatrix.randomSymmetric(205, 1.0, (Random) mockRandom1);
      int int0 = 32;
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      matrix0.eachInColumn(int0, vectorProcedure0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(5);
      int int0 = 2;
      cCSMatrix0.setColumn(2, (double) 2);
      int int1 = 853;
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      ooPlaceMatricesMultiplication0.apply((ColumnMajorSparseMatrix) cCSMatrix0, (ColumnMajorSparseMatrix) cCSMatrix0);
      cCSMatrix0.nonZeroColumnMajorIterator();
      // Undeclared exception!
      try { 
        Matrix.fromMatrixMarket("h");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong input file format: can not read header '%%MatrixMarket'.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(5);
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      ooPlaceMatricesMultiplication0.apply((ColumnMajorSparseMatrix) cCSMatrix0, (ColumnMajorSparseMatrix) cCSMatrix0);
      cCSMatrix0.nonZeroColumnMajorIterator();
      cCSMatrix0.determinant();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.forEach(consumer0);
      MockRandom mockRandom0 = new MockRandom();
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication1 = new OoPlaceMatricesMultiplication();
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(5);
      int int0 = 2;
      cCSMatrix0.setColumn(2, (double) 2);
      cCSMatrix0.rank();
      CCSMatrix cCSMatrix1 = new CCSMatrix(5, 2);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorAccumulator0).accumulate();
      cCSMatrix1.foldNonZeroInRow(2, vectorAccumulator0);
      cCSMatrix1.updateAt(4624, 13, (MatrixFunction) null);
      SparseMatrix.block(cCSMatrix1, cCSMatrix1, cCSMatrix1, cCSMatrix0);
      cCSMatrix1.shuffle();
      int int1 = 2954;
      CCSMatrix cCSMatrix2 = CCSMatrix.identity(int1);
      cCSMatrix0.copyOfRows(int0);
      cCSMatrix0.toDenseMatrix();
      int int2 = 9;
      cCSMatrix2.maxInColumn(int2);
      CCSMatrix.identity(int2);
      cCSMatrix1.max();
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(5);
      int int0 = 2;
      cCSMatrix0.setColumn(2, (double) 2);
      CCSMatrix cCSMatrix1 = new CCSMatrix(5, 2);
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      cCSMatrix0.toRowMajorSparseMatrix();
      cCSMatrix0.maxInColumn(2);
      org.evosuite.runtime.Random.setNextRandom(896);
      CCSMatrix cCSMatrix2 = CCSMatrix.zero(5, 5, 2);
      cCSMatrix2.minInColumn(2);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 896;
      int[] intArray0 = new int[7];
      intArray0[0] = 5;
      intArray0[1] = 831;
      intArray0[2] = 5;
      intArray0[3] = 780;
      intArray0[4] = 896;
      int int1 = 6;
      intArray0[5] = 6;
      intArray0[6] = 2860;
      CCSMatrix cCSMatrix3 = null;
      try {
        cCSMatrix3 = new CCSMatrix((-2285), (-1), (-1), doubleArray0, intArray0, intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: -2285x-1
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(3870);
      cCSMatrix0.iteratorOfRow(3);
      cCSMatrix0.toBinary();
      cCSMatrix0.nonZeroColumnMajorIterator();
      double[][] doubleArray0 = new double[1][8];
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = (double) 3;
      doubleArray1[1] = (double) (-3297);
      doubleArray1[2] = (double) 3870;
      doubleArray1[3] = (double) (-3297);
      doubleArray1[4] = (double) 32;
      doubleArray1[5] = (double) 3870;
      doubleArray1[6] = (double) 3870;
      doubleArray1[7] = (double) 3870;
      doubleArray1[8] = (double) (-3297);
      doubleArray0[0] = doubleArray1;
      CCSMatrix.from2DArray(doubleArray0);
      double[] doubleArray2 = new double[7];
      doubleArray2[0] = (double) 3;
      doubleArray2[1] = (double) 32;
      doubleArray1[1] = (double) 3;
      doubleArray2[3] = Double.POSITIVE_INFINITY;
      doubleArray2[4] = (double) 32;
      doubleArray2[5] = (double) 32;
      doubleArray2[6] = (double) (-3297);
      CCSMatrix.from1DArray(32, (-3297), doubleArray2);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(5);
      cCSMatrix0.setColumn(2, (double) 2);
      DenseMatrix denseMatrix0 = DenseMatrix.constant(853, 853, 323.3549);
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      ooPlaceMatricesMultiplication0.apply(denseMatrix0, (ColumnMajorSparseMatrix) cCSMatrix0);
      ooPlaceMatricesMultiplication0.apply((ColumnMajorSparseMatrix) cCSMatrix0, (ColumnMajorSparseMatrix) cCSMatrix0);
      cCSMatrix0.nonZeroColumnMajorIterator();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.forEach(consumer0);
      MockRandom mockRandom0 = new MockRandom();
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication1 = new OoPlaceMatricesMultiplication();
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      int int0 = 64;
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(4591, 64);
      int int1 = 1380;
      double double0 = 2321.19674;
      DenseMatrix denseMatrix0 = DenseMatrix.constant(0, 853, 2321.19674);
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      ooPlaceMatricesMultiplication0.apply(denseMatrix0, (ColumnMajorSparseMatrix) cCSMatrix0);
      Locale locale0 = Locale.JAPANESE;
      NumberFormat numberFormat0 = NumberFormat.getCurrencyInstance(locale0);
      String string0 = cCSMatrix0.toCSV(numberFormat0);
      ooPlaceMatricesMultiplication0.apply((ColumnMajorSparseMatrix) cCSMatrix0, (ColumnMajorSparseMatrix) cCSMatrix0);
      cCSMatrix0.nonZeroColumnMajorIterator();
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication1 = new OoPlaceMatricesMultiplication();
      int int2 = (-1588);
      int int3 = 83;
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) int1;
      doubleArray0[1] = double0;
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.from1DArray(int2, int3, doubleArray0);
      ooPlaceMatricesMultiplication0.partiallyApply(rowMajorSparseMatrix0);
      DenseMatrix denseMatrix1 = DenseMatrix.fromCSV(string0);
      ooPlaceMatricesMultiplication1.apply(denseMatrix1, (ColumnMajorSparseMatrix) cCSMatrix0);
      ooPlaceMatricesMultiplication0.apply((ColumnMajorSparseMatrix) cCSMatrix0, (ColumnMajorSparseMatrix) cCSMatrix0);
      cCSMatrix0.nonZeroColumnMajorIterator();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.forEach(consumer0);
      int int4 = (-1519);
      org.evosuite.runtime.Random.setNextRandom(int4);
      org.evosuite.runtime.Random.setNextRandom(int0);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(5, 5, 5);
      cCSMatrix0.setColumn(2, (double) 2);
      double double0 = 323.3549;
      DenseMatrix denseMatrix0 = DenseMatrix.constant(853, 853, 323.3549);
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      Matrix matrix0 = ooPlaceMatricesMultiplication0.apply(denseMatrix0, (ColumnMajorSparseMatrix) cCSMatrix0);
      Locale locale0 = Locale.JAPANESE;
      NumberFormat numberFormat0 = NumberFormat.getCurrencyInstance(locale0);
      cCSMatrix0.toCSV(numberFormat0);
      ooPlaceMatricesMultiplication0.apply((ColumnMajorSparseMatrix) cCSMatrix0, (ColumnMajorSparseMatrix) cCSMatrix0);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      cCSMatrix0.transformColumn(2, vectorFunction0);
      cCSMatrix0.iteratorOrNonZeroColumns();
      CCSMatrix.zero(5, 4554, 5);
      DenseMatrix.diagonal(4554, 323.3549);
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication1 = new OoPlaceMatricesMultiplication();
      int int0 = 4555;
      CCSMatrix cCSMatrix1 = new CCSMatrix((-8), 8);
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication2 = new OoPlaceMatricesMultiplication();
      Random random0 = null;
      int int1 = 1858;
      ColumnMajorSparseMatrix.random(int0, int1, double0, random0);
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication3 = new OoPlaceMatricesMultiplication();
      int int2 = 491;
      int int3 = (-4179);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      matrix0.updateAt(int2, int3, matrixFunction0);
  }
}
