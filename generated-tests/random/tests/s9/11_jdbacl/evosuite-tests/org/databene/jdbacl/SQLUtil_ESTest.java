/*
 * This file was automatically generated by EvoSuite
 * Fri Mar 22 17:46:58 GMT 2019
 */

package org.databene.jdbacl;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.OutputStream;
import java.io.PipedReader;
import java.io.PrintWriter;
import java.io.StreamTokenizer;
import java.io.StringReader;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import org.apache.derby.iapi.store.raw.xact.RawTransaction;
import org.apache.derby.impl.io.vfmem.DataStore;
import org.apache.derby.impl.io.vfmem.VirtualFile;
import org.databene.commons.version.VersionNumber;
import org.databene.jdbacl.NameSpec;
import org.databene.jdbacl.SQLUtil;
import org.databene.jdbacl.model.DBCatalog;
import org.databene.jdbacl.model.DBCheckConstraint;
import org.databene.jdbacl.model.DBColumn;
import org.databene.jdbacl.model.DBConstraint;
import org.databene.jdbacl.model.DBDataType;
import org.databene.jdbacl.model.DBForeignKeyConstraint;
import org.databene.jdbacl.model.DBNotNullConstraint;
import org.databene.jdbacl.model.DBObject;
import org.databene.jdbacl.model.DBPackage;
import org.databene.jdbacl.model.DBPrimaryKeyConstraint;
import org.databene.jdbacl.model.DBSchema;
import org.databene.jdbacl.model.DBTable;
import org.databene.jdbacl.model.DBUniqueConstraint;
import org.databene.jdbacl.model.DefaultDBColumn;
import org.databene.jdbacl.model.DefaultDBTable;
import org.databene.jdbacl.model.DefaultDatabase;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.hsqldb.rowio.RowOutputTextQuoted;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SQLUtil_ESTest extends SQLUtil_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SQLUtil.removeComments("create table_$a|,a;;j=");
      String[] stringArray0 = new String[6];
      stringArray0[5] = "create table_$a|,a;;j=";
      SQLUtil.innerJoin("create table_$a|,a;;j=", stringArray0, "Bw*E", "Bw*E", stringArray0);
      String string0 = "Cannot set a property on a null pointer";
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      boolean boolean0 = SQLUtil.isDML("select intoe(b7b:,)/4\"}d `");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      boolean boolean0 = SQLUtil.isDDL("create tableupdates");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "()", false, (String[]) null);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String string0 = SQLUtil.ukSpec(dBUniqueConstraint0, nameSpec0);
      assertEquals("UNIQUE ()", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Object object0 = new Object();
      String string0 = SQLUtil.renderValue(object0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String[] stringArray0 = new String[6];
      String string0 = SQLUtil.renderColumnNames(stringArray0);
      assertEquals("(, , , , , )", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String[] stringArray0 = new String[3];
      String string0 = SQLUtil.renderColumnListWithTableName((String) null, stringArray0);
      assertEquals("null.null, null.null, null.null", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String string0 = SQLUtil.leftJoin("t7F^n'TTc9l2Lj:t^", stringArray0, "^*j@^hFlLmg", "t7F^n'TTc9l2Lj:t^", stringArray0);
      assertEquals("left join ^*j@^hFlLmg as t7F^n'TTc9l2Lj:t^ on ", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String[] stringArray0 = new String[3];
      String string0 = SQLUtil.join((String) null, "x3AaTsg", stringArray0, "", "org.apache.derby.impl.store.access.conglomerate.GenericConglomerateController", stringArray0);
      assertEquals(" as org.apache.derby.impl.store.access.conglomerate.GenericConglomerateController on x3AaTsg.null = org.apache.derby.impl.store.access.conglomerate.GenericConglomerateController.null and x3AaTsg.null = org.apache.derby.impl.store.access.conglomerate.GenericConglomerateController.null and x3AaTsg.null = org.apache.derby.impl.store.access.conglomerate.GenericConglomerateController.null", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String[] stringArray0 = new String[3];
      String string0 = SQLUtil.join("", "", stringArray0, "%2Is;Dh|x?t&}", "", stringArray0);
      assertEquals("%2Is;Dh|x?t&} as  on .null = .null and .null = .null and .null = .null", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String[] stringArray0 = new String[2];
      DBSchema dBSchema0 = new DBSchema("drop table");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable(",)kxrIwRl6NG,Cj0L", dBSchema0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("<~GM|R|Y8`", false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      String string0 = SQLUtil.fkSpec(dBForeignKeyConstraint0, nameSpec0);
      assertEquals("FOREIGN KEY (, ) REFERENCES ,)kxrIwRl6NG,Cj0L(, )", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[3];
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("select", true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      StringBuilder stringBuilder0 = new StringBuilder();
      NameSpec nameSpec0 = NameSpec.NEVER;
      StringBuilder stringBuilder1 = SQLUtil.appendConstraintName((DBConstraint) dBForeignKeyConstraint0, stringBuilder0, nameSpec0);
      assertEquals("", stringBuilder1.toString());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      String[] stringArray0 = new String[3];
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("drop table");
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, (String) null, true, stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      StringBuilder stringBuilder0 = SQLUtil.createConstraintSpecBuilder(dBPrimaryKeyConstraint0, nameSpec0);
      SQLUtil.appendConstraintName((DBConstraint) dBPrimaryKeyConstraint0, stringBuilder0);
      assertEquals("", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder(2);
      SQLUtil.addRequiredCondition((String) null, stringBuilder0);
      assertEquals("null", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.renderNumber((StreamTokenizer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnTypeWithSize((DBColumn) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      // Undeclared exception!
      try { 
        SQLUtil.pkSpec((DBPrimaryKeyConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.normalize((String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.leftJoin("4LOk(3>", (String[]) null, "4LOk(3>", "create table$1]", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      NameSpec nameSpec0 = NameSpec.NEVER;
      // Undeclared exception!
      try { 
        SQLUtil.fkSpec((DBForeignKeyConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      // Undeclared exception!
      try { 
        SQLUtil.createConstraintSpecBuilder((DBConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.constraintName((DBConstraint) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      boolean boolean0 = SQLUtil.isDML(" E(B7B:,)/4\"}d `");
      assertFalse(boolean0);
      
      String string0 = SQLUtil.renderValue("");
      assertEquals("''", string0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      SQLUtil.mutatesDataOrStructure("select into");
      SQLUtil.isDDL("select into");
      DBCatalog dBCatalog0 = new DBCatalog();
      assertEquals("catalog", dBCatalog0.getObjectType());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      SQLUtil.parseColumnTypeAndSize("create table`huw|sa$'zi,rz)~ak");
      SQLUtil.mutatesStructure("create table`huw|sa$'zi,rz)~ak");
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      String[] stringArray0 = null;
      String string0 = SQLUtil.renderColumnNames((String[]) null);
      // Undeclared exception!
      try { 
        SQLUtil.join(string0, string0, stringArray0, string0, string0, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[6] = "8m:';l%5EQdD]Y3@qh9";
      SQLUtil.renderColumnListWithTableName("m^e*(GpoboA%", stringArray0);
      int int0 = (-265073846);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      SQLUtil.isQuery("CONSTRAINT ");
      StringReader stringReader0 = new StringReader("1[h&x+yf3,M");
      stringReader0.close();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.lowerCaseMode(true);
      SQLUtil.renderNumber(streamTokenizer0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader(97);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(pipedReader0);
      streamTokenizer0.nval = (-19.437312902667);
      String string0 = SQLUtil.renderNumber(streamTokenizer0);
      assertEquals("- 19.437312902667", string0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      boolean boolean0 = true;
      SQLUtil.normalize("E9zJ'nxnC+v|VW", true);
      int int0 = (-225654601);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      String string0 = SQLUtil.normalize("MLJXjK\"aIxbD", false);
      assertEquals("MLJXjK \"aIxbD\"", string0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      SQLUtil.mutatesDataOrStructure("getTransactionTimeout");
      SQLUtil.normalize("*/", true);
      DefaultDatabase defaultDatabase0 = new DefaultDatabase("*f", "alter tablemax_len", (VersionNumber) null);
      assertFalse(defaultDatabase0.isImportedSequences());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      String string0 = "9810800c-0121-c5e1-a2f5-00000043e718";
      SQLUtil.normalize("9810800c-0121-c5e1-a2f5-00000043e718", true);
      StringBuilder stringBuilder0 = null;
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, " id: ");
      SQLUtil.normalize("//", false);
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter((OutputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Writer", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      SQLUtil.mutatesDataOrStructure("CLOBCREATELOCATOR");
      SQLUtil.normalize("@g=y^8)pf=i5~jl", false);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("Zfx>hC1y+U )$R[/A", (DBSchema) null);
      assertNull(defaultDBTable0.getDoc());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      SQLUtil.normalize("RiY]tE%M(s(gb3hmP", true);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("callsele");
      assertEquals("table", defaultDBTable0.getObjectType());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      String string0 = SQLUtil.normalize("jMEHC2Pi9o ,`vE", false);
      assertEquals("jMEHC2Pi9o, ` vE", string0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema("call");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("call", dBSchema0);
      String[] stringArray0 = new String[9];
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, (String) null, true, stringArray0);
      String string0 = SQLUtil.typeAndName(dBUniqueConstraint0);
      assertEquals("unique constraint constraint", string0);
      
      String string1 = SQLUtil.ownerDotComponent(dBUniqueConstraint0);
      assertEquals("call.null", string1);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      DBPackage dBPackage0 = new DBPackage(".'7$", (DBSchema) null);
      String string0 = SQLUtil.typeAndName(dBPackage0);
      assertEquals("null .'7$", string0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn((String) null, defaultDBTable0, 122, "X0X0F.S");
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      SQLUtil.typeAndName(defaultDBColumn0);
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "9uK = '9uK' AND 9uK = '9uK' AND  NOT NULL = ' NOT NULL' AND 9uK = '9uK' AND 9uK = '9uK' AND 9uK = '9uK' AND 9uK = '9uK' AND 9uK = '9uK' AND 9uK = '9uK'");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      String string0 = ", bytesRead=";
      String[] stringArray0 = new String[1];
      String string1 = SQLUtil.renderColumnListWithTableName(", bytesRead=", stringArray0);
      assertEquals(", bytesRead=.null", string1);
      
      DBSchema dBSchema0 = new DBSchema("v3!");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable(", bytesRead=", dBSchema0);
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, ", bytesRead=", false, stringArray0);
      String string2 = dBPrimaryKeyConstraint0.toString();
      assertEquals("CONSTRAINT \", bytesRead=\" PRIMARY KEY ()", string2);
      
      String string3 = SQLUtil.constraintName(dBPrimaryKeyConstraint0);
      assertEquals("CONSTRAINT \", bytesRead=\" ", string3);
      
      String string4 = SQLUtil.renderValue(stringArray0[0]);
      assertEquals("null", string4);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      String[] stringArray0 = new String[9];
      String string0 = SQLUtil.renderWhereClause(stringArray0, stringArray0);
      assertEquals("null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null", string0);
      
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      Integer.getInteger("alter materialized viewo");
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, (String) null, true, stringArray0);
      String string1 = SQLUtil.constraintName(dBPrimaryKeyConstraint0);
      assertEquals("", string1);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("refere", false, "org.firebirdsql.gds.impl.jni.NativeGDSFactoryPlugin", "refere");
      NameSpec nameSpec0 = NameSpec.NEVER;
      StringBuilder stringBuilder0 = SQLUtil.createConstraintSpecBuilder(dBCheckConstraint0, nameSpec0);
      SQLUtil.appendConstraintName((DBConstraint) dBCheckConstraint0, stringBuilder0);
      assertEquals("CONSTRAINT refere ", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("Zfx>hC1y+U )$R[/A", (DBSchema) null);
      String[] stringArray0 = new String[8];
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "truncaterename@g=y^8)pf=i5~jl", true, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String string0 = SQLUtil.ukSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("CONSTRAINT truncaterename@g=y^8)pf=i5~jl UNIQUE (, , , , , , , )", string0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      DBCatalog dBCatalog0 = new DBCatalog();
      SQLUtil.ownerDotComponent(dBCatalog0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      StringBuilder stringBuilder0 = new StringBuilder("updateTime");
      SQLUtil.addOptionalCondition((String) null, stringBuilder0);
      assertEquals("updateTime or null", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder(2);
      SQLUtil.addOptionalCondition(":aW_/^` %=X1N9", stringBuilder0);
      NameSpec nameSpec0 = NameSpec.NEVER;
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      String[] stringArray0 = new String[2];
      SQLUtil.leftJoin("vRs}", stringArray0, "<~GM|R|Y8`", "create tableupdates", stringArray0);
      DBSchema dBSchema0 = new DBSchema("drop table");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable(",)kxrIwRl6NG,Cj0L", dBSchema0);
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "create tableupdates", false, stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      StringBuilder stringBuilder0 = SQLUtil.createConstraintSpecBuilder(dBPrimaryKeyConstraint0, nameSpec0);
      stringBuilder0.append(0.0);
      SQLUtil.addRequiredCondition("left join <~GM|R|Y8` as create tableupdates on vRs}.vRs} = create tableupdates.vRs} and vRs}.vRs} = create tableupdates.vRs}", stringBuilder0);
      NameSpec nameSpec1 = NameSpec.IF_REPRODUCIBLE;
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[1] = null;
      SQLUtil.join((String) null, (String) null, stringArray0, stringArray0[1], "&Z4W%(dA", stringArray0);
      // Undeclared exception!
      try { 
        SQLUtil.renderQuery((DBTable) null, stringArray0, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      // Undeclared exception!
      try { 
        SQLUtil.constraintSpec((DBConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      String[] stringArray0 = new String[2];
      String string0 = SQLUtil.leftJoin("vRs}", stringArray0, "<~GM|R|Y8`", "create tableupdates", stringArray0);
      assertEquals("left join <~GM|R|Y8` as create tableupdates on vRs}.null = create tableupdates.null and vRs}.null = create tableupdates.null", string0);
      
      DBSchema dBSchema0 = new DBSchema("drop table");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable(",)kxrIwRl6NG,Cj0L", dBSchema0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("<~GM|R|Y8`", false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      String string1 = SQLUtil.constraintSpec(dBForeignKeyConstraint0, nameSpec0);
      assertEquals("FOREIGN KEY (, ) REFERENCES ,)kxrIwRl6NG,Cj0L(, )", string1);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("bY+SOl");
      String[] stringArray0 = new String[3];
      stringArray0[2] = "bY+SOl";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "bY+SOl", true, stringArray0);
      dBUniqueConstraint0.setOwner(defaultDBTable0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      SQLUtil.ukSpec(dBUniqueConstraint0, nameSpec0);
      SQLUtil.constraintSpec(dBUniqueConstraint0, nameSpec0);
      boolean boolean0 = true;
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesStructure("sHz;?aUh/+?@kEp?x");
      assertFalse(boolean0);
      
      DBSchema dBSchema0 = new DBSchema((String) null);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("xsUSI[X66~", dBSchema0);
      String[] stringArray0 = new String[6];
      stringArray0[5] = "sHz;?aUh/+?@kEp?x";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "create unique index", true, stringArray0);
      String string0 = SQLUtil.ownerDotComponent(defaultDBTable0);
      assertEquals("null.xsUSI[X66~", string0);
      
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      String string1 = SQLUtil.constraintSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("CONSTRAINT \"create unique index\" PRIMARY KEY (, , , , , sHz;?aUh/+?@kEp?x)", string1);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      // Undeclared exception!
      SQLUtil.isQuery("/*");
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      String string0 = "exec";
      SQLUtil.mutatesStructure("exec");
      int int0 = (-931);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      SQLUtil.mutatesDataOrStructure("_$C_cFa0Z9|.!");
      SQLUtil.mutatesDataOrStructure("select into$1]");
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("alter session");
      assertNotNull(boolean0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      String string0 = "create table$1]";
      SQLUtil.mutatesDataOrStructure("create table$1]");
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      SQLUtil.typeAndName((DBObject) null);
      Character character0 = new Character('b');
      String string0 = SQLUtil.renderValue(character0);
      assertEquals("'b'", string0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      DBDataType dBDataType0 = DBDataType.getInstance(3087, "NCLOB");
      Integer integer0 = RawTransaction.ABORT;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("&Z4W%(dA", (DBTable) null, dBDataType0, integer0, integer0);
      String string0 = SQLUtil.renderColumn(defaultDBColumn0);
      assertEquals("&Z4W%(dA NCLOB NULL", string0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn((String) null, defaultDBTable0, 122, "X0X0F.S");
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      defaultDBColumn0.setSize(integer0);
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "9uK = '9uK' AND 9uK = '9uK' AND  NOT NULL = ' NOT NULL' AND 9uK = '9uK' AND 9uK = '9uK' AND 9uK = '9uK' AND 9uK = '9uK' AND 9uK = '9uK' AND 9uK = '9uK'");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Random.setNextRandom((-1840913075));
      LinkedList<DBColumn> linkedList0 = new LinkedList<DBColumn>();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("call", (DBSchema) null);
      Integer integer0 = new Integer((-1840913075));
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("2SS_'5x*S>y#KH", defaultDBTable0, (DBDataType) null, integer0, integer0);
      linkedList0.add((DBColumn) defaultDBColumn0);
      String string0 = SQLUtil.renderColumnNames((List<DBColumn>) linkedList0);
      assertEquals("2SS_'5x*S>y#KH", string0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      DBColumn[] dBColumnArray0 = new DBColumn[5];
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBDataType dBDataType0 = DBDataType.getInstance(3930, "updateTime");
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("updateTime", defaultDBTable0, dBDataType0, integer0);
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("update", defaultDBTable0, dBDataType0);
      dBColumnArray0[1] = (DBColumn) defaultDBColumn1;
      DefaultDBColumn defaultDBColumn2 = new DefaultDBColumn("update", defaultDBTable0, 3930, "callah");
      dBColumnArray0[2] = (DBColumn) defaultDBColumn2;
      DefaultDBColumn defaultDBColumn3 = new DefaultDBColumn("u).YG(`a>7oo7:\"L", defaultDBTable0, dBDataType0, integer0);
      dBColumnArray0[3] = (DBColumn) defaultDBColumn3;
      DefaultDBColumn defaultDBColumn4 = new DefaultDBColumn("updateTime", defaultDBTable0, dBDataType0);
      dBColumnArray0[4] = (DBColumn) defaultDBColumn4;
      String string0 = SQLUtil.renderColumnNames(dBColumnArray0);
      assertEquals("updateTime, update, update, u).YG(`a>7oo7:\"L, updateTime", string0);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      NameSpec nameSpec0 = NameSpec.NEVER;
      DataStore dataStore0 = new DataStore("in best sort avoida");
      VirtualFile virtualFile0 = new VirtualFile("in best sort avoida", dataStore0);
      OutputStream outputStream0 = virtualFile0.getOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(outputStream0, true);
      SQLUtil.renderCreateTable(defaultDBTable0, false, nameSpec0, mockPrintWriter0);
      assertEquals("table", defaultDBTable0.getObjectType());
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema("n%+zP");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("n%+zP", dBSchema0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      RowOutputTextQuoted rowOutputTextQuoted0 = new RowOutputTextQuoted("ZJX6'vw9QN", "n%+zP", "ZJX6'vw9QN", false, "n%+zP");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(rowOutputTextQuoted0, true);
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, mockPrintWriter0);
      assertEquals(21, rowOutputTextQuoted0.size());
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      int int0 = 2009;
      DefaultDBColumn defaultDBColumn0 = null;
      try {
        defaultDBColumn0 = new DefaultDBColumn("L{^_Ym/:,<\"noc3MV<", (DBTable) null, 2009, "updateNCharacterStream(int, Reader, long)");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"int\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      String string0 = ":/(I";
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize(":/(I");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal column type format: :/(I
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("()");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema("BLOBGETPOSITIONFROMBYTES", (DBCatalog) null);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("BLOBGETPOSITIONFROMBYTES", dBSchema0);
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("BLOBGETPOSITIONFROMBYTES", true, defaultDBTable0, "BLOBGETPOSITIONFROMBYTES");
      NameSpec nameSpec0 = NameSpec.NEVER;
      String string0 = SQLUtil.constraintSpec(dBCheckConstraint0, nameSpec0);
      assertEquals("CHECK BLOBGETPOSITIONFROMBYTES", string0);
      
      boolean boolean0 = SQLUtil.isProcedureCall("org.apache.derby.impl.store.access.btree.WaitError");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[8] = "9uK";
      SQLUtil.innerJoin("9uK", stringArray0, "9uK", "9uK", stringArray0);
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "9uK = '9uK' AND 9uK = '9uK' AND  NOT NULL = ' NOT NULL' AND 9uK = '9uK' AND 9uK = '9uK' AND 9uK = '9uK' AND 9uK = '9uK' AND 9uK = '9uK' AND 9uK = '9uK'");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      String string0 = "truncateexecalter session";
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("truncateexecalter session");
      int int0 = (-524);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("truncateexecalter session", defaultDBTable0, (-524), "truncateexecalter session");
      defaultDBTable0.addColumn(defaultDBColumn0);
      DBNotNullConstraint dBNotNullConstraint0 = new DBNotNullConstraint(defaultDBTable0, "truncateexecalter session", false, "truncateexecalter session");
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.constraintSpec(dBNotNullConstraint0, nameSpec0);
      NameSpec nameSpec1 = NameSpec.IF_REPRODUCIBLE;
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema("BLOBGETPOSITIONFROMBYTES", (DBCatalog) null);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("BLOBGETPOSITIONFROMBYTES", dBSchema0);
      defaultDBTable0.getComponents();
      String[] stringArray0 = new String[5];
      stringArray0[4] = "CHECK BLOBGETPOSITIONFROMBYTES";
      SQLUtil.renderQuery(defaultDBTable0, stringArray0, stringArray0);
      Object object0 = new Object();
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      String string0 = SQLUtil.substituteMarkers(",v\"z\"~HM", "'P7/ '", ",v\"z\"~HM");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[0];
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint(",v\"z\"~HM", false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(". ]|PvdxFs^L:$8b");
      PrintWriter printWriter0 = mockPrintWriter0.format((Locale) null, ",v\"z\"~HM", (Object[]) stringArray0);
      SQLUtil.renderAddForeignKey(dBForeignKeyConstraint0, nameSpec0, printWriter0);
      String string1 = SQLUtil.renderWhereClause(stringArray0, stringArray0);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      SQLUtil sQLUtil0 = new SQLUtil();
  }
}
