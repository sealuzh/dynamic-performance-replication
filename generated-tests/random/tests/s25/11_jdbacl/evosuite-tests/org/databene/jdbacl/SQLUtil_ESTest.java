/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 23 10:26:38 GMT 2019
 */

package org.databene.jdbacl;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedOutputStream;
import java.io.File;
import java.io.OutputStream;
import java.io.PipedOutputStream;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.PrintWriter;
import java.io.Reader;
import java.io.StreamTokenizer;
import java.io.StringWriter;
import java.util.ArrayList;
import java.util.List;
import org.apache.derby.iapi.services.context.ContextService;
import org.apache.derby.iapi.sql.dictionary.ConstraintDescriptorList;
import org.apache.derby.iapi.sql.dictionary.SchemaDescriptor;
import org.apache.derby.iapi.sql.dictionary.TableDescriptor;
import org.apache.derby.iapi.store.raw.xact.RawTransaction;
import org.apache.derby.impl.io.vfmem.DataStore;
import org.apache.derby.impl.io.vfmem.VirtualFile;
import org.apache.derby.impl.services.uuid.BasicUUID;
import org.apache.derby.impl.sql.catalog.DataDictionaryImpl;
import org.databene.commons.AssertionError;
import org.databene.commons.version.VersionNumber;
import org.databene.jdbacl.NameSpec;
import org.databene.jdbacl.SQLUtil;
import org.databene.jdbacl.model.CompositeDBObject;
import org.databene.jdbacl.model.DBCatalog;
import org.databene.jdbacl.model.DBCheckConstraint;
import org.databene.jdbacl.model.DBColumn;
import org.databene.jdbacl.model.DBConstraint;
import org.databene.jdbacl.model.DBDataType;
import org.databene.jdbacl.model.DBForeignKeyConstraint;
import org.databene.jdbacl.model.DBNotNullConstraint;
import org.databene.jdbacl.model.DBObject;
import org.databene.jdbacl.model.DBPrimaryKeyConstraint;
import org.databene.jdbacl.model.DBSchema;
import org.databene.jdbacl.model.DBTable;
import org.databene.jdbacl.model.DBTrigger;
import org.databene.jdbacl.model.DBUniqueConstraint;
import org.databene.jdbacl.model.DBUniqueIndex;
import org.databene.jdbacl.model.Database;
import org.databene.jdbacl.model.DefaultDBColumn;
import org.databene.jdbacl.model.DefaultDBTable;
import org.databene.jdbacl.model.DefaultDatabase;
import org.databene.jdbacl.model.TableContainer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteLocalAddress;
import org.evosuite.runtime.testdata.EvoSuiteRemoteAddress;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.firebirdsql.jca.FBManagedConnectionFactory;
import org.h2.engine.SessionRemote;
import org.h2.jdbcx.JdbcConnectionPool;
import org.h2.value.ValueLobDb;
import org.hsqldb.lib.FileUtil;
import org.hsqldb.rowio.RowInputText;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SQLUtil_ESTest extends SQLUtil_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SQLUtil.substituteMarkers("inner", "inner", "inner");
      StringBuilder stringBuilder0 = new StringBuilder("inner");
      StringBuilder stringBuilder1 = stringBuilder0.append(0.0F);
      SQLUtil.addOptionalCondition("inner", stringBuilder1);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "inner";
      stringArray0[1] = "getCharacterStream(int)";
      stringArray0[2] = null;
      stringArray0[3] = null;
      stringArray0[4] = "PM@Z)";
      stringArray0[5] = "inner";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, (String) null, true, stringArray0);
      dBPrimaryKeyConstraint0.setDoc((String) null);
      SQLUtil.renderValue(dBPrimaryKeyConstraint0);
      Random.setNextRandom((-1));
      SQLUtil.leftJoin("org.apache.derby.impl.services.cache.ConcurrentCache", stringArray0, "org.apache.derby.impl.services.cache.ConcurrentCache", "org.apache.derby.impl.services.cache.ConcurrentCache", stringArray0);
      SQLUtil.appendConstraintName((DBConstraint) dBPrimaryKeyConstraint0, stringBuilder1);
      SQLUtil.appendConstraintName((DBConstraint) dBPrimaryKeyConstraint0, stringBuilder0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      DataStore dataStore0 = new DataStore("'inner'");
      VirtualFile virtualFile0 = new VirtualFile("org.apache.derby.impl.services.cache.ConcurrentCache", dataStore0);
      OutputStream outputStream0 = virtualFile0.getOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(outputStream0, true);
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, mockPrintWriter0);
      assertEquals("table", defaultDBTable0.getObjectType());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable((String) null);
      String[] stringArray0 = new String[0];
      String[] stringArray1 = new String[0];
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, (String) null, false, stringArray1);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex((String) null, false, dBUniqueConstraint0);
      defaultDBTable0.addIndex(dBUniqueIndex0);
      DBSchema dBSchema0 = new DBSchema((String) null);
      dBSchema0.getTable((String) null);
      defaultDBTable0.addReferrer((DBTable) null);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint((String) null, false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.createConstraintSpecBuilder(dBForeignKeyConstraint0, nameSpec0);
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "drop table", true, stringArray0);
      dBPrimaryKeyConstraint0.setName("alter tablegzjq4\"zq");
      DBUniqueIndex dBUniqueIndex1 = new DBUniqueIndex("drop table", true, dBPrimaryKeyConstraint0);
      defaultDBTable0.removeIndex(dBUniqueIndex1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(":6z)![N^V>44UA");
      SQLUtil.renderCreateTable(defaultDBTable0, false, nameSpec0, mockPrintWriter0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint1 = defaultDBTable0.getPrimaryKeyConstraint();
      dBPrimaryKeyConstraint1.addColumnName((String) null);
      dBPrimaryKeyConstraint1.isIdentical((DBObject) null);
      SQLUtil.pkSpec(dBPrimaryKeyConstraint1, nameSpec0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      StreamTokenizer streamTokenizer0 = null;
      try {
        streamTokenizer0 = new StreamTokenizer((Reader) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StreamTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBDataType dBDataType0 = DBDataType.getInstance("DATE");
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      Integer.compare(1003, 1003);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("DATE", defaultDBTable0, dBDataType0, integer0);
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      // Undeclared exception!
      try { 
        defaultDBTable0.getUniqueConstraint("{Z ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.model.DefaultDBTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      DBSchema dBSchema0 = new DBSchema("drop materialized view");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("drop materialized view", dBSchema0);
      DBDataType dBDataType0 = DBDataType.getInstance((-242), "6/[4q#(1x:vP");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("drop materialized view", defaultDBTable0, dBDataType0, (Integer) null);
      defaultDBColumn0.setDefaultValue("E^IN(SAvV$Y");
      SQLUtil.renderColumn(defaultDBColumn0);
      SQLUtil.parseColumnTypeAndSize("q/kF|N0h`{Bbg]-A");
      String[] stringArray0 = new String[6];
      stringArray0[0] = "drop materialized view 6/[4Q#(1X:VP DEFAULT E^IN(SAvV$Y NULL";
      stringArray0[1] = "drop materialized view 6/[4Q#(1X:VP DEFAULT E^IN(SAvV$Y NULL";
      stringArray0[2] = "drop materialized view";
      stringArray0[3] = "Illegal column type format: ";
      stringArray0[4] = "drop materialized view";
      stringArray0[5] = "drop materialized view";
      Object[] objectArray0 = new Object[4];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) defaultDBTable0;
      objectArray0[2] = (Object) "drop materialized view";
      objectArray0[3] = (Object) dBDataType0;
      // Undeclared exception!
      try { 
        SQLUtil.renderQuery(defaultDBTable0, stringArray0, objectArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String string0 = "*/";
      SQLUtil.normalize("*/", true);
      FileSystemHandling.shouldAllThrowIOExceptions();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      // Undeclared exception!
      try { 
        defaultDBTable0.getUniqueConstraint("*/");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.model.DefaultDBTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String string0 = "/*";
      NetworkHandling.sendMessageOnTcp((EvoSuiteLocalAddress) null, "/*");
      Random.setNextRandom(821);
      SQLUtil.normalize("/*", false);
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("execute", 16);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      Random.setNextRandom(821);
      SQLUtil.isQuery("H2 Close Delay ");
      SQLUtil.isQuery("deletecreate unique indexcall");
      SQLUtil.removeComments("reuu3MC");
      String string1 = "'; IMN28R";
      DBCheckConstraint dBCheckConstraint0 = null;
      try {
        dBCheckConstraint0 = new DBCheckConstraint("/*", true, "k%'aa4(#<KF;z", "H2 Close Delay ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Error parsing SQL
         //
         verifyException("org.databene.jdbacl.sql.SQLParserUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String string0 = "!<9<<@Ioh@[";
      DBSchema dBSchema0 = new DBSchema("!<9<<@Ioh@[");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable((String) null, dBSchema0);
      DBDataType dBDataType0 = DBDataType.getInstance((-2350), "`{6l-E-:a&");
      Integer integer0 = RawTransaction.COMMIT;
      Integer integer1 = RawTransaction.ABORT;
      Integer.compare((-2350), (-2350));
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("!<9<<@Ioh@[", defaultDBTable0, dBDataType0, integer0, integer1);
      SQLUtil.typeAndName(defaultDBColumn0);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "\u0001\u01F4";
      SQLUtil.join("\u0001\u01F4", "deleteresult_reset", stringArray0, "M!28)Ax}pKp`5S)", "M!28)Ax}pKp`5S)", stringArray0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("drop index1^^j);qg/g.=+gugr", 12345);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      File file0 = FileUtil.canonicalFile("\u0001\u01F4 join M!28)Ax}pKp`5S) as M!28)Ax}pKp`5S) on deleteresult_reset.\u0001\u01F4 = M!28)Ax}pKp`5S).\u0001\u01F4");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      SQLUtil.renderCreateTable(defaultDBTable0, false, nameSpec0, mockPrintWriter0);
      defaultDBTable0.getUniqueConstraint(stringArray0);
      NameSpec nameSpec1 = NameSpec.IF_REPRODUCIBLE;
      // Undeclared exception!
      try { 
        SQLUtil.ukSpec((DBUniqueConstraint) null, nameSpec1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      String string0 = "<$CLK";
      DBCatalog dBCatalog0 = new DBCatalog("W8\"_M0TmiCN");
      DBSchema dBSchema0 = new DBSchema("<$CLK", dBCatalog0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("W8\"_M0TmiCN", dBSchema0);
      String string1 = null;
      String[] stringArray0 = new String[3];
      stringArray0[0] = "<$CLK";
      stringArray0[1] = "W8\"_M0TmiCN";
      stringArray0[2] = "<$CLK";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, (String) null, true, stringArray0);
      SQLUtil.constraintName(dBPrimaryKeyConstraint0);
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "<$CLK");
      StringBuilder stringBuilder1 = SQLUtil.addRequiredCondition("<$CLK", stringBuilder0);
      int int0 = (-1841123533);
      StringBuilder stringBuilder2 = stringBuilder1.append((-1841123533));
      // Undeclared exception!
      try { 
        stringBuilder2.insert((-1841123533), (CharSequence) "<$CLK");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -1841123533
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String string0 = "select into";
      SQLUtil.isQuery("select into");
      SQLUtil.isDDL("select into");
      FileSystemHandling.shouldAllThrowIOExceptions();
      SQLUtil.parseColumnTypeAndSize("select into");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      // Undeclared exception!
      try { 
        defaultDBTable0.getUniqueConstraint("select into");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.model.DefaultDBTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String string0 = "\n/* direct lookup */";
      SQLUtil.removeComments("\n/* direct lookup */");
      SQLUtil.mutatesDataOrStructure("\n/* direct lookup */");
      String string1 = "~y!|";
      VersionNumber versionNumber0 = VersionNumber.valueOf("\n/* direct lookup */");
      DefaultDatabase defaultDatabase0 = new DefaultDatabase("\n", "\n/* direct lookup */", versionNumber0);
      DBCatalog dBCatalog0 = new DBCatalog("~y!|", defaultDatabase0);
      // Undeclared exception!
      try { 
        dBCatalog0.getTable("\n/* direct lookup */");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Table '
         // /* direct lookup *_/'
         //
         verifyException("org.databene.jdbacl.model.DBCatalog", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SQLUtil.isDDL("");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("\":,!SOVm#.8].");
      String[] stringArray0 = new String[3];
      defaultDBTable0.getComponents();
      stringArray0[0] = "";
      CompositeDBObject<DBUniqueConstraint> compositeDBObject0 = (CompositeDBObject<DBUniqueConstraint>) mock(CompositeDBObject.class, new ViolatedAssumptionAnswer());
      defaultDBTable0.setOwner(compositeDBObject0);
      stringArray0[1] = "";
      stringArray0[2] = "";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint((String) null, true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      SQLUtil.typeAndName(dBForeignKeyConstraint0);
      SQLUtil.isProcedureCall("");
      SQLUtil.innerJoin("", stringArray0, (String) null, "", stringArray0);
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "");
      char[] charArray0 = new char[9];
      charArray0[0] = '`';
      charArray0[1] = 'u';
      charArray0[2] = 'P';
      charArray0[3] = 'U';
      charArray0[4] = 'P';
      charArray0[5] = 'n';
      charArray0[6] = '&';
      charArray0[7] = '+';
      charArray0[8] = 'K';
      // Undeclared exception!
      try { 
        stringBuilder0.append(charArray0, 9, 9);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader(2235);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(pipedReader0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      streamTokenizer0.nval = (-1343.19656);
      SQLUtil.renderNumber(streamTokenizer0);
      DBTable dBTable0 = null;
      NameSpec nameSpec0 = NameSpec.NEVER;
      // Undeclared exception!
      try { 
        SQLUtil.renderCreateTable((DBTable) null, false, nameSpec0, (PrintWriter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0, 335544418);
      pipedWriter0.write("\nFROM ");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(pipedReader0);
      streamTokenizer0.nval = (double) 335544418;
      String string0 = SQLUtil.renderNumber(streamTokenizer0);
      assertEquals("335544418", string0);
      
      SQLUtil.mutatesStructure("U0E}LA07j");
      Random.setNextRandom(3);
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("ys8^[WlTTv");
      assertNull(boolean0);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "U0E}LA07j";
      String string1 = SQLUtil.join((String) null, "r^gUD-}r-=,", stringArray0, "truncate", (String) null, stringArray0);
      assertEquals("truncate as null on r^gUD-}r-=,.U0E}LA07j = null.U0E}LA07j", string1);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      String string0 = " REFERENCES ";
      SQLUtil.isQuery(" REFERENCES ");
      DBSchema dBSchema0 = new DBSchema(" REFERENCES ");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable(" REFERENCES ", dBSchema0);
      String[] stringArray0 = new String[1];
      NetworkHandling.sendMessageOnTcp((EvoSuiteLocalAddress) null, " REFERENCES ");
      dBSchema0.isIdentical(defaultDBTable0);
      stringArray0[0] = " REFERENCES ";
      dBSchema0.getTriggers();
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, " REFERENCES ", false, stringArray0);
      dBUniqueConstraint0.isIdentical(defaultDBTable0);
      dBUniqueConstraint0.isIdentical(defaultDBTable0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      SQLUtil.createConstraintSpecBuilder(dBUniqueConstraint0, nameSpec0);
      dBSchema0.setOwner(defaultDBTable0);
      SQLUtil.renderColumnNames(stringArray0);
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("( REFERENCES )");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"REFERENCES\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "select into}yr8ewd,ef?o");
      String[] stringArray0 = new String[3];
      stringArray0[0] = "select into}yr8ewd,ef?o";
      stringArray0[1] = "select into}yr8ewd,ef?o";
      stringArray0[2] = "select into}yr8ewd,ef?o";
      SQLUtil.renderColumnNames(stringArray0);
      int int0 = (-1978);
      Random.setNextRandom((-1978));
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("(select into}yr8ewd,ef?o, select into}yr8ewd,ef?o, select into}yr8ewd,ef?o)");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"select into}yr8ewd\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("t~bA#^=)2|NpnTBJq");
      String[] stringArray0 = new String[8];
      stringArray0[0] = "t~bA#^=)2|NpnTBJq";
      stringArray0[1] = "t~bA#^=)2|NpnTBJq";
      stringArray0[2] = "t~bA#^=)2|NpnTBJq";
      stringArray0[3] = "t~bA#^=)2|NpnTBJq";
      stringArray0[4] = "t~bA#^=)2|NpnTBJq";
      stringArray0[5] = "t~bA#^=)2|NpnTBJq";
      stringArray0[6] = "t~bA#^=)2|NpnTBJq";
      stringArray0[7] = "t~bA#^=)2|NpnTBJq";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "t~bA#^=)2|NpnTBJq", true, stringArray0);
      // Undeclared exception!
      try { 
        SQLUtil.appendConstraintName((DBConstraint) dBPrimaryKeyConstraint0, (StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)45;
      byteArray0[1] = (byte)97;
      byteArray0[2] = (byte)0;
      NetworkHandling.sendDataOnTcp((EvoSuiteLocalAddress) null, byteArray0);
      String string0 = SQLUtil.substituteMarkers("E&r'nWP/>['+0Be&", "drop tableno", "E&r'nWP/>['+0Be&");
      Boolean boolean0 = SQLUtil.mutatesStructure("E&r'nWP/>['+0Be&");
      assertFalse(boolean0);
      
      ArrayList<DBColumn> arrayList0 = new ArrayList<DBColumn>();
      DBSchema dBSchema0 = new DBSchema("E&r'nWP/>['+0Be&", (DBCatalog) null);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("E&r'nWP/>['+0Be&", dBSchema0);
      DBDataType dBDataType0 = DBDataType.getInstance((int) (byte)45, "E&r'nWP/>['+0Be&");
      Integer integer0 = new Integer((byte)45);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("E&r'nWP/>['+0Be&", defaultDBTable0, dBDataType0, integer0, integer0);
      arrayList0.add((DBColumn) defaultDBColumn0);
      String string1 = SQLUtil.renderColumnNames((List<DBColumn>) arrayList0);
      assertTrue(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader(2235);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(pipedReader0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      streamTokenizer0.nval = 1892.08069;
      String string0 = SQLUtil.renderNumber(streamTokenizer0);
      assertEquals("1892.08069", string0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      DBSchema dBSchema0 = new DBSchema("2t-~t\"A#q?m19#0{x");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable((String) null, dBSchema0);
      defaultDBTable0.countProviders();
      String string0 = ")ue%F\\.$c>,";
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("$AxO_U~<i", defaultDBTable0, 38, ")ue%F.$c>,");
      defaultDBColumn0.setNullable(false);
      SQLUtil.renderColumn(defaultDBColumn0);
      SQLUtil.isDDL("$AxO_U~<i");
      String[] stringArray0 = null;
      // Undeclared exception!
      try { 
        SQLUtil.renderQuery(defaultDBTable0, (String[]) null, (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DBCatalog dBCatalog0 = new DBCatalog();
      DBSchema dBSchema0 = new DBSchema("drop materialized view", dBCatalog0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("l*<Or`{JsyYd+qH&,", dBSchema0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String[] stringArray0 = new String[3];
      stringArray0[0] = "l*<Or`{JsyYd+qH&,";
      stringArray0[1] = "drop materialized view";
      stringArray0[2] = "drop materialized view";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "drop materialized view", true, stringArray0);
      defaultDBTable0.setPrimaryKey(dBPrimaryKeyConstraint0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("7lBBA");
      PrintWriter printWriter0 = mockPrintWriter0.append('^');
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, printWriter0);
      assertEquals("l*<Or`{JsyYd+qH&,", defaultDBTable0.getName());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      NameSpec nameSpec0 = NameSpec.NEVER;
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(pipedOutputStream0);
      bufferedOutputStream0.write(256);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(bufferedOutputStream0, true);
      SQLUtil.renderCreateTable(defaultDBTable0, false, nameSpec0, mockPrintWriter0);
      SQLUtil.typeAndName(defaultDBTable0);
      SQLUtil.ownerDotComponent(defaultDBTable0);
      SQLUtil sQLUtil0 = new SQLUtil();
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("Fu6wE;yN1[~b(-e");
      DBDataType dBDataType0 = DBDataType.getInstance((-2209), " REFERENCES ");
      Integer integer0 = RawTransaction.ABORT;
      FBManagedConnectionFactory fBManagedConnectionFactory0 = new FBManagedConnectionFactory();
      Integer integer1 = fBManagedConnectionFactory0.getTransactionIsolation();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn((String) null, defaultDBTable0, dBDataType0, integer0, integer1);
      String string0 = SQLUtil.renderColumn(defaultDBColumn0);
      assertEquals("null  REFERENCES (1,2) NULL", string0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      DBCatalog dBCatalog0 = new DBCatalog("call");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      SQLUtil.ownerDotComponent(dBCatalog0);
      SQLUtil.mutatesStructure("call");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("call");
      String[] stringArray0 = new String[0];
      defaultDBTable0.getUniqueConstraint(stringArray0);
      String string0 = SQLUtil.typeAndName((DBObject) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "alter index");
      String string0 = SQLUtil.renderColumnNames((String[]) null);
      assertEquals("()", string0);
      
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("()", false, "~0GufL", "autoincStart");
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      String string1 = SQLUtil.constraintSpec(dBCheckConstraint0, nameSpec0);
      assertEquals("CONSTRAINT () CHECK autoincStart", string1);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      SQLUtil.isQuery("zWlf\"zto9> mTl:L");
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      System.setCurrentTimeMillis(0L);
      SQLUtil.parseColumnTypeAndSize("zWlf\"zto9> mTl:L");
      SQLUtil.normalize("zWlf\"zto9> mTl:L", false);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("zWlf\"zto9> mTl:L", (DBSchema) null);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "zWlf\"zto9> mTl:L";
      stringArray0[1] = "zWlf \"zto9> mTl:L\"";
      defaultDBTable0.getUniqueConstraint(stringArray0);
      DBNotNullConstraint dBNotNullConstraint0 = null;
      try {
        dBNotNullConstraint0 = new DBNotNullConstraint(defaultDBTable0, "zWlf\"zto9> mTl:L", false, "zWlf \"zto9> mTl:L\"");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Column 'zWlf \"zto9> mTl:L\"' not found in table 'zWlf\"zto9> mTl:L'
         //
         verifyException("org.databene.jdbacl.model.DefaultDBTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      NameSpec nameSpec0 = NameSpec.NEVER;
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(pipedOutputStream0);
      bufferedOutputStream0.write(256);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(bufferedOutputStream0, false);
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, mockPrintWriter0);
      String string0 = SQLUtil.typeAndName(defaultDBTable0);
      assertNotNull(string0);
      assertEquals("table null", string0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      String string0 = "TABLE_DETAILS";
      SQLUtil.parseColumnTypeAndSize("TABLE_DETAILS");
      String string1 = "selectqtwrvh`%";
      SQLUtil.isDML("selectqtwrvh`%");
      SQLUtil.mutatesDataOrStructure("selectqtwrvh`%");
      DBCheckConstraint dBCheckConstraint0 = null;
      try {
        dBCheckConstraint0 = new DBCheckConstraint("selectqtwrvh`%", false, "org.firebirdsql.jdbc.FBProcedureCall", "org.firebirdsql.jdbc.FBProcedureCall");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Error parsing SQL
         //
         verifyException("org.databene.jdbacl.sql.SQLParserUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[0];
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "g+rRwaE[`O,4pvciAZm", false, stringArray0);
      dBPrimaryKeyConstraint0.toString();
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("g+rRwaE[`O,4pvciAZm", false, dBPrimaryKeyConstraint0);
      SQLUtil.ownerDotComponent(dBUniqueIndex0);
      SQLUtil.constraintName(dBPrimaryKeyConstraint0);
      Character character0 = new Character('l');
      dBPrimaryKeyConstraint0.equals(character0);
      SQLUtil.isQuery("g+rRwaE[`O,4pvciAZm");
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.constraintSpec(dBPrimaryKeyConstraint0, nameSpec0);
      SQLUtil sQLUtil0 = new SQLUtil();
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      NameSpec nameSpec0 = NameSpec.NEVER;
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(pipedOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(bufferedOutputStream0, false);
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, mockPrintWriter0);
      assertNull(defaultDBTable0.getName());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("sDcnRu", defaultDBTable0, (DBDataType) null, integer0);
      defaultDBColumn0.getForeignKeyConstraint();
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      JdbcConnectionPool jdbcConnectionPool0 = JdbcConnectionPool.create("sDcnRu", "sDcnRu", "jJ9f");
      jdbcConnectionPool0.getLogWriter();
      // Undeclared exception!
      try { 
        SQLUtil.renderAddForeignKey((DBForeignKeyConstraint) null, nameSpec0, (PrintWriter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      String string0 = SQLUtil.normalize("db/6TEqj#M", false);
      assertEquals("db / 6TEqj # M", string0);
      
      String[] stringArray0 = new String[0];
      SQLUtil.renderWhereClause(stringArray0, stringArray0);
      String string1 = SQLUtil.leftJoin((String) null, stringArray0, "db/6TEqj#M", "", stringArray0);
      assertEquals("left join db/6TEqj#M as  on ", string1);
      
      RowInputText rowInputText0 = new RowInputText("left join db/6TEqj#M as  on ", "db / 6TEqj # M", "db / 6TEqj # M", false);
      SessionRemote sessionRemote0 = new SessionRemote();
      ValueLobDb valueLobDb0 = ValueLobDb.createTempBlob(rowInputText0, 15L, sessionRemote0);
      ValueLobDb valueLobDb1 = valueLobDb0.copyToTemp();
      Reader reader0 = valueLobDb1.getReader();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(reader0);
      String string2 = SQLUtil.renderNumber(streamTokenizer0);
      assertEquals("- 0", string2);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      DBColumn[] dBColumnArray0 = new DBColumn[3];
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBDataType dBDataType0 = DBDataType.getInstance(2090, "~,h-VAFu1DK&IXM$Qw");
      Integer integer0 = RawTransaction.COMMIT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("inner", defaultDBTable0, dBDataType0, integer0);
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("~,h-VAFu1DK&IXM$Qw", defaultDBTable0, dBDataType0, integer0);
      dBColumnArray0[1] = (DBColumn) defaultDBColumn1;
      DefaultDBColumn defaultDBColumn2 = new DefaultDBColumn("~,h-VAFu1DK&IXM$Qw", defaultDBTable0, dBDataType0, integer0, integer0);
      dBColumnArray0[2] = (DBColumn) defaultDBColumn2;
      String string0 = SQLUtil.renderColumnNames(dBColumnArray0);
      assertEquals("inner, ~,h-VAFu1DK&IXM$Qw, ~,h-VAFu1DK&IXM$Qw", string0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("/**/");
      assertNull(boolean0);
      
      SQLUtil.isQuery("/**/");
      SQLUtil.renderValue("/**/");
      String[] stringArray0 = new String[7];
      stringArray0[0] = "/**/";
      stringArray0[1] = "/**/";
      stringArray0[2] = "'/**/'";
      stringArray0[3] = "/**/";
      stringArray0[4] = "'/**/'";
      stringArray0[5] = "alter tableexecute";
      stringArray0[6] = "'/**/'";
      String string0 = SQLUtil.renderWhereClause(stringArray0, stringArray0);
      assertEquals("/**/ = '/**/' AND /**/ = '/**/' AND '/**/' = ''/**/'' AND /**/ = '/**/' AND '/**/' = ''/**/'' AND alter tableexecute = 'alter tableexecute' AND '/**/' = ''/**/''", string0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      SQLUtil.typeAndName((DBObject) null);
      // Undeclared exception!
      try { 
        SQLUtil.isDDL((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      System.setCurrentTimeMillis(2326L);
      String string0 = "drop tablenot";
      SQLUtil.mutatesDataOrStructure("drop tablenot");
      String string1 = "insertnot";
      SQLUtil.mutatesDataOrStructure("insertnot");
      StringBuilder stringBuilder0 = new StringBuilder();
      int int0 = 70;
      // Undeclared exception!
      try { 
        stringBuilder0.insert(70, (float) 70);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 70
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "execute";
      stringArray0[1] = "execute";
      stringArray0[2] = "execute";
      stringArray0[3] = "execute";
      stringArray0[4] = "execute";
      stringArray0[5] = "execute";
      stringArray0[6] = "execute";
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-68);
      byteArray0[1] = (byte)77;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      stringArray0[7] = "@U{McV;C:U!Ql8-'u/O";
      stringArray0[8] = ")";
      SQLUtil.join("execute", "execute", stringArray0, ")", "@\")9", stringArray0);
      String string0 = "(+/H\\7g4SKV4f7njV";
      SQLUtil.isDML("(+/H\u0007g4SKV4f7njV");
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("(+/H\u0007g4SKV4f7njV");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal column type format: (+/H\u0007g4SKV4f7njV
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      SQLUtil sQLUtil0 = new SQLUtil();
      SQLUtil.normalize("n;';,86s`8xkPYL", true);
      DBSchema dBSchema0 = new DBSchema("ovV7U3)e");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("ovV7U3)e", dBSchema0);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "ovV7U3)e";
      stringArray0[1] = "ovV7U3)e";
      stringArray0[2] = "ovV7U3)e";
      stringArray0[3] = "ovV7U3)e";
      stringArray0[4] = "ovV7U3)e";
      stringArray0[5] = "ovV7U3)e";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("ovV7U3)e", true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      dBForeignKeyConstraint0.toString();
      // Undeclared exception!
      try { 
        dBForeignKeyConstraint0.columnReferencedBy("+.U)/%H");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // foreign key 'ovV7U3)e' does not have a column '+.U)/%H'
         //
         verifyException("org.databene.jdbacl.model.DBForeignKeyConstraint", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "Not closed";
      stringArray0[1] = "$m#2ST";
      stringArray0[2] = "$m#2ST";
      stringArray0[3] = "$m#2ST";
      stringArray0[4] = "$m#2ST";
      stringArray0[5] = "C]\"WFeGN()\"gv";
      stringArray0[6] = "$m#2ST";
      stringArray0[7] = "$m#2ST";
      stringArray0[8] = "X0X60.S";
      SQLUtil.renderColumnListWithTableName("$m#2ST", stringArray0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("select intoselectqtwrvh`%");
      DBDataType dBDataType0 = DBDataType.getInstance(375, "X0X60.S");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("XCL16.S", defaultDBTable0, dBDataType0);
      SQLUtil.renderColumn(defaultDBColumn0);
      SQLUtil.mutatesStructure("$m#2ST");
      SQLUtil.isDDL("\u0001\u014D");
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      // Undeclared exception!
      try { 
        SQLUtil.appendConstraintName((DBConstraint) null, (StringBuilder) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("execute");
      String[] stringArray0 = new String[1];
      stringArray0[0] = ")lVXa]6[tvN@hSH=o+D";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "deleteodvd[uf+zfum", false, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex((String) null, true, dBPrimaryKeyConstraint0);
      DBTable dBTable0 = dBUniqueIndex0.getTable();
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint((String) null, true, dBTable0, stringArray0, defaultDBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      StringBuilder stringBuilder0 = SQLUtil.appendConstraintName((DBConstraint) dBForeignKeyConstraint0, (StringBuilder) null, nameSpec0);
      assertNull(stringBuilder0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "iW";
      stringArray0[1] = "readStatusVector arg:isc_arg_gds int: ";
      stringArray0[2] = "iW";
      FileSystemHandling.shouldAllThrowIOExceptions();
      stringArray0[3] = "iW";
      stringArray0[4] = "";
      stringArray0[5] = "iW";
      stringArray0[6] = "iW";
      stringArray0[7] = "iW";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "iW", true, stringArray0);
      dBUniqueConstraint0.setOwner(defaultDBTable0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.ukSpec(dBUniqueConstraint0, nameSpec0);
      System.setCurrentTimeMillis((-2518L));
      StringBuilder stringBuilder0 = new StringBuilder(65);
      StringBuilder stringBuilder1 = SQLUtil.addOptionalCondition(">]'`c]^eq_@GXJI4Lb", stringBuilder0);
      char[] charArray0 = new char[0];
      int int0 = 57;
      int int1 = 13;
      // Undeclared exception!
      try { 
        stringBuilder1.append(charArray0, 57, 13);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      String string0 = "C*sI";
      String string1 = "q^=\"?N";
      Character character0 = new Character('e');
      Character.compare('e', 's');
      SQLUtil.substituteMarkers("C*sI", "q^=\"?N", character0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("C*sI");
      String[] stringArray0 = new String[0];
      // Undeclared exception!
      try { 
        defaultDBTable0.getForeignKeyConstraint(stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Table 'C*sI' has no foreign key with the columns ()
         //
         verifyException("org.databene.jdbacl.model.DefaultDBTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      SQLUtil.normalize("execute", true);
      SQLUtil.isProcedureCall("execute");
      ArrayList<DBColumn> arrayList0 = new ArrayList<DBColumn>();
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((List<DBColumn>) arrayList0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "S]Zo*G21&";
      stringArray0[1] = "create table";
      stringArray0[2] = "create table";
      stringArray0[3] = "S]Zo*G21&";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "S]Zo*G21&", false, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("create table", false, dBUniqueConstraint0);
      DBTable dBTable0 = dBUniqueIndex0.getTable();
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(dBTable0, "create table", false, stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      SQLUtil.pkSpec(dBPrimaryKeyConstraint0, nameSpec0);
      SQLUtil.isQuery("~7<\"0");
      SQLUtil.isQuery("GE");
      SQLUtil.renderValue("GE");
      StringBuilder stringBuilder0 = SQLUtil.createConstraintSpecBuilder(dBUniqueConstraint0, nameSpec0);
      StringBuilder stringBuilder1 = SQLUtil.addRequiredCondition("truncate`gbtn[~&", stringBuilder0);
      StringBuilder stringBuilder2 = stringBuilder1.append('f');
      int int0 = 65547;
      // Undeclared exception!
      try { 
        stringBuilder2.append((CharSequence) "PRIMARY KEY (S]Zo*G21&, create table, create table, S]Zo*G21&)", 65547, 6);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // start 65547, end 6, s.length() 62
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      String string0 = "FBuqsd62-dN";
      FileSystemHandling.shouldAllThrowIOExceptions();
      DBSchema dBSchema0 = new DBSchema("alter indexvp4gibo~x_chshh");
      DBTrigger dBTrigger0 = new DBTrigger("alter indexvp4gibo~x_chshh", dBSchema0);
      dBSchema0.addTrigger(dBTrigger0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("SQL", dBSchema0);
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint(" NOT NULL", true, defaultDBTable0, (String[]) null, defaultDBTable0, (String[]) null);
      SQLUtil.substituteMarkers("FBuqsd62-dN", "FBuqsd62-dN", dBForeignKeyConstraint0);
      SQLUtil.mutatesStructure("select null as TABLE_CAT,  null as TABLE_SCHEM, RDB$RELATION_NAME as TABLE_NAME, RDB$GRANTOR as GRANTOR,  RDB$USER as GRANTEE,  RDB$PRIVILEGE as PRIVILEGE,  RDB$GRANT_OPTION as IS_GRANTABLE from RDB$USER_PRIVILEGES where ");
      SQLUtil.constraintName(dBForeignKeyConstraint0);
      SQLUtil sQLUtil0 = new SQLUtil();
      String string1 = "UaHmn?Wur";
      int int0 = 1152;
      StringBuilder stringBuilder0 = new StringBuilder(1152);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      StringBuilder stringBuilder1 = SQLUtil.appendConstraintName((DBConstraint) dBForeignKeyConstraint0, stringBuilder0, nameSpec0);
      int int1 = 90;
      // Undeclared exception!
      try { 
        stringBuilder1.insert(90, (CharSequence) "select null as TABLE_CAT,  null as TABLE_SCHEM, RDB$RELATION_NAME as TABLE_NAME, RDB$GRANTOR as GRANTOR,  RDB$USER as GRANTEE,  RDB$PRIVILEGE as PRIVILEGE,  RDB$GRANT_OPTION as IS_GRANTABLE from RDB$USER_PRIVILEGES where ");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 90
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      DBCatalog dBCatalog0 = new DBCatalog("|/2D_");
      DBSchema dBSchema0 = new DBSchema("-^rfVd>1iET[XHO", dBCatalog0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("|/2D_", dBSchema0);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "-^rfVd>1iET[XHO";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "-^rfVd>1iET[XHO", true, stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      dBPrimaryKeyConstraint0.setDoc("^~4_WfeC2v:.");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      StringBuilder stringBuilder0 = SQLUtil.createConstraintSpecBuilder(dBPrimaryKeyConstraint0, nameSpec0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      StringBuilder stringBuilder1 = SQLUtil.appendConstraintName((DBConstraint) dBPrimaryKeyConstraint0, stringBuilder0, nameSpec0);
      assertEquals("", stringBuilder1.toString());
      
      String[] stringArray1 = new String[2];
      stringArray1[0] = "|/2D_";
      stringArray1[1] = "|/2D_";
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)16;
      byteArray0[1] = (byte) (-36);
      byteArray0[2] = (byte)23;
      byteArray0[3] = (byte)25;
      byteArray0[4] = (byte)87;
      byteArray0[5] = (byte)77;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      String string0 = SQLUtil.leftJoin("-^rfVd>1iET[XHO", stringArray1, "%_:]r|v%g hh|dn0", " NOT", stringArray1);
      assertEquals("left join %_:]r|v%g hh|dn0 as  NOT on -^rfVd>1iET[XHO.|/2D_ =  NOT.|/2D_ and -^rfVd>1iET[XHO.|/2D_ =  NOT.|/2D_", string0);
      
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("|/2D_", defaultDBTable0, 1680, " NOT");
      String string1 = SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      assertEquals(" NOT", string1);
      
      String string2 = SQLUtil.ownerDotComponent(dBPrimaryKeyConstraint0);
      assertEquals("|/2D_.-^rfVd>1iET[XHO", string2);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "create table");
      SQLUtil.isQuery("`DEQgI\"^PL@h-G");
      String string0 = ":<-_u#a%,";
      TableContainer tableContainer0 = new TableContainer(":<-_u#a%,");
      tableContainer0.setName("callq^+");
      SQLUtil.ownerDotComponent(tableContainer0);
      String[] stringArray0 = new String[3];
      stringArray0[0] = ":<-_u#a%,";
      stringArray0[1] = "`DEQgI\"^PL@h-G";
      stringArray0[2] = ":<-_u#a%,";
      SQLUtil.leftJoin("create table", stringArray0, ":<-_u#a%,", "callq^+", stringArray0);
      SQLUtil.renderWhereClause(stringArray0, stringArray0);
      String string1 = "drop materialized viewe=wwkb";
      DataDictionaryImpl dataDictionaryImpl0 = new DataDictionaryImpl();
      BasicUUID basicUUID0 = new BasicUUID("1fKdf'V+g");
      // Undeclared exception!
      try { 
        dataDictionaryImpl0.getForeignKeys(basicUUID0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.derby.impl.sql.catalog.DataDictionaryImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = null;
      stringArray0[1] = null;
      stringArray0[2] = null;
      String string0 = SQLUtil.join((String) null, (String) null, stringArray0, "deletedelete!vh* _)-)>", "M.q}wOV?S9", stringArray0);
      assertEquals("deletedelete!vh* _)-)> as M.q}wOV?S9 on null.null = M.q}wOV?S9.null and null.null = M.q}wOV?S9.null and null.null = M.q}wOV?S9.null", string0);
      
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, " = ", true, stringArray0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      SQLUtil.pkSpec(dBPrimaryKeyConstraint0, nameSpec0);
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) " = ");
      int int0 = 9;
      // Undeclared exception!
      try { 
        stringBuilder0.insert(9, true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 9
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "3d1N}GUm.fNT";
      stringArray0[1] = "update";
      stringArray0[2] = " ADD ";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "ZV25}li", false, stringArray0);
      defaultDBTable0.removeUniqueConstraint(dBUniqueConstraint0);
      stringArray0[3] = "n|dF[;VJ!5'1jVDw";
      stringArray0[4] = "=,cu";
      DBUniqueConstraint dBUniqueConstraint1 = defaultDBTable0.getUniqueConstraint(stringArray0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      String string0 = SQLUtil.constraintSpec(dBUniqueConstraint1, nameSpec0);
      assertEquals("CONSTRAINT ZV25}li UNIQUE (3d1N}GUm.fNT, update,  ADD , n|dF[;VJ!5'1jVDw, =,cu)", string0);
      
      boolean boolean0 = SQLUtil.isDML(" ADD ");
      assertFalse(boolean0);
      
      NameSpec nameSpec1 = NameSpec.NEVER;
      StringBuilder stringBuilder0 = SQLUtil.createConstraintSpecBuilder(dBUniqueConstraint1, nameSpec1);
      NameSpec nameSpec2 = NameSpec.IF_REPRODUCIBLE;
      StringBuilder stringBuilder1 = SQLUtil.appendConstraintName((DBConstraint) dBUniqueConstraint1, stringBuilder0, nameSpec2);
      assertEquals("", stringBuilder1.toString());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      SQLUtil.normalize("fd%.W&(k~", true);
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(pipedReader0);
      SQLUtil.renderNumber(streamTokenizer0);
      VersionNumber versionNumber0 = VersionNumber.valueOf("select into`gbtn[~&");
      DefaultDatabase defaultDatabase0 = new DefaultDatabase("`gbtn[~&", "N4lzEfe.Nne(bY{", versionNumber0);
      DBCatalog dBCatalog0 = new DBCatalog("N4lzEfe.Nne(bY{", defaultDatabase0);
      dBCatalog0.getTable((String) null, false);
      String[] stringArray0 = new String[1];
      stringArray0[0] = null;
      DBForeignKeyConstraint dBForeignKeyConstraint0 = null;
      try {
        dBForeignKeyConstraint0 = new DBForeignKeyConstraint((String) null, true, (DBTable) null, stringArray0, (DBTable) null, stringArray0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // refereeTable is not supposed to be null
         //
         verifyException("org.databene.commons.Assert", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      SQLUtil.mutatesDataOrStructure(" or ");
      String string0 = "%_:]r|V%g Hh|dn0";
      SQLUtil.mutatesStructure("%_:]r|V%g Hh|dn0");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      boolean boolean0 = true;
      String[] stringArray0 = new String[1];
      stringArray0[0] = "H?qQjV24Jo";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "h;u", true, stringArray0);
      int int0 = 3;
      StringBuilder stringBuilder0 = new StringBuilder(3);
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "H?qQjV24Jo", false, stringArray0);
      // Undeclared exception!
      try { 
        stringBuilder0.insert((-3814), (Object) dBUniqueConstraint0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -3814
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      String string0 = SQLUtil.normalize("@=rT.QU^7g[>mp{RcKq", false);
      assertEquals("@ = rT.QU ^ 7g [ > mp { RcKq", string0);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "@=rT.QU^7g[>mp{RcKq";
      stringArray0[1] = "#=a9sWVaYPD7Vac";
      stringArray0[2] = "Z73.jrIVkGq";
      stringArray0[3] = "#=a9sWVaYPD7Vac";
      String string1 = SQLUtil.renderColumnListWithTableName("#=a9sWVaYPD7Vac", stringArray0);
      assertEquals("#=a9sWVaYPD7Vac.@=rT.QU^7g[>mp{RcKq, #=a9sWVaYPD7Vac.#=a9sWVaYPD7Vac, #=a9sWVaYPD7Vac.Z73.jrIVkGq, #=a9sWVaYPD7Vac.#=a9sWVaYPD7Vac", string1);
      
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String string2 = SQLUtil.renderQuery(defaultDBTable0, stringArray0, stringArray0);
      assertEquals("SELECT * FROM null WHERE @=rT.QU^7g[>mp{RcKq = '@=rT.QU^7g[>mp{RcKq' AND #=a9sWVaYPD7Vac = '#=a9sWVaYPD7Vac' AND Z73.jrIVkGq = 'Z73.jrIVkGq' AND #=a9sWVaYPD7Vac = '#=a9sWVaYPD7Vac'", string2);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      System.setCurrentTimeMillis(2586L);
      String string0 = "pke.oZX-^_YR";
      SQLUtil.isDDL("pke.oZX-^_YR");
      SQLUtil.normalize("pke.oZX-^_YR", false);
      System.setCurrentTimeMillis(2586L);
      // Undeclared exception!
      try { 
        SQLUtil.ownerDotComponent((DBObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      String string0 = "`gbTN[~&";
      SQLUtil.mutatesDataOrStructure("`gbTN[~&");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "`gbTN[~&";
      stringArray0[1] = "`gbTN[~&";
      stringArray0[2] = "`gbTN[~&";
      // Undeclared exception!
      try { 
        defaultDBTable0.getForeignKeyConstraint(stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Table 'null' has no foreign key with the columns (`gbTN[~&, `gbTN[~&, `gbTN[~&)
         //
         verifyException("org.databene.jdbacl.model.DefaultDBTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = null;
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      // Undeclared exception!
      try { 
        SQLUtil.pkSpec((DBPrimaryKeyConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      SQLUtil.mutatesDataOrStructure("drop index");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "drop index";
      stringArray0[1] = "drop index";
      stringArray0[2] = "K.M<Dl{^'";
      stringArray0[3] = "drop index";
      stringArray0[4] = "drop index";
      stringArray0[5] = "drop index";
      stringArray0[6] = "drop index";
      // Undeclared exception!
      try { 
        defaultDBTable0.getForeignKeyConstraint(stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Table 'null' has no foreign key with the columns (drop index, drop index, K.M<Dl{^', drop index, drop index, drop index, drop index)
         //
         verifyException("org.databene.jdbacl.model.DefaultDBTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      SQLUtil.mutatesStructure("fs&DSqJ?$");
      String[] stringArray0 = new String[0];
      SQLUtil.join("fs&DSqJ?$", "fs&DSqJ?$", stringArray0, "fs&DSqJ?$", (String) null, stringArray0);
      String string0 = "E";
      String string1 = "H5mM";
      StringBuilder stringBuilder0 = new StringBuilder("insertdelete!vh* _)-)>");
      StringBuilder stringBuilder1 = SQLUtil.addRequiredCondition("h{Ih;QKH)62i[6", stringBuilder0);
      StringBuilder stringBuilder2 = SQLUtil.addOptionalCondition("H5mM", stringBuilder1);
      StringBuilder stringBuilder3 = stringBuilder2.append(')');
      StringBuilder stringBuilder4 = stringBuilder3.insert(42, (CharSequence) stringBuilder0);
      stringBuilder4.append((CharSequence) "fs&DSqJ?$");
      StringBuilder stringBuilder5 = stringBuilder4.append(42);
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        stringBuilder5.insert(2521, charArray0, 42, 42);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 2521
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      SQLUtil.isDDL("delete!vh* _)-)>");
      boolean boolean0 = SQLUtil.isDML("delete!vh* _)-)>");
      boolean boolean1 = SQLUtil.isDDL("delete!vh* _)-)>");
      assertFalse(boolean1 == boolean0);
      
      String[] stringArray0 = new String[7];
      stringArray0[0] = "22O3k}aeb0oYJBbxZD";
      stringArray0[1] = "delete!vh* _)-)>";
      stringArray0[2] = "delete!vh* _)-)>";
      stringArray0[3] = "22O3k}aeb0oYJBbxZD";
      stringArray0[4] = "22O3k}aeb0oYJBbxZD";
      stringArray0[5] = "x QDZ[";
      stringArray0[6] = null;
      String string0 = SQLUtil.join("22O3k}aeb0oYJBbxZD", (String) null, stringArray0, "81L S=Xyr,LxJ", "delete!vh* _)-)>", stringArray0);
      assertEquals("22O3k}aeb0oYJBbxZD join 81L S=Xyr,LxJ as delete!vh* _)-)> on null.22O3k}aeb0oYJBbxZD = delete!vh* _)-)>.22O3k}aeb0oYJBbxZD and null.delete!vh* _)-)> = delete!vh* _)-)>.delete!vh* _)-)> and null.delete!vh* _)-)> = delete!vh* _)-)>.delete!vh* _)-)> and null.22O3k}aeb0oYJBbxZD = delete!vh* _)-)>.22O3k}aeb0oYJBbxZD and null.22O3k}aeb0oYJBbxZD = delete!vh* _)-)>.22O3k}aeb0oYJBbxZD and null.x QDZ[ = delete!vh* _)-)>.x QDZ[ and null.null = delete!vh* _)-)>.null", string0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      SQLUtil sQLUtil0 = new SQLUtil();
      String string0 = "l?y*YeK10tOfRr";
      String string1 = "l\\f2]j7[lG39LGkP@";
      SQLUtil.substituteMarkers("l?y*YeK10tOfRr", "l\f2]j7[lG39LGkP@", sQLUtil0);
      boolean boolean0 = false;
      TableContainer tableContainer0 = new TableContainer("l\f2]j7[lG39LGkP@");
      // Undeclared exception!
      try { 
        tableContainer0.getCatalog();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.model.TableContainer", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      SQLUtil.parseColumnTypeAndSize("create unique index");
      String string0 = "\"xrY5\\g2AoM^dXq";
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "\"xrY5g2AoM^dXq");
      StringBuilder stringBuilder1 = SQLUtil.addRequiredCondition("create unique index", stringBuilder0);
      // Undeclared exception!
      try { 
        stringBuilder1.insert(575, 0.0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 575
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "~}";
      stringArray0[1] = "!vh* _)-)>";
      stringArray0[2] = "!vh* _)-)>";
      String string0 = "D}?M%DxxI)n.\\";
      SQLUtil.innerJoin("!vh* _)-)>", stringArray0, "!vh* _)-)>", "D}?M%DxxI)n.", stringArray0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("!vh* _)-)> as D}?M%DxxI)n. on !vh* _)-)>.~} = D}?M%DxxI)n..~} and !vh* _)-)>.!vh* _)-)> = D}?M%DxxI)n..!vh* _)-)> and !vh* _)-)>.!vh* _)-)> = D}?M%DxxI)n..!vh* _)-)>");
      // Undeclared exception!
      try { 
        defaultDBTable0.getColumn("!vh* _)-)>");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Column '!vh* _)-)>' not found in table '!vh* _)-)> as D}?M%DxxI)n. on !vh* _)-)>.~} = D}?M%DxxI)n..~} and !vh* _)-)>.!vh* _)-)> = D}?M%DxxI)n..!vh* _)-)> and !vh* _)-)>.!vh* _)-)> = D}?M%DxxI)n..!vh* _)-)>'
         //
         verifyException("org.databene.jdbacl.model.DefaultDBTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      SQLUtil.isQuery("wP69<&$2:F$o*m#I");
      SQLUtil.removeComments("wP69<&$2:F$o*m#I");
      SQLUtil.normalize("!vh* _)-", false);
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((List<DBColumn>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      DBConstraint dBConstraint0 = null;
      NameSpec nameSpec0 = NameSpec.NEVER;
      // Undeclared exception!
      try { 
        SQLUtil.constraintSpec((DBConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn((String) null, defaultDBTable0, 45, "RowInputBase ");
      StringBuilder stringBuilder0 = new StringBuilder(45);
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0, stringBuilder0);
      assertEquals("ROWINPUTBASE ", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      String string0 = SQLUtil.normalize("BWT?4DA", false);
      assertEquals("BWT ? 4DA", string0);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      String string0 = "O=v*?KkT9P1JLvaeSU";
      SQLUtil.isQuery("O=v*?KkT9P1JLvaeSU");
      String string1 = "SAayEV?";
      String string2 = "kUs&BfjZK:}f4;V%k";
      VersionNumber versionNumber0 = null;
      try {
        versionNumber0 = new VersionNumber((List<Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.commons.version.VersionNumber", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      String string0 = null;
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      String string0 = "!Vh* _)-)>";
      SQLUtil.isDML("!Vh* _)-)>");
      boolean boolean0 = true;
      String string1 = "";
      DBCatalog dBCatalog0 = new DBCatalog("", (Database) null);
      dBCatalog0.getSequences();
      DBSchema dBSchema0 = new DBSchema("", dBCatalog0);
      String string2 = "";
      dBSchema0.getTable("");
      String[] stringArray0 = null;
      dBSchema0.getSequences(false);
      DBForeignKeyConstraint dBForeignKeyConstraint0 = null;
      try {
        dBForeignKeyConstraint0 = new DBForeignKeyConstraint(" NOT NULL", true, (DBTable) null, (String[]) null, (DBTable) null, (String[]) null);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // refereeTable is not supposed to be null
         //
         verifyException("org.databene.commons.Assert", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "\n]";
      String string0 = SQLUtil.renderColumnNames(stringArray0);
      assertEquals("(\n])", string0);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      String string0 = "^Ozb";
      String string1 = "";
      SQLUtil.substituteMarkers("^Ozb", "", "");
      DBColumn[] dBColumnArray0 = new DBColumn[6];
      String string2 = "x).2q/Rtu";
      String string3 = "*)%h'iruk9";
      String string4 = "?vL]Da}'PO";
      DefaultDatabase defaultDatabase0 = new DefaultDatabase((String) null, "?vL]Da}'PO", (VersionNumber) null);
      // Undeclared exception!
      try { 
        defaultDatabase0.getSchema("x).2q/Rtu");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Table 'null'
         //
         verifyException("org.databene.jdbacl.model.DefaultDatabase", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBDataType dBDataType0 = DBDataType.getInstance(202, "q?zF]}`kVY3zwFJrd");
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("Not implemented: one-phase commit must be issued using the same connection that was used to start it", defaultDBTable0, dBDataType0, integer0);
      StringBuilder stringBuilder0 = new StringBuilder("il[)surA\"@nwCI?");
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0, stringBuilder0);
      boolean boolean0 = false;
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append('\'');
      // Undeclared exception!
      try { 
        stringWriter1.append((CharSequence) stringBuilder0, 202, 202);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 202
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      boolean boolean0 = SQLUtil.isDML(")");
      assertFalse(boolean0);
      
      String[] stringArray0 = new String[9];
      stringArray0[0] = ")";
      stringArray0[1] = "truncate";
      stringArray0[2] = ")";
      stringArray0[3] = ")";
      stringArray0[4] = ")";
      stringArray0[5] = ")";
      stringArray0[6] = ")";
      stringArray0[7] = ")";
      stringArray0[8] = ")";
      String string0 = SQLUtil.leftJoin(")", stringArray0, "insert", ")", stringArray0);
      assertEquals("left join insert as ) on ).) = ).) and ).truncate = ).truncate and ).) = ).) and ).) = ).) and ).) = ).) and ).) = ).) and ).) = ).) and ).) = ).) and ).) = ).)", string0);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("iI|9");
      DBDataType dBDataType0 = DBDataType.getInstance((-250), "&4\"uw");
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("iI|9", defaultDBTable0, dBDataType0, integer0);
      defaultDBColumn0.isEquivalent(defaultDBTable0);
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      String string0 = null;
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn((String) null, defaultDBTable0, (-250), "\u0001\u019C");
      defaultDBColumn1.getForeignKeyConstraint();
      StringBuilder stringBuilder0 = new StringBuilder();
      int int0 = 8;
      // Undeclared exception!
      try { 
        stringBuilder0.insert((-250), 8);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -250
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Object object0 = new Object();
      String string0 = SQLUtil.renderValue(object0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      String string0 = "";
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("");
      String string1 = "?t[w|j[]";
      DBNotNullConstraint dBNotNullConstraint0 = null;
      try {
        dBNotNullConstraint0 = new DBNotNullConstraint(defaultDBTable0, "", false, "?t[w|j[]");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Column '?t[w|j[]' not found in table ''
         //
         verifyException("org.databene.jdbacl.model.DefaultDBTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      System.setCurrentTimeMillis(8589934592L);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "lG2*fSZMx";
      stringArray0[1] = "0wZS7Sn";
      stringArray0[2] = "0wZS7Sn";
      stringArray0[3] = "0wZS7Sn";
      stringArray0[4] = "0wZS7Sn";
      stringArray0[5] = "0wZS7Sn";
      stringArray0[6] = "cOJ[bPZonZGiA7q";
      SQLUtil.leftJoin("0wZS7Sn", stringArray0, "exec", "lG2*fSZMx", stringArray0);
      boolean boolean0 = true;
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      ConstraintDescriptorList constraintDescriptorList0 = new ConstraintDescriptorList();
      VersionNumber versionNumber0 = new VersionNumber(constraintDescriptorList0);
      DefaultDatabase defaultDatabase0 = new DefaultDatabase("lG2*fSZMx", "0wZS7Sn", versionNumber0);
      defaultDatabase0.getCatalog("0wZS7Sn");
      DBSchema dBSchema0 = new DBSchema("lG2*fSZMx", (DBCatalog) null);
      defaultDBTable0.setSchema(dBSchema0);
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("eK!", true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      dBForeignKeyConstraint0.setTable(defaultDBTable0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.fkSpec(dBForeignKeyConstraint0, nameSpec0);
      dBForeignKeyConstraint0.setTable(defaultDBTable0);
      SQLUtil.constraintSpec(dBForeignKeyConstraint0, nameSpec0);
      SQLUtil.typeAndName(dBForeignKeyConstraint0);
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((DBColumn[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      String string0 = "alter session";
      SQLUtil.mutatesDataOrStructure("alter session");
      ContextService contextService0 = null;
      try {
        contextService0 = new ContextService();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.derby.iapi.services.monitor.Monitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "3egI";
      stringArray0[1] = " WHERE ";
      stringArray0[2] = "vIg";
      stringArray0[3] = "iX";
      stringArray0[4] = "W51-V,A";
      stringArray0[5] = " WHERE ";
      stringArray0[6] = "alter session";
      stringArray0[7] = "sq;sR}G\"YN*'?a04";
      stringArray0[8] = "IeT`KZ&vH/F}V`k";
      SQLUtil.renderWhereClause(stringArray0, stringArray0);
      DataDictionaryImpl dataDictionaryImpl0 = new DataDictionaryImpl();
      BasicUUID basicUUID0 = new BasicUUID(3688L, 3688L, (-3038));
      SchemaDescriptor schemaDescriptor0 = new SchemaDescriptor(dataDictionaryImpl0, (String) null, "sq;sR}G\"YN*'?a04", basicUUID0, true);
      TableDescriptor tableDescriptor0 = new TableDescriptor(dataDictionaryImpl0, "l>g~4!,f33;BScAtk'&", schemaDescriptor0, (-3038), 'Z');
      // Undeclared exception!
      try { 
        dataDictionaryImpl0.getTriggerDescriptors(tableDescriptor0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.derby.impl.sql.catalog.DataDictionaryImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      SQLUtil.parseColumnTypeAndSize("GIs3x");
      SQLUtil.mutatesStructure("GIs3x");
      String[] stringArray0 = new String[9];
      stringArray0[0] = "5]q:scqih@rx @";
      stringArray0[1] = "GIs3x";
      FileSystemHandling.shouldAllThrowIOExceptions();
      stringArray0[2] = "GIs3x";
      stringArray0[3] = "alter table";
      stringArray0[4] = "GIs3x";
      stringArray0[5] = "GIs3x";
      stringArray0[6] = "GIs3x";
      stringArray0[7] = "GIs3x";
      stringArray0[8] = "GIs3x";
      SQLUtil.renderColumnListWithTableName("GIs3x", stringArray0);
      SQLUtil.normalize("setNull(String,int)", true);
      SQLUtil.join("inner", (String) null, stringArray0, "alter table", "GIs3x", stringArray0);
      SQLUtil.renderColumnNames(stringArray0);
      SQLUtil.removeComments("9&+\n$|wqx04LaZ");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      defaultDBTable0.getUniqueConstraint(stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      // Undeclared exception!
      try { 
        SQLUtil.createConstraintSpecBuilder((DBConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }
}
