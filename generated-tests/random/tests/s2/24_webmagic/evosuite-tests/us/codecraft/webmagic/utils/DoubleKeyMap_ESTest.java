/*
 * This file was automatically generated by EvoSuite
 * Fri Mar 22 10:45:21 GMT 2019
 */

package us.codecraft.webmagic.utils;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.HashMap;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import us.codecraft.webmagic.utils.DoubleKeyMap;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DoubleKeyMap_ESTest extends DoubleKeyMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      HashMap<HashMap<Map<Object, HashMap<Object, Object>>, String>, Map<String, Map<Object, HashMap<Object, Object>>>> hashMap0 = new HashMap<HashMap<Map<Object, HashMap<Object, Object>>, String>, Map<String, Map<Object, HashMap<Object, Object>>>>();
      DoubleKeyMap<HashMap<Map<Object, HashMap<Object, Object>>, String>, String, Map<Object, HashMap<Object, Object>>> doubleKeyMap0 = new DoubleKeyMap<HashMap<Map<Object, HashMap<Object, Object>>, String>, String, Map<Object, HashMap<Object, Object>>>(hashMap0);
      HashMap<Map<Object, HashMap<Object, Object>>, String> hashMap1 = new HashMap<Map<Object, HashMap<Object, Object>>, String>();
      HashMap<Object, HashMap<Object, Object>> hashMap2 = new HashMap<Object, HashMap<Object, Object>>();
      doubleKeyMap0.put(hashMap1, "", (Map<Object, HashMap<Object, Object>>) hashMap2);
      Map<String, Map<Object, HashMap<Object, Object>>> map0 = doubleKeyMap0.remove(hashMap1);
      assertEquals(1, map0.size());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Class<Map> class0 = Map.class;
      HashMap<Object, Map<HashMap<String, String>, Integer>> hashMap0 = new HashMap<Object, Map<HashMap<String, String>, Integer>>();
      DoubleKeyMap<Object, HashMap<String, String>, Integer> doubleKeyMap0 = new DoubleKeyMap<Object, HashMap<String, String>, Integer>(hashMap0);
      Map<String, Map<Object, Integer>> map0 = doubleKeyMap0.newMap();
      DoubleKeyMap<String, Object, Integer> doubleKeyMap1 = new DoubleKeyMap<String, Object, Integer>(map0, class0);
      Integer integer0 = doubleKeyMap1.remove("wrong proto type map ", (Object) doubleKeyMap0);
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DoubleKeyMap<Object, HashMap<Map<Object, HashMap<Object, Object>>, Map<Object, HashMap<Object, Object>>>, Object> doubleKeyMap0 = new DoubleKeyMap<Object, HashMap<Map<Object, HashMap<Object, Object>>, Map<Object, HashMap<Object, Object>>>, Object>();
      HashMap<Map<Object, HashMap<Object, Object>>, Map<Object, HashMap<Object, Object>>> hashMap0 = new HashMap<Map<Object, HashMap<Object, Object>>, Map<Object, HashMap<Object, Object>>>();
      Object object0 = doubleKeyMap0.put((Object) null, hashMap0, (Object) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DoubleKeyMap<Integer, String, String> doubleKeyMap0 = new DoubleKeyMap<Integer, String, String>((Map<Integer, Map<String, String>>) null);
      Integer integer0 = new Integer((-4710));
      Map<String, String> map0 = doubleKeyMap0.get(integer0);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      HashMap<Map<Object, Map<Map<Object, HashMap<Object, Object>>, String>>, Map<HashMap<Object, Object>, Map<Object, HashMap<Object, Object>>>> hashMap0 = new HashMap<Map<Object, Map<Map<Object, HashMap<Object, Object>>, String>>, Map<HashMap<Object, Object>, Map<Object, HashMap<Object, Object>>>>();
      Class<Map> class0 = Map.class;
      HashMap<Integer, Map<Object, Object>> hashMap1 = new HashMap<Integer, Map<Object, Object>>();
      DoubleKeyMap<Integer, Object, Object> doubleKeyMap0 = new DoubleKeyMap<Integer, Object, Object>(hashMap1);
      Integer integer0 = new Integer(0);
      HashMap<Object, Object> hashMap2 = new HashMap<Object, Object>();
      hashMap2.put(integer0, hashMap0);
      hashMap1.put(integer0, hashMap2);
      doubleKeyMap0.remove(integer0, (Object) class0);
      assertEquals(1, hashMap1.size());
      assertFalse(hashMap1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      HashMap<String, Map<HashMap<String, Object>, Object>> hashMap0 = new HashMap<String, Map<HashMap<String, Object>, Object>>();
      DoubleKeyMap<String, HashMap<String, Object>, Object> doubleKeyMap0 = new DoubleKeyMap<String, HashMap<String, Object>, Object>(hashMap0);
      HashMap<HashMap<String, Object>, Object> hashMap1 = new HashMap<HashMap<String, Object>, Object>();
      hashMap0.put("us.codecraft.webmagic.utils.DoubleKeyMap", hashMap1);
      HashMap<String, Object> hashMap2 = new HashMap<String, Object>();
      Object object0 = doubleKeyMap0.put("us.codecraft.webmagic.utils.DoubleKeyMap", hashMap2, (Object) "us.codecraft.webmagic.utils.DoubleKeyMap");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Integer integer0 = new Integer(333);
      DoubleKeyMap<Object, HashMap<Map<Object, HashMap<Object, Object>>, Map<Object, HashMap<Object, Object>>>, Object> doubleKeyMap0 = new DoubleKeyMap<Object, HashMap<Map<Object, HashMap<Object, Object>>, Map<Object, HashMap<Object, Object>>>, Object>();
      DoubleKeyMap<Integer, Object, Object> doubleKeyMap1 = new DoubleKeyMap<Integer, Object, Object>();
      Object object0 = doubleKeyMap1.get(integer0, (Object) doubleKeyMap0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      HashMap<HashMap<Object, Object>, Map<Object, Object>> hashMap0 = new HashMap<HashMap<Object, Object>, Map<Object, Object>>();
      Class<Map> class0 = Map.class;
      HashMap<Object, Object> hashMap1 = new HashMap<Object, Object>();
      hashMap0.put(hashMap1, hashMap1);
      DoubleKeyMap<HashMap<Object, Object>, Object, Object> doubleKeyMap0 = new DoubleKeyMap<HashMap<Object, Object>, Object, Object>(hashMap0, class0);
      Object object0 = doubleKeyMap0.get(hashMap1, (Object) "wrong proto type map ");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DoubleKeyMap<Integer, HashMap<String, Object>, Object> doubleKeyMap0 = new DoubleKeyMap<Integer, HashMap<String, Object>, Object>();
      Integer integer0 = new Integer(333);
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      doubleKeyMap0.put(integer0, hashMap0, (Object) null);
      Object object0 = doubleKeyMap0.remove(integer0, hashMap0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Class<Map> class0 = Map.class;
      DoubleKeyMap<Integer, HashMap<Object, Object>, Integer> doubleKeyMap0 = null;
      try {
        doubleKeyMap0 = new DoubleKeyMap<Integer, HashMap<Object, Object>, Integer>(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DoubleKeyMap<HashMap<Object, Integer>, Object, Map<Object, HashMap<Object, Object>>> doubleKeyMap0 = new DoubleKeyMap<HashMap<Object, Integer>, Object, Map<Object, HashMap<Object, Object>>>();
      Map<Integer, Map<HashMap<String, Map<Object, HashMap<Object, Object>>>, HashMap<Map<Object, HashMap<Object, Object>>, Object>>> map0 = doubleKeyMap0.newMap();
      Class<Map> class0 = Map.class;
      DoubleKeyMap<Integer, HashMap<String, Map<Object, HashMap<Object, Object>>>, HashMap<Map<Object, HashMap<Object, Object>>, Object>> doubleKeyMap1 = new DoubleKeyMap<Integer, HashMap<String, Map<Object, HashMap<Object, Object>>>, HashMap<Map<Object, HashMap<Object, Object>>, Object>>(map0, class0);
      Integer integer0 = new Integer((-943));
      Map<HashMap<String, Map<Object, HashMap<Object, Object>>>, HashMap<Map<Object, HashMap<Object, Object>>, Object>> map1 = doubleKeyMap1.remove(integer0);
      assertNull(map1);
  }
}
