/*
 * This file was automatically generated by EvoSuite
 * Tue Jul 23 12:17:00 GMT 2019
 */

package com.alibaba.fastjson.parser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.alibaba.fastjson.parser.Feature;
import com.alibaba.fastjson.parser.JSONLexer;
import com.alibaba.fastjson.parser.JSONLexerBase;
import com.alibaba.fastjson.parser.JSONReaderScanner;
import com.alibaba.fastjson.parser.JSONScanner;
import com.alibaba.fastjson.parser.SymbolTable;
import java.io.IOException;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.StringReader;
import java.math.BigDecimal;
import java.nio.charset.Charset;
import java.time.ZoneId;
import java.time.chrono.ChronoLocalDate;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashSet;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Set;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.util.MockCalendar;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONLexerBase_ESTest extends JSONLexerBase_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      String string0 = "";
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("");
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("");
      // Undeclared exception!
      try { 
        jSONReaderScanner1.nextTokenWithChar('3');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match 3 - \u0000, info : 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("*^pf", (-166));
      Class<Integer> class0 = Integer.class;
      char[] charArray0 = null;
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFieldStringArray((char[]) null, class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("nw");
      jSONScanner0.scanFloat(';');
      jSONScanner0.scanDecimal('_');
      LinkedList<String> linkedList0 = new LinkedList<String>();
      jSONScanner0.scanStringArray(linkedList0, '1');
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      char[] charArray0 = new char[2];
      charArray0[0] = '_';
      charArray0[1] = ';';
      jSONScanner0.matchField(charArray0);
      long long0 = JSONLexerBase.MULTMIN_RADIX_TEN;
      assertEquals((-922337203685477580L), long0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("e(/S/aQwy");
      jSONScanner0.nextToken(3487);
      jSONScanner0.setToken(3487);
      jSONScanner0.skipComment();
      StringReader stringReader0 = new StringReader("e(/S/aQwy");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0);
      jSONReaderScanner0.info();
      char[] charArray0 = new char[1];
      charArray0[0] = '=';
      jSONReaderScanner0.scanFieldSymbol(charArray0);
      SymbolTable symbolTable0 = null;
      try {
        symbolTable0 = new SymbolTable((-1163));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.SymbolTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      char[] charArray0 = new char[2];
      JSONScanner jSONScanner0 = new JSONScanner("-G");
      // Undeclared exception!
      try { 
        jSONScanner0.longValue();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("1a%3");
      jSONScanner0.longValue();
      jSONScanner0.nextToken(17);
      assertEquals(2, jSONScanner0.token());
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'b';
      charArray0[1] = 't';
      charArray0[2] = 'W';
      charArray0[3] = '*';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 2048, 2893);
      jSONReaderScanner0.isBlankInput();
      jSONReaderScanner0.scanLong('b');
      jSONReaderScanner0.isEOF();
      JSONScanner jSONScanner1 = new JSONScanner("1a%3");
      jSONScanner1.scanDouble('/');
      assertEquals(989, jSONScanner1.getFeatures());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("]");
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("c", 0);
      jSONReaderScanner0.scanFieldSymbol(charArray0);
      jSONReaderScanner0.scanLong('t');
      SymbolTable symbolTable0 = new SymbolTable(45);
      PipedReader pipedReader0 = new PipedReader();
      JSONReaderScanner jSONReaderScanner1 = null;
      try {
        jSONReaderScanner1 = new JSONReaderScanner(pipedReader0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Pipe not connected
         //
         verifyException("com.alibaba.fastjson.parser.JSONReaderScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("'", 5);
      SymbolTable symbolTable0 = new SymbolTable(32);
      // Undeclared exception!
      try { 
        jSONScanner0.scanSymbol(symbolTable0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("nw");
      JSONScanner jSONScanner1 = new JSONScanner("nw", 0);
      char[] charArray0 = new char[0];
      jSONScanner1.scanFieldDouble(charArray0);
      SymbolTable symbolTable0 = null;
      try {
        symbolTable0 = new SymbolTable(0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("7ePP;L4MZU1v7k1LY-");
      jSONReaderScanner0.isEOF();
      jSONReaderScanner0.scanLong('5');
      SymbolTable symbolTable0 = new SymbolTable(2262);
      jSONReaderScanner0.longValue();
      String string0 = "8C";
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("8C", 2262);
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0, 1910);
      PipedWriter pipedWriter1 = null;
      try {
        pipedWriter1 = new PipedWriter(pipedReader0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Already connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("3,WT7Ku17L(");
      char[] charArray0 = new char[0];
      Class<Integer> class0 = Integer.class;
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFieldStringArray(charArray0, class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.Integer
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("scan null error");
      char[] charArray0 = new char[0];
      jSONScanner0.scanSymbolUnQuoted((SymbolTable) null);
      jSONScanner0.isRef();
      jSONScanner0.scanFieldFloat(charArray0);
      jSONScanner0.longValue();
      jSONScanner0.scanFieldDouble(charArray0);
      jSONScanner0.close();
      jSONScanner0.nextToken();
      jSONScanner0.scanIdent();
      jSONScanner0.stringDefaultValue();
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("kx/toOs`iO\"$I {,");
      int int0 = JSONLexer.ARRAY;
      jSONScanner0.stringVal();
      jSONScanner0.nextToken();
      // Undeclared exception!
      try { 
        jSONScanner0.nextToken(2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal state. /
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      int int0 = JSONLexer.ARRAY;
      JSONScanner jSONScanner0 = new JSONScanner("8C)L<>qLvAX@", 2);
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldFloat(charArray0);
      jSONScanner0.scanFieldDouble(charArray0);
      SymbolTable symbolTable0 = null;
      try {
        symbolTable0 = new SymbolTable((-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.SymbolTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("ne");
      jSONScanner0.close();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      linkedHashSet0.add("ne");
      jSONScanner0.scanStringArray(linkedHashSet0, ':');
      jSONScanner0.token();
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("ne", 0);
      jSONScanner0.getTimeZone();
      assertEquals((-1), jSONScanner0.matchStat);
      
      jSONReaderScanner0.scanDate('f');
      assertEquals(0, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("new", 479);
      jSONReaderScanner0.isEOF();
      JSONScanner jSONScanner0 = new JSONScanner("7es|W$`~%", 11);
      jSONScanner0.isEOF();
      // Undeclared exception!
      try { 
        jSONScanner0.scanDecimal('d');
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("Dc`&e}YQn^lmWE");
      long long0 = JSONLexerBase.MULTMIN_RADIX_TEN;
      jSONScanner0.scanNumber();
      // Undeclared exception!
      try { 
        jSONScanner0.decimalValue(true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // empty String, pos 1, json : Dc`&e}YQn^lmWE
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      long long0 = JSONLexerBase.MULTMIN_RADIX_TEN;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("3,WT7Ku17L(");
      jSONReaderScanner0.scanDate('9');
      char[] charArray0 = new char[0];
      jSONReaderScanner0.scanFieldDecimal(charArray0);
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      long long0 = JSONLexerBase.MULTMIN_RADIX_TEN;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("n,WT7Ku^7L(");
      char[] charArray0 = new char[0];
      JSONScanner jSONScanner0 = new JSONScanner("n,WT7Ku^7L(");
      jSONScanner0.scanFieldUUID(charArray0);
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      StringReader stringReader0 = new StringReader("q8");
      StringReader stringReader1 = new StringReader("q8");
      stringReader1.reset();
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0, 22);
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("q8");
      jSONReaderScanner1.getTimeZone();
      jSONReaderScanner1.scanDate('8');
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanSymbol((SymbolTable) null, '8');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONReaderScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      long long0 = JSONLexerBase.MULTMIN_RADIX_TEN;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("3,WT7Ku17L(");
      JSONScanner jSONScanner0 = new JSONScanner("#");
      char[] charArray0 = new char[7];
      charArray0[0] = 'j';
      charArray0[1] = 't';
      charArray0[2] = '@';
      charArray0[3] = '4';
      charArray0[4] = 'k';
      charArray0[5] = '7';
      charArray0[6] = '.';
      jSONScanner0.scanFieldBigInteger(charArray0);
      jSONScanner0.close();
      jSONScanner0.scanIdent();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.matchField2((char[]) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      StringReader stringReader0 = new StringReader("G&Y_b&=&B");
      JSONScanner jSONScanner0 = new JSONScanner("/G~++/[iw");
      SymbolTable symbolTable0 = new SymbolTable(31);
      // Undeclared exception!
      try { 
        jSONScanner0.scanSymbol(symbolTable0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid comment
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("3a>(i\"?HGDdU");
      char[] charArray0 = new char[5];
      charArray0[0] = 'w';
      charArray0[2] = 'w';
      charArray0[3] = 'w';
      charArray0[4] = 'w';
      JSONScanner jSONScanner1 = new JSONScanner("3a>(i\"?HGDdU");
      jSONScanner1.scanFieldIntArray(charArray0);
      jSONScanner0.nextToken(14);
      SymbolTable symbolTable0 = null;
      try {
        symbolTable0 = new SymbolTable(0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("980");
      char[] charArray0 = new char[0];
      int[] intArray0 = JSONLexerBase.digits;
      jSONScanner0.scanFieldUUID(charArray0);
      jSONScanner0.getCurrent();
      jSONScanner0.scanFieldFloatArray(charArray0);
      assertEquals((-2), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("]");
      jSONScanner0.scanNumber();
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldDouble(charArray0);
      jSONScanner0.close();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      jSONScanner0.token();
      jSONScanner0.scanIdent();
      // Undeclared exception!
      try { 
        jSONScanner0.close();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      StringReader stringReader0 = new StringReader("q8");
      SymbolTable symbolTable0 = new SymbolTable(22);
      JSONScanner jSONScanner0 = new JSONScanner("}KUuF", 22);
      SymbolTable symbolTable1 = new SymbolTable(22);
      jSONScanner0.scanSymbolWithSeperator(symbolTable1, 'H');
      jSONScanner0.scanBoolean('#');
      jSONScanner0.nextToken(12);
      assertEquals('K', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("treset");
      jSONScanner0.skipWhitespace();
      jSONScanner0.longValue();
      jSONScanner0.close();
      jSONScanner0.scanBoolean('k');
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("'Dn");
      jSONScanner0.ch = '-';
      jSONScanner0.close();
      jSONScanner0.scanISO8601DateIfMatch(false);
      jSONScanner0.nextToken();
      // Undeclared exception!
      try { 
        jSONScanner0.scanIdent();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("e");
      jSONScanner0.scanISO8601DateIfMatch();
      jSONScanner0.scanString('w');
      jSONScanner0.scanBoolean('w');
      jSONScanner0.nextToken((-1014));
      jSONScanner0.matchStat();
      jSONScanner0.nextToken();
      assertTrue(jSONScanner0.isEOF());
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      long long0 = JSONLexerBase.MULTMIN_RADIX_TEN;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("3,WT7Ku17L(");
      char[] charArray0 = new char[0];
      BigDecimal bigDecimal0 = new BigDecimal((long) 0);
      JSONScanner jSONScanner0 = new JSONScanner("3,WT7Ku17L(");
      jSONScanner0.scanFieldDecimal(charArray0);
      jSONScanner0.bytesValue();
      jSONScanner0.charArrayCompare(charArray0);
      assertEquals(3, jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'd';
      char[] charArray1 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("[D*TQ4");
      jSONReaderScanner0.scanFieldInt(charArray1);
      assertEquals((-1), jSONReaderScanner0.matchStat());
      
      JSONScanner jSONScanner0 = new JSONScanner("a8H3");
      jSONScanner0.nextToken((-1));
      JSONScanner jSONScanner1 = new JSONScanner(charArray1, 0);
      jSONScanner1.matchStat();
      jSONScanner1.nextToken();
      assertEquals(989, jSONScanner1.getFeatures());
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("m(<c");
      jSONScanner0.skipWhitespace();
      jSONScanner0.nextToken(1);
      SymbolTable symbolTable0 = new SymbolTable(116);
      SymbolTable symbolTable1 = new SymbolTable(1);
      jSONScanner0.nextToken();
      assertEquals(10, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      char[] charArray0 = new char[0];
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      JSONScanner jSONScanner0 = new JSONScanner("vD,n1_^><7PQi3q&1\"", 1945);
      jSONScanner0.scanISO8601DateIfMatch();
      Feature feature0 = Feature.AllowComment;
      jSONScanner0.config(feature0, false);
      jSONScanner0.scanStringArray(linkedHashSet0, ')');
      jSONScanner0.nextToken();
      jSONScanner0.charArrayCompare(charArray0);
      JSONLexerBase.isWhitespace('a');
      jSONScanner0.scanFieldLong(charArray0);
      // Undeclared exception!
      try { 
        jSONScanner0.subString(3343, 27);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("apYZ(G{$lnV?");
      StringReader stringReader0 = new StringReader("J|f~3)IDmU6O >{jD=");
      JSONScanner jSONScanner1 = new JSONScanner("\":\"");
      char[] charArray0 = new char[9];
      charArray0[0] = '8';
      charArray0[1] = 'W';
      charArray0[2] = '0';
      charArray0[3] = '6';
      charArray0[4] = 'S';
      charArray0[5] = 'M';
      charArray0[6] = '~';
      charArray0[7] = ']';
      charArray0[8] = '\'';
      jSONScanner0.scanFieldBigInteger(charArray0);
      jSONScanner1.scanString('.');
      jSONScanner1.nextToken();
      assertTrue(jSONScanner1.isEOF());
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      int int0 = JSONLexer.ARRAY;
      JSONScanner jSONScanner0 = new JSONScanner("8C)L<>qLvAX@");
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldFloat(charArray0);
      jSONScanner0.np = (-1627);
      Feature feature0 = Feature.AllowUnQuotedFieldNames;
      jSONScanner0.config(feature0, true);
      jSONScanner0.nextToken();
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 2);
      SymbolTable symbolTable0 = new SymbolTable(15);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanSymbol(symbolTable0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal identifier : \u0000
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("treset");
      jSONScanner0.skipWhitespace();
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("treset");
      char[] charArray0 = new char[1];
      jSONReaderScanner0.scanFieldDecimal(charArray0);
      JSONScanner jSONScanner1 = new JSONScanner("false");
      JSONScanner jSONScanner2 = new JSONScanner("null", 165);
      jSONScanner2.nextToken(0);
      jSONScanner0.matchStat();
      jSONScanner2.nextToken();
      assertEquals(20, jSONScanner2.token());
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONScanner jSONScanner0 = new JSONScanner("980", 1511);
      jSONScanner0.scanFieldInt(charArray0);
      jSONScanner0.scanFieldDouble(charArray0);
      jSONScanner0.close();
      jSONScanner0.nextToken();
      // Undeclared exception!
      try { 
        jSONScanner0.scanIdent();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = '\"';
      charArray0[1] = 'l';
      charArray0[2] = 'i';
      charArray0[3] = ';';
      charArray0[4] = '\"';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 66);
      jSONReaderScanner0.scanFloat(';');
      SymbolTable symbolTable0 = new SymbolTable(1617);
      jSONReaderScanner0.scanFieldBigInteger(charArray0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.doubleValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      int int0 = JSONLexer.ARRAY;
      JSONScanner jSONScanner0 = new JSONScanner("8C)L<>qLvAX@");
      char[] charArray0 = new char[7];
      charArray0[0] = '5';
      charArray0[1] = '5';
      charArray0[2] = '5';
      charArray0[3] = '5';
      charArray0[4] = '5';
      charArray0[5] = '5';
      charArray0[6] = '5';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 4089, 1462);
      jSONReaderScanner0.scanLong('5');
      int int1 = 69;
      SymbolTable symbolTable0 = new SymbolTable(69);
      int int2 = 66;
      SymbolTable symbolTable1 = null;
      try {
        symbolTable1 = new SymbolTable((-1104));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.SymbolTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("scan null error");
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) jSONScanner0;
      Object object0 = new Object();
      objectArray0[1] = object0;
      jSONScanner0.lexError("scan null error", objectArray0);
      SymbolTable symbolTable0 = new SymbolTable(58);
      jSONScanner0.scanSymbol(symbolTable0);
      // Undeclared exception!
      try { 
        jSONScanner0.nextTokenWithColon();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - n, info : pos 5, json : scan null error
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      int int0 = JSONLexer.VALUE;
      JSONScanner jSONScanner0 = new JSONScanner("8C)L<7Qy>qLvAX");
      jSONScanner0.nextToken(3);
      assertEquals(2, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'a';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 665, 665);
      jSONReaderScanner0.scanFieldDate(charArray0);
      Class<ChronoLocalDate> class0 = ChronoLocalDate.class;
      SymbolTable symbolTable0 = new SymbolTable(114);
      jSONReaderScanner0.scanEnum(class0, symbolTable0, 'a');
      jSONReaderScanner0.info();
      jSONReaderScanner0.stringVal();
      char[] charArray1 = new char[6];
      charArray1[0] = 'a';
      charArray1[1] = 'a';
      charArray1[2] = 'a';
      charArray1[3] = 'a';
      charArray1[4] = 'a';
      charArray1[5] = 'a';
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner(charArray1, 2454);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("}KUuF}1:ka.x,%UVy", 5);
      char[] charArray0 = new char[2];
      charArray0[0] = '\'';
      charArray0[1] = 'A';
      jSONScanner0.scanFieldDouble(charArray0);
      jSONScanner0.close();
      jSONScanner0.nextToken();
      jSONScanner0.scanIdent();
      assertEquals(18, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      int int0 = JSONLexer.ARRAY;
      JSONScanner jSONScanner0 = new JSONScanner("8C)L<7Qy>qLvAX", 2);
      jSONScanner0.nextToken();
      jSONScanner0.info();
      assertEquals(2, jSONScanner0.token());
      
      jSONScanner0.doubleValue();
      assertEquals(0, jSONScanner0.pos());
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONScanner jSONScanner0 = new JSONScanner("980");
      jSONScanner0.stringDefaultValue = "980";
      jSONScanner0.scanFieldIntArray(charArray0);
      assertEquals((-2), jSONScanner0.matchStat);
      
      jSONScanner0.scanDecimal('p');
      jSONScanner0.scanFieldUUID(charArray0);
      assertEquals(989, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("new");
      char char0 = 'w';
      jSONScanner0.np = 14;
      jSONScanner0.eofPos = 1555;
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldIntArray(charArray0);
      jSONScanner0.nextToken(0);
      SymbolTable symbolTable0 = null;
      try {
        symbolTable0 = new SymbolTable((-1681));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.SymbolTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      StringReader stringReader0 = new StringReader("q8");
      JSONScanner jSONScanner0 = new JSONScanner("-Mgg/=,d0} (y2irSg");
      jSONScanner0.scanNumber();
      JSONScanner jSONScanner1 = new JSONScanner("YOaD]ejV]1a");
      jSONScanner1.nextToken();
      assertEquals(1, jSONScanner1.token());
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONScanner jSONScanner0 = new JSONScanner("980");
      jSONScanner0.nextIdent();
      jSONScanner0.stringDefaultValue = "980";
      jSONScanner0.scanFieldIntArray(charArray0);
      // Undeclared exception!
      try { 
        jSONScanner0.scanString();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("nw");
      jSONScanner0.longValue();
      char char0 = ';';
      jSONScanner0.scanFloat(';');
      // Undeclared exception!
      try { 
        jSONScanner0.nextToken();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse new
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = 'G';
      charArray0[1] = 'h';
      charArray0[2] = '8';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("{#T?{`", 1823);
      JSONScanner jSONScanner0 = new JSONScanner("{#T?{`", 11);
      jSONScanner0.nextToken();
      assertEquals(12, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      StringReader stringReader0 = new StringReader("t]pyg_#8/W%>N!2>yv");
      JSONScanner jSONScanner0 = new JSONScanner("o", (-1441));
      jSONScanner0.isEnabled(119, (-1441));
      // Undeclared exception!
      try { 
        jSONScanner0.scanString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed string : \u001A
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      StringReader stringReader0 = new StringReader("qe8");
      JSONScanner jSONScanner0 = new JSONScanner("illega str");
      jSONScanner0.nextToken();
      jSONScanner0.scanIdent();
      long long0 = jSONScanner0.longValue();
      assertEquals(18, jSONScanner0.token());
      assertEquals(636585L, long0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      int int0 = JSONLexer.ARRAY;
      JSONScanner jSONScanner0 = new JSONScanner("8C)L<7Qy>qLvAX", 2);
      jSONScanner0.scanDecimal('R');
      JSONScanner jSONScanner1 = new JSONScanner("c++n5B@*", (-3016));
      // Undeclared exception!
      try { 
        jSONScanner1.scanFieldFloatArray2((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("scan null error");
      SymbolTable symbolTable0 = new SymbolTable(31);
      jSONScanner0.scanSymbol(symbolTable0);
      jSONScanner0.scanNumber();
      jSONScanner0.nextToken();
      assertEquals(5, jSONScanner0.pos());
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("supporta@IutotyQe", 7);
      JSONScanner jSONScanner1 = new JSONScanner("supporta@IutotyQe", 7);
      jSONScanner1.scanUUID('Y');
      jSONScanner0.nextToken(7);
      assertEquals('u', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      StringReader stringReader0 = new StringReader("new");
      JSONScanner jSONScanner0 = new JSONScanner("new");
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldBigInteger(charArray0);
      jSONScanner0.nextToken();
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("new", (-1));
      jSONScanner0.nextToken();
      assertEquals(20, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      int int0 = JSONLexer.ARRAY;
      JSONScanner jSONScanner0 = new JSONScanner("8C)L<>qLvAX@");
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldFloat(charArray0);
      Feature feature0 = Feature.AllowUnQuotedFieldNames;
      jSONScanner0.config(feature0, true);
      jSONScanner0.nextToken();
      assertEquals('C', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = '';
      charArray0[1] = '/';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 1730, 1371);
      char char0 = 'M';
      jSONReaderScanner0.sbuf = charArray0;
      jSONReaderScanner0.scanIdent();
      jSONReaderScanner0.scanFieldIntArray(charArray0);
      jSONReaderScanner0.close();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.longValue();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      StringReader stringReader0 = new StringReader("'{qJga?");
      SymbolTable symbolTable0 = new SymbolTable(74);
      JSONScanner jSONScanner0 = new JSONScanner("'{qJga?");
      // Undeclared exception!
      try { 
        jSONScanner0.scanSymbol(symbolTable0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed.str
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("980");
      jSONScanner0.scanFloat('2');
      jSONScanner0.skipWhitespace();
      jSONScanner0.nextToken((-834));
      jSONScanner0.isRef();
      jSONScanner0.lexError((String) null, (Object[]) null);
      assertEquals('\u001A', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      char char0 = '#';
      JSONLexerBase.isWhitespace('#');
      char[] charArray0 = new char[0];
      int int0 = 71;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 71);
      JSONScanner jSONScanner0 = new JSONScanner("_ukeK#km7Tk");
      jSONScanner0.scanLong('t');
      jSONReaderScanner0.info();
      jSONReaderScanner0.sub_chars(71, 71);
      jSONReaderScanner0.scanFieldBigInteger(charArray0);
      jSONReaderScanner0.scanString('1');
      char char1 = '6';
      jSONReaderScanner0.skipWhitespace();
      jSONReaderScanner0.scanDecimal('6');
      // Undeclared exception!
      try { 
        jSONReaderScanner0.decimalValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = '';
      charArray0[1] = 'G';
      charArray0[2] = '\'';
      charArray0[3] = 'G';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 125);
      jSONReaderScanner0.resetStringPosition();
      Feature feature0 = Feature.SupportAutoType;
      jSONReaderScanner0.scanFieldSymbol(charArray0);
      jSONReaderScanner0.scanUUID('');
      jSONReaderScanner0.scanNumber();
      jSONReaderScanner0.scanFieldDouble(charArray0);
      jSONReaderScanner0.config(feature0, true);
      JSONScanner.charArrayCompare("org.springframework.aop.", 125, charArray0);
      char[] charArray1 = new char[5];
      charArray1[0] = 'G';
      charArray1[1] = 'G';
      charArray1[2] = '';
      charArray1[3] = 'G';
      charArray1[4] = 'G';
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner(charArray1, 125, 125);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("fastjson.compatibleWithFieldName");
      int int0 = JSONLexer.ARRAY;
      // Undeclared exception!
      try { 
        jSONScanner0.nextToken(2167);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("scan null error");
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) jSONScanner0;
      Object object0 = new Object();
      objectArray0[1] = object0;
      jSONScanner0.lexError("scan null error", objectArray0);
      SymbolTable symbolTable0 = new SymbolTable(31);
      jSONScanner0.scanSymbol(symbolTable0);
      assertEquals(18, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      int int0 = JSONLexer.ARRAY;
      JSONScanner jSONScanner0 = new JSONScanner("8C)L<>qLvAX@");
      jSONScanner0.nextToken(2);
      SymbolTable symbolTable0 = new SymbolTable(585);
      // Undeclared exception!
      try { 
        jSONScanner0.scanHex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal state. C
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("illegal.char");
      char[] charArray0 = new char[5];
      charArray0[0] = 'K';
      charArray0[1] = '.';
      charArray0[2] = 'h';
      charArray0[3] = '/';
      charArray0[4] = '`';
      SymbolTable symbolTable0 = new SymbolTable(11);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFieldStringArray(charArray0, (-767), symbolTable0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("TL&yjp;|V.");
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldDouble(charArray0);
      PipedReader pipedReader0 = null;
      try {
        pipedReader0 = new PipedReader((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pipe size <= 0
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("scan null error");
      SymbolTable symbolTable0 = new SymbolTable(31);
      jSONScanner0.scanSymbol(symbolTable0);
      jSONScanner0.scanLong('z');
      jSONScanner0.scanInt('z');
      Locale locale0 = Locale.KOREAN;
      jSONScanner0.setLocale(locale0);
      assertEquals(18, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("#){S4j1].a");
      char[] charArray0 = new char[2];
      charArray0[1] = 'A';
      Locale locale0 = Locale.UK;
      jSONScanner0.setLocale(locale0);
      jSONScanner0.scanDecimal('7');
      SymbolTable symbolTable0 = new SymbolTable(121);
      // Undeclared exception!
      try { 
        jSONScanner0.scanSymbol(symbolTable0, 'A');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed.str
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("syntax error :");
      int int0 = JSONLexer.ARRAY;
      jSONScanner0.intValue();
      jSONScanner0.matchStat = 2598;
      jSONScanner0.nextToken(97);
      SymbolTable symbolTable0 = new SymbolTable(764);
      // Undeclared exception!
      try { 
        jSONScanner0.scanHex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal state. y
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("ne");
      char[] charArray0 = new char[0];
      jSONScanner0.matchField2(charArray0);
      long long0 = JSONLexerBase.MULTMIN_RADIX_TEN;
      Class<Object> class0 = Object.class;
      SymbolTable symbolTable0 = new SymbolTable(69);
      jSONScanner0.scanEnum(class0, symbolTable0, 'B');
      jSONScanner0.longValue();
      jSONScanner0.scanFloat('L');
      // Undeclared exception!
      try { 
        jSONScanner0.nextToken();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse new
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      char[] charArray0 = new char[0];
      int int0 = 91;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 91, 560);
      SymbolTable symbolTable0 = new SymbolTable(560);
      // Undeclared exception!
      try { 
        JSONLexerBase.readString(charArray0, 560);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("'32Q");
      jSONScanner0.features = (-1562);
      jSONScanner0.scanInt('{');
      jSONScanner0.isEOF();
      // Undeclared exception!
      try { 
        jSONScanner0.nextToken();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Feature.AllowSingleQuotes is false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("new");
      assertEquals(989, jSONScanner0.getFeatures());
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("new", 0);
      jSONReaderScanner0.skipWhitespace();
      jSONReaderScanner0.scanDouble(';');
      jSONReaderScanner0.bytesValue();
      StringReader stringReader0 = new StringReader("WriteNullNumberAsZero");
      jSONReaderScanner0.isEOF();
      assertEquals(0, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("}KUuF}1:ka.x,%UVy", 5);
      SymbolTable symbolTable0 = new SymbolTable(1349);
      jSONScanner0.scanSymbol(symbolTable0);
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldBigInteger(charArray0);
      jSONScanner0.scanString('2');
      Class<Integer> class0 = Integer.class;
      // Undeclared exception!
      try { 
        jSONScanner0.scanFieldStringArray(charArray0, class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.Integer
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("sc@n null error");
      jSONScanner0.next();
      Object[] objectArray0 = new Object[0];
      jSONScanner0.lexError("sc@n null error", objectArray0);
      assertEquals(0, jSONScanner0.matchStat);
      
      boolean boolean0 = jSONScanner0.scanBoolean('9');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("#){S4j1].a");
      int int0 = JSONLexer.ARRAY;
      jSONScanner0.nextToken(2);
      SymbolTable symbolTable0 = new SymbolTable(764);
      // Undeclared exception!
      try { 
        jSONScanner0.scanHex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal state. )
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("");
      int int0 = 16;
      jSONScanner0.nextToken(16);
      jSONScanner0.isBlankInput();
      // Undeclared exception!
      try { 
        jSONScanner0.floatValue();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("treset");
      char[] charArray0 = new char[8];
      charArray0[0] = 'V';
      charArray0[1] = ' ';
      charArray0[2] = ']';
      charArray0[3] = '^';
      charArray0[4] = 'B';
      charArray0[5] = '@';
      charArray0[6] = 'g';
      charArray0[7] = '&';
      jSONScanner0.matchField(charArray0);
      JSONScanner jSONScanner1 = new JSONScanner(" :\"\"Y5{<^y");
      jSONScanner1.isBlankInput();
      SymbolTable symbolTable0 = new SymbolTable(20);
      jSONScanner0.scanSymbol(symbolTable0);
      jSONScanner0.scanSymbol(symbolTable0);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("zxj", (-1509));
      // Undeclared exception!
      try { 
        jSONReaderScanner0.copyTo(13, 512, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("li}%", 615);
      SymbolTable symbolTable0 = new SymbolTable(34);
      jSONScanner0.scanSymbol(symbolTable0);
      jSONScanner0.scanSymbol(symbolTable0);
      char char0 = JSONLexer.EOI;
      jSONScanner0.skipWhitespace();
      char[] charArray0 = new char[4];
      charArray0[0] = '\u001A';
      charArray0[1] = '\u001A';
      charArray0[2] = '\u001A';
      charArray0[3] = '\u001A';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 34);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.subString(7, (-1380));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -1380
         //
         verifyException("com.alibaba.fastjson.parser.JSONReaderScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      StringReader stringReader0 = new StringReader("new");
      JSONScanner jSONScanner0 = new JSONScanner("/G~++/Ziw");
      jSONScanner0.scanISO8601DateIfMatch();
      // Undeclared exception!
      try { 
        jSONScanner0.nextToken();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid comment
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("dVy%\"nPW");
      // Undeclared exception!
      try { 
        jSONScanner0.nextTokenWithChar('A');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match A - d, info : pos 0, json : dVy%\"nPW
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      StringReader stringReader0 = new StringReader("T4d3n");
      JSONScanner jSONScanner0 = new JSONScanner("%Q7K-{vO^S9o!Po[", (-771));
      jSONScanner0.isRef();
      // Undeclared exception!
      try { 
        jSONScanner0.scanFieldUUID((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("new");
      JSONScanner jSONScanner1 = new JSONScanner("0vv?+j*", (-757));
      jSONScanner0.putChar('c');
      float float0 = jSONScanner1.scanFloat('G');
      assertEquals(0.0F, float0, 0.01F);
      assertEquals((-757), jSONScanner1.getFeatures());
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      StringReader stringReader0 = new StringReader("gs");
      JSONScanner jSONScanner0 = new JSONScanner("T4d3n", (-771));
      jSONScanner0.nextIdent();
      jSONScanner0.isRef();
      char char0 = jSONScanner0.next();
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertEquals('\u001A', char0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("apyz(", 2812);
      SymbolTable symbolTable0 = new SymbolTable(120);
      jSONScanner0.scanSymbol(symbolTable0);
      // Undeclared exception!
      try { 
        jSONScanner0.decimalValue(false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // For input string: \"apyz\", pos 4, json : apyz(
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("t");
      jSONScanner0.scanFloat('d');
      // Undeclared exception!
      try { 
        jSONScanner0.scanTrue();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse true
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("-TFgv^ZGQlu}r", 40);
      jSONScanner0.putChar('\\');
      float float0 = jSONScanner0.scanFloat('\\');
      assertEquals(0.0F, float0, 0.01F);
      assertEquals(40, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("treset");
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        jSONScanner0.matchField(charArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse true
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("scan null Merror");
      jSONScanner0.scanLong('I');
      jSONScanner0.scanString('B');
      jSONScanner0.scanType("^:H[Q(tep$x4J(MpV+");
      assertEquals(0, jSONScanner0.matchStat);
      
      JSONLexerBase.isWhitespace('B');
      char[] charArray0 = new char[0];
      SymbolTable symbolTable0 = new SymbolTable(49);
      jSONScanner0.scanFieldStringArray(charArray0, 4, symbolTable0);
      assertEquals(989, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("`##/X<+h");
      jSONScanner0.np = (-2318);
      long long0 = JSONLexerBase.MULTMIN_RADIX_TEN;
      jSONScanner0.resetStringPosition();
      // Undeclared exception!
      try { 
        jSONScanner0.longValue();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      int int0 = 18;
      JSONScanner jSONScanner0 = new JSONScanner("new", 18);
      jSONScanner0.scanString('W');
      // Undeclared exception!
      try { 
        jSONScanner0.scanString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed string : \u001A
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("`oP7]X>/)C2y`k");
      // Undeclared exception!
      try { 
        jSONScanner0.scanString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed string : \u001A
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("|(U?|rHrd");
      jSONScanner0.resetStringPosition();
      jSONScanner0.scanDouble('6');
      char[] charArray0 = new char[9];
      charArray0[0] = '6';
      charArray0[1] = '6';
      charArray0[2] = '6';
      charArray0[3] = 'I';
      charArray0[4] = '6';
      charArray0[5] = '6';
      charArray0[6] = '6';
      charArray0[7] = 'k';
      charArray0[8] = '6';
      jSONScanner0.scanFieldFloatArray2(charArray0);
      assertEquals((-2), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("EOF error");
      long long0 = JSONLexerBase.MULTMIN_RADIX_TEN;
      jSONScanner0.scanNumber();
      jSONScanner0.nextToken(29);
      SymbolTable symbolTable0 = new SymbolTable(29);
      jSONScanner0.scanSymbol(symbolTable0);
      jSONScanner0.isBlankInput();
      jSONScanner0.next();
      assertEquals(1, jSONScanner0.pos());
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(", ", 120);
      SymbolTable symbolTable0 = new SymbolTable(9999999);
      jSONScanner0.scanSymbol(symbolTable0);
      // Undeclared exception!
      try { 
        jSONScanner0.decimalValue(false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONScanner jSONScanner0 = new JSONScanner("980");
      jSONScanner0.stringDefaultValue = "980";
      jSONScanner0.scanFieldIntArray(charArray0);
      jSONScanner0.scanFloat('P');
      jSONScanner0.nextToken();
      assertEquals('\u001A', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(", ");
      jSONScanner0.scanUUID('Z');
      // Undeclared exception!
      try { 
        jSONScanner0.doubleValue();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("2lionjM{");
      jSONScanner0.nextToken(8);
      long long0 = jSONScanner0.longValue();
      assertEquals('l', jSONScanner0.getCurrent());
      assertEquals(2L, long0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("#){S4j1].a");
      jSONScanner0.scanIdent();
      SymbolTable symbolTable0 = new SymbolTable(1);
      jSONScanner0.nextToken();
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldInt(charArray0);
      assertEquals(11, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      long long0 = JSONLexerBase.MULTMIN_RADIX_TEN;
      int int0 = (-3060);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("3,WT7Ku17L(");
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFieldDecimal(charArray0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      String string0 = "\"";
      JSONScanner jSONScanner0 = new JSONScanner("\"");
      long long0 = JSONLexerBase.MULTMIN_RADIX_TEN;
      // Undeclared exception!
      try { 
        jSONScanner0.nextToken();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed string : \u001A
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("+]fF93r>%+jCB2?YO");
      long long0 = JSONLexerBase.MULTMIN_RADIX_TEN;
      long long1 = jSONScanner0.longValue();
      assertEquals(0L, long1);
      
      boolean boolean0 = jSONScanner0.isEnabled(32, 32);
      assertTrue(boolean0);
      assertEquals(989, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("1");
      char[] charArray0 = new char[4];
      charArray0[0] = '5';
      charArray0[1] = '7';
      charArray0[2] = '(';
      charArray0[3] = 'l';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 162, (-218));
      jSONReaderScanner0.stringVal();
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      jSONReaderScanner0.scanDate('(');
      System.setCurrentTimeMillis(7442624256860549330L);
      jSONReaderScanner0.close();
      assertEquals((-218), jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("");
      jSONScanner0.sp = (-97);
      jSONScanner0.longValue();
      jSONScanner0.nextToken(0);
      jSONScanner0.scanNumber();
      assertEquals(2, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      StringReader stringReader0 = new StringReader("+]fF93r>%+jCB2?YO");
      JSONScanner jSONScanner0 = new JSONScanner("+]fF93r>%+jCB2?YO");
      jSONScanner0.skipWhitespace();
      jSONScanner0.scanFloat('g');
      jSONScanner0.nextToken();
      jSONScanner0.integerValue();
      jSONScanner0.skipWhitespace();
      assertEquals(']', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("#){S4j1].a");
      long long0 = JSONLexerBase.MULTMIN_RADIX_TEN;
      jSONScanner0.nextToken((-315));
      SymbolTable symbolTable0 = new SymbolTable(5);
      // Undeclared exception!
      try { 
        jSONScanner0.scanSymbol(symbolTable0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal identifier : )pos 0, json : #){S4j1].a
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      long long0 = JSONLexerBase.MULTMIN_RADIX_TEN;
      JSONScanner jSONScanner0 = new JSONScanner("1", 2953);
      jSONScanner0.scanNumber();
      jSONScanner0.decimalValue(true);
      char[] charArray0 = new char[8];
      charArray0[1] = '7';
      charArray0[2] = 'E';
      charArray0[1] = 'J';
      charArray0[4] = 'S';
      charArray0[5] = '|';
      charArray0[6] = ':';
      charArray0[7] = '{';
      jSONScanner0.scanFieldDecimal(charArray0);
      JSONScanner jSONScanner1 = null;
      try {
        jSONScanner1 = new JSONScanner(charArray0, 787, 19);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      StringReader stringReader0 = new StringReader("+]fF93r>%+jCB2?YO");
      JSONScanner jSONScanner0 = new JSONScanner("?nits@ringfieldasLmpty");
      jSONScanner0.nextToken(13);
      // Undeclared exception!
      try { 
        jSONScanner0.nextToken(2219);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse new
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      StringReader stringReader0 = new StringReader("H3,OV#7KJHo`i}o2bA");
      JSONScanner jSONScanner0 = new JSONScanner("H3,OV#7KJHo`i}o2bA");
      jSONScanner0.close();
      jSONScanner0.nextToken();
      jSONScanner0.scanDate('c');
      assertEquals(3, jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("x");
      int int0 = 54;
      char char0 = '5';
      jSONScanner0.scanDecimal('5');
      jSONScanner0.scanDate('5');
      // Undeclared exception!
      try { 
        jSONScanner0.scanNullOrNew();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse null or new
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(".6p&O}&");
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      jSONScanner0.scanISO8601DateIfMatch();
      Feature feature0 = Feature.AllowComment;
      jSONScanner0.config(feature0, false);
      jSONScanner0.scanStringArray(linkedHashSet0, 'A');
      jSONScanner0.nextToken();
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = 'V';
      charArray0[1] = 'z';
      charArray0[2] = 'W';
      charArray0[3] = 'H';
      charArray0[4] = 'g';
      charArray0[5] = 'M';
      charArray0[6] = 'q';
      charArray0[7] = 'k';
      charArray0[8] = ' ';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 1666, 56);
      jSONReaderScanner0.stringVal();
      jSONReaderScanner0.putChar('z');
      jSONReaderScanner0.scanDate('X');
      jSONReaderScanner0.scanFieldInt(charArray0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("}n>2{|Ot/vR");
      jSONScanner0.isRef();
      assertEquals(0, jSONScanner0.matchStat);
      
      jSONScanner0.scanDouble('%');
      jSONScanner0.scanFloat('%');
      MockCalendar.getInstance();
      jSONScanner0.putChar('B');
      jSONScanner0.nextToken(892);
      assertEquals(0, jSONScanner0.pos());
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("$", 40);
      jSONScanner0.token = 40;
      SymbolTable symbolTable0 = new SymbolTable(34);
      // Undeclared exception!
      try { 
        jSONScanner0.scanSymbol(symbolTable0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("1");
      jSONScanner0.nextIdent();
      jSONScanner0.skipWhitespace();
      assertEquals(2, jSONScanner0.token());
      
      JSONScanner jSONScanner1 = new JSONScanner("1", 120);
      boolean boolean0 = jSONScanner1.scanBoolean('(');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("x");
      SymbolTable symbolTable0 = new SymbolTable(2223);
      jSONScanner0.scanSymbol(symbolTable0);
      JSONScanner jSONScanner1 = new JSONScanner("false");
      jSONScanner1.scanDecimal('q');
      jSONScanner0.scanDate('X');
      // Undeclared exception!
      try { 
        jSONScanner1.scanNullOrNew();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse null or new
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(":`0d");
      jSONScanner0.scanFloat('o');
      jSONScanner0.nextToken();
      assertEquals('`', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("6jzR");
      jSONScanner0.scanFloat('Y');
      jSONScanner0.nextToken();
      assertEquals('j', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("1a%3");
      jSONScanner0.isEOF();
      jSONScanner0.scanDecimal('d');
      BigDecimal bigDecimal0 = new BigDecimal((-1));
      assertEquals((byte) (-1), bigDecimal0.byteValue());
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("BrowserCompatible");
      char[] charArray0 = new char[1];
      charArray0[0] = 'A';
      jSONReaderScanner0.scanFieldFloat(charArray0);
      Class<Object> class0 = Object.class;
      jSONReaderScanner0.scanFieldStringArray(charArray0, class0);
      jSONReaderScanner0.scanFieldFloatArray2(charArray0);
      jSONReaderScanner0.stringVal();
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner(charArray0, 39, 94);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("apYZ(G{$lnV?", 40);
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      jSONScanner0.scanISO8601DateIfMatch();
      jSONScanner0.scanSymbolUnQuoted((SymbolTable) null);
      assertEquals('(', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("U_'w=");
      jSONScanner0.scanType((String) null);
      // Undeclared exception!
      try { 
        jSONScanner0.numberString();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("x");
      JSONScanner jSONScanner1 = new JSONScanner("x");
      char[] charArray0 = new char[5];
      charArray0[0] = 'X';
      charArray0[1] = '!';
      charArray0[2] = 'I';
      charArray0[3] = 'v';
      charArray0[4] = 'F';
      jSONScanner0.scanFieldDate(charArray0);
      // Undeclared exception!
      try { 
        JSONLexerBase.readString((char[]) null, (-2));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("new", 479);
      jSONReaderScanner0.isEOF();
      jSONReaderScanner0.scanLong('5');
      SymbolTable symbolTable0 = new SymbolTable(479);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanSymbol(symbolTable0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("Qc");
      jSONScanner0.isEOF();
      jSONScanner0.nextToken();
      jSONScanner0.info();
      jSONScanner0.nextToken();
      jSONScanner0.scanLong('A');
      assertEquals('\u001A', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("");
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      JSONScanner jSONScanner1 = new JSONScanner("type not match. ");
      jSONScanner1.scanISO8601DateIfMatch();
      LinkedHashSet<String> linkedHashSet1 = new LinkedHashSet<String>();
      jSONScanner1.scanStringArray(linkedHashSet1, ')');
      // Undeclared exception!
      try { 
        jSONScanner1.nextToken();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse true
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("B}OHJ(cp3k#OUh|");
      long long0 = jSONScanner0.longValue();
      assertEquals(0L, long0);
      
      long long1 = JSONLexerBase.MULTMIN_RADIX_TEN;
      jSONScanner0.scanNumber();
      int int0 = jSONScanner0.intValue();
      assertEquals(18, int0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'L';
      charArray0[1] = '{';
      charArray0[2] = ')';
      jSONScanner0.putChar('$');
      charArray0[3] = 'l';
      String string0 = jSONScanner0.scanFieldString(charArray0);
      assertNull(string0);
      
      jSONScanner0.scanDouble('l');
      assertEquals(989, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("p0xr", 479);
      jSONReaderScanner0.indexOf('k', 479);
      jSONReaderScanner0.isEOF();
      jSONReaderScanner0.scanLong('F');
      assertEquals(479, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("error parse null or new");
      char[] charArray0 = new char[0];
      jSONReaderScanner0.scanFieldFloat(charArray0);
      jSONReaderScanner0.scanFieldFloatArray2(charArray0);
      jSONReaderScanner0.stringVal();
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner(charArray0, (-2), (-2));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("");
      jSONScanner0.bytesValue();
      jSONScanner0.isRef();
      assertEquals(0, jSONScanner0.matchStat);
      
      jSONScanner0.scanLong('?');
      jSONScanner0.isEOF();
      assertEquals(989, jSONScanner0.getFeatures());
      
      jSONScanner0.scanDouble('z');
      assertEquals(989, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("");
      jSONScanner0.skipWhitespace();
      System.setCurrentTimeMillis(0);
      // Undeclared exception!
      try { 
        jSONScanner0.scanFieldInt((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("4]'a?\";dv{/c[)N");
      jSONScanner0.scanType("p0xr");
      StringReader stringReader0 = new StringReader("4]'a?\";dv{/c[)N");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0);
      jSONReaderScanner0.scanDate('L');
      // Undeclared exception!
      try { 
        jSONReaderScanner0.sub_chars(56320, (-2));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -2
         //
         verifyException("com.alibaba.fastjson.parser.JSONReaderScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("");
      jSONScanner0.skipWhitespace();
      // Undeclared exception!
      try { 
        jSONScanner0.scanSymbolUnQuoted((SymbolTable) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal identifier : \u001Apos 0, json : 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("n>2{|Ot/vR");
      jSONScanner0.isRef();
      jSONScanner0.nextIdent();
      jSONScanner0.scanDouble('%');
      jSONScanner0.scanFloat('%');
      jSONScanner0.nextToken();
      char[] charArray0 = new char[4];
      charArray0[0] = '%';
      charArray0[1] = '%';
      charArray0[2] = 'd';
      charArray0[3] = '%';
      jSONScanner0.charArrayCompare(charArray0);
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      LinkedHashSet<Locale> linkedHashSet0 = new LinkedHashSet<Locale>();
      List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) arrayList0, (Collection<Locale>) linkedHashSet0);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      List<Locale> list1 = Locale.filter((List<Locale.LanguageRange>) arrayList0, (Collection<Locale>) list0, locale_FilteringMode0);
      HashSet<Locale> hashSet0 = new HashSet<Locale>(list1);
      Locale.lookup(arrayList0, hashSet0);
      jSONScanner0.setLocale((Locale) null);
      assertEquals('2', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("Sgs5uKn(9v*@dJ");
      jSONScanner0.nextToken();
      jSONScanner0.integerValue();
      JSONScanner jSONScanner1 = new JSONScanner("Sgs5uKn(9v*@dJ");
      jSONScanner0.close();
      jSONScanner0.nextToken();
      assertEquals(2, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("1");
      jSONScanner0.scanFloat('~');
      jSONScanner0.nextToken();
      assertEquals(2, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("");
      jSONScanner0.close();
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("+y4sll");
      jSONReaderScanner0.isBlankInput();
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      long long0 = jSONReaderScanner0.scanLong('x');
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(".6p&O}&");
      long long0 = JSONLexerBase.MULTMIN_RADIX_TEN;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(".6p&O}&", 3);
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      long long1 = jSONReaderScanner0.scanLong('l');
      assertEquals(0L, long1);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("1");
      jSONScanner0.scanDecimal('j');
      // Undeclared exception!
      try { 
        jSONScanner0.decimalValue();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("wxV2");
      jSONScanner0.isRef();
      char[] charArray0 = new char[9];
      charArray0[0] = 'd';
      charArray0[1] = 'd';
      charArray0[2] = 'd';
      charArray0[3] = 'd';
      charArray0[4] = 'd';
      charArray0[5] = 'd';
      charArray0[6] = 'd';
      charArray0[7] = '?';
      charArray0[8] = 'd';
      JSONScanner jSONScanner1 = new JSONScanner(charArray0, 0, 0);
      assertEquals(0, jSONScanner1.matchStat);
      
      jSONScanner1.scanLong('2');
      assertEquals(0, jSONScanner1.getFeatures());
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("");
      char[] charArray0 = new char[1];
      charArray0[0] = 'w';
      jSONScanner0.scanFieldUUID(charArray0);
      jSONScanner0.nextIdent();
      jSONScanner0.scanDouble('P');
      jSONScanner0.scanFloat('T');
      // Undeclared exception!
      try { 
        jSONScanner0.nextToken();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // EOF error
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("Sgs5uKn(9v*@dJ");
      jSONScanner0.scanNumber();
      int int0 = jSONScanner0.intValue();
      assertEquals(2, jSONScanner0.token());
      assertEquals(35, int0);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      char char0 = '6';
      JSONLexerBase.isWhitespace('6');
      char[] charArray0 = new char[0];
      int int0 = (-1);
      JSONReaderScanner jSONReaderScanner0 = null;
      try {
        jSONReaderScanner0 = new JSONReaderScanner(charArray0, (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.CharArrayReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      StringReader stringReader0 = new StringReader("x");
      JSONScanner jSONScanner0 = new JSONScanner("x");
      TimeZone.getDefault();
      Class<ChronoLocalDate> class0 = ChronoLocalDate.class;
      jSONScanner0.scanEnum(class0, (SymbolTable) null, '7');
      jSONScanner0.scanBoolean('~');
      char[] charArray0 = new char[7];
      charArray0[0] = '~';
      charArray0[1] = 'i';
      charArray0[2] = '~';
      charArray0[3] = 'w';
      charArray0[4] = '~';
      charArray0[5] = '~';
      charArray0[6] = '~';
      jSONScanner0.sbuf = charArray0;
      jSONScanner0.info();
      jSONScanner0.isEnabled((-2307), 119);
      jSONScanner0.scanLong('w');
      jSONScanner0.isEnabled(313, 119);
      // Undeclared exception!
      try { 
        jSONScanner0.nextToken((-2307));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal state. \u001A
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      StringReader stringReader0 = new StringReader("'32Q");
      JSONScanner jSONScanner0 = new JSONScanner("'32Q", (-543));
      jSONScanner0.scanFloat('t');
      jSONScanner0.scanISO8601DateIfMatch();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      jSONScanner0.scanStringArray(linkedList0, ')');
      boolean boolean0 = jSONScanner0.isEnabled((-1557));
      assertEquals((-1), jSONScanner0.matchStat);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("error parse null or new");
      int int0 = (-187);
      JSONScanner jSONScanner0 = new JSONScanner("MT,-jf<+2 F}0:_},", (-187));
      jSONScanner0.nextToken();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      char char0 = '7';
      jSONScanner0.scanStringArray(linkedHashSet0, '7');
      jSONScanner0.isEnabled(0);
      char char1 = ';';
      char char2 = 'S';
      char char3 = 'm';
      // Undeclared exception!
      try { 
        jSONScanner0.floatValue();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("K");
      jSONScanner0.close();
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 0, 125);
      String string0 = jSONReaderScanner0.scanString('z');
      assertNull(string0);
      
      jSONReaderScanner0.scanFieldFloatArray2(charArray0);
      jSONScanner0.eofPos = 125;
      jSONReaderScanner0.stringVal();
      jSONReaderScanner0.charAt(120);
      assertEquals(125, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("EOF error");
      long long0 = JSONLexerBase.MULTMIN_RADIX_TEN;
      jSONScanner0.scanNumber();
      jSONScanner0.scanISO8601DateIfMatch(false);
      int int0 = jSONScanner0.intValue();
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(21, int0);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("EOF error");
      long long0 = JSONLexerBase.MULTMIN_RADIX_TEN;
      jSONScanner0.scanNumber();
      // Undeclared exception!
      try { 
        jSONScanner0.decimalValue(true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // null, pos 1, json : EOF error
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("scan null error");
      SymbolTable symbolTable0 = new SymbolTable(8192);
      jSONScanner0.scanSymbolUnQuoted(symbolTable0);
      assertEquals(' ', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("+]fF93r>%+jCB2?YO");
      jSONScanner0.nextToken();
      char[] charArray0 = new char[4];
      charArray0[0] = 'Z';
      charArray0[1] = '!';
      charArray0[2] = 'h';
      charArray0[3] = 'X';
      Class<String> class0 = String.class;
      jSONScanner0.scanFieldStringArray(charArray0, class0);
      jSONScanner0.close();
      jSONScanner0.nextToken();
      assertEquals('f', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("error parse null or new");
      char[] charArray0 = new char[0];
      jSONReaderScanner0.scanFieldFloatArray2(charArray0);
      jSONReaderScanner0.stringVal();
      jSONReaderScanner0.charAt(91);
      assertEquals((-2), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("com");
      long long0 = JSONLexerBase.MULTMIN_RADIX_TEN;
      jSONScanner0.scanFloat('R');
      JSONScanner jSONScanner1 = new JSONScanner("fq");
      // Undeclared exception!
      try { 
        jSONScanner1.nextToken();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("x");
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      jSONScanner0.scanISO8601DateIfMatch();
      jSONScanner0.scanStringArray(linkedHashSet0, '8');
      jSONScanner0.isEOF();
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      char[] charArray0 = new char[27];
      charArray0[0] = 'd';
      charArray0[1] = 'N';
      charArray0[2] = '~';
      charArray0[3] = '2';
      charArray0[4] = 'P';
      charArray0[5] = '\"';
      charArray0[6] = 'K';
      charArray0[7] = ':';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 53, 56);
      jSONReaderScanner0.stringVal();
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      jSONReaderScanner0.scanDate('A');
      assertEquals(56, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("'{qJgah?");
      jSONScanner0.skipWhitespace();
      // Undeclared exception!
      try { 
        jSONScanner0.nextToken((-834));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed single-quote string
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(", ");
      jSONScanner0.scanFloat('-');
      jSONScanner0.nextToken();
      jSONScanner0.getCurrent();
      char[] charArray0 = new char[3];
      charArray0[0] = ' ';
      charArray0[1] = '-';
      charArray0[2] = ' ';
      JSONScanner jSONScanner1 = null;
      try {
        jSONScanner1 = new JSONScanner(charArray0, (-1));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("n");
      // Undeclared exception!
      try { 
        jSONScanner0.scanNullOrNew();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse new
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("TreeSet");
      Feature feature0 = Feature.InitStringFieldAsEmpty;
      jSONScanner0.config(feature0, true);
      jSONScanner0.skipWhitespace();
      char[] charArray0 = new char[5];
      charArray0[0] = 'h';
      charArray0[1] = 'e';
      charArray0[2] = '';
      charArray0[3] = 'g';
      charArray0[4] = 'c';
      float float0 = jSONScanner0.scanFieldFloat(charArray0);
      assertEquals(5085, jSONScanner0.getFeatures());
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("NaN");
      jSONScanner0.close();
      jSONScanner0.nextToken();
      // Undeclared exception!
      try { 
        jSONScanner0.nextTokenWithColon();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - \u001A, info : pos 3, json : NaN
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("(8EOF eIror");
      long long0 = JSONLexerBase.MULTMIN_RADIX_TEN;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("sgs", 1);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFieldSymbol((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(" OjX");
      jSONScanner0.skipWhitespace();
      jSONScanner0.nextToken(16);
      assertEquals('', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("EOF error");
      char[] charArray0 = new char[7];
      charArray0[0] = 'r';
      charArray0[1] = 'P';
      charArray0[2] = '*';
      charArray0[4] = '^';
      charArray0[5] = '<';
      charArray0[6] = '\"';
      jSONScanner0.scanFieldBoolean(charArray0);
      jSONScanner0.nextIdent();
      jSONScanner0.nextToken();
      assertEquals('r', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("p0xr", 479);
      jSONReaderScanner0.isEOF();
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      long long0 = jSONReaderScanner0.scanLong('F');
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("%*AP?<9yw}V!^\"iGs9");
      char[] charArray0 = new char[5];
      charArray0[0] = '.';
      charArray0[1] = 'd';
      charArray0[2] = 'P';
      charArray0[3] = '';
      charArray0[4] = 'z';
      jSONReaderScanner0.scanFieldInt(charArray0);
      jSONReaderScanner0.scanNumber();
      jSONReaderScanner0.intValue();
      System.setCurrentTimeMillis(3794316665763266033L);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("qK0");
      JSONScanner jSONScanner1 = new JSONScanner("false");
      jSONScanner1.close();
      jSONScanner1.nextToken();
      assertEquals(989, jSONScanner1.getFeatures());
      assertEquals(0, jSONScanner1.matchStat);
      assertEquals(0, jSONScanner1.pos());
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(", ");
      jSONScanner0.skipWhitespace();
      jSONScanner0.nextToken(16);
      assertEquals(' ', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 19, 56);
      jSONReaderScanner0.stringVal();
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      jSONReaderScanner0.scanDate('>');
      assertEquals(56, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("+]fF93r%+jCB2?YO");
      jSONScanner0.scanLong('I');
      jSONScanner0.scanNumber();
      char[] charArray0 = new char[6];
      charArray0[0] = 'I';
      charArray0[1] = 'I';
      charArray0[2] = '%';
      charArray0[3] = 'v';
      charArray0[4] = 'I';
      charArray0[5] = 'I';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 120, 120);
      jSONReaderScanner0.indexOf('I', 120);
      jSONScanner0.stringVal();
      assertEquals(2, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("com.alibaba.fastjson.parser.JSONReaderScanner");
      jSONScanner0.scanInt('~');
      jSONScanner0.nextIdent();
      jSONScanner0.nextToken();
      jSONScanner0.isEOF();
      // Undeclared exception!
      try { 
        jSONScanner0.integerValue();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(".6p&O}&");
      long long0 = JSONLexerBase.MULTMIN_RADIX_TEN;
      jSONScanner0.scanNumber();
      jSONScanner0.scanISO8601DateIfMatch(true);
      assertEquals(3, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(".#'q fe0yrBJJl4-");
      jSONScanner0.close();
      jSONScanner0.nextToken();
      assertEquals(25, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("Qc; ?c'Lkl?Q");
      jSONScanner0.nextIdent();
      jSONScanner0.nextToken();
      assertEquals(24, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      StringReader stringReader0 = new StringReader("hR#q&:^Y_;!L44/Jfnz");
      JSONScanner jSONScanner0 = new JSONScanner("hR#q&:^Y_;!L44/Jfnz");
      char char0 = 'Z';
      jSONScanner0.scanFloat('Z');
      // Undeclared exception!
      try { 
        jSONScanner0.nextTokenWithColon((-1734));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - h, info : pos 0, json : hR#q&:^Y_;!L44/Jfnz
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = '6';
      charArray0[1] = 'p';
      charArray0[2] = 'N';
      charArray0[3] = 'A';
      charArray0[4] = 'g';
      charArray0[5] = 'P';
      charArray0[6] = 's';
      charArray0[7] = 'f';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 51068, 1361);
      jSONReaderScanner0.scanString('6');
      jSONReaderScanner0.scanFieldLong(charArray0);
      jSONReaderScanner0.isBlankInput();
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner(charArray0, 1361, 117);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      StringReader stringReader0 = new StringReader("new");
      JSONScanner jSONScanner0 = new JSONScanner("new");
      jSONScanner0.scanNumber();
      JSONScanner jSONScanner1 = new JSONScanner("O", 344);
      jSONScanner1.isEnabled(344, 0);
      jSONScanner0.nextIdent();
      System.setCurrentTimeMillis(0);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("EOF error");
      jSONScanner0.skipWhitespace();
      jSONScanner0.close();
      jSONScanner0.nextToken(760);
      jSONScanner0.stringDefaultValue();
      SymbolTable symbolTable0 = new SymbolTable(6);
      jSONScanner0.scanSymbolWithSeperator(symbolTable0, '7');
      assertEquals(1, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("n>2{|Ot/vR");
      jSONScanner0.scanFloat('%');
      // Undeclared exception!
      try { 
        jSONScanner0.nextToken();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse new
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("K");
      jSONScanner0.nextToken(17);
      assertEquals('\u001A', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("hR#q&:^Y_;!L44/Jfnz");
      jSONScanner0.nextToken(18);
      assertEquals(18, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      StringReader stringReader0 = new StringReader("[w");
      JSONScanner jSONScanner0 = new JSONScanner("[w");
      jSONScanner0.nextToken(48);
      Locale locale0 = Locale.ITALIAN;
      jSONScanner0.setLocale(locale0);
      assertEquals('w', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("~rcR]");
      char[] charArray0 = new char[2];
      charArray0[0] = '^';
      jSONReaderScanner0.scanFieldDate(charArray0);
      charArray0[1] = '5';
      Feature feature0 = Feature.InitStringFieldAsEmpty;
      jSONReaderScanner0.config(feature0, false);
      jSONReaderScanner0.scanFieldLong(charArray0);
      int int0 = jSONReaderScanner0.scanType("~rcR]");
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals((-2), int0);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("");
      jSONScanner0.scanNumber();
      jSONScanner0.isBlankInput();
      char[] charArray0 = new char[2];
      charArray0[0] = 'I';
      charArray0[1] = 'l';
      JSONScanner jSONScanner1 = new JSONScanner(charArray0, 0, 0);
      // Undeclared exception!
      try { 
        jSONScanner1.floatValue();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("p\"qt*D9qyR X[", (-2952));
      char[] charArray0 = new char[9];
      charArray0[0] = 'x';
      charArray0[1] = 'D';
      charArray0[2] = '';
      charArray0[3] = '~';
      charArray0[4] = 'E';
      charArray0[5] = '9';
      charArray0[6] = '@';
      charArray0[7] = 'd';
      charArray0[8] = '}';
      String string0 = JSONLexerBase.readString(charArray0, 0);
      assertEquals("", string0);
      
      Locale locale0 = Locale.FRENCH;
      jSONReaderScanner0.setLocale(locale0);
      assertEquals((-2952), jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      StringReader stringReader0 = new StringReader("new");
      JSONScanner jSONScanner0 = new JSONScanner("new");
      jSONScanner0.nextToken(12);
      assertTrue(jSONScanner0.isEOF());
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("+]fF93r%+jCB2?YO");
      jSONScanner0.nextIdent();
      assertEquals(2, jSONScanner0.token());
      
      jSONScanner0.nextToken(97);
      assertEquals(1, jSONScanner0.pos());
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      StringReader stringReader0 = new StringReader("new");
      JSONScanner jSONScanner0 = new JSONScanner("new");
      jSONScanner0.scanNullOrNew();
      jSONScanner0.nextToken(1);
      jSONScanner0.scanNumber();
      assertFalse(jSONScanner0.isEOF());
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("Feature.AllowSingleQuotes is false");
      jSONScanner0.scanNumber();
      jSONScanner0.close();
      assertEquals('e', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("+]fF93r%+jCB2?YO");
      jSONScanner0.skipWhitespace();
      jSONScanner0.close();
      jSONScanner0.nextToken(21);
      assertEquals(']', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("");
      jSONScanner0.longValue();
      JSONScanner jSONScanner1 = new JSONScanner("");
      jSONScanner1.nextToken(16);
      assertEquals(20, jSONScanner1.token());
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("+]fF93r%+jCB2?YO", Integer.MAX_VALUE);
      jSONScanner0.putChar('3');
      jSONScanner0.scanNumber();
      jSONScanner0.longValue();
      jSONScanner0.close();
      jSONScanner0.nextToken();
      assertEquals(']', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("K");
      jSONScanner0.close();
      char[] charArray0 = new char[7];
      charArray0[0] = '#';
      charArray0[1] = '>';
      charArray0[2] = '>';
      charArray0[3] = '>';
      charArray0[4] = '>';
      charArray0[5] = '>';
      charArray0[6] = '>';
      JSONScanner jSONScanner1 = new JSONScanner(charArray0, 0, (-1662));
      jSONScanner1.token = 0;
      String string0 = jSONScanner1.scanString('y');
      assertNotNull(string0);
      
      jSONScanner0.scanFieldLong(charArray0);
      assertEquals(989, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("?(");
      jSONScanner0.nextToken((-2441));
      jSONScanner0.np = (-2441);
      jSONScanner0.scanString('e');
      jSONScanner0.nextToken(479);
      jSONScanner0.charAt(2844);
      // Undeclared exception!
      try { 
        jSONScanner0.scanFalse();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("TreeSet");
      jSONScanner0.scanFloat('$');
      jSONScanner0.np = (-188);
      jSONScanner0.nextToken();
      char[] charArray0 = new char[7];
      charArray0[0] = '$';
      charArray0[2] = '$';
      charArray0[3] = '$';
      charArray0[4] = '%';
      charArray0[6] = '$';
      jSONScanner0.scanFieldSymbol(charArray0);
      assertTrue(jSONScanner0.isEOF());
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("#){S4j1].a");
      long long0 = JSONLexerBase.MULTMIN_RADIX_TEN;
      jSONScanner0.scanIdent();
      jSONScanner0.close();
      jSONScanner0.nextToken();
      assertEquals('', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("TreeSet");
      jSONScanner0.bytesValue();
      char[] charArray0 = new char[0];
      boolean boolean0 = jSONScanner0.matchField(charArray0);
      assertTrue(jSONScanner0.isEOF());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("+]fF93r%+jCB2?YO");
      long long0 = JSONLexerBase.MULTMIN_RADIX_TEN;
      jSONScanner0.nextToken();
      assertEquals(2, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("");
      jSONScanner0.nextToken(8);
      jSONScanner0.longValue();
      // Undeclared exception!
      try { 
        jSONScanner0.scanFieldFloat((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("+]fF93r%+jCB2?YO");
      jSONScanner0.scanNumber();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      jSONScanner0.scanStringArray(linkedHashSet0, 'M');
      jSONScanner0.nextToken(91);
      jSONScanner0.getTimeZone();
      jSONScanner0.scanLong('n');
      jSONScanner0.scanSymbolWithSeperator((SymbolTable) null, 'Y');
      assertEquals(2, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("+]fF93r%+jCB2?YO");
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      jSONScanner0.scanStringArray(set0, 'y');
      jSONScanner0.close();
      char[] charArray0 = new char[9];
      charArray0[0] = '\\';
      charArray0[1] = 'l';
      charArray0[2] = 'l';
      charArray0[3] = '@';
      charArray0[4] = '\\';
      charArray0[5] = 'l';
      charArray0[6] = 'v';
      charArray0[7] = '7';
      charArray0[8] = ',';
      jSONScanner0.scanFieldBigInteger(charArray0);
      jSONScanner0.nextToken(3504);
      jSONScanner0.stringDefaultValue();
      assertEquals(2, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      StringReader stringReader0 = new StringReader("new");
      JSONScanner jSONScanner0 = new JSONScanner("new");
      jSONScanner0.nextToken();
      char[] charArray0 = new char[2];
      charArray0[0] = 't';
      charArray0[1] = '9';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 1355);
      jSONReaderScanner0.scanBoolean('D');
      jSONReaderScanner0.stringVal();
      assertEquals((-1), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONScanner jSONScanner0 = new JSONScanner("980");
      jSONScanner0.scanFieldFloat(charArray0);
      jSONScanner0.scanBoolean('R');
      jSONScanner0.scanFieldIntArray(charArray0);
      // Undeclared exception!
      try { 
        jSONScanner0.integerValue();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("false");
      jSONScanner0.nextToken(497);
      jSONScanner0.nextIdent();
      jSONScanner0.scanString('>');
      assertEquals(20, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("treeset");
      jSONScanner0.lexError("treeset", (Object[]) null);
      // Undeclared exception!
      try { 
        jSONScanner0.nextToken((-722));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse true
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      int int0 = JSONLexerBase.INT_MULTMIN_RADIX_TEN;
      JSONScanner jSONScanner0 = new JSONScanner("$ref");
      jSONScanner0.scanISO8601DateIfMatch();
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldFloatArray(charArray0);
      // Undeclared exception!
      try { 
        jSONScanner0.integerValue();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("+]fF93r%+jCB2?YO", Integer.MAX_VALUE);
      jSONScanner0.putChar('3');
      jSONScanner0.scanNumber();
      boolean boolean0 = jSONScanner0.isEnabled(20, (-1598));
      Feature feature0 = Feature.AllowISO8601DateFormat;
      boolean boolean1 = jSONScanner0.isEnabled(feature0);
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(Integer.MAX_VALUE, jSONScanner0.getFeatures());
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("x");
      jSONScanner0.scanNumber();
      boolean boolean0 = jSONScanner0.isEnabled(0, 0);
      assertEquals(2, jSONScanner0.token());
      assertFalse(boolean0);
      
      Feature feature0 = Feature.InitStringFieldAsEmpty;
      boolean boolean1 = jSONScanner0.isEnabled(feature0);
      assertEquals(2, jSONScanner0.token());
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      StringReader stringReader0 = new StringReader("new");
      JSONScanner jSONScanner0 = new JSONScanner("/G~++/Ziw");
      jSONScanner0.scanString('v');
      jSONScanner0.scanBoolean('');
      // Undeclared exception!
      try { 
        jSONScanner0.nextToken(12);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid comment
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      StringReader stringReader0 = new StringReader("new");
      JSONScanner jSONScanner0 = new JSONScanner("new");
      jSONScanner0.nextToken(1);
      char[] charArray0 = new char[9];
      charArray0[0] = 'P';
      charArray0[1] = '#';
      charArray0[2] = 'z';
      charArray0[3] = '6';
      charArray0[4] = 'T';
      charArray0[5] = 'S';
      charArray0[6] = 'r';
      charArray0[7] = 'Y';
      charArray0[8] = ',';
      jSONScanner0.matchField2(charArray0);
      assertTrue(jSONScanner0.isEOF());
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      StringReader stringReader0 = new StringReader("new");
      JSONScanner jSONScanner0 = new JSONScanner("java.time.ZonedDateTime");
      SymbolTable symbolTable0 = new SymbolTable(49);
      jSONScanner0.scanSymbolWithSeperator(symbolTable0, '(');
      jSONScanner0.nextToken(802);
      assertEquals(1, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      StringReader stringReader0 = new StringReader("new");
      JSONScanner jSONScanner0 = new JSONScanner(" 5-T", 43);
      jSONScanner0.scanString('L');
      jSONScanner0.scanBoolean('1');
      // Undeclared exception!
      try { 
        jSONScanner0.numberString();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("new");
      jSONScanner0.scanString('E');
      jSONScanner0.scanDate('[');
      jSONScanner0.scanISO8601DateIfMatch(false);
      SymbolTable symbolTable0 = new SymbolTable(65);
      jSONScanner0.scanSymbolUnQuoted(symbolTable0);
      assertEquals('\u001A', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("false");
      jSONScanner0.nextToken(497);
      Locale locale0 = Locale.ROOT;
      jSONScanner0.setLocale(locale0);
      jSONScanner0.scanDate('*');
      jSONScanner0.scanDecimal('j');
      assertEquals('\u001A', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("");
      jSONScanner0.longValue();
      jSONScanner0.nextToken(19);
      jSONScanner0.getTimeZone();
      assertEquals(20, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      TimeZone.getDefault();
      JSONScanner jSONScanner0 = new JSONScanner("new");
      jSONScanner0.scanString('');
      assertEquals((-1), jSONScanner0.matchStat);
      
      jSONScanner0.scanDate('');
      assertEquals(989, jSONScanner0.getFeatures());
      
      jSONScanner0.scanIdent();
      int int0 = (-1217);
      int int1 = (-2846);
      SymbolTable symbolTable0 = null;
      try {
        symbolTable0 = new SymbolTable((-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.SymbolTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("+]fF93r%+jCB2?YO");
      jSONScanner0.scanString('R');
      jSONScanner0.scanDate('q');
      // Undeclared exception!
      try { 
        jSONScanner0.scanFieldFloatArray((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = 'G';
      charArray0[1] = 'h';
      charArray0[2] = '8';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 11, 1823);
      int int0 = jSONReaderScanner0.matchStat();
      assertEquals(1823, jSONReaderScanner0.getFeatures());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONScanner jSONScanner0 = new JSONScanner("(}m )p5Re+c6");
      // Undeclared exception!
      try { 
        jSONScanner0.scanString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed string : \u001A
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      TimeZone.getDefault();
      JSONScanner jSONScanner0 = new JSONScanner("new");
      jSONScanner0.np = 120;
      char[] charArray0 = new char[1];
      charArray0[0] = '';
      jSONScanner0.scanFieldBigInteger(charArray0);
      jSONScanner0.nextIdent();
      jSONScanner0.scanString('');
      jSONScanner0.scanDate('');
      assertEquals(9, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      JSONScanner jSONScanner0 = new JSONScanner("f=lse");
      // Undeclared exception!
      try { 
        jSONScanner0.nextToken(0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("");
      int int0 = 1377;
      Class<Object> class0 = Object.class;
      jSONScanner0.newCollectionByType(class0);
      // Undeclared exception!
      try { 
        jSONScanner0.scanFieldDecimal((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("t]pyg_#8/W%>N!2>yv");
      JSONScanner jSONScanner1 = new JSONScanner("t]pyg_#8/W%>N!2>yv");
      jSONScanner0.longValue();
      jSONScanner0.close();
      // Undeclared exception!
      try { 
        jSONScanner1.nextToken();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse true
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("DOl&:P]tr&W!s)[i3CH");
      assertEquals(0, jSONScanner0.matchStat);
      
      jSONScanner0.scanString('2');
      jSONScanner0.charAt(3810);
      assertEquals(989, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("com.alibaba.fastjson.parser.JSONLexerBase");
      jSONScanner0.resetStringPosition();
      jSONScanner0.nextIdent();
      char[] charArray0 = new char[5];
      charArray0[0] = ':';
      charArray0[1] = '';
      charArray0[2] = '2';
      charArray0[3] = '^';
      charArray0[4] = 'o';
      jSONScanner0.scanFieldInt(charArray0);
      assertEquals('.', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      StringReader stringReader0 = new StringReader("'32Q");
      JSONScanner jSONScanner0 = new JSONScanner("'32Q");
      jSONScanner0.close();
      // Undeclared exception!
      try { 
        jSONScanner0.nextToken();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed single-quote string
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("", 76);
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      jSONScanner0.scanISO8601DateIfMatch();
      jSONScanner0.scanStringArray(linkedHashSet0, 'f');
      boolean boolean0 = jSONScanner0.isEnabled(769);
      assertEquals((-1), jSONScanner0.matchStat);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("+]fF93r%+jCB2?YO");
      jSONScanner0.nextIdent();
      SymbolTable symbolTable0 = new SymbolTable(46);
      jSONScanner0.scanSymbol(symbolTable0, 'B');
      assertEquals('2', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      TimeZone.getDefault();
      JSONScanner jSONScanner0 = new JSONScanner("new");
      char[] charArray0 = new char[6];
      charArray0[0] = '9';
      charArray0[1] = 'o';
      charArray0[2] = 'H';
      charArray0[3] = '2';
      charArray0[4] = 's';
      charArray0[5] = 'O';
      jSONScanner0.scanFieldFloatArray(charArray0);
      jSONScanner0.isEOF();
      jSONScanner0.next();
      boolean boolean0 = jSONScanner0.isBlankInput();
      assertEquals((-2), jSONScanner0.matchStat);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("DOl&:P]tr&W!s)i3CH");
      jSONScanner0.close();
      jSONScanner0.nextToken();
      assertEquals(1, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("$", 82);
      Locale locale0 = Locale.GERMANY;
      jSONScanner0.eofPos = 497;
      jSONScanner0.locale = locale0;
      jSONScanner0.nextToken(497);
      jSONScanner0.scanDate('J');
      jSONScanner0.scanDecimal('Z');
      assertEquals(1, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("+]fF93r%+jCB2?YO");
      jSONScanner0.nextToken(16);
      assertEquals(']', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      StringReader stringReader0 = new StringReader("t]pyg_#8/W%>N!2>yv");
      TimeZone timeZone0 = TimeZone.getDefault();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
      JSONScanner jSONScanner0 = new JSONScanner(" - ", (-2332));
      char[] charArray0 = new char[9];
      charArray0[0] = '\"';
      charArray0[1] = '|';
      charArray0[2] = 's';
      charArray0[3] = 'o';
      charArray0[4] = '?';
      charArray0[5] = 'R';
      charArray0[6] = 'z';
      charArray0[7] = '[';
      charArray0[8] = '/';
      jSONScanner0.scanFieldIntArray(charArray0);
      assertEquals((-2), jSONScanner0.matchStat);
      
      boolean boolean0 = jSONScanner0.scanBoolean('[');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("4EYW}Ld'AXK5+roDo.");
      jSONScanner0.scanNumber();
      int int0 = 26;
      char[] charArray0 = new char[21];
      charArray0[0] = 'g';
      charArray0[1] = 'h';
      charArray0[2] = '4';
      charArray0[3] = '(';
      charArray0[4] = 'z';
      charArray0[5] = 'e';
      charArray0[6] = 'O';
      charArray0[7] = 'q';
      JSONScanner jSONScanner1 = null;
      try {
        jSONScanner1 = new JSONScanner(charArray0, 26, 0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      StringReader stringReader0 = new StringReader("t]pyg_#8/W%>N!2>yv");
      JSONScanner jSONScanner0 = new JSONScanner("o");
      jSONScanner0.nextToken(16);
      Class<Object> class0 = Object.class;
      SymbolTable symbolTable0 = new SymbolTable(16);
      // Undeclared exception!
      try { 
        jSONScanner0.scanFieldDouble((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("3I");
      // Undeclared exception!
      try { 
        jSONScanner0.scanString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed string : \u001A
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONScanner jSONScanner0 = new JSONScanner("980");
      jSONScanner0.stringDefaultValue = "980";
      jSONScanner0.scanFieldIntArray(charArray0);
      jSONScanner0.scanDecimal('<');
      SymbolTable symbolTable0 = new SymbolTable(42);
      // Undeclared exception!
      try { 
        jSONScanner0.scanSymbol(symbolTable0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal identifier : 9pos 0, json : 980
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      String string0 = "t]pyg_#8/W%>N!2>yv";
      StringReader stringReader0 = new StringReader("t]pyg_#8/W%>N!2>yv");
      JSONScanner jSONScanner0 = new JSONScanner("t]pyg_#8/W%>N!2>yv");
      jSONScanner0.setToken(0);
      int int0 = 123;
      // Undeclared exception!
      try { 
        jSONScanner0.nextToken((-2160));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse true
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("$", 40);
      jSONScanner0.nextToken(3810);
      jSONScanner0.isEnabled(3810);
      Class<ChronoLocalDate> class0 = ChronoLocalDate.class;
      // Undeclared exception!
      try { 
        jSONScanner0.newCollectionByType(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.time.chrono.ChronoLocalDate
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("z0 &a@6)n^@M<");
      jSONScanner0.scanNumber();
      boolean boolean0 = jSONScanner0.isEnabled(0, 586);
      assertEquals(2, jSONScanner0.token());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("undefined");
      JSONLexerBase.isWhitespace(';');
      jSONScanner0.scanIdent();
      int int0 = jSONScanner0.pos();
      assertTrue(jSONScanner0.isEOF());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("");
      jSONScanner0.scanInt('R');
      JSONScanner jSONScanner1 = new JSONScanner("error parse new", (-1));
      jSONScanner1.scanNumber();
      // Undeclared exception!
      try { 
        jSONScanner1.scanTrue();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse true
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("e");
      jSONScanner0.bytesValue();
      jSONScanner0.scanNumber();
      jSONScanner0.scanString('Z');
      jSONScanner0.nextToken(97);
      assertTrue(jSONScanner0.isEOF());
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("3I");
      jSONScanner0.close();
      jSONScanner0.nextToken();
      assertEquals(2, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("x");
      jSONScanner0.scanNumber();
      assertEquals(0, jSONScanner0.matchStat);
      
      jSONScanner0.scanBoolean('8');
      JSONScanner jSONScanner1 = new JSONScanner("TreeSet", (-1));
      jSONScanner1.stringVal();
      assertEquals((-1), jSONScanner1.getFeatures());
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("e3K");
      JSONScanner jSONScanner1 = new JSONScanner("e3K", 9);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "e3K");
      jSONScanner1.setTimeZone(simpleTimeZone0);
      jSONScanner1.nextToken((-1565));
      assertEquals('3', jSONScanner1.getCurrent());
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("Q");
      jSONScanner0.bytesValue();
      int int0 = JSONLexer.OBJECT;
      jSONScanner0.scanNumber();
      char[] charArray0 = new char[2];
      charArray0[0] = 'N';
      charArray0[1] = '*';
      jSONScanner0.scanFieldStringArray(charArray0, 1069, (SymbolTable) null);
      assertEquals(2, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("false");
      jSONScanner0.bytesValue();
      assertEquals(0, jSONScanner0.matchStat);
      
      jSONScanner0.scanDate('$');
      jSONScanner0.indexOf('$', 0);
      int int0 = jSONScanner0.token();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      StringReader stringReader0 = new StringReader("aD7n&v21lm?%HJd2Ax");
      JSONScanner jSONScanner0 = new JSONScanner("Set");
      jSONScanner0.scanBoolean('C');
      jSONScanner0.stringVal();
      jSONScanner0.nextToken();
      assertEquals('\u001A', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Q# z\"O_!50Id+m$M");
      JSONScanner jSONScanner0 = new JSONScanner("{wXkkQ0T?pc");
      jSONScanner0.scanBoolean('<');
      // Undeclared exception!
      try { 
        jSONScanner0.nextTokenWithChar('*');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match * - {, info : pos 0, json : {wXkkQ0T?pc
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      StringReader stringReader0 = new StringReader("t]pyg_#8/W%>N!2>yv");
      JSONScanner jSONScanner0 = new JSONScanner("o");
      jSONScanner0.nextToken(16);
      jSONScanner0.isBlankInput();
      // Undeclared exception!
      try { 
        jSONScanner0.floatValue();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("false");
      jSONScanner0.nextToken(0);
      jSONScanner0.scanDate('Y');
      jSONScanner0.indexOf('Y', 953);
      char[] charArray0 = new char[0];
      Class<ChronoLocalDate> class0 = ChronoLocalDate.class;
      // Undeclared exception!
      try { 
        jSONScanner0.scanFieldStringArray(charArray0, class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.time.chrono.ChronoLocalDate
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("t]pyg_#8/W%>N!2>yv");
      jSONScanner0.scanString('R');
      char[] charArray0 = new char[7];
      charArray0[0] = 'R';
      charArray0[1] = 'R';
      charArray0[2] = 'R';
      charArray0[3] = 'R';
      charArray0[4] = 'R';
      charArray0[5] = 'R';
      charArray0[6] = 'R';
      // Undeclared exception!
      try { 
        JSONLexerBase.readString(charArray0, 79);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("e");
      jSONScanner0.bytesValue();
      jSONScanner0.scanNumber();
      jSONScanner0.scanISO8601DateIfMatch();
      // Undeclared exception!
      try { 
        jSONScanner0.scanFieldBigInteger((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("new");
      jSONScanner0.nextToken(1843);
      jSONScanner0.isEOF();
      jSONScanner0.skipWhitespace();
      // Undeclared exception!
      try { 
        jSONScanner0.scanFieldBoolean((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("false");
      jSONScanner0.bytesValue();
      int int0 = jSONScanner0.scanType(".I");
      assertEquals((-2), int0);
      
      boolean boolean0 = jSONScanner0.isEnabled(93, (-1440));
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(989, jSONScanner0.getFeatures());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("980");
      JSONScanner jSONScanner1 = new JSONScanner("980");
      jSONScanner1.nextToken(15);
      assertEquals('\u001A', jSONScanner1.getCurrent());
      
      jSONScanner0.isBlankInput();
      jSONScanner1.floatValue();
      jSONScanner1.scanNumber();
      assertEquals(989, jSONScanner1.getFeatures());
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = 'w';
      charArray0[1] = '9';
      charArray0[2] = '4';
      charArray0[3] = '.';
      charArray0[4] = 'w';
      charArray0[5] = '\\';
      charArray0[6] = ';';
      int int0 = 0;
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 0, 0);
      jSONScanner0.scanFloat('9');
      Locale locale0 = Locale.PRC;
      locale0.getDisplayVariant();
      Locale locale1 = locale0.stripExtensions();
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      HashSet<String> hashSet0 = new HashSet<String>();
      Locale.lookupTag(arrayList0, hashSet0);
      locale1.getDisplayLanguage(locale0);
      JSONScanner jSONScanner1 = null;
      try {
        jSONScanner1 = new JSONScanner(charArray0, 12, (-1));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("");
      jSONScanner0.nextToken(0);
      TimeZone.getDefault();
      jSONScanner0.scanBoolean('a');
      // Undeclared exception!
      try { 
        jSONScanner0.stringVal();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      StringReader stringReader0 = new StringReader("x");
      JSONScanner jSONScanner0 = new JSONScanner("x");
      Class<String> class0 = String.class;
      SymbolTable symbolTable0 = new SymbolTable(93);
      jSONScanner0.scanEnum(class0, symbolTable0, '|');
      SymbolTable symbolTable1 = new SymbolTable(76);
      jSONScanner0.scanSymbolWithSeperator(symbolTable1, 'z');
      // Undeclared exception!
      try { 
        jSONScanner0.nextToken(1899);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal state. \u001A
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("false");
      JSONScanner jSONScanner1 = new JSONScanner("TreeSet");
      jSONScanner1.nextToken(0);
      jSONScanner1.bytesValue();
      jSONScanner0.scanNumber();
      assertEquals(2, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      StringReader stringReader0 = new StringReader("x");
      JSONScanner jSONScanner0 = new JSONScanner("x");
      assertEquals(0, jSONScanner0.matchStat);
      
      TimeZone.getDefault();
      jSONScanner0.scanBoolean('~');
      char[] charArray0 = new char[7];
      charArray0[0] = '~';
      charArray0[1] = 'i';
      charArray0[2] = '~';
      charArray0[3] = 'w';
      charArray0[4] = '~';
      charArray0[5] = '~';
      charArray0[6] = '~';
      jSONScanner0.sbuf = charArray0;
      jSONScanner0.info();
      jSONScanner0.isEnabled((-2307), 119);
      boolean boolean0 = jSONScanner0.isEnabled(313, 119);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("t]pyg_#8/W%>N!2>yv");
      jSONScanner0.scanString('R');
      boolean boolean0 = jSONScanner0.scanBoolean('<');
      assertEquals((-1), jSONScanner0.matchStat);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(">q xMI!bk6)IKd8n");
      char[] charArray0 = new char[6];
      charArray0[0] = 'A';
      charArray0[1] = 'Y';
      charArray0[2] = 'b';
      charArray0[3] = '3';
      charArray0[4] = '_';
      charArray0[5] = '[';
      JSONScanner jSONScanner1 = new JSONScanner(charArray0, 0);
      jSONScanner1.isRef();
      TimeZone.getDefault();
      JSONScanner jSONScanner2 = new JSONScanner("", 106);
      jSONScanner2.scanBoolean('_');
      jSONScanner2.isEnabled((-3092), 106);
      // Undeclared exception!
      try { 
        JSONScanner.charArrayCompare("Z`4p~&Kz;/DR>Ki", (-1), charArray0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("980");
      TimeZone.getDefault();
      jSONScanner0.pos = 0;
      char char0 = '<';
      // Undeclared exception!
      try { 
        jSONScanner0.nextTokenWithColon(0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - 9, info : pos 0, json : 980
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("980");
      jSONScanner0.isRef();
      assertEquals(0, jSONScanner0.matchStat);
      
      TimeZone.getDefault();
      jSONScanner0.scanBoolean('<');
      boolean boolean0 = jSONScanner0.isEnabled(119, 119);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      TimeZone.getDefault();
      JSONScanner jSONScanner0 = new JSONScanner("o", 66);
      jSONScanner0.stringVal();
      jSONScanner0.info();
      assertEquals(66, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 16, 16);
      jSONReaderScanner0.matchField(charArray0);
      assertEquals('\u001A', jSONReaderScanner0.getCurrent());
      
      TimeZone.getDefault();
      JSONScanner jSONScanner0 = new JSONScanner("<x_Xh@HJ p[UBc[>g|X");
      jSONScanner0.scanBoolean('<');
      assertEquals('x', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      StringReader stringReader0 = new StringReader("InitStringFieldAsEmpty");
      stringReader0.mark(13);
      stringReader0.skip(1502845958873959152L);
      stringReader0.reset();
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0, 201);
      jSONReaderScanner0.scanIdent();
      char[] charArray0 = new char[7];
      charArray0[0] = ';';
      charArray0[1] = '-';
      charArray0[2] = '6';
      charArray0[3] = '\"';
      char char0 = ']';
      charArray0[4] = ']';
      charArray0[5] = 'l';
      charArray0[6] = '-';
      jSONReaderScanner0.scanFieldDecimal(charArray0);
      Class<Integer> class0 = Integer.class;
      // Undeclared exception!
      try { 
        jSONReaderScanner0.newCollectionByType(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.Integer
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("980");
      jSONScanner0.scanNumber();
      float float0 = jSONScanner0.floatValue();
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertEquals(980.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      char[] charArray0 = new char[0];
      int int0 = (-1585);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 69, (-1585));
      JSONScanner jSONScanner0 = new JSONScanner("unclosed");
      // Undeclared exception!
      try { 
        jSONScanner0.scanTrue();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse true
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("new");
      JSONScanner jSONScanner1 = new JSONScanner("new");
      jSONScanner0.bytesValue();
      JSONScanner jSONScanner2 = new JSONScanner("new", (-1428));
      jSONScanner2.scanISO8601DateIfMatch();
      jSONScanner1.scanUUID('\\');
      // Undeclared exception!
      try { 
        jSONScanner1.floatValue();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONScanner jSONScanner0 = new JSONScanner(" DljX");
      jSONScanner0.scanInt('R');
      jSONScanner0.scanFieldFloat(charArray0);
      jSONScanner0.scanUUID('H');
      // Undeclared exception!
      try { 
        jSONScanner0.floatValue();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      JSONScanner jSONScanner0 = new JSONScanner("fals5e");
      // Undeclared exception!
      try { 
        jSONScanner0.nextToken(1158);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("DZ<nC");
      jSONScanner0.pos = (-3015);
      jSONScanner0.features = 1229;
      jSONScanner0.nextToken(12);
      jSONScanner0.scanDate('1');
      jSONScanner0.putChar('1');
      jSONScanner0.scanDouble('c');
      assertEquals(1, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      StringReader stringReader0 = new StringReader("AllowArbitraryCommas");
      JSONScanner jSONScanner0 = new JSONScanner("AllowArbitraryCommas");
      jSONScanner0.nextToken(3487);
      jSONScanner0.setToken((-540));
      // Undeclared exception!
      try { 
        jSONScanner0.skipComment();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid comment
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      StringReader stringReader0 = new StringReader(">");
      JSONScanner jSONScanner0 = new JSONScanner("AllowArbitraryCommas");
      jSONScanner0.nextToken(68);
      jSONScanner0.scanDecimal('7');
      assertEquals(1, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("980");
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-3586), "Ensj5H5U#i5H_T");
      jSONScanner0.timeZone = (TimeZone) simpleTimeZone0;
      JSONScanner jSONScanner1 = new JSONScanner("980");
      jSONScanner1.scanNumber();
      // Undeclared exception!
      try { 
        jSONScanner0.floatValue();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("Sgs5uKn(9v*@dJ");
      jSONScanner0.nextToken(40);
      assertEquals(18, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("x");
      char char0 = '(';
      int int0 = JSONLexer.ARRAY;
      // Undeclared exception!
      try { 
        jSONScanner0.scanNullOrNew();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse null or new
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("fale");
      // Undeclared exception!
      try { 
        jSONScanner0.nextToken(0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      JSONScanner jSONScanner0 = new JSONScanner("false");
      char[] charArray0 = new char[4];
      charArray0[0] = 'G';
      charArray0[1] = 'J';
      charArray0[2] = '*';
      charArray0[3] = '|';
      jSONScanner0.scanFieldDate(charArray0);
      jSONScanner0.nextToken((-2));
      jSONScanner0.next();
      jSONScanner0.putChar('*');
      assertEquals(7, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("Sgs5uKn(9v*@dJ", 4139);
      Class<ChronoLocalDate> class0 = ChronoLocalDate.class;
      jSONScanner0.scanEnum(class0, (SymbolTable) null, '.');
      jSONScanner0.scanDecimal('.');
      // Undeclared exception!
      try { 
        jSONScanner0.nextTokenWithColon(4139);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - S, info : pos 0, json : Sgs5uKn(9v*@dJ
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("Sgs5uKn(9v*@dJ", 4139);
      jSONScanner0.scanUUID('7');
      JSONScanner jSONScanner1 = new JSONScanner("Sgs5uKn(9v*@dJ", 4139);
      // Undeclared exception!
      try { 
        jSONScanner1.floatValue();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("t]pyg_#8/W%>N!2>yv");
      jSONScanner0.scanString('R');
      jSONScanner0.isEOF();
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) jSONScanner0;
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) "undefined";
      jSONScanner0.lexError("undefined", objectArray0);
      jSONScanner0.scanNumber();
      // Undeclared exception!
      try { 
        jSONScanner0.floatValue();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      StringReader stringReader0 = new StringReader("x");
      JSONScanner jSONScanner0 = new JSONScanner("x");
      // Undeclared exception!
      try { 
        jSONScanner0.nextToken(1899);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal state. \u001A
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("980");
      jSONScanner0.resetStringPosition();
      jSONScanner0.nextToken(116);
      jSONScanner0.numberString();
      assertEquals('\u001A', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("x", 4139);
      jSONScanner0.scanDecimal('I');
      // Undeclared exception!
      try { 
        jSONScanner0.nextTokenWithColon((-2185));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - x, info : pos 0, json : x
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(" - ");
      jSONScanner0.nextToken(36);
      jSONScanner0.scanDate('r');
      assertEquals(2, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONScanner jSONScanner0 = new JSONScanner("980");
      jSONScanner0.stringDefaultValue = "980";
      jSONScanner0.scanFieldIntArray(charArray0);
      assertEquals((-2), jSONScanner0.matchStat);
      
      jSONScanner0.scanDecimal(' ');
      assertEquals(989, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONScanner jSONScanner0 = new JSONScanner("980");
      jSONScanner0.stringDefaultValue = "980";
      assertEquals(989, jSONScanner0.getFeatures());
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 0, 0);
      char char0 = jSONReaderScanner0.getCurrent();
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals('\u0000', char0);
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = 'w';
      charArray0[1] = '?';
      charArray0[2] = '*';
      charArray0[3] = 'F';
      charArray0[4] = 'u';
      charArray0[5] = '{';
      charArray0[6] = '>';
      charArray0[7] = 'm';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 318, (-4156));
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFalse();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("t]pyg_#8/W%>N!2>yv");
      JSONScanner jSONScanner1 = new JSONScanner("dVy%\"nPW");
      // Undeclared exception!
      try { 
        jSONScanner0.nextToken(9);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse true
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      char char0 = 'y';
      String string0 = ">q xMI!bk6)IKd8n";
      JSONScanner jSONScanner0 = new JSONScanner(">q xMI!bk6)IKd8n");
      int int0 = (-6575);
      char[] charArray0 = new char[8];
      charArray0[0] = 'y';
      charArray0[1] = 'y';
      charArray0[2] = 'y';
      charArray0[3] = 'y';
      charArray0[4] = 'y';
      charArray0[5] = 'y';
      charArray0[6] = 'y';
      charArray0[7] = 'y';
      // Undeclared exception!
      try { 
        JSONLexerBase.readString(charArray0, (-6575));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("");
      JSONScanner jSONScanner1 = new JSONScanner("nrxl");
      // Undeclared exception!
      try { 
        jSONScanner1.nextToken(782);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse new
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("980");
      jSONScanner0.setToken(36);
      jSONScanner0.scanUUID('`');
      assertEquals(36, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      StringReader stringReader0 = new StringReader("false");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0);
      int int0 = JSONLexerBase.INT_MULTMIN_RADIX_TEN;
      jSONReaderScanner0.scanIdent();
      assertTrue(jSONReaderScanner0.isEOF());
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      StringReader stringReader0 = new StringReader("u");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0, 15);
      jSONReaderScanner0.nextToken();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFieldBigInteger((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("");
      jSONScanner0.nextToken(0);
      SymbolTable symbolTable0 = new SymbolTable(2816);
      jSONScanner0.scanSymbol(symbolTable0);
      jSONScanner0.scanDate('q');
      boolean boolean0 = jSONScanner0.isEOF();
      assertEquals(20, jSONScanner0.token());
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        jSONScanner0.scanTrue();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse true
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONScanner jSONScanner0 = new JSONScanner("980");
      jSONScanner0.scanFieldIntArray(charArray0);
      jSONScanner0.charArrayCompare(charArray0);
      assertEquals((-2), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("InitStringFieldAsEmpty");
      char[] charArray0 = new char[1];
      charArray0[0] = '\"';
      // Undeclared exception!
      try { 
        jSONScanner0.nextTokenWithColon(42);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - I, info : pos 0, json : InitStringFieldAsEmpty
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("");
      char char0 = 'R';
      jSONScanner0.scanInt('R');
      jSONScanner0.scanUUID('R');
      jSONScanner0.isEnabled(117);
      SymbolTable symbolTable0 = new SymbolTable(527);
      // Undeclared exception!
      try { 
        jSONScanner0.scanSymbolUnQuoted(symbolTable0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal identifier : \u001Apos 0, json : 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      StringReader stringReader0 = new StringReader("'32Q");
      JSONScanner jSONScanner0 = new JSONScanner("'32Q");
      jSONScanner0.longValue();
      int int0 = 46;
      // Undeclared exception!
      try { 
        jSONScanner0.nextToken(46);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed single-quote string
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("t]pyg_#8/W%>N!2>yv");
      jSONScanner0.scanString('R');
      jSONScanner0.isEOF();
      jSONScanner0.scanNumber();
      // Undeclared exception!
      try { 
        jSONScanner0.numberString();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("InitStringFieldAsEmpty");
      char[] charArray0 = null;
      // Undeclared exception!
      try { 
        jSONScanner0.scanFieldIntArray((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0, 15);
      jSONReaderScanner0.nextToken();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFieldBigInteger((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("}O^P+%vzN1Vd0B>M`Rh");
      jSONScanner0.scanInt('Z');
      // Undeclared exception!
      try { 
        jSONScanner0.decimalValue(true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("");
      jSONScanner0.scanInt('h');
      char[] charArray0 = new char[9];
      charArray0[0] = 'h';
      charArray0[1] = 'h';
      charArray0[2] = 'h';
      charArray0[3] = 'h';
      charArray0[4] = 'h';
      charArray0[5] = 'h';
      charArray0[6] = 'h';
      charArray0[7] = 'h';
      charArray0[8] = 'h';
      // Undeclared exception!
      try { 
        JSONLexerBase.readString(charArray0, 1370);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 9
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("new");
      jSONScanner0.nextToken(790);
      SymbolTable symbolTable0 = new SymbolTable(790);
      jSONScanner0.scanSymbol(symbolTable0);
      jSONScanner0.scanDate('u');
      boolean boolean0 = jSONScanner0.isEOF();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("");
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldDouble(charArray0);
      char char0 = 'w';
      jSONScanner0.scanFieldDecimal(charArray0);
      jSONScanner0.scanInt('w');
      // Undeclared exception!
      try { 
        jSONScanner0.decimalValue(false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("");
      jSONScanner0.nextToken(5);
      jSONScanner0.scanDate('q');
      jSONScanner0.isEOF();
      jSONScanner0.scanNumber();
      char[] charArray0 = new char[5];
      charArray0[0] = 'q';
      charArray0[1] = 'q';
      charArray0[2] = '5';
      charArray0[3] = 'q';
      charArray0[4] = 'q';
      JSONScanner jSONScanner1 = new JSONScanner(charArray0, 5);
      // Undeclared exception!
      try { 
        jSONScanner1.decimalValue(false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("");
      jSONScanner0.nextToken(0);
      jSONScanner0.scanString(',');
      jSONScanner0.isEOF();
      jSONScanner0.scanNumber();
      // Undeclared exception!
      try { 
        jSONScanner0.numberString();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 78, (-1585));
      JSONScanner jSONScanner0 = new JSONScanner(", actual ");
      jSONScanner0.nextToken((-1585));
      jSONScanner0.next();
      assertEquals(16, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("InitStringFieldAsEmpty");
      char[] charArray0 = new char[1];
      charArray0[0] = '\"';
      jSONScanner0.scanFieldIntArray(charArray0);
      jSONScanner0.charArrayCompare(charArray0);
      assertEquals((-2), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      String string0 = "t]pyg_#8/%>N!2>yv";
      JSONScanner jSONScanner0 = new JSONScanner("t]pyg_#8/%>N!2>yv");
      // Undeclared exception!
      try { 
        jSONScanner0.matchField((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(">q xMI!bk6)IKd8n");
      jSONScanner0.next();
      jSONScanner0.scanDate('q');
      jSONScanner0.isEOF();
      jSONScanner0.scanNumber();
      JSONScanner jSONScanner1 = new JSONScanner(">q xMI!bk6)IKd8n");
      // Undeclared exception!
      try { 
        jSONScanner1.numberString();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test316()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("a");
      StringReader stringReader0 = new StringReader("3bqXGbI^u-Q#8ox=");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0);
      int int0 = jSONReaderScanner0.scanInt('L');
      assertEquals(3, int0);
      
      boolean boolean0 = jSONReaderScanner0.isEnabled((-2506));
      assertTrue(boolean0);
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test317()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("a");
      jSONScanner0.nextToken(42);
      jSONScanner0.isEOF();
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 2407, 2407);
      jSONReaderScanner0.charAt(42);
      jSONReaderScanner0.scanFieldFloat(charArray0);
      jSONReaderScanner0.charAt(42);
      assertEquals((-1), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test318()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0);
      jSONReaderScanner0.scanInt('0');
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test319()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(">q xMI!bk6)IKd8n");
      jSONScanner0.nextToken((-6575));
      char[] charArray0 = new char[1];
      charArray0[0] = 'y';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 0);
      jSONReaderScanner0.getCalendar();
      JSONScanner jSONScanner1 = new JSONScanner("illegal.char");
      // Undeclared exception!
      try { 
        jSONScanner0.setTime('3', '3', 'y', '7', 'y', '3');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test320()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      JSONScanner jSONScanner0 = new JSONScanner("false");
      jSONScanner0.nextToken(0);
      char char0 = jSONScanner0.next();
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertEquals('\u001A', char0);
      
      char[] charArray0 = new char[7];
      charArray0[0] = '\u001A';
      charArray0[1] = '\u001A';
      charArray0[2] = '\u001A';
      charArray0[3] = '\u001A';
      charArray0[4] = '\u001A';
      charArray0[5] = '\u001A';
      charArray0[6] = '\u001A';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 0, 58);
      jSONReaderScanner0.indexOf('\u001A', 58);
      jSONReaderScanner0.scanFieldDate(charArray0);
      int int0 = jSONScanner0.token();
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertEquals(7, int0);
  }

  @Test(timeout = 4000)
  public void test321()  throws Throwable  {
      StringReader stringReader0 = new StringReader("false");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0);
      char[] charArray0 = new char[4];
      charArray0[0] = 'q';
      char char0 = ';';
      charArray0[1] = ';';
      charArray0[2] = ')';
      charArray0[3] = 'W';
      jSONReaderScanner0.scanFieldDouble(charArray0);
      jSONReaderScanner0.scanInt('L');
      JSONScanner jSONScanner0 = new JSONScanner("false", (-1));
      // Undeclared exception!
      try { 
        jSONScanner0.nextTokenWithColon();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - f, info : pos 0, json : false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test322()  throws Throwable  {
      char[] charArray0 = new char[0];
      int int0 = (-1585);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 78, (-1585));
      JSONScanner jSONScanner0 = new JSONScanner("false");
      jSONScanner0.nextToken(11);
      // Undeclared exception!
      try { 
        jSONScanner0.skipComment();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid comment
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test323()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = '9';
      charArray0[1] = '2';
      charArray0[2] = 'e';
      charArray0[3] = '&';
      charArray0[4] = '=';
      charArray0[5] = '6';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 999999999);
      Feature feature0 = Feature.AllowISO8601DateFormat;
      jSONReaderScanner0.config(feature0, true);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextTokenWithChar('2');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match 2 - 9, info : 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test324()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("t]pyg_#8/W%>N!2>yv");
      char char0 = ' ';
      jSONScanner0.scanInt(' ');
      int int0 = (-1284);
      // Undeclared exception!
      try { 
        jSONScanner0.nextToken((-1284));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse true
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test325()  throws Throwable  {
      char char0 = 'y';
      JSONScanner jSONScanner0 = new JSONScanner(">q xMI!bk6)IKd8n");
      jSONScanner0.nextToken((-6575));
      Feature feature0 = Feature.SupportArrayToBean;
      jSONScanner0.config(feature0, true);
      // Undeclared exception!
      try { 
        jSONScanner0.decimalValue();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test326()  throws Throwable  {
      StringReader stringReader0 = new StringReader("false");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0);
      int int0 = jSONReaderScanner0.scanInt('L');
      assertEquals(0, int0);
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test327()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("2{|Npj");
      jSONScanner0.nextToken((-3270));
      MockDate mockDate0 = new MockDate(0, 'x', (-3270), (-3270), (-3270), (-3270));
      boolean boolean0 = jSONScanner0.isEOF();
      assertEquals(2, jSONScanner0.token());
      assertFalse(boolean0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'x';
      charArray0[1] = 'x';
      Class<Integer> class0 = Integer.class;
      jSONScanner0.scanFieldStringArray(charArray0, class0);
      jSONScanner0.scanStringArray((Collection<String>) null, 'x');
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test328()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("O");
      jSONScanner0.nextIdent();
      jSONScanner0.nextToken(0);
      // Undeclared exception!
      try { 
        jSONScanner0.skipComment();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid comment
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test329()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("Nrxl");
      jSONScanner0.nextToken(42);
      jSONScanner0.isEOF();
      // Undeclared exception!
      try { 
        jSONScanner0.floatValue();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test330()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("");
      char char0 = 'R';
      jSONScanner0.nextToken(6);
      jSONScanner0.bytesValue();
      // Undeclared exception!
      try { 
        jSONScanner0.setTimeZone('w', '=', '[');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test331()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = '4';
      charArray0[1] = '4';
      charArray0[2] = 'K';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 8, 8);
      char[] charArray1 = jSONReaderScanner0.sub_chars(8, 8);
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(charArray0, 1972);
      SymbolTable symbolTable0 = new SymbolTable(47);
      // Undeclared exception!
      try { 
        jSONReaderScanner1.scanFieldStringArray(charArray1, 1972, symbolTable0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test332()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("");
      jSONScanner0.scanType("java.awt.Font");
      jSONScanner0.nextToken(0);
      char[] charArray0 = new char[9];
      charArray0[0] = '?';
      charArray0[1] = '';
      charArray0[2] = '1';
      charArray0[3] = '5';
      charArray0[4] = 'd';
      charArray0[5] = 'M';
      charArray0[6] = '*';
      charArray0[7] = '?';
      jSONScanner0.scanSymbol((SymbolTable) null);
      charArray0[8] = 'g';
      jSONScanner0.scanFieldFloat(charArray0);
      jSONScanner0.isEOF();
      // Undeclared exception!
      try { 
        jSONScanner0.floatValue();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test333()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("");
      jSONScanner0.next();
      jSONScanner0.resetStringPosition();
      // Undeclared exception!
      try { 
        jSONScanner0.sub_chars(17, (-2304));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test334()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("t]pyg_#8W%>N!2>v");
      jSONScanner0.scanInt(' ');
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 6, 84);
      jSONReaderScanner0.charAt(3924);
      jSONReaderScanner0.scanBoolean(' ');
      jSONReaderScanner0.scanFieldBoolean(charArray0);
      assertEquals(84, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test335()  throws Throwable  {
      String string0 = "";
      JSONScanner jSONScanner0 = new JSONScanner("");
      SymbolTable symbolTable0 = new SymbolTable(120);
      char char0 = '^';
      // Undeclared exception!
      try { 
        jSONScanner0.scanSymbol(symbolTable0, '^');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed.str
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test336()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("");
      jSONScanner0.nextToken(0);
      // Undeclared exception!
      try { 
        jSONScanner0.nextToken(287);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // EOF error
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test337()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("2{|Npj");
      jSONScanner0.nextToken(0);
      MockDate mockDate0 = new MockDate(0, 'x', 0, 0, 0, 0);
      // Undeclared exception!
      try { 
        jSONScanner0.scanFieldBoolean((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test338()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("");
      Feature feature0 = Feature.InternFieldNames;
      jSONScanner0.config(feature0, false);
      jSONScanner0.nextToken(0);
      jSONScanner0.isEOF();
      // Undeclared exception!
      try { 
        jSONScanner0.numberString();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test339()  throws Throwable  {
      StringReader stringReader0 = new StringReader("X`'NR::>Za1Dw#\"");
      JSONScanner jSONScanner0 = new JSONScanner("");
      char[] charArray0 = new char[6];
      charArray0[0] = '9';
      charArray0[1] = ',';
      charArray0[2] = '|';
      charArray0[3] = '*';
      charArray0[4] = 'F';
      charArray0[5] = '8';
      jSONScanner0.scanFieldDate(charArray0);
      jSONScanner0.nextToken(425);
      jSONScanner0.next();
      // Undeclared exception!
      try { 
        jSONScanner0.nextTokenWithColon();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - \u001A, info : pos 1, json : 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test340()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("");
      jSONScanner0.nextToken(0);
      char char0 = 'q';
      char[] charArray0 = new char[4];
      charArray0[0] = 'q';
      charArray0[1] = 'q';
      jSONScanner0.tokenName();
      charArray0[2] = 'q';
      charArray0[3] = 'q';
      jSONScanner0.scanFieldFloatArray2(charArray0);
      // Undeclared exception!
      try { 
        jSONScanner0.skipComment();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid comment
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test341()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("");
      jSONScanner0.nextToken(0);
      jSONScanner0.scanDecimal('T');
      char[] charArray0 = new char[2];
      charArray0[0] = 'T';
      charArray0[1] = 'T';
      jSONScanner0.scanFieldLong(charArray0);
      boolean boolean0 = jSONScanner0.isEnabled(2195);
      assertEquals(20, jSONScanner0.token());
      assertTrue(boolean0);
      
      float float0 = jSONScanner0.scanFloat('>');
      assertEquals(20, jSONScanner0.token());
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test342()  throws Throwable  {
      StringReader stringReader0 = new StringReader("InitStringFieldAsEmpty");
      stringReader0.mark(13);
      stringReader0.skip(1502845958873959152L);
      stringReader0.reset();
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0, 201);
      jSONReaderScanner0.scanIdent();
      char[] charArray0 = new char[7];
      charArray0[0] = ';';
      charArray0[1] = '-';
      charArray0[2] = '6';
      charArray0[3] = '\"';
      charArray0[4] = ']';
      charArray0[5] = 'l';
      charArray0[6] = '-';
      jSONReaderScanner0.scanFieldDecimal(charArray0);
      assertTrue(jSONReaderScanner0.isEOF());
  }

  @Test(timeout = 4000)
  public void test343()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("@");
      jSONReaderScanner0.scanFloat('u');
      Class<Object> class0 = Object.class;
      jSONReaderScanner0.newCollectionByType(class0);
      char[] charArray0 = new char[5];
      charArray0[0] = 'K';
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner(charArray0, (-847), (-372));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test344()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 15, (-1123));
      char char0 = 'q';
      JSONScanner jSONScanner0 = new JSONScanner("true");
      // Undeclared exception!
      try { 
        jSONScanner0.skipComment();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid comment
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test345()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("Set");
      char[] charArray0 = new char[7];
      charArray0[0] = '*';
      charArray0[1] = '*';
      charArray0[2] = '*';
      charArray0[3] = '*';
      charArray0[4] = '*';
      charArray0[5] = '*';
      charArray0[6] = '*';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 0, 0);
      char[] charArray1 = new char[7];
      charArray1[0] = '2';
      charArray1[1] = '*';
      charArray1[2] = '*';
      charArray1[3] = '*';
      charArray1[4] = '*';
      charArray1[5] = 'A';
      charArray1[6] = '*';
      jSONReaderScanner0.matchField(charArray1);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFalse();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test346()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      JSONScanner jSONScanner0 = new JSONScanner("Ex?>(LC");
      jSONScanner0.eofPos = (-566);
      jSONScanner0.nextToken(1072);
      jSONScanner0.isBlankInput();
      // Undeclared exception!
      try { 
        jSONScanner0.nextToken();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal state. ?
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test347()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("unclosed.str");
      jSONScanner0.nextToken((-945));
      jSONScanner0.next();
      char[] charArray0 = new char[8];
      charArray0[0] = 's';
      charArray0[1] = 's';
      charArray0[2] = 's';
      charArray0[3] = '\"';
      charArray0[4] = 's';
      charArray0[5] = '&';
      charArray0[6] = 's';
      charArray0[7] = 'H';
      jSONScanner0.scanFieldString(charArray0);
      boolean boolean0 = jSONScanner0.scanBoolean('H');
      assertEquals('s', jSONScanner0.getCurrent());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test348()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = ',';
      charArray0[1] = '4';
      charArray0[2] = '4';
      charArray0[3] = '4';
      charArray0[4] = '4';
      charArray0[5] = '4';
      charArray0[6] = '4';
      charArray0[7] = '4';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 8, 8);
      jSONReaderScanner0.matchField(charArray0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFalse();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test349()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("");
      JSONScanner jSONScanner1 = new JSONScanner("undefined");
      jSONScanner1.nextToken(123);
      SymbolTable symbolTable0 = null;
      try {
        symbolTable0 = new SymbolTable(0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test350()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("Y2g'\":i5?Jc<");
      jSONReaderScanner0.intValue();
      char[] charArray0 = new char[5];
      charArray0[0] = '/';
      charArray0[1] = ':';
      charArray0[2] = '4';
      charArray0[3] = 'K';
      charArray0[4] = 'X';
      jSONReaderScanner0.scanFieldSymbol(charArray0);
      jSONReaderScanner0.getTimeZone();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanHex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal state. Y
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test351()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0, 15);
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(stringReader0, 0);
      jSONReaderScanner0.nextToken();
      boolean boolean0 = JSONLexerBase.isWhitespace('$');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test352()  throws Throwable  {
      StringReader stringReader0 = new StringReader("unclosed.str");
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0, 1173);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.matchField2(charArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test353()  throws Throwable  {
      StringReader stringReader0 = new StringReader("unclosed.str");
      char[] charArray0 = new char[0];
      stringReader0.reset();
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0, 1173);
      jSONReaderScanner0.close();
      int int0 = jSONReaderScanner0.pos();
      assertEquals(0, int0);
      
      jSONReaderScanner0.getTimeZone();
      assertEquals(1173, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test354()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 8, 8);
      jSONReaderScanner0.matchField(charArray0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFalse();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test355()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("");
      jSONScanner0.nextToken(0);
      jSONScanner0.scanDate('q');
      jSONScanner0.isEOF();
      jSONScanner0.scanNumber();
      // Undeclared exception!
      try { 
        jSONScanner0.decimalValue(false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test356()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("");
      jSONScanner0.scanInt('4');
      jSONScanner0.scanUUID('K');
      // Undeclared exception!
      try { 
        jSONScanner0.scanFieldFloat((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test357()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("");
      jSONScanner0.nextToken(0);
      char char0 = 'q';
      // Undeclared exception!
      try { 
        jSONScanner0.skipComment();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid comment
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test358()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = '>';
      JSONScanner jSONScanner0 = new JSONScanner("com.alibaba.fastjson.JSONArray", '>');
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 955);
      jSONReaderScanner0.scanBoolean('S');
      boolean boolean0 = JSONLexerBase.isWhitespace('K');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test359()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("");
      jSONScanner0.scanInt('4');
      jSONScanner0.scanUUID('K');
      // Undeclared exception!
      try { 
        jSONScanner0.floatValue();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test360()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("Q~@");
      jSONReaderScanner0.isBlankInput();
      jSONReaderScanner0.stringVal();
      char[] charArray0 = new char[8];
      charArray0[0] = 'q';
      charArray0[1] = 'I';
      charArray0[2] = 'Q';
      charArray0[3] = 'B';
      charArray0[4] = ')';
      charArray0[5] = 'N';
      charArray0[6] = 'q';
      jSONReaderScanner0.skipWhitespace();
      JSONScanner jSONScanner0 = new JSONScanner("Q~@");
      assertEquals(0, jSONScanner0.matchStat);
      
      jSONScanner0.scanInt('q');
      assertEquals(989, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test361()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("");
      Class<Object> class0 = Object.class;
      jSONScanner0.newCollectionByType(class0);
      jSONScanner0.nextToken(1377);
      jSONScanner0.scanDate('y');
      JSONScanner.checkDate('y', 'y', 'y', 'y', 'y', 'y', (-1), 'y');
      char[] charArray0 = new char[4];
      charArray0[0] = 'y';
      charArray0[1] = 'y';
      charArray0[2] = 'y';
      charArray0[3] = 'y';
      jSONScanner0.scanFieldFloat(charArray0);
      // Undeclared exception!
      try { 
        jSONScanner0.numberString();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test362()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("", 95);
      char[] charArray0 = new char[2];
      jSONScanner0.scanFieldBigInteger(charArray0);
      assertEquals((-2), jSONScanner0.matchStat);
      
      Charset charset0 = Charset.defaultCharset();
      charset0.aliases();
      jSONScanner0.scanFieldBoolean(charArray0);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("");
      jSONScanner0.scanFieldSymbol(charArray0);
      jSONReaderScanner0.info();
      long long0 = jSONReaderScanner0.longValue();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test363()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("@");
      char[] charArray0 = new char[5];
      charArray0[0] = 'K';
      charArray0[1] = '[';
      charArray0[2] = 'R';
      jSONReaderScanner0.scanDouble('Z');
      charArray0[3] = ']';
      charArray0[4] = 'c';
      jSONReaderScanner0.scanFieldLong(charArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      
      jSONReaderScanner0.scanDouble('L');
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test364()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("@");
      Class<Object> class0 = Object.class;
      jSONReaderScanner0.newCollectionByType(class0);
      char[] charArray0 = new char[5];
      charArray0[0] = 'K';
      charArray0[1] = '[';
      charArray0[2] = 'R';
      charArray0[3] = ']';
      charArray0[4] = 'c';
      long long0 = jSONReaderScanner0.scanFieldLong(charArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test365()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("");
      jSONScanner0.nextToken(0);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("", 101);
      jSONReaderScanner0.indexOf('q', 0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFieldDate((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test366()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("");
      jSONScanner0.scanType("");
      jSONScanner0.eofPos = (-2962);
      char char0 = 'k';
      char[] charArray0 = new char[3];
      char char1 = '0';
      charArray0[0] = '0';
      char char2 = 'D';
      jSONScanner0.sbuf = charArray0;
      charArray0[1] = 'D';
      char char3 = '!';
      // Undeclared exception!
      try { 
        jSONScanner0.scanIdent();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test367()  throws Throwable  {
      char[] charArray0 = new char[6];
      StringReader stringReader0 = new StringReader("invalid comment");
      stringReader0.reset();
      stringReader0.reset();
      StringReader stringReader1 = new StringReader("invalid comment");
      stringReader1.skip((-3270L));
      stringReader1.read(charArray0);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader1);
      jSONReaderScanner0.getLocale();
      Feature feature0 = Feature.CustomMapDeserializer;
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanSymbol((SymbolTable) null, '{');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed.str
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test368()  throws Throwable  {
      StringReader stringReader0 = new StringReader("unclosed.str");
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 14);
      jSONReaderScanner0.info();
      jSONReaderScanner0.scanFieldBigInteger(charArray0);
      jSONReaderScanner0.close();
      jSONReaderScanner0.scanFieldUUID(charArray0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(stringReader0, 1173);
      jSONReaderScanner1.close();
      assertEquals(1173, jSONReaderScanner1.getFeatures());
  }

  @Test(timeout = 4000)
  public void test369()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("new");
      jSONScanner0.sp = (-2225);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      jSONScanner0.setTimeZone((TimeZone) null);
      linkedList0.add("g-}>(/tG_:N^[ZM");
      char[] charArray0 = new char[7];
      charArray0[0] = '|';
      charArray0[1] = '~';
      charArray0[2] = '\"';
      charArray0[3] = 'K';
      charArray0[4] = ']';
      charArray0[5] = 'U';
      charArray0[6] = 'w';
      jSONScanner0.scanFieldBigInteger(charArray0);
      jSONScanner0.scanStringArray(linkedList0, ';');
      assertEquals((-1), jSONScanner0.matchStat);
      
      char[] charArray1 = new char[0];
      jSONScanner0.scanFieldBoolean(charArray1);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("new");
      jSONReaderScanner0.scanFieldDate(charArray1);
      jSONReaderScanner0.scanFieldFloatArray(charArray1);
      jSONReaderScanner0.isBlankInput();
      jSONScanner0.scanDecimal('~');
      jSONScanner0.scanFieldLong(charArray1);
      assertEquals(989, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test370()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = 'y';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 93, 7);
      jSONReaderScanner0.isRef();
      jSONReaderScanner0.scanUUID('|');
      SymbolTable symbolTable0 = null;
      try {
        symbolTable0 = new SymbolTable((-211));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.SymbolTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test371()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("Zk$u3U|{-0Q~j#kZ");
      jSONReaderScanner0.eofPos = 102;
      char[] charArray0 = new char[2];
      charArray0[0] = '^';
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanNullOrNew();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse null or new
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test372()  throws Throwable  {
      StringReader stringReader0 = new StringReader("unclosed.str");
      stringReader0.reset();
      stringReader0.reset();
      char[] charArray0 = new char[1];
      stringReader0.skip((-3750763034362895579L));
      charArray0[0] = 'F';
      int int0 = JSONLexer.OBJECT;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0);
      jSONReaderScanner0.getLocale();
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 1);
      assertEquals(0, jSONScanner0.matchStat);
      
      jSONScanner0.scanDecimal('U');
      char[] charArray1 = new char[8];
      charArray1[0] = 'F';
      charArray1[1] = 'F';
      charArray1[2] = 'n';
      charArray1[3] = 'F';
      charArray1[4] = 'F';
      charArray1[5] = 'F';
      charArray1[6] = 'U';
      charArray1[7] = 'F';
      jSONScanner0.scanFieldLong(charArray1);
      assertEquals(989, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test373()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("");
      char[] charArray0 = new char[6];
      char char0 = 'S';
      charArray0[0] = 'S';
      charArray0[1] = 'S';
      charArray0[2] = '#';
      char char1 = 'l';
      jSONReaderScanner0.scanStringArray((Collection<String>) null, 'S');
      charArray0[3] = 'l';
      char char2 = '0';
      charArray0[4] = '0';
      char char3 = 'p';
      charArray0[5] = 'p';
      jSONReaderScanner0.scanFieldUUID(charArray0);
      jSONReaderScanner0.getTimeZone();
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner(charArray0, 806, 806);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test374()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("7DJI|j%%:#@D;* ", 1290);
      char[] charArray0 = new char[9];
      char char0 = '}';
      char[] charArray1 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray1, 0, 46);
      jSONReaderScanner0.scanFieldFloat(charArray0);
      jSONReaderScanner0.scanFieldString(charArray1);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.subString(26085, 46);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test375()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("new");
      jSONScanner0.sp = (-2225);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      jSONScanner0.setTimeZone((TimeZone) null);
      linkedList0.add("g-}>(/tG_:N^[ZM");
      char[] charArray0 = new char[7];
      charArray0[0] = '|';
      charArray0[1] = '~';
      charArray0[2] = '\"';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 0, 0);
      jSONReaderScanner0.scanFieldFloat(charArray0);
      jSONScanner0.scanFieldBoolean(charArray0);
      char[] charArray1 = new char[0];
      String string0 = jSONScanner0.scanFieldString(charArray1);
      assertNull(string0);
      
      jSONScanner0.scanFieldDate(charArray1);
      jSONScanner0.scanFieldDecimal(charArray1);
      jSONReaderScanner0.nextToken((-2225));
      jSONScanner0.indexOf('4', (-2225));
      jSONScanner0.getCurrent();
      jSONReaderScanner0.scanNumber();
      jSONReaderScanner0.bytesValue();
      jSONScanner0.scanDate('\"');
      Class<Object> class0 = Object.class;
      jSONScanner0.scanFieldStringArray(charArray1, class0);
      boolean boolean0 = jSONReaderScanner0.scanBoolean('|');
      assertFalse(boolean0);
      
      jSONReaderScanner0.scanDecimal('J');
      double double0 = jSONReaderScanner0.scanDouble('~');
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test376()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = '~';
      charArray0[1] = 'P';
      charArray0[2] = 'T';
      StringReader stringReader0 = new StringReader("\\4%T+APz>N*y(L>{u");
      stringReader0.read(charArray0);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0);
      jSONReaderScanner0.getLocale();
      Feature feature0 = Feature.CustomMapDeserializer;
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanSymbol((SymbolTable) null, 'N');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONReaderScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test377()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("7DJI|j%%:#@D;* ", 1290);
      char[] charArray0 = new char[9];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 18, 0);
      jSONReaderScanner0.scanFieldFloat(charArray0);
      jSONReaderScanner0.scanFieldString(charArray0);
      jSONReaderScanner0.subString(0, 7);
      jSONReaderScanner0.nextToken();
      jSONReaderScanner0.scanInt('}');
      JSONReaderScanner jSONReaderScanner1 = null;
      try {
        jSONReaderScanner1 = new JSONReaderScanner(charArray0, (-2193), 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.CharArrayReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test378()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = 'w';
      charArray0[1] = 'G';
      charArray0[2] = '4';
      charArray0[3] = '.';
      charArray0[4] = 'w';
      charArray0[5] = '\\';
      charArray0[6] = ';';
      int int0 = 0;
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 0, 0);
      jSONScanner0.scanFloat('G');
      Locale locale0 = Locale.PRC;
      locale0.getDisplayVariant();
      Locale locale1 = locale0.stripExtensions();
      locale1.getDisplayLanguage(locale0);
      JSONScanner jSONScanner1 = null;
      try {
        jSONScanner1 = new JSONScanner(charArray0, 12, (-1));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test379()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = '>';
      charArray0[1] = '~';
      charArray0[2] = '*';
      charArray0[3] = '\'';
      charArray0[4] = 'O';
      charArray0[5] = '0';
      charArray0[6] = '|';
      charArray0[7] = 'w';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 7, 34);
      jSONReaderScanner0.isRef();
      jSONReaderScanner0.scanUUID('C');
      jSONReaderScanner0.scanUUID('C');
      jSONReaderScanner0.getFeatures();
      SymbolTable symbolTable0 = new SymbolTable(43);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.addSymbol(710, (-211), 710, symbolTable0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test380()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("");
      jSONScanner0.nextToken(0);
      jSONScanner0.scanDate('q');
      char[] charArray0 = new char[3];
      boolean boolean0 = jSONScanner0.isEOF();
      assertEquals(20, jSONScanner0.token());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test381()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("", (-823));
      JSONScanner jSONScanner1 = new JSONScanner("");
      char[] charArray0 = new char[0];
      jSONScanner1.scanFieldDecimal(charArray0);
      assertEquals((-1), jSONScanner1.matchStat);
  }

  @Test(timeout = 4000)
  public void test382()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("");
      jSONScanner0.nextToken(0);
      jSONScanner0.scanDate('q');
      jSONScanner0.info();
      char[] charArray0 = new char[3];
      charArray0[0] = 'q';
      charArray0[1] = 'q';
      charArray0[2] = 'q';
      jSONScanner0.scanFieldString(charArray0);
      assertEquals(20, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test383()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(":r28BoD3Rg*VR<e*cZ", (-790));
      assertEquals(0, jSONScanner0.matchStat);
      
      char[] charArray0 = new char[6];
      charArray0[0] = '.';
      charArray0[1] = 'A';
      jSONScanner0.scanFieldString(charArray0);
      charArray0[2] = '{';
      charArray0[3] = '>';
      charArray0[4] = 'q';
      charArray0[5] = '9';
      jSONScanner0.scanFieldInt(charArray0);
      Class<Object> class0 = Object.class;
      jSONScanner0.newCollectionByType(class0);
      Class<String> class1 = String.class;
      jSONScanner0.scanFieldStringArray(charArray0, class1);
      jSONScanner0.matchField2(charArray0);
      assertEquals((-790), jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test384()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = 'y';
      charArray0[1] = 'r';
      charArray0[2] = 'C';
      charArray0[3] = 'r';
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 0);
      assertEquals(0, jSONScanner0.matchStat);
      
      jSONScanner0.scanDecimal('n');
      jSONScanner0.scanFieldLong(charArray0);
      assertEquals(989, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test385()  throws Throwable  {
      StringReader stringReader0 = new StringReader("unclosed.str");
      stringReader0.reset();
      stringReader0.reset();
      char[] charArray0 = new char[1];
      stringReader0.skip((-3750763034362895579L));
      charArray0[0] = 'F';
      stringReader0.read(charArray0);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0);
      jSONReaderScanner0.getLocale();
      Feature feature0 = Feature.CustomMapDeserializer;
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanSymbol((SymbolTable) null, 'K');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed.str
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test386()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("", 54);
      // Undeclared exception!
      try { 
        jSONScanner0.scanHex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal state. \u001A
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test387()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("'B^H_(G:", 0);
      jSONScanner0.tokenName();
      Class<String> class0 = String.class;
      // Undeclared exception!
      try { 
        jSONScanner0.newCollectionByType(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.String cannot be cast to java.util.Collection
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test388()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0, 15);
      jSONReaderScanner0.nextToken();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.doubleValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test389()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("Q~@");
      jSONReaderScanner0.isBlankInput();
      jSONReaderScanner0.stringVal();
      char[] charArray0 = new char[8];
      charArray0[0] = 'q';
      charArray0[1] = 'I';
      charArray0[2] = 'Q';
      charArray0[3] = 'B';
      charArray0[4] = ')';
      charArray0[5] = 'N';
      charArray0[6] = 'q';
      charArray0[7] = 'c';
      boolean boolean0 = jSONReaderScanner0.scanFieldBoolean(charArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test390()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("illegal identifier : ");
      jSONScanner0.bytesValue();
      char[] charArray0 = new char[6];
      charArray0[0] = 'x';
      charArray0[1] = 'A';
      charArray0[2] = ',';
      charArray0[3] = '!';
      charArray0[4] = 'L';
      charArray0[5] = '}';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 0, 0);
      jSONReaderScanner0.scanFieldLong(charArray0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.matchField2(charArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test391()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = '>';
      charArray0[1] = '~';
      charArray0[2] = '*';
      charArray0[3] = '\'';
      charArray0[4] = 'O';
      charArray0[5] = '0';
      charArray0[6] = '|';
      charArray0[7] = 'w';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 7, 34);
      jSONReaderScanner0.isRef();
      jSONReaderScanner0.scanUUID('C');
      SymbolTable symbolTable0 = new SymbolTable(43);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.addSymbol(710, (-211), 710, symbolTable0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test392()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("7DJI|j%%:#@D;* ", 1290);
      char[] charArray0 = new char[9];
      charArray0[0] = 'K';
      charArray0[1] = '[';
      charArray0[2] = 'C';
      charArray0[3] = 'H';
      charArray0[4] = 'L';
      charArray0[5] = 'h';
      charArray0[6] = '1';
      charArray0[7] = 'n';
      charArray0[8] = '1';
      jSONScanner0.scanFieldDecimal(charArray0);
      assertEquals((-2), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test393()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("@");
      char[] charArray0 = new char[5];
      charArray0[0] = 'K';
      charArray0[1] = 'b';
      charArray0[2] = 'R';
      charArray0[3] = ']';
      charArray0[4] = 'c';
      long long0 = jSONReaderScanner0.scanFieldLong(charArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test394()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = '~';
      charArray0[1] = 'P';
      charArray0[2] = 'T';
      charArray0[3] = '@';
      charArray0[4] = '\\';
      charArray0[5] = 'L';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 98);
      jSONReaderScanner0.info();
      jSONReaderScanner0.scanFieldBigInteger(charArray0);
      jSONReaderScanner0.close();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFieldUUID(charArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test395()  throws Throwable  {
      int int0 = 0;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("WriteEnumUsingToString", 0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.integerValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test396()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("new");
      jSONScanner0.sp = (-2225);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      jSONScanner0.setTimeZone((TimeZone) null);
      linkedList0.add("g-}>(/tG_:N^[ZM");
      char[] charArray0 = new char[7];
      charArray0[0] = '|';
      charArray0[1] = '~';
      charArray0[2] = '\"';
      charArray0[3] = 'K';
      charArray0[4] = ']';
      charArray0[5] = 'U';
      charArray0[6] = 'w';
      jSONScanner0.scanFieldBigInteger(charArray0);
      jSONScanner0.scanStringArray(linkedList0, ';');
      assertEquals((-1), jSONScanner0.matchStat);
      
      char[] charArray1 = new char[0];
      jSONScanner0.scanFieldBoolean(charArray1);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("new");
      jSONReaderScanner0.scanFieldDate(charArray1);
      jSONReaderScanner0.scanFieldFloatArray(charArray1);
      jSONReaderScanner0.isBlankInput();
      jSONScanner0.scanFieldSymbol(charArray1);
      jSONReaderScanner0.info();
      long long0 = jSONReaderScanner0.longValue();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test397()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("");
      jSONScanner0.scanType("");
      jSONScanner0.eofPos = (-2962);
      Class<String> class0 = String.class;
      // Undeclared exception!
      try { 
        jSONScanner0.newCollectionByType(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.String cannot be cast to java.util.Collection
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test398()  throws Throwable  {
      int int0 = (-2903);
      JSONScanner jSONScanner0 = new JSONScanner("L,tC?", (-2903));
      char[] charArray0 = new char[0];
      jSONScanner0.matchField2(charArray0);
      jSONScanner0.bytesValue();
      jSONScanner0.info();
      Class<String> class0 = String.class;
      char char0 = 'l';
      // Undeclared exception!
      try { 
        jSONScanner0.floatValue();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test399()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("");
      char[] charArray0 = new char[6];
      charArray0[0] = 'S';
      char char0 = 'j';
      charArray0[1] = 'j';
      charArray0[2] = '#';
      char char1 = 'l';
      charArray0[3] = 'l';
      char char2 = '0';
      charArray0[4] = '0';
      char char3 = 'p';
      charArray0[5] = 'p';
      jSONReaderScanner0.scanFieldUUID(charArray0);
      jSONReaderScanner0.getTimeZone();
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner(charArray0, 806, 806);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test400()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("Zk$u3U|{-0Q~j#kZ");
      jSONReaderScanner0.eofPos = 102;
      char[] charArray0 = new char[2];
      charArray0[0] = '^';
      charArray0[1] = '}';
      jSONReaderScanner0.scanFieldFloat(charArray0);
      jSONReaderScanner0.scanFieldString(charArray0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.subString((-502), (-502));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -502
         //
         verifyException("com.alibaba.fastjson.parser.JSONReaderScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test401()  throws Throwable  {
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
