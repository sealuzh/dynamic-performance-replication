/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 18 02:58:01 GMT 2018
 */

package wheel.asm;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.SequenceInputStream;
import java.util.Enumeration;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import wheel.asm.Attribute;
import wheel.asm.ClassReader;
import wheel.asm.ClassVisitor;
import wheel.asm.ClassWriter;
import wheel.asm.Label;
import wheel.asm.MethodWriter;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ClassReader_ESTest extends ClassReader_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      ClassReader classReader0 = null;
      try {
        classReader0 = new ClassReader(sequenceInputStream0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      byte[] byteArray0 = new byte[14];
      byteArray0[0] = (byte)68;
      byteArray0[1] = (byte)72;
      byteArray0[2] = (byte)112;
      byteArray0[3] = (byte)72;
      byteArray0[4] = (byte)124;
      byteArray0[5] = (byte) (-4);
      byteArray0[6] = (byte)0;
      ClassReader classReader0 = new ClassReader(byteArray0);
      // Undeclared exception!
      try { 
        classReader0.getClassName();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[14];
      ClassReader classReader0 = new ClassReader(byteArray0);
      // Undeclared exception!
      try { 
        classReader0.getItem((-190));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -190
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[14];
      ClassReader classReader0 = new ClassReader(byteArray0);
      // Undeclared exception!
      try { 
        classReader0.readByte(1908);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1908
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      ClassReader classReader0 = new ClassReader("org.apache.commons.io.filefilter.CanWriteFileFilter");
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      classReader0.readUnsignedShort(145);
      classReader0.getSuperName();
      // Undeclared exception!
      try { 
        classReader0.readInt((-1349));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1349
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      byte[] byteArray0 = new byte[20];
      ClassReader classReader0 = new ClassReader(byteArray0);
      ClassWriter classWriter0 = new ClassWriter(10);
      ClassReader classReader1 = new ClassReader(classReader0.b);
      classReader1.getInterfaces();
      char[] charArray0 = new char[7];
      charArray0[0] = 'k';
      charArray0[1] = 'k';
      charArray0[2] = '`';
      charArray0[3] = 'A';
      charArray0[4] = 'g';
      // Undeclared exception!
      try { 
        classReader0.readClass(1, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "S>");
      ClassReader classReader0 = new ClassReader("org.apache.commons.io.IOCase");
      ClassWriter classWriter0 = new ClassWriter(classReader0, 1);
      classReader0.copyPool(classWriter0);
      classWriter0.visitOuterClass("3<|", "The list of suffixes must not be null", "LocalVariableTypeTable");
      classWriter0.addUninitializedType("Exceptions", 8);
      classReader0.accept((ClassVisitor) classWriter0, (Attribute[]) null, 2);
      classReader0.getSuperName();
      classReader0.copyPool(classWriter0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("org.apache.commons.io.filefilter.HiddenFileFilter");
      ClassWriter classWriter0 = new ClassWriter(classReader0, 609);
      ClassWriter classWriter1 = new ClassWriter((-1175));
      classReader0.accept((ClassVisitor) classWriter0, 1);
      assertEquals(1, ClassReader.SKIP_CODE);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "S>");
      ClassReader classReader0 = new ClassReader("org.apache.commons.io.IOCase");
      ClassWriter classWriter0 = new ClassWriter(classReader0, 1);
      classReader0.copyPool(classWriter0);
      ClassWriter classWriter1 = new ClassWriter((-2402));
      MethodWriter methodWriter0 = classWriter0.lastMethod;
      classReader0.accept((ClassVisitor) classWriter0, (-1483));
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedInputStream pipedInputStream1 = new PipedInputStream();
      assertEquals(0, pipedInputStream1.available());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("org.apache.commons.io.IOCase");
      ClassWriter classWriter0 = new ClassWriter(classReader0, 1);
      ClassWriter classWriter1 = new ClassWriter(1531);
      MethodWriter methodWriter0 = classWriter0.lastMethod;
      classReader0.accept((ClassVisitor) classWriter0, (-2418));
      Label label0 = new Label();
      classReader0.getAccess();
      classReader0.accept((ClassVisitor) classWriter1, 125);
      assertEquals(1531, classReader0.header);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("org.apache.commons.io.IOCase");
      ClassWriter classWriter0 = new ClassWriter(8);
      ClassWriter classWriter1 = new ClassWriter(0);
      MethodWriter methodWriter0 = classWriter1.lastMethod;
      classReader0.accept((ClassVisitor) classWriter0, (-2822));
      assertNotSame(classWriter0, classWriter1);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("org.apache.commons.io.IOCase");
      ClassWriter classWriter0 = new ClassWriter(classReader0, 1);
      ClassWriter classWriter1 = new ClassWriter(classReader0, 1);
      ClassWriter classWriter2 = new ClassWriter((-1));
      ClassWriter classWriter3 = new ClassWriter(1531);
      MethodWriter methodWriter0 = classWriter3.lastMethod;
      ClassReader classReader1 = new ClassReader(classReader0.b);
      classReader1.accept((ClassVisitor) classWriter0, 4);
      Label label0 = new Label();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("org.apache.commons.io.IOCase");
      ClassWriter classWriter0 = new ClassWriter(8);
      ClassWriter classWriter1 = new ClassWriter(405);
      MethodWriter methodWriter0 = classWriter1.lastMethod;
      classReader0.accept((ClassVisitor) classWriter1, 8);
      assertEquals(1, ClassReader.SKIP_CODE);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("org.apache.commons.io.IOCase");
      ClassWriter classWriter0 = new ClassWriter(classReader0, 1);
      ClassWriter classWriter1 = new ClassWriter(1531);
      MethodWriter methodWriter0 = classWriter0.lastMethod;
      Label label0 = new Label();
      classReader0.getAccess();
      Label[] labelArray0 = new Label[9];
      labelArray0[0] = label0;
      labelArray0[1] = label0;
      labelArray0[2] = label0;
      labelArray0[3] = label0;
      labelArray0[4] = label0;
      labelArray0[5] = label0;
      labelArray0[6] = label0;
      labelArray0[7] = label0;
      labelArray0[8] = label0;
      classReader0.readLabel(1, labelArray0);
      assertEquals(49, classReader0.getAccess());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("org.apache.commons.io.IOCase");
      classReader0.getSuperName();
      ClassReader classReader1 = null;
      try {
        classReader1 = new ClassReader(classReader0.b, 2, 1531);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 47629
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("org.apache.commons.io.IOCase");
      classReader0.getInterfaces();
      assertEquals(1531, classReader0.header);
      
      String string0 = classReader0.getSuperName();
      assertEquals("java/lang/Object", string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("org.apache.commons.io.IOCase");
      ClassWriter classWriter0 = new ClassWriter(103);
      classReader0.accept((ClassVisitor) classWriter0, 1);
      ClassReader classReader1 = new ClassReader(classReader0.b);
      classReader1.getInterfaces();
      classReader1.accept((ClassVisitor) classWriter0, 48);
      char[] charArray0 = new char[2];
      charArray0[0] = 'T';
      charArray0[1] = '_';
      // Undeclared exception!
      try { 
        classReader0.readUTF8(103, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("org.apache.commons.io.IOCase");
      ClassWriter classWriter0 = new ClassWriter(5414);
      ClassWriter classWriter1 = new ClassWriter(1);
      MethodWriter methodWriter0 = classWriter0.lastMethod;
      ClassReader classReader1 = new ClassReader(classReader0.b);
      classReader0.accept((ClassVisitor) classWriter1, 5414);
      Label label0 = new Label();
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("org.apache.commons.io.IOCase");
      ClassWriter classWriter0 = new ClassWriter(classReader0, 1);
      ClassReader classReader1 = new ClassReader("wheel.asm.ClassWriter");
      classReader0.getSuperName();
      classReader1.getSuperName();
      ClassReader classReader2 = null;
      try {
        classReader2 = new ClassReader(classReader1.b, 8, 16777221);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 40476
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("org.apache.commons.io.IOCase");
      ClassWriter classWriter0 = new ClassWriter(classReader0, 1);
      ClassWriter classWriter1 = new ClassWriter(classReader0, 1);
      char[] charArray0 = new char[8];
      charArray0[0] = 'o';
      charArray0[1] = '^';
      charArray0[2] = 'l';
      charArray0[3] = 'M';
      charArray0[4] = '%';
      charArray0[5] = '+';
      charArray0[6] = ']';
      charArray0[7] = 't';
      // Undeclared exception!
      try { 
        classReader0.readConst(2, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("java/lang/String");
      ClassWriter classWriter0 = new ClassWriter(2);
      ClassWriter classWriter1 = new ClassWriter(277);
      MethodWriter methodWriter0 = classWriter0.lastMethod;
      classReader0.accept((ClassVisitor) classWriter1, 1);
      assertEquals(1, ClassReader.SKIP_CODE);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("java/lang/String");
      ClassWriter classWriter0 = new ClassWriter(classReader0, 8);
      ClassWriter classWriter1 = new ClassWriter(8);
      MethodWriter methodWriter0 = classWriter1.lastMethod;
      classReader0.accept((ClassVisitor) classWriter0, 2);
      assertEquals(4, ClassReader.SKIP_FRAMES);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("org.apache.commons.io.IOCase");
      ClassReader classReader1 = new ClassReader("wheel.asm.Type");
      ClassWriter classWriter0 = new ClassWriter(classReader0, 4);
      ClassWriter classWriter1 = new ClassWriter((-1485));
      MethodWriter methodWriter0 = classWriter1.lastMethod;
      classReader1.accept((ClassVisitor) classWriter1, 1);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("java/lang/String");
      ClassWriter classWriter0 = new ClassWriter(8);
      ClassWriter classWriter1 = new ClassWriter(2);
      MethodWriter methodWriter0 = classWriter1.lastMethod;
      classReader0.accept((ClassVisitor) classWriter0, (-1208));
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("java/lang/String");
      ClassWriter classWriter0 = new ClassWriter(2);
      ClassWriter classWriter1 = new ClassWriter(8);
      MethodWriter methodWriter0 = classWriter1.lastMethod;
      classReader0.accept((ClassVisitor) classWriter0, 2);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("java/lang/String");
      ClassWriter classWriter0 = new ClassWriter(65535);
      ClassWriter classWriter1 = new ClassWriter(7);
      ClassWriter classWriter2 = new ClassWriter(classReader0, 1);
      MethodWriter methodWriter0 = classWriter0.firstMethod;
      ClassReader classReader1 = new ClassReader(classReader0.b);
      ClassReader classReader2 = new ClassReader(classReader0.b);
      classReader0.accept((ClassVisitor) classWriter1, (-38));
      Label label0 = new Label();
      Label[] labelArray0 = new Label[0];
      classReader1.readLabel(7, labelArray0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("java/lang/String");
      ClassWriter classWriter0 = new ClassWriter(classReader0, 8);
      ClassWriter classWriter1 = new ClassWriter(8);
      ClassReader classReader1 = null;
      try {
        classReader1 = new ClassReader(classReader0.b, 185, 6892);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 46791
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("java/lang/String");
      ClassWriter classWriter0 = new ClassWriter(2);
      ClassWriter classWriter1 = new ClassWriter(382);
      MethodWriter methodWriter0 = classWriter0.lastMethod;
      classReader0.accept((ClassVisitor) classWriter0, 518);
  }
}
