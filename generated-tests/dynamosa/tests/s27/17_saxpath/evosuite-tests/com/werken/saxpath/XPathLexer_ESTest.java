/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 23 16:35:11 GMT 2019
 */

package com.werken.saxpath;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.werken.saxpath.Token;
import com.werken.saxpath.XPathLexer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class XPathLexer_ESTest extends XPathLexer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("com.werken.saxp'th.XPathLexer");
      Token token0 = xPathLexer0.identifier();
      assertEquals("com.werken.saxp", token0.getTokenText());
      assertEquals(15, token0.getTokenType());
      
      Token token1 = xPathLexer0.at();
      assertEquals(16, token1.getTokenType());
      assertEquals("'", token1.getTokenText());
      
      xPathLexer0.consume();
      Token token2 = xPathLexer0.dots();
      assertEquals(14, token2.getTokenType());
      assertEquals("h.", token2.getTokenText());
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(">2uPx");
      Token token0 = xPathLexer0.nextToken();
      assertEquals(9, token0.getTokenType());
      assertEquals(">", token0.getTokenText());
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("xY<");
      Token token0 = xPathLexer0.nextToken();
      assertEquals(15, token0.getTokenType());
      assertEquals("xY", token0.getTokenText());
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals(7, token1.getTokenType());
      assertEquals("<", token1.getTokenText());
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("Yo!#{");
      xPathLexer0.colon();
      Token token0 = xPathLexer0.operatorName();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.or();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.and();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("WM+");
      Token token0 = xPathLexer0.div();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("m");
      Token token0 = xPathLexer0.operatorName();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.mod();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("!frIHWLE}<L");
      Token token0 = xPathLexer0.nextToken();
      assertEquals("!", token0.getTokenText());
      assertEquals(23, token0.getTokenType());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("us-3W>[6=8%dr}*Qcoh");
      Token token0 = xPathLexer0.identifier();
      assertEquals("us-3W", token0.getTokenText());
      assertEquals(15, token0.getTokenType());
      
      Token token1 = xPathLexer0.relationalOperator();
      assertEquals(">", token1.getTokenText());
      assertEquals(9, token1.getTokenType());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("dy><Weu}qGmaFcN-K");
      Token token0 = xPathLexer0.operatorName();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.number();
      assertEquals(30, token0.getTokenType());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("com.werken.saxp'th.XPathLexer");
      Token token0 = xPathLexer0.nextToken();
      assertEquals(15, token0.getTokenType());
      assertEquals("com.werken.saxp", token0.getTokenText());
      
      Token token1 = xPathLexer0.doubleColon();
      assertEquals(19, token1.getTokenType());
      assertEquals("'t", token1.getTokenText());
      
      Token token2 = xPathLexer0.literal();
      assertEquals(27, token2.getTokenType());
      assertNotNull(token2);
      assertEquals(".XPat", token2.getTokenText());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.identifier();
      assertEquals(15, token0.getTokenType());
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("]I=F4TDIjSGE3");
      boolean boolean0 = xPathLexer0.hasMoreChars();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      boolean boolean0 = xPathLexer0.hasMoreChars();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      String string0 = xPathLexer0.getXPath();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("");
      String string0 = xPathLexer0.getXPath();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.getPreviousToken();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("com.werken.saxp'th.XPathLexer");
      xPathLexer0.nextToken();
      Token token0 = xPathLexer0.getPreviousToken();
      assertEquals(15, token0.getTokenType());
      assertEquals("com.werken.saxp", token0.getTokenText());
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("_3M#Pi2wl((9O t8S>");
      Token token0 = xPathLexer0.nextToken();
      assertEquals(15, token0.getTokenType());
      assertEquals("_3M", token0.getTokenText());
      
      xPathLexer0.nextToken();
      Token token1 = xPathLexer0.getPreviousToken();
      assertEquals("#Pi2wl((9O t8S>", token1.getTokenText());
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("");
      int int0 = xPathLexer0.endPosition();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("Q2?KK{Ha0VFP)v61g");
      int int0 = xPathLexer0.endPosition();
      assertEquals(17, int0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("^s`]ikl/C0<");
      int int0 = xPathLexer0.currentPosition();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("com.werken.saxp'th.XPathLexer");
      Token token0 = xPathLexer0.whitespace();
      assertEquals("", token0.getTokenText());
      assertEquals((-2), token0.getTokenType());
      
      int int0 = xPathLexer0.currentPosition();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.consume((-903));
      int int0 = xPathLexer0.currentPosition();
      assertEquals((-903), int0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("us-3W>[6=8%dr}*Qcoh");
      Token token0 = xPathLexer0.leftBracket();
      assertEquals("u", token0.getTokenText());
      
      xPathLexer0.minus();
      Token token1 = xPathLexer0.minus();
      assertEquals(6, token1.getTokenType());
      assertEquals("-", token1.getTokenText());
      
      xPathLexer0.leftBracket();
      Token token2 = xPathLexer0.leftParen();
      assertEquals("W", token2.getTokenText());
      assertEquals(1, token2.getTokenType());
      
      Token token3 = xPathLexer0.rightParen();
      assertEquals(2, token3.getTokenType());
      assertEquals(">", token3.getTokenText());
      
      Token token4 = xPathLexer0.at();
      assertEquals("[", token4.getTokenText());
      assertEquals(16, token4.getTokenType());
      
      Token token5 = xPathLexer0.slashes();
      assertEquals(11, token5.getTokenType());
      assertEquals("6", token5.getTokenText());
      
      Token token6 = xPathLexer0.colon();
      assertEquals(18, token6.getTokenType());
      assertEquals("=", token6.getTokenText());
      
      Token token7 = xPathLexer0.leftBracket();
      assertEquals(3, token7.getTokenType());
      
      char char0 = xPathLexer0.LA(0);
      assertEquals('8', char0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("com.werken.saxpath.XPathLexer");
      char char0 = xPathLexer0.LA(29);
      assertEquals('r', char0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.setXPath("");
      assertEquals("", xPathLexer0.getXPath());
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("GAZk)/pQ 9xB");
      xPathLexer0.setPreviousToken((Token) null);
      assertEquals("GAZk)/pQ 9xB", xPathLexer0.getXPath());
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("zANf0@d,:/81(WQ0MN");
      Token token0 = new Token(0, "zANf0@d,:/81(WQ0MN", 61, 0);
      xPathLexer0.setPreviousToken(token0);
      assertEquals(0, token0.getTokenType());
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("Q2?KK{Ha0VFP)v61g");
      Token token0 = xPathLexer0.whitespace();
      xPathLexer0.setPreviousToken(token0);
      assertEquals((-2), token0.getTokenType());
      assertEquals("", token0.getTokenText());
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("|pVHkdFS+kz|<NOMj");
      boolean boolean0 = xPathLexer0.isIdentifierStartChar('<');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      boolean boolean0 = xPathLexer0.isIdentifierStartChar('4');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("n(DP[M?rokcty");
      boolean boolean0 = xPathLexer0.isIdentifierStartChar('Z');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("D;H+`K4 =$#![/)c");
      boolean boolean0 = xPathLexer0.isIdentifierChar('%');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      boolean boolean0 = xPathLexer0.isIdentifierChar('4');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("zANf0@d,:/81(WQ0MN");
      boolean boolean0 = xPathLexer0.isIdentifierChar('A');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.consume(0);
      assertNull(xPathLexer0.getXPath());
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.consume(1111);
      assertNull(xPathLexer0.getXPath());
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("us-3W>[6=8%dr}*Qcoh");
      // Undeclared exception!
      try { 
        xPathLexer0.LA(0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("Q2?KK{Ha0VFP)v61g");
      char char0 = xPathLexer0.LA(562);
      assertEquals('\uFFFF', char0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("[ (");
      xPathLexer0.consume((-2119));
      // Undeclared exception!
      try { 
        xPathLexer0.whitespace();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.consume((-732));
      // Undeclared exception!
      try { 
        xPathLexer0.whitespace();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("com.weuken.sa0p'ph.XPathLexeN");
      xPathLexer0.consume((-5148));
      // Undeclared exception!
      try { 
        xPathLexer0.slashes();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.consume((-1182));
      // Undeclared exception!
      try { 
        xPathLexer0.slashes();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(") (");
      // Undeclared exception!
      try { 
        xPathLexer0.setXPath((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("[ (");
      xPathLexer0.consume((-4754));
      // Undeclared exception!
      try { 
        xPathLexer0.relationalOperator();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.consume((-2283));
      // Undeclared exception!
      try { 
        xPathLexer0.relationalOperator();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("cov.w^rke8.sT|v'th.PthLexer");
      xPathLexer0.consume((-5381));
      // Undeclared exception!
      try { 
        xPathLexer0.or();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.consume((-150));
      // Undeclared exception!
      try { 
        xPathLexer0.or();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(") (");
      xPathLexer0.consume((-3352));
      // Undeclared exception!
      try { 
        xPathLexer0.operatorName();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.consume((-1566));
      // Undeclared exception!
      try { 
        xPathLexer0.operatorName();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("03= 7W |Y8qz}J~:u$3");
      xPathLexer0.consume((-2));
      // Undeclared exception!
      try { 
        xPathLexer0.number();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.consume((-1148));
      // Undeclared exception!
      try { 
        xPathLexer0.number();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("_=iYT");
      xPathLexer0.consume((-275));
      // Undeclared exception!
      try { 
        xPathLexer0.nextToken();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.consume((-2));
      // Undeclared exception!
      try { 
        xPathLexer0.nextToken();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("mdO#NWxDx#s--^Rjoao");
      xPathLexer0.consume((-2203));
      // Undeclared exception!
      try { 
        xPathLexer0.mod();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.consume((-1027));
      // Undeclared exception!
      try { 
        xPathLexer0.mod();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("GG%XR}ail5bd");
      xPathLexer0.consume((-1037));
      // Undeclared exception!
      try { 
        xPathLexer0.literal();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.consume((-1823));
      // Undeclared exception!
      try { 
        xPathLexer0.literal();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("qzKt'+/:'U=x");
      xPathLexer0.consume((-156));
      // Undeclared exception!
      try { 
        xPathLexer0.identifierOrOperatorName();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.consume((-1402));
      // Undeclared exception!
      try { 
        xPathLexer0.identifierOrOperatorName();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("dy><WeuQ}qGqaFcNK");
      xPathLexer0.consume((-1));
      // Undeclared exception!
      try { 
        xPathLexer0.identifier();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.consume((-2110));
      // Undeclared exception!
      try { 
        xPathLexer0.identifier();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("com.werken.saxp'th.XPathLexer");
      xPathLexer0.consume((-1533));
      // Undeclared exception!
      try { 
        xPathLexer0.dots();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.consume((-1541));
      // Undeclared exception!
      try { 
        xPathLexer0.dots();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("!;frIHWLE}8<L");
      xPathLexer0.consume((-1));
      // Undeclared exception!
      try { 
        xPathLexer0.div();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.consume((-953));
      // Undeclared exception!
      try { 
        xPathLexer0.div();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.consume((-150));
      // Undeclared exception!
      try { 
        xPathLexer0.and();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(">+@+wKduA6!J WDz");
      // Undeclared exception!
      try { 
        xPathLexer0.LA((-1));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      // Undeclared exception!
      try { 
        xPathLexer0.LA((-2417));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      XPathLexer xPathLexer0 = null;
      try {
        xPathLexer0 = new XPathLexer((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(") (");
      Token token0 = xPathLexer0.whitespace();
      assertEquals((-2), token0.getTokenType());
      assertEquals("", token0.getTokenText());
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("^s`]ikl/C0<");
      Token token0 = xPathLexer0.nextToken();
      assertEquals("^s`]ikl/C0<", token0.getTokenText());
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("zANf0@d,:/81(WQ0MN");
      String string0 = xPathLexer0.getXPath();
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("GAZk)/pQ 9xB");
      Token token0 = xPathLexer0.literal();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("zANf0@d,6:/813WQ0MN");
      Token token0 = xPathLexer0.relationalOperator();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("GAZk)/pQ 9xB");
      Token token0 = xPathLexer0.identifierOrOperatorName();
      assertEquals(15, token0.getTokenType());
      assertEquals("GAZk", token0.getTokenText());
      assertNotNull(token0);
      
      Token token1 = xPathLexer0.leftBracket();
      assertEquals(")", token1.getTokenText());
      assertEquals(3, token1.getTokenType());
      
      xPathLexer0.consume();
      Token token2 = xPathLexer0.doubleColon();
      assertEquals("pQ", token2.getTokenText());
      assertEquals(19, token2.getTokenType());
      
      Token token3 = xPathLexer0.nextToken();
      assertEquals(30, token3.getTokenType());
      assertEquals("9", token3.getTokenText());
      
      Token token4 = xPathLexer0.star();
      assertEquals(20, token4.getTokenType());
      assertEquals("x", token4.getTokenText());
      
      Token token5 = xPathLexer0.whitespace();
      assertEquals("", token5.getTokenText());
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("GAZk)/pQ 9xB");
      Token token0 = xPathLexer0.or();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("zANf0@d,6:/813WQ0MN");
      Token token0 = xPathLexer0.div();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("GAZk)/pQ 9xB");
      Token token0 = xPathLexer0.mod();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("mE%_d.L^o|U?M42-j ");
      Token token0 = xPathLexer0.plus();
      assertEquals(5, token0.getTokenType());
      assertEquals("m", token0.getTokenText());
      
      Token token1 = xPathLexer0.minus();
      assertEquals(6, token1.getTokenType());
      assertEquals("E", token1.getTokenText());
      
      Token token2 = xPathLexer0.leftBracket();
      assertEquals(3, token2.getTokenType());
      assertEquals("%", token2.getTokenText());
      
      Token token3 = xPathLexer0.nextToken();
      assertEquals("_d.L", token3.getTokenText());
      assertEquals(15, token3.getTokenType());
      
      Token token4 = xPathLexer0.whitespace();
      assertEquals((-2), token4.getTokenType());
      assertEquals("", token4.getTokenText());
      
      Token token5 = xPathLexer0.nextToken();
      assertEquals("o|U?M42-j ", token5.getTokenText());
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("");
      xPathLexer0.nextToken();
      xPathLexer0.setXPath("com.werken.saxpath.XPathLexer");
      xPathLexer0.rightBracket();
      xPathLexer0.equals();
      Token token0 = xPathLexer0.identifierOrOperatorName();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.comma();
      xPathLexer0.setPreviousToken(token0);
      assertEquals(32, token0.getTokenType());
      
      Token token1 = xPathLexer0.identifierOrOperatorName();
      assertEquals(15, token1.getTokenType());
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("D;H+`K4 =$#![/)c");
      Token token0 = xPathLexer0.slashes();
      assertEquals(11, token0.getTokenType());
      assertEquals("D", token0.getTokenText());
      
      Token token1 = xPathLexer0.leftBracket();
      assertEquals(";", token1.getTokenText());
      assertEquals(3, token1.getTokenType());
      
      xPathLexer0.consume();
      Token token2 = xPathLexer0.nextToken();
      assertEquals("+", token2.getTokenText());
      assertEquals(5, token2.getTokenType());
      
      Token token3 = xPathLexer0.rightParen();
      assertEquals("`", token3.getTokenText());
      
      Token token4 = xPathLexer0.rightBracket();
      assertEquals(4, token4.getTokenType());
      
      Token token5 = xPathLexer0.doubleColon();
      assertEquals(19, token5.getTokenType());
      assertEquals("4 ", token5.getTokenText());
      
      Token token6 = xPathLexer0.minus();
      assertEquals("=", token6.getTokenText());
      assertEquals(6, token6.getTokenType());
      
      xPathLexer0.nextToken();
      Token token7 = xPathLexer0.equals();
      assertEquals("#", token7.getTokenText());
      assertEquals(21, token7.getTokenType());
      
      xPathLexer0.dollar();
      Token token8 = xPathLexer0.not();
      assertEquals(23, token8.getTokenType());
      assertEquals("[", token8.getTokenText());
      
      Token token9 = xPathLexer0.dollar();
      assertEquals(26, token9.getTokenType());
      assertEquals("/", token9.getTokenText());
      
      Token token10 = xPathLexer0.leftParen();
      assertEquals(")", token10.getTokenText());
      
      Token token11 = xPathLexer0.nextToken();
      assertEquals(15, token11.getTokenType());
      assertEquals("c", token11.getTokenText());
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.not();
      xPathLexer0.setPreviousToken(token0);
      Token token1 = xPathLexer0.identifierOrOperatorName();
      assertNull(token1);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("com.werken.saxp'th.XPathLexer");
      Token token0 = xPathLexer0.notEquals();
      xPathLexer0.setPreviousToken(token0);
      assertEquals("co", token0.getTokenText());
      assertEquals(22, token0.getTokenType());
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals(15, token1.getTokenType());
      assertEquals("m.werken.saxp", token1.getTokenText());
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.equals();
      xPathLexer0.setPreviousToken(token0);
      assertEquals(21, token0.getTokenType());
      
      Token token1 = xPathLexer0.identifierOrOperatorName();
      assertEquals(15, token1.getTokenType());
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.star();
      xPathLexer0.setPreviousToken(token0);
      assertEquals(20, token0.getTokenType());
      
      Token token1 = xPathLexer0.identifierOrOperatorName();
      assertEquals(15, token1.getTokenType());
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("O9rwfS]&w");
      Token token0 = xPathLexer0.doubleColon();
      xPathLexer0.setPreviousToken(token0);
      assertEquals("O9", token0.getTokenText());
      assertEquals(19, token0.getTokenType());
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals(15, token1.getTokenType());
      assertEquals("rwfS", token1.getTokenText());
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.pipe();
      xPathLexer0.setPreviousToken(token0);
      assertEquals(17, token0.getTokenType());
      
      Token token1 = xPathLexer0.identifierOrOperatorName();
      assertEquals(15, token1.getTokenType());
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("zANf0@d,:/81(WQ0MN");
      xPathLexer0.whitespace();
      Token token0 = xPathLexer0.whitespace();
      assertEquals((-2), token0.getTokenType());
      assertEquals("", token0.getTokenText());
      
      Token token1 = xPathLexer0.doubleColon();
      assertEquals(19, token1.getTokenType());
      assertEquals("Nf", token1.getTokenText());
      
      Token token2 = xPathLexer0.equals();
      assertEquals(21, token2.getTokenType());
      assertEquals("0", token2.getTokenText());
      
      Token token3 = xPathLexer0.nextToken();
      assertEquals("@", token3.getTokenText());
      assertEquals(16, token3.getTokenType());
      
      Token token4 = xPathLexer0.identifierOrOperatorName();
      assertEquals(15, token4.getTokenType());
      assertEquals("d", token4.getTokenText());
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("GAZk)/pQ 9xB");
      Token token0 = xPathLexer0.nextToken();
      assertEquals("GAZk", token0.getTokenText());
      
      Token token1 = xPathLexer0.slashes();
      xPathLexer0.setPreviousToken(token1);
      assertEquals(")/", token1.getTokenText());
      assertEquals(12, token1.getTokenType());
      
      Token token2 = xPathLexer0.identifierOrOperatorName();
      assertEquals(15, token2.getTokenType());
      assertEquals("pQ", token2.getTokenText());
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.minus();
      xPathLexer0.setPreviousToken(token0);
      assertEquals(6, token0.getTokenType());
      
      Token token1 = xPathLexer0.identifierOrOperatorName();
      assertEquals(15, token1.getTokenType());
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("D;H+`K4 =$#![/)c");
      Token token0 = xPathLexer0.slashes();
      assertEquals("D", token0.getTokenText());
      assertEquals(11, token0.getTokenType());
      
      Token token1 = xPathLexer0.leftBracket();
      assertEquals(";", token1.getTokenText());
      assertEquals(3, token1.getTokenType());
      
      xPathLexer0.consume();
      Token token2 = xPathLexer0.nextToken();
      assertEquals(5, token2.getTokenType());
      assertEquals("+", token2.getTokenText());
      
      Token token3 = xPathLexer0.identifierOrOperatorName();
      assertEquals(15, token3.getTokenType());
      assertEquals("", token3.getTokenText());
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("]SMA*2>|?M");
      Token token0 = xPathLexer0.nextToken();
      assertEquals(4, token0.getTokenType());
      assertEquals("]", token0.getTokenText());
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals("SMA*2>|?M", token1.getTokenText());
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.leftParen();
      xPathLexer0.setPreviousToken(token0);
      Token token1 = xPathLexer0.identifierOrOperatorName();
      assertNotNull(token1);
      assertEquals(15, token1.getTokenType());
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("fFl.9r2|Km^*xdT\"HP");
      Token token0 = xPathLexer0.star();
      assertEquals(20, token0.getTokenType());
      assertEquals("f", token0.getTokenText());
      
      Token token1 = xPathLexer0.doubleColon();
      assertEquals(19, token1.getTokenType());
      assertEquals("Fl", token1.getTokenText());
      
      Token token2 = xPathLexer0.nextToken();
      assertEquals(31, token2.getTokenType());
      assertEquals(".9", token2.getTokenText());
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("u|:)5gr(ADX'>MGo~(h");
      Token token0 = xPathLexer0.equals();
      assertEquals("u", token0.getTokenText());
      assertEquals(21, token0.getTokenType());
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals(17, token1.getTokenType());
      assertEquals("|", token1.getTokenText());
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("{3'<;");
      Token token0 = xPathLexer0.nextToken();
      assertEquals("{3'<;", token0.getTokenText());
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("zANf0@d,:/81(WQ0MN");
      xPathLexer0.setXPath(";s'76y>%R(f yk?Bu}\"");
      xPathLexer0.whitespace();
      Token token0 = xPathLexer0.whitespace();
      assertEquals((-2), token0.getTokenType());
      assertEquals("", token0.getTokenText());
      
      Token token1 = xPathLexer0.doubleColon();
      assertEquals(19, token1.getTokenType());
      assertEquals("'7", token1.getTokenText());
      
      Token token2 = xPathLexer0.equals();
      assertEquals(21, token2.getTokenType());
      assertEquals("6", token2.getTokenText());
      
      Token token3 = xPathLexer0.nextToken();
      assertEquals("y", token3.getTokenText());
      assertEquals(15, token3.getTokenType());
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("GAZk)/pQ 9xB");
      Token token0 = xPathLexer0.identifierOrOperatorName();
      assertEquals(15, token0.getTokenType());
      assertEquals("GAZk", token0.getTokenText());
      
      Token token1 = xPathLexer0.leftBracket();
      assertEquals(3, token1.getTokenType());
      assertEquals(")", token1.getTokenText());
      
      xPathLexer0.consume();
      Token token2 = xPathLexer0.doubleColon();
      assertEquals("pQ", token2.getTokenText());
      assertEquals(19, token2.getTokenType());
      
      Token token3 = xPathLexer0.nextToken();
      assertEquals("9", token3.getTokenText());
      assertEquals(30, token3.getTokenType());
      
      Token token4 = xPathLexer0.nextToken();
      assertEquals((-1), token4.getTokenType());
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("v&xOG");
      Token token0 = xPathLexer0.nextToken();
      assertEquals(15, token0.getTokenType());
      assertEquals("v", token0.getTokenText());
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("us-3W>[6=8%dr}*Qcoh");
      Token token0 = xPathLexer0.nextToken();
      assertEquals(15, token0.getTokenType());
      assertEquals("us-3W", token0.getTokenText());
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("com.werken.saxp'th.XPathLexer");
      Token token0 = xPathLexer0.at();
      assertEquals("c", token0.getTokenText());
      assertEquals(16, token0.getTokenType());
      
      Token token1 = xPathLexer0.rightBracket();
      assertEquals(4, token1.getTokenType());
      assertEquals("o", token1.getTokenText());
      
      xPathLexer0.minus();
      Token token2 = xPathLexer0.leftParen();
      assertEquals(1, token2.getTokenType());
      assertEquals(".", token2.getTokenText());
      
      Token token3 = xPathLexer0.nextToken();
      assertEquals(15, token3.getTokenType());
      assertEquals("werken.saxp", token3.getTokenText());
      
      Token token4 = xPathLexer0.minus();
      assertEquals("'", token4.getTokenText());
      assertEquals(6, token4.getTokenType());
      
      Token token5 = xPathLexer0.nextToken();
      assertEquals("th.XPathLexer", token5.getTokenText());
      assertEquals((-1), token5.getTokenType());
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("sZ 7vLF)");
      Token token0 = xPathLexer0.nextToken();
      assertEquals(15, token0.getTokenType());
      assertEquals("sZ", token0.getTokenText());
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("pSVmk(BW57q^");
      Token token0 = xPathLexer0.nextToken();
      assertEquals(15, token0.getTokenType());
      assertEquals("pSVmk", token0.getTokenText());
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("n1'2prC9gP^}1unC");
      Token token0 = xPathLexer0.nextToken();
      assertEquals(15, token0.getTokenType());
      assertEquals("n1", token0.getTokenText());
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("GG%XR}ail/T5bd");
      Token token0 = xPathLexer0.nextToken();
      assertEquals("GG", token0.getTokenText());
      assertEquals(15, token0.getTokenType());
      
      Token token1 = xPathLexer0.whitespace();
      assertEquals((-2), token1.getTokenType());
      assertEquals("", token1.getTokenText());
      
      Token token2 = xPathLexer0.comma();
      assertEquals("X", token2.getTokenText());
      assertEquals(32, token2.getTokenType());
      
      Token token3 = xPathLexer0.dollar();
      assertEquals(26, token3.getTokenType());
      assertEquals("R", token3.getTokenText());
      
      Token token4 = xPathLexer0.rightBracket();
      assertEquals("}", token4.getTokenText());
      assertEquals(4, token4.getTokenType());
      
      Token token5 = xPathLexer0.not();
      assertEquals("a", token5.getTokenText());
      assertEquals(23, token5.getTokenType());
      
      Token token6 = xPathLexer0.minus();
      assertEquals(6, token6.getTokenType());
      assertEquals("i", token6.getTokenText());
      
      Token token7 = xPathLexer0.nextToken();
      assertEquals("l/T5bd", token7.getTokenText());
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(".kn?");
      Token token0 = xPathLexer0.nextToken();
      assertEquals(".", token0.getTokenText());
      assertEquals(13, token0.getTokenType());
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals("kn?", token1.getTokenText());
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("jb{3'<;");
      Token token0 = xPathLexer0.nextToken();
      assertEquals("jb", token0.getTokenText());
      assertEquals(15, token0.getTokenType());
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("i1py_ZX*dEg");
      Token token0 = xPathLexer0.nextToken();
      assertEquals(15, token0.getTokenType());
      assertEquals("i1py_ZX", token0.getTokenText());
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("hAox@pdKO:bR");
      Token token0 = xPathLexer0.nextToken();
      assertEquals(15, token0.getTokenType());
      assertEquals("hAox", token0.getTokenText());
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("glkv)5+FhaI|");
      Token token0 = xPathLexer0.nextToken();
      assertEquals("glkv", token0.getTokenText());
      assertEquals(15, token0.getTokenType());
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("zANf0@d,:/81(WQ0MN");
      Token token0 = xPathLexer0.whitespace();
      assertEquals("", token0.getTokenText());
      assertEquals((-2), token0.getTokenType());
      
      Token token1 = xPathLexer0.comma();
      assertEquals("A", token1.getTokenText());
      assertEquals(32, token1.getTokenType());
      
      Token token2 = xPathLexer0.dollar();
      assertEquals(26, token2.getTokenType());
      assertEquals("N", token2.getTokenText());
      
      Token token3 = xPathLexer0.nextToken();
      assertEquals(15, token3.getTokenType());
      assertEquals("f0", token3.getTokenText());
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("ve)~hLdOd~'");
      Token token0 = xPathLexer0.leftBracket();
      assertEquals(3, token0.getTokenType());
      assertEquals("v", token0.getTokenText());
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals("e", token1.getTokenText());
      assertEquals(15, token1.getTokenType());
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("zANf0@d,:/81(WQ0MN");
      Token token0 = xPathLexer0.nextToken();
      assertEquals(15, token0.getTokenType());
      assertEquals("zANf0", token0.getTokenText());
      
      Token token1 = xPathLexer0.slashes();
      assertEquals(11, token1.getTokenType());
      assertEquals("@", token1.getTokenText());
      
      Token token2 = xPathLexer0.nextToken();
      assertEquals((-1), token2.getTokenType());
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("jb{3'<;");
      Token token0 = xPathLexer0.star();
      assertEquals(20, token0.getTokenType());
      assertEquals("j", token0.getTokenText());
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals(15, token1.getTokenType());
      assertEquals("b", token1.getTokenText());
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("com.werken.saxp'th.XPathLexer");
      Token token0 = xPathLexer0.nextToken();
      assertEquals("com.werken.saxp", token0.getTokenText());
      assertEquals(15, token0.getTokenType());
      
      xPathLexer0.whitespace();
      Token token1 = xPathLexer0.whitespace();
      assertEquals((-2), token1.getTokenType());
      
      Token token2 = xPathLexer0.doubleColon();
      assertEquals(19, token2.getTokenType());
      assertEquals("h.", token2.getTokenText());
      
      Token token3 = xPathLexer0.equals();
      assertEquals("X", token3.getTokenText());
      assertEquals(21, token3.getTokenType());
      
      Token token4 = xPathLexer0.minus();
      assertEquals(6, token4.getTokenType());
      assertEquals("P", token4.getTokenText());
      
      Token token5 = xPathLexer0.nextToken();
      assertEquals((-1), token5.getTokenType());
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("^s`]ikl/C0<");
      Token token0 = xPathLexer0.at();
      assertEquals(16, token0.getTokenType());
      assertEquals("^", token0.getTokenText());
      
      Token token1 = xPathLexer0.identifierOrOperatorName();
      assertNotNull(token1);
      assertEquals(15, token1.getTokenType());
      assertEquals("s", token1.getTokenText());
      
      Token token2 = xPathLexer0.nextToken();
      assertEquals("`]ikl/C0<", token2.getTokenText());
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("n(DP[M?rokcty");
      Token token0 = xPathLexer0.minus();
      assertEquals("n", token0.getTokenText());
      assertEquals(6, token0.getTokenType());
      
      Token token1 = xPathLexer0.rightBracket();
      assertEquals(4, token1.getTokenType());
      assertEquals("(", token1.getTokenText());
      
      xPathLexer0.consume();
      Token token2 = xPathLexer0.plus();
      assertEquals("P", token2.getTokenText());
      assertEquals(5, token2.getTokenType());
      
      Token token3 = xPathLexer0.nextToken();
      assertEquals("[", token3.getTokenText());
      
      Token token4 = xPathLexer0.dollar();
      assertEquals(26, token4.getTokenType());
      assertEquals("M", token4.getTokenText());
      
      Token token5 = xPathLexer0.slashes();
      assertEquals(11, token5.getTokenType());
      assertEquals("?", token5.getTokenText());
      
      Token token6 = xPathLexer0.nextToken();
      assertEquals(15, token6.getTokenType());
      assertEquals("rokcty", token6.getTokenText());
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("GAZk)/pQ 9xB");
      Token token0 = xPathLexer0.minus();
      assertEquals(6, token0.getTokenType());
      assertEquals("G", token0.getTokenText());
      
      Token token1 = xPathLexer0.rightBracket();
      assertEquals("A", token1.getTokenText());
      assertEquals(4, token1.getTokenType());
      
      Token token2 = xPathLexer0.nextToken();
      assertEquals("Zk", token2.getTokenText());
      assertEquals(15, token2.getTokenType());
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("com.werken.saxp'th.XPathLexer");
      Token token0 = xPathLexer0.at();
      assertEquals(16, token0.getTokenType());
      assertEquals("c", token0.getTokenText());
      
      xPathLexer0.rightBracket();
      xPathLexer0.minus();
      Token token1 = xPathLexer0.leftParen();
      assertEquals(".", token1.getTokenText());
      
      Token token2 = xPathLexer0.nextToken();
      assertEquals(15, token2.getTokenType());
      assertEquals("werken.saxp", token2.getTokenText());
      
      Token token3 = xPathLexer0.minus();
      assertEquals(6, token3.getTokenType());
      assertEquals("'", token3.getTokenText());
      
      xPathLexer0.leftParen();
      Token token4 = xPathLexer0.rightBracket();
      assertEquals(4, token4.getTokenType());
      assertEquals("h", token4.getTokenText());
      
      Token token5 = xPathLexer0.leftBracket();
      assertEquals(".", token5.getTokenText());
      assertEquals(3, token5.getTokenType());
      
      Token token6 = xPathLexer0.nextToken();
      assertEquals((-1), token6.getTokenType());
      assertEquals("XPathLexer", token6.getTokenText());
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("zANf0@d,:/81(WQ0MN");
      Token token0 = xPathLexer0.nextToken();
      assertEquals("zANf0", token0.getTokenText());
      
      xPathLexer0.whitespace();
      Token token1 = xPathLexer0.whitespace();
      assertEquals((-2), token1.getTokenType());
      
      Token token2 = xPathLexer0.doubleColon();
      assertEquals(19, token2.getTokenType());
      assertEquals(",", token2.getTokenText());
      
      Token token3 = xPathLexer0.nextToken();
      assertEquals(18, token3.getTokenType());
      assertEquals(":", token3.getTokenText());
      
      xPathLexer0.equals();
      Token token4 = xPathLexer0.equals();
      assertEquals("8", token4.getTokenText());
      assertEquals(21, token4.getTokenType());
      
      Token token5 = xPathLexer0.not();
      assertEquals("1", token5.getTokenText());
      assertEquals(23, token5.getTokenType());
      
      Token token6 = xPathLexer0.minus();
      assertEquals(6, token6.getTokenType());
      
      Token token7 = xPathLexer0.nextToken();
      assertEquals(15, token7.getTokenType());
      assertEquals("WQ0MN", token7.getTokenText());
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("GG%XR}ail/T5bd");
      Token token0 = xPathLexer0.nextToken();
      assertEquals("GG", token0.getTokenText());
      assertEquals(15, token0.getTokenType());
      
      Token token1 = xPathLexer0.whitespace();
      assertEquals((-2), token1.getTokenType());
      assertEquals("", token1.getTokenText());
      
      Token token2 = xPathLexer0.comma();
      assertEquals("X", token2.getTokenText());
      assertEquals(32, token2.getTokenType());
      
      xPathLexer0.dollar();
      Token token3 = xPathLexer0.rightBracket();
      assertEquals(4, token3.getTokenType());
      assertEquals("}", token3.getTokenText());
      
      Token token4 = xPathLexer0.doubleColon();
      assertEquals("ai", token4.getTokenText());
      assertEquals(19, token4.getTokenType());
      
      Token token5 = xPathLexer0.dollar();
      assertEquals(26, token5.getTokenType());
      assertEquals("l", token5.getTokenText());
      
      Token token6 = xPathLexer0.not();
      assertEquals("/", token6.getTokenText());
      assertEquals(23, token6.getTokenType());
      
      Token token7 = xPathLexer0.nextToken();
      assertEquals("T5bd", token7.getTokenText());
      assertEquals((-1), token7.getTokenType());
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("Rn]wi");
      Token token0 = xPathLexer0.nextToken();
      assertEquals("Rn", token0.getTokenText());
      assertEquals(15, token0.getTokenType());
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("zANf0@d,:/81(WQ0MN");
      xPathLexer0.nextToken();
      xPathLexer0.whitespace();
      Token token0 = xPathLexer0.whitespace();
      assertEquals((-2), token0.getTokenType());
      assertEquals("", token0.getTokenText());
      
      Token token1 = xPathLexer0.doubleColon();
      assertEquals(",", token1.getTokenText());
      assertEquals(19, token1.getTokenType());
      
      xPathLexer0.equals();
      Token token2 = xPathLexer0.nextToken();
      assertEquals("/", token2.getTokenText());
      assertEquals(11, token2.getTokenType());
      
      xPathLexer0.equals();
      Token token3 = xPathLexer0.equals();
      assertEquals("1", token3.getTokenText());
      assertEquals(21, token3.getTokenType());
      
      Token token4 = xPathLexer0.not();
      assertEquals("(", token4.getTokenText());
      assertEquals(23, token4.getTokenType());
      
      Token token5 = xPathLexer0.minus();
      assertEquals("W", token5.getTokenText());
      assertEquals(6, token5.getTokenType());
      
      Token token6 = xPathLexer0.nextToken();
      assertEquals(15, token6.getTokenType());
      assertEquals("Q0MN", token6.getTokenText());
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("P8Z :6");
      Token token0 = xPathLexer0.nextToken();
      assertEquals(15, token0.getTokenType());
      assertEquals("P8Z", token0.getTokenText());
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("O|tH");
      Token token0 = xPathLexer0.nextToken();
      assertEquals("O", token0.getTokenText());
      assertEquals(15, token0.getTokenType());
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("fNM_EyYT k>|I,-[;");
      Token token0 = xPathLexer0.whitespace();
      assertEquals((-2), token0.getTokenType());
      assertEquals("", token0.getTokenText());
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals(15, token1.getTokenType());
      assertEquals("NM_EyYT", token1.getTokenText());
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("KFwex");
      Token token0 = xPathLexer0.nextToken();
      assertEquals("KFwex", token0.getTokenText());
      assertEquals(15, token0.getTokenType());
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("Je::cq'");
      Token token0 = xPathLexer0.nextToken();
      assertEquals("Je", token0.getTokenText());
      assertEquals(15, token0.getTokenType());
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("I2Blbo G*#>[f");
      Token token0 = xPathLexer0.nextToken();
      assertEquals(15, token0.getTokenType());
      assertEquals("I2Blbo", token0.getTokenText());
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("D;H>+`K4 =$#![/)c");
      Token token0 = xPathLexer0.equals();
      assertEquals("D", token0.getTokenText());
      assertEquals(21, token0.getTokenType());
      
      Token token1 = xPathLexer0.whitespace();
      assertEquals("", token1.getTokenText());
      assertEquals((-2), token1.getTokenType());
      
      Token token2 = xPathLexer0.nextToken();
      assertEquals("H", token2.getTokenText());
      assertEquals(15, token2.getTokenType());
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("F(<rl M\"bV.");
      Token token0 = xPathLexer0.nextToken();
      assertEquals("F", token0.getTokenText());
      assertEquals(15, token0.getTokenType());
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("E>qMtYl(9NX2]w");
      Token token0 = xPathLexer0.nextToken();
      assertEquals("E", token0.getTokenText());
      assertEquals(15, token0.getTokenType());
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("D;H+`K4 =$#![/)c");
      Token token0 = xPathLexer0.nextToken();
      assertEquals("D", token0.getTokenText());
      assertEquals(15, token0.getTokenType());
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("C:w:ps5IV*bBsC: ");
      Token token0 = xPathLexer0.nextToken();
      assertEquals("C", token0.getTokenText());
      assertEquals(15, token0.getTokenType());
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("?8P{B8;m-U@p.");
      Token token0 = xPathLexer0.nextToken();
      assertEquals("?8P{B8;m-U@p.", token0.getTokenText());
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(">Lju?!u,j+W;&F>z");
      Token token0 = xPathLexer0.nextToken();
      assertEquals(">", token0.getTokenText());
      assertEquals(9, token0.getTokenType());
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals(15, token1.getTokenType());
      assertEquals("Lju", token1.getTokenText());
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("<)vWW@twU");
      Token token0 = xPathLexer0.nextToken();
      assertEquals(7, token0.getTokenType());
      assertEquals("<", token0.getTokenText());
      
      Token token1 = xPathLexer0.identifierOrOperatorName();
      assertEquals(15, token1.getTokenType());
      assertEquals("", token1.getTokenText());
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("D;H+`K4 =$#![/)c");
      Token token0 = xPathLexer0.rightBracket();
      assertEquals("D", token0.getTokenText());
      assertEquals(4, token0.getTokenType());
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals(";H+`K4 =$#![/)c", token1.getTokenText());
      assertEquals((-1), token1.getTokenType());
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("GAZk)/pQ 9xB");
      Token token0 = xPathLexer0.identifierOrOperatorName();
      assertEquals(15, token0.getTokenType());
      assertEquals("GAZk", token0.getTokenText());
      
      Token token1 = xPathLexer0.leftBracket();
      assertEquals(3, token1.getTokenType());
      assertEquals(")", token1.getTokenText());
      
      xPathLexer0.consume();
      Token token2 = xPathLexer0.doubleColon();
      assertEquals(19, token2.getTokenType());
      assertEquals("pQ", token2.getTokenText());
      
      Token token3 = xPathLexer0.nextToken();
      assertEquals("9", token3.getTokenText());
      assertEquals(30, token3.getTokenType());
      
      Token token4 = xPathLexer0.star();
      assertEquals(20, token4.getTokenType());
      assertEquals("x", token4.getTokenText());
      
      Token token5 = xPathLexer0.nextToken();
      assertEquals("B", token5.getTokenText());
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("7/Tz9D");
      Token token0 = xPathLexer0.nextToken();
      assertEquals(30, token0.getTokenType());
      assertEquals("7", token0.getTokenText());
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("zANf0@d,6:/813WQ0MN");
      Token token0 = xPathLexer0.nextToken();
      assertEquals("zANf0", token0.getTokenText());
      assertEquals(15, token0.getTokenType());
      
      Token token1 = xPathLexer0.whitespace();
      assertEquals("", token1.getTokenText());
      assertEquals((-2), token1.getTokenType());
      
      Token token2 = xPathLexer0.colon();
      assertEquals(18, token2.getTokenType());
      assertEquals("d", token2.getTokenText());
      
      Token token3 = xPathLexer0.leftBracket();
      assertEquals(3, token3.getTokenType());
      assertEquals(",", token3.getTokenText());
      
      Token token4 = xPathLexer0.nextToken();
      assertEquals(30, token4.getTokenType());
      assertEquals("6", token4.getTokenText());
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("GG%XR}ail/T5bd");
      Token token0 = xPathLexer0.nextToken();
      assertEquals("GG", token0.getTokenText());
      assertEquals(15, token0.getTokenType());
      
      Token token1 = xPathLexer0.whitespace();
      assertEquals((-2), token1.getTokenType());
      assertEquals("", token1.getTokenText());
      
      Token token2 = xPathLexer0.comma();
      assertEquals(32, token2.getTokenType());
      assertEquals("X", token2.getTokenText());
      
      xPathLexer0.dollar();
      Token token3 = xPathLexer0.rightBracket();
      assertEquals("}", token3.getTokenText());
      assertEquals(4, token3.getTokenType());
      
      Token token4 = xPathLexer0.doubleColon();
      assertEquals(19, token4.getTokenType());
      assertEquals("ai", token4.getTokenText());
      
      xPathLexer0.dollar();
      Token token5 = xPathLexer0.not();
      assertEquals("/", token5.getTokenText());
      assertEquals(23, token5.getTokenType());
      
      Token token6 = xPathLexer0.dollar();
      assertEquals("T", token6.getTokenText());
      assertEquals(26, token6.getTokenType());
      
      Token token7 = xPathLexer0.nextToken();
      assertEquals(30, token7.getTokenType());
      assertEquals("5", token7.getTokenText());
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("4_1");
      Token token0 = xPathLexer0.nextToken();
      assertEquals("4", token0.getTokenText());
      assertEquals(30, token0.getTokenType());
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals((-1), token1.getTokenType());
      assertEquals("_1", token1.getTokenText());
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("3dEH[;?8pb");
      Token token0 = xPathLexer0.nextToken();
      assertEquals(30, token0.getTokenType());
      assertEquals("3", token0.getTokenText());
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(">2uPx");
      Token token0 = xPathLexer0.whitespace();
      assertEquals((-2), token0.getTokenType());
      assertEquals("", token0.getTokenText());
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals(30, token1.getTokenType());
      assertEquals("2", token1.getTokenText());
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("1aK<5E,");
      Token token0 = xPathLexer0.nextToken();
      assertEquals("1", token0.getTokenText());
      assertEquals(30, token0.getTokenType());
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals("aK<5E,", token1.getTokenText());
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("0c\u0001@=005 .>)-.:|");
      Token token0 = xPathLexer0.nextToken();
      assertEquals(30, token0.getTokenType());
      assertEquals("0", token0.getTokenText());
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(".2,_5_?w>E4");
      xPathLexer0.nextToken();
      Token token0 = xPathLexer0.identifierOrOperatorName();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("-.bOIWEqG");
      Token token0 = xPathLexer0.nextToken();
      assertEquals(6, token0.getTokenType());
      assertEquals("-", token0.getTokenText());
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("zANf0@d,6:/813WQ0MN");
      xPathLexer0.nextToken();
      xPathLexer0.whitespace();
      Token token0 = xPathLexer0.whitespace();
      assertEquals("", token0.getTokenText());
      assertEquals((-2), token0.getTokenType());
      
      xPathLexer0.colon();
      Token token1 = xPathLexer0.leftBracket();
      assertEquals("6", token1.getTokenText());
      assertEquals(3, token1.getTokenType());
      
      Token token2 = xPathLexer0.nextToken();
      assertEquals(":", token2.getTokenText());
      assertEquals(18, token2.getTokenType());
      
      xPathLexer0.setXPath("zANf0@d,6:/813WQ0MN");
      Token token3 = xPathLexer0.nextToken();
      assertEquals(15, token3.getTokenType());
      assertEquals("zANf0", token3.getTokenText());
      
      Token token4 = xPathLexer0.dollar();
      assertEquals("@", token4.getTokenText());
      assertEquals(26, token4.getTokenType());
      
      Token token5 = xPathLexer0.leftParen();
      assertEquals(1, token5.getTokenType());
      assertEquals("d", token5.getTokenText());
      
      Token token6 = xPathLexer0.nextToken();
      assertEquals(",", token6.getTokenText());
      assertEquals(32, token6.getTokenType());
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("D;H+`K4 =$#![/)c");
      Token token0 = xPathLexer0.slashes();
      assertEquals(11, token0.getTokenType());
      assertEquals("D", token0.getTokenText());
      
      Token token1 = xPathLexer0.leftBracket();
      assertEquals(";", token1.getTokenText());
      assertEquals(3, token1.getTokenType());
      
      xPathLexer0.consume();
      Token token2 = xPathLexer0.nextToken();
      assertEquals(5, token2.getTokenType());
      assertEquals("+", token2.getTokenText());
      
      Token token3 = xPathLexer0.rightParen();
      assertEquals("`", token3.getTokenText());
      assertEquals(2, token3.getTokenType());
      
      xPathLexer0.equals();
      xPathLexer0.consume();
      Token token4 = xPathLexer0.nextToken();
      assertEquals(21, token4.getTokenType());
      assertEquals("=", token4.getTokenText());
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("*yv");
      Token token0 = xPathLexer0.nextToken();
      assertEquals(20, token0.getTokenType());
      assertEquals("*", token0.getTokenText());
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(")");
      xPathLexer0.nextToken();
      Token token0 = xPathLexer0.identifierOrOperatorName();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("V(}P'1 Ssu>");
      Token token0 = xPathLexer0.nextToken();
      assertEquals("V", token0.getTokenText());
      assertEquals(15, token0.getTokenType());
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals(1, token1.getTokenType());
      assertEquals("(", token1.getTokenText());
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("qzKt'M+/I:'U=x");
      Token token0 = xPathLexer0.nextToken();
      assertEquals(15, token0.getTokenType());
      assertEquals("qzKt", token0.getTokenText());
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals("M+/I:", token1.getTokenText());
      assertEquals(27, token1.getTokenType());
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("9`(-&s#:OEsVzk$_to");
      xPathLexer0.minus();
      xPathLexer0.rightBracket();
      xPathLexer0.consume();
      xPathLexer0.plus();
      xPathLexer0.nextToken();
      Token token0 = xPathLexer0.identifierOrOperatorName();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("%1ur.&lWzhf~dqKE4u#");
      Token token0 = xPathLexer0.nextToken();
      assertEquals("%1ur.&lWzhf~dqKE4u#", token0.getTokenText());
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("\"7$Th,\"-romG");
      xPathLexer0.nextToken();
      Token token0 = xPathLexer0.identifierOrOperatorName();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("YO!#{");
      Token token0 = xPathLexer0.nextToken();
      assertEquals(15, token0.getTokenType());
      assertEquals("YO", token0.getTokenText());
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals("!", token1.getTokenText());
      assertEquals(23, token1.getTokenType());
      
      Token token2 = xPathLexer0.nextToken();
      assertEquals("#{", token2.getTokenText());
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(" ^*y0^\"@=Rsplh5m");
      xPathLexer0.consume((-442));
      // Undeclared exception!
      try { 
        xPathLexer0.and();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("mE%_d.L^o|U?M42-j ");
      Token token0 = xPathLexer0.plus();
      assertEquals("m", token0.getTokenText());
      assertEquals(5, token0.getTokenType());
      
      Token token1 = xPathLexer0.notEquals();
      assertEquals(22, token1.getTokenType());
      assertEquals("E%", token1.getTokenText());
      
      Token token2 = xPathLexer0.minus();
      assertEquals(6, token2.getTokenType());
      assertEquals("_", token2.getTokenText());
      
      Token token3 = xPathLexer0.leftBracket();
      assertEquals("d", token3.getTokenText());
      assertEquals(3, token3.getTokenType());
      
      Token token4 = xPathLexer0.pipe();
      assertEquals(17, token4.getTokenType());
      assertEquals(".", token4.getTokenText());
      
      Token token5 = xPathLexer0.not();
      assertEquals("L", token5.getTokenText());
      assertEquals(23, token5.getTokenType());
      
      Token token6 = xPathLexer0.slashes();
      assertEquals("^", token6.getTokenText());
      assertEquals(11, token6.getTokenType());
      
      Token token7 = xPathLexer0.nextToken();
      assertEquals("o", token7.getTokenText());
      assertEquals(15, token7.getTokenType());
      
      Token token8 = xPathLexer0.whitespace();
      assertEquals((-2), token8.getTokenType());
      
      Token token9 = xPathLexer0.nextToken();
      assertEquals("U?M42-j ", token9.getTokenText());
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("zANf0@d,6:/813WQ0MN");
      Token token0 = xPathLexer0.minus();
      assertEquals(6, token0.getTokenType());
      assertEquals("z", token0.getTokenText());
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals(15, token1.getTokenType());
      assertEquals("ANf0", token1.getTokenText());
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("zANf0@d,:/81(WQ0MN");
      Token token0 = xPathLexer0.nextToken();
      assertEquals(15, token0.getTokenType());
      assertEquals("zANf0", token0.getTokenText());
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals("@", token1.getTokenText());
      assertEquals(16, token1.getTokenType());
      
      Token token2 = xPathLexer0.slashes();
      assertEquals(11, token2.getTokenType());
      assertEquals("d", token2.getTokenText());
      
      Token token3 = xPathLexer0.whitespace();
      assertEquals((-2), token3.getTokenType());
      
      Token token4 = xPathLexer0.doubleColon();
      assertEquals(":", token4.getTokenText());
      assertEquals(19, token4.getTokenType());
      
      xPathLexer0.equals();
      Token token5 = xPathLexer0.nextToken();
      assertEquals("81", token5.getTokenText());
      assertEquals(30, token5.getTokenType());
      
      xPathLexer0.equals();
      Token token6 = xPathLexer0.equals();
      assertEquals("W", token6.getTokenText());
      assertEquals(21, token6.getTokenType());
      
      Token token7 = xPathLexer0.not();
      assertEquals("Q", token7.getTokenText());
      assertEquals(23, token7.getTokenType());
      
      Token token8 = xPathLexer0.minus();
      assertEquals("0", token8.getTokenText());
      assertEquals(6, token8.getTokenType());
      
      Token token9 = xPathLexer0.nextToken();
      assertEquals((-1), token9.getTokenType());
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("GAZk)/pQ 9xB");
      Token token0 = xPathLexer0.and();
      assertNull(token0);
  }
}
