/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 05:00:53 GMT 2018
 */

package com.alibaba.fastjson.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.PropertyNamingStrategy;
import com.alibaba.fastjson.annotation.JSONField;
import com.alibaba.fastjson.annotation.JSONType;
import com.alibaba.fastjson.parser.ParserConfig;
import com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory;
import com.alibaba.fastjson.parser.deserializer.EnumDeserializer;
import com.alibaba.fastjson.parser.deserializer.JSONPDeserializer;
import com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer;
import com.alibaba.fastjson.parser.deserializer.JavaObjectDeserializer;
import com.alibaba.fastjson.parser.deserializer.Jdk8DateCodec;
import com.alibaba.fastjson.parser.deserializer.NumberDeserializer;
import com.alibaba.fastjson.parser.deserializer.ObjectDeserializer;
import com.alibaba.fastjson.parser.deserializer.SqlDateDeserializer;
import com.alibaba.fastjson.parser.deserializer.StackTraceElementDeserializer;
import com.alibaba.fastjson.parser.deserializer.ThrowableDeserializer;
import com.alibaba.fastjson.parser.deserializer.TimeDeserializer;
import com.alibaba.fastjson.serializer.BeanContext;
import com.alibaba.fastjson.serializer.JSONSerializer;
import com.alibaba.fastjson.serializer.JavaBeanSerializer;
import com.alibaba.fastjson.serializer.SerializeWriter;
import com.alibaba.fastjson.serializer.SimplePropertyPreFilter;
import com.alibaba.fastjson.util.ASMClassLoader;
import com.alibaba.fastjson.util.FieldInfo;
import com.alibaba.fastjson.util.JavaBeanInfo;
import com.alibaba.fastjson.util.ParameterizedTypeImpl;
import com.alibaba.fastjson.util.TypeUtils;
import java.awt.BufferCapabilities;
import java.awt.Dimension;
import java.awt.GridBagConstraints;
import java.awt.ImageCapabilities;
import java.awt.Insets;
import java.awt.JobAttributes;
import java.awt.PageAttributes;
import java.awt.Point;
import java.awt.Rectangle;
import java.awt.RenderingHints;
import java.awt.geom.Line2D;
import java.io.BufferedWriter;
import java.io.PrintWriter;
import java.io.Writer;
import java.lang.annotation.Annotation;
import java.lang.reflect.Array;
import java.lang.reflect.Constructor;
import java.lang.reflect.Field;
import java.lang.reflect.GenericArrayType;
import java.lang.reflect.Method;
import java.lang.reflect.ParameterizedType;
import java.lang.reflect.Type;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.net.HttpCookie;
import java.sql.BatchUpdateException;
import java.sql.Date;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.sql.Time;
import java.sql.Timestamp;
import java.text.BreakIterator;
import java.text.ChoiceFormat;
import java.text.Collator;
import java.text.DateFormatSymbols;
import java.text.DecimalFormat;
import java.text.DecimalFormatSymbols;
import java.text.MessageFormat;
import java.text.NumberFormat;
import java.text.ParsePosition;
import java.text.StringCharacterIterator;
import java.time.Instant;
import java.time.LocalDateTime;
import java.time.ZoneId;
import java.time.format.DateTimeFormatter;
import java.time.format.FormatStyle;
import java.util.ArrayList;
import java.util.BitSet;
import java.util.Calendar;
import java.util.Collection;
import java.util.Currency;
import java.util.HashMap;
import java.util.Hashtable;
import java.util.LinkedHashMap;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Properties;
import java.util.SimpleTimeZone;
import java.util.SortedMap;
import java.util.Stack;
import java.util.TimeZone;
import java.util.TreeMap;
import java.util.TreeSet;
import java.util.UUID;
import java.util.Vector;
import java.util.WeakHashMap;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.atomic.AtomicInteger;
import java.util.concurrent.atomic.AtomicLong;
import java.util.function.BiFunction;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.lang.MockIllegalAccessException;
import org.evosuite.runtime.mock.java.lang.MockIllegalArgumentException;
import org.evosuite.runtime.mock.java.lang.MockIllegalStateException;
import org.evosuite.runtime.mock.java.lang.MockNullPointerException;
import org.evosuite.runtime.mock.java.lang.MockThread;
import org.evosuite.runtime.mock.java.text.MockDateFormat;
import org.evosuite.runtime.mock.java.time.MockInstant;
import org.evosuite.runtime.mock.java.time.MockLocalDate;
import org.evosuite.runtime.mock.java.time.MockLocalDateTime;
import org.evosuite.runtime.mock.java.time.MockLocalTime;
import org.evosuite.runtime.mock.java.time.chrono.MockHijrahDate;
import org.evosuite.runtime.mock.java.time.chrono.MockJapaneseDate;
import org.evosuite.runtime.mock.java.time.chrono.MockMinguoDate;
import org.evosuite.runtime.mock.java.time.chrono.MockThaiBuddhistDate;
import org.evosuite.runtime.mock.java.util.MockCalendar;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.evosuite.runtime.mock.java.util.MockUUID;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TypeUtils_ESTest extends TypeUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      DecimalFormat decimalFormat0 = new DecimalFormat();
      ParsePosition parsePosition0 = new ParsePosition((-56));
      decimalFormat0.parseObject("t=cYX03e[EE+ SGjq", parsePosition0);
      String string0 = decimalFormat0.format((-2080L));
      decimalFormat0.setNegativeSuffix("ID");
      Class<MockCalendar> class0 = MockCalendar.class;
      TypeUtils.isProxy(class0);
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn((Type) null).when(genericArrayType0).getGenericComponentType();
      TypeUtils.checkPrimitiveArray(genericArrayType0);
      String string1 = TypeUtils.castToString("t=cYX03e[EE+ SGjq");
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Dimension dimension0 = new Dimension();
      Class<JSONPDeserializer> class0 = JSONPDeserializer.class;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      TypeUtils.buildBeanInfo(class0, (Map<String, String>) null, propertyNamingStrategy0);
      boolean boolean0 = TypeUtils.isGenericParamType(class0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Object object0 = new Object();
      boolean boolean0 = TypeUtils.isHibernateInitialized(object0);
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      SecurityException securityException0 = new SecurityException();
      Class<BatchUpdateException> class0 = BatchUpdateException.class;
      String[] stringArray0 = ParserConfig.DENYS;
      Class<Long> class1 = Long.TYPE;
      TypeUtils.getCollectionItemClass(class0);
      java.util.IdentityHashMap<String, String> identityHashMap1 = new java.util.IdentityHashMap<String, String>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      TypeUtils.buildBeanInfo((Class<?>) class1, (Map<String, String>) identityHashMap0, propertyNamingStrategy0, true);
      boolean boolean1 = TypeUtils.isProxy(class0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Class<SQLTransientException> class0 = SQLTransientException.class;
      TypeUtils.getParserFeatures(class0);
      Calendar calendar0 = MockCalendar.getInstance();
      Time time0 = TypeUtils.castToSqlTime(calendar0);
      assertEquals("20:21:21", time0.toString());
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      NoSuchMethodException noSuchMethodException0 = new NoSuchMethodException();
      TypeUtils.castToString(noSuchMethodException0);
      Class<Insets> class0 = Insets.class;
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      linkedHashMap0.put("java.lang.NoSuchMethodException@0000000001", "Ljava.lang.AutoCloseable");
      TypeUtils.decapitalize("java.lang.NoSuchMethodException@0000000001");
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      TypeUtils.computeGettersWithFieldBase(class0, linkedHashMap0, true, propertyNamingStrategy0);
      TypeUtils.getClassFromMapping("java.lang.NoSuchMethodException@0000000001");
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        TypeUtils.castToBigInteger(object0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"java.lang\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Class<ThrowableDeserializer> class0 = ThrowableDeserializer.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      ThreadGroup threadGroup0 = new ThreadGroup("com.alibaba.fastjson.parser.deserializer.SqlDateDeserializer");
      String string0 = "getTimeInMillis";
      TreeMap<String, Field> treeMap0 = new TreeMap<String, Field>();
      TreeMap<String, Field> treeMap1 = new TreeMap<String, Field>((SortedMap<String, ? extends Field>) treeMap0);
      Hashtable<String, String> hashtable1 = new Hashtable<String, String>();
      Hashtable<String, String> hashtable2 = new Hashtable<String, String>();
      hashtable2.values();
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0);
      // Undeclared exception!
      try { 
        TypeUtils.castToBigDecimal("com.alibaba.fastjson.parser.deserializer.SqlDateDeserializer");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      TypeUtils.castToDouble((Object) null);
      TypeUtils.castToLong((Object) null);
      Class<StringIndexOutOfBoundsException> class0 = StringIndexOutOfBoundsException.class;
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "m;?gi(h]Ns_C9");
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      TypeUtils.computeGettersWithFieldBase(class0, (Map<String, String>) null, false, propertyNamingStrategy0);
      Class<DateFormatSymbols> class1 = DateFormatSymbols.class;
      TreeMap<String, Field> treeMap0 = new TreeMap<String, Field>();
      String string0 = "org.springframework.security.web.savedrequest.DefaultSavedRequest";
      Field field0 = null;
      treeMap0.put("", (Field) null);
      // Undeclared exception!
      try { 
        JSON.parseArray("7e/i^%Qy;-LUCK");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect [, actual float, pos 0, fieldName null
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      TypeUtils.castToDouble((Object) null);
      TypeUtils.castToLong((Object) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ThreadGroup threadGroup0 = new ThreadGroup("m;?i(h]Ns_C9");
      ThreadGroup threadGroup1 = new ThreadGroup(threadGroup0, "c8!^");
      MockThread.currentThread();
      MockThread mockThread0 = new MockThread(threadGroup1, "c8!^");
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      Long.remainderUnsigned((-128L), 1106L);
      StringIndexOutOfBoundsException stringIndexOutOfBoundsException0 = new StringIndexOutOfBoundsException("m;?i(h]Ns_C9");
      // Undeclared exception!
      try { 
        TypeUtils.castToBigDecimal(stringIndexOutOfBoundsException0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Dimension dimension0 = new Dimension();
      Class<JSONPDeserializer> class0 = JSONPDeserializer.class;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      Class<MockMinguoDate> class1 = MockMinguoDate.class;
      TypeUtils.buildBeanInfo(class1, (Map<String, String>) null, propertyNamingStrategy0);
      Type type0 = TypeUtils.getGenericParamType(class0);
      assertNull(type0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      TypeUtils.decapitalize((String) null);
      Class<SimpleTimeZone> class0 = SimpleTimeZone.class;
      Class<Insets> class1 = Insets.class;
      FieldInfo fieldInfo0 = new FieldInfo("get", class0, class1, class0, (Field) null, 1163, 100, 44);
      BeanContext beanContext0 = new BeanContext(class0, fieldInfo0);
      beanContext0.getMethod();
      TypeUtils.isTransient((Method) null);
      TypeUtils.getRawClass(fieldInfo0.fieldClass);
      // Undeclared exception!
      try { 
        TypeUtils.fnv1a_64((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      Class<?> class0 = TypeUtils.loadClass("[I", (ClassLoader) aSMClassLoader0, true);
      assertNotNull(class0);
      
      Class<?> class1 = TypeUtils.getClass((Type) class0);
      assertEquals(1041, class1.getModifiers());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Instant instant0 = MockInstant.now();
      Timestamp.from(instant0);
      TypeUtils.isHibernateInitialized(instant0);
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      AtomicInteger atomicInteger0 = new AtomicInteger(74);
      MockDateFormat mockDateFormat0 = new MockDateFormat();
      TypeUtils.castToChar((Object) null);
      TypeUtils.getClassFromMapping("Ljava.util.concurrent.ConcurrentSkipListSet");
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        TypeUtils.castToBigInteger(identityHashMap0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"java.util\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      TreeMap<String, Field> treeMap0 = new TreeMap<String, Field>();
      TreeMap<String, Field> treeMap1 = new TreeMap<String, Field>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      Class<Jdk8DateCodec> class0 = Jdk8DateCodec.class;
      TypeUtils.buildBeanInfo((Class<?>) class0, (Map<String, String>) hashMap0, propertyNamingStrategy0);
      // Undeclared exception!
      try { 
        TypeUtils.fnv1a_64_lower((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      TypeUtils.castToDouble((Object) null);
      TypeUtils.castToLong((Object) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ThreadGroup threadGroup0 = new ThreadGroup("m;?i(h]Ns_C9");
      ThreadGroup threadGroup1 = new ThreadGroup(threadGroup0, "[long");
      MockThread.currentThread();
      MockThread mockThread0 = new MockThread(threadGroup1, "[long");
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      aSMClassLoader0.setPackageAssertionStatus("can not cast to byte, value : ", true);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0.classLoader);
      Class<Collator> class0 = Collator.class;
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      TypeUtils.buildBeanInfo((Class<?>) class0, (Map<String, String>) identityHashMap0, (PropertyNamingStrategy) null);
      SimplePropertyPreFilter simplePropertyPreFilter0 = null;
      try {
        simplePropertyPreFilter0 = new SimplePropertyPreFilter((String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.serializer.SimplePropertyPreFilter", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Dimension dimension0 = new Dimension();
      StringIndexOutOfBoundsException stringIndexOutOfBoundsException0 = new StringIndexOutOfBoundsException(0);
      stringIndexOutOfBoundsException0.getLocalizedMessage();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      MockIllegalArgumentException mockIllegalArgumentException0 = new MockIllegalArgumentException("String index out of range: 0", stringIndexOutOfBoundsException0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      NumberFormat.getIntegerInstance();
      MockIllegalStateException mockIllegalStateException0 = new MockIllegalStateException();
      Class<SQLInvalidAuthorizationSpecException> class0 = SQLInvalidAuthorizationSpecException.class;
      TypeUtils.castToJavaBean((Object) null, class0);
      Jdk8DateCodec jdk8DateCodec0 = new Jdk8DateCodec();
      Class<AtomicLong> class1 = AtomicLong.class;
      TypeUtils.getKoltinConstructorParameters(class1);
      Class class2 = (Class)TypeUtils.unwrapOptional(class1);
      assertFalse(class2.isAnnotation());
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Dimension dimension0 = new Dimension();
      Class<Object> class0 = Object.class;
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0);
      BufferedWriter bufferedWriter0 = null;
      try {
        bufferedWriter0 = new BufferedWriter((Writer) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Writer", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Class<EnumDeserializer> class0 = EnumDeserializer.class;
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      linkedHashMap0.putIfAbsent(";", ";");
      TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) linkedHashMap0, false);
      TypeUtils.fnv1a_64("Ljava.util.concurrent.ConcurrentSkipListSet");
      // Undeclared exception!
      try { 
        TypeUtils.toLocale((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put("Ljava.awt.Rectangle", "Ljava.awt.Rectangle");
      hashMap0.put("z_hp[S|z=-yMTUn", "");
      hashMap0.replace("Ljava.awt.Rectangle", "");
      hashMap0.clear();
      TypeUtils.castToShort((Object) null);
      TypeUtils.castToBoolean((Object) null);
      TypeUtils.getParserFeatures(class0);
      Class<?> class1 = TypeUtils.loadClass("L");
      assertNull(class1);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Class<Method> class0 = Method.class;
      String string0 = "";
      Class<NoClassDefFoundError> class1 = NoClassDefFoundError.class;
      Class<RenderingHints> class2 = RenderingHints.class;
      Class<PropertyNamingStrategy> class3 = PropertyNamingStrategy.class;
      Field[] fieldArray0 = new Field[0];
      TypeUtils.getField(class3, "", fieldArray0);
      FieldInfo fieldInfo0 = new FieldInfo("", class1, class2, class2, (Field) null, (-1599), 667, 667);
      // Undeclared exception!
      try { 
        fieldInfo0.get(class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.FieldInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      RenderingHints.Key renderingHints_Key0 = mock(RenderingHints.Key.class, new ViolatedAssumptionAnswer());
      IndexOutOfBoundsException indexOutOfBoundsException0 = new IndexOutOfBoundsException();
      indexOutOfBoundsException0.printStackTrace();
      RenderingHints renderingHints0 = new RenderingHints(renderingHints_Key0, indexOutOfBoundsException0);
      Class<Long> class0 = Long.class;
      NegativeArraySizeException negativeArraySizeException0 = new NegativeArraySizeException("istoLongArray");
      ParserConfig parserConfig0 = new ParserConfig();
      Class<StackOverflowError> class1 = StackOverflowError.class;
      JavaBeanDeserializer javaBeanDeserializer0 = new JavaBeanDeserializer(parserConfig0, class1);
      // Undeclared exception!
      try { 
        renderingHints0.put(negativeArraySizeException0, javaBeanDeserializer0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.NegativeArraySizeException cannot be cast to java.awt.RenderingHints$Key
         //
         verifyException("java.awt.RenderingHints", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Class<SQLWarning> class0 = SQLWarning.class;
      TypeUtils.isKotlin(class0);
      TypeUtils.isKotlin(class0);
      // Undeclared exception!
      try { 
        TypeUtils.castToBoolean(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to boolean, value : class java.sql.SQLWarning
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Dimension dimension0 = new Dimension();
      Object object0 = new Object();
      TypeUtils.isHibernateInitialized(object0);
      ParserConfig parserConfig0 = new ParserConfig((ClassLoader) null);
      Class<java.util.Date> class0 = java.util.Date.class;
      parserConfig0.getDeserializer((Class<?>) class0, (Type) class0);
      String string0 = "Ljava.util.concurrent.ConcurrentSkipListSet";
      TypeUtils.loadClass("Ljava.util.concurrent.ConcurrentSkipListSet");
      // Undeclared exception!
      try { 
        TypeUtils.getClass((Type) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      ThreadGroup threadGroup0 = new ThreadGroup("fil");
      ThreadGroup threadGroup1 = new ThreadGroup(threadGroup0, "fil");
      MockThread mockThread0 = new MockThread(threadGroup1, (Runnable) null);
      ClassLoader classLoader1 = mockThread0.getContextClassLoader();
      TypeUtils.loadClass("%7kb8]Th", classLoader1, true);
      // Undeclared exception!
      try { 
        TypeUtils.getClass((Type) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Class<BatchUpdateException> class0 = BatchUpdateException.class;
      TypeUtils.getKoltinConstructorParameters(class0);
      Class<Long> class1 = Long.TYPE;
      TypeUtils.getCollectionItemClass(class1);
      TypeUtils.loadClass("BY1hkNv&)W");
      ClassLoader.getSystemClassLoader();
      TypeUtils.toLocale("Ljava.awt.Point");
      // Undeclared exception!
      try { 
        TypeUtils.castToLong("Ljava.awt.Point");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to long, value : Ljava.awt.Point
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Locale.forLanguageTag("fieldDeserializer");
      StringIndexOutOfBoundsException stringIndexOutOfBoundsException0 = new StringIndexOutOfBoundsException();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      NumberFormat.getIntegerInstance();
      MockIllegalStateException mockIllegalStateException0 = new MockIllegalStateException();
      ParserConfig parserConfig0 = ParserConfig.global;
      Class<RenderingHints> class0 = RenderingHints.class;
      TypeUtils.isPath(class0);
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      TimeUnit timeUnit0 = TimeUnit.SECONDS;
      // Undeclared exception!
      try { 
        TypeUtils.castToBoolean(timeUnit0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to boolean, value : SECONDS
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Long long0 = new Long((-2454L));
      Class<MockGregorianCalendar> class0 = MockGregorianCalendar.class;
      TypeUtils.getRawClass(class0);
      long long1 = TypeUtils.fnv1a_64("2Ej@qR[\"");
      assertEquals((-7606734233422962820L), long1);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      WeakHashMap<SqlDateDeserializer, HttpCookie> weakHashMap0 = new WeakHashMap<SqlDateDeserializer, HttpCookie>();
      TypeUtils.isNumber(",");
      JavaObjectDeserializer javaObjectDeserializer0 = new JavaObjectDeserializer();
      // Undeclared exception!
      try { 
        TypeUtils.castToChar(javaObjectDeserializer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to char, value : com.alibaba.fastjson.parser.deserializer.JavaObjectDeserializer@1
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      DecimalFormat decimalFormat0 = new DecimalFormat();
      decimalFormat0.format((-2080L));
      decimalFormat0.setNegativeSuffix("ID");
      TypeUtils.isHibernateInitialized(decimalFormat0);
      // Undeclared exception!
      try { 
        TypeUtils.castToTimestamp("ID");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : ID
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Class<Time> class0 = Time.class;
      TypeUtils.getSerializeFeatures(class0);
      TypeUtils.isPath(class0);
      TypeUtils.castToFloat((Object) null);
      TypeUtils.getParserFeatures(class0);
      Float.min(0, 0.0F);
      Float.sum(0, (-2215.437F));
      TypeUtils.isKotlin(class0);
      TypeUtils.castToFloat((Object) null);
      Float.min(0, 1989.5266F);
      Character character0 = new Character('V');
      TypeUtils.castToChar(character0);
      TypeUtils.decapitalize((String) null);
      JSONField jSONField0 = TypeUtils.getSuperMethodAnnotation(class0, (Method) null);
      assertNull(jSONField0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Class<MockHijrahDate> class0 = MockHijrahDate.class;
      TypeUtils.isPath(class0);
      JSONObject jSONObject0 = new JSONObject(12);
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      Class<BatchUpdateException> class1 = BatchUpdateException.class;
      TypeUtils.getKoltinConstructorParameters(class0);
      Class<Long> class2 = Long.TYPE;
      Class<?> class3 = TypeUtils.getCollectionItemClass(class1);
      TypeUtils typeUtils0 = new TypeUtils();
      String string0 = "p#D1*|9";
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("1.2.46", "p#D1*|9", 12);
      SQLDataException sQLDataException0 = new SQLDataException("yyyy-MM-dd HH:mm:ss", sQLTransactionRollbackException0);
      TypeUtils.castToByte((Object) null);
      TypeUtils.getClass((Type) class3);
      // Undeclared exception!
      try { 
        JSON.parseObject("UC\tuV)jTy}#/n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, json : UC\tuV)jTy}#/n
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      TypeUtils.castToFloat((Object) null);
      long long0 = TypeUtils.fnv1a_64_lower("0?c'\"@");
      assertEquals((-6583638361915653240L), long0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      UUID uUID0 = MockUUID.randomUUID();
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlTime(uUID0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : 00000000-0100-4000-8200-000003000000
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      TreeMap<String, Field> treeMap0 = new TreeMap<String, Field>();
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      // Undeclared exception!
      try { 
        TypeUtils.castToInt("G");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"G\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      MessageFormat messageFormat0 = new MessageFormat("int");
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      WeakHashMap<SqlDateDeserializer, HttpCookie> weakHashMap0 = new WeakHashMap<SqlDateDeserializer, HttpCookie>();
      hashtable0.remove((Object) "int", (Object) weakHashMap0);
      TypeUtils.isNumber(",");
      TypeUtils.decapitalize("int");
      JavaObjectDeserializer javaObjectDeserializer0 = new JavaObjectDeserializer();
      LinkageError linkageError0 = new LinkageError((String) null);
      MockJapaneseDate mockJapaneseDate0 = new MockJapaneseDate();
      Collator collator0 = Collator.getInstance();
      // Undeclared exception!
      try { 
        TypeUtils.castToInt(collator0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : java.text.RuleBasedCollator@289747d6
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Dimension dimension0 = new Dimension();
      StringIndexOutOfBoundsException stringIndexOutOfBoundsException0 = new StringIndexOutOfBoundsException();
      stringIndexOutOfBoundsException0.getLocalizedMessage();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      MockIllegalArgumentException mockIllegalArgumentException0 = new MockIllegalArgumentException((String) null, stringIndexOutOfBoundsException0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      NumberFormat.getIntegerInstance();
      Class<Long> class0 = Long.TYPE;
      TypeUtils.getCollectionItemClass(class0);
      TypeUtils.loadClass((String) null);
      ClassLoader.getSystemClassLoader();
      ClassLoader.getSystemClassLoader();
      StringCharacterIterator stringCharacterIterator0 = new StringCharacterIterator("islongValue", 0);
      // Undeclared exception!
      try { 
        TypeUtils.castToInt(stringCharacterIterator0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : java.text.StringCharacterIterator@d5e6aa60
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Class<MockHijrahDate> class0 = MockHijrahDate.class;
      boolean boolean0 = TypeUtils.compatibleWithJavaBean;
      Class<?> class1 = TypeUtils.getClass((Type) class0);
      TypeUtils.getCollectionItemType(class1);
      FileSystemHandling.shouldAllThrowIOExceptions();
      TypeUtils typeUtils0 = new TypeUtils();
      InstantiationException instantiationException0 = new InstantiationException();
      // Undeclared exception!
      try { 
        TypeUtils.castToTimestamp(class1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : class org.evosuite.runtime.mock.java.time.chrono.MockHijrahDate
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      TreeMap<String, Field> treeMap0 = new TreeMap<String, Field>();
      TreeMap<String, Field> treeMap1 = new TreeMap<String, Field>();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "G");
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      BiFunction<Object, String, String> biFunction0 = (BiFunction<Object, String, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      hashtable0.replaceAll(biFunction0);
      ClassLoader.getSystemClassLoader();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      Class<SQLInvalidAuthorizationSpecException> class0 = SQLInvalidAuthorizationSpecException.class;
      TypeUtils.castToJavaBean((Object) treeMap0, class0);
      Jdk8DateCodec jdk8DateCodec0 = new Jdk8DateCodec();
      // Undeclared exception!
      try { 
        TypeUtils.castToFloat(classLoader0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to float, value : sun.misc.Launcher$AppClassLoader@6bc7c054
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      TypeUtils.castToInt((Object) null);
      Method method0 = null;
      TypeUtils.isAnnotationPresentManyToMany((Method) null);
      Class<NoClassDefFoundError> class0 = NoClassDefFoundError.class;
      TypeUtils.getParserFeatures(class0);
      // Undeclared exception!
      try { 
        TypeUtils.castToShort(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to short, value : class java.lang.NoClassDefFoundError
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Class<Byte> class0 = Byte.TYPE;
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(genericArrayType0).getGenericComponentType();
      Class class1 = (Class)TypeUtils.checkPrimitiveArray(genericArrayType0);
      assertEquals("class [B", class1.toString());
      
      Class<NumberFormat> class2 = NumberFormat.class;
      TypeUtils.getSerializeFeatures(class2);
      long long0 = TypeUtils.fnv1a_64_lower("vP<`Ba|IPgCmOy");
      assertEquals(8466284694041650180L, long0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      TypeUtils.loadClass("Ljava.awt.Font");
      Type[] typeArray0 = new Type[7];
      typeArray0[0] = (Type) null;
      typeArray0[1] = (Type) null;
      typeArray0[2] = (Type) null;
      typeArray0[3] = (Type) null;
      typeArray0[4] = (Type) null;
      typeArray0[5] = (Type) null;
      typeArray0[6] = (Type) null;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, typeArray0[3], typeArray0[0]);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) null, (ParameterizedType) parameterizedTypeImpl0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : com.alibaba.fastjson.util.ParameterizedTypeImpl@f449711f
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Class<PropertyNamingStrategy> class0 = PropertyNamingStrategy.class;
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      identityHashMap0.put("getgetFileName", "getgetFileName");
      TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) identityHashMap0);
      TypeUtils.isHibernateInitialized(class0);
      Line2D.Double line2D_Double0 = new Line2D.Double();
      Rectangle rectangle0 = line2D_Double0.getBounds();
      Class<BreakIterator> class1 = BreakIterator.class;
      // Undeclared exception!
      try { 
        TypeUtils.castToJavaBean((Object) rectangle0, class1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.text.BreakIterator
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Instant instant0 = MockInstant.now();
      Timestamp.from(instant0);
      TypeUtils.isHibernateInitialized(instant0);
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      SQLDataException sQLDataException0 = new SQLDataException("toGMTString", sQLNonTransientConnectionException0);
      // Undeclared exception!
      try { 
        TypeUtils.castToByte(sQLNonTransientConnectionException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to byte, value : java.sql.SQLNonTransientConnectionException
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Class<Byte> class0 = Byte.TYPE;
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(genericArrayType0).getGenericComponentType();
      TypeUtils.checkPrimitiveArray(genericArrayType0);
      Class<NumberFormat> class1 = NumberFormat.class;
      TypeUtils.getSerializeFeatures(class1);
      NumberFormat.getIntegerInstance();
      MockIllegalStateException mockIllegalStateException0 = new MockIllegalStateException();
      Class<SQLInvalidAuthorizationSpecException> class2 = SQLInvalidAuthorizationSpecException.class;
      TypeUtils.castToJavaBean((Object) null, class2);
      Jdk8DateCodec jdk8DateCodec0 = new Jdk8DateCodec();
      TypeUtils.getKoltinConstructorParameters(class2);
      Random.setNextRandom((-222));
      TypeUtils.loadClass(":_J,Q`jjt>xHnO`ub");
      // Undeclared exception!
      try { 
        TypeUtils.createCollection(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create instance error, class byte
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put("Ljava.awt.Rectangle", "Ljava.awt.Rectangle");
      TypeUtils.castToSqlDate("");
      JavaObjectDeserializer javaObjectDeserializer0 = new JavaObjectDeserializer();
      LinkageError linkageError0 = new LinkageError((String) null);
      MockJapaneseDate mockJapaneseDate0 = new MockJapaneseDate();
      Class<java.util.Date> class0 = java.util.Date.class;
      ParserConfig.getGlobalInstance();
      Class<?> class1 = TypeUtils.getClass((Type) class0);
      assertEquals("class java.util.Date", class1.toString());
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Class<MockHijrahDate> class0 = MockHijrahDate.class;
      TypeUtils.isPath(class0);
      ParserConfig parserConfig0 = new ParserConfig();
      TreeMap<String, Field> treeMap0 = new TreeMap<String, Field>();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Class<JSONObject> class0 = JSONObject.class;
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0);
      Class<?> class1 = javaBeanSerializer0.getType();
      Class<?> class2 = TypeUtils.getClass((Type) class1);
      assertEquals("class com.alibaba.fastjson.JSONObject", class2.toString());
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Dimension dimension0 = new Dimension();
      StringIndexOutOfBoundsException stringIndexOutOfBoundsException0 = new StringIndexOutOfBoundsException(0);
      stringIndexOutOfBoundsException0.getLocalizedMessage();
      TreeMap<String, Field> treeMap0 = new TreeMap<String, Field>();
      TreeMap<String, Field> treeMap1 = new TreeMap<String, Field>((SortedMap<String, ? extends Field>) treeMap0);
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      Collection<String> collection0 = new Vector<String>();
      Class<Throwable> class0 = Throwable.class;
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0);
      BigDecimal bigDecimal0 = TypeUtils.castToBigDecimal((Object) null);
      assertNull(bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(12);
      Class<BitSet> class0 = BitSet.class;
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0);
      javaBeanSerializer0.getType();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      classLoader0.getParent();
      classLoader0.clearAssertionStatus();
      ClassLoader.getSystemClassLoader();
      classLoader0.getParent();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Random.setNextRandom(989);
      TypeUtils.loadClass("1.2.46");
      // Undeclared exception!
      try { 
        TypeUtils.createCollection((Type) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TODO
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      DecimalFormat decimalFormat0 = new DecimalFormat();
      ParsePosition parsePosition0 = new ParsePosition((-56));
      boolean boolean0 = TypeUtils.isNumber("t=cYX03e[EE+ SGjq");
      JavaObjectDeserializer javaObjectDeserializer0 = new JavaObjectDeserializer();
      TreeSet<MockJapaneseDate> treeSet0 = new TreeSet<MockJapaneseDate>();
      TypeUtils.castToChar((Object) null);
      Class<PropertyNamingStrategy> class0 = PropertyNamingStrategy.class;
      boolean boolean1 = TypeUtils.isKotlin(class0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      WeakHashMap<SqlDateDeserializer, HttpCookie> weakHashMap0 = new WeakHashMap<SqlDateDeserializer, HttpCookie>();
      hashtable0.remove((Object) weakHashMap0, (Object) weakHashMap0);
      TypeUtils.isNumber("L");
      TypeUtils.decapitalize("\"C.O|'<D|^!0cT!6Ru)");
      JavaObjectDeserializer javaObjectDeserializer0 = new JavaObjectDeserializer();
      NoSuchMethodError noSuchMethodError0 = new NoSuchMethodError();
      MockJapaneseDate mockJapaneseDate0 = new MockJapaneseDate();
      Collator.getInstance();
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("\"C.O|'<D|^!0cT!6Ru)");
      // Undeclared exception!
      try { 
        TypeUtils.castToInt(sQLRecoverableException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : java.sql.SQLRecoverableException: \"C.O|'<D|^!0cT!6Ru)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      DecimalFormat decimalFormat0 = new DecimalFormat();
      ParsePosition parsePosition0 = new ParsePosition((-56));
      decimalFormat0.parseObject("t=cYX03e[EE+ SGjq", parsePosition0);
      Class<SimpleTimeZone> class0 = SimpleTimeZone.class;
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      TypeUtils.buildBeanInfo(class0, map0, propertyNamingStrategy0);
      Type[] typeArray0 = new Type[0];
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, class0, class0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      TypeUtils.loadClass("[I", (ClassLoader) aSMClassLoader0, true);
      Class<NumberFormat> class0 = NumberFormat.class;
      // Undeclared exception!
      try { 
        TypeUtils.castToJavaBean((Object) aSMClassLoader0, class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.text.NumberFormat
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      SQLException sQLException0 = new SQLException();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      sQLException0.getSuppressed();
      classLoader0.setPackageAssertionStatus("can not cast to byte, value : ", false);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "can not cast to byte, value : ";
      stringArray0[1] = "can not cast to byte, value : ";
      stringArray0[2] = "can not cast to byte, value : ";
      stringArray0[3] = "can not cast to byte, value : ";
      SimplePropertyPreFilter simplePropertyPreFilter0 = new SimplePropertyPreFilter(stringArray0);
      simplePropertyPreFilter0.getClazz();
      boolean boolean0 = TypeUtils.isGenericParamType((Type) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Class<Float> class0 = Float.class;
      String[] stringArray0 = new String[8];
      stringArray0[0] = "Sj7@ykZ;";
      stringArray0[1] = "rB\"y,m,&/kul +*";
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      stringArray0[2] = "~u~V4M@$XxU6";
      stringArray0[3] = "java.lang.StackTraceElement";
      stringArray0[4] = "org.springframework.util.LinkedMultiValueMap";
      stringArray0[5] = "0o:";
      stringArray0[6] = "([C)Ljava/math/BigDecimal;";
      stringArray0[7] = "1";
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0, stringArray0);
      javaBeanSerializer0.getType();
      Point point0 = new Point();
      point0.setLocation(251, 68);
      // Undeclared exception!
      try { 
        TypeUtils.castToBigDecimal("0o:");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      ClassLoader.getSystemClassLoader();
      NoSuchMethodException noSuchMethodException0 = new NoSuchMethodException();
      TypeUtils.castToString(noSuchMethodException0);
      Class<Insets> class0 = Insets.class;
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      LinkedHashMap<String, String> linkedHashMap1 = new LinkedHashMap<String, String>();
      linkedHashMap1.put("Ljava.lang.AutoCloseable", "write");
      linkedHashMap0.put((String) null, "getInnerMap");
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      TypeUtils.computeGettersWithFieldBase(class0, linkedHashMap1, true, propertyNamingStrategy0);
      TypeUtils.getClassFromMapping("isvalues");
      Object object0 = new Object();
      Float float0 = new Float((-2205.0F));
      BigInteger bigInteger0 = TypeUtils.castToBigInteger(float0);
      assertEquals((short) (-2205), bigInteger0.shortValue());
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      MockLocalDateTime.now();
      Class<PropertyNamingStrategy> class0 = PropertyNamingStrategy.class;
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0);
      Class<?> class1 = TypeUtils.getClass((Type) class0);
      boolean boolean0 = TypeUtils.isHibernateInitialized(javaBeanSerializer0);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      ClassLoader classLoader1 = aSMClassLoader0.getParent();
      TypeUtils.loadClass("resolveTask", classLoader1, true);
      boolean boolean1 = TypeUtils.isGenericParamType(class1);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      TypeUtils.decapitalize("-|S");
      Class<SimpleTimeZone> class0 = SimpleTimeZone.class;
      Class<Insets> class1 = Insets.class;
      FieldInfo fieldInfo0 = new FieldInfo("get", class0, class1, class0, (Field) null, 1163, 100, 44);
      BeanContext beanContext0 = new BeanContext(class0, fieldInfo0);
      beanContext0.getMethod();
      TypeUtils.isTransient((Method) null);
      Class<NumberFormat> class2 = NumberFormat.class;
      TypeUtils.getSerializeFeatures(class2);
      TypeUtils.fnv1a_64_lower("-|S");
      TypeUtils.unwrapOptional(fieldInfo0.fieldType);
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      TypeUtils.computeGettersWithFieldBase(fieldInfo0.declaringClass, treeMap0, true, propertyNamingStrategy0);
      StringIndexOutOfBoundsException stringIndexOutOfBoundsException0 = new StringIndexOutOfBoundsException((-764));
      // Undeclared exception!
      try { 
        TypeUtils.castToChar(stringIndexOutOfBoundsException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to char, value : java.lang.StringIndexOutOfBoundsException: String index out of range: -764
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      TypeUtils.castToDouble((Object) null);
      TypeUtils.castToLong((Object) null);
      boolean boolean0 = TypeUtils.compatibleWithFieldName;
      ThreadGroup threadGroup0 = new ThreadGroup("m;?i(h]Ns_C9");
      ThreadGroup threadGroup1 = new ThreadGroup(threadGroup0, "m;?i(h]Ns_C9");
      threadGroup0.interrupt();
      MockThread mockThread0 = new MockThread(threadGroup1, "m;?i(h]Ns_C9");
      mockThread0.getContextClassLoader();
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      Class<Method> class0 = Method.class;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      TypeUtils.buildBeanInfo(class0, map0, propertyNamingStrategy0);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "ilv6";
      Class<IllegalAccessError> class1 = IllegalAccessError.class;
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      // Undeclared exception!
      try { 
        TypeUtils.castToEnum((Object) null, class1, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.lang.IllegalAccessError
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "?W@sSt9b=SF]pn");
      Thread thread0 = MockThread.currentThread();
      MockThread mockThread0 = new MockThread(thread0, "?W@sSt9b=SF]pn");
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      TypeUtils.loadClass("?W@sSt9b=SF]pn", classLoader0, true);
      Class<BufferCapabilities> class0 = BufferCapabilities.class;
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) hashtable0);
      boolean boolean0 = TypeUtils.isNumber("kotlin.reflect.KFunction");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      TypeUtils typeUtils0 = new TypeUtils();
      Class<SQLClientInfoException> class0 = SQLClientInfoException.class;
      TypeUtils.isPath(class0);
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      TypeUtils.computeGettersWithFieldBase(class0, linkedHashMap0, false, propertyNamingStrategy0);
      TreeMap<String, Field> treeMap0 = new TreeMap<String, Field>();
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>(linkedHashMap0);
      Stack<FieldInfo> stack0 = new Stack<FieldInfo>();
      TypeUtils.decapitalize("kotlin.reflect.jvm.internal.KClassImpl");
      Class<Date> class1 = Date.class;
      FileSystemHandling.shouldAllThrowIOExceptions();
      TypeUtils.isPath(class1);
      ArrayList<TimeDeserializer> arrayList0 = new ArrayList<TimeDeserializer>();
      // Undeclared exception!
      try { 
        TypeUtils.castToByte("kotlin.reflect.jvm.internal.KClassImpl");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"kotlin.reflect.jvm.internal.KClassImpl\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "Sj7@ykZ;";
      stringArray0[1] = "rB\"y,m,&/kul +*";
      Class<UUID> class0 = UUID.class;
      TypeUtils.getKoltinConstructorParameters(class0);
      Class<Long> class1 = Long.TYPE;
      TypeUtils.getCollectionItemClass(class1);
      ClassLoader.getSystemClassLoader();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      TypeUtils.loadClass("rB\"y,m,&/kul +*", classLoader0);
      StackTraceElement stackTraceElement0 = new StackTraceElement("rB\"y,m,&/kul +*", "Sj7@ykZ;", "getgetSides", 33);
      JSONObject jSONObject0 = new JSONObject(true);
      // Undeclared exception!
      try { 
        jSONObject0.toJavaObject((Type) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : null
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Class<Byte> class0 = Byte.TYPE;
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      hashMap0.put("L", (Object) null);
      Long.remainderUnsigned((-439L), 247L);
      Point point0 = new Point((-1578), (-1578));
      point0.setLocation((-1578), 2169);
      // Undeclared exception!
      try { 
        TypeUtils.castToBigDecimal(hashMap0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      TreeMap<String, Field> treeMap0 = new TreeMap<String, Field>();
      TreeMap<String, Field> treeMap1 = new TreeMap<String, Field>((SortedMap<String, ? extends Field>) treeMap0);
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      hashtable0.values();
      Class<InternalError> class0 = InternalError.class;
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0);
      BigDecimal bigDecimal0 = TypeUtils.castToBigDecimal(hashtable0);
      assertNull(bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Class<MockThaiBuddhistDate> class0 = MockThaiBuddhistDate.class;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      TypeUtils.buildBeanInfo(class0, (Map<String, String>) null, propertyNamingStrategy0);
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      hashMap0.put("Ljava.awt.Font", class0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Class<PageAttributes> class1 = PageAttributes.class;
      TypeUtils.getKoltinConstructorParameters(class1);
      Class<Long> class2 = Long.TYPE;
      ClassLoader.getSystemClassLoader();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      TypeUtils.loadClass("7", classLoader0);
      JSON.setDefaultTypeKey("2f_~");
      Class<NoSuchMethodError> class3 = NoSuchMethodError.class;
      TypeUtils.castToJavaBean((Object) null, class3);
      Class<SQLNonTransientConnectionException> class4 = SQLNonTransientConnectionException.class;
      TypeUtils.getParserFeatures(class4);
      Time time0 = TypeUtils.castToSqlTime((Object) null);
      assertNull(time0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      TypeUtils.castToBigInteger((Object) null);
      boolean boolean0 = TypeUtils.isHibernateInitialized((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Object object0 = new Object();
      TypeUtils.isHibernateInitialized(object0);
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      SecurityException securityException0 = new SecurityException();
      // Undeclared exception!
      try { 
        TypeUtils.castToLong(securityException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to long, value : java.lang.SecurityException
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Class<MockHijrahDate> class0 = MockHijrahDate.class;
      TypeUtils.isPath(class0);
      JSONObject jSONObject0 = new JSONObject(596);
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      hashMap0.put("sbV) ?QR8", class0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      TypeUtils.getKoltinConstructorParameters(class0);
      Class<Long> class1 = Long.TYPE;
      ClassLoader.getSystemClassLoader();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      TypeUtils.loadClass("islongValue", classLoader0);
      JSON.setDefaultTypeKey("null");
      Class<NoSuchMethodError> class2 = NoSuchMethodError.class;
      TypeUtils.castToJavaBean((Object) null, class2);
      TypeUtils.getParserFeatures(class1);
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlTime("1.2.46");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : 1.2.46
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      DecimalFormat decimalFormat0 = new DecimalFormat();
      ParsePosition parsePosition0 = new ParsePosition((-56));
      decimalFormat0.parseObject("t=cYX03e[EE+ SGjq", parsePosition0);
      String string0 = decimalFormat0.format((-2080L));
      decimalFormat0.setNegativeSuffix("ID");
      Class<MockCalendar> class0 = MockCalendar.class;
      TypeUtils.isProxy(class0);
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn(class0).when(genericArrayType0).getGenericComponentType();
      TypeUtils.checkPrimitiveArray(genericArrayType0);
      String string1 = TypeUtils.castToString("t=cYX03e[EE+ SGjq");
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      String string0 = "fieldDeserializer";
      StringIndexOutOfBoundsException stringIndexOutOfBoundsException0 = new StringIndexOutOfBoundsException();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      MockIllegalStateException mockIllegalStateException0 = new MockIllegalStateException();
      int int0 = 4;
      Integer integer0 = new Integer(4);
      Class<DecimalFormatSymbols> class0 = DecimalFormatSymbols.class;
      Type[] typeArray0 = new Type[7];
      typeArray0[4] = (Type) class0;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, class0, class0);
      ParserConfig parserConfig0 = ParserConfig.global;
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) "fieldDeserializer", (ParameterizedType) parameterizedTypeImpl0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, class byte
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      TypeUtils.loadClass("WBL#NV:,E}n");
      TypeUtils.isNumber("fH^NK4M{-7S");
      Character character0 = new Character('l');
      // Undeclared exception!
      try { 
        TypeUtils.castToDate(character0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : l
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      MessageFormat messageFormat0 = new MessageFormat("int");
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      WeakHashMap<SqlDateDeserializer, HttpCookie> weakHashMap0 = new WeakHashMap<SqlDateDeserializer, HttpCookie>();
      hashtable0.remove((Object) "int", (Object) weakHashMap0);
      TypeUtils.isNumber(",");
      TypeUtils.decapitalize("int");
      JavaObjectDeserializer javaObjectDeserializer0 = new JavaObjectDeserializer();
      LinkageError linkageError0 = new LinkageError(",");
      MockJapaneseDate mockJapaneseDate0 = new MockJapaneseDate();
      Class<java.util.Date> class0 = java.util.Date.class;
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      parserConfig0.getDeserializer((Class<?>) class0, (Type) class0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      TypeUtils.getClass((Type) class0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      Byte byte0 = TypeUtils.castToByte(bigInteger0);
      assertEquals((byte)0, (byte)byte0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Class<Byte> class0 = Byte.TYPE;
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(genericArrayType0).getGenericComponentType();
      TypeUtils.checkPrimitiveArray(genericArrayType0);
      Class<NumberFormat> class1 = NumberFormat.class;
      TypeUtils.getSerializeFeatures(class1);
      NumberFormat.getIntegerInstance();
      MockIllegalStateException mockIllegalStateException0 = new MockIllegalStateException();
      Class<SQLInvalidAuthorizationSpecException> class2 = SQLInvalidAuthorizationSpecException.class;
      TypeUtils.castToJavaBean((Object) null, class2);
      JSONObject jSONObject0 = new JSONObject(0, true);
      Map<String, Object> map0 = jSONObject0.getInnerMap();
      ParserConfig parserConfig0 = new ParserConfig((ClassLoader) null);
      Class<Insets> class3 = Insets.class;
      // Undeclared exception!
      try { 
        TypeUtils.castToJavaBean(map0, class3, (ParserConfig) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // default constructor not found. class java.awt.Insets
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      SQLException sQLException0 = new SQLException();
      boolean boolean0 = true;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      JSONObject jSONObject0 = new JSONObject(12);
      Class<BitSet> class0 = BitSet.class;
      ParserConfig parserConfig0 = new ParserConfig();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      TypeUtils.castToJavaBean((Map<String, Object>) hashMap0, class0, parserConfig0);
      TypeUtils.getKoltinConstructorParameters(class0);
      Class<Long> class1 = Long.TYPE;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      TypeUtils.loadClass("fastjson.parser.autoTypeSupport", classLoader0);
      TypeUtils.getCollectionItemClass((Type) null);
      String string0 = "[Go&r*J";
      // Undeclared exception!
      try { 
        TypeUtils.loadClass("[Go&r*J");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      TypeUtils.castToDouble((Object) null);
      TypeUtils.castToLong((Object) null);
      Insets insets0 = new Insets((-1146), 679, (-2090), (-2090));
      insets0.clone();
      TypeUtils.castToFloat((Object) null);
      NoSuchMethodException noSuchMethodException0 = new NoSuchMethodException();
      TypeUtils.castToString((Object) null);
      // Undeclared exception!
      try { 
        MockLocalDate.parse((CharSequence) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // text
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Instant instant0 = MockInstant.now();
      Timestamp.from(instant0);
      TypeUtils.isHibernateInitialized(instant0);
      NoSuchMethodException noSuchMethodException0 = new NoSuchMethodException("");
      noSuchMethodException0.getStackTrace();
      StackTraceElement stackTraceElement0 = new StackTraceElement("", "", "can not create ASMParser", 2309);
      TypeUtils.castToBytes("");
      String[] stringArray0 = new String[9];
      stringArray0[0] = "&qq<Eq_";
      stringArray0[1] = "";
      stringArray0[2] = "&qq<Eq_";
      stringArray0[3] = "";
      stringArray0[4] = "can not create ASMParser";
      stringArray0[5] = "&qq<Eq_";
      stringArray0[6] = "hVp+#{&pS?jQ&af$7I";
      stringArray0[7] = "";
      stringArray0[8] = ",P4~";
      SimplePropertyPreFilter simplePropertyPreFilter0 = new SimplePropertyPreFilter(stringArray0);
      Class<EnumDeserializer> class0 = EnumDeserializer.class;
      TypeUtils.getKoltinConstructorParameters(class0);
      MockDateFormat mockDateFormat0 = new MockDateFormat();
      // Undeclared exception!
      try { 
        TypeUtils.castToDate(mockDateFormat0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : org.evosuite.runtime.mock.java.text.MockDateFormat@5c4ae911
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Class<Float> class0 = Float.class;
      TypeUtils.isKotlin(class0);
      Class<BreakIterator> class1 = BreakIterator.class;
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      concurrentHashMap0.put(">vBF>P%bwA[R'kN<", "o");
      concurrentHashMap0.put("o", "{%UXW");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      TypeUtils.computeGettersWithFieldBase(class1, concurrentHashMap0, false, propertyNamingStrategy0);
      TypeUtils.getGenericParamType(class0);
      // Undeclared exception!
      try { 
        TypeUtils.castToBoolean("{%UXW");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to boolean, value : {%UXW
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Instant instant0 = MockInstant.now();
      Timestamp.from(instant0);
      Class<HttpCookie> class0 = HttpCookie.class;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      TypeUtils.buildBeanInfo(class0, (Map<String, String>) null, propertyNamingStrategy0);
      TypeUtils.isGenericParamType(class0);
      TypeUtils.getGenericParamType(class0);
      Class<MockJapaneseDate> class1 = MockJapaneseDate.class;
      TypeUtils.buildBeanInfo(class1, (Map<String, String>) null, propertyNamingStrategy0, true);
      // Undeclared exception!
      try { 
        TypeUtils.createCollection((Type) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TODO
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Class<MockHijrahDate> class0 = MockHijrahDate.class;
      JSONObject jSONObject0 = new JSONObject(12);
      JSONObject jSONObject1 = new JSONObject(12);
      ParserConfig parserConfig0 = new ParserConfig();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      Class<BatchUpdateException> class1 = BatchUpdateException.class;
      TypeUtils.getKoltinConstructorParameters(class0);
      Class<Long> class2 = Long.TYPE;
      Class<?> class3 = TypeUtils.getCollectionItemClass(class1);
      TypeUtils typeUtils0 = new TypeUtils();
      NoClassDefFoundError noClassDefFoundError0 = new NoClassDefFoundError();
      Type[] typeArray0 = new Type[1];
      typeArray0[0] = (Type) class2;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoader classLoader1 = classLoader0.getParent();
      TypeUtils.loadClass("yyyy-MM-dd HH:mm:ss", classLoader1, false);
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, (Type) null, (Type) null);
      ParameterizedTypeImpl parameterizedTypeImpl1 = new ParameterizedTypeImpl(typeArray0, class3, typeArray0[0]);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) jSONObject1, (ParameterizedType) parameterizedTypeImpl1, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // parseLong error, field : null
         //
         verifyException("com.alibaba.fastjson.serializer.LongCodec", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      SQLException sQLException0 = new SQLException();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      sQLException0.getSuppressed();
      JSONObject jSONObject0 = new JSONObject(1435);
      ParserConfig parserConfig0 = new ParserConfig();
      Class<BitSet> class0 = BitSet.class;
      TypeUtils.castToJavaBean((Map<String, Object>) jSONObject0, class0, parserConfig0);
      Class<GridBagConstraints> class1 = GridBagConstraints.class;
      Type[] typeArray0 = new Type[8];
      typeArray0[0] = (Type) class0;
      typeArray0[1] = (Type) class1;
      typeArray0[2] = (Type) class0;
      typeArray0[3] = (Type) class1;
      typeArray0[4] = (Type) class1;
      Class<JavaBeanDeserializer> class2 = JavaBeanDeserializer.class;
      TypeUtils.getKoltinConstructorParameters(class2);
      Class<Long> class3 = Long.TYPE;
      TypeUtils.getCollectionItemClass(class3);
      TypeUtils.loadClass("yyyy-MM-dd HH:mm:ss");
      ClassLoader.getSystemClassLoader();
      ClassLoader classLoader1 = ClassLoader.getSystemClassLoader();
      classLoader0.setDefaultAssertionStatus(false);
      TypeUtils.loadClass("fastjson.parser.deny", classLoader1);
      Class<ImageCapabilities> class4 = ImageCapabilities.class;
      TypeUtils.getParserFeatures(class4);
      Byte byte0 = new Byte((byte) (-56));
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlTime(byte0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : -56
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Dimension dimension0 = new Dimension();
      dimension0.setSize((-1829), (-1829));
      Class<Long> class0 = Long.TYPE;
      Class<?> class1 = TypeUtils.getCollectionItemClass(class0);
      TypeUtils typeUtils0 = new TypeUtils();
      NoClassDefFoundError noClassDefFoundError0 = new NoClassDefFoundError();
      Type[] typeArray0 = new Type[6];
      typeArray0[0] = (Type) class1;
      typeArray0[1] = (Type) class1;
      typeArray0[2] = (Type) class0;
      typeArray0[3] = (Type) class0;
      typeArray0[5] = (Type) class0;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, class1, typeArray0[3]);
      Type[] typeArray1 = new Type[3];
      typeArray1[0] = (Type) parameterizedTypeImpl0;
      Class<Byte> class2 = Byte.TYPE;
      ParameterizedTypeImpl parameterizedTypeImpl1 = new ParameterizedTypeImpl(typeArray0, class2, typeArray0[5]);
      typeArray1[1] = (Type) parameterizedTypeImpl1;
      typeArray1[2] = (Type) parameterizedTypeImpl0;
      ParameterizedTypeImpl parameterizedTypeImpl2 = new ParameterizedTypeImpl(typeArray1, typeArray0[0], typeArray1[2]);
      ParserConfig parserConfig0 = ParserConfig.global;
      TypeUtils.cast((Object) parameterizedTypeImpl0, (ParameterizedType) parameterizedTypeImpl0, parserConfig0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Class<Byte> class0 = Byte.TYPE;
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(genericArrayType0).getGenericComponentType();
      Type type0 = TypeUtils.checkPrimitiveArray(genericArrayType0);
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      String string0 = "L";
      hashMap0.put("L", (Object) null);
      Class<Character> class1 = Character.class;
      TypeUtils.getKoltinConstructorParameters(class1);
      Class<Long> class2 = Long.TYPE;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Type[] typeArray0 = new Type[8];
      typeArray0[0] = (Type) class1;
      typeArray0[1] = (Type) class1;
      typeArray0[2] = (Type) class0;
      typeArray0[3] = (Type) class0;
      typeArray0[4] = (Type) genericArrayType0;
      typeArray0[5] = type0;
      typeArray0[6] = (Type) class0;
      typeArray0[7] = (Type) class0;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, typeArray0[3], typeArray0[0]);
      ParameterizedTypeImpl parameterizedTypeImpl1 = new ParameterizedTypeImpl(typeArray0, typeArray0[2], class0);
      ParserConfig parserConfig0 = ParserConfig.global;
      TypeUtils.cast((Object) parserConfig0, (ParameterizedType) parameterizedTypeImpl1, parserConfig0);
      // Undeclared exception!
      try { 
        TypeUtils.castToBigDecimal(parameterizedTypeImpl1);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Dimension dimension0 = new Dimension();
      StringIndexOutOfBoundsException stringIndexOutOfBoundsException0 = new StringIndexOutOfBoundsException(0);
      stringIndexOutOfBoundsException0.getLocalizedMessage();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      MockIllegalArgumentException mockIllegalArgumentException0 = new MockIllegalArgumentException("String index out of range: 0");
      Class<BatchUpdateException> class0 = BatchUpdateException.class;
      TypeUtils.getKoltinConstructorParameters(class0);
      Class<Long> class1 = Long.TYPE;
      Class<?> class2 = TypeUtils.getCollectionItemClass(class0);
      TypeUtils typeUtils0 = new TypeUtils();
      NoClassDefFoundError noClassDefFoundError0 = new NoClassDefFoundError();
      Type[] typeArray0 = new Type[9];
      typeArray0[0] = (Type) class2;
      typeArray0[1] = (Type) class1;
      typeArray0[2] = (Type) class0;
      typeArray0[3] = (Type) class1;
      typeArray0[4] = (Type) class1;
      typeArray0[5] = (Type) class1;
      typeArray0[6] = (Type) class1;
      typeArray0[7] = (Type) class0;
      typeArray0[8] = (Type) class2;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, typeArray0[0], typeArray0[0]);
      ParameterizedTypeImpl parameterizedTypeImpl1 = new ParameterizedTypeImpl(typeArray0, class2, typeArray0[0]);
      ParserConfig parserConfig0 = ParserConfig.global;
      parserConfig0.compatibleWithJavaBean = true;
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) sQLSyntaxErrorException0, (ParameterizedType) parameterizedTypeImpl0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error
         //
         verifyException("com.alibaba.fastjson.parser.deserializer.ThrowableDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      TreeMap<String, Field> treeMap0 = new TreeMap<String, Field>();
      MockThread mockThread0 = new MockThread();
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      TypeUtils.loadClass("kotlin.reflect.KFunction", classLoader0, false);
      TypeUtils.getGenericParamType((Type) null);
      Class<?> class0 = TypeUtils.getCollectionItemClass((Type) null);
      Locale locale0 = Locale.UK;
      Locale locale1 = Locale.TRADITIONAL_CHINESE;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale1);
      TypeUtils.castToBoolean((Object) null);
      TypeUtils.createCollection(class0);
      // Undeclared exception!
      try { 
        TypeUtils.castToByte(hashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to byte, value : {}
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      MessageFormat messageFormat0 = new MessageFormat("int");
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      WeakHashMap<SqlDateDeserializer, HttpCookie> weakHashMap0 = new WeakHashMap<SqlDateDeserializer, HttpCookie>();
      hashtable0.remove((Object) "int", (Object) weakHashMap0);
      TypeUtils.isNumber(",");
      TypeUtils.decapitalize("int");
      JavaObjectDeserializer javaObjectDeserializer0 = new JavaObjectDeserializer();
      LinkageError linkageError0 = new LinkageError(",");
      MockJapaneseDate mockJapaneseDate0 = new MockJapaneseDate();
      Collator.getInstance();
      // Undeclared exception!
      try { 
        TypeUtils.castToInt(",");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \",\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      TypeUtils.clearClassMapping();
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      WeakHashMap<SqlDateDeserializer, HttpCookie> weakHashMap0 = new WeakHashMap<SqlDateDeserializer, HttpCookie>();
      hashtable0.remove((Object) weakHashMap0, (Object) weakHashMap0);
      String string0 = "L";
      TypeUtils.decapitalize("L");
      JavaObjectDeserializer javaObjectDeserializer0 = new JavaObjectDeserializer();
      LinkageError linkageError0 = new LinkageError("-IFqn<h");
      MockJapaneseDate mockJapaneseDate0 = new MockJapaneseDate();
      Collator.getInstance();
      // Undeclared exception!
      try { 
        TypeUtils.castToInt(javaObjectDeserializer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : com.alibaba.fastjson.parser.deserializer.JavaObjectDeserializer@1
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      Constructor<SQLException>[] constructorArray0 = (Constructor<SQLException>[]) Array.newInstance(Constructor.class, 0);
      TypeUtils.getKoltinConstructor(constructorArray0);
      JSON.parseObject((String) null);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      TypeUtils.castToDate((Object) null);
      TypeUtils.castToBigDecimal((Object) null);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      TypeUtils.castToDouble((Object) null);
      JSONObject jSONObject0 = new JSONObject(24);
      Class<BitSet> class0 = BitSet.class;
      StringIndexOutOfBoundsException stringIndexOutOfBoundsException0 = new StringIndexOutOfBoundsException("LAtkqqPRaHZ");
      MockFile mockFile0 = new MockFile("@type");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      stringIndexOutOfBoundsException0.printStackTrace((PrintWriter) mockPrintWriter0);
      TypeUtils.getKoltinConstructorParameters(class0);
      Class<Long> class1 = Long.TYPE;
      TypeUtils.loadClass("context is null");
      Boolean boolean0 = new Boolean("Ljava.awt.Color");
      Character character0 = new Character('l');
      MockDate mockDate0 = new MockDate();
      TypeUtils.castToDate(mockDate0);
      TypeUtils.isNumber("%H*A~q*us");
      Class<JavaBeanDeserializer> class2 = JavaBeanDeserializer.class;
      TypeUtils.getKoltinConstructorParameters(class2);
      InternalError internalError0 = new InternalError("cyc>mEQ=Z=ZMZxT}", stringIndexOutOfBoundsException0);
      internalError0.getLocalizedMessage();
      InternalError internalError1 = new InternalError("context is null", internalError0);
      // Undeclared exception!
      try { 
        TypeUtils.castToBoolean(internalError1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to boolean, value : java.lang.InternalError: context is null
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      TypeUtils.toLocale("WzO)V5z");
      TypeUtils.fnv1a_64("21X`");
      Class<SQLException> class0 = SQLException.class;
      ParserConfig parserConfig0 = ParserConfig.global;
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) "WzO)V5z", class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.sql.SQLException
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Class<Character> class0 = Character.TYPE;
      boolean boolean0 = TypeUtils.compatibleWithJavaBean;
      JavaObjectDeserializer javaObjectDeserializer0 = new JavaObjectDeserializer();
      FileSystemHandling.shouldAllThrowIOExceptions();
      LinkageError linkageError0 = new LinkageError((String) null);
      MockJapaneseDate mockJapaneseDate0 = new MockJapaneseDate();
      Class<java.util.Date> class1 = java.util.Date.class;
      Type[] typeArray0 = new Type[3];
      typeArray0[0] = (Type) class1;
      typeArray0[1] = (Type) class1;
      typeArray0[2] = (Type) class1;
      TypeUtils.loadClass("null");
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, class0, (Type) null);
      ParserConfig parserConfig0 = ParserConfig.global;
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) ",", (ParameterizedType) parameterizedTypeImpl0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : com.alibaba.fastjson.util.ParameterizedTypeImpl@d083e19c
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      TreeMap<String, Field> treeMap0 = new TreeMap<String, Field>();
      TreeMap<String, Field> treeMap1 = new TreeMap<String, Field>();
      MockThread mockThread0 = new MockThread();
      MockThread mockThread1 = new MockThread((ThreadGroup) null, mockThread0, "G");
      mockThread0.getContextClassLoader();
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      // Undeclared exception!
      try { 
        TypeUtils.castToChar("toS");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to char, value : toS
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Class<MockHijrahDate> class0 = MockHijrahDate.class;
      TypeUtils.isPath(class0);
      JSONObject jSONObject0 = new JSONObject(12);
      Class<BitSet> class1 = BitSet.class;
      ParserConfig parserConfig0 = new ParserConfig();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      hashMap0.clone();
      hashMap0.put("fastjson.parser.deny", (Object) null);
      hashMap0.put("AYal9W+:$Db6Hq!]p^", class0);
      TypeUtils.castToJavaBean((Map<String, Object>) hashMap0, class1, parserConfig0);
      Class<BatchUpdateException> class2 = BatchUpdateException.class;
      TypeUtils.getKoltinConstructorParameters(class0);
      Class<Long> class3 = Long.TYPE;
      TypeUtils.getCollectionItemClass(class2);
      TypeUtils.loadClass("WBL#NV:,E}n");
      ClassLoader.getSystemClassLoader();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      classLoader0.setDefaultAssertionStatus(true);
      TypeUtils.loadClass("islongValue", classLoader0);
      NoSuchFieldException noSuchFieldException0 = new NoSuchFieldException();
      TypeUtils.castToSqlTime((Object) null);
      TypeUtils.castToChar("");
      TypeUtils.isHibernateInitialized((Object) null);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      DecimalFormat decimalFormat0 = new DecimalFormat();
      ParsePosition parsePosition0 = new ParsePosition((-56));
      decimalFormat0.parseObject("t=cYX03e[EE+ SGjq", parsePosition0);
      long[] longArray0 = new long[4];
      longArray0[0] = (long) (-56);
      longArray0[1] = (long) (-56);
      longArray0[2] = (long) (-56);
      longArray0[3] = (long) (-56);
      BitSet.valueOf(longArray0);
      Class<Boolean> class0 = Boolean.class;
      VerifyError verifyError0 = new VerifyError("X`$@-D\"@");
      VerifyError verifyError1 = new VerifyError("ID");
      // Undeclared exception!
      try { 
        TypeUtils.castToJavaBean((Object) verifyError1, class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to boolean, value : java.lang.VerifyError: ID
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Class<MockHijrahDate> class0 = MockHijrahDate.class;
      TypeUtils.isPath(class0);
      int int0 = 12;
      JSONObject jSONObject0 = new JSONObject(12);
      Class<BitSet> class1 = BitSet.class;
      ParserConfig parserConfig0 = new ParserConfig();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "fastjson.parser.autoTypeSupport");
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      // Undeclared exception!
      try { 
        TypeUtils.castToInt(jSONObject0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : {}
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Class<ImageCapabilities> class0 = ImageCapabilities.class;
      TypeUtils.getSerializeFeatures(class0);
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      hashMap0.getOrDefault(class0, (Object) null);
      Class<RenderingHints> class1 = RenderingHints.class;
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-17);
      byteArray0[1] = (byte)17;
      byteArray0[2] = (byte)56;
      byteArray0[3] = (byte)19;
      byteArray0[4] = (byte)111;
      byteArray0[5] = (byte)24;
      byteArray0[6] = (byte) (-65);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      classLoader0.setClassAssertionStatus("NULL", false);
      ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      // Undeclared exception!
      try { 
        TypeUtils.castToJavaBean((Map<String, Object>) hashMap0, class1, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not get javaBeanDeserializer. java.awt.RenderingHints
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Dimension dimension0 = new Dimension();
      Class<Short> class0 = Short.TYPE;
      Class<?> class1 = TypeUtils.getClass((Type) class0);
      TypeUtils.getCollectionItemType(class1);
      TypeUtils.getRawClass(class0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      TypeUtils typeUtils0 = new TypeUtils();
      InstantiationException instantiationException0 = new InstantiationException();
      // Undeclared exception!
      try { 
        TypeUtils.castToTimestamp(typeUtils0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : com.alibaba.fastjson.util.TypeUtils@1
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("iZv*-vSLEpyd^;w|", "toS", 498, batchUpdateException0);
      SQLDataException sQLDataException0 = new SQLDataException("iZv*-vSLEpyd^;w|", "M'UM9v", 498, sQLInvalidAuthorizationSpecException0);
      // Undeclared exception!
      try { 
        TypeUtils.castToDouble(sQLDataException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to double, value : java.sql.SQLDataException: iZv*-vSLEpyd^;w|
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      String string0 = "cause";
      TypeUtils.getClassFromMapping("cause");
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)102;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byteArray0[1] = (byte)27;
      byteArray0[2] = (byte) (-83);
      byteArray0[3] = (byte)28;
      byteArray0[4] = (byte)56;
      byteArray0[5] = (byte)4;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      TypeUtils.getClassFromMapping("cause");
      // Undeclared exception!
      try { 
        TypeUtils.castToDate("cause");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"cause\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Class<MockHijrahDate> class0 = MockHijrahDate.class;
      boolean boolean0 = TypeUtils.compatibleWithJavaBean;
      JSONObject jSONObject0 = new JSONObject(596);
      Class<BitSet> class1 = BitSet.class;
      ParserConfig parserConfig0 = new ParserConfig();
      HashMap<String, Object> hashMap0 = new LinkedHashMap<String, Object>();
      hashMap0.clone();
      hashMap0.put("fastjson.parser.autoTypeAccept", class0);
      TypeUtils.castToJavaBean((Map<String, Object>) hashMap0, class1, parserConfig0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      TypeUtils.loadClass("fastjson.parser.autoTypeAccept");
      boolean boolean1 = TypeUtils.compatibleWithFieldName;
      // Undeclared exception!
      try { 
        TypeUtils.castToDate("fH^NK4M{-7S");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : fH^NK4M{-7S
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) linkedHashMap0);
      StringIndexOutOfBoundsException stringIndexOutOfBoundsException0 = new StringIndexOutOfBoundsException("'A`");
      Class<JobAttributes> class1 = JobAttributes.class;
      MockThread mockThread0 = new MockThread("'A`");
      Thread[] threadArray0 = new Thread[0];
      MockThread.enumerate(threadArray0);
      Thread.UncaughtExceptionHandler thread_UncaughtExceptionHandler0 = mockThread0.getUncaughtExceptionHandler();
      MockThread.setDefaultUncaughtExceptionHandler(thread_UncaughtExceptionHandler0);
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      ImageCapabilities imageCapabilities0 = new ImageCapabilities(false);
      Class<Long> class2 = Long.class;
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) imageCapabilities0, class2, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to long, value : java.awt.ImageCapabilities@453d1401
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      SecurityException securityException0 = new SecurityException();
      TimeZone.getAvailableIDs();
      Class<Long> class0 = Long.TYPE;
      TypeUtils.isNumber("W4U.M`fT3A*F$p?#");
      InternalError internalError0 = new InternalError(securityException0);
      TypeUtils.isNumber("W4U.M`fT3A*F$p?#");
      Character character0 = new Character('k');
      Byte byte0 = new Byte((byte) (-111));
      TypeUtils.castToDate(byte0);
      // Undeclared exception!
      try { 
        TypeUtils.castToBigDecimal(class0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Class<MockHijrahDate> class0 = MockHijrahDate.class;
      TypeUtils.isPath(class0);
      JSONObject jSONObject0 = new JSONObject(12);
      Class<BitSet> class1 = BitSet.class;
      ParserConfig parserConfig0 = new ParserConfig();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      hashMap0.put("fastjson.parser.autoTypeAccept", class0);
      hashMap0.put("BR", "BR");
      hashMap0.clone();
      Class<MockMinguoDate> class2 = MockMinguoDate.class;
      Class<MockDateFormat> class3 = MockDateFormat.class;
      java.util.IdentityHashMap<String, Field> identityHashMap0 = new java.util.IdentityHashMap<String, Field>();
      ParserConfig.getFieldFromCache("T", identityHashMap0);
      FieldInfo fieldInfo0 = new FieldInfo("V4y=|uW#_\"", class0, class3, class0, (Field) null, 176, 65, 965);
      BeanContext beanContext0 = new BeanContext(class2, fieldInfo0);
      Class<Annotation> class4 = Annotation.class;
      beanContext0.getAnnation(class4);
      hashMap0.put("V4y=|uW#_\"", (Object) null);
      String string0 = "AYal9W+:$Db6Hq!]p^";
      hashMap0.put("AYal9W+:$Db6Hq!]p^", class0);
      TypeUtils.castToJavaBean((Map<String, Object>) hashMap0, class1, parserConfig0);
      Class<BatchUpdateException> class5 = BatchUpdateException.class;
      TypeUtils.getKoltinConstructorParameters(class0);
      Class<Long> class6 = Long.TYPE;
      Class<?> class7 = TypeUtils.getCollectionItemClass(class5);
      TypeUtils.fnv1a_64_lower("build object error");
      TypeUtils.unwrapOptional(class7);
      Locale locale0 = Locale.UK;
      // Undeclared exception!
      try { 
        Currency.getInstance(jSONObject0.defaultLocale);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Currency", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Class<MockHijrahDate> class0 = MockHijrahDate.class;
      JSONObject jSONObject0 = new JSONObject(19);
      ParserConfig parserConfig0 = ParserConfig.global;
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      parserConfig0.clearDeserializers();
      hashtable0.entrySet();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0);
      // Undeclared exception!
      try { 
        TypeUtils.castToFloat("fastjson.parser.autoTypeSupport");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      TreeMap<String, Field> treeMap0 = new TreeMap<String, Field>();
      TreeMap<String, Field> treeMap1 = new TreeMap<String, Field>();
      JSONObject jSONObject0 = new JSONObject(9);
      ParserConfig parserConfig0 = new ParserConfig();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ")O&dH.vY8,$Yd");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "~&5+v|pqYFZ<!@");
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      Double double0 = new Double(3089);
      TypeUtils.castToInt(double0);
      Locale locale0 = Locale.ITALIAN;
      DecimalFormatSymbols decimalFormatSymbols0 = new DecimalFormatSymbols(jSONObject0.defaultLocale);
      Integer integer0 = new Integer(9);
      SQLWarning sQLWarning0 = new SQLWarning("fastjson.parser.deny");
      // Undeclared exception!
      try { 
        TypeUtils.castToBytes(sQLWarning0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : java.sql.SQLWarning: fastjson.parser.deny
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Class<MockHijrahDate> class0 = MockHijrahDate.class;
      TypeUtils.isPath(class0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ParserConfig parserConfig0 = new ParserConfig();
      Class<Long> class1 = Long.class;
      // Undeclared exception!
      try { 
        TypeUtils.castToEnum((Object) "0o:", class1, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.lang.Long
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(12);
      JSONObject jSONObject1 = new JSONObject(12);
      ParserConfig parserConfig0 = new ParserConfig();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      String string0 = "EOF";
      TypeUtils.isNumber("EOF");
      JavaObjectDeserializer javaObjectDeserializer0 = JavaObjectDeserializer.instance;
      LinkageError linkageError0 = new LinkageError("Ks8/");
      TypeUtils.loadClass("@type");
      Integer integer0 = new Integer(5);
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      Class<SQLSyntaxErrorException> class0 = SQLSyntaxErrorException.class;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      TypeUtils.buildBeanInfo((Class<?>) class0, (Map<String, String>) identityHashMap0, propertyNamingStrategy0, false);
      Long long0 = new Long(5);
      // Undeclared exception!
      try { 
        TypeUtils.castToDouble("EOF");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      String string0 = null;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      Constructor<SQLException>[] constructorArray0 = (Constructor<SQLException>[]) Array.newInstance(Constructor.class, 1);
      // Undeclared exception!
      try { 
        TypeUtils.getKoltinConstructor(constructorArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      TreeMap<String, Field> treeMap0 = new TreeMap<String, Field>();
      TreeMap<String, Field> treeMap1 = new TreeMap<String, Field>();
      Class<ThrowableDeserializer> class0 = ThrowableDeserializer.class;
      TypeUtils.getKoltinConstructorParameters(class0);
      Class<Long> class1 = Long.TYPE;
      TypeUtils.loadClass("G");
      TypeUtils.isNumber("expect string");
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      ParserConfig parserConfig0 = ParserConfig.global;
      parserConfig0.clearDeserializers();
      Hashtable<String, String> hashtable1 = new Hashtable<String, String>();
      hashtable1.entrySet();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Class<Long> class2 = Long.class;
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class2);
      AtomicInteger atomicInteger0 = new AtomicInteger(95);
      TypeUtils.castToFloat(atomicInteger0);
      Class<ImageCapabilities> class3 = ImageCapabilities.class;
      TypeUtils.isKotlin(class3);
      Random.setNextRandom(95);
      // Undeclared exception!
      try { 
        TypeUtils.createCollection(class2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create instance error, class java.lang.Long
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      TreeMap<String, Field> treeMap0 = new TreeMap<String, Field>();
      TreeMap<String, Field> treeMap1 = new TreeMap<String, Field>();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "G");
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      classLoader0.setDefaultAssertionStatus(false);
      TypeUtils.loadClass("java.util.Optional", classLoader0);
      ThreadGroup threadGroup0 = null;
      MockThread mockThread0 = new MockThread();
      MockThread mockThread1 = new MockThread((ThreadGroup) null, mockThread0, "");
      ClassLoader classLoader1 = mockThread0.getContextClassLoader();
      ClassLoader classLoader2 = mockThread1.getContextClassLoader();
      classLoader1.setPackageAssertionStatus("=|%s-gc8{", true);
      TypeUtils.loadClass("L", classLoader2, false);
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      // Undeclared exception!
      try { 
        TypeUtils.castToChar(mockThread0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to char, value : Thread[MockThread-0,5,Test_Execution_Group]
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      TreeMap<String, Field> treeMap0 = new TreeMap<String, Field>();
      TreeMap<String, Field> treeMap1 = new TreeMap<String, Field>();
      TreeMap<String, Field> treeMap2 = new TreeMap<String, Field>();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "toS");
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      classLoader0.setDefaultAssertionStatus(false);
      TypeUtils.loadClass(".000000000", classLoader0);
      MockThread mockThread0 = new MockThread();
      MockThread mockThread1 = new MockThread((ThreadGroup) null, mockThread0, "gethashCode");
      mockThread0.getContextClassLoader();
      ClassLoader classLoader1 = mockThread1.getContextClassLoader();
      classLoader0.setPackageAssertionStatus("toS", false);
      TypeUtils.loadClass("lE9j<0]We", classLoader1, false);
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      String string0 = null;
      TypeUtils.castToChar("G");
      AtomicInteger atomicInteger0 = new AtomicInteger(1222);
      TreeSet<NumberDeserializer> treeSet0 = new TreeSet<NumberDeserializer>();
      // Undeclared exception!
      try { 
        TypeUtils.castToBigInteger(treeSet0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"j\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Class<Float> class0 = Float.class;
      boolean boolean0 = TypeUtils.compatibleWithFieldName;
      Class<BreakIterator> class1 = BreakIterator.class;
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      concurrentHashMap0.put("o", "setter not fund class ");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      TypeUtils.getGenericParamType(class0);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      TypeUtils.loadClass("org.springframework.util.LinkedMultiValueMap", classLoader0);
      TypeUtils.clearClassMapping();
      Type type0 = TypeUtils.unwrapOptional(class0);
      Class<Short> class2 = Short.class;
      TypeUtils.getSerializeFeatures(class2);
      Stack<SQLFeatureNotSupportedException> stack0 = new Stack<SQLFeatureNotSupportedException>();
      TypeUtils.loadClass("Ljava.util.concurrent.ConcurrentSkipListMap");
      TypeUtils.isHibernateInitialized(class1);
      TypeUtils.getRawClass(type0);
      String string0 = "isiterator";
      TypeUtils.loadClass("isiterator", classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(true);
      TypeUtils.cast((Object) null, (Type) null, parserConfig0);
      InstantiationException instantiationException0 = new InstantiationException();
      TypeUtils.castToTimestamp((Object) null);
      ChoiceFormat choiceFormat0 = new ChoiceFormat("o");
      NumberFormatException numberFormatException0 = new NumberFormatException();
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlDate(numberFormatException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : java.lang.NumberFormatException
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      WeakHashMap<SqlDateDeserializer, HttpCookie> weakHashMap0 = new WeakHashMap<SqlDateDeserializer, HttpCookie>();
      Class<Boolean> class0 = Boolean.class;
      String[] stringArray0 = new String[4];
      stringArray0[0] = ",";
      stringArray0[1] = ",";
      stringArray0[2] = "1";
      stringArray0[3] = "1";
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0, stringArray0);
      javaBeanSerializer0.getType();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ",");
      Point point0 = new Point();
      point0.setLocation(48, 68);
      point0.setLocation(251, 251);
      String string0 = "']B|7b#1zOUGekf";
      MockIllegalAccessException mockIllegalAccessException0 = new MockIllegalAccessException("F");
      TypeUtils.castToDate("1");
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      WeakHashMap<String, String> weakHashMap1 = new WeakHashMap<String, String>();
      Class<IllegalStateException> class1 = IllegalStateException.class;
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      TypeUtils.computeGetters((Class<?>) class1, (Map<String, String>) hashtable0, true);
      StringCharacterIterator stringCharacterIterator0 = new StringCharacterIterator("1");
      // Undeclared exception!
      try { 
        TypeUtils.castToBigDecimal(stringCharacterIterator0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }
}
