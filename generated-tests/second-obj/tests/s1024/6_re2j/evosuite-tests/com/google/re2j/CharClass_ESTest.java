/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 09:59:10 GMT 2018
 */

package com.google.re2j;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.re2j.CharClass;
import com.google.re2j.CharGroup;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CharClass_ESTest extends CharClass_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      CharClass charClass1 = charClass0.negateClass();
      CharClass charClass2 = charClass0.appendLiteral(138, 138);
      assertSame(charClass2, charClass1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      int[] intArray0 = new int[1];
      CharClass charClass0 = new CharClass(intArray0);
      CharClass charClass1 = charClass0.appendLiteral((-4527), (-4527));
      assertSame(charClass1, charClass0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      int[] intArray0 = new int[8];
      CharClass charClass0 = new CharClass(intArray0);
      charClass0.appendLiteral(4, 0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      int[] intArray0 = new int[1];
      CharClass charClass0 = new CharClass();
      CharClass charClass1 = charClass0.negateClass();
      CharClass charClass2 = charClass0.appendFoldedRange(0, (-3801));
      assertSame(charClass2, charClass1);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      int[][] intArray0 = new int[0][0];
      CharClass charClass1 = charClass0.appendTableWithSign(intArray0, (-1));
      CharClass charClass2 = charClass1.appendTable(intArray0);
      assertSame(charClass0, charClass2);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 148;
      intArray0[1] = 0;
      CharClass charClass0 = new CharClass(intArray0);
      int[][] intArray1 = new int[0][4];
      CharClass charClass1 = charClass0.appendNegatedTable(intArray1);
      int[][] intArray2 = new int[2][8];
      intArray2[0] = intArray0;
      intArray2[1] = intArray0;
      charClass1.appendTable(intArray2);
      assertArrayEquals(new int[] {148, 0, 0, 1114111}, intArray0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      CharClass charClass1 = charClass0.appendFoldedRange(0, 0);
      CharClass charClass2 = charClass1.negateClass();
      assertSame(charClass0, charClass2);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = (-6);
      CharClass charClass0 = new CharClass(intArray0);
      charClass0.cleanClass();
      assertArrayEquals(new int[] {(-6), 0, 0, 0, 0, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.appendFoldedRange(13054, 13054);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      
      CharClass charClass2 = charClass1.negateClass();
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertNotNull(charClass2);
      
      CharClass charClass3 = charClass2.cleanClass();
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass1);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass0);
      assertNotNull(charClass3);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 970;
      intArray0[1] = 1563;
      intArray0[2] = 1563;
      intArray0[3] = (-991);
      intArray0[2] = 2240;
      intArray0[5] = (-1260);
      intArray0[7] = 1198;
      intArray0[7] = (-499);
      CharClass charClass0 = new CharClass(intArray0);
      assertNotNull(charClass0);
      assertArrayEquals(new int[] {970, 1563, 2240, (-991), 0, (-1260), 0, (-499)}, intArray0);
      
      CharClass charClass1 = charClass0.cleanClass();
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      assertArrayEquals(new int[] {0, (-499), 0, (-1260), 970, 1563, 2240, (-991)}, intArray0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[5] = (-6);
      CharClass charClass0 = new CharClass(intArray0);
      assertNotNull(charClass0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, (-6)}, intArray0);
      
      CharClass charClass1 = charClass0.cleanClass();
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, (-6)}, intArray0);
      
      // Undeclared exception!
      try { 
        charClass0.appendGroup((CharGroup) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.appendLiteral(1635, 1635);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      
      String string0 = charClass0.toString();
      assertSame(charClass0, charClass1);
      assertEquals("[0x663]", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[5] = (-6);
      CharClass charClass0 = new CharClass(intArray0);
      assertNotNull(charClass0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, (-6)}, intArray0);
      
      CharClass charClass1 = charClass0.appendFoldedRange((-6), 0);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      assertArrayEquals(new int[] {0, 0, 0, 0, (-6), 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      int[] intArray0 = new int[0];
      CharClass charClass0 = new CharClass(intArray0);
      assertNotNull(charClass0);
      assertArrayEquals(new int[] {}, intArray0);
      
      CharClass charClass1 = charClass0.appendClassWithSign(intArray0, 1303);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      assertArrayEquals(new int[] {}, intArray0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      int[] intArray0 = new int[1];
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      // Undeclared exception!
      try { 
        charClass0.appendClass(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      CharGroup charGroup0 = null;
      int[][] intArray0 = new int[1][0];
      // Undeclared exception!
      try { 
        charClass0.appendTableWithSign(intArray0, (-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[][] intArray0 = new int[1][4];
      // Undeclared exception!
      charClass0.appendNegatedTable(intArray0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[][] intArray0 = new int[11][9];
      int[] intArray1 = new int[4];
      intArray1[0] = 4;
      intArray1[1] = 65330;
      intArray1[2] = 65330;
      intArray0[0] = intArray1;
      intArray0[1] = intArray1;
      charClass0.appendTableWithSign(intArray0, (-211));
      int int0 = 3598;
      charClass0.appendTableWithSign(intArray0, int0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      int[] intArray0 = new int[0];
      CharClass charClass0 = new CharClass(intArray0);
      charClass0.appendNegatedClass(intArray0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 2293;
      intArray0[1] = 141;
      CharClass charClass0 = new CharClass(intArray0);
      charClass0.appendNegatedClass(intArray0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      int[] intArray0 = new int[0];
      CharClass charClass0 = new CharClass();
      charClass0.appendClass(intArray0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      charClass0.toString();
      charClass0.toArray();
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      int[][] intArray0 = new int[2][9];
      int[] intArray1 = new int[4];
      intArray1[0] = 4;
      intArray1[1] = 65330;
      intArray1[2] = 65330;
      intArray0[0] = intArray1;
      intArray0[1] = intArray1;
      charClass0.appendTableWithSign(intArray0, 3598);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      charClass0.negateClass();
      charClass0.appendFoldedRange(1066, 1066);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      int[] intArray0 = new int[9];
      CharClass charClass0 = new CharClass(intArray0);
      // Undeclared exception!
      try { 
        charClass0.toString();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      charClass0.appendFoldedRange(6, (-5228));
      charClass0.toString();
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      int[] intArray0 = new int[1];
      // Undeclared exception!
      try { 
        charClass0.appendClassWithSign(intArray0, (-2547));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      int[][] intArray0 = new int[4][2];
      CharClass charClass0 = new CharClass(intArray0[3]);
      CharClass charClass1 = charClass0.appendNegatedClass(intArray0[0]);
      charClass1.appendFoldedRange(19, 66);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      int[] intArray0 = new int[6];
      CharClass charClass0 = new CharClass(intArray0);
      int[][] intArray1 = new int[3][8];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      intArray1[2] = intArray0;
      charClass0.appendFoldedRange(2639, 4);
      charClass0.toArray();
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 4208;
      intArray0[1] = 65019;
      CharClass charClass0 = new CharClass(intArray0);
      CharClass charClass1 = charClass0.appendLiteral(1352, 4508);
      CharClass charClass2 = charClass1.negateClass();
      charClass2.cleanClass();
      // Undeclared exception!
      try { 
        CharClass.charClassToString(intArray0, 4508);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      int[] intArray0 = new int[0];
      charClass0.appendFoldedClass(intArray0);
      int[][] intArray1 = new int[0][0];
      charClass0.cleanClass();
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      charClass0.negateClass();
      charClass0.negateClass();
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      int[] intArray0 = new int[6];
      CharClass charClass0 = new CharClass(intArray0);
      CharClass charClass1 = charClass0.appendNegatedClass(intArray0);
      charClass1.appendNegatedClass(intArray0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      charClass0.appendFoldedRange(32, 66640);
      charClass0.appendLiteral(32, (-1533));
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      charClass0.appendFoldedRange(74864, 74864);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      int[][] intArray0 = new int[5][7];
      int[] intArray1 = new int[8];
      intArray1[0] = 613;
      intArray1[3] = 1769;
      intArray1[2] = 2555;
      intArray1[5] = 407;
      intArray1[6] = (-3487);
      intArray1[7] = 543;
      intArray0[0] = intArray1;
      int[] intArray2 = new int[8];
      intArray2[1] = (-3487);
      intArray2[2] = 1;
      intArray2[3] = 613;
      intArray2[5] = 2555;
      intArray2[6] = 543;
      intArray2[7] = 2555;
      intArray0[1] = intArray2;
      intArray0[2] = intArray2;
      int[] intArray3 = new int[4];
      intArray3[0] = 1769;
      intArray3[1] = 1;
      intArray3[3] = 543;
      intArray0[3] = intArray3;
      int[] intArray4 = new int[3];
      intArray4[0] = (-1);
      intArray4[1] = (-3487);
      intArray4[2] = 319;
      intArray0[4] = intArray4;
      charClass0.appendTableWithSign(intArray0, (-3487));
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[2] = 19;
      CharClass charClass0 = new CharClass(intArray0);
      CharClass charClass1 = charClass0.negateClass();
      charClass1.toString();
      CharClass charClass2 = charClass0.appendFoldedClass(intArray0);
      charClass1.cleanClass();
      charClass0.appendRange((-2003), 1134);
      int[][] intArray1 = new int[0][0];
      CharClass charClass3 = charClass2.appendNegatedTable(intArray1);
      int[][] intArray2 = new int[7][4];
      intArray2[0] = intArray0;
      intArray2[1] = intArray0;
      intArray2[2] = intArray0;
      intArray2[3] = intArray0;
      intArray2[4] = intArray0;
      intArray2[5] = intArray0;
      intArray2[6] = intArray0;
      charClass3.appendTableWithSign(intArray2, (-2003));
      charClass0.appendFoldedRange((-659), (-5365));
      charClass2.toArray();
      charClass3.cleanClass();
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      CharGroup charGroup0 = null;
      int[][] intArray0 = new int[0][5];
      CharClass charClass1 = charClass0.appendTableWithSign(intArray0, 1);
      int[][] intArray1 = new int[3][5];
      int[] intArray2 = new int[5];
      intArray2[0] = 1;
      intArray2[1] = 1;
      intArray2[2] = 1;
      intArray2[3] = 1;
      intArray2[4] = (-16060358);
      intArray1[0] = intArray2;
      int[] intArray3 = new int[0];
      intArray1[1] = intArray3;
      int[] intArray4 = new int[7];
      intArray4[0] = 1;
      intArray4[1] = (-16060358);
      intArray4[2] = 1;
      intArray4[3] = 1;
      intArray4[4] = 1;
      intArray4[5] = (-16060358);
      intArray4[6] = (-16060358);
      intArray1[2] = intArray4;
      // Undeclared exception!
      try { 
        charClass1.appendTable(intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      CharClass charClass1 = charClass0.negateClass();
      CharClass charClass2 = charClass1.appendRange((-2819), (-2819));
      int[][] intArray0 = new int[6][0];
      // Undeclared exception!
      charClass2.appendFoldedRange(1839, 68159);
  }
}
