/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 06 21:27:42 GMT 2018
 */

package us.codecraft.webmagic;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.CharArrayWriter;
import java.util.Collection;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Set;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.ForkJoinPool;
import java.util.concurrent.ForkJoinTask;
import java.util.concurrent.LinkedBlockingDeque;
import java.util.concurrent.SynchronousQueue;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.lang.MockThread;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import us.codecraft.webmagic.Page;
import us.codecraft.webmagic.Request;
import us.codecraft.webmagic.Spider;
import us.codecraft.webmagic.SpiderListener;
import us.codecraft.webmagic.downloader.PhantomJSDownloader;
import us.codecraft.webmagic.pipeline.FilePipeline;
import us.codecraft.webmagic.pipeline.JsonFilePipeline;
import us.codecraft.webmagic.pipeline.MultiPagePipeline;
import us.codecraft.webmagic.pipeline.Pipeline;
import us.codecraft.webmagic.processor.SimplePageProcessor;
import us.codecraft.webmagic.scheduler.DuplicateRemovedScheduler;
import us.codecraft.webmagic.scheduler.FileCacheQueueScheduler;
import us.codecraft.webmagic.scheduler.QueueScheduler;
import us.codecraft.webmagic.scheduler.Scheduler;
import us.codecraft.webmagic.scheduler.component.DuplicateRemover;
import us.codecraft.webmagic.selector.AndSelector;
import us.codecraft.webmagic.selector.Selector;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Spider_ESTest extends Spider_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("s");
      Spider spider0 = Spider.create(simplePageProcessor0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("3] pI^Q(6.)", "s");
      Spider spider1 = spider0.downloader(phantomJSDownloader0);
      assertTrue(spider1.isSpawnUrl());
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider1.isExitWhenComplete());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("Y?");
      Spider spider0 = new Spider(simplePageProcessor0);
      Spider spider1 = spider0.setUUID("Y?");
      spider0.clearPipeline();
      spider1.stop();
      assertTrue(spider1.isExitWhenComplete());
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider1.isSpawnUrl());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("us.codecraft.webmagic.Request");
      Spider.create(simplePageProcessor0);
      Spider spider0 = Spider.create(simplePageProcessor0);
      FilePipeline filePipeline0 = new FilePipeline("us.codecraft.webmagic.Request");
      spider0.pipeline(filePipeline0);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "/";
      stringArray0[1] = "/";
      Spider spider1 = spider0.clearPipeline();
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider1.isSpawnUrl());
      assertTrue(spider1.isExitWhenComplete());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("Y?");
      Spider spider0 = new Spider(simplePageProcessor0);
      ForkJoinPool forkJoinPool0 = new ForkJoinPool(2);
      Spider spider1 = spider0.setExecutorService(forkJoinPool0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("Y?", "Y?");
      Locale locale0 = Locale.forLanguageTag("Y?");
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      // Undeclared exception!
      try { 
        spider1.getAll((Collection<String>) set0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/http/protocol/HttpContext
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("us.codecraft.webmagic.Request");
      Spider spider0 = Spider.create(simplePageProcessor0);
      QueueScheduler queueScheduler0 = new QueueScheduler();
      Spider spider1 = spider0.clearPipeline();
      spider1.getSpiderListeners();
      Spider spider2 = spider0.setSpiderListeners((List<SpiderListener>) null);
      // Undeclared exception!
      try { 
        spider2.get("us.codecraft.webmagic.Request");
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = Spider.create(simplePageProcessor0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("", "");
      Spider spider1 = spider0.setDownloader(phantomJSDownloader0);
      assertTrue(spider1.isExitWhenComplete());
      
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      spider0.getAll((Collection<String>) linkedBlockingDeque0);
      Spider spider2 = spider1.setUUID("");
      assertTrue(spider1.isSpawnUrl());
      assertEquals(0L, spider2.getPageCount());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = Spider.create(simplePageProcessor0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("", "");
      Spider spider1 = spider0.setDownloader(phantomJSDownloader0);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "";
      // Undeclared exception!
      try { 
        spider1.test(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.downloader.PhantomJSDownloader", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = Spider.create(simplePageProcessor0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("", "");
      Spider spider1 = spider0.setDownloader(phantomJSDownloader0);
      Spider spider2 = spider1.setExitWhenComplete(true);
      assertTrue(spider1.isExitWhenComplete());
      
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      spider0.getAll((Collection<String>) linkedBlockingDeque0);
      spider2.run();
      assertEquals(0L, spider2.getPageCount());
      assertTrue(spider2.isSpawnUrl());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("UJ0P6{3G~J5sP:^f8N");
      Spider spider0 = Spider.create(simplePageProcessor0);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "UJ0P6{3G~J5sP:^f8N";
      // Undeclared exception!
      try { 
        spider0.addUrl(stringArray0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = new Spider(simplePageProcessor0);
      spider0.setExitWhenComplete(false);
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      // Undeclared exception!
      try { 
        spider0.getAll((Collection<String>) linkedBlockingDeque0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/http/protocol/HttpContext
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("us.codecraft.webmagic.Request");
      Spider spider0 = Spider.create(simplePageProcessor0);
      spider0.setSpawnUrl(true);
      Spider spider1 = spider0.clearPipeline();
      spider1.stop();
      assertTrue(spider1.isExitWhenComplete());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(0L, spider1.getPageCount());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("`,b");
      Spider spider0 = Spider.create(simplePageProcessor0);
      // Undeclared exception!
      try { 
        spider0.thread((-401));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // threadNum should be more than one!
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("Y?");
      Spider spider0 = new Spider(simplePageProcessor0);
      Spider spider1 = Spider.create(simplePageProcessor0);
      Spider spider2 = spider0.clearPipeline();
      spider1.stop();
      spider2.getStatus();
      assertTrue(spider2.isExitWhenComplete());
      assertEquals(0L, spider2.getPageCount());
      assertTrue(spider2.isSpawnUrl());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Spider.Status.fromValue((-1));
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = new Spider(simplePageProcessor0);
      spider0.setEmptySleepTime(2);
      Spider.Status[] spider_StatusArray0 = Spider.Status.values();
      assertNotNull(spider_StatusArray0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("Jj1mrpx0");
      Spider spider0 = new Spider(simplePageProcessor0);
      Request request0 = new Request();
      ForkJoinPool forkJoinPool0 = ForkJoinPool.commonPool();
      Spider spider1 = spider0.thread((ExecutorService) forkJoinPool0, 2);
      // Undeclared exception!
      try { 
        spider1.onError(request0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/collections/CollectionUtils
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("Y?");
      Spider spider0 = new Spider(simplePageProcessor0);
      Spider spider1 = Spider.create(simplePageProcessor0);
      spider1.clearPipeline();
      LinkedList<Request> linkedList0 = new LinkedList<Request>();
      Spider spider2 = spider1.startRequest(linkedList0);
      spider2.stop();
      assertTrue(spider2.isExitWhenComplete());
      assertEquals(0L, spider2.getPageCount());
      assertTrue(spider2.isSpawnUrl());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("Y?");
      Spider spider0 = new Spider(simplePageProcessor0);
      LinkedList<SpiderListener> linkedList0 = new LinkedList<SpiderListener>();
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("Y?", "Y?");
      Spider spider1 = spider0.setDownloader(phantomJSDownloader0);
      Spider spider2 = spider1.thread(2);
      assertEquals(0L, spider2.getPageCount());
      assertTrue(spider2.isSpawnUrl());
      assertTrue(spider2.isExitWhenComplete());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = new Spider(simplePageProcessor0);
      // Undeclared exception!
      try { 
        spider0.sleep((-1374));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // timeout value is negative
         //
         verifyException("java.lang.Thread", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor(" error");
      Spider spider0 = new Spider(simplePageProcessor0);
      Spider spider1 = spider0.clearPipeline();
      String[] stringArray0 = new String[0];
      spider1.addUrl(stringArray0);
      LinkedList<Selector> linkedList0 = new LinkedList<Selector>();
      Request[] requestArray0 = new Request[2];
      Request request0 = new Request();
      requestArray0[0] = request0;
      Request request1 = request0.addCookie("", " error");
      requestArray0[1] = request1;
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("", "");
      Spider spider0 = new Spider(simplePageProcessor0);
      Spider spider1 = spider0.setExitWhenComplete(true);
      Spider spider2 = Spider.create(simplePageProcessor0);
      spider2.clearPipeline();
      spider2.stop();
      Request[] requestArray0 = new Request[1];
      Request request0 = new Request("");
      requestArray0[0] = request0;
      // Undeclared exception!
      try { 
        spider1.addRequest(requestArray0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("Y?");
      Spider spider0 = new Spider(simplePageProcessor0);
      Request request0 = new Request();
      LinkedList<SpiderListener> linkedList0 = new LinkedList<SpiderListener>();
      // Undeclared exception!
      try { 
        spider0.get((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ConcurrentHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      FilePipeline filePipeline0 = new FilePipeline("us.codecraft.webmagic.Request");
      ForkJoinTask.getPool();
      JsonFilePipeline jsonFilePipeline0 = new JsonFilePipeline("us.codecraft.webmagic.Request");
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("zKe,N");
      Spider spider0 = Spider.create(simplePageProcessor0);
      QueueScheduler queueScheduler0 = new QueueScheduler();
      Spider spider1 = spider0.scheduler(queueScheduler0);
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider1.isExitWhenComplete());
      assertTrue(spider1.isSpawnUrl());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      String string0 = "GG";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("GG");
      Spider spider0 = new Spider(simplePageProcessor0);
      Request request0 = new Request();
      LinkedList<Pipeline> linkedList0 = new LinkedList<Pipeline>();
      Spider spider1 = spider0.setPipelines(linkedList0);
      // Undeclared exception!
      try { 
        spider1.onError(request0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/collections/CollectionUtils
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("GI");
      Spider spider0 = new Spider(simplePageProcessor0);
      LinkedList<SpiderListener> linkedList0 = new LinkedList<SpiderListener>();
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("GI", "GI");
      spider0.setDownloader(phantomJSDownloader0);
      String[] stringArray0 = new String[0];
      spider0.test(stringArray0);
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertTrue(spider0.isSpawnUrl());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      String string0 = "|";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("|");
      Spider spider0 = Spider.create(simplePageProcessor0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("|", "|");
      Spider spider1 = spider0.setDownloader(phantomJSDownloader0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Spider spider2 = spider1.startUrls(linkedList0);
      Spider spider3 = spider2.startUrls(linkedList0);
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("|");
      Spider spider4 = spider3.setScheduler(fileCacheQueueScheduler0);
      // Undeclared exception!
      try { 
        spider4.thread((ExecutorService) null, (-61));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // threadNum should be more than one!
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("Y?");
      Spider spider0 = new Spider(simplePageProcessor0);
      LinkedList<SpiderListener> linkedList0 = new LinkedList<SpiderListener>();
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("Y?", "Y?");
      Locale locale0 = Locale.forLanguageTag("Y?");
      locale0.getUnicodeLocaleKeys();
      String[] stringArray0 = new String[7];
      boolean boolean0 = spider0.isSpawnUrl();
      assertTrue(boolean0);
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(0L, spider0.getPageCount());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("Y?");
      Spider spider0 = new Spider(simplePageProcessor0);
      ForkJoinPool forkJoinPool0 = new ForkJoinPool(2);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("Y?", "Y?");
      Spider spider1 = spider0.setDownloader(phantomJSDownloader0);
      spider1.setUUID("Y?");
      int int0 = spider0.getThreadAlive();
      assertEquals(0, int0);
      
      spider0.getSite();
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertTrue(spider0.isSpawnUrl());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("UJ0P6{3G~J5sP:^f8N");
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("N3y2.;4$T3m`=%|VzX", "_zore");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Spider spider1 = spider0.setDownloader(phantomJSDownloader0);
      ForkJoinPool.ForkJoinWorkerThreadFactory forkJoinPool_ForkJoinWorkerThreadFactory0 = mock(ForkJoinPool.ForkJoinWorkerThreadFactory.class, new ViolatedAssumptionAnswer());
      MockThread.getDefaultUncaughtExceptionHandler();
      ForkJoinPool forkJoinPool0 = new ForkJoinPool(3, forkJoinPool_ForkJoinWorkerThreadFactory0, (Thread.UncaughtExceptionHandler) null, false);
      Spider spider2 = spider1.thread((ExecutorService) forkJoinPool0, 5000);
      Spider spider3 = spider2.setExitWhenComplete(true);
      Spider spider4 = spider3.clearPipeline();
      Request[] requestArray0 = new Request[1];
      QueueScheduler queueScheduler0 = new QueueScheduler();
      queueScheduler0.poll(spider3);
      requestArray0[0] = null;
      // Undeclared exception!
      try { 
        spider4.addRequest(requestArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.scheduler.DuplicateRemovedScheduler", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("us.codecraft.webmagic.Request");
      Spider spider0 = Spider.create(simplePageProcessor0);
      QueueScheduler queueScheduler0 = new QueueScheduler();
      Spider spider1 = spider0.setScheduler(queueScheduler0);
      spider1.getSpiderListeners();
      spider1.getPageCount();
      // Undeclared exception!
      try { 
        spider0.get("us.codecraft.webmagic.Request");
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("/Xl50V");
      Spider spider0 = new Spider(simplePageProcessor0);
      Spider spider1 = spider0.setUUID("/Xl50V");
      spider1.setScheduler((Scheduler) null);
      Request request0 = new Request("Spider is already running!");
      Request request1 = request0.setMethod("");
      request1.setCharset("_cycle_tried_times");
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("a;2z~M&B.G");
      DuplicateRemover duplicateRemover0 = fileCacheQueueScheduler0.getDuplicateRemover();
      DuplicateRemovedScheduler duplicateRemovedScheduler0 = fileCacheQueueScheduler0.setDuplicateRemover(duplicateRemover0);
      Spider spider2 = spider1.setScheduler(duplicateRemovedScheduler0);
      spider0.stop();
      List<SpiderListener> list0 = spider2.getSpiderListeners();
      assertNull(list0);
      
      spider0.getCollectorPipeline();
      assertTrue(spider0.isExitWhenComplete());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(0L, spider0.getPageCount());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("xSq/*H[6ho|o? *w");
      Spider spider0 = new Spider(simplePageProcessor0);
      ForkJoinPool forkJoinPool0 = new ForkJoinPool(5000);
      LinkedList<SpiderListener> linkedList0 = new LinkedList<SpiderListener>();
      Request[] requestArray0 = new Request[0];
      Spider spider1 = spider0.addRequest(requestArray0);
      spider1.setSpiderListeners(linkedList0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("", "Y?");
      Spider spider2 = spider1.setDownloader(phantomJSDownloader0);
      LinkedList<String> linkedList1 = new LinkedList<String>();
      spider1.startUrls(linkedList1);
      spider1.clearPipeline();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "Y?";
      stringArray0[1] = "";
      stringArray0[2] = "xSq/*H[6ho|o? *w";
      // Undeclared exception!
      try { 
        spider2.test(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.downloader.PhantomJSDownloader", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("Running");
      Spider spider0 = Spider.create(simplePageProcessor0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("Running", "Running");
      Spider spider1 = spider0.setDownloader(phantomJSDownloader0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Spider spider2 = spider1.startUrls(linkedList0);
      // Undeclared exception!
      try { 
        spider2.get("Running");
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("Running");
      Spider spider0 = Spider.create(simplePageProcessor0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("Running", "Running");
      Spider spider1 = spider0.setDownloader(phantomJSDownloader0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Spider spider2 = spider1.startUrls(linkedList0);
      String[] stringArray0 = new String[4];
      // Undeclared exception!
      try { 
        spider2.test(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.downloader.PhantomJSDownloader", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("Y?");
      Spider spider0 = new Spider(simplePageProcessor0);
      Spider spider1 = Spider.create(simplePageProcessor0);
      spider0.clearPipeline();
      spider1.stop();
      spider1.runAsync();
      FilePipeline filePipeline0 = new FilePipeline();
      spider1.addPipeline(filePipeline0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("G-");
      Spider spider0 = new Spider(simplePageProcessor0);
      SimplePageProcessor simplePageProcessor1 = new SimplePageProcessor("G-");
      Spider spider1 = new Spider(simplePageProcessor1);
      spider1.getThreadAlive();
      // Undeclared exception!
      try { 
        spider1.close();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = Spider.create(simplePageProcessor0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("", "");
      Spider spider1 = spider0.setDownloader(phantomJSDownloader0);
      Spider spider2 = spider1.setExitWhenComplete(true);
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      spider0.getAll((Collection<String>) linkedBlockingDeque0);
      spider2.getStartTime();
      assertTrue(spider2.isSpawnUrl());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("Y?");
      Spider spider0 = new Spider(simplePageProcessor0);
      ForkJoinPool forkJoinPool0 = new ForkJoinPool(2);
      Spider spider1 = spider0.setExecutorService(forkJoinPool0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("Y?", "Y?");
      PhantomJSDownloader phantomJSDownloader1 = new PhantomJSDownloader("Y?", "-3J~?i[b .Gb:3.2n");
      Spider spider2 = spider0.setDownloader(phantomJSDownloader1);
      Spider spider3 = spider2.setUUID("-3J~?i[b .Gb:3.2n");
      String[] stringArray0 = new String[0];
      spider1.test(stringArray0);
      spider0.getThreadAlive();
      spider3.getPageCount();
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("s");
      Spider spider0 = Spider.create(simplePageProcessor0);
      QueueScheduler queueScheduler0 = new QueueScheduler();
      Spider spider1 = spider0.setScheduler(queueScheduler0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("3] pI^Q(6.)", "s");
      spider1.isExitWhenComplete();
      LinkedList<Selector> linkedList0 = new LinkedList<Selector>();
      AndSelector andSelector0 = new AndSelector(linkedList0);
      List<String> list0 = andSelector0.selectList("`Mz");
      // Undeclared exception!
      try { 
        spider1.getAll((Collection<String>) list0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/http/protocol/HttpContext
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("us.codecraft.webmagic.Request");
      Spider spider0 = Spider.create(simplePageProcessor0);
      spider0.extractAndAddRequests((Page) null, false);
      LinkedList<SpiderListener> linkedList0 = new LinkedList<SpiderListener>();
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("us.codecraft.webmagic.Request");
      Spider spider0 = Spider.create(simplePageProcessor0);
      // Undeclared exception!
      try { 
        spider0.extractAndAddRequests((Page) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("Y?");
      Spider spider0 = new Spider(simplePageProcessor0);
      ForkJoinPool forkJoinPool0 = new ForkJoinPool(2);
      Spider spider1 = spider0.setExecutorService(forkJoinPool0);
      LinkedList<SpiderListener> linkedList0 = new LinkedList<SpiderListener>();
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("Y?", "Y?");
      Spider spider2 = spider1.setDownloader(phantomJSDownloader0);
      spider2.setUUID("Y?");
      Locale locale0 = Locale.forLanguageTag("Y?");
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      spider1.getAll((Collection<String>) set0);
      SynchronousQueue<String> synchronousQueue0 = new SynchronousQueue<String>();
      spider0.getAll((Collection<String>) synchronousQueue0);
      spider0.getCollectorPipeline();
      spider2.getThreadAlive();
      spider0.getSite();
      spider0.getScheduler();
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("Y?");
      Spider spider0 = new Spider(simplePageProcessor0);
      ForkJoinPool forkJoinPool0 = new ForkJoinPool(2);
      forkJoinPool0.execute((Runnable) spider0);
      Spider spider1 = spider0.setExecutorService(forkJoinPool0);
      LinkedList<SpiderListener> linkedList0 = new LinkedList<SpiderListener>();
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("Y?", "Y?");
      Spider spider2 = spider1.setDownloader(phantomJSDownloader0);
      spider2.setUUID("Y?");
      Locale locale0 = Locale.forLanguageTag("Y?");
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      // Undeclared exception!
      try { 
        spider1.getAll((Collection<String>) set0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Spider is already running!
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("us.codecraft.webmagic.Request");
      Spider spider0 = Spider.create(simplePageProcessor0);
      QueueScheduler queueScheduler0 = new QueueScheduler();
      Spider spider1 = spider0.clearPipeline();
      spider1.stop();
      spider1.getSpiderListeners();
      spider0.start();
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Request request0 = new Request();
      Request request1 = new Request();
      MultiPagePipeline multiPagePipeline0 = new MultiPagePipeline();
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = new Spider(simplePageProcessor0);
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("_cycle_tried_times");
      spider0.scheduler(fileCacheQueueScheduler0);
      // Undeclared exception!
      try { 
        spider0.close();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.scheduler.FileCacheQueueScheduler", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("Running");
      Spider spider0 = Spider.create(simplePageProcessor0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("Running", "Running");
      Spider spider1 = spider0.setDownloader(phantomJSDownloader0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add("Running");
      spider1.thread(2846);
      Spider spider2 = spider1.startUrls(linkedList0);
      String[] stringArray0 = new String[4];
      // Undeclared exception!
      try { 
        spider2.test(stringArray0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }
}
