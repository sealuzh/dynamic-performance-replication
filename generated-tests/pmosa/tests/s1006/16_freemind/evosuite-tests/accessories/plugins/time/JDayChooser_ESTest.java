/*
 * This file was automatically generated by EvoSuite
 * Tue Jul 17 05:30:00 GMT 2018
 */

package accessories.plugins.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import accessories.plugins.ClonePasteAction;
import accessories.plugins.time.JDayChooser;
import accessories.plugins.time.JMonthChooser;
import accessories.plugins.time.JYearChooser;
import freemind.main.FreeMindApplet;
import freemind.modes.MindMap;
import freemind.modes.Mode;
import freemind.modes.mindmapmode.MindMapController;
import java.awt.AWTEventMulticaster;
import java.awt.Button;
import java.awt.Color;
import java.awt.Dialog;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.HeadlessException;
import java.awt.SystemColor;
import java.awt.event.ActionEvent;
import java.awt.event.ContainerListener;
import java.awt.event.FocusEvent;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.geom.AffineTransform;
import java.awt.image.AffineTransformOp;
import java.awt.image.BufferedImage;
import java.awt.image.IndexColorModel;
import java.beans.PropertyChangeListener;
import java.sql.Time;
import java.sql.Timestamp;
import java.time.DayOfWeek;
import java.util.Date;
import java.util.Locale;
import java.util.Vector;
import javax.help.DefaultHelpModel;
import javax.help.HelpSet;
import javax.help.JHelp;
import javax.help.JHelpContentViewer;
import javax.help.plaf.basic.BasicContentViewerUI;
import javax.swing.JButton;
import javax.swing.JCheckBox;
import javax.swing.JComponent;
import javax.swing.JFrame;
import javax.swing.JTabbedPane;
import javax.swing.KeyStroke;
import javax.swing.border.Border;
import javax.swing.border.LineBorder;
import javax.swing.plaf.synth.SynthPanelUI;
import javax.swing.plaf.synth.SynthToolBarUI;
import org.apache.batik.dom.GenericDocument;
import org.apache.fop.fonts.FontInfo;
import org.apache.fop.pdf.PDFColorSpace;
import org.apache.fop.pdf.PDFDocument;
import org.apache.fop.pdf.PDFFunction;
import org.apache.fop.pdf.PDFPage;
import org.apache.fop.pdf.PDFResources;
import org.apache.fop.pdf.PDFShading;
import org.apache.fop.pdf.PDFStream;
import org.apache.fop.svg.PDFGraphics2D;
import org.apache.xalan.templates.ElemCallTemplate;
import org.apache.xalan.templates.StylesheetRoot;
import org.apache.xalan.transformer.TransformerImpl;
import org.apache.xerces.dom.DocumentTypeImpl;
import org.apache.xerces.dom.PSVIDOMImplementationImpl;
import org.apache.xerces.dom.PSVIDocumentImpl;
import org.apache.xml.utils.DefaultErrorHandler;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.text.MockSimpleDateFormat;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.hsqldb.rowio.RowOutputTextLog;
import org.junit.runner.RunWith;
import org.w3c.dom.DOMException;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JDayChooser_ESTest extends JDayChooser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      boolean boolean0 = jDayChooser0.isDayBordersVisible();
      assertTrue(boolean0);
      
      jDayChooser0.getDayPanel();
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getRootPane();
      jDayChooser0.getUIClassID();
      jDayChooser0.getMinSelectableDate();
      jDayChooser0.getWeekdayForeground();
      jDayChooser0.setYearChooser((JYearChooser) null);
      jDayChooser0.isDecorationBackgroundVisible();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      FontInfo fontInfo0 = new FontInfo();
      String string0 = "H*'s:eT=n\"oC9k";
      PDFDocument pDFDocument0 = new PDFDocument("H*'s:eT=n\"oC9k");
      int int0 = 192;
      PDFResources pDFResources0 = new PDFResources(192);
      PDFStream pDFStream0 = new PDFStream();
      int int1 = (-586);
      pDFDocument0.addTrailerObject(pDFStream0);
      int int2 = 100;
      PDFColorSpace pDFColorSpace0 = new PDFColorSpace(192);
      DefaultErrorHandler defaultErrorHandler0 = new DefaultErrorHandler(true);
      StylesheetRoot stylesheetRoot0 = new StylesheetRoot(defaultErrorHandler0);
      TransformerImpl transformerImpl0 = new TransformerImpl(stylesheetRoot0);
      ElemCallTemplate elemCallTemplate0 = new ElemCallTemplate();
      transformerImpl0.processSortKeys(elemCallTemplate0, 192);
      int int3 = 401;
      int int4 = 3823;
      MindMapController mindMapController0 = null;
      try {
        mindMapController0 = new MindMapController((Mode) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("freemind.modes.ControllerAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setDecorationBordersVisible(true);
      DayOfWeek dayOfWeek0 = DayOfWeek.FRIDAY;
      ActionEvent actionEvent0 = new ActionEvent(dayOfWeek0, 95, "!_G", (-325L), 95);
      // Undeclared exception!
      try { 
        jDayChooser0.actionPerformed(actionEvent0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.time.DayOfWeek cannot be cast to javax.swing.JButton
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser_DecoratorButton0.isFocusable();
      int int0 = (-974);
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser_DecoratorButton0, (-974), true);
      jDayChooser0.focusGained(focusEvent0);
      int int1 = (-1877);
      int int2 = (-771);
      AffineTransform affineTransform0 = new AffineTransform(4.0, (-771), 1165.63161255, 1.0, 1950.2278514656377, 1.0);
      AffineTransformOp affineTransformOp0 = null;
      try {
        affineTransformOp0 = new AffineTransformOp(affineTransform0, (-974));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unknown interpolation type: -974
         //
         verifyException("java.awt.image.AffineTransformOp", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.drawDays();
      Locale locale0 = Locale.ROOT;
      locale0.getExtensionKeys();
      locale0.stripExtensions();
      jDayChooser0.getAlignmentX();
      jDayChooser0.init();
      jDayChooser0.getRegisteredKeyStrokes();
      jDayChooser0.setLocale(locale0);
      jDayChooser0.getDayPanel();
      jDayChooser0.getSelectedDay();
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      ContainerListener containerListener0 = mock(ContainerListener.class, new ViolatedAssumptionAnswer());
      AWTEventMulticaster.remove(containerListener0, containerListener0);
      AWTEventMulticaster.add((ContainerListener) null, (ContainerListener) null);
      jDayChooser0.addContainerListener((ContainerListener) null);
      jDayChooser0.getMaxDayCharacters();
      jDayChooser0.isDecorationBackgroundVisible();
      Color color0 = Color.WHITE;
      jDayChooser0.setSundayForeground(color0);
      PSVIDocumentImpl pSVIDocumentImpl0 = new PSVIDocumentImpl();
      DocumentTypeImpl documentTypeImpl0 = new DocumentTypeImpl(pSVIDocumentImpl0, "Turkish");
      PSVIDOMImplementationImpl pSVIDOMImplementationImpl0 = new PSVIDOMImplementationImpl();
      GenericDocument genericDocument0 = null;
      try {
        genericDocument0 = new GenericDocument(documentTypeImpl0, pSVIDOMImplementationImpl0);
        fail("Expecting exception: DOMException");
      
      } catch(DOMException e) {
         //
         // The given node (type: 9, name: #document) was not created by the current document.
         //
         verifyException("org.apache.batik.dom.AbstractNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.invalidate();
      jDayChooser0.setMaxDayCharacters(0);
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      JButton jButton0 = jDayChooser0.getSelectedDay();
      assertNull(jButton0);
      
      jDayChooser0.setFocus();
      jDayChooser0.getDayPanel();
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      HelpSet helpSet0 = new HelpSet();
      DefaultHelpModel defaultHelpModel0 = new DefaultHelpModel(helpSet0);
      JHelp jHelp0 = new JHelp(defaultHelpModel0);
      JHelpContentViewer jHelpContentViewer0 = jHelp0.getContentViewer();
      BasicContentViewerUI basicContentViewerUI0 = new BasicContentViewerUI(jHelpContentViewer0);
      jDayChooser0.removePropertyChangeListener("", (PropertyChangeListener) basicContentViewerUI0);
      assertTrue(jDayChooser0.isDayBordersVisible());
      
      jDayChooser0.setDayBordersVisible(false);
      jDayChooser0.setFocus();
      jDayChooser0.getMaxDayCharacters();
      jDayChooser0.setYear(210);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      Timestamp timestamp0 = new Timestamp(2521L);
      jDayChooser0.setMaxSelectableDate(timestamp0);
      Date date0 = jDayChooser0.defaultMinSelectableDate;
      jDayChooser0.setMinSelectableDate(date0);
      jDayChooser0.getMinSelectableDate();
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, (-1));
      jDayChooser0.focusGained(focusEvent0);
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Date date0 = jDayChooser0.minSelectableDate;
      jDayChooser0.setMaxSelectableDate(date0);
      Color color0 = jDayChooser0.getSundayForeground();
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals((-6029312), color0.getRGB());
      assertEquals(14, jDayChooser0.getDay());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      Date date0 = jDayChooser0.defaultMaxSelectableDate;
      jDayChooser0.setMinSelectableDate(date0);
      assertEquals(14, jDayChooser0.getDay());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.isPaintingForPrint();
      jDayChooser0.dayBordersVisible = false;
      Color color0 = Color.gray;
      float[] floatArray0 = new float[9];
      floatArray0[0] = (-862.5635F);
      floatArray0[1] = 0.0F;
      floatArray0[2] = (-1804.2898F);
      floatArray0[3] = 0.4F;
      floatArray0[4] = 1000.0F;
      floatArray0[5] = (-2096.988F);
      floatArray0[6] = (-546.68646F);
      floatArray0[7] = 789.08044F;
      floatArray0[8] = 1266.273F;
      color0.getComponents(floatArray0);
      color0.getColorSpace();
      jDayChooser0.setWeekdayForeground(color0);
      assertEquals(14, jDayChooser0.getDay());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      AWTEventMulticaster.add((ContainerListener) null, (ContainerListener) null);
      AWTEventMulticaster.add((ContainerListener) null, (ContainerListener) null);
      AWTEventMulticaster.remove((ContainerListener) null, (ContainerListener) null);
      jDayChooser0.addContainerListener((ContainerListener) null);
      jDayChooser0.setSundayForeground((Color) null);
      jDayChooser0.setMaxDayCharacters(2743);
      jDayChooser0.init();
      jDayChooser0.setDayBordersVisible(false);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, (-969), (-1204), 48, (-969), '/');
      jDayChooser0.keyTyped(keyEvent0);
      jDayChooser0.setWeekOfYearVisible(false);
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      SynthToolBarUI synthToolBarUI0 = new SynthToolBarUI();
      synthToolBarUI0.getFloatingColor();
      jDayChooser0.setMaxDayCharacters(9);
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      
      jDayChooser0.setWeekOfYearVisible(false);
      boolean boolean0 = jDayChooser0.isDecorationBordersVisible();
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      SynthToolBarUI synthToolBarUI0 = new SynthToolBarUI();
      synthToolBarUI0.getFloatingColor();
      jDayChooser0.getMaxSelectableDate();
      jDayChooser0.updateUI();
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      SynthToolBarUI synthToolBarUI0 = new SynthToolBarUI();
      jDayChooser0.getDecorationBackgroundColor();
      jDayChooser0.setMaxDayCharacters(3582);
      // Undeclared exception!
      try { 
        Time.valueOf("W?JuJ,o");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.sql.Time", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 33, 33, 33, 33, '=');
      // Undeclared exception!
      try { 
        jDayChooser0.keyPressed(keyEvent0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 100, 100, 100, 100, 'R');
      jDayChooser0.keyPressed(keyEvent0);
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.setMonth(3);
      JTabbedPane jTabbedPane0 = new JTabbedPane();
      // Undeclared exception!
      try { 
        jTabbedPane0.getBackgroundAt(3);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      JButton[] jButtonArray0 = new JButton[0];
      jDayChooser0.days = jButtonArray0;
      jDayChooser0.setEnabled(true);
      jDayChooser0.isDecorationBordersVisible();
      // Undeclared exception!
      try { 
        jDayChooser0.setMonth(3315);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      String[] stringArray0 = new String[7];
      stringArray0[0] = ";&&110~n^S";
      stringArray0[1] = "day";
      stringArray0[2] = "day";
      stringArray0[3] = "day";
      stringArray0[4] = "HT`P^'A";
      stringArray0[5] = "day";
      stringArray0[6] = "day";
      // Undeclared exception!
      try { 
        JDayChooser.main(stringArray0);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getX();
      SynthToolBarUI synthToolBarUI0 = new SynthToolBarUI();
      synthToolBarUI0.getFloatingColor();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 2733, (-969), 160, 8, '3');
      jDayChooser0.keyTyped(keyEvent0);
      jDayChooser0.setWeekOfYearVisible(true);
      JDayChooser jDayChooser1 = new JDayChooser();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser1.new DecoratorButton();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "day";
      stringArray0[1] = "day";
      stringArray0[2] = "day";
      stringArray0[3] = "day";
      jDayChooser0.dayNames = stringArray0;
      RowOutputTextLog rowOutputTextLog0 = new RowOutputTextLog();
      rowOutputTextLog0.setMode(8);
      jDayChooser0.setDecorationBackgroundColor((Color) null);
      Locale locale0 = Locale.ENGLISH;
      jDayChooser1.setLocale(locale0);
      assertTrue(jDayChooser1.isDayBordersVisible());
      assertEquals(14, jDayChooser1.getDay());
      assertTrue(jDayChooser1.isDecorationBackgroundVisible());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      SynthToolBarUI synthToolBarUI0 = new SynthToolBarUI();
      synthToolBarUI0.getFloatingColor();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 2733, 50L, 2733, 2733, 'D');
      jDayChooser0.keyPressed(keyEvent0);
      jDayChooser0.keyReleased(keyEvent0);
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-63);
      byteArray0[1] = (byte) (-63);
      byteArray0[2] = (byte) (-63);
      byteArray0[3] = (byte) (-63);
      byteArray0[4] = (byte) (-120);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, (-627), false);
      focusEvent0.setSource((Object) null);
      FocusEvent focusEvent1 = new FocusEvent(jDayChooser0, 4);
      jDayChooser0.focusLost(focusEvent1);
      jDayChooser0.isWeekOfYearVisible();
      Color color0 = jDayChooser0.getSundayForeground();
      assertEquals((-6029312), color0.getRGB());
      
      JDayChooser jDayChooser1 = new JDayChooser(false);
      jDayChooser1.setMaxDayCharacters((byte) (-63));
      jDayChooser0.setMaxDayCharacters((-1437625606));
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      SynthToolBarUI synthToolBarUI0 = new SynthToolBarUI();
      synthToolBarUI0.getFloatingColor();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 2733, 50L, 2733, 2733, 'D');
      jDayChooser0.keyPressed(keyEvent0);
      jDayChooser0.setMonthChooser((JMonthChooser) null);
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, (-1490));
      jDayChooser0.focusGained(focusEvent0);
      boolean boolean0 = jDayChooser0.isDecorationBordersVisible();
      assertFalse(boolean0);
      assertEquals(14, jDayChooser0.getDay());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("day");
      Date date0 = mockSimpleDateFormat0.get2DigitYearStart();
      jDayChooser0.setSelectableDateRange(date0, date0);
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      MockGregorianCalendar mockGregorianCalendar0 = (MockGregorianCalendar)jDayChooser0.today;
      SynthPanelUI synthPanelUI0 = new SynthPanelUI();
      JCheckBox jCheckBox0 = new JCheckBox("|&p`.0TMK /+");
      synthPanelUI0.getMinimumSize(jCheckBox0);
      synthPanelUI0.contains(jCheckBox0, 160, (-429));
      jDayChooser0.removePropertyChangeListener((PropertyChangeListener) synthPanelUI0);
      jDayChooser0.setDayBordersVisible(false);
      byte[] byteArray0 = new byte[3];
      Border border0 = LineBorder.createGrayLineBorder();
      jDayChooser0.setBorder(border0);
      byteArray0[0] = (byte)105;
      byteArray0[1] = (byte) (-87);
      byteArray0[2] = (byte) (-7);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      KeyListener keyListener0 = AWTEventMulticaster.add((KeyListener) jDayChooser0, (KeyListener) null);
      jDayChooser0.addKeyListener(keyListener0);
      jDayChooser0.setCalendar(mockGregorianCalendar0);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      
      jDayChooser0.getInputMethodListeners();
      int int0 = jDayChooser0.getMaxDayCharacters();
      assertEquals(0, int0);
      
      boolean boolean0 = jDayChooser0.isDecorationBackgroundVisible();
      assertTrue(boolean0);
      
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, (-2829), false);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      focusEvent0.getOppositeComponent();
      jDayChooser0.focusLost(focusEvent0);
      jDayChooser0.setFocus();
      jDayChooser0.isDayBordersVisible();
      jDayChooser0.keyTyped((KeyEvent) null);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      SynthToolBarUI synthToolBarUI0 = new SynthToolBarUI();
      synthToolBarUI0.getFloatingColor();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 2587, 5, 5, 34, 'T');
      // Undeclared exception!
      try { 
        jDayChooser0.keyPressed(keyEvent0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      AWTEventMulticaster.add((ContainerListener) null, (ContainerListener) null);
      AWTEventMulticaster.add((ContainerListener) null, (ContainerListener) null);
      AWTEventMulticaster.remove((ContainerListener) null, (ContainerListener) null);
      jDayChooser0.addContainerListener((ContainerListener) null);
      jDayChooser0.setSundayForeground((Color) null);
      jDayChooser0.setMaxDayCharacters(2743);
      jDayChooser0.init();
      jDayChooser0.setDayBordersVisible(false);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, (-969), (-1204), 48, (-969), '/');
      jDayChooser0.keyTyped(keyEvent0);
      jDayChooser0.keyPressed(keyEvent0);
      jDayChooser0.setWeekOfYearVisible(true);
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      
      jDayChooser0.setWeekOfYearVisible(false);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser_DecoratorButton0.paint((Graphics) null);
      int int0 = jDayChooser0.getDay();
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(14, int0);
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser_DecoratorButton0.getIconTextGap();
      jDayChooser_DecoratorButton0.isFocusable();
      jDayChooser0.setEnabled(true);
      byte byte0 = (byte) (-14);
      jDayChooser0.firePropertyChange("O:>(*m= mpsv-R6K", (byte) (-14), (byte) (-14));
      JMonthChooser jMonthChooser0 = new JMonthChooser(true);
      int int0 = 915;
      jMonthChooser0.setDebugGraphicsOptions(915);
      jDayChooser0.setMonthChooser(jMonthChooser0);
      FreeMindApplet freeMindApplet0 = null;
      try {
        freeMindApplet0 = new FreeMindApplet();
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.applet.Applet", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      SynthToolBarUI synthToolBarUI0 = new SynthToolBarUI();
      synthToolBarUI0.getFloatingColor();
      KeyStroke keyStroke0 = KeyStroke.getKeyStroke(170, 170);
      jDayChooser0.getActionForKeyStroke(keyStroke0);
      jDayChooser0.setMaxDayCharacters(1);
      jDayChooser0.getLocale();
      jDayChooser0.setAlwaysFireDayProperty(false);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser_DecoratorButton0.isFocusable();
      Button button0 = null;
      try {
        button0 = new Button("day");
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-50);
      byteArray0[1] = (byte) (-124);
      SystemColor systemColor0 = SystemColor.activeCaption;
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 48, (byte) (-124), 48, 33, 'S');
      // Undeclared exception!
      try { 
        jDayChooser0.keyPressed(keyEvent0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 34, 34, 40, 40, 'K');
      jDayChooser0.keyPressed(keyEvent0);
      assertEquals(21, jDayChooser0.getDay());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      SystemColor systemColor0 = SystemColor.controlShadow;
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, (-4012), 5L, 278, (-1562), 'g');
      KeyEvent keyEvent1 = new KeyEvent(jDayChooser0, (-1404), (-2163L), (-1404), 36, 'g');
      assertEquals(14, jDayChooser0.getDay());
      
      jDayChooser0.keyPressed(keyEvent1);
      jDayChooser0.setAlwaysFireDayProperty(true);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setMaxDayCharacters(28);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 43, 1L, 43, 39, ',');
      jDayChooser0.keyPressed(keyEvent0);
      jDayChooser0.setAlwaysFireDayProperty(false);
      assertEquals(15, jDayChooser0.getDay());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, (-182), (-182), 38, 38, '~');
      JComponent.getDefaultLocale();
      jDayChooser0.keyPressed(keyEvent0);
      jDayChooser0.drawWeeks();
      assertEquals(7, jDayChooser0.getDay());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      JComponent.getDefaultLocale();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 36, 0L, 6, 37, 'D');
      jDayChooser0.keyPressed(keyEvent0);
      assertEquals(13, jDayChooser0.getDay());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      JButton[] jButtonArray0 = new JButton[3];
      jDayChooser0.weeks = jButtonArray0;
      jDayChooser0.setEnabled(false);
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }
}
