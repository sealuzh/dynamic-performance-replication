/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 06 22:14:55 GMT 2018
 */

package weka.classifiers;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.LineNumberReader;
import java.io.PipedInputStream;
import java.io.PipedReader;
import java.io.PushbackInputStream;
import java.nio.charset.Charset;
import java.util.LinkedList;
import java.util.Random;
import javax.accessibility.AccessibleContext;
import javax.swing.Action;
import javax.swing.JOptionPane;
import javax.swing.JSplitPane;
import javax.swing.plaf.nimbus.NimbusStyle;
import javax.swing.text.DefaultEditorKit;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteURL;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.junit.runner.RunWith;
import weka.attributeSelection.WrapperSubsetEval;
import weka.classifiers.AbstractClassifier;
import weka.classifiers.Classifier;
import weka.classifiers.ConditionalDensityEstimator;
import weka.classifiers.CostMatrix;
import weka.classifiers.Evaluation;
import weka.classifiers.bayes.NaiveBayesMultinomialText;
import weka.classifiers.functions.GaussianProcesses;
import weka.classifiers.functions.SGDText;
import weka.classifiers.functions.SMO;
import weka.classifiers.functions.VotedPerceptron;
import weka.classifiers.lazy.IBk;
import weka.classifiers.lazy.LWL;
import weka.classifiers.lazy.kstar.KStarConstants;
import weka.classifiers.meta.CVParameterSelection;
import weka.classifiers.meta.CostSensitiveClassifier;
import weka.classifiers.meta.FilteredClassifier;
import weka.classifiers.meta.MultiClassClassifierUpdateable;
import weka.classifiers.meta.RegressionByDiscretization;
import weka.classifiers.meta.Stacking;
import weka.classifiers.misc.InputMappedClassifier;
import weka.classifiers.misc.SerializedClassifier;
import weka.classifiers.rules.DecisionTable;
import weka.classifiers.rules.JRip;
import weka.classifiers.rules.OneR;
import weka.classifiers.rules.ZeroR;
import weka.classifiers.trees.DecisionStump;
import weka.classifiers.trees.LMT;
import weka.classifiers.trees.REPTree;
import weka.classifiers.trees.RandomTree;
import weka.clusterers.EM;
import weka.core.Attribute;
import weka.core.BinarySparseInstance;
import weka.core.Capabilities;
import weka.core.DenseInstance;
import weka.core.GlobalInfoJavadoc;
import weka.core.Instance;
import weka.core.Instances;
import weka.core.SparseInstance;
import weka.core.TestInstances;
import weka.core.converters.ArffLoader;
import weka.core.converters.C45Loader;
import weka.core.converters.ConverterUtils;
import weka.core.converters.DatabaseLoader;
import weka.core.converters.JSONLoader;
import weka.core.converters.LibSVMLoader;
import weka.core.converters.SerializedInstancesLoader;
import weka.core.converters.TextDirectoryLoader;
import weka.core.converters.XRFFLoader;
import weka.core.neighboursearch.BallTree;
import weka.core.neighboursearch.KDTree;
import weka.core.tokenizers.NGramTokenizer;
import weka.estimators.UnivariateKernelEstimator;
import weka.filters.AllFilter;
import weka.filters.MultiFilter;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Evaluation_ESTest extends Evaluation_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      CostMatrix costMatrix0 = costSensitiveClassifier0.getCostMatrix();
      CostMatrix costMatrix1 = new CostMatrix(costMatrix0);
      Evaluation evaluation0 = null;
      try {
        evaluation0 = new Evaluation(instances0, costMatrix1);
        fail("Expecting exception: Exception");
      
      } catch(Throwable e) {
         //
         // Cost matrix not compatible with data!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      RandomTree randomTree0 = new RandomTree();
      String string0 = Evaluation.makeOptionString(randomTree0, true);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String[] stringArray0 = new String[1];
      Evaluation.main(stringArray0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.getDataSet();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      LWL lWL0 = new LWL();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Classifier classifier0 = lWL0.getClassifier();
      Evaluation.makeOptionString(classifier0, true);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "@relation");
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.SFMeanSchemeEntropy();
      assertEquals(Double.NaN, double0, 0.01);
      
      evaluation0.relativeAbsoluteError();
      assertEquals(Double.NaN, evaluation0.meanPriorAbsoluteError(), 0.01);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
      assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MultiClassClassifierUpdateable multiClassClassifierUpdateable0 = new MultiClassClassifierUpdateable();
      Capabilities capabilities0 = new Capabilities(multiClassClassifierUpdateable0);
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      String string0 = evaluation0.toSummaryString();
      assertEquals("\nTotal Number of Instances                0     \n", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.unclassified();
      evaluation0.getRevision();
      evaluation0.coverageOfTestCasesByPredictedRegions();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = UnivariateKernelEstimator.CONST;
      evaluation0.rootMeanPriorSquaredError();
      double double1 = evaluation0.m_SumSchemeEntropy;
      ArffLoader arffLoader0 = new ArffLoader();
      LWL lWL0 = new LWL();
      JSONLoader jSONLoader0 = new JSONLoader();
      JSONLoader jSONLoader1 = new JSONLoader();
      evaluation0.coverageOfTestCasesByPredictedRegions();
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      String[] stringArray0 = new String[0];
      AbstractClassifier.runClassifier(lWL0, stringArray0);
      evaluation0.pctIncorrect();
      BallTree ballTree0 = new BallTree();
      evaluation0.weightedPrecision();
      evaluation0.KBRelativeInformation();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.useNoPriors();
      evaluation0.weightedRecall();
      evaluation0.KBRelativeInformation();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      CostMatrix costMatrix0 = costSensitiveClassifier0.getCostMatrix();
      CostMatrix costMatrix1 = new CostMatrix(costMatrix0);
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.SFSchemeEntropy();
      evaluation0.unclassified();
      evaluation0.weightedAreaUnderROC();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.SFSchemeEntropy();
      evaluation0.priorEntropy();
      JSONLoader jSONLoader0 = new JSONLoader();
      evaluation0.coverageOfTestCasesByPredictedRegions();
      evaluation0.toClassDetailsString();
      IBk iBk0 = new IBk();
      double[] doubleArray0 = new double[2];
      KDTree kDTree0 = new KDTree(instances0);
      evaluation0.truePositiveRate(1);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.unclassified();
      evaluation0.getRevision();
      double double0 = new Integer(2);
      evaluation0.fMeasure(1);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.numInstances();
      // Undeclared exception!
      try { 
        instances0.kthSmallestValue(1, 463);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Instances: attribute must be numeric to compute kth-smallest value.
         //
         verifyException("weka.core.Instances", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_ClassPriorsSum;
      BallTree ballTree0 = new BallTree();
      evaluation0.numFalseNegatives(493);
      ballTree0.enumerateMeasures();
      evaluation0.sizeOfPredictedRegions();
      evaluation0.toMatrixString();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      boolean boolean0 = evaluation0.m_ComplexityStatisticsAvailable;
      LWL lWL0 = new LWL();
      MockFile mockFile0 = new MockFile("@relation");
      String[] stringArray0 = new String[0];
      LMT lMT0 = new LMT();
      AbstractClassifier.runClassifier(lMT0, stringArray0);
      MockRandom mockRandom0 = new MockRandom();
      DecisionStump decisionStump0 = new DecisionStump();
      decisionStump0.getCapabilities();
      evaluation0.toMatrixString();
      try { 
        evaluation0.crossValidateModel((Classifier) decisionStump0, instances0, 2, (Random) mockRandom0, (Object[]) stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can't have more folds than instances!
         //
         verifyException("weka.core.Instances", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = NimbusStyle.LARGE_SCALE;
      evaluation0.rootMeanPriorSquaredError();
      double double1 = KStarConstants.FLOOR;
      textDirectoryLoader0.globalInfo();
      SMO sMO0 = new SMO();
      evaluation0.equals(sMO0);
      evaluation0.SFMeanEntropyGain();
      BallTree ballTree0 = new BallTree();
      double double2 = evaluation0.m_MissingClass;
      evaluation0.KBRelativeInformation();
      double double3 = evaluation0.m_MaxTarget;
      String string0 = JOptionPane.ICON_PROPERTY;
      MockRandom mockRandom0 = new MockRandom();
      try { 
        evaluation0.crossValidateModel((Classifier) sMO0, instances0, 2, (Random) mockRandom0, (Object[]) sMO0.TAGS_FILTER);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // weka.core.Tag cannot be cast to weka.classifiers.evaluation.output.prediction.AbstractOutput
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      textDirectoryLoader0.globalInfo();
      evaluation0.equals(instances0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      double double0 = evaluation0.m_Unclassified;
      evaluation0.SFMeanEntropyGain();
      BallTree ballTree0 = new BallTree();
      evaluation0.weightedPrecision();
      evaluation0.KBRelativeInformation();
      double double1 = evaluation0.m_MaxTarget;
      evaluation0.toCumulativeMarginDistributionString();
      TestInstances testInstances0 = new TestInstances();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.rootMeanPriorSquaredError();
      evaluation0.meanPriorAbsoluteError();
      IBk iBk0 = new IBk((-2933));
      JSONLoader jSONLoader0 = new JSONLoader();
      CostMatrix costMatrix0 = new CostMatrix(2);
      LWL lWL0 = new LWL();
      evaluation0.SFMeanPriorEntropy();
      evaluation0.unweightedMicroFmeasure();
      evaluation0.areaUnderPRC(4);
      evaluation0.fMeasure(4);
      evaluation0.KBInformation();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.rootMeanPriorSquaredError();
      evaluation0.meanPriorAbsoluteError();
      IBk iBk0 = new IBk((-2933));
      JSONLoader jSONLoader0 = new JSONLoader();
      CostMatrix costMatrix0 = new CostMatrix(10);
      LWL lWL0 = new LWL();
      String[] stringArray0 = new String[8];
      stringArray0[0] = ".bsi";
      stringArray0[1] = ".arff";
      stringArray0[2] = "@relation";
      stringArray0[3] = ".arff";
      stringArray0[4] = ".bsi";
      stringArray0[5] = ".json.gz";
      stringArray0[6] = "@data";
      SerializedClassifier serializedClassifier0 = new SerializedClassifier();
      File file0 = textDirectoryLoader0.getDirectory();
      textDirectoryLoader0.setSource(file0);
      Evaluation.handleCostOption("", 2147483645);
      AbstractClassifier.runClassifier(lWL0, stringArray0);
      PipedInputStream pipedInputStream0 = new PipedInputStream(2147483645);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "@data");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      textDirectoryLoader0.globalInfo();
      evaluation0.equals(instances0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      double double0 = evaluation0.m_Unclassified;
      evaluation0.SFMeanEntropyGain();
      LWL lWL0 = new LWL();
      BallTree ballTree0 = new BallTree();
      evaluation0.weightedPrecision();
      double double1 = evaluation0.m_MaxTarget;
      evaluation0.unweightedMacroFmeasure();
      evaluation0.toCumulativeMarginDistributionString();
      TestInstances testInstances0 = new TestInstances();
      // Undeclared exception!
      try { 
        testInstances0.getRelationalFormat(5);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("weka.core.TestInstances", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[4] = "distributionForInstance";
      stringArray0[5] = "distributionForInstance";
      int int0 = (-1856);
      Evaluation.handleCostOption(stringArray0[3], (-1856));
      LibSVMLoader libSVMLoader0 = new LibSVMLoader();
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (-1856);
      doubleArray0[2] = (double) (-1856);
      TestInstances testInstances0 = new TestInstances();
      testInstances0.getRelationalClassFormat();
      Evaluation evaluation0 = null;
      try {
        evaluation0 = new Evaluation((Instances) null, (CostMatrix) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Instances", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      LWL lWL0 = new LWL();
      LWL lWL1 = new LWL();
      evaluation0.areaUnderPRC(2);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 0;
      SparseInstance sparseInstance0 = new SparseInstance(1, doubleArray0);
      instances0.checkInstance(sparseInstance0);
      evaluation0.fMeasure(3);
      textDirectoryLoader0.setRetrieval(0);
      Object[] objectArray0 = new Object[0];
      evaluation0.evaluateModel((Classifier) lWL0, instances0, objectArray0);
      evaluation0.numTruePositives(9);
      textDirectoryLoader0.getStructure();
      double double0 = KStarConstants.LOG2;
      evaluation0.toCumulativeMarginDistributionString();
      TestInstances testInstances0 = new TestInstances();
      try { 
        evaluation0.evaluateModelOnce(0.693147181, (Instance) sparseInstance0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      LWL lWL0 = new LWL();
      LWL lWL1 = new LWL();
      evaluation0.areaUnderPRC(2);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 0;
      SparseInstance sparseInstance0 = new SparseInstance(1, doubleArray0);
      instances0.checkInstance(sparseInstance0);
      evaluation0.fMeasure(3);
      textDirectoryLoader0.setRetrieval(0);
      Object[] objectArray0 = new Object[0];
      evaluation0.evaluateModel((Classifier) lWL0, instances0, objectArray0);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      costSensitiveClassifier0.getCostMatrix();
      evaluation0.rootRelativeSquaredError();
      evaluation0.meanAbsoluteError();
      // Undeclared exception!
      try { 
        evaluation0.updateMargins(doubleArray0, (-701), 1733.7);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -701
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      boolean boolean0 = evaluation0.m_ComplexityStatisticsAvailable;
      LWL lWL0 = new LWL();
      MockFile mockFile0 = new MockFile(".#XKi");
      LMT lMT0 = new LMT();
      MockRandom mockRandom0 = new MockRandom();
      DecisionStump decisionStump0 = new DecisionStump();
      DecisionStump decisionStump1 = new DecisionStump();
      decisionStump1.getCapabilities();
      evaluation0.toMatrixString();
      try { 
        evaluation0.crossValidateModel((Classifier) lMT0, instances0, 0, (Random) mockRandom0, (Object[]) testInstances0.DEFAULT_WORDS);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Number of folds must be greater than 1
         //
         verifyException("weka.core.Instances", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_SumPriorAbsErr;
      SparseInstance sparseInstance0 = new SparseInstance(114);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      instances0.add((Instance) sparseInstance0);
      LWL lWL0 = new LWL();
      evaluation0.meanPriorAbsoluteError();
      NGramTokenizer nGramTokenizer0 = new NGramTokenizer();
      evaluation0.SFEntropyGain();
      evaluation0.correct();
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      double[][] doubleArray0 = evaluation0.confusionMatrix();
      WrapperSubsetEval wrapperSubsetEval0 = new WrapperSubsetEval();
      ZeroR zeroR0 = new ZeroR();
      evaluation0.evaluateModel((Classifier) zeroR0, instances0, (Object[]) doubleArray0);
      evaluation0.numTruePositives(1120);
      char[] charArray0 = new char[3];
      wrapperSubsetEval0.listOptions();
      charArray0[0] = 'E';
      wrapperSubsetEval0.setFolds((-1136903108));
      charArray0[1] = '$';
      charArray0[2] = '$';
      evaluation0.num2ShortID(195225786, charArray0, 7);
      evaluation0.weightedAreaUnderROC();
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      String string0 = GlobalInfoJavadoc.GLOBALINFO_ENDTAG;
      boolean boolean0 = evaluation0.m_DiscardPredictions;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(649);
      double double0 = evaluation0.m_Unclassified;
      evaluation0.SFEntropyGain();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      evaluation0.SFMeanPriorEntropy();
      TestInstances testInstances0 = new TestInstances();
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      testInstances0.setHandler(inputMappedClassifier0);
      evaluation0.incorrect();
      int[] intArray0 = new int[2];
      intArray0[0] = (-1);
      WrapperSubsetEval wrapperSubsetEval0 = new WrapperSubsetEval();
      wrapperSubsetEval0.setFolds(1);
      char[] charArray0 = new char[1];
      charArray0[0] = 'E';
      evaluation0.num2ShortID((-200), charArray0, 4458);
      evaluation0.getRevision();
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      CostMatrix costMatrix0 = costSensitiveClassifier0.getCostMatrix();
      CostMatrix costMatrix1 = new CostMatrix(costMatrix0);
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.SFSchemeEntropy();
      evaluation0.priorEntropy();
      JSONLoader jSONLoader0 = new JSONLoader();
      JSONLoader jSONLoader1 = new JSONLoader();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      evaluation0.numFalseNegatives((-109));
      evaluation0.unweightedMicroFmeasure();
      evaluation0.areaUnderPRC(2);
      evaluation0.pctIncorrect();
      BallTree ballTree0 = new BallTree();
      Double double0 = new Double(0.0);
      evaluation0.getDiscardPredictions();
      evaluation0.SFEntropyGain();
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      CostMatrix costMatrix0 = costSensitiveClassifier0.getCostMatrix();
      CostMatrix costMatrix1 = new CostMatrix(costMatrix0);
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.SFSchemeEntropy();
      evaluation0.priorEntropy();
      JSONLoader jSONLoader0 = new JSONLoader();
      JSONLoader jSONLoader1 = new JSONLoader();
      evaluation0.unweightedMicroFmeasure();
      evaluation0.areaUnderPRC(32);
      evaluation0.meanPriorAbsoluteError();
      double double0 = evaluation0.m_Correct;
      evaluation0.fMeasure(62);
      evaluation0.KBInformation();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(62);
      evaluation0.meanPriorAbsoluteError();
      evaluation0.avgCost();
      evaluation0.kappa();
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      boolean boolean0 = evaluation0.m_ComplexityStatisticsAvailable;
      LWL lWL0 = new LWL();
      MockFile mockFile0 = new MockFile("@relation");
      String[] stringArray0 = new String[0];
      LMT lMT0 = new LMT();
      AbstractClassifier.runClassifier(lMT0, stringArray0);
      MockRandom mockRandom0 = new MockRandom();
      DecisionStump decisionStump0 = new DecisionStump();
      decisionStump0.getCapabilities();
      evaluation0.toMatrixString();
      evaluation0.matthewsCorrelationCoefficient(3);
      try { 
        Evaluation.evaluateModel("No actual dataset provided to use as template", stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't find class with name No actual dataset provided to use as template.
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      String string0 = GlobalInfoJavadoc.GLOBALINFO_ENDTAG;
      boolean boolean0 = evaluation0.m_DiscardPredictions;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(649);
      double double0 = evaluation0.m_Unclassified;
      evaluation0.SFEntropyGain();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      evaluation0.SFMeanPriorEntropy();
      TestInstances testInstances0 = new TestInstances();
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      testInstances0.setHandler(inputMappedClassifier0);
      evaluation0.incorrect();
      int[] intArray0 = new int[2];
      intArray0[0] = (-1);
      WrapperSubsetEval wrapperSubsetEval0 = new WrapperSubsetEval();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      textDirectoryLoader1.getStructure();
      double double1 = KStarConstants.LOG2;
      evaluation0.toCumulativeMarginDistributionString();
      TestInstances testInstances1 = new TestInstances();
      evaluation0.unclassified();
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_ClassPriorsSum;
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      BallTree ballTree0 = new BallTree();
      evaluation0.numFalseNegatives(493);
      ballTree0.enumerateMeasures();
      evaluation0.toSummaryString(true);
      evaluation0.sizeOfPredictedRegions();
      try { 
        evaluation0.evaluateModel((Classifier) regressionByDiscretization0, instances0, (Object[]) costSensitiveClassifier0.TAGS_MATRIX_SOURCE);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // weka.core.Tag cannot be cast to weka.classifiers.evaluation.output.prediction.AbstractOutput
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.rootMeanPriorSquaredError();
      LWL lWL0 = new LWL();
      LWL lWL1 = new LWL();
      evaluation0.areaUnderPRC(2);
      double double0 = evaluation0.m_SumPriorEntropy;
      evaluation0.KBInformation();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0);
      double[] doubleArray0 = new double[13];
      doubleArray0[0] = Double.NaN;
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance(4, doubleArray0);
      evaluation0.relativeAbsoluteError();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      evaluation0.weightedFMeasure();
      gaussianProcesses0.getOptions();
      evaluation0.getHeader();
      TestInstances testInstances0 = new TestInstances();
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      double double0 = UnivariateKernelEstimator.CONST;
      IBk iBk0 = new IBk(70);
      JSONLoader jSONLoader0 = new JSONLoader();
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      SGDText sGDText0 = new SGDText();
      SGDText sGDText1 = new SGDText();
      SGDText sGDText2 = new SGDText();
      Integer integer0 = new Integer((byte) (-2));
      Evaluation evaluation0 = new Evaluation(instances0);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (-0.9189385332046727);
      doubleArray0[2] = (double) 1;
      doubleArray0[3] = (-0.9189385332046727);
      doubleArray0[4] = (double) 1;
      doubleArray0[5] = (double) 1;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-0.9189385332046727), doubleArray0);
      try { 
        evaluation0.evaluateModelOnce(doubleArray0, (Instance) binarySparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedMatthewsCorrelation();
      evaluation0.rootMeanPriorSquaredError();
      double double0 = KStarConstants.FLOOR;
      evaluation0.KBMeanInformation();
      FileSystemHandling.shouldAllThrowIOExceptions();
      double double1 = evaluation0.m_Unclassified;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = Double.NaN;
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance(0.0, doubleArray0);
      boolean boolean0 = evaluation0.m_NoPriors;
      evaluation0.updateMargins(doubleArray0, 0, Double.NaN);
      double[][] doubleArray1 = evaluation0.m_ConfusionMatrix;
      try { 
        evaluation0.evaluateModelOnceAndRecordPrediction(doubleArray0, (Instance) binarySparseInstance1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedMatthewsCorrelation();
      double double0 = evaluation0.m_TotalCost;
      double double1 = KStarConstants.FLOOR;
      evaluation0.KBMeanInformation();
      boolean boolean0 = evaluation0.m_NoPriors;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = Double.NaN;
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance(0.0, doubleArray0);
      boolean boolean1 = evaluation0.m_NoPriors;
      evaluation0.updateMargins(doubleArray0, 0, Double.NaN);
      try { 
        evaluation0.correlationCoefficient();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't compute correlation coefficient: class is nominal!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      String[] stringArray0 = new String[0];
      Evaluation.main(stringArray0);
      LWL lWL0 = new LWL();
      LWL lWL1 = new LWL();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      MockRandom mockRandom0 = new MockRandom(0);
      mockRandom0.longs();
      DecisionStump decisionStump0 = new DecisionStump();
      Evaluation evaluation0 = null;
      try {
        evaluation0 = new Evaluation((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Instances", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.rootMeanPriorSquaredError();
      LWL lWL0 = new LWL();
      LWL lWL1 = new LWL();
      evaluation0.unweightedMicroFmeasure();
      evaluation0.areaUnderPRC(2);
      double double0 = evaluation0.m_Correct;
      evaluation0.fMeasure(3);
      evaluation0.KBInformation();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0);
      boolean boolean0 = evaluation0.m_NoPriors;
      evaluation0.falseNegativeRate(4);
      double double1 = KStarConstants.LOG2;
      evaluation0.toCumulativeMarginDistributionString();
      TestInstances testInstances0 = new TestInstances();
      double double2 = evaluation0.m_SumPriorAbsErr;
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      CostSensitiveClassifier costSensitiveClassifier1 = new CostSensitiveClassifier();
      costSensitiveClassifier1.getCostMatrix();
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      JSONLoader jSONLoader0 = new JSONLoader();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      String string0 = Action.LARGE_ICON_KEY;
      LWL lWL0 = new LWL();
      LWL lWL1 = new LWL();
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      textDirectoryLoader0.getStructure();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String[] stringArray0 = new String[0];
      TextDirectoryLoader.main(stringArray0);
      textDirectoryLoader1.setOutputFilename(false);
      MultiFilter multiFilter0 = new MultiFilter();
      multiFilter0.getCapabilities();
      instances0.toArray();
      evaluation0.weightedTrueNegativeRate();
      evaluation0.falsePositiveRate(4);
      evaluation0.SFSchemeEntropy();
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedMatthewsCorrelation();
      evaluation0.meanPriorAbsoluteError();
      textDirectoryLoader0.getRevision();
      evaluation0.KBMeanInformation();
      String string0 = DefaultEditorKit.insertContentAction;
      LWL lWL0 = new LWL();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/9_weka");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "@relation");
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(5);
      boolean boolean0 = evaluation0.m_NoPriors;
      instances0.iterator();
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance(5);
      binarySparseInstance1.setDataset(instances0);
      evaluation0.pctCorrect();
      double double0 = NimbusStyle.LARGE_SCALE;
      evaluation0.updateNumericScores((double[]) null, (double[]) null, 0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedMatthewsCorrelation();
      evaluation0.rootMeanPriorSquaredError();
      double double0 = KStarConstants.FLOOR;
      double double1 = evaluation0.m_TotalCost;
      boolean boolean0 = evaluation0.m_ComplexityStatisticsAvailable;
      double double2 = evaluation0.m_Unclassified;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 0.0;
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance(0.0, doubleArray0);
      boolean boolean1 = evaluation0.m_NoPriors;
      evaluation0.updateMargins(doubleArray0, 0, 0.0);
      double[][] doubleArray1 = evaluation0.m_ConfusionMatrix;
      try { 
        evaluation0.evaluateModelOnceAndRecordPrediction(doubleArray0, (Instance) binarySparseInstance1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/9_weka");
      FileSystemHandling.appendDataToFile(evoSuiteFile0, (byte[]) null);
      double double0 = UnivariateKernelEstimator.CONST;
      IBk iBk0 = new IBk(70);
      JSONLoader jSONLoader0 = new JSONLoader();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      LWL lWL0 = new LWL();
      lWL0.getClassifier();
      ArffLoader arffLoader0 = new ArffLoader();
      LWL lWL1 = new LWL();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.areaUnderPRC(3);
      evaluation0.meanPriorAbsoluteError();
      evaluation0.fMeasure(1793);
      evaluation0.KBInformation();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(473);
      evaluation0.trueNegativeRate(5);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      ArffLoader arffLoader0 = new ArffLoader();
      LWL lWL0 = new LWL();
      lWL0.getClassifier();
      DecisionStump decisionStump0 = new DecisionStump();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.addNumericTrainClass(1708.0, 3);
      String[] stringArray0 = lWL0.getOptions();
      ArffLoader.main(stringArray0);
      try { 
        evaluation0.correlationCoefficient();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't compute correlation coefficient: class is nominal!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("3#nt9M\">Yo ");
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.addNumericTrainClass((-869.751109481463), 1.0E-4);
      Instances instances1 = null;
      MockRandom mockRandom0 = new MockRandom();
      try { 
        evaluation0.crossValidateModel((String) null, (Instances) null, (-1), testInstances0.DEFAULT_WORDS, (Random) mockRandom0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't find class called: null
         //
         verifyException("weka.core.Utils", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.rootMeanPriorSquaredError();
      LWL lWL0 = new LWL();
      LWL lWL1 = new LWL();
      evaluation0.unweightedMicroFmeasure();
      evaluation0.areaUnderPRC(2);
      double double0 = evaluation0.m_Correct;
      evaluation0.setDiscardPredictions(true);
      evaluation0.KBInformation();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = Double.NaN;
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance(4, doubleArray0);
      instances0.add((Instance) binarySparseInstance1);
      evaluation0.updateMargins(doubleArray0, 5, 1000.0);
      evaluation0.confusionMatrix();
      evaluation0.areaUnderROC(1003);
      evaluation0.weightedFalseNegativeRate();
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      CostMatrix costMatrix0 = costSensitiveClassifier0.getCostMatrix();
      CostMatrix costMatrix1 = new CostMatrix(costMatrix0);
      MockFile mockFile0 = new MockFile("@data", ".arff");
      Evaluation evaluation0 = new Evaluation(instances0);
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      evaluation0.errorRate();
      evaluation0.setDiscardPredictions(false);
      evaluation0.weightedFalseNegativeRate();
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.getRevision();
      evaluation0.errorRate();
      evaluation0.correct();
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      double double0 = UnivariateKernelEstimator.CONST;
      IBk iBk0 = new IBk(70);
      JSONLoader jSONLoader0 = new JSONLoader();
      SGDText sGDText0 = new SGDText();
      SGDText sGDText1 = new SGDText();
      SGDText sGDText2 = new SGDText();
      Integer integer0 = new Integer(1);
      Evaluation evaluation0 = new Evaluation(instances0);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 0;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(43);
      binarySparseInstance0.toString((-289));
      ConverterUtils.DataSource converterUtils_DataSource0 = new ConverterUtils.DataSource(instances0);
      converterUtils_DataSource0.nextElement(instances0);
      evaluation0.pctUnclassified();
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.unclassified();
      evaluation0.getRevision();
      evaluation0.errorRate();
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ".bsi");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      textDirectoryLoader0.globalInfo();
      evaluation0.equals((Object) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      double double0 = evaluation0.m_Unclassified;
      PipedReader pipedReader0 = new PipedReader(484);
      CostMatrix costMatrix0 = null;
      try {
        costMatrix0 = new CostMatrix(pipedReader0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.rootMeanPriorSquaredError();
      LWL lWL0 = new LWL();
      LWL lWL1 = new LWL();
      evaluation0.unweightedMicroFmeasure();
      double double0 = evaluation0.m_Correct;
      evaluation0.fMeasure(3);
      evaluation0.KBInformation();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0);
      instances0.add((Instance) binarySparseInstance0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      evaluation0.toClassDetailsString("@relation");
      evaluation0.confusionMatrix();
      evaluation0.areaUnderROC(1003);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedMatthewsCorrelation();
      double double0 = KStarConstants.FLOOR;
      evaluation0.KBMeanInformation();
      NGramTokenizer nGramTokenizer0 = new NGramTokenizer();
      evaluation0.SFEntropyGain();
      evaluation0.correct();
      double[][] doubleArray0 = evaluation0.confusionMatrix();
      WrapperSubsetEval wrapperSubsetEval0 = new WrapperSubsetEval();
      ZeroR zeroR0 = new ZeroR();
      evaluation0.evaluateModel((Classifier) zeroR0, instances0, (Object[]) doubleArray0);
      evaluation0.numTruePositives(4);
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(6);
      SparseInstance sparseInstance0 = new SparseInstance((SparseInstance) binarySparseInstance0);
      try { 
        evaluation0.updateStatsForConditionalDensityEstimator(gaussianProcesses0, sparseInstance0, 7);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.functions.GaussianProcesses", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      LWL lWL0 = new LWL();
      Evaluation evaluation0 = new Evaluation(instances0);
      MockRandom mockRandom0 = new MockRandom(1);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      evaluation0.toSummaryString();
      evaluation0.equals(textDirectoryLoader0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(5);
      double double0 = evaluation0.m_Unclassified;
      evaluation0.SFEntropyGain();
      evaluation0.SFMeanEntropyGain();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      evaluation0.avgCost();
      evaluation0.kappa();
      PipedReader pipedReader0 = new PipedReader();
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance(0);
      evaluation0.trueNegativeRate(4);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      CostSensitiveClassifier costSensitiveClassifier1 = new CostSensitiveClassifier();
      costSensitiveClassifier1.getCostMatrix();
      evaluation0.totalCost();
      try { 
        Evaluation.handleCostOption("3F=", (-1856));
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't open file null.
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      textDirectoryLoader0.getDirectory();
      SparseInstance sparseInstance0 = new SparseInstance(114);
      instances0.add((Instance) sparseInstance0);
      LWL lWL0 = new LWL();
      NGramTokenizer nGramTokenizer0 = new NGramTokenizer();
      textDirectoryLoader0.getDirectory();
      Stacking stacking0 = new Stacking();
      Classifier classifier0 = stacking0.getMetaClassifier();
      lWL0.setClassifier(classifier0);
      LWL lWL1 = new LWL();
      lWL0.getTechnicalInformation();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      WrapperSubsetEval wrapperSubsetEval0 = new WrapperSubsetEval();
      DecisionTable decisionTable0 = new DecisionTable();
      decisionTable0.getCapabilities();
      CVParameterSelection cVParameterSelection0 = new CVParameterSelection();
      Capabilities capabilities0 = cVParameterSelection0.getCapabilities();
      TestInstances.forCapabilities(capabilities0);
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.falsePositiveRate(1);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = KStarConstants.FLOOR;
      textDirectoryLoader0.getRevision();
      String string0 = DefaultEditorKit.insertContentAction;
      LWL lWL0 = new LWL();
      double[] doubleArray0 = new double[15];
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      evaluation0.toMatrixString("main");
      LWL lWL1 = new LWL();
      ArffLoader arffLoader0 = new ArffLoader();
      LWL lWL2 = new LWL();
      evaluation0.meanPriorAbsoluteError();
      evaluation0.weightedRecall();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      evaluation0.SFPriorEntropy();
      evaluation0.toClassDetailsString(".arff");
      evaluation0.getClassPriors();
      AllFilter allFilter0 = new AllFilter();
      // Undeclared exception!
      try { 
        allFilter0.output();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // No output instance format defined
         //
         verifyException("weka.filters.Filter", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      boolean boolean0 = evaluation0.m_ComplexityStatisticsAvailable;
      LWL lWL0 = new LWL();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      evaluation0.KBInformation();
      MockFile mockFile0 = new MockFile(".bsi");
      LMT lMT0 = new LMT();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "@data";
      stringArray0[1] = ".arff";
      stringArray0[2] = ".arff";
      stringArray0[3] = ".bsi";
      stringArray0[4] = ".arff";
      stringArray0[5] = ".arff";
      AbstractClassifier.runClassifier((Classifier) null, stringArray0);
      MockRandom mockRandom0 = new MockRandom();
      DecisionStump decisionStump0 = new DecisionStump();
      lWL0.getCapabilities();
      evaluation0.toMatrixString();
      evaluation0.rootMeanPriorSquaredError();
      try { 
        evaluation0.crossValidateModel((Classifier) decisionStump0, instances0, 0, (Random) mockRandom0, (Object[]) stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Number of folds must be greater than 1
         //
         verifyException("weka.core.Instances", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_MinTarget;
      LWL lWL0 = new LWL();
      LWL lWL1 = new LWL();
      evaluation0.unweightedMicroFmeasure();
      evaluation0.areaUnderPRC(2);
      double double1 = evaluation0.m_SumClass;
      evaluation0.KBInformation();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0);
      textDirectoryLoader0.getDirectory();
      lWL1.getRevision();
      AbstractClassifier.makeCopy(lWL1);
      evaluation0.areaUnderROC(2);
      evaluation0.weightedTruePositiveRate();
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "\"))\n");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.globalInfo();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      double double0 = evaluation0.m_Unclassified;
      evaluation0.SFMeanEntropyGain();
      BallTree ballTree0 = new BallTree();
      evaluation0.weightedPrecision();
      evaluation0.KBRelativeInformation();
      double double1 = evaluation0.m_MaxTarget;
      evaluation0.toCumulativeMarginDistributionString();
      TestInstances testInstances1 = new TestInstances();
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.SFSchemeEntropy();
      evaluation0.priorEntropy();
      textDirectoryLoader0.setCharSet("@data");
      JSONLoader jSONLoader0 = new JSONLoader();
      evaluation0.weightedTrueNegativeRate();
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = Double.NaN;
      doubleArray0[3] = Double.NaN;
      doubleArray0[4] = Double.NaN;
      doubleArray0[5] = Double.NaN;
      doubleArray0[6] = 1.0;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(Double.NaN, doubleArray0);
      double double0 = Evaluation.MIN_SF_PROB;
      try { 
        evaluation0.evaluateModelOnce(Double.NaN, (Instance) binarySparseInstance0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      double double0 = KStarConstants.ROOT_FINDER_ACCURACY;
      JSONLoader jSONLoader0 = new JSONLoader();
      LWL lWL0 = new LWL();
      MockFile mockFile0 = new MockFile(".bsi", "@relation");
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/9_weka");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "{WGIFC5.");
      MockRandom mockRandom0 = new MockRandom((-1L));
      DecisionStump decisionStump0 = new DecisionStump();
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      evaluation0.pctCorrect();
      double double1 = KStarConstants.EPSILON;
      evaluation0.SFPriorEntropy();
      evaluation0.meanAbsoluteError();
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.rootMeanPriorSquaredError();
      LWL lWL0 = new LWL();
      LWL lWL1 = new LWL();
      evaluation0.unweightedMicroFmeasure();
      evaluation0.areaUnderPRC(2);
      double double0 = evaluation0.m_Correct;
      evaluation0.fMeasure(3);
      evaluation0.KBInformation();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0);
      boolean boolean0 = evaluation0.m_NoPriors;
      String[] stringArray0 = new String[4];
      stringArray0[0] = "@data";
      stringArray0[1] = "@relation";
      stringArray0[2] = "@data";
      stringArray0[3] = ".arff";
      AbstractClassifier.runClassifier(lWL0, stringArray0);
      Object[] objectArray0 = new Object[0];
      double[] doubleArray0 = evaluation0.evaluateModel((Classifier) lWL0, instances0, objectArray0);
      char[] charArray0 = new char[4];
      charArray0[0] = '';
      evaluation0.num2ShortID(4, charArray0, 0);
      double double1 = evaluation0.m_SumClassPredicted;
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance(0, doubleArray0);
      evaluation0.errorRate();
      try { 
        evaluation0.evaluateModelOnce(0.22499999403953552, (Instance) binarySparseInstance0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedMatthewsCorrelation();
      evaluation0.rootMeanPriorSquaredError();
      evaluation0.meanPriorAbsoluteError();
      textDirectoryLoader0.getRevision();
      evaluation0.KBMeanInformation();
      String string0 = DefaultEditorKit.insertContentAction;
      LWL lWL0 = new LWL();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/9_weka");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "@relation");
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(5);
      boolean boolean0 = evaluation0.m_NoPriors;
      evaluation0.falseNegativeRate((-279));
      instances0.iterator();
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance(5);
      binarySparseInstance1.setDataset(instances0);
      try { 
        evaluation0.updateStatsForPredictor(4, binarySparseInstance1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedMatthewsCorrelation();
      evaluation0.rootMeanPriorSquaredError();
      evaluation0.meanPriorAbsoluteError();
      textDirectoryLoader0.getRevision();
      evaluation0.KBMeanInformation();
      String string0 = DefaultEditorKit.insertContentAction;
      LWL lWL0 = new LWL();
      textDirectoryLoader0.setOutputFilename(true);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      evaluation0.m_MissingClass = 4.6;
      evaluation0.weightedTrueNegativeRate();
      evaluation0.weightedMatthewsCorrelation();
      evaluation0.toSummaryString("@data", false);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 4.6;
      doubleArray0[1] = Double.NaN;
      doubleArray0[2] = (double) 3;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-2643.999610079723), doubleArray0);
      evaluation0.errorRate();
      Evaluation evaluation1 = new Evaluation(instances0);
      try { 
        evaluation1.evaluateModelOnce(0.0, (Instance) binarySparseInstance0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      LWL lWL0 = new LWL();
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      regressionByDiscretization0.getCapabilities();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      regressionByDiscretization0.setNumBins(3);
      Evaluation evaluation0 = new Evaluation(instances0);
      Classifier classifier0 = lWL0.getClassifier();
      Evaluation.makeOptionString(classifier0, true);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.getStructure();
      double double0 = KStarConstants.LOG2;
      evaluation0.toCumulativeMarginDistributionString();
      TestInstances testInstances1 = new TestInstances();
      evaluation0.unweightedMicroFmeasure();
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      String string0 = XRFFLoader.FILE_EXTENSION_COMPRESSED;
      evaluation0.equals(evaluation0);
      EM eM0 = new EM();
      LWL lWL0 = new LWL();
      LWL lWL1 = new LWL();
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.RELATIONAL_ATTRIBUTES;
      DecisionTable decisionTable0 = new DecisionTable();
      Capabilities capabilities0 = decisionTable0.getCapabilities();
      capabilities0.capabilities();
      capabilities0.enableDependency(capabilities_Capability0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      WrapperSubsetEval wrapperSubsetEval0 = new WrapperSubsetEval();
      AbstractClassifier.makeCopy(lWL0);
      evaluation0.SFMeanPriorEntropy();
      evaluation0.sizeOfPredictedRegions();
      evaluation0.falsePositiveRate(4);
      evaluation0.weightedAreaUnderPRC();
      evaluation0.unweightedMicroFmeasure();
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      LWL lWL0 = new LWL();
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      Capabilities capabilities0 = regressionByDiscretization0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      regressionByDiscretization0.setNumBins(3);
      Evaluation evaluation0 = new Evaluation(instances0);
      LWL lWL1 = new LWL();
      LWL lWL2 = new LWL();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      testInstances0.setSeed((-878));
      try { 
        evaluation0.toMatrixString();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Evaluation: No confusion matrix possible!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      LWL lWL0 = new LWL();
      double[] doubleArray0 = new double[0];
      SparseInstance sparseInstance0 = new SparseInstance(2892.1542258, doubleArray0);
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      Capabilities capabilities0 = regressionByDiscretization0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      CostMatrix costMatrix0 = new CostMatrix(1);
      Evaluation evaluation0 = null;
      try {
        evaluation0 = new Evaluation(instances0, costMatrix0);
        fail("Expecting exception: Exception");
      
      } catch(Throwable e) {
         //
         // Class has to be nominal if cost matrix given!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.rootMeanPriorSquaredError();
      LWL lWL0 = new LWL();
      lWL0.getClassifier();
      lWL0.getOptions();
      DecisionStump decisionStump0 = new DecisionStump();
      String string0 = SerializedInstancesLoader.FILE_EXTENSION;
      decisionStump0.toString();
      evaluation0.addNumericTrainClass(3, 3);
      String[] stringArray0 = lWL0.getOptions();
      MockRandom mockRandom0 = new MockRandom();
      DecisionStump decisionStump1 = new DecisionStump();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      evaluation0.addNumericTrainClass((-1992.3344810839344), 0.17499999701976776);
      try { 
        evaluation0.crossValidateModel((Classifier) decisionStump1, instances0, (-4371), (Random) mockRandom0, (Object[]) stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Number of folds must be greater than 1
         //
         verifyException("weka.core.Instances", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = KStarConstants.ROOT_FINDER_ACCURACY;
      JSONLoader jSONLoader0 = new JSONLoader();
      LWL lWL0 = new LWL();
      textDirectoryLoader0.getDirectory();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/9_weka");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "{WGIFC5.");
      Evaluation evaluation1 = new Evaluation(instances0);
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      Capabilities capabilities0 = regressionByDiscretization0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances1 = testInstances0.generate();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(2);
      boolean boolean0 = evaluation0.m_NoPriors;
      evaluation0.falseNegativeRate(1263);
      instances1.iterator();
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance(1263);
      binarySparseInstance0.setDataset(instances0);
      Evaluation evaluation2 = new Evaluation(instances1);
      evaluation2.updateStatsForPredictor((-2), binarySparseInstance0);
      evaluation1.pctCorrect();
      double double1 = KStarConstants.EPSILON;
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.rootMeanPriorSquaredError();
      Evaluation evaluation1 = new Evaluation(instances0);
      MockRandom mockRandom0 = new MockRandom((-1708L));
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      evaluation1.toSummaryString();
      evaluation1.equals(evaluation0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/9_weka");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "\nTime taken to build model: ");
      FileSystemHandling.shouldAllThrowIOExceptions();
      evaluation0.toSummaryString(true);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(1177);
      double double0 = evaluation0.m_Unclassified;
      evaluation1.SFEntropyGain();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      evaluation0.SFMeanEntropyGain();
      evaluation1.trueNegativeRate((-632));
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      try { 
        evaluation1.evaluateModelOnce((Classifier) inputMappedClassifier0, (Instance) binarySparseInstance0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.misc.InputMappedClassifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      RegressionByDiscretization regressionByDiscretization1 = new RegressionByDiscretization();
      LWL lWL0 = new LWL();
      LWL lWL1 = new LWL();
      BallTree ballTree0 = new BallTree(instances0);
      evaluation0.unweightedMacroFmeasure();
      testInstances0.setSeed(4);
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      double[][] doubleArray0 = evaluation0.m_ConfusionMatrix;
      WrapperSubsetEval wrapperSubsetEval0 = new WrapperSubsetEval();
      double double0 = evaluation0.m_SumPriorAbsErr;
      evaluation0.sizeOfPredictedRegions();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      evaluation0.rootRelativeSquaredError();
      double double1 = KStarConstants.FLOOR1;
      evaluation0.weightedRecall();
      evaluation0.matthewsCorrelationCoefficient(3);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.rootMeanPriorSquaredError();
      evaluation0.meanPriorAbsoluteError();
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (-2933);
      doubleArray0[1] = Double.NaN;
      evaluation0.m_TrainClassWeights = doubleArray0;
      IBk iBk0 = new IBk((-2933));
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = Double.NaN;
      evaluation0.SFPriorEntropy();
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = NimbusStyle.LARGE_SCALE;
      evaluation0.rootMeanPriorSquaredError();
      double double1 = evaluation0.m_SumPriorSqrErr;
      FileSystemHandling.shouldAllThrowIOExceptions();
      VotedPerceptron votedPerceptron0 = new VotedPerceptron();
      String[] stringArray0 = new String[3];
      stringArray0[1] = "@data";
      stringArray0[2] = ".arff";
      VotedPerceptron.main(stringArray0);
      double double2 = evaluation0.m_Unclassified;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(350);
      binarySparseInstance0.setDataset(instances0);
      evaluation0.updateStatsForPredictor(Double.NaN, binarySparseInstance0);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 4;
      doubleArray0[1] = 0.0;
      evaluation0.evaluateModelOnce(doubleArray0, (Instance) binarySparseInstance0);
      evaluation0.falsePositiveRate(19);
      try { 
        evaluation0.updatePriors(binarySparseInstance0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.rootMeanPriorSquaredError();
      double double0 = KStarConstants.FLOOR;
      evaluation0.KBMeanInformation();
      VotedPerceptron votedPerceptron0 = new VotedPerceptron();
      String[] stringArray0 = new String[3];
      stringArray0[1] = "@data";
      stringArray0[2] = ".arff";
      VotedPerceptron.main(stringArray0);
      evaluation0.equals(votedPerceptron0);
      double double1 = evaluation0.m_Unclassified;
      evaluation0.falsePositiveRate(19);
      try { 
        evaluation0.correlationCoefficient();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't compute correlation coefficient: class is nominal!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      FileSystemHandling.shouldAllThrowIOExceptions();
      double double0 = KStarConstants.ROOT_FINDER_ACCURACY;
      LWL lWL0 = new LWL();
      MockFile mockFile0 = new MockFile(".bsi", "@relation");
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/9_weka");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "{WGIFC5.");
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.m_ComplexityStatisticsAvailable = false;
      MockRandom mockRandom0 = new MockRandom((-1L));
      DecisionStump decisionStump0 = new DecisionStump();
      boolean boolean0 = evaluation0.m_CoverageStatisticsAvailable;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      evaluation0.pctCorrect();
      double double1 = KStarConstants.EPSILON;
      evaluation0.SFPriorEntropy();
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      LWL lWL0 = new LWL();
      double[] doubleArray0 = new double[0];
      SparseInstance sparseInstance0 = new SparseInstance(2892.1542258, doubleArray0);
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      Capabilities capabilities0 = regressionByDiscretization0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      regressionByDiscretization0.setNumBins(3);
      Evaluation evaluation0 = new Evaluation(instances0);
      RegressionByDiscretization regressionByDiscretization1 = new RegressionByDiscretization();
      LWL lWL1 = new LWL();
      LWL lWL2 = new LWL();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.setOutputFilename(false);
      evaluation0.SFSchemeEntropy();
      try { 
        evaluation0.updateStatsForConditionalDensityEstimator(regressionByDiscretization0, sparseInstance0, (-2));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.meta.RegressionByDiscretization", e);
      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, "periodicPruningTipText");
      evaluation0.rootMeanPriorSquaredError();
      LWL lWL0 = new LWL();
      LWL lWL1 = new LWL();
      double[] doubleArray0 = new double[4];
      textDirectoryLoader0.getOptions();
      SparseInstance sparseInstance0 = new SparseInstance(2892.1542258, doubleArray0);
      instances0.add((Instance) sparseInstance0);
      int int0 = (-348);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(1, doubleArray0);
      evaluation0.useNoPriors();
      evaluation0.rootMeanPriorSquaredError();
      try { 
        evaluation0.evaluateModelOnce((Classifier) lWL1, (Instance) binarySparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      LWL lWL0 = new LWL();
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      regressionByDiscretization0.getCapabilities();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      regressionByDiscretization0.setNumBins(3);
      Evaluation evaluation0 = new Evaluation(instances0);
      LWL lWL1 = new LWL();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/9_weka/Capabilities.props");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, ".arff");
      textDirectoryLoader0.getDataSet();
      textDirectoryLoader0.getStructure();
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "setUseEqualFrequency");
      TextDirectoryLoader.main(testInstances0.DEFAULT_WORDS);
      textDirectoryLoader0.setOutputFilename(true);
      evaluation0.weightedTrueNegativeRate();
      evaluation0.kappa();
      evaluation0.unweightedMacroFmeasure();
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      LWL lWL0 = new LWL();
      double[] doubleArray0 = new double[0];
      SparseInstance sparseInstance0 = new SparseInstance(2892.1542258, doubleArray0);
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      Capabilities capabilities0 = regressionByDiscretization0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      regressionByDiscretization0.setNumBins(3);
      Evaluation evaluation0 = new Evaluation(instances0);
      RegressionByDiscretization regressionByDiscretization1 = new RegressionByDiscretization();
      LWL lWL1 = new LWL();
      LWL lWL2 = new LWL();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      double double0 = evaluation0.m_MaxTarget;
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      textDirectoryLoader0.getStructure();
      double double1 = KStarConstants.LOG2;
      try { 
        evaluation0.toCumulativeMarginDistributionString();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Class must be nominal for margin distributions
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_SumPriorAbsErr;
      SparseInstance sparseInstance0 = new SparseInstance(114);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      instances0.add((Instance) sparseInstance0);
      LWL lWL0 = new LWL();
      evaluation0.meanPriorAbsoluteError();
      NGramTokenizer nGramTokenizer0 = new NGramTokenizer();
      evaluation0.SFEntropyGain();
      evaluation0.correct();
      double[][] doubleArray0 = evaluation0.confusionMatrix();
      WrapperSubsetEval wrapperSubsetEval0 = new WrapperSubsetEval();
      ZeroR zeroR0 = new ZeroR();
      evaluation0.evaluateModel((Classifier) zeroR0, instances0, (Object[]) doubleArray0);
      evaluation0.numTruePositives(1120);
      char[] charArray0 = new char[3];
      charArray0[0] = 'E';
      textDirectoryLoader0.getStructure();
      double double1 = KStarConstants.LOG2;
      evaluation0.toCumulativeMarginDistributionString();
      TestInstances testInstances0 = new TestInstances();
      evaluation0.unweightedMicroFmeasure();
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "@data");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      textDirectoryLoader0.globalInfo();
      evaluation0.equals(instances0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      double double0 = evaluation0.m_Unclassified;
      evaluation0.SFMeanEntropyGain();
      LWL lWL0 = new LWL();
      BallTree ballTree0 = new BallTree();
      evaluation0.weightedPrecision();
      evaluation0.KBRelativeInformation();
      evaluation0.weightedRecall();
      OneR oneR0 = new OneR();
      evaluation0.useNoPriors();
      BallTree ballTree1 = new BallTree();
      evaluation0.numFalseNegatives(493);
      evaluation0.toSummaryString(true);
      Object[] objectArray0 = new Object[0];
      evaluation0.evaluateModel((Classifier) lWL0, instances0, objectArray0);
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      LWL lWL0 = new LWL();
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      regressionByDiscretization0.getCapabilities();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      regressionByDiscretization0.setNumBins(3);
      FilteredClassifier filteredClassifier0 = new FilteredClassifier();
      String string0 = JSplitPane.LAST_DIVIDER_LOCATION_PROPERTY;
      DecisionTable decisionTable0 = new DecisionTable();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.SFMeanEntropyGain();
      BallTree ballTree0 = new BallTree();
      decisionTable0.setCrossVal(0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      evaluation0.weightedAreaUnderROC();
      Attribute attribute0 = new Attribute(".arff", linkedList0);
      // Undeclared exception!
      try { 
        instances0.renameAttributeValue(attribute0, "setOptions", "@attribute");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // setOptions not found
         //
         verifyException("weka.core.Instances", e);
      }
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      TestInstances testInstances0 = new TestInstances();
      Instances instances1 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances1);
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      LWL lWL0 = new LWL();
      LWL lWL1 = new LWL();
      BallTree ballTree0 = new BallTree(instances0);
      evaluation0.unweightedMacroFmeasure();
      lWL1.setClassifier(lWL0);
      LWL lWL2 = new LWL();
      lWL2.getTechnicalInformation();
      evaluation0.meanPriorAbsoluteError();
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      WrapperSubsetEval wrapperSubsetEval0 = new WrapperSubsetEval();
      AbstractClassifier.makeCopy(lWL0);
      evaluation0.SFMeanPriorEntropy();
      evaluation0.sizeOfPredictedRegions();
      DecisionTable decisionTable0 = new DecisionTable();
      evaluation0.falsePositiveRate(1);
      evaluation0.weightedAreaUnderPRC();
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      LWL lWL0 = new LWL();
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      regressionByDiscretization0.globalInfo();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      regressionByDiscretization0.getCapabilities();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      FileSystemHandling.shouldAllThrowIOExceptions();
      VotedPerceptron votedPerceptron0 = new VotedPerceptron();
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.getRevision();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_Unclassified;
      evaluation0.falseNegativeRate(1);
      double double1 = KStarConstants.LOG2;
      evaluation0.toCumulativeMarginDistributionString();
      TestInstances testInstances1 = new TestInstances();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      CostSensitiveClassifier costSensitiveClassifier1 = new CostSensitiveClassifier();
      evaluation0.weightedFalsePositiveRate();
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      LWL lWL0 = new LWL();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      LWL lWL1 = new LWL();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/9_weka/Capabilities.props");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, ".arff");
      TextDirectoryLoader.main(testInstances0.DEFAULT_WORDS);
      double double0 = evaluation0.m_SumErr;
      evaluation0.weightedTrueNegativeRate();
      evaluation0.toClassDetailsString();
      Float float0 = new Float((-1.7976931348623157E308));
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      DatabaseLoader databaseLoader1 = new DatabaseLoader();
      databaseLoader1.getNextInstance(instances0);
      BinarySparseInstance binarySparseInstance0 = null;
      try {
        binarySparseInstance0 = new BinarySparseInstance((Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.BinarySparseInstance", e);
      }
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      LWL lWL0 = new LWL();
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      regressionByDiscretization0.getCapabilities();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      regressionByDiscretization0.setNumBins(3);
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_TotalCoverage;
      boolean boolean0 = evaluation0.m_ClassIsNominal;
      AbstractClassifier.makeCopies(lWL0, 2);
      LMT lMT0 = new LMT();
      MockRandom mockRandom0 = new MockRandom();
      lMT0.setUseAIC(true);
      lWL0.getCapabilities();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)123;
      byteArray0[1] = (byte)123;
      mockRandom0.nextBytes(byteArray0);
      evaluation0.matthewsCorrelationCoefficient(0);
      double double1 = evaluation0.m_SumPriorAbsErr;
      try { 
        evaluation0.updateStatsForConditionalDensityEstimator(regressionByDiscretization0, (Instance) null, 0.02500000037252903);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.meta.RegressionByDiscretization", e);
      }
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      evaluation0.weightedMatthewsCorrelation();
      evaluation0.meanPriorAbsoluteError();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.getRevision();
      evaluation0.KBMeanInformation();
      String string0 = DefaultEditorKit.insertContentAction;
      LWL lWL0 = new LWL();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/9_weka");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "insert-content");
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(2);
      FileSystemHandling.createFolder(evoSuiteFile0);
      instances0.iterator();
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance(100);
      binarySparseInstance0.setDataset(instances0);
      double double0 = NimbusStyle.LARGE_SCALE;
      evaluation0.toSummaryString("weka.core.NormalizableDistance", true);
      // Undeclared exception!
      try { 
        evaluation0.updateNumericScores((double[]) null, (double[]) null, 0.22499999403953552);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      RegressionByDiscretization regressionByDiscretization1 = new RegressionByDiscretization();
      LWL lWL0 = new LWL();
      evaluation0.SFEntropyGain();
      evaluation0.correct();
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      evaluation0.confusionMatrix();
      WrapperSubsetEval wrapperSubsetEval0 = new WrapperSubsetEval();
      ZeroR zeroR0 = new ZeroR();
      try { 
        evaluation0.evaluateModel((Classifier) lWL0, instances0, (Object[]) regressionByDiscretization0.TAGS_ESTIMATOR);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // weka.core.Tag cannot be cast to weka.classifiers.evaluation.output.prediction.AbstractOutput
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedMatthewsCorrelation();
      double double0 = evaluation0.m_TotalCost;
      double double1 = KStarConstants.FLOOR;
      evaluation0.KBMeanInformation();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0);
      CostMatrix costMatrix0 = new CostMatrix(0);
      CostMatrix costMatrix1 = new CostMatrix(costMatrix0);
      Evaluation evaluation1 = new Evaluation(instances0, costMatrix1);
      double double2 = evaluation1.m_SumAbsErr;
      evaluation1.toMatrixString(".arff");
      MockRandom mockRandom0 = new MockRandom();
      DecisionStump decisionStump0 = new DecisionStump();
      LWL lWL0 = new LWL();
      mockRandom0.nextLong();
      Object[] objectArray0 = new Object[0];
      evaluation1.evaluateModel((Classifier) lWL0, instances0, objectArray0);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      costSensitiveClassifier0.getCostMatrix();
      evaluation0.rootRelativeSquaredError();
      evaluation1.meanAbsoluteError();
      evaluation1.getHeader();
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      LWL lWL0 = new LWL();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      TestInstances testInstances0 = new TestInstances();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "combinationRuleTipText");
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      FilteredClassifier filteredClassifier0 = new FilteredClassifier();
      filteredClassifier0.getRevision();
      double double0 = evaluation0.m_SumErr;
      String string0 = JSplitPane.TOP;
      double[] doubleArray0 = evaluation0.m_MarginCounts;
      evaluation0.SFMeanEntropyGain();
      BallTree ballTree0 = new BallTree();
      double double1 = evaluation0.m_Unclassified;
      double double2 = evaluation0.m_SumAbsErr;
      evaluation0.toMatrixString(".bsi");
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(84);
      evaluation0.m_CoverageStatisticsAvailable = false;
      evaluation0.KBRelativeInformation();
      double double3 = KStarConstants.EPSILON;
      evaluation0.weightedFalsePositiveRate();
      evaluation0.weightedFalseNegativeRate();
      evaluation0.weightedFalsePositiveRate();
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      LWL lWL0 = new LWL();
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Capabilities capabilities0 = regressionByDiscretization0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      regressionByDiscretization0.setNumBins(3);
      Evaluation evaluation0 = new Evaluation(instances0);
      FilteredClassifier filteredClassifier0 = new FilteredClassifier();
      filteredClassifier0.getRevision();
      DecisionTable decisionTable0 = new DecisionTable();
      decisionTable0.getCapabilities();
      double double0 = evaluation0.m_SumErr;
      double double1 = evaluation0.m_Unclassified;
      try { 
        evaluation0.toClassDetailsString();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Evaluation: No per class statistics possible!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_SumPriorAbsErr;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      evaluation0.toSummaryString();
      SparseInstance sparseInstance0 = new SparseInstance(114);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String string0 = AccessibleContext.ACCESSIBLE_VISIBLE_DATA_PROPERTY;
      instances0.add((Instance) sparseInstance0);
      LWL lWL0 = new LWL();
      lWL0.getTechnicalInformation();
      evaluation0.meanPriorAbsoluteError();
      NGramTokenizer nGramTokenizer0 = new NGramTokenizer();
      evaluation0.SFEntropyGain();
      evaluation0.correct();
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      double[][] doubleArray0 = evaluation0.confusionMatrix();
      WrapperSubsetEval wrapperSubsetEval0 = new WrapperSubsetEval();
      textDirectoryLoader0.setOutputFilename(false);
      Classifier classifier0 = wrapperSubsetEval0.getClassifier();
      String[] stringArray0 = new String[0];
      ZeroR.main(stringArray0);
      evaluation0.evaluateModel(classifier0, instances0, (Object[]) doubleArray0);
      // Undeclared exception!
      try { 
        evaluation0.areaUnderPRC(2758);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.evaluation.ThresholdCurve", e);
      }
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      LWL lWL0 = new LWL();
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      Capabilities capabilities0 = regressionByDiscretization0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      regressionByDiscretization0.setNumBins(3);
      Evaluation evaluation0 = new Evaluation(instances0);
      RegressionByDiscretization regressionByDiscretization1 = new RegressionByDiscretization();
      LWL lWL1 = new LWL();
      LWL lWL2 = new LWL();
      Evaluation evaluation1 = new Evaluation(instances0);
      BallTree ballTree0 = new BallTree(instances0);
      Evaluation evaluation2 = new Evaluation(instances0);
      Evaluation evaluation3 = new Evaluation(instances0);
      evaluation2.equals(evaluation3);
      FileSystemHandling.shouldAllThrowIOExceptions();
      double double0 = evaluation3.m_Unclassified;
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      CostSensitiveClassifier costSensitiveClassifier1 = new CostSensitiveClassifier();
      costSensitiveClassifier0.getCostMatrix();
      evaluation1.rootRelativeSquaredError();
      evaluation3.meanAbsoluteError();
      evaluation1.getHeader();
      DecisionStump decisionStump0 = new DecisionStump();
      ZeroR zeroR0 = new ZeroR();
      Evaluation.wekaStaticWrapper(zeroR0, "ZigxQ^");
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      LWL lWL0 = new LWL();
      LWL lWL1 = new LWL();
      BallTree ballTree0 = new BallTree(instances0);
      evaluation0.unweightedMacroFmeasure();
      double double0 = evaluation0.m_SumAbsErr;
      String string0 = DefaultEditorKit.selectAllAction;
      double double1 = evaluation0.m_Incorrect;
      evaluation0.kappa();
      evaluation0.useNoPriors();
      lWL1.getCapabilities();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      testInstances0.setSeed(1888);
      evaluation0.coverageOfTestCasesByPredictedRegions();
      MockRandom mockRandom0 = new MockRandom();
      evaluation0.SFEntropyGain();
      try { 
        evaluation0.correlationCoefficient();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't compute correlation coefficient: class is nominal!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.KBMeanInformation();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      Capabilities capabilities0 = gaussianProcesses0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances1 = testInstances0.generate();
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      regressionByDiscretization0.setNumBins(5);
      Evaluation evaluation1 = new Evaluation(instances0);
      LWL lWL0 = new LWL();
      LWL lWL1 = new LWL();
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      testInstances0.setSeed(4);
      Instances instances2 = new Instances(instances1, (-1789));
      evaluation1.toMatrixString();
      MockRandom mockRandom0 = new MockRandom(2);
      try { 
        evaluation0.crossValidateModel((Classifier) gaussianProcesses0, instances1, 1, (Random) mockRandom0, (Object[]) gaussianProcesses0.TAGS_FILTER);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // weka.core.Tag cannot be cast to weka.classifiers.evaluation.output.prediction.AbstractOutput
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      Capabilities capabilities0 = regressionByDiscretization0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      LWL lWL0 = new LWL();
      LWL lWL1 = new LWL();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      testInstances0.setSeed(471);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/users/apanichella/wekafiles/props/Capabilities.props");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      DecisionStump decisionStump0 = new DecisionStump();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(98);
      Instances instances0 = testInstances0.generate("Cannot print distribution without '-p' option!");
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.errorRate();
      binarySparseInstance0.insertAttributeAt(14);
      // Undeclared exception!
      try { 
        evaluation0.weightedFalsePositiveRate();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test94()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedMatthewsCorrelation();
      double double0 = KStarConstants.FLOOR;
      evaluation0.KBMeanInformation();
      evaluation0.meanPriorAbsoluteError();
      NGramTokenizer nGramTokenizer0 = new NGramTokenizer();
      evaluation0.SFEntropyGain();
      evaluation0.correct();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      double[][] doubleArray0 = evaluation0.confusionMatrix();
      WrapperSubsetEval wrapperSubsetEval0 = new WrapperSubsetEval();
      ZeroR zeroR0 = new ZeroR();
      evaluation0.evaluateModel((Classifier) zeroR0, instances0, (Object[]) doubleArray0);
      evaluation0.numTruePositives(4);
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(6);
      SparseInstance sparseInstance0 = new SparseInstance((SparseInstance) binarySparseInstance0);
      evaluation0.sizeOfPredictedRegions();
      evaluation0.falsePositiveRate(80);
      evaluation0.SFSchemeEntropy();
      evaluation0.kappa();
      evaluation0.useNoPriors();
      evaluation0.SFMeanSchemeEntropy();
      evaluation0.relativeAbsoluteError();
  }

  @Test(timeout = 4000)
  public void test95()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_TotalCost;
      double double1 = KStarConstants.FLOOR;
      evaluation0.KBMeanInformation();
      double double2 = evaluation0.m_Unclassified;
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = Double.NaN;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0.0, doubleArray0);
      double double3 = evaluation0.m_WithClass;
      NGramTokenizer nGramTokenizer0 = new NGramTokenizer();
      evaluation0.SFPriorEntropy();
      LWL lWL0 = new LWL();
      double double4 = evaluation0.m_SumAbsErr;
      evaluation0.toMatrixString("@data");
      evaluation0.SFSchemeEntropy();
      evaluation0.kappa();
      evaluation0.useNoPriors();
      CostMatrix costMatrix0 = new CostMatrix(2);
      evaluation0.SFMeanSchemeEntropy();
      evaluation0.relativeAbsoluteError();
      evaluation0.sizeOfPredictedRegions();
      evaluation0.weightedAreaUnderROC();
      evaluation0.falseNegativeRate(3);
      instances0.iterator();
      evaluation0.falsePositiveRate(2);
      BinarySparseInstance binarySparseInstance1 = null;
      try {
        binarySparseInstance1 = new BinarySparseInstance((-1456206972));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.BinarySparseInstance", e);
      }
  }

  @Test(timeout = 4000)
  public void test96()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      LWL lWL0 = new LWL();
      LWL lWL1 = new LWL();
      BallTree ballTree0 = new BallTree(instances0);
      evaluation0.unweightedMacroFmeasure();
      testInstances0.setNumRelationalNominalValues(63);
      testInstances0.setSeed(0);
      evaluation0.SFPriorEntropy();
      LWL lWL2 = new LWL();
      double double0 = evaluation0.m_SumAbsErr;
      evaluation0.toMatrixString("3E!fA\"IRo@");
      evaluation0.SFSchemeEntropy();
      evaluation0.kappa();
      evaluation0.useNoPriors();
      CostMatrix costMatrix0 = new CostMatrix(17);
      evaluation0.rootRelativeSquaredError();
      evaluation0.meanAbsoluteError();
      Evaluation evaluation1 = new Evaluation(instances0);
      // Undeclared exception!
      try { 
        evaluation0.updateMargins((double[]) null, 3, 0.2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test97()  throws Throwable  {
      LWL lWL0 = new LWL();
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      regressionByDiscretization0.getCapabilities();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      regressionByDiscretization0.setNumBins(3);
      Evaluation evaluation0 = new Evaluation(instances0);
      FilteredClassifier filteredClassifier0 = new FilteredClassifier();
      DecisionTable decisionTable0 = new DecisionTable();
      double double0 = evaluation0.m_SumErr;
      double[] doubleArray0 = evaluation0.m_MarginCounts;
      double double1 = evaluation0.m_Unclassified;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(2);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "quevbz(nWx=$c*b");
      binarySparseInstance0.setDataset(instances0);
      evaluation0.updateStatsForPredictor(0, binarySparseInstance0);
      binarySparseInstance0.setClassValue(4.9E-324);
      evaluation0.evaluateModelOnce(doubleArray0, (Instance) binarySparseInstance0);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      File file0 = costSensitiveClassifier0.getOnDemandDirectory();
      textDirectoryLoader0.setDirectory(file0);
      Object object0 = new Object();
      C45Loader c45Loader0 = new C45Loader();
      try { 
        c45Loader0.getStructure();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No source has beenspecified
         //
         verifyException("weka.core.converters.C45Loader", e);
      }
  }

  @Test(timeout = 4000)
  public void test98()  throws Throwable  {
      LWL lWL0 = new LWL();
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      regressionByDiscretization0.getCapabilities();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      regressionByDiscretization0.setNumBins(3);
      Evaluation evaluation0 = new Evaluation(instances0);
      FilteredClassifier filteredClassifier0 = new FilteredClassifier();
      DecisionTable decisionTable0 = new DecisionTable();
      double double0 = evaluation0.m_SumErr;
      double double1 = evaluation0.m_Unclassified;
      double[] doubleArray0 = evaluation0.getClassPriors();
      double double2 = evaluation0.m_Unclassified;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(2);
      binarySparseInstance0.setDataset(instances0);
      evaluation0.updateStatsForPredictor(0, binarySparseInstance0);
      binarySparseInstance0.setClassValue(4.9E-324);
      try { 
        evaluation0.evaluateModelOnce(doubleArray0, (Instance) binarySparseInstance0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -250
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  @Test(timeout = 4000)
  public void test99()  throws Throwable  {
      LWL lWL0 = new LWL();
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      Capabilities capabilities0 = regressionByDiscretization0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      regressionByDiscretization0.setNumBins(3);
      Evaluation evaluation0 = new Evaluation(instances0);
      LWL lWL1 = new LWL();
      lWL0.getCapabilities();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      testInstances0.setSeed((-878));
      evaluation0.coverageOfTestCasesByPredictedRegions();
      MockRandom mockRandom0 = new MockRandom(2413L);
      evaluation0.SFEntropyGain();
      evaluation0.correlationCoefficient();
  }
}
