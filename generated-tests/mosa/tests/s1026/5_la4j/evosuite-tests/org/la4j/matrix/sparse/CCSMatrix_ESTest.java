/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 17:11:57 GMT 2018
 */

package org.la4j.matrix.sparse;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Random;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;
import org.la4j.LinearAlgebra;
import org.la4j.Matrix;
import org.la4j.matrix.DenseMatrix;
import org.la4j.matrix.SparseMatrix;
import org.la4j.matrix.functor.MatrixFunction;
import org.la4j.matrix.functor.MatrixPredicate;
import org.la4j.matrix.functor.MatrixProcedure;
import org.la4j.matrix.sparse.CCSMatrix;
import org.la4j.operation.ooplace.OoPlaceOuterProduct;
import org.la4j.vector.DenseVector;
import org.la4j.vector.SparseVector;
import org.la4j.vector.functor.VectorAccumulator;
import org.la4j.vector.functor.VectorFunction;
import org.la4j.vector.functor.VectorProcedure;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CCSMatrix_ESTest extends CCSMatrix_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      // Undeclared exception!
      try { 
        CCSMatrix.fromCSV("RNHiI/rX");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      Matrix matrix0 = cCSMatrix0.multiplyByItsTranspose();
      assertEquals(0, matrix0.columns());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(28, 28, 28);
      // Undeclared exception!
      try { 
        CCSMatrix.block(cCSMatrix0, cCSMatrix0, cCSMatrix0, cCSMatrix0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '29' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      double[][] doubleArray0 = new double[1][9];
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      CCSMatrix cCSMatrix0 = CCSMatrix.from2DArray(doubleArray0);
      // Undeclared exception!
      try { 
        cCSMatrix0.minInColumn((-695));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -695
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      double[][] doubleArray0 = new double[3][2];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (-1.0);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[2];
      doubleArray2[0] = (-1.0);
      doubleArray2[1] = (-1.0);
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[2];
      doubleArray3[0] = (-1.0);
      doubleArray3[1] = (-1.0);
      doubleArray0[2] = doubleArray3;
      CCSMatrix.from2DArray(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(2);
      Integer integer0 = new Integer(2);
      LinearAlgebra.SolverFactory linearAlgebra_SolverFactory0 = LinearAlgebra.SolverFactory.LEAST_SQUARES;
      cCSMatrix0.withSolver(linearAlgebra_SolverFactory0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-22);
      // Undeclared exception!
      try { 
        CCSMatrix.fromBinary(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can not decode CCSMatrix from the given byte array.
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(1236);
      cCSMatrix0.iteratorOfColumn(1236);
      cCSMatrix0.minInColumn(1217);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(2060, 2060);
      CCSMatrix.block(cCSMatrix0, cCSMatrix0, cCSMatrix0, cCSMatrix0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(1236);
      cCSMatrix0.minInColumn(1217);
      cCSMatrix0.getRow(1236);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(1072);
      Integer integer0 = new Integer(987);
      cCSMatrix0.nonZeroAt(987, 987);
      MockRandom mockRandom0 = new MockRandom();
      CCSMatrix.random(2045, (-2239), (double) (-2239), (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      cCSMatrix0.iteratorOrNonZeroColumns();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      cCSMatrix0.iterator();
      CCSMatrix.block(cCSMatrix0, cCSMatrix0, cCSMatrix0, cCSMatrix0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(2814);
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.eachNonZero(matrixProcedure0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      try { 
        CCSMatrix.random(13, 181, (double) 181, (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The density value should be between 0 and 1.0
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(2060, 2060);
      cCSMatrix0.getRow(2054);
      CCSMatrix cCSMatrix1 = CCSMatrix.zero(280, 2054);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      CCSMatrix.block(cCSMatrix0, cCSMatrix1, cCSMatrix1, cCSMatrix1);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      int[] intArray0 = new int[5];
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      // Undeclared exception!
      try { 
        cCSMatrix0.getColumn(0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      double double0 = new Integer(0);
      CCSMatrix.randomSymmetric(0, (double) 0, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      cCSMatrix0.infinityNorm();
      cCSMatrix0.min();
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(48, 48);
      cCSMatrix0.nonZeroIteratorOfColumn(48);
      CCSMatrix.zero(48, 48, 48);
      cCSMatrix0.min();
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix(0, 0);
      cCSMatrix0.columnMajorIterator();
      CCSMatrix cCSMatrix1 = CCSMatrix.zero(0, 0, 0);
      cCSMatrix1.max();
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(3145, 4, 3145);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      cCSMatrix0.updateColumn(1, vectorFunction0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      int int0 = 1953;
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(1953);
      cCSMatrix0.manhattanNorm();
      cCSMatrix0.minInColumn(int0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      CCSMatrix.zero(24, 24, 24);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 3145;
      doubleArray0[1] = (double) 24;
      doubleArray0[2] = (double) 3145;
      doubleArray0[3] = (double) 24;
      doubleArray0[4] = (double) 3145;
      doubleArray0[5] = (double) 24;
      SparseVector.fromArray(doubleArray0);
      OoPlaceOuterProduct ooPlaceOuterProduct0 = new OoPlaceOuterProduct();
      OoPlaceOuterProduct ooPlaceOuterProduct1 = new OoPlaceOuterProduct();
      MockRandom mockRandom0 = new MockRandom(3145);
      // Undeclared exception!
      try { 
        CCSMatrix.random(3145, (-964), 1.0, (Random) mockRandom0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      double[][] doubleArray0 = new double[5][7];
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = 1070.8564114;
      doubleArray1[1] = 3922.0;
      doubleArray1[2] = 99.041896798;
      doubleArray1[3] = 0.0;
      doubleArray1[4] = (-1220.1832385);
      doubleArray1[5] = 793.13;
      // Undeclared exception!
      try { 
        CCSMatrix.random(1261, 4, 0.0, (Random) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(13);
      cCSMatrix0.multiplyByItsTranspose();
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      int[] intArray0 = new int[5];
      // Undeclared exception!
      try { 
        cCSMatrix0.select(intArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '0' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      SparseVector.fromArray(doubleArray0);
      OoPlaceOuterProduct ooPlaceOuterProduct0 = new OoPlaceOuterProduct();
      CCSMatrix.from1DArray(1, 1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      Integer integer0 = new Integer(2);
      double[][] doubleArray0 = new double[1][1];
      Matrix matrix0 = Matrix.from2DArray(doubleArray0);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      Matrix matrix1 = cCSMatrix0.transform(matrixFunction0);
      // Undeclared exception!
      try { 
        CCSMatrix.block(matrix1, matrix0, matrix1, matrix1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Sides of blocks are incompatible!
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      org.evosuite.runtime.Random.setNextRandom(2000);
      double[][] doubleArray0 = new double[1][3];
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = (-1309.9);
      doubleArray1[1] = (double) 2000;
      doubleArray1[2] = (double) 2000;
      doubleArray0[0] = doubleArray1;
      CCSMatrix cCSMatrix0 = CCSMatrix.from2DArray(doubleArray0);
      cCSMatrix0.getRow(2000);
      MockRandom mockRandom0 = new MockRandom(790L);
      CCSMatrix.random(3, 3, 1.0, (Random) mockRandom0);
      int int0 = (-1965);
      // Undeclared exception!
      try { 
        CCSMatrix.fromBinary((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.ByteBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(2092, 2092);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      cCSMatrix0.updateColumn(2054, vectorFunction0);
      cCSMatrix0.getRow(2054);
      cCSMatrix0.maxInColumn(1425);
      CCSMatrix cCSMatrix1 = CCSMatrix.zero(280, 2054);
      cCSMatrix1.getColumn(1291);
      Double double0 = new Double(2054);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(1236);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cCSMatrix0.update(matrixFunction0);
      int int0 = 2;
      cCSMatrix0.copyOfColumns(int0);
      int int1 = 1217;
      cCSMatrix0.minInColumn(int1);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(2406);
      LinearAlgebra.InverterFactory linearAlgebra_InverterFactory0 = LinearAlgebra.InverterFactory.NO_PIVOT_GAUSS;
      cCSMatrix0.withInverter(linearAlgebra_InverterFactory0);
      double double0 = new Integer(2406);
      cCSMatrix0.maxInColumn(2057);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.eachInColumn(2406, vectorProcedure0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      double[][] doubleArray0 = new double[2][0];
      double[] doubleArray1 = new double[0];
      doubleArray0[0] = doubleArray1;
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(1236);
      cCSMatrix0.minInColumn(1000);
      double[] doubleArray2 = new double[7];
      Double double0 = new Double(0.0);
      Matrix matrix0 = Matrix.diagonal(1980, Double.NEGATIVE_INFINITY);
      CCSMatrix.block(cCSMatrix0, cCSMatrix0, cCSMatrix0, matrix0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      cCSMatrix0.blankOfShape(2804, 2759);
      int[] intArray0 = new int[0];
      cCSMatrix0.select(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(1293, (-1747.3051375911425));
      cCSMatrix0.spliterator();
      int[] intArray0 = new int[5];
      intArray0[1] = 1293;
      intArray0[1] = 1293;
      intArray0[2] = 1293;
      intArray0[1] = 1293;
      cCSMatrix0.select(intArray0, intArray0);
      CCSMatrix cCSMatrix1 = new CCSMatrix();
      cCSMatrix0.max();
      long long0 = 32L;
      MockRandom mockRandom0 = new MockRandom(long0);
      int int0 = 397;
      double double0 = (-1.0);
      CCSMatrix.randomSymmetric(int0, double0, (Random) mockRandom0);
      cCSMatrix1.getColumn(intArray0[1]);
      int int1 = 2;
      int int2 = 1268;
      CCSMatrix.zero(int1, int2, intArray0[2]);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix((byte)68, 2120);
      cCSMatrix0.toBinary();
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(1236);
      cCSMatrix0.minInColumn(1217);
      cCSMatrix0.max();
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(1236);
      cCSMatrix0.minInColumn(166);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.eachNonZeroInColumn(166, vectorProcedure0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      CCSMatrix cCSMatrix1 = new CCSMatrix();
      cCSMatrix1.toColumnMajorSparseMatrix();
      // Undeclared exception!
      try { 
        cCSMatrix0.minInColumn(403);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 403
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(1236);
      LinearAlgebra.SolverFactory linearAlgebra_SolverFactory0 = LinearAlgebra.SolverFactory.SWEEP;
      cCSMatrix0.withSolver(linearAlgebra_SolverFactory0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      double[][] doubleArray0 = new double[1][9];
      CCSMatrix cCSMatrix0 = CCSMatrix.from2DArray(doubleArray0);
      cCSMatrix0.getRow(1232);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cCSMatrix0.update(matrixFunction0);
      // Undeclared exception!
      try { 
        CCSMatrix.block(cCSMatrix0, cCSMatrix0, cCSMatrix0, cCSMatrix0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '10' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      DenseVector denseVector0 = DenseVector.unit(1217);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 1217;
      SparseVector sparseVector0 = SparseVector.fromArray(doubleArray0);
      OoPlaceOuterProduct ooPlaceOuterProduct0 = new OoPlaceOuterProduct();
      Matrix matrix0 = ooPlaceOuterProduct0.apply(denseVector0, sparseVector0);
      Integer integer0 = new Integer((-90));
      CCSMatrix.block(matrix0, matrix0, matrix0, matrix0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      DenseVector denseVector0 = DenseVector.unit(1236);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 1236;
      SparseVector sparseVector0 = SparseVector.fromArray(doubleArray0);
      OoPlaceOuterProduct ooPlaceOuterProduct0 = new OoPlaceOuterProduct();
      ooPlaceOuterProduct0.apply(denseVector0, sparseVector0);
      Double double0 = new Double(42.5605110233076);
      CCSMatrix cCSMatrix0 = CCSMatrix.from1DArray(1, 1, doubleArray0);
      cCSMatrix0.power(1236);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      DenseVector.unit(2);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 2;
      doubleArray0[1] = (double) 2;
      doubleArray0[2] = (double) 2;
      doubleArray0[3] = (double) 2;
      doubleArray0[4] = (double) 2;
      CCSMatrix cCSMatrix0 = CCSMatrix.from1DArray(2, 2, doubleArray0);
      Matrix matrix0 = cCSMatrix0.sliceBottomRight((-148), 2);
      cCSMatrix0.getRow(482);
      MockRandom mockRandom0 = new MockRandom(515L);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cCSMatrix0.update(matrixFunction0);
      SparseMatrix sparseMatrix0 = cCSMatrix0.toSparseMatrix();
      // Undeclared exception!
      try { 
        CCSMatrix.block(sparseMatrix0, sparseMatrix0, matrix0, cCSMatrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Sides of blocks are incompatible!
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      int int0 = 28;
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(28, 28, 28);
      int int1 = 3145;
      CCSMatrix cCSMatrix1 = new CCSMatrix(28, 3145);
      OoPlaceOuterProduct ooPlaceOuterProduct0 = new OoPlaceOuterProduct();
      DenseVector.constant(3145, 1578.49);
      // Undeclared exception!
      try { 
        CCSMatrix.block(cCSMatrix0, cCSMatrix0, cCSMatrix0, cCSMatrix1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Sides of blocks are incompatible!
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(1236);
      cCSMatrix0.swapColumns(451, 1202);
      cCSMatrix0.swapColumns(1236, 1236);
      cCSMatrix0.minInColumn(1217);
      org.evosuite.runtime.Random.setNextRandom((-3913));
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(2060, 2060);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn((-1.0), (-1.0), (double)2054, (double)2054, 1.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      cCSMatrix0.updateColumn(2057, vectorFunction0);
      cCSMatrix0.getRow(2054);
      MockRandom mockRandom0 = new MockRandom();
      CCSMatrix.diagonal(2057, (-1824));
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(1236);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.eachNonZeroInRow((-4130), vectorProcedure0);
      cCSMatrix0.min();
      cCSMatrix0.toBinary();
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      double[] doubleArray0 = new double[0];
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(1234);
      cCSMatrix0.minInColumn(1000);
      int[] intArray0 = new int[8];
      intArray0[0] = 1000;
      intArray0[2] = (-1700);
      intArray0[3] = (-1700);
      intArray0[4] = 1234;
      intArray0[5] = 1000;
      intArray0[6] = 1000;
      intArray0[7] = 1234;
      cCSMatrix0.select(intArray0, intArray0);
      CCSMatrix cCSMatrix1 = new CCSMatrix();
      int int0 = 3;
      cCSMatrix1.minInColumn(int0);
      long long0 = 9995L;
      MockRandom mockRandom0 = new MockRandom(long0);
      cCSMatrix0.minInColumn(intArray0[0]);
      CCSMatrix.block(cCSMatrix0, cCSMatrix1, cCSMatrix0, cCSMatrix1);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(28);
      CCSMatrix cCSMatrix1 = new CCSMatrix(28, 3145);
      CCSMatrix.block(cCSMatrix0, cCSMatrix1, cCSMatrix1, cCSMatrix0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(856, 856);
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(matrixPredicate0).test(anyInt() , anyInt());
      cCSMatrix0.non(matrixPredicate0);
      cCSMatrix0.min();
      cCSMatrix0.copyOfShape(211, 209);
      CCSMatrix.fromMatrixMarket("zRk-Cb*X=c\"");
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(4508, 4508);
      cCSMatrix0.sliceBottomRight(4508, 4508);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.eachInColumn(134, vectorProcedure0);
      cCSMatrix0.getOrElse(134, 134, 134);
      cCSMatrix0.copyOfShape(134, 231);
      CCSMatrix cCSMatrix1 = new CCSMatrix();
      Matrix matrix0 = cCSMatrix1.blankOfShape(231, 134);
      LinearAlgebra.SolverFactory linearAlgebra_SolverFactory0 = LinearAlgebra.SolverFactory.LEAST_SQUARES;
      matrix0.withSolver(linearAlgebra_SolverFactory0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(2406);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.eachInColumn(201, vectorProcedure0);
      cCSMatrix0.getOrElse(226, 201, 2859.704);
      CCSMatrix cCSMatrix1 = CCSMatrix.zero(433, 226, 201);
      cCSMatrix1.copyOfShape(231, 1175);
      CCSMatrix cCSMatrix2 = CCSMatrix.diagonal(226, 2859.704);
      cCSMatrix2.blankOfShape(1960, 226);
      cCSMatrix2.blankOfShape(226, 3);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      int int0 = 2;
      DenseVector denseVector0 = DenseVector.unit(2);
      double[] doubleArray0 = new double[1];
      SparseVector sparseVector0 = SparseVector.fromArray(doubleArray0);
      OoPlaceOuterProduct ooPlaceOuterProduct0 = new OoPlaceOuterProduct();
      Matrix matrix0 = ooPlaceOuterProduct0.apply(denseVector0, sparseVector0);
      Double double0 = new Double(2);
      Double double1 = new Double(2);
      // Undeclared exception!
      try { 
        CCSMatrix.block(matrix0, matrix0, matrix0, matrix0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '3' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(1236);
      cCSMatrix0.minInColumn(1000);
      cCSMatrix0.nonZeroAt(2321, 1000);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(2406, 2406, 2406);
      LinearAlgebra.InverterFactory linearAlgebra_InverterFactory0 = LinearAlgebra.InverterFactory.GAUSS_JORDAN;
      cCSMatrix0.withInverter(linearAlgebra_InverterFactory0);
      Integer integer0 = new Integer(2406);
      cCSMatrix0.maxInColumn(2057);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.eachInColumn(2406, vectorProcedure0);
      cCSMatrix0.nonZeroColumnMajorIterator();
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      DenseVector denseVector0 = DenseVector.unit(1236);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 1236;
      SparseVector sparseVector0 = SparseVector.fromArray(doubleArray0);
      OoPlaceOuterProduct ooPlaceOuterProduct0 = new OoPlaceOuterProduct();
      Matrix matrix0 = ooPlaceOuterProduct0.apply(denseVector0, sparseVector0);
      matrix0.maxInColumn(0);
      matrix0.minInColumn(1236);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(1623, 1623);
      Matrix matrix0 = cCSMatrix0.sliceBottomRight(1623, 1623);
      cCSMatrix0.getRow(1623);
      MockRandom mockRandom0 = new MockRandom(1149L);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)1149L, (double)1623, (double)1623, (double)1149L, (double)1149L).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cCSMatrix0.update(matrixFunction0);
      CCSMatrix.block(matrix0, cCSMatrix0, cCSMatrix0, cCSMatrix0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(1072);
      double double0 = new Integer((-1022));
      cCSMatrix0.nonZeroAt((-1022), 1043);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      int int0 = 1236;
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(1236);
      cCSMatrix0.shuffle();
      byte[] byteArray0 = null;
      CCSMatrix.fromBinary(byteArray0);
      int int1 = 8;
      CCSMatrix cCSMatrix1 = CCSMatrix.zero(int0, int0, int1);
      int[] intArray0 = new int[0];
      int[] intArray1 = new int[7];
      intArray1[0] = int1;
      intArray1[1] = int0;
      intArray1[2] = int1;
      int int2 = 21;
      intArray1[3] = int2;
      int int3 = 1216;
      intArray1[4] = int3;
      intArray1[5] = int0;
      intArray1[6] = int1;
      cCSMatrix1.select(intArray0, intArray1);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorAccumulator0).accumulate();
      cCSMatrix0.foldRow(2775, vectorAccumulator0);
      cCSMatrix0.setAll(0.0);
      Integer integer0 = new Integer((byte)41);
      double double0 = new Integer(1000);
      cCSMatrix0.setAll((-1522.2386408475252));
      // Undeclared exception!
      try { 
        cCSMatrix0.iteratorOfColumn((byte)41);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 41
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix$5", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(24, 24, 24);
      cCSMatrix0.setAll(3145);
      cCSMatrix0.setAll(24);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      DenseVector denseVector0 = DenseVector.unit(1207);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 1247;
      doubleArray0[1] = (double) 1207;
      doubleArray0[2] = (double) 1207;
      doubleArray0[3] = (double) 1207;
      doubleArray0[4] = (double) 1247;
      doubleArray0[5] = (double) 1247;
      doubleArray0[6] = (double) 1207;
      doubleArray0[7] = Double.NEGATIVE_INFINITY;
      doubleArray0[8] = (double) 1207;
      SparseVector.fromArray(doubleArray0);
      OoPlaceOuterProduct ooPlaceOuterProduct0 = new OoPlaceOuterProduct();
      OoPlaceOuterProduct ooPlaceOuterProduct1 = new OoPlaceOuterProduct();
      SparseVector sparseVector0 = SparseVector.zero(1247);
      ooPlaceOuterProduct0.apply(denseVector0, sparseVector0);
      Double double0 = new Double(144.0);
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(1247, 1293, 4);
      cCSMatrix0.minInColumn(4);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.eachNonZeroInColumn(1247, vectorProcedure0);
      cCSMatrix0.nonZeroAt(37, 3);
      int[] intArray0 = new int[1];
      intArray0[0] = 3;
      cCSMatrix0.select(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      CCSMatrix.zero(24, 24, 24);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 3145;
      doubleArray0[1] = (double) 24;
      doubleArray0[2] = (double) 3145;
      doubleArray0[4] = (double) 3145;
      doubleArray0[5] = (double) 24;
      SparseVector.fromArray(doubleArray0);
      OoPlaceOuterProduct ooPlaceOuterProduct0 = new OoPlaceOuterProduct();
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(3145, Double.NEGATIVE_INFINITY);
      cCSMatrix0.min();
  }
}
