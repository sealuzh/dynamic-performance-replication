/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 06 17:28:26 GMT 2018
 */

package com.werken.saxpath;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.werken.saxpath.Token;
import com.werken.saxpath.XPathLexer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class XPathLexer_ESTest extends XPathLexer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(") (");
      xPathLexer0.nextToken();
      xPathLexer0.getXPath();
      Token token0 = xPathLexer0.identifierOrOperatorName();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("^!>");
      xPathLexer0.minus();
      xPathLexer0.identifierOrOperatorName();
      Token token0 = xPathLexer0.and();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("M>i3Kc#&f9");
      xPathLexer0.operatorName();
      Token token0 = xPathLexer0.identifier();
      assertEquals("M", token0.getTokenText());
      assertEquals(15, token0.getTokenType());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("Ihu");
      xPathLexer0.rightParen();
      xPathLexer0.literal();
      xPathLexer0.colon();
      // Undeclared exception!
      try { 
        xPathLexer0.LA((-3495));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.colon();
      xPathLexer0.setXPath("");
      xPathLexer0.and();
      xPathLexer0.and();
      xPathLexer0.notEquals();
      xPathLexer0.isIdentifierChar('-');
      Token token0 = xPathLexer0.literal();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token0 = xPathLexer1.dollar();
      xPathLexer0.leftParen();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer0.setPreviousToken(token0);
      XPathLexer xPathLexer3 = new XPathLexer();
      Token token1 = xPathLexer0.identifierOrOperatorName();
      XPathLexer xPathLexer4 = new XPathLexer();
      xPathLexer4.nextToken();
      // Undeclared exception!
      try { 
        token1.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("d`!");
      Token token0 = xPathLexer0.leftParen();
      assertEquals("d", token0.getTokenText());
      assertEquals(1, token0.getTokenType());
      
      xPathLexer0.mod();
      XPathLexer xPathLexer1 = new XPathLexer("d`!");
      Token token1 = xPathLexer1.leftBracket();
      assertEquals("d", token1.getTokenText());
      
      Token token2 = xPathLexer1.number();
      assertEquals("", token2.getTokenText());
      assertEquals(30, token2.getTokenType());
      
      Token token3 = xPathLexer1.leftBracket();
      assertEquals(3, token3.getTokenType());
      
      Token token4 = xPathLexer0.dollar();
      assertEquals(26, token4.getTokenType());
      assertEquals("`", token4.getTokenText());
      
      Token token5 = xPathLexer0.nextToken();
      assertEquals(23, token5.getTokenType());
      
      Token token6 = xPathLexer0.at();
      assertEquals(16, token6.getTokenType());
      
      xPathLexer0.setXPath("d`!");
      Token token7 = xPathLexer1.identifierOrOperatorName();
      assertEquals("", token7.getTokenText());
      assertEquals(15, token7.getTokenType());
      
      xPathLexer0.setXPath("d`!");
      Token token8 = xPathLexer1.dots();
      assertEquals("!", token8.getTokenText());
      assertEquals(13, token8.getTokenType());
      
      xPathLexer1.relationalOperator();
      Token token9 = xPathLexer0.nextToken();
      assertEquals((-1), token9.getTokenType());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("7");
      Token token0 = xPathLexer0.nextToken();
      assertEquals(30, token0.getTokenType());
      assertEquals("7", token0.getTokenText());
      
      xPathLexer0.nextToken();
      Token token1 = xPathLexer0.identifierOrOperatorName();
      assertNull(token1);
      
      Token token2 = xPathLexer0.dots();
      assertEquals(13, token2.getTokenType());
      
      xPathLexer0.div();
      Token token3 = xPathLexer0.rightBracket();
      assertEquals(4, token3.getTokenType());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("5hS=~Rv2iuJ[,Eu0y_");
      xPathLexer0.relationalOperator();
      Token token0 = xPathLexer0.nextToken();
      assertEquals("5", token0.getTokenText());
      assertEquals(30, token0.getTokenType());
      
      int int0 = xPathLexer0.endPosition();
      assertEquals(18, int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("1I@%E; oEwx1a");
      xPathLexer0.operatorName();
      Token token0 = xPathLexer0.number();
      assertEquals("1", token0.getTokenText());
      assertEquals(30, token0.getTokenType());
      
      Token token1 = xPathLexer0.minus();
      assertEquals(6, token1.getTokenType());
      assertEquals("I", token1.getTokenText());
      
      Token token2 = xPathLexer0.leftParen();
      assertEquals("@", token2.getTokenText());
      assertEquals(1, token2.getTokenType());
      
      Token token3 = xPathLexer0.nextToken();
      assertEquals("%E; oEwx1a", token3.getTokenText());
      
      Token token4 = xPathLexer0.comma();
      assertEquals(32, token4.getTokenType());
      assertEquals("%", token4.getTokenText());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(") (");
      Token token0 = xPathLexer0.whitespace();
      assertEquals((-2), token0.getTokenType());
      assertEquals("", token0.getTokenText());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("c!V{gT");
      xPathLexer0.and();
      xPathLexer0.setXPath("c!V{gT");
      Token token0 = xPathLexer0.nextToken();
      assertEquals("c", token0.getTokenText());
      assertEquals(15, token0.getTokenType());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("z6`%z]`n>fhh}V3iTy");
      xPathLexer0.star();
      xPathLexer0.mod();
      xPathLexer0.or();
      xPathLexer0.and();
      xPathLexer0.slashes();
      xPathLexer0.plus();
      xPathLexer0.not();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.setXPath("xF{'");
      xPathLexer0.operatorName();
      xPathLexer0.div();
      xPathLexer1.slashes();
      xPathLexer1.currentPosition();
      xPathLexer1.consume(1);
      xPathLexer1.plus();
      xPathLexer0.setXPath("xF{'");
      xPathLexer1.identifierOrOperatorName();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.operatorName();
      xPathLexer1.nextToken();
      xPathLexer0.dollar();
      xPathLexer0.consume();
      assertNotSame(xPathLexer0, xPathLexer1);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("_ShW0+ZQfwb\"");
      Token token0 = xPathLexer0.minus();
      assertEquals("_", token0.getTokenText());
      assertEquals(6, token0.getTokenType());
      
      Token token1 = xPathLexer0.equals();
      assertEquals(21, token1.getTokenType());
      assertEquals("S", token1.getTokenText());
      
      Token token2 = xPathLexer0.notEquals();
      assertEquals("hW", token2.getTokenText());
      assertEquals(22, token2.getTokenType());
      
      Token token3 = xPathLexer0.identifierOrOperatorName();
      assertEquals(15, token3.getTokenType());
      
      xPathLexer0.or();
      Token token4 = xPathLexer0.nextToken();
      assertEquals(5, token4.getTokenType());
      assertEquals("+", token4.getTokenText());
      
      Token token5 = xPathLexer0.rightBracket();
      assertEquals(4, token5.getTokenType());
      assertEquals("Z", token5.getTokenText());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      XPathLexer xPathLexer1 = new XPathLexer("r");
      Token token0 = xPathLexer0.number();
      assertEquals(30, token0.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer();
      Token token1 = xPathLexer2.plus();
      xPathLexer0.setPreviousToken(token1);
      assertEquals(5, token1.getTokenType());
      
      xPathLexer2.mod();
      Token token2 = xPathLexer0.identifierOrOperatorName();
      assertEquals(15, token2.getTokenType());
      
      boolean boolean0 = xPathLexer2.isIdentifierChar('[');
      xPathLexer1.or();
      xPathLexer1.notEquals();
      Token token3 = xPathLexer2.notEquals();
      assertEquals(22, token3.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer3.literal();
      Token token4 = xPathLexer3.comma();
      assertEquals(32, token4.getTokenType());
      
      xPathLexer0.consume(6);
      XPathLexer xPathLexer4 = new XPathLexer();
      xPathLexer4.relationalOperator();
      XPathLexer xPathLexer5 = new XPathLexer();
      boolean boolean1 = xPathLexer5.hasMoreChars();
      assertTrue(boolean1 == boolean0);
      
      int int0 = xPathLexer1.currentPosition();
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("n (");
      Token token0 = xPathLexer0.nextToken();
      assertEquals(15, token0.getTokenType());
      assertEquals("n", token0.getTokenText());
      
      xPathLexer0.getXPath();
      Token token1 = xPathLexer0.identifierOrOperatorName();
      assertNull(token1);
      
      boolean boolean0 = xPathLexer0.isIdentifierStartChar('Z');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(") (");
      Token token0 = xPathLexer0.comma();
      assertEquals(32, token0.getTokenType());
      assertEquals(")", token0.getTokenText());
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals(1, token1.getTokenType());
      assertEquals("(", token1.getTokenText());
      
      int int0 = xPathLexer0.currentPosition();
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("dd\"~Z&gTMkCG");
      xPathLexer0.div();
      Token token0 = xPathLexer0.star();
      assertEquals("d", token0.getTokenText());
      assertEquals(20, token0.getTokenType());
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals("d", token1.getTokenText());
      assertEquals(15, token1.getTokenType());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("f");
      XPathLexer xPathLexer1 = new XPathLexer("f");
      Token token0 = xPathLexer1.dollar();
      assertEquals(26, token0.getTokenType());
      assertEquals("f", token0.getTokenText());
      
      XPathLexer xPathLexer2 = new XPathLexer();
      Token token1 = xPathLexer2.minus();
      assertEquals(6, token1.getTokenType());
      
      Token token2 = xPathLexer0.nextToken();
      assertEquals("f", token2.getTokenText());
      assertEquals(15, token2.getTokenType());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.rightBracket();
      xPathLexer0.dollar();
      xPathLexer0.and();
      xPathLexer0.setXPath("-z-<_|=An8tcb");
      XPathLexer xPathLexer1 = new XPathLexer("-z-<_|=An8tcb");
      xPathLexer0.leftBracket();
      xPathLexer0.nextToken();
      xPathLexer0.star();
      xPathLexer0.doubleColon();
      // Undeclared exception!
      try { 
        xPathLexer0.setXPath((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("d`!");
      Token token0 = xPathLexer0.leftBracket();
      assertEquals("d", token0.getTokenText());
      assertEquals(3, token0.getTokenType());
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals((-1), token1.getTokenType());
      assertEquals("`!", token1.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer1.or();
      Token token2 = xPathLexer0.dollar();
      assertEquals(26, token2.getTokenType());
      assertEquals("`", token2.getTokenText());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("}}eyNal9+i#_2g");
      Token token0 = xPathLexer0.minus();
      Token token1 = xPathLexer0.pipe();
      assertEquals("}", token1.getTokenText());
      assertEquals(17, token1.getTokenType());
      
      Token token2 = xPathLexer0.leftBracket();
      assertEquals(3, token2.getTokenType());
      
      xPathLexer0.minus();
      xPathLexer0.setPreviousToken(token0);
      assertEquals("}", token0.getTokenText());
      
      Token token3 = xPathLexer0.at();
      assertEquals(16, token3.getTokenType());
      assertEquals("N", token3.getTokenText());
      
      Token token4 = xPathLexer0.star();
      assertEquals("a", token4.getTokenText());
      assertEquals(20, token4.getTokenType());
      
      Token token5 = xPathLexer0.whitespace();
      assertEquals((-2), token5.getTokenType());
      assertEquals("", token5.getTokenText());
      
      Token token6 = xPathLexer0.rightBracket();
      assertEquals("9", token6.getTokenText());
      assertEquals(4, token6.getTokenType());
      
      Token token7 = xPathLexer0.identifierOrOperatorName();
      assertEquals(15, token7.getTokenType());
      assertNotNull(token7);
      
      xPathLexer0.mod();
      xPathLexer0.operatorName();
      Token token8 = xPathLexer0.plus();
      assertEquals("+", token8.getTokenText());
      assertEquals(5, token8.getTokenType());
      
      Token token9 = xPathLexer0.rightParen();
      assertEquals(2, token9.getTokenType());
      assertEquals("i", token9.getTokenText());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(":9");
      XPathLexer xPathLexer1 = new XPathLexer(":9");
      Token token0 = xPathLexer1.dollar();
      assertEquals(":", token0.getTokenText());
      assertEquals(26, token0.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer();
      Token token1 = xPathLexer2.minus();
      assertEquals(6, token1.getTokenType());
      
      Token token2 = xPathLexer2.nextToken();
      xPathLexer0.endPosition();
      Token token3 = xPathLexer0.equals();
      assertEquals(":", token3.getTokenText());
      assertEquals(21, token3.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer3.setPreviousToken(token2);
      assertEquals((-1), token2.getTokenType());
      
      xPathLexer2.at();
      xPathLexer0.isIdentifierChar(')');
      XPathLexer xPathLexer4 = new XPathLexer();
      xPathLexer4.relationalOperator();
      Token token4 = xPathLexer2.identifierOrOperatorName();
      assertNull(token4);
      
      XPathLexer xPathLexer5 = new XPathLexer("1/%");
      XPathLexer xPathLexer6 = new XPathLexer("1/%");
      xPathLexer6.nextToken();
      XPathLexer xPathLexer7 = new XPathLexer();
      XPathLexer xPathLexer8 = new XPathLexer();
      xPathLexer7.getXPath();
      Token token5 = xPathLexer5.notEquals();
      assertEquals("1/", token5.getTokenText());
      assertEquals(22, token5.getTokenType());
      
      xPathLexer1.operatorName();
      XPathLexer xPathLexer9 = new XPathLexer();
      xPathLexer9.consume();
      Token token6 = xPathLexer4.whitespace();
      assertEquals((-2), token6.getTokenType());
      
      xPathLexer9.endPosition();
      Token token7 = xPathLexer6.getPreviousToken();
      assertEquals(30, token7.getTokenType());
      assertEquals("1", token7.getTokenText());
      
      xPathLexer5.endPosition();
      XPathLexer xPathLexer10 = new XPathLexer();
      Token token8 = xPathLexer10.at();
      assertEquals(16, token8.getTokenType());
      
      xPathLexer6.or();
      char char0 = xPathLexer3.LA(1);
      assertEquals('\uFFFF', char0);
      
      Token token9 = xPathLexer3.dots();
      assertEquals(13, token9.getTokenType());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("2$Cf&n.3mzTVz(");
      Token token0 = xPathLexer0.rightParen();
      assertEquals(2, token0.getTokenType());
      assertEquals("2", token0.getTokenText());
      
      Token token1 = xPathLexer0.pipe();
      assertEquals("$", token1.getTokenText());
      assertEquals(17, token1.getTokenType());
      
      Token token2 = xPathLexer0.slashes();
      token2.toString();
      token2.toString();
      Token token3 = xPathLexer0.identifier();
      assertEquals(15, token3.getTokenType());
      assertEquals("f", token3.getTokenText());
      
      token2.toString();
      xPathLexer0.and();
      Token token4 = xPathLexer0.notEquals();
      assertEquals(22, token4.getTokenType());
      assertEquals("&n", token4.getTokenText());
      
      String string0 = token2.toString();
      assertEquals("[ (11) (C)", string0);
      
      Token token5 = xPathLexer0.dollar();
      assertEquals(".", token5.getTokenText());
      assertEquals(26, token5.getTokenType());
      
      xPathLexer0.mod();
      Token token6 = xPathLexer0.leftBracket();
      assertEquals("3", token6.getTokenText());
      assertEquals(3, token6.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.getPreviousToken();
      boolean boolean0 = xPathLexer0.isIdentifierStartChar('_');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("Cx!$Ko");
      XPathLexer xPathLexer1 = new XPathLexer("Cx!$Ko");
      xPathLexer0.rightBracket();
      xPathLexer0.nextToken();
      Token token0 = xPathLexer0.star();
      token0.toString();
      XPathLexer xPathLexer2 = null;
      try {
        xPathLexer2 = new XPathLexer((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("D kUH#pDFtred<Avh.");
      Token token0 = xPathLexer0.notEquals();
      assertEquals("D ", token0.getTokenText());
      assertEquals(22, token0.getTokenType());
      
      xPathLexer0.isIdentifierStartChar('G');
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.relationalOperator();
      Token token1 = xPathLexer0.doubleColon();
      assertEquals("kU", token1.getTokenText());
      assertEquals(19, token1.getTokenType());
      
      Token token2 = xPathLexer1.whitespace();
      assertEquals((-2), token2.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer("D kUH#pDFtred<Avh.");
      Token token3 = xPathLexer0.nextToken();
      assertEquals("H", token3.getTokenText());
      assertEquals(15, token3.getTokenType());
      
      Token token4 = xPathLexer2.dollar();
      assertEquals(26, token4.getTokenType());
      assertEquals("D", token4.getTokenText());
      
      Token token5 = xPathLexer0.equals();
      assertEquals("#", token5.getTokenText());
      assertEquals(21, token5.getTokenType());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.pipe();
      xPathLexer0.setXPath("g:G Vh");
      xPathLexer0.nextToken();
      // Undeclared exception!
      try { 
        token0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("]^lp/<C$4");
      xPathLexer0.or();
      xPathLexer0.rightBracket();
      xPathLexer0.mod();
      Token token0 = xPathLexer0.rightBracket();
      assertEquals("^", token0.getTokenText());
      assertEquals(4, token0.getTokenType());
      
      Token token1 = xPathLexer0.comma();
      assertEquals("l", token1.getTokenText());
      assertEquals(32, token1.getTokenType());
      
      Token token2 = xPathLexer0.nextToken();
      assertEquals("p", token2.getTokenText());
      assertEquals(15, token2.getTokenType());
      
      xPathLexer0.currentPosition();
      Token token3 = xPathLexer0.nextToken();
      assertEquals(11, token3.getTokenType());
      assertEquals("/", token3.getTokenText());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("fL\"uAfNh");
      Token token0 = xPathLexer0.rightBracket();
      assertEquals(4, token0.getTokenType());
      assertEquals("f", token0.getTokenText());
      
      Token token1 = xPathLexer0.doubleColon();
      assertEquals(19, token1.getTokenType());
      assertEquals("L\"", token1.getTokenText());
      
      Token token2 = xPathLexer0.nextToken();
      assertEquals("uAfNh", token2.getTokenText());
      assertEquals(15, token2.getTokenType());
      
      Token token3 = xPathLexer0.leftBracket();
      assertEquals(3, token3.getTokenType());
      
      xPathLexer0.isIdentifierStartChar('u');
      Token token4 = xPathLexer0.identifierOrOperatorName();
      assertNull(token4);
      
      xPathLexer0.and();
      xPathLexer0.leftParen();
      Token token5 = xPathLexer0.whitespace();
      assertEquals((-2), token5.getTokenType());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(":9");
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token0 = xPathLexer1.dollar();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.minus();
      Token token1 = xPathLexer0.nextToken();
      token1.toString();
      xPathLexer0.endPosition();
      // Undeclared exception!
      try { 
        token0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.nextToken();
      assertEquals((-1), token0.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer("{@a,O#RD^Hr/");
      Token token1 = xPathLexer1.nextToken();
      assertEquals("{@a,O#RD^Hr/", token1.getTokenText());
      
      XPathLexer xPathLexer2 = new XPathLexer();
      Token token2 = xPathLexer0.doubleColon();
      assertEquals(19, token2.getTokenType());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.dollar();
      assertEquals(26, token0.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      XPathLexer xPathLexer2 = new XPathLexer();
      XPathLexer xPathLexer3 = new XPathLexer("kH~sQ\"N}F_[S");
      Token token1 = xPathLexer3.nextToken();
      assertEquals(15, token1.getTokenType());
      assertEquals("kH", token1.getTokenText());
      
      xPathLexer2.currentPosition();
      xPathLexer1.and();
      XPathLexer xPathLexer4 = new XPathLexer();
      XPathLexer xPathLexer5 = new XPathLexer();
      xPathLexer2.and();
      XPathLexer xPathLexer6 = new XPathLexer();
      XPathLexer xPathLexer7 = new XPathLexer();
      boolean boolean0 = xPathLexer7.isIdentifierStartChar('\\');
      assertFalse(boolean0);
      
      xPathLexer0.equals();
      Token token2 = xPathLexer5.slashes();
      assertEquals(11, token2.getTokenType());
      
      Token token3 = xPathLexer3.equals();
      assertEquals(21, token3.getTokenType());
      assertEquals("~", token3.getTokenText());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("z6`%z]`n>fhh}V3iTy");
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer0.div();
      Token token0 = xPathLexer0.not();
      assertEquals(23, token0.getTokenType());
      assertEquals("z", token0.getTokenText());
      
      xPathLexer1.getPreviousToken();
      xPathLexer0.mod();
      XPathLexer xPathLexer2 = new XPathLexer("z6`%z]`n>fhh}V3iTy");
      xPathLexer1.setXPath("");
      Token token1 = xPathLexer1.leftParen();
      assertEquals(1, token1.getTokenType());
      
      xPathLexer0.relationalOperator();
      Token token2 = xPathLexer0.nextToken();
      assertEquals(30, token2.getTokenType());
      assertEquals("6", token2.getTokenText());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.relationalOperator();
      Token token0 = xPathLexer0.leftBracket();
      assertEquals(3, token0.getTokenType());
      
      xPathLexer0.mod();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.setXPath("_yS!PQcoHH83$Fm");
      Token token1 = xPathLexer0.equals();
      assertEquals("_", token1.getTokenText());
      assertEquals(21, token1.getTokenType());
      
      xPathLexer0.operatorName();
      Token token2 = xPathLexer0.nextToken();
      assertEquals(15, token2.getTokenType());
      assertEquals("yS", token2.getTokenText());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(") (");
      Token token0 = xPathLexer0.nextToken();
      assertEquals(")", token0.getTokenText());
      assertEquals(2, token0.getTokenType());
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals("(", token1.getTokenText());
      
      xPathLexer0.getXPath();
      Token token2 = xPathLexer0.identifierOrOperatorName();
      assertNotNull(token2);
      assertEquals(15, token2.getTokenType());
      assertEquals("", token2.getTokenText());
      
      boolean boolean0 = xPathLexer0.isIdentifierStartChar('Z');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("2$Cf&n.3mzTVz(");
      xPathLexer0.minus();
      xPathLexer0.nextToken();
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token0 = xPathLexer1.identifierOrOperatorName();
      xPathLexer1.nextToken();
      xPathLexer0.and();
      // Undeclared exception!
      try { 
        token0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.whitespace();
      assertEquals((-2), token0.getTokenType());
      
      Token token1 = xPathLexer0.leftBracket();
      assertEquals(3, token1.getTokenType());
      
      Token token2 = xPathLexer0.colon();
      assertEquals(18, token2.getTokenType());
      
      xPathLexer0.setXPath("K0$l5mi==0$0");
      xPathLexer0.div();
      xPathLexer0.or();
      Token token3 = xPathLexer0.number();
      assertEquals(30, token3.getTokenType());
      
      Token token4 = xPathLexer0.star();
      assertEquals(20, token4.getTokenType());
      assertEquals("K", token4.getTokenText());
      
      xPathLexer0.isIdentifierChar('-');
      Token token5 = xPathLexer0.doubleColon();
      assertEquals("0$", token5.getTokenText());
      
      Token token6 = xPathLexer0.comma();
      assertEquals(32, token6.getTokenType());
      assertEquals("l", token6.getTokenText());
      
      Token token7 = xPathLexer0.rightParen();
      assertEquals(2, token7.getTokenType());
      assertEquals("5", token7.getTokenText());
      
      Token token8 = xPathLexer0.slashes();
      assertEquals(11, token8.getTokenType());
      assertEquals("m", token8.getTokenText());
      
      xPathLexer0.getXPath();
      xPathLexer0.and();
      xPathLexer0.relationalOperator();
      Token token9 = xPathLexer0.nextToken();
      assertEquals(15, token9.getTokenType());
      
      xPathLexer0.LA(98);
      Token token10 = xPathLexer0.equals();
      assertEquals(21, token10.getTokenType());
      
      Token token11 = xPathLexer0.doubleColon();
      assertEquals(19, token11.getTokenType());
      assertEquals("=0", token11.getTokenText());
      
      xPathLexer0.endPosition();
      xPathLexer0.isIdentifierChar('\uFFFF');
      boolean boolean0 = xPathLexer0.hasMoreChars();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("Cx!$Ko");
      XPathLexer xPathLexer1 = new XPathLexer("Cx!$Ko");
      xPathLexer0.nextToken();
      Token token0 = xPathLexer0.star();
      token0.toString();
      XPathLexer xPathLexer2 = null;
      try {
        xPathLexer2 = new XPathLexer((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("q>R<@ScM3-");
      Token token0 = xPathLexer0.rightParen();
      token0.toString();
      xPathLexer0.nextToken();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.leftBracket();
      Token token1 = xPathLexer0.nextToken();
      xPathLexer1.plus();
      token1.toString();
      token0.toString();
      Token token2 = xPathLexer1.equals();
      // Undeclared exception!
      try { 
        token2.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("1IN@%E; oEwx1AOa");
      xPathLexer0.operatorName();
      Token token0 = xPathLexer0.minus();
      assertEquals("1", token0.getTokenText());
      assertEquals(6, token0.getTokenType());
      
      Token token1 = xPathLexer0.not();
      assertEquals("I", token1.getTokenText());
      assertEquals(23, token1.getTokenType());
      
      Token token2 = xPathLexer0.nextToken();
      assertEquals("N", token2.getTokenText());
      assertEquals(15, token2.getTokenType());
      
      Token token3 = xPathLexer0.comma();
      assertEquals(32, token3.getTokenType());
      assertEquals("@", token3.getTokenText());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("GE");
      xPathLexer0.dots();
      xPathLexer0.nextToken();
      xPathLexer0.colon();
      xPathLexer0.minus();
      xPathLexer0.mod();
      xPathLexer0.rightBracket();
      xPathLexer0.slashes();
      xPathLexer0.at();
      xPathLexer0.leftBracket();
      // Undeclared exception!
      try { 
        xPathLexer0.LA((-4386));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("d`|");
      xPathLexer0.leftParen();
      xPathLexer0.whitespace();
      xPathLexer0.nextToken();
      xPathLexer0.at();
      xPathLexer0.setXPath("");
      xPathLexer0.identifierOrOperatorName();
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token0 = xPathLexer1.relationalOperator();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("9D");
      xPathLexer0.currentPosition();
      XPathLexer xPathLexer1 = new XPathLexer("9D");
      xPathLexer1.leftBracket();
      xPathLexer1.nextToken();
      String string0 = null;
      // Undeclared exception!
      try { 
        xPathLexer0.setXPath((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("E d^,z");
      Token token0 = xPathLexer0.not();
      assertEquals("E", token0.getTokenText());
      assertEquals(23, token0.getTokenType());
      
      Token token1 = xPathLexer0.rightParen();
      assertEquals(" ", token1.getTokenText());
      assertEquals(2, token1.getTokenType());
      
      Token token2 = xPathLexer0.minus();
      assertEquals("d", token2.getTokenText());
      assertEquals(6, token2.getTokenType());
      
      xPathLexer0.operatorName();
      Token token3 = xPathLexer0.rightBracket();
      assertEquals("^", token3.getTokenText());
      assertEquals(4, token3.getTokenType());
      
      Token token4 = xPathLexer0.nextToken();
      assertEquals(32, token4.getTokenType());
      assertEquals(",", token4.getTokenText());
      
      Token token5 = xPathLexer0.identifierOrOperatorName();
      assertEquals("z", token5.getTokenText());
      assertEquals(15, token5.getTokenType());
      
      Token token6 = xPathLexer0.dots();
      assertEquals(13, token6.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer("uZ_A9/)O?");
      xPathLexer1.relationalOperator();
      Token token7 = xPathLexer0.nextToken();
      assertEquals((-1), token7.getTokenType());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("_ShW0+ZQfwb\"");
      xPathLexer0.minus();
      xPathLexer0.notEquals();
      xPathLexer0.dollar();
      xPathLexer0.nextToken();
      Token token0 = xPathLexer0.identifierOrOperatorName();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("Tr/2");
      xPathLexer0.number();
      xPathLexer0.mod();
      boolean boolean0 = xPathLexer0.isIdentifierChar('[');
      assertFalse(boolean0);
      
      Token token0 = xPathLexer0.nextToken();
      assertEquals(15, token0.getTokenType());
      assertEquals("Tr", token0.getTokenText());
      
      Token token1 = xPathLexer0.literal();
      assertNull(token1);
      
      xPathLexer0.literal();
      Token token2 = xPathLexer0.comma();
      assertEquals(32, token2.getTokenType());
      
      Token token3 = xPathLexer0.number();
      assertEquals(30, token3.getTokenType());
      
      boolean boolean1 = xPathLexer0.hasMoreChars();
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("_ShW0+ZQfwb\"");
      Token token0 = xPathLexer0.notEquals();
      assertEquals("_S", token0.getTokenText());
      assertEquals(22, token0.getTokenType());
      
      Token token1 = xPathLexer0.dollar();
      assertEquals(26, token1.getTokenType());
      assertEquals("h", token1.getTokenText());
      
      Token token2 = xPathLexer0.nextToken();
      assertEquals(15, token2.getTokenType());
      assertEquals("W0", token2.getTokenText());
      
      Token token3 = xPathLexer0.doubleColon();
      assertEquals(19, token3.getTokenType());
      assertEquals("+Z", token3.getTokenText());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("^!>");
      xPathLexer0.dollar();
      xPathLexer0.minus();
      xPathLexer0.nextToken();
      Token token0 = xPathLexer0.identifierOrOperatorName();
      token0.toString();
      Token token1 = xPathLexer0.or();
      assertNull(token1);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("o$S =/A9A1R");
      xPathLexer0.star();
      Token token0 = xPathLexer0.nextToken();
      Token token1 = xPathLexer0.leftBracket();
      token0.toString();
      xPathLexer0.nextToken();
      XPathLexer xPathLexer1 = new XPathLexer("");
      Token token2 = xPathLexer1.plus();
      token1.toString();
      // Undeclared exception!
      try { 
        token2.toString();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("");
      xPathLexer0.relationalOperator();
      XPathLexer xPathLexer1 = new XPathLexer("");
      XPathLexer xPathLexer2 = new XPathLexer("&IsWy`d06_9%P");
      Token token0 = xPathLexer2.whitespace();
      assertEquals((-2), token0.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer("&IsWy`d06_9%P");
      xPathLexer0.or();
      XPathLexer xPathLexer4 = new XPathLexer("OP=m? ;c &cJ|aorIf=");
      Token token1 = xPathLexer4.nextToken();
      assertEquals(15, token1.getTokenType());
      
      Token token2 = xPathLexer0.dollar();
      assertEquals(26, token2.getTokenType());
      
      Token token3 = xPathLexer4.equals();
      assertEquals(21, token3.getTokenType());
      assertEquals("=", token3.getTokenText());
      
      xPathLexer1.hasMoreChars();
      Token token4 = xPathLexer2.comma();
      assertEquals(32, token4.getTokenType());
      assertEquals("I", token4.getTokenText());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.whitespace();
      XPathLexer xPathLexer1 = new XPathLexer("1L4.5=|f=?w");
      xPathLexer1.identifier();
      xPathLexer0.equals();
      Token token0 = xPathLexer1.dots();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer1.setPreviousToken(token0);
      xPathLexer1.equals();
      xPathLexer2.not();
      // Undeclared exception!
      try { 
        xPathLexer0.setXPath((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("#HYvd]*");
      Token token0 = xPathLexer0.identifier();
      assertEquals(15, token0.getTokenType());
      
      Token token1 = xPathLexer0.dots();
      assertEquals(13, token1.getTokenType());
      assertEquals("#", token1.getTokenText());
      
      Token token2 = xPathLexer0.rightParen();
      assertEquals("H", token2.getTokenText());
      assertEquals(2, token2.getTokenType());
      
      Token token3 = xPathLexer0.notEquals();
      assertEquals("Yv", token3.getTokenText());
      assertEquals(22, token3.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token4 = xPathLexer1.number();
      assertEquals(30, token4.getTokenType());
      
      Token token5 = xPathLexer0.whitespace();
      assertEquals((-2), token5.getTokenType());
      
      xPathLexer0.mod();
      Token token6 = xPathLexer1.nextToken();
      assertEquals((-1), token6.getTokenType());
      
      Token token7 = xPathLexer0.at();
      assertEquals("]", token7.getTokenText());
      assertEquals(16, token7.getTokenType());
      
      xPathLexer1.setXPath("#HYvd]*");
      xPathLexer0.relationalOperator();
      Token token8 = xPathLexer0.nextToken();
      assertEquals(20, token8.getTokenType());
      assertEquals("*", token8.getTokenText());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("_ShW0+ZQfwb\"");
      Token token0 = xPathLexer0.notEquals();
      assertEquals(22, token0.getTokenType());
      assertEquals("_S", token0.getTokenText());
      
      xPathLexer0.relationalOperator();
      Token token1 = xPathLexer0.nextToken();
      assertEquals("hW0", token1.getTokenText());
      
      Token token2 = xPathLexer0.identifier();
      assertEquals(15, token2.getTokenType());
      
      xPathLexer0.currentPosition();
      Token token3 = xPathLexer0.minus();
      assertEquals(6, token3.getTokenType());
      assertEquals("+", token3.getTokenText());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.identifier();
      Token token0 = xPathLexer0.notEquals();
      assertEquals(22, token0.getTokenType());
      
      Token token1 = xPathLexer0.leftBracket();
      assertEquals(3, token1.getTokenType());
      
      xPathLexer0.div();
      xPathLexer0.consume();
      Token token2 = xPathLexer0.slashes();
      assertEquals(11, token2.getTokenType());
      
      xPathLexer0.currentPosition();
      xPathLexer0.or();
      XPathLexer xPathLexer1 = new XPathLexer("Z)Z]}A-F)vh<y6=WF/");
      Token token3 = xPathLexer0.dots();
      assertEquals(13, token3.getTokenType());
      
      xPathLexer0.relationalOperator();
      Token token4 = xPathLexer1.nextToken();
      assertEquals(15, token4.getTokenType());
      assertEquals("Z", token4.getTokenText());
      
      Token token5 = xPathLexer0.pipe();
      assertEquals(17, token5.getTokenType());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("-POwKFA");
      Token token0 = xPathLexer0.dollar();
      assertEquals(26, token0.getTokenType());
      assertEquals("-", token0.getTokenText());
      
      Token token1 = xPathLexer0.doubleColon();
      assertEquals(19, token1.getTokenType());
      
      Token token2 = xPathLexer0.notEquals();
      assertEquals("wK", token2.getTokenText());
      assertEquals(22, token2.getTokenType());
      
      Token token3 = xPathLexer0.equals();
      assertEquals("F", token3.getTokenText());
      assertEquals(21, token3.getTokenType());
      
      Token token4 = xPathLexer0.nextToken();
      assertEquals(15, token4.getTokenType());
      assertEquals("A", token4.getTokenText());
      
      Token token5 = xPathLexer0.dots();
      assertEquals(13, token5.getTokenType());
      
      xPathLexer0.mod();
      xPathLexer0.isIdentifierStartChar('P');
      Token token6 = xPathLexer0.star();
      assertEquals(20, token6.getTokenType());
      
      Token token7 = xPathLexer0.leftParen();
      assertEquals(1, token7.getTokenType());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("XR");
      xPathLexer0.nextToken();
      xPathLexer0.or();
      Token token0 = xPathLexer0.minus();
      // Undeclared exception!
      try { 
        token0.toString();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("D kUH#pDFtred<Avh.");
      xPathLexer0.or();
      xPathLexer0.operatorName();
      xPathLexer0.consume();
      Token token0 = xPathLexer0.notEquals();
      assertEquals(" k", token0.getTokenText());
      assertEquals(22, token0.getTokenType());
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals(15, token1.getTokenType());
      assertEquals("UH", token1.getTokenText());
      
      xPathLexer0.mod();
      xPathLexer0.nextToken();
      Token token2 = xPathLexer0.leftBracket();
      assertEquals(3, token2.getTokenType());
      
      xPathLexer0.div();
      Token token3 = xPathLexer0.plus();
      assertEquals(5, token3.getTokenType());
      assertEquals("p", token3.getTokenText());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(":9");
      XPathLexer xPathLexer1 = new XPathLexer("Xo\"lao7$61Vp\"");
      xPathLexer0.rightParen();
      xPathLexer0.nextToken();
      Token token0 = xPathLexer0.doubleColon();
      // Undeclared exception!
      try { 
        token0.toString();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("^!>");
      Token token0 = xPathLexer0.minus();
      xPathLexer0.equals();
      xPathLexer0.nextToken();
      token0.toString();
      xPathLexer0.not();
      Token token1 = xPathLexer0.equals();
      xPathLexer0.equals();
      xPathLexer0.setPreviousToken(token1);
      xPathLexer0.div();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.operatorName();
      XPathLexer xPathLexer2 = new XPathLexer();
      XPathLexer xPathLexer3 = new XPathLexer("J&U/0-npef{ploGJ^_M");
      xPathLexer0.leftBracket();
      XPathLexer xPathLexer4 = new XPathLexer();
      xPathLexer3.nextToken();
      XPathLexer xPathLexer5 = new XPathLexer();
      XPathLexer xPathLexer6 = null;
      try {
        xPathLexer6 = new XPathLexer((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("^!>");
      xPathLexer0.pipe();
      xPathLexer0.nextToken();
      xPathLexer0.at();
      xPathLexer0.nextToken();
      XPathLexer xPathLexer1 = new XPathLexer("=1|QQu\">f");
      xPathLexer1.or();
      XPathLexer xPathLexer2 = new XPathLexer();
      XPathLexer xPathLexer3 = new XPathLexer("");
      XPathLexer xPathLexer4 = new XPathLexer();
      xPathLexer2.setXPath("v*I(p.R*8XS");
      xPathLexer2.nextToken();
      Token token0 = xPathLexer4.nextToken();
      // Undeclared exception!
      try { 
        token0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      String string0 = "enA";
      XPathLexer xPathLexer0 = new XPathLexer("enA");
      XPathLexer xPathLexer1 = new XPathLexer("enA");
      XPathLexer xPathLexer2 = new XPathLexer();
      Token token0 = xPathLexer2.pipe();
      xPathLexer1.nextToken();
      xPathLexer2.identifierOrOperatorName();
      // Undeclared exception!
      try { 
        token0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("1IN@%E; oEwx1AOa");
      xPathLexer0.div();
      xPathLexer0.mod();
      xPathLexer0.operatorName();
      xPathLexer0.relationalOperator();
      Token token0 = xPathLexer0.not();
      assertEquals(23, token0.getTokenType());
      assertEquals("1", token0.getTokenText());
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals("IN", token1.getTokenText());
      assertEquals(15, token1.getTokenType());
      
      Token token2 = xPathLexer0.comma();
      assertEquals(32, token2.getTokenType());
      assertEquals("@", token2.getTokenText());
      
      Token token3 = xPathLexer0.star();
      assertEquals("%", token3.getTokenText());
      assertEquals(20, token3.getTokenType());
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.rightParen();
      XPathLexer xPathLexer1 = new XPathLexer("GbkSV?]A#IF+");
      xPathLexer1.minus();
      Token token1 = xPathLexer0.whitespace();
      xPathLexer0.setPreviousToken(token0);
      xPathLexer1.pipe();
      xPathLexer0.notEquals();
      xPathLexer1.not();
      xPathLexer1.relationalOperator();
      xPathLexer1.colon();
      xPathLexer0.nextToken();
      xPathLexer0.isIdentifierStartChar('W');
      xPathLexer1.nextToken();
      xPathLexer0.rightBracket();
      xPathLexer0.relationalOperator();
      // Undeclared exception!
      try { 
        token1.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("2$Cf&n.3mzTVz(");
      xPathLexer0.nextToken();
      xPathLexer0.at();
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token0 = xPathLexer1.nextToken();
      XPathLexer xPathLexer2 = new XPathLexer("");
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer3.or();
      XPathLexer xPathLexer4 = new XPathLexer();
      XPathLexer xPathLexer5 = new XPathLexer("2$Cf&n.3mzTVz(");
      XPathLexer xPathLexer6 = new XPathLexer();
      String string0 = "\\_5) W.o1ndbIr^";
      xPathLexer4.setXPath("_5) W.o1ndbIr^");
      xPathLexer2.nextToken();
      xPathLexer4.nextToken();
      // Undeclared exception!
      try { 
        token0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("1IN@%E; oEwx1AOa");
      xPathLexer0.operatorName();
      Token token0 = xPathLexer0.number();
      assertEquals(30, token0.getTokenType());
      assertEquals("1", token0.getTokenText());
      
      Token token1 = xPathLexer0.minus();
      assertEquals(6, token1.getTokenType());
      assertEquals("I", token1.getTokenText());
      
      Token token2 = xPathLexer0.not();
      assertEquals(23, token2.getTokenType());
      assertEquals("N", token2.getTokenText());
      
      Token token3 = xPathLexer0.nextToken();
      assertEquals(16, token3.getTokenType());
      assertEquals("@", token3.getTokenText());
      
      Token token4 = xPathLexer0.comma();
      assertEquals(32, token4.getTokenType());
      assertEquals("%", token4.getTokenText());
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("2QCf&n.3mzTVz(");
      Token token0 = xPathLexer0.comma();
      Token token1 = xPathLexer0.leftParen();
      assertEquals(1, token1.getTokenType());
      assertEquals("Q", token1.getTokenText());
      
      Token token2 = xPathLexer0.slashes();
      String string0 = token2.toString();
      assertEquals("[ (11) (C)", string0);
      
      xPathLexer0.and();
      Token token3 = xPathLexer0.plus();
      assertEquals(5, token3.getTokenType());
      assertEquals("f", token3.getTokenText());
      
      Token token4 = xPathLexer0.notEquals();
      assertEquals(22, token4.getTokenType());
      
      Token token5 = xPathLexer0.number();
      assertEquals(".3", token5.getTokenText());
      assertEquals(31, token5.getTokenType());
      
      xPathLexer0.mod();
      XPathLexer xPathLexer1 = new XPathLexer("");
      String string1 = token0.toString();
      assertEquals("[ (32) (2)", string1);
      
      boolean boolean0 = xPathLexer0.hasMoreChars();
      assertTrue(boolean0);
      
      Token token6 = xPathLexer1.equals();
      assertEquals(21, token6.getTokenType());
      
      Token token7 = xPathLexer0.minus();
      assertEquals("m", token7.getTokenText());
      assertEquals(6, token7.getTokenType());
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      String string0 = "z6`%z]`n>fhh}V3iTy";
      XPathLexer xPathLexer0 = new XPathLexer("z6`%z]`n>fhh}V3iTy");
      Token token0 = xPathLexer0.star();
      token0.toString();
      token0.toString();
      xPathLexer0.minus();
      xPathLexer0.rightBracket();
      xPathLexer0.setPreviousToken(token0);
      xPathLexer0.pipe();
      xPathLexer0.not();
      xPathLexer0.not();
      xPathLexer0.relationalOperator();
      xPathLexer0.colon();
      xPathLexer0.nextToken();
      // Undeclared exception!
      try { 
        xPathLexer0.setXPath((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.slashes();
      xPathLexer0.at();
      String string0 = "g:G Vh";
      xPathLexer0.setXPath("g:G Vh");
      Token token1 = xPathLexer0.dots();
      xPathLexer0.whitespace();
      token1.toString();
      token1.toString();
      xPathLexer0.setPreviousToken(token1);
      xPathLexer0.nextToken();
      // Undeclared exception!
      try { 
        token0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.identifierOrOperatorName();
      XPathLexer xPathLexer1 = new XPathLexer("Ao&");
      Token token0 = xPathLexer0.dollar();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer1.minus();
      xPathLexer1.nextToken();
      xPathLexer2.endPosition();
      // Undeclared exception!
      try { 
        token0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.star();
      xPathLexer0.minus();
      xPathLexer0.whitespace();
      xPathLexer0.dots();
      xPathLexer0.notEquals();
      xPathLexer0.pipe();
      xPathLexer0.comma();
      xPathLexer0.slashes();
      XPathLexer xPathLexer1 = new XPathLexer("W!$Ko");
      xPathLexer1.currentPosition();
      xPathLexer0.consume(0);
      xPathLexer0.consume();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.setXPath("_E&f.UQ=%t");
      XPathLexer xPathLexer3 = new XPathLexer("cO][(:L 7/7");
      xPathLexer1.leftParen();
      XPathLexer xPathLexer4 = new XPathLexer();
      Token token0 = new Token(0, "cO][(:L 7/7", 0, 0);
      xPathLexer2.nextToken();
      XPathLexer xPathLexer5 = new XPathLexer("WJ^8.@xRkbCs/hk");
      xPathLexer0.mod();
      XPathLexer xPathLexer6 = new XPathLexer("");
      xPathLexer4.rightBracket();
      xPathLexer5.consume();
      assertNotSame(xPathLexer5, xPathLexer6);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(":&b$OiAhSuuk3\"j");
      xPathLexer0.pipe();
      xPathLexer0.nextToken();
      xPathLexer0.consume();
      xPathLexer0.nextToken();
      xPathLexer0.leftBracket();
      XPathLexer xPathLexer1 = new XPathLexer(":&b$OiAhSuuk3\"j");
      xPathLexer0.or();
      XPathLexer xPathLexer2 = new XPathLexer();
      XPathLexer xPathLexer3 = null;
      try {
        xPathLexer3 = new XPathLexer((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("q>R<@ScM3-");
      Token token0 = xPathLexer0.rightParen();
      assertEquals("q", token0.getTokenText());
      assertEquals(2, token0.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer("q>R<@ScM3-");
      Token token1 = xPathLexer0.minus();
      assertEquals(6, token1.getTokenType());
      assertEquals(">", token1.getTokenText());
      
      Token token2 = xPathLexer1.nextToken();
      assertEquals(15, token2.getTokenType());
      
      Token token3 = xPathLexer1.identifierOrOperatorName();
      assertNull(token3);
      
      Token token4 = xPathLexer1.dots();
      assertEquals(13, token4.getTokenType());
      assertEquals(">", token4.getTokenText());
      
      Token token5 = xPathLexer0.notEquals();
      assertEquals(22, token5.getTokenType());
      assertEquals("R<", token5.getTokenText());
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.setXPath("Egp1*r8|");
      Token token0 = xPathLexer0.dots();
      xPathLexer0.plus();
      token0.toString();
      token0.toString();
      xPathLexer0.colon();
      xPathLexer0.notEquals();
      xPathLexer0.nextToken();
      xPathLexer0.nextToken();
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token1 = xPathLexer0.dollar();
      xPathLexer0.leftParen();
      // Undeclared exception!
      try { 
        token1.toString();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("q>R<@ScM3-");
      Token token0 = xPathLexer0.rightParen();
      Token token1 = xPathLexer0.nextToken();
      token0.toString();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer0.setPreviousToken(token1);
      Token token2 = xPathLexer0.notEquals();
      token2.toString();
      token1.toString();
      xPathLexer0.consume();
      xPathLexer0.consume();
      token1.toString();
      xPathLexer0.nextToken();
      xPathLexer0.identifierOrOperatorName();
      XPathLexer xPathLexer2 = new XPathLexer();
      XPathLexer xPathLexer3 = new XPathLexer();
      XPathLexer xPathLexer4 = new XPathLexer();
      xPathLexer3.equals();
      XPathLexer xPathLexer5 = new XPathLexer();
      xPathLexer2.relationalOperator();
      xPathLexer1.setPreviousToken(token2);
      xPathLexer2.relationalOperator();
      xPathLexer1.identifierOrOperatorName();
      xPathLexer2.slashes();
      XPathLexer xPathLexer6 = new XPathLexer();
      XPathLexer xPathLexer7 = new XPathLexer();
      xPathLexer3.colon();
      XPathLexer xPathLexer8 = new XPathLexer();
      XPathLexer xPathLexer9 = new XPathLexer();
      xPathLexer9.rightBracket();
      xPathLexer7.colon();
      Token token3 = xPathLexer7.star();
      // Undeclared exception!
      try { 
        token3.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("*kHs{Nb");
      xPathLexer0.identifier();
      xPathLexer0.mod();
      xPathLexer0.dollar();
      xPathLexer0.dots();
      xPathLexer0.rightParen();
      xPathLexer0.mod();
      xPathLexer0.nextToken();
      Token token0 = xPathLexer0.div();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(";$N~Yq6,");
      xPathLexer0.leftParen();
      xPathLexer0.consume();
      xPathLexer0.leftBracket();
      xPathLexer0.nextToken();
      xPathLexer0.minus();
      xPathLexer0.nextToken();
      xPathLexer0.not();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.identifierOrOperatorName();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer0.rightParen();
      String string0 = "";
      XPathLexer xPathLexer2 = new XPathLexer("");
      xPathLexer2.colon();
      xPathLexer0.identifierOrOperatorName();
      String string1 = null;
      XPathLexer xPathLexer3 = null;
      try {
        xPathLexer3 = new XPathLexer((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("CHd60");
      xPathLexer0.star();
      xPathLexer0.colon();
      xPathLexer0.rightBracket();
      Token token0 = xPathLexer0.comma();
      token0.toString();
      xPathLexer0.setPreviousToken(token0);
      xPathLexer0.equals();
      xPathLexer0.rightParen();
      xPathLexer0.setXPath("[ (");
      xPathLexer0.currentPosition();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.and();
      Token token1 = xPathLexer0.mod();
      assertNull(token1);
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(":9");
      XPathLexer xPathLexer1 = new XPathLexer(":9");
      XPathLexer xPathLexer2 = new XPathLexer();
      Token token0 = xPathLexer2.minus();
      assertEquals(6, token0.getTokenType());
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals(18, token1.getTokenType());
      assertEquals(":", token1.getTokenText());
      
      Token token2 = xPathLexer0.identifierOrOperatorName();
      Token token3 = xPathLexer0.nextToken();
      assertEquals((-1), token3.getTokenType());
      
      xPathLexer2.and();
      String string0 = token2.toString();
      assertEquals("[ (15) (9)", string0);
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("q>R<@ScM3-");
      Token token0 = xPathLexer0.rightParen();
      Token token1 = xPathLexer0.nextToken();
      token1.toString();
      xPathLexer0.equals();
      xPathLexer0.nextToken();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.dots();
      token0.toString();
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token2 = xPathLexer1.number();
      xPathLexer1.equals();
      token0.toString();
      xPathLexer0.equals();
      // Undeclared exception!
      try { 
        token2.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(";");
      xPathLexer0.nextToken();
      xPathLexer0.operatorName();
      Token token0 = xPathLexer0.plus();
      assertEquals(";", token0.getTokenText());
      assertEquals(5, token0.getTokenType());
      
      Token token1 = xPathLexer0.getPreviousToken();
      assertEquals((-1), token1.getTokenType());
      
      Token token2 = xPathLexer0.minus();
      assertEquals(6, token2.getTokenType());
      
      Token token3 = xPathLexer0.leftBracket();
      assertEquals(3, token3.getTokenType());
      
      Token token4 = xPathLexer0.dots();
      assertEquals(13, token4.getTokenType());
      
      xPathLexer0.div();
      Token token5 = xPathLexer0.rightBracket();
      assertEquals(4, token5.getTokenType());
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("8l/ti-EH1");
      xPathLexer0.minus();
      Token token0 = xPathLexer0.equals();
      xPathLexer0.nextToken();
      token0.toString();
      xPathLexer0.not();
      xPathLexer0.equals();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.literal();
      Token token1 = xPathLexer0.rightBracket();
      // Undeclared exception!
      try { 
        token1.toString();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("]^lp/<C$4");
      xPathLexer0.or();
      Token token0 = xPathLexer0.rightBracket();
      assertEquals(4, token0.getTokenType());
      assertEquals("]", token0.getTokenText());
      
      xPathLexer0.mod();
      Token token1 = xPathLexer0.comma();
      assertEquals("^", token1.getTokenText());
      
      Token token2 = xPathLexer0.nextToken();
      assertEquals("lp", token2.getTokenText());
      assertEquals(15, token2.getTokenType());
      
      int int0 = xPathLexer0.currentPosition();
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("1IN@%E; oEwx1AOa");
      Token token0 = xPathLexer0.nextToken();
      assertEquals(30, token0.getTokenType());
      assertEquals("1", token0.getTokenText());
      
      Token token1 = xPathLexer0.whitespace();
      assertEquals((-2), token1.getTokenType());
      assertEquals("", token1.getTokenText());
      
      Token token2 = xPathLexer0.plus();
      assertEquals(5, token2.getTokenType());
      assertEquals("N", token2.getTokenText());
      
      xPathLexer0.operatorName();
      xPathLexer0.relationalOperator();
      Token token3 = xPathLexer0.not();
      assertEquals(23, token3.getTokenType());
      assertEquals("@", token3.getTokenText());
      
      xPathLexer0.nextToken();
      xPathLexer0.nextToken();
      Token token4 = xPathLexer0.comma();
      assertEquals("%", token4.getTokenText());
      assertEquals(32, token4.getTokenType());
      
      Token token5 = xPathLexer0.equals();
      assertEquals("E", token5.getTokenText());
      assertEquals(21, token5.getTokenType());
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("2$Cf&n.3mzTVz(");
      Token token0 = xPathLexer0.rightParen();
      Token token1 = xPathLexer0.doubleColon();
      xPathLexer0.equals();
      Token token2 = xPathLexer0.nextToken();
      token0.toString();
      Token token3 = xPathLexer0.not();
      Token token4 = xPathLexer0.equals();
      assertEquals(21, token4.getTokenType());
      assertEquals("n", token4.getTokenText());
      
      xPathLexer0.identifierOrOperatorName();
      Token token5 = xPathLexer0.dollar();
      assertEquals(".", token5.getTokenText());
      assertEquals(26, token5.getTokenType());
      
      String string0 = token3.toString();
      assertEquals("[ (23) (&)", string0);
      
      xPathLexer0.consume();
      String string1 = token2.toString();
      assertEquals("[ (-1) (&n.3mzTVz()", string1);
      
      xPathLexer0.and();
      xPathLexer0.div();
      String string2 = token1.toString();
      assertEquals("[ (19) ($C)", string2);
      
      xPathLexer0.identifierOrOperatorName();
      Token token6 = xPathLexer0.slashes();
      assertEquals("m", token6.getTokenText());
      assertEquals(11, token6.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token7 = xPathLexer1.dots();
      assertEquals(13, token7.getTokenType());
      
      String string3 = token0.toString();
      assertEquals("[ (2) (2)", string3);
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.identifier();
      xPathLexer0.identifier();
      xPathLexer0.notEquals();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.currentPosition();
      xPathLexer0.star();
      xPathLexer0.leftParen();
      Token token0 = xPathLexer1.at();
      xPathLexer1.and();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.div();
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer2.setPreviousToken(token0);
      xPathLexer0.mod();
      xPathLexer0.nextToken();
      xPathLexer3.nextToken();
      XPathLexer xPathLexer4 = new XPathLexer();
      XPathLexer xPathLexer5 = new XPathLexer();
      xPathLexer1.div();
      xPathLexer5.rightBracket();
      xPathLexer2.identifierOrOperatorName();
      XPathLexer xPathLexer6 = new XPathLexer();
      XPathLexer xPathLexer7 = new XPathLexer("dd\"~f&gTMkCG");
      xPathLexer7.literal();
      XPathLexer xPathLexer8 = new XPathLexer();
      XPathLexer xPathLexer9 = new XPathLexer();
      Token token1 = xPathLexer5.at();
      XPathLexer xPathLexer10 = new XPathLexer();
      xPathLexer10.comma();
      // Undeclared exception!
      try { 
        token1.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      String string0 = "2QCf&n.3mTVz(";
      XPathLexer xPathLexer0 = new XPathLexer("2QCf&n.3mTVz(");
      Token token0 = xPathLexer0.star();
      xPathLexer0.whitespace();
      xPathLexer0.setPreviousToken(token0);
      xPathLexer0.slashes();
      xPathLexer0.or();
      xPathLexer0.notEquals();
      xPathLexer0.colon();
      xPathLexer0.nextToken();
      xPathLexer0.rightParen();
      xPathLexer0.isIdentifierStartChar('a');
      xPathLexer0.and();
      xPathLexer0.setXPath("GbkSV?]A#IF+");
      xPathLexer0.setXPath("GbkSV?]A#IF+");
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer0.dots();
      xPathLexer0.nextToken();
      xPathLexer0.setXPath("2QCf&n.3mTVz(");
      xPathLexer0.and();
      xPathLexer0.consume((-147));
      xPathLexer1.div();
      // Undeclared exception!
      try { 
        xPathLexer0.operatorName();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("Cx!$Ko");
      XPathLexer xPathLexer1 = new XPathLexer("Cx!$Ko");
      xPathLexer1.dollar();
      XPathLexer xPathLexer2 = new XPathLexer();
      Token token0 = xPathLexer2.dollar();
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer0.mod();
      Token token1 = xPathLexer0.doubleColon();
      xPathLexer2.nextToken();
      XPathLexer xPathLexer4 = new XPathLexer();
      xPathLexer4.setPreviousToken(token1);
      xPathLexer4.identifierOrOperatorName();
      XPathLexer xPathLexer5 = new XPathLexer();
      XPathLexer xPathLexer6 = new XPathLexer();
      xPathLexer5.dollar();
      // Undeclared exception!
      try { 
        token0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("Pb[P^g>=p");
      xPathLexer0.relationalOperator();
      Token token0 = xPathLexer0.colon();
      assertEquals("P", token0.getTokenText());
      
      Token token1 = xPathLexer0.whitespace();
      assertEquals("", token1.getTokenText());
      assertEquals((-2), token1.getTokenType());
      
      Token token2 = xPathLexer0.nextToken();
      assertEquals(3, token2.getTokenType());
      
      Token token3 = xPathLexer0.at();
      assertEquals(16, token3.getTokenType());
      
      Token token4 = xPathLexer0.minus();
      assertEquals("^", token4.getTokenText());
      
      xPathLexer0.consume();
      Token token5 = xPathLexer0.relationalOperator();
      assertEquals(">=", token5.getTokenText());
      assertEquals(10, token5.getTokenType());
      
      Token token6 = xPathLexer0.pipe();
      assertEquals("p", token6.getTokenText());
      
      xPathLexer0.and();
      Token token7 = xPathLexer0.notEquals();
      assertEquals(22, token7.getTokenType());
      
      Token token8 = xPathLexer0.minus();
      assertEquals(6, token8.getTokenType());
      
      Token token9 = xPathLexer0.not();
      assertEquals(23, token9.getTokenType());
      
      Token token10 = xPathLexer0.pipe();
      assertEquals(17, token10.getTokenType());
      
      xPathLexer0.currentPosition();
      Token token11 = xPathLexer0.doubleColon();
      assertEquals(19, token11.getTokenType());
      
      Token token12 = xPathLexer0.dollar();
      assertEquals(26, token12.getTokenType());
      
      xPathLexer0.consume(14);
      xPathLexer0.consume(14);
      Token token13 = xPathLexer0.rightParen();
      assertEquals(2, token13.getTokenType());
      
      Token token14 = xPathLexer0.equals();
      assertEquals(21, token14.getTokenType());
      
      xPathLexer0.nextToken();
      Token token15 = xPathLexer0.getPreviousToken();
      assertEquals((-1), token15.getTokenType());
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("..G^_M29v#C9M`DPq|");
      XPathLexer xPathLexer1 = new XPathLexer("..G^_M29v#C9M`DPq|");
      xPathLexer1.doubleColon();
      xPathLexer1.dollar();
      Token token0 = xPathLexer0.dots();
      token0.toString();
      xPathLexer0.setPreviousToken(token0);
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.nextToken();
      token0.toString();
      XPathLexer xPathLexer2 = new XPathLexer("..G^_M29v#C9M`DPq|");
      xPathLexer2.setPreviousToken(token0);
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer3.colon();
      Token token1 = xPathLexer3.nextToken();
      token0.toString();
      // Undeclared exception!
      try { 
        token1.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("4898=HF2X(4#irt");
      xPathLexer0.leftParen();
      Token token0 = xPathLexer0.literal();
      token0.toString();
      token0.toString();
      token0.toString();
      token0.toString();
      xPathLexer0.relationalOperator();
      int int0 = xPathLexer0.endPosition();
      token0.toString();
      xPathLexer0.whitespace();
      xPathLexer0.setPreviousToken(token0);
      xPathLexer0.at();
      xPathLexer0.isIdentifierChar(')');
      xPathLexer0.number();
      xPathLexer0.nextToken();
      xPathLexer0.relationalOperator();
      xPathLexer0.isIdentifierChar('^');
      xPathLexer0.rightBracket();
      xPathLexer0.comma();
      xPathLexer0.consume(15);
      xPathLexer0.minus();
      xPathLexer0.notEquals();
      xPathLexer0.consume(15);
      int int1 = xPathLexer0.endPosition();
      assertTrue(int1 == int0);
  }
}
