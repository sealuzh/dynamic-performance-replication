/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 01:34:23 GMT 2018
 */

package org.la4j.vector.sparse;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.text.NumberFormat;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.Random;
import java.util.function.Function;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;
import org.la4j.Matrix;
import org.la4j.Vector;
import org.la4j.matrix.RowMajorSparseMatrix;
import org.la4j.matrix.sparse.CRSMatrix;
import org.la4j.vector.DenseVector;
import org.la4j.vector.SparseVector;
import org.la4j.vector.VectorFactory;
import org.la4j.vector.functor.VectorFunction;
import org.la4j.vector.functor.VectorPredicate;
import org.la4j.vector.functor.VectorProcedure;
import org.la4j.vector.sparse.CompressedVector;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CompressedVector_ESTest extends CompressedVector_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      CompressedVector compressedVector0 = CompressedVector.fromCollection(linkedList0);
      compressedVector0.nonZeroIterator();
      assertEquals(0, compressedVector0.length());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(121, 121);
      VectorFactory<CompressedVector> vectorFactory0 = (VectorFactory<CompressedVector>) mock(VectorFactory.class, new ViolatedAssumptionAnswer());
      doReturn(compressedVector0).when(vectorFactory0).apply(anyInt());
      CompressedVector compressedVector1 = compressedVector0.to(vectorFactory0);
      assertEquals(121, compressedVector1.length());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      CompressedVector compressedVector0 = CompressedVector.fromCollection(linkedList0);
      compressedVector0.iterator();
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector();
      VectorFactory<CompressedVector> vectorFactory0 = (VectorFactory<CompressedVector>) mock(VectorFactory.class, new ViolatedAssumptionAnswer());
      doReturn((Vector) null).when(vectorFactory0).apply(anyInt());
      compressedVector0.to(vectorFactory0);
      // Undeclared exception!
      try { 
        compressedVector0.blankOfLength((-379));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong vector length: -379
         //
         verifyException("org.la4j.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      // Undeclared exception!
      try { 
        CompressedVector.fromMatrixMarket("6isvH|G^|]&=hm34}7");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong input file format: can not read header '%%MatrixMarket'.
         //
         verifyException("org.la4j.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      try { 
        CompressedVector.random(2641, (double) 2641, (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The density value should be between 0 and 1.0
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      CompressedVector compressedVector0 = CompressedVector.fromCollection(linkedList0);
      boolean boolean0 = compressedVector0.nonZeroAt(3);
      assertFalse(boolean0);
      assertEquals(0, compressedVector0.length());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      Byte byte0 = new Byte((byte)121);
      linkedList0.add(byte0);
      CompressedVector compressedVector0 = CompressedVector.fromCollection(linkedList0);
      compressedVector0.nonZeroAt(2146685685);
      assertEquals(1.0, compressedVector0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      assertEquals(0, compressedVector0.length());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(2);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.updateAt(2, vectorFunction0);
      assertEquals(2, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      // Undeclared exception!
      try { 
        CompressedVector.zero(968, 2355);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cardinality should be less then or equal to capacity: 2355.
         //
         verifyException("org.la4j.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector();
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      compressedVector0.eachNonZero(vectorProcedure0);
      assertEquals(0, compressedVector0.length());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector();
      compressedVector0.setAll(2642);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(56, 56);
      compressedVector0.setAll((-1073.51598));
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      CompressedVector compressedVector0 = CompressedVector.fromCollection(linkedList0);
      CompressedVector compressedVector1 = (CompressedVector)compressedVector0.copyOfLength(1917);
      assertEquals(1917, compressedVector1.length());
      assertEquals(0, compressedVector0.length());
      assertEquals(0.0, compressedVector1.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector();
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      compressedVector0.each(vectorProcedure0);
      assertEquals(0, compressedVector0.cardinality());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(0);
      CompressedVector compressedVector0 = CompressedVector.random(0, 0.0, (Random) mockRandom0);
      compressedVector0.swapElements(0, 0);
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      HashMap<Integer, Float> hashMap0 = new HashMap<Integer, Float>();
      CompressedVector compressedVector0 = CompressedVector.fromMap(hashMap0, 553);
      compressedVector0.each(vectorProcedure0);
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(553, compressedVector0.length());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      // Undeclared exception!
      try { 
        CompressedVector.fromBinary(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can not decode CompressedVector from the given byte array.
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-2323.226);
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      // Undeclared exception!
      try { 
        compressedVector0.toCSV((NumberFormat) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      int int0 = 16;
      CompressedVector compressedVector0 = CompressedVector.zero(16);
      HashMap<Integer, Byte> hashMap0 = new HashMap<Integer, Byte>();
      // Undeclared exception!
      try { 
        compressedVector0.toCSV((NumberFormat) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector();
      VectorPredicate vectorPredicate0 = mock(VectorPredicate.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = compressedVector0.is(vectorPredicate0);
      assertTrue(boolean0);
      
      CompressedVector compressedVector1 = (CompressedVector)compressedVector0.copyOfLength(4);
      assertEquals(0.0, compressedVector1.density(), 0.01);
      assertEquals(4, compressedVector1.length());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(1113);
      int int0 = 0;
      compressedVector0.get(0);
      compressedVector0.swapElements(1113, 1113);
      // Undeclared exception!
      try { 
        compressedVector0.set(1113, 1113);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index '1113' is invalid.
         //
         verifyException("org.la4j.vector.SparseVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(2642, 3);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(2690.2096).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.updateAt(2084, vectorFunction0);
      VectorFunction vectorFunction1 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorFunction1).evaluate(anyInt() , anyDouble());
      compressedVector0.updateAt(3, vectorFunction1);
      compressedVector0.swapElements(3, (-4263));
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      CompressedVector compressedVector1 = CompressedVector.fromMap(hashMap0, 660);
      assertEquals(660, compressedVector1.length());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(8, 8);
      assertNotNull(compressedVector0);
      assertEquals(8, compressedVector0.length());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      VectorFunction vectorFunction1 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)8).when(vectorFunction1).evaluate(anyInt() , anyDouble());
      compressedVector0.updateAt(8, vectorFunction1);
      assertEquals(8, compressedVector0.length());
      assertEquals(0.125, compressedVector0.density(), 0.01);
      assertEquals(1, compressedVector0.cardinality());
      
      compressedVector0.swapElements(3, (-4263));
      assertEquals(8, compressedVector0.length());
      assertEquals(0.125, compressedVector0.density(), 0.01);
      assertEquals(1, compressedVector0.cardinality());
      
      boolean boolean0 = compressedVector0.nonZeroAt((-7));
      assertFalse(boolean0);
      assertEquals(8, compressedVector0.length());
      assertEquals(0.125, compressedVector0.density(), 0.01);
      assertEquals(1, compressedVector0.cardinality());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(2647, 3);
      assertNotNull(compressedVector0);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(2647, compressedVector0.length());
      
      compressedVector0.setAll((-1073.51598));
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(2647, compressedVector0.length());
      assertEquals(2647, compressedVector0.cardinality());
      
      compressedVector0.set(2084, 527.82518);
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(2647, compressedVector0.length());
      assertEquals(2647, compressedVector0.cardinality());
      
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      double double0 = compressedVector0.get(1321);
      assertEquals((-1073.51598), double0, 0.01);
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(2647, compressedVector0.length());
      assertEquals(2647, compressedVector0.cardinality());
      
      compressedVector0.swapElements(837, 2084);
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(2647, compressedVector0.length());
      assertEquals(2647, compressedVector0.cardinality());
      
      double double1 = compressedVector0.getOrElse(2084, (-2507.811816068));
      assertEquals((-1073.51598), double1, 0.01);
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(2647, compressedVector0.length());
      assertEquals(2647, compressedVector0.cardinality());
      assertEquals(double1, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      int int0 = 3;
      CompressedVector compressedVector0 = CompressedVector.zero(2642, 3);
      assertNotNull(compressedVector0);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(2642, compressedVector0.length());
      
      double double0 = (-1073.51598);
      compressedVector0.setAll((-1073.51598));
      assertEquals(2642, compressedVector0.cardinality());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(2642, compressedVector0.length());
      
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      VectorFunction vectorFunction1 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorFunction1).evaluate(anyInt() , anyDouble());
      compressedVector0.updateAt(3, vectorFunction1);
      assertEquals(2641, compressedVector0.cardinality());
      assertEquals(2642, compressedVector0.length());
      assertEquals(0.9996214988644966, compressedVector0.density(), 0.01);
      
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      int int1 = (-4263);
      compressedVector0.swapElements((-4263), 2084);
      assertEquals(2641, compressedVector0.cardinality());
      assertEquals(2642, compressedVector0.length());
      assertEquals(0.9996214988644966, compressedVector0.density(), 0.01);
      
      boolean boolean0 = linkedList0.add((Double) null);
      assertTrue(boolean0);
      assertEquals(1, linkedList0.size());
      
      Double double1 = new Double((-1073.51598));
      assertEquals((-1073.51598), (double)double1, 0.01);
      assertNotNull(double1);
      assertEquals((double)double1, (double)double0, 0.01);
      
      linkedList0.addFirst(double1);
      assertEquals(2, linkedList0.size());
      assertEquals((double)double1, (double)double0, 0.01);
      
      VectorFunction vectorFunction2 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      compressedVector0.set(2084, (-170.0));
      assertEquals(2642, compressedVector0.cardinality());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(2642, compressedVector0.length());
      
      // Undeclared exception!
      try { 
        CompressedVector.fromCollection(linkedList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.vector.dense.BasicVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      CompressedVector compressedVector0 = CompressedVector.fromCollection(linkedList0);
      assertNotNull(compressedVector0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
      
      byte[] byteArray0 = compressedVector0.toBinary();
      assertNotNull(byteArray0);
      assertArrayEquals(new byte[] {(byte)16, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      double[] doubleArray0 = new double[11];
      doubleArray0[0] = (-632.695566907);
      CompressedVector compressedVector0 = CompressedVector.zero(2642, 16);
      assertNotNull(compressedVector0);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(2642, compressedVector0.length());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      
      compressedVector0.setAll(0.0);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(2642, compressedVector0.length());
      assertEquals(0.0, compressedVector0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      int int0 = 2642;
      CompressedVector compressedVector0 = CompressedVector.zero(2642, 3);
      assertNotNull(compressedVector0);
      assertEquals(2642, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      
      compressedVector0.setAll((-1073.51598));
      assertEquals(2642, compressedVector0.length());
      assertEquals(2642, compressedVector0.cardinality());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(2690.2096).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.updateAt(2084, vectorFunction0);
      assertEquals(2642, compressedVector0.length());
      assertEquals(2642, compressedVector0.cardinality());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      
      VectorFunction vectorFunction1 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      Vector vector0 = Vector.random(2084, mockRandom0);
      assertNotNull(vector0);
      assertEquals(2084, vector0.length());
      
      double double0 = compressedVector0.infinityNorm();
      assertEquals(2690.2096, double0, 0.01);
      assertEquals(2642, compressedVector0.length());
      assertEquals(2642, compressedVector0.cardinality());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      
      byte[] byteArray0 = compressedVector0.toBinary();
      assertNotNull(byteArray0);
      assertEquals(2642, compressedVector0.length());
      assertEquals(2642, compressedVector0.cardinality());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      
      CompressedVector.fromBinary(byteArray0);
      // Undeclared exception!
      try { 
        SparseVector.fromMatrixMarket("-$7>6HvJMgW5/K[R]]");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong input file format: can not read header '%%MatrixMarket'.
         //
         verifyException("org.la4j.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[1] = (double) 3;
      doubleArray0[1] = (-1501.018147222);
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      assertNotNull(compressedVector0);
      assertArrayEquals(new double[] {0.0, (-1501.018147222)}, doubleArray0, 0.01);
      assertEquals(0.5, compressedVector0.density(), 0.01);
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(2, compressedVector0.length());
      
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)2642, 0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.update(vectorFunction0);
      assertArrayEquals(new double[] {0.0, (-1501.018147222)}, doubleArray0, 0.01);
      assertEquals(0.5, compressedVector0.density(), 0.01);
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(2, compressedVector0.length());
      
      int int0 = 2048;
      int int1 = 3;
      // Undeclared exception!
      try { 
        compressedVector0.sliceRight(186);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong slice range: [186..2].
         //
         verifyException("org.la4j.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      int int0 = 3;
      CompressedVector compressedVector0 = CompressedVector.zero(3, 3);
      assertNotNull(compressedVector0);
      assertEquals(3, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      
      compressedVector0.setAll((-1087.5295912092613));
      assertEquals(3, compressedVector0.length());
      assertEquals(3, compressedVector0.cardinality());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      
      String string0 = compressedVector0.toString();
      assertEquals("-1087.530 -1087.530 -1087.530", string0);
      assertNotNull(string0);
      assertEquals(3, compressedVector0.length());
      assertEquals(3, compressedVector0.cardinality());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(2686.2847096138084).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      // Undeclared exception!
      try { 
        compressedVector0.updateAt(2084, vectorFunction0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // This vector can't grow up.
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(5);
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        CompressedVector.random(5, (-418.3310279), (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The density value should be between 0 and 1.0
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      int int0 = 2;
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 2;
      doubleArray0[1] = (double) 349;
      doubleArray0[2] = (double) 2;
      doubleArray0[3] = (double) 2;
      doubleArray0[4] = (double) 349;
      doubleArray0[5] = 17.0;
      doubleArray0[6] = (double) 2;
      doubleArray0[7] = (double) 349;
      int[] intArray0 = new int[1];
      intArray0[0] = 349;
      CompressedVector compressedVector0 = new CompressedVector(2, 349, doubleArray0, intArray0);
      assertNotNull(compressedVector0);
      assertArrayEquals(new double[] {2.0, 349.0, 2.0, 2.0, 349.0, 17.0, 2.0, 349.0}, doubleArray0, 0.01);
      assertArrayEquals(new int[] {349}, intArray0);
      assertEquals(2, compressedVector0.length());
      assertEquals(349, compressedVector0.cardinality());
      assertEquals(174.5, compressedVector0.density(), 0.01);
      
      VectorPredicate vectorPredicate0 = mock(VectorPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(vectorPredicate0).test(anyInt() , anyDouble());
      boolean boolean0 = compressedVector0.non(vectorPredicate0);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {2.0, 349.0, 2.0, 2.0, 349.0, 17.0, 2.0, 349.0}, doubleArray0, 0.01);
      assertArrayEquals(new int[] {349}, intArray0);
      assertEquals(2, compressedVector0.length());
      assertEquals(349, compressedVector0.cardinality());
      assertEquals(174.5, compressedVector0.density(), 0.01);
      
      // Undeclared exception!
      try { 
        compressedVector0.set(2, (-364.71705561));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index '2' is invalid.
         //
         verifyException("org.la4j.vector.SparseVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 1211;
      doubleArray0[1] = (double) 1211;
      doubleArray0[2] = (double) 1211;
      doubleArray0[3] = (double) 1211;
      doubleArray0[4] = 100.0;
      doubleArray0[5] = (double) 1211;
      doubleArray0[6] = (double) 1211;
      CompressedVector compressedVector0 = new CompressedVector(1211, 1211, doubleArray0, (int[]) null);
      assertNotNull(compressedVector0);
      assertArrayEquals(new double[] {1211.0, 1211.0, 1211.0, 1211.0, 100.0, 1211.0, 1211.0}, doubleArray0, 0.01);
      assertEquals(1211, compressedVector0.length());
      assertEquals(1211, compressedVector0.cardinality());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        compressedVector0.each(vectorProcedure0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(2642);
      assertNotNull(compressedVector0);
      assertEquals(2642, compressedVector0.length());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      
      CRSMatrix cRSMatrix0 = (CRSMatrix)compressedVector0.toDiagonalMatrix();
      assertNotNull(cRSMatrix0);
      assertEquals(2642, compressedVector0.length());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(2642, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(2642, cRSMatrix0.columns());
      assertEquals(0, cRSMatrix0.cardinality());
      
      compressedVector0.setAll(16);
      assertEquals(2642, compressedVector0.length());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(2642, compressedVector0.cardinality());
      
      double double0 = compressedVector0.getOrElse(1330, 3890.88867);
      assertEquals(16.0, double0, 0.01);
      assertEquals(2642, compressedVector0.length());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(2642, compressedVector0.cardinality());
      
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      compressedVector0.eachNonZero(vectorProcedure0);
      assertEquals(2642, compressedVector0.length());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(2642, compressedVector0.cardinality());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[1] = 312.6363867;
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      assertNotNull(compressedVector0);
      assertArrayEquals(new double[] {0.0, 312.6363867, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(6, compressedVector0.length());
      assertEquals(0.16666666666666666, compressedVector0.density(), 0.01);
      assertEquals(1, compressedVector0.cardinality());
      
      DenseVector denseVector0 = compressedVector0.toDenseVector();
      assertNotNull(denseVector0);
      assertArrayEquals(new double[] {0.0, 312.6363867, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(6, compressedVector0.length());
      assertEquals(0.16666666666666666, compressedVector0.density(), 0.01);
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(6, denseVector0.length());
      
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.updateAt((-802), vectorFunction0);
      assertArrayEquals(new double[] {0.0, 312.6363867, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(6, compressedVector0.length());
      assertEquals(0.16666666666666666, compressedVector0.density(), 0.01);
      assertEquals(1, compressedVector0.cardinality());
      
      boolean boolean0 = compressedVector0.equals((Object) null);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {0.0, 312.6363867, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(6, compressedVector0.length());
      assertEquals(0.16666666666666666, compressedVector0.density(), 0.01);
      assertEquals(1, compressedVector0.cardinality());
      
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      compressedVector0.each(vectorProcedure0);
      assertArrayEquals(new double[] {0.0, 312.6363867, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(6, compressedVector0.length());
      assertEquals(0.16666666666666666, compressedVector0.density(), 0.01);
      assertEquals(1, compressedVector0.cardinality());
      
      compressedVector0.setAll(0.0);
      assertArrayEquals(new double[] {0.0, 312.6363867, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(6, compressedVector0.length());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      int int0 = 3;
      CompressedVector compressedVector0 = new CompressedVector();
      assertNotNull(compressedVector0);
      assertEquals(0, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
      
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(2690.2096).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      // Undeclared exception!
      try { 
        compressedVector0.updateAt(3, vectorFunction0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // This vector can't grow up.
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(2642);
      assertNotNull(compressedVector0);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(2642, compressedVector0.length());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      
      compressedVector0.setAll(3);
      assertEquals(2642, compressedVector0.length());
      assertEquals(2642, compressedVector0.cardinality());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      
      int int0 = (-10);
      int int1 = 2251;
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(1.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.updateAt(2251, vectorFunction0);
      assertEquals(2642, compressedVector0.length());
      assertEquals(2642, compressedVector0.cardinality());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      
      // Undeclared exception!
      try { 
        compressedVector0.swapElements(3, 3508);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      double[] doubleArray0 = new double[11];
      doubleArray0[3] = (-479.0);
      doubleArray0[5] = 0.0;
      CompressedVector compressedVector0 = null;
      try {
        compressedVector0 = new CompressedVector(809, (-4822));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cardinality should be positive: -4822.
         //
         verifyException("org.la4j.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      HashMap<Integer, Byte> hashMap0 = new HashMap<Integer, Byte>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      Integer integer0 = new Integer(16);
      assertEquals(16, (int)integer0);
      assertNotNull(integer0);
      
      Byte byte0 = new Byte((byte) (-1));
      assertEquals((byte) (-1), (byte)byte0);
      assertNotNull(byte0);
      
      Byte byte1 = hashMap0.putIfAbsent(integer0, byte0);
      assertNull(byte1);
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      
      // Undeclared exception!
      try { 
        CompressedVector.fromMap(hashMap0, (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Check your map: Index must be 0..n-1
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      CompressedVector compressedVector0 = CompressedVector.fromCollection(linkedList0);
      assertNotNull(compressedVector0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0, compressedVector0.length());
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
      
      // Undeclared exception!
      try { 
        compressedVector0.swapElements(0, 331);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(121, 121);
      assertNotNull(compressedVector0);
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(121, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      
      VectorFactory<CompressedVector> vectorFactory0 = (VectorFactory<CompressedVector>) mock(VectorFactory.class, new ViolatedAssumptionAnswer());
      compressedVector0.swapElements((-4263), (-2675));
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(121, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      HashMap<Integer, Short> hashMap1 = new HashMap<Integer, Short>();
      assertNotNull(hashMap1);
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
      
      // Undeclared exception!
      try { 
        CompressedVector.fromMap(hashMap1, (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong vector length: -1
         //
         verifyException("org.la4j.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(2642, 3);
      assertNotNull(compressedVector0);
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(2642, compressedVector0.length());
      
      compressedVector0.setAll((-1073.51598));
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(2642, compressedVector0.length());
      assertEquals(2642, compressedVector0.cardinality());
      
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      VectorFunction vectorFunction1 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorFunction1).evaluate(anyInt() , anyDouble());
      compressedVector0.updateAt(3, vectorFunction1);
      assertEquals(0.9996214988644966, compressedVector0.density(), 0.01);
      assertEquals(2641, compressedVector0.cardinality());
      assertEquals(2642, compressedVector0.length());
      
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Double double0 = new Double((-1073.51598));
      assertEquals((-1073.51598), (double)double0, 0.01);
      assertNotNull(double0);
      
      boolean boolean0 = Double.isFinite(695.82504);
      assertTrue(boolean0);
      
      boolean boolean1 = linkedList0.add(double0);
      assertTrue(boolean1);
      assertEquals(1, linkedList0.size());
      assertTrue(boolean1 == boolean0);
      
      compressedVector0.set(2065, 0.0);
      assertEquals(0.9992429977289932, compressedVector0.density(), 0.01);
      assertEquals(2640, compressedVector0.cardinality());
      assertEquals(2642, compressedVector0.length());
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-20);
      byteArray0[1] = (byte)84;
      byteArray0[2] = (byte)37;
      byteArray0[3] = (byte)16;
      // Undeclared exception!
      try { 
        CompressedVector.fromBinary(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can not decode CompressedVector from the given byte array.
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      HashMap<Integer, Long> hashMap0 = new HashMap<Integer, Long>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      Integer integer0 = new Integer((-893));
      assertEquals((-893), (int)integer0);
      assertNotNull(integer0);
      
      Long long0 = new Long(1000L);
      assertEquals(1000L, (long)long0);
      assertNotNull(long0);
      
      Function<Integer, Long> function0 = (Function<Integer, Long>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn(long0).when(function0).apply(anyInt());
      Long long1 = hashMap0.computeIfAbsent(integer0, function0);
      assertEquals(1000L, (long)long1);
      assertNotNull(long1);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      
      // Undeclared exception!
      try { 
        CompressedVector.fromMap(hashMap0, 2065);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Check your map: Index must be 0..n-1
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(16);
      assertNotNull(compressedVector0);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(16, compressedVector0.length());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      
      Vector vector0 = compressedVector0.add((double) 16);
      assertNotNull(vector0);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(16, compressedVector0.length());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(16, vector0.length());
      
      HashMap<Integer, Byte> hashMap0 = new HashMap<Integer, Byte>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      Integer integer0 = new Integer(1);
      assertEquals(1, (int)integer0);
      assertNotNull(integer0);
      
      Byte byte0 = new Byte((byte) (-36));
      assertEquals((byte) (-36), (byte)byte0);
      assertNotNull(byte0);
      
      Byte byte1 = hashMap0.put(integer0, byte0);
      assertNull(byte1);
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      
      CompressedVector compressedVector1 = (CompressedVector)Vector.fromMap(hashMap0, 16);
      assertNotNull(compressedVector1);
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertEquals(16, compressedVector1.length());
      assertEquals(1, compressedVector1.cardinality());
      assertEquals(0.0625, compressedVector1.density(), 0.01);
      assertFalse(compressedVector1.equals((Object)compressedVector0));
      assertNotSame(compressedVector1, compressedVector0);
      
      // Undeclared exception!
      try { 
        CompressedVector.fromCSV("S");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      CompressedVector compressedVector0 = CompressedVector.fromCollection(linkedList0);
      assertNotNull(compressedVector0);
      assertEquals(0, linkedList0.size());
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      
      SparseVector sparseVector0 = compressedVector0.toSparseVector();
      assertNotNull(sparseVector0);
      assertEquals(0, linkedList0.size());
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(Double.NaN, sparseVector0.density(), 0.01);
      assertEquals(0, sparseVector0.cardinality());
      assertEquals(0, sparseVector0.length());
      assertSame(compressedVector0, sparseVector0);
      assertSame(sparseVector0, compressedVector0);
      
      // Undeclared exception!
      try { 
        RowMajorSparseMatrix.identity((-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(2642, 56);
      assertNotNull(compressedVector0);
      assertEquals(2642, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      
      compressedVector0.setAll(2642);
      assertEquals(2642, compressedVector0.cardinality());
      assertEquals(2642, compressedVector0.length());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      
      int int0 = 2;
      // Undeclared exception!
      try { 
        compressedVector0.swapElements(2, 2642);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 2642;
      doubleArray0[1] = (double) 1384;
      doubleArray0[2] = 1841.62129;
      doubleArray0[3] = 2690.2096;
      doubleArray0[4] = (double) 1227;
      doubleArray0[5] = (double) 1384;
      doubleArray0[6] = (double) 3;
      int[] intArray0 = new int[7];
      intArray0[0] = 3;
      intArray0[1] = 2642;
      intArray0[2] = 2642;
      intArray0[3] = 3;
      intArray0[4] = 3;
      intArray0[5] = 2642;
      doubleArray0[0] = (double) (-844);
      CompressedVector compressedVector0 = new CompressedVector(1227, 1384, doubleArray0, intArray0);
      assertNotNull(compressedVector0);
      assertArrayEquals(new double[] {(-844.0), 1384.0, 1841.62129, 2690.2096, 1227.0, 1384.0, 3.0}, doubleArray0, 0.01);
      assertArrayEquals(new int[] {3, 2642, 2642, 3, 3, 2642, 0}, intArray0);
      assertEquals(1227, compressedVector0.length());
      assertEquals(1.127954360228199, compressedVector0.density(), 0.01);
      assertEquals(1384, compressedVector0.cardinality());
      
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)2642).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      // Undeclared exception!
      try { 
        compressedVector0.update(vectorFunction0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(2642, 3);
      assertNotNull(compressedVector0);
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(2642, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      
      compressedVector0.setAll((-1073.51598));
      assertEquals(2642, compressedVector0.cardinality());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(2642, compressedVector0.length());
      
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      CompressedVector compressedVector1 = (CompressedVector)compressedVector0.copyOfLength(3);
      assertNotNull(compressedVector1);
      assertEquals(2642, compressedVector0.cardinality());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(2642, compressedVector0.length());
      assertEquals(1.0, compressedVector1.density(), 0.01);
      assertEquals(3, compressedVector1.length());
      assertEquals(3, compressedVector1.cardinality());
      assertFalse(compressedVector1.equals((Object)compressedVector0));
      assertNotSame(compressedVector0, compressedVector1);
      assertNotSame(compressedVector1, compressedVector0);
      
      boolean boolean0 = compressedVector0.nonZeroAt(3);
      assertTrue(boolean0);
      assertEquals(2642, compressedVector0.cardinality());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(2642, compressedVector0.length());
      assertFalse(compressedVector0.equals((Object)compressedVector1));
      assertNotSame(compressedVector0, compressedVector1);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 3;
      doubleArray0[1] = (-1501.018147222);
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      assertNotNull(compressedVector0);
      assertArrayEquals(new double[] {3.0, (-1501.018147222)}, doubleArray0, 0.01);
      assertEquals(2, compressedVector0.length());
      assertEquals(2, compressedVector0.cardinality());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)2642, 3.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.update(vectorFunction0);
      assertArrayEquals(new double[] {3.0, (-1501.018147222)}, doubleArray0, 0.01);
      assertEquals(2, compressedVector0.length());
      assertEquals(2, compressedVector0.cardinality());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      
      byte[] byteArray0 = compressedVector0.toBinary();
      assertNotNull(byteArray0);
      assertArrayEquals(new double[] {3.0, (-1501.018147222)}, doubleArray0, 0.01);
      assertEquals(2, compressedVector0.length());
      assertEquals(2, compressedVector0.cardinality());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      
      compressedVector0.setAll(3230.152054);
      assertArrayEquals(new double[] {3.0, (-1501.018147222)}, doubleArray0, 0.01);
      assertEquals(2, compressedVector0.length());
      assertEquals(2, compressedVector0.cardinality());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      
      Double double0 = new Double((-1501.018147222));
      assertEquals((-1501.018147222), (double)double0, 0.01);
      assertNotNull(double0);
      
      Double double1 = new Double(0.0);
      assertEquals(0.0, (double)double1, 0.01);
      assertNotNull(double1);
      assertNotEquals((double)double1, (double)double0, 0.01);
      
      boolean boolean0 = compressedVector0.nonZeroAt(2631);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {3.0, (-1501.018147222)}, doubleArray0, 0.01);
      assertEquals(2, compressedVector0.length());
      assertEquals(2, compressedVector0.cardinality());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      
      CompressedVector compressedVector1 = CompressedVector.fromBinary(byteArray0);
      assertNotNull(compressedVector1);
      assertArrayEquals(new double[] {3.0, (-1501.018147222)}, doubleArray0, 0.01);
      assertEquals(2, compressedVector0.length());
      assertEquals(2, compressedVector0.cardinality());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(1.0, compressedVector1.density(), 0.01);
      assertEquals(2, compressedVector1.cardinality());
      assertEquals(2, compressedVector1.length());
      assertFalse(compressedVector1.equals((Object)compressedVector0));
      assertNotSame(compressedVector0, compressedVector1);
      assertNotSame(compressedVector1, compressedVector0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(2642, 3);
      assertNotNull(compressedVector0);
      assertEquals(2642, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      
      compressedVector0.setAll((-1097.136811561148));
      assertEquals(2642, compressedVector0.length());
      assertEquals(2642, compressedVector0.cardinality());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      VectorFunction vectorFunction1 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorFunction1).evaluate(anyInt() , anyDouble());
      compressedVector0.updateAt(3, vectorFunction1);
      assertEquals(2642, compressedVector0.length());
      assertEquals(2641, compressedVector0.cardinality());
      assertEquals(0.9996214988644966, compressedVector0.density(), 0.01);
      
      HashMap<Integer, Byte> hashMap0 = new HashMap<Integer, Byte>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      CompressedVector compressedVector1 = CompressedVector.fromMap(hashMap0, 2634);
      assertNotNull(compressedVector1);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, compressedVector1.cardinality());
      assertEquals(0.0, compressedVector1.density(), 0.01);
      assertEquals(2634, compressedVector1.length());
      assertFalse(compressedVector1.equals((Object)compressedVector0));
      assertNotSame(compressedVector1, compressedVector0);
      
      compressedVector0.swapElements(2642, 7);
      assertEquals(2642, compressedVector0.length());
      assertEquals(2641, compressedVector0.cardinality());
      assertEquals(0.9996214988644966, compressedVector0.density(), 0.01);
      assertFalse(compressedVector0.equals((Object)compressedVector1));
      assertNotSame(compressedVector0, compressedVector1);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      double[] doubleArray0 = new double[11];
      doubleArray0[3] = (-632.695566907);
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      assertNotNull(compressedVector0);
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(0.09090909090909091, compressedVector0.density(), 0.01);
      assertEquals(11, compressedVector0.length());
      
      double double0 = compressedVector0.innerProduct(compressedVector0);
      assertEquals(400303.6803837702, double0, 0.01);
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(0.09090909090909091, compressedVector0.density(), 0.01);
      assertEquals(11, compressedVector0.length());
      
      // Undeclared exception!
      try { 
        compressedVector0.sliceRight(3227);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong slice range: [3227..11].
         //
         verifyException("org.la4j.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(2642, 3);
      assertNotNull(compressedVector0);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(2642, compressedVector0.length());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      
      compressedVector0.setAll((-1073.51598));
      assertEquals(2642, compressedVector0.length());
      assertEquals(2642, compressedVector0.cardinality());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      VectorFunction vectorFunction1 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorFunction1).evaluate(anyInt() , anyDouble());
      compressedVector0.updateAt(3, vectorFunction1);
      assertEquals(2641, compressedVector0.cardinality());
      assertEquals(2642, compressedVector0.length());
      assertEquals(0.9996214988644966, compressedVector0.density(), 0.01);
      
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      compressedVector0.swapElements((-4263), 2084);
      assertEquals(2641, compressedVector0.cardinality());
      assertEquals(2642, compressedVector0.length());
      assertEquals(0.9996214988644966, compressedVector0.density(), 0.01);
      
      Double double0 = new Double((-4263));
      assertEquals((-4263.0), (double)double0, 0.01);
      assertNotNull(double0);
      
      linkedList0.addLast(double0);
      assertEquals(1, linkedList0.size());
      
      boolean boolean0 = linkedList0.add((Double) null);
      assertTrue(boolean0);
      assertEquals(2, linkedList0.size());
      
      VectorFunction vectorFunction2 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      compressedVector0.swapElements(2084, 2642);
      assertEquals(2641, compressedVector0.cardinality());
      assertEquals(2642, compressedVector0.length());
      assertEquals(0.9996214988644966, compressedVector0.density(), 0.01);
      
      double double1 = compressedVector0.getOrElse(2084, 2571.331729077877);
      assertEquals(2571.331729077877, double1, 0.01);
      assertEquals(2641, compressedVector0.cardinality());
      assertEquals(2642, compressedVector0.length());
      assertEquals(0.9996214988644966, compressedVector0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(2642, 3);
      assertNotNull(compressedVector0);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(2642, compressedVector0.length());
      
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(2690.2096).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.updateAt(2081, vectorFunction0);
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(2642, compressedVector0.length());
      assertEquals(3.785011355034065E-4, compressedVector0.density(), 0.01);
      
      compressedVector0.swapElements(3, 2642);
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(2642, compressedVector0.length());
      assertEquals(3.785011355034065E-4, compressedVector0.density(), 0.01);
      
      compressedVector0.setAll(2642);
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(2642, compressedVector0.cardinality());
      assertEquals(2642, compressedVector0.length());
      
      Integer integer0 = new Integer(3);
      assertEquals(3, (int)integer0);
      assertNotNull(integer0);
      
      compressedVector0.swapElements(2081, 1279);
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(2642, compressedVector0.cardinality());
      assertEquals(2642, compressedVector0.length());
      
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      compressedVector0.each(vectorProcedure0);
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(2642, compressedVector0.cardinality());
      assertEquals(2642, compressedVector0.length());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(2647, 2086);
      compressedVector0.setAll((-1073.51598));
      Double double0 = new Double(2084);
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      linkedList0.add(double0);
      int int0 = (-4263);
      // Undeclared exception!
      try { 
        compressedVector0.swapElements(9, (-4263));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(3, 3);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(2690.2096).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.updateAt(3, vectorFunction0);
      VectorFunction vectorFunction1 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)3).when(vectorFunction1).evaluate(anyInt() , anyDouble());
      compressedVector0.updateAt(3, vectorFunction1);
      compressedVector0.swapElements(3, (-4263));
      compressedVector0.nonZeroAt(4);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(1783, 1783);
      MockRandom mockRandom0 = new MockRandom();
      CompressedVector.random(1783, 1.0, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(2642);
      compressedVector0.setAll(3);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.updateAt(2251, vectorFunction0);
      compressedVector0.swapElements(3, 3508);
      compressedVector0.setAll(16);
      compressedVector0.getOrElse(1330, 3890.88867);
  }
}
