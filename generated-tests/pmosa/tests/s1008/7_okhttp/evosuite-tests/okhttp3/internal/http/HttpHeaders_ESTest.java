/*
 * This file was automatically generated by EvoSuite
 * Tue Jul 17 12:04:56 GMT 2018
 */

package okhttp3.internal.http;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.net.URI;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;
import okhttp3.Challenge;
import okhttp3.CookieJar;
import okhttp3.Headers;
import okhttp3.HttpUrl;
import okhttp3.Request;
import okhttp3.Response;
import okhttp3.internal.http.HttpHeaders;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class HttpHeaders_ESTest extends HttpHeaders_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      HttpHeaders.skipUntil("w|", 66, "beginIndex < 0");
      HttpHeaders.skipWhitespace("", 66);
      HttpHeaders.parseSeconds("w|", 66);
      HttpHeaders.parseSeconds("Transfer-Encoding", 66);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      stringArray0[1] = "beginIndex < 0";
      stringArray0[2] = "Transfer-Encoding";
      stringArray0[3] = "Transfer-Encoding";
      stringArray0[4] = "Transfer-Encoding";
      // Undeclared exception!
      try { 
        Headers.of(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Expected alternating header names and values
         //
         verifyException("okhttp3.Headers", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Response response0 = null;
      // Undeclared exception!
      try { 
        HttpHeaders.contentLength((Response) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.internal.http.HttpHeaders", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      HashMap<String, String> hashMap1 = new HashMap<String, String>(hashMap0);
      Headers headers0 = Headers.of((Map<String, String>) hashMap1);
      headers0.toString();
      headers0.values("oYZ}.(oH|s96@;eAN{");
      headers0.values("oYZ}.(oH|s96@;eAN{");
      hashMap1.put("", "([^ \"=]*)");
      HttpHeaders.contentLength(headers0);
      HttpHeaders.parseChallenges(headers0, "oYZ}.(oH|s96@;eAN{");
      String[] stringArray0 = new String[0];
      Headers.of(stringArray0);
      HttpHeaders.skipUntil("oYZ}.(oH|s96@;eAN{", 2487, "oYZ}.(oH|s96@;eAN{");
      HttpHeaders.contentLength(headers0);
      HttpHeaders.varyHeaders(headers0, headers0);
      Set<String> set0 = HttpHeaders.varyFields(headers0);
      assertTrue(set0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      int int0 = HttpHeaders.parseSeconds("c^)Kx-ir4Qb'\"0MR>", (-926));
      assertEquals((-926), int0);
      
      String[] stringArray0 = new String[0];
      Headers headers0 = Headers.of(stringArray0);
      long long0 = HttpHeaders.contentLength(headers0);
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put("\u0000bH:L\"", "[?`3k|C");
      Headers headers0 = Headers.of((Map<String, String>) hashMap0);
      Headers headers1 = HttpHeaders.varyHeaders(headers0, headers0);
      assertNotSame(headers0, headers1);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Response response0 = null;
      // Undeclared exception!
      try { 
        HttpHeaders.hasVaryAll((Response) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.internal.http.HttpHeaders", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Response response0 = null;
      // Undeclared exception!
      try { 
        HttpHeaders.varyHeaders((Response) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.internal.http.HttpHeaders", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      int int0 = HttpHeaders.skipWhitespace("4=wF3", 0);
      int int1 = HttpHeaders.parseSeconds("4=wF3", 0);
      assertTrue(int1 == int0);
      
      int int2 = HttpHeaders.skipUntil("Request{method=", 0, "scheme == null");
      assertEquals(1, int2);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put("TF0Iw;v*+v;&2|", "TF0Iw;v*+v;&2|");
      Headers headers0 = Headers.of((Map<String, String>) hashMap0);
      Headers headers1 = HttpHeaders.varyHeaders(headers0, headers0);
      int int0 = HttpHeaders.skipUntil("r3b5k%w(lXJXV(S?+l", 5, ",0<43h>Qt");
      assertEquals(18, int0);
      
      Set<String> set0 = HttpHeaders.varyFields(headers1);
      assertEquals(0, set0.size());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      HttpHeaders.parseSeconds("3", (-293));
      System.setCurrentTimeMillis(3);
      System.setCurrentTimeMillis(3);
      String[] stringArray0 = new String[1];
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      HttpHeaders.parseSeconds("3", (-293));
      System.setCurrentTimeMillis(3);
      System.setCurrentTimeMillis(2876L);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "GAM";
      // Undeclared exception!
      try { 
        Headers.of(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Expected alternating header names and values
         //
         verifyException("okhttp3.Headers", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put("[zila%", "pathsegment == null");
      hashMap0.put("vary", "vary");
      hashMap0.put("(*hyd9ln5J0", "(*hyd9ln5J0");
      Headers headers0 = Headers.of((Map<String, String>) hashMap0);
      Headers headers1 = HttpHeaders.varyHeaders(headers0, headers0);
      assertEquals(1, headers1.size());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Headers headers0 = Headers.of((Map<String, String>) hashMap0);
      // Undeclared exception!
      try { 
        HttpHeaders.varyMatches((Response) null, headers0, (Request) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.internal.http.HttpHeaders", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      int int0 = HttpHeaders.parseSeconds(".networkResponse != null", 1328);
      assertEquals(1328, int0);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = ".networkResponse != null";
      stringArray0[1] = ".networkResponse != null";
      stringArray0[2] = ".networkResponse != null";
      stringArray0[3] = ".networkResponse != null";
      Headers headers0 = Headers.of(stringArray0);
      List<Challenge> list0 = HttpHeaders.parseChallenges(headers0, ".networkResponse != null");
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      int int0 = HttpHeaders.skipWhitespace(" +([^ \"=]*)=(:?\"([^\"]*)\"|([^ \"=]*)) *(:?,|$)", 0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "vary";
      stringArray0[1] = "Y4";
      stringArray0[2] = "vary";
      stringArray0[3] = "vary";
      stringArray0[4] = "vary";
      stringArray0[5] = "tlsVersion == null";
      Headers headers0 = Headers.of(stringArray0);
      HttpHeaders.varyHeaders(headers0, headers0);
      // Undeclared exception!
      try { 
        HttpHeaders.skipWhitespace((String) null, (-27));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.internal.http.HttpHeaders", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "content-length";
      stringArray0[1] = "['z!4";
      Headers headers0 = Headers.of(stringArray0);
      HttpHeaders.parseChallenges(headers0, "content-length");
      HttpUrl.parse(":_qB%P1l!hiK^o1=");
      HttpHeaders.contentLength(headers0);
      HttpHeaders.varyHeaders(headers0, headers0);
      CookieJar cookieJar0 = mock(CookieJar.class, new ViolatedAssumptionAnswer());
      HttpHeaders.receiveHeaders(cookieJar0, (HttpUrl) null, headers0);
      HttpHeaders.hasVaryAll(headers0);
      System.setCurrentTimeMillis(2147483647L);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = ", !url=";
      stringArray0[1] = ", !url=";
      Headers headers0 = Headers.of(stringArray0);
      List<Challenge> list0 = HttpHeaders.parseChallenges(headers0, ", !url=");
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "p!";
      stringArray0[1] = ",96 realml=";
      stringArray0[2] = "p!";
      stringArray0[3] = "p!";
      stringArray0[4] = "p!";
      stringArray0[5] = "p!";
      Headers headers0 = Headers.of(stringArray0);
      List<Challenge> list0 = HttpHeaders.parseChallenges(headers0, "p!");
      assertEquals(0, list0.size());
  }
}
