/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 02:38:16 GMT 2018
 */

package com.pmdesigns.jvc.tools;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.pmdesigns.jvc.tools.JVCParserTokenManager;
import com.pmdesigns.jvc.tools.SimpleCharStream;
import com.pmdesigns.jvc.tools.Token;
import java.io.ByteArrayInputStream;
import java.io.InputStream;
import java.io.Reader;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JVCParserTokenManager_ESTest extends JVCParserTokenManager_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager((SimpleCharStream) null);
      // Undeclared exception!
      try { 
        jVCParserTokenManager0.ReInit((SimpleCharStream) null, (-1712));
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : -1712. State unchanged.
         //
         verifyException("com.pmdesigns.jvc.tools.JVCParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SimpleCharStream simpleCharStream0 = new SimpleCharStream((Reader) null);
      JVCParserTokenManager jVCParserTokenManager0 = null;
      try {
        jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0, (-1));
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : -1. State unchanged.
         //
         verifyException("com.pmdesigns.jvc.tools.JVCParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JVCParserTokenManager jVCParserTokenManager0 = null;
      try {
        jVCParserTokenManager0 = new JVCParserTokenManager((SimpleCharStream) null, 30);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 30. State unchanged.
         //
         verifyException("com.pmdesigns.jvc.tools.JVCParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SimpleCharStream simpleCharStream0 = new SimpleCharStream((Reader) null);
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(jVCParserTokenManager0.debugStream);
      jVCParserTokenManager0.setDebugStream(mockPrintStream0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SimpleCharStream simpleCharStream0 = new SimpleCharStream((Reader) null);
      simpleCharStream0.inBuf = 113;
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0, 2);
      Token token0 = jVCParserTokenManager0.getNextToken();
      assertEquals("\u0000", token0.toString());
      assertEquals(0, token0.beginColumn);
      assertEquals(0, token0.endColumn);
      assertEquals(0, token0.beginLine);
      assertEquals(16, token0.kind);
      assertEquals(0, token0.endLine);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SimpleCharStream simpleCharStream0 = new SimpleCharStream((Reader) null);
      simpleCharStream0.inBuf = 92;
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0);
      jVCParserTokenManager0.curLexState = 92;
      Token token0 = jVCParserTokenManager0.getNextToken();
      assertEquals(0, token0.endColumn);
      assertEquals(0, token0.beginLine);
      assertEquals(0, token0.kind);
      assertEquals(0, token0.endLine);
      assertEquals("", token0.toString());
      assertEquals(0, token0.beginColumn);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      SimpleCharStream simpleCharStream0 = new SimpleCharStream((Reader) null);
      char[] charArray0 = new char[8];
      charArray0[0] = 'z';
      charArray0[5] = 'z';
      simpleCharStream0.buffer = charArray0;
      simpleCharStream0.inBuf = 92;
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0);
      Token token0 = jVCParserTokenManager0.getNextToken();
      assertEquals(0, token0.endLine);
      assertEquals(0, token0.endColumn);
      assertEquals(0, token0.beginLine);
      assertEquals(16, token0.kind);
      assertEquals(0, token0.beginColumn);
      assertEquals("z", token0.toString());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SimpleCharStream simpleCharStream0 = new SimpleCharStream((Reader) null);
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0);
      char[] charArray0 = new char[8];
      charArray0[2] = '^';
      charArray0[4] = '\u0000';
      simpleCharStream0.buffer = charArray0;
      simpleCharStream0.inBuf = 85;
      JVCParserTokenManager jVCParserTokenManager1 = new JVCParserTokenManager(simpleCharStream0);
      jVCParserTokenManager0.getNextToken();
      JVCParserTokenManager jVCParserTokenManager2 = new JVCParserTokenManager(simpleCharStream0, 3);
      Token token0 = jVCParserTokenManager1.getNextToken();
      assertEquals(16, token0.kind);
      
      Token token1 = jVCParserTokenManager2.getNextToken();
      assertEquals(0, token1.beginLine);
      assertEquals(0, token1.beginColumn);
      assertEquals("^", token1.toString());
      assertEquals(0, token1.endColumn);
      assertEquals(0, token1.endLine);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SimpleCharStream simpleCharStream0 = new SimpleCharStream((Reader) null);
      simpleCharStream0.inBuf = 92;
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0, 4);
      Token token0 = jVCParserTokenManager0.getNextToken();
      assertEquals(0, token0.endLine);
      assertEquals(0, token0.endColumn);
      assertEquals(0, token0.beginLine);
      assertEquals(16, token0.kind);
      
      jVCParserTokenManager0.SwitchTo(0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-17);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      simpleCharStream0.ReInit((InputStream) byteArrayInputStream0);
      Token token1 = jVCParserTokenManager0.getNextToken();
      assertEquals(1, token1.beginColumn);
      assertEquals("\uFFFD", token1.toString());
      assertEquals(1, token1.endLine);
      assertEquals(1, token1.beginLine);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SimpleCharStream simpleCharStream0 = new SimpleCharStream((Reader) null);
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0);
      char[] charArray0 = new char[8];
      charArray0[2] = '^';
      charArray0[5] = 'M';
      simpleCharStream0.buffer = charArray0;
      simpleCharStream0.inBuf = 85;
      Token token0 = jVCParserTokenManager0.getNextToken();
      assertEquals(16, token0.kind);
      
      JVCParserTokenManager jVCParserTokenManager1 = new JVCParserTokenManager(simpleCharStream0, 0);
      Token token1 = jVCParserTokenManager1.getNextToken();
      assertEquals(16, token1.kind);
      
      Token token2 = jVCParserTokenManager1.getNextToken();
      assertEquals(0, token2.endLine);
      assertEquals(0, token2.beginColumn);
      assertEquals(0, token2.endColumn);
      assertEquals("^", token2.toString());
      assertEquals(0, token2.beginLine);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SimpleCharStream simpleCharStream0 = new SimpleCharStream((Reader) null);
      char[] charArray0 = new char[7];
      charArray0[0] = 'z';
      charArray0[4] = '\u0000';
      charArray0[5] = '\u0000';
      simpleCharStream0.buffer = charArray0;
      simpleCharStream0.inBuf = 92;
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0, 4);
      Token token0 = jVCParserTokenManager0.getNextToken();
      assertEquals("z", token0.toString());
      assertEquals(0, token0.endLine);
      assertEquals(0, token0.endColumn);
      assertEquals(0, token0.beginColumn);
      assertEquals(0, token0.beginLine);
      assertEquals(16, token0.kind);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SimpleCharStream simpleCharStream0 = new SimpleCharStream((Reader) null);
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0);
      simpleCharStream0.inBuf = 120;
      Token token0 = jVCParserTokenManager0.getNextToken();
      assertEquals(16, token0.kind);
      
      JVCParserTokenManager jVCParserTokenManager1 = new JVCParserTokenManager(simpleCharStream0, 0);
      Token token1 = jVCParserTokenManager1.getNextToken();
      assertEquals(16, token1.kind);
      
      JVCParserTokenManager jVCParserTokenManager2 = new JVCParserTokenManager(simpleCharStream0, 1);
      Token token2 = jVCParserTokenManager2.getNextToken();
      assertEquals(0, token2.endLine);
      assertEquals(0, token2.endColumn);
      assertEquals("\u0000", token2.toString());
      assertEquals(0, token2.beginLine);
      assertEquals(16, token2.kind);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SimpleCharStream simpleCharStream0 = new SimpleCharStream((Reader) null);
      simpleCharStream0.inBuf = 29;
      char[] charArray0 = new char[8];
      charArray0[0] = 'x';
      charArray0[2] = '\u0000';
      charArray0[2] = 'x';
      simpleCharStream0.Done();
      charArray0[6] = '\\';
      simpleCharStream0.buffer = charArray0;
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0, 2);
      // Undeclared exception!
      try { 
        jVCParserTokenManager0.getNextToken();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SimpleCharStream simpleCharStream0 = new SimpleCharStream((Reader) null);
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0, 4);
      byte[] byteArray0 = new byte[5];
      byteArray0[1] = (byte) (-86);
      byteArray0[3] = (byte) (-86);
      byteArray0[4] = (byte)17;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      simpleCharStream0.ReInit((InputStream) byteArrayInputStream0);
      Token token0 = jVCParserTokenManager0.getNextToken();
      assertEquals(1, token0.beginColumn);
      
      jVCParserTokenManager0.ReInit(simpleCharStream0);
      Token token1 = jVCParserTokenManager0.getNextToken();
      assertEquals(2, token1.endColumn);
      assertEquals("\uFFFD", token1.toString());
      assertEquals(1, token1.endLine);
      assertEquals(2, token1.beginColumn);
      assertEquals(16, token1.kind);
      assertEquals(1, token1.beginLine);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SimpleCharStream simpleCharStream0 = new SimpleCharStream((Reader) null);
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0, 4);
      byte[] byteArray0 = new byte[5];
      byteArray0[1] = (byte) (-86);
      byteArray0[3] = (byte) (-86);
      byteArray0[4] = (byte)17;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      simpleCharStream0.ReInit((InputStream) byteArrayInputStream0);
      Token token0 = jVCParserTokenManager0.getNextToken();
      assertEquals(16, token0.kind);
      
      Token token1 = jVCParserTokenManager0.getNextToken();
      assertEquals(2, token1.beginColumn);
      assertEquals(2, token1.endColumn);
      assertEquals("\uFFFD", token1.toString());
      assertEquals(1, token1.endLine);
      assertEquals(1, token1.beginLine);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SimpleCharStream simpleCharStream0 = new SimpleCharStream((Reader) null);
      simpleCharStream0.inBuf = 92;
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0, 4);
      jVCParserTokenManager0.getNextToken();
      jVCParserTokenManager0.ReInit(simpleCharStream0);
      jVCParserTokenManager0.SwitchTo(0);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)8;
      byteArray0[1] = (byte)92;
      byteArray0[2] = (byte)32;
      byteArray0[3] = (byte) (-94);
      byteArray0[4] = (byte)79;
      byteArray0[5] = (byte) (-62);
      byteArray0[6] = (byte) (-19);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      simpleCharStream0.ReInit((InputStream) byteArrayInputStream0);
      jVCParserTokenManager0.getNextToken();
      jVCParserTokenManager0.getNextToken();
      jVCParserTokenManager0.ReInit(simpleCharStream0);
      assertEquals(3, simpleCharStream0.bufpos);
      assertEquals(4, simpleCharStream0.getEndColumn());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SimpleCharStream simpleCharStream0 = new SimpleCharStream((Reader) null);
      simpleCharStream0.inBuf = 92;
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)29;
      byteArray0[1] = (byte)124;
      byteArray0[2] = (byte)13;
      byteArray0[3] = (byte)124;
      byteArray0[4] = (byte) (-56);
      byteArray0[5] = (byte)53;
      byteArray0[6] = (byte)12;
      byteArray0[7] = (byte) (-33);
      byteArray0[8] = (byte)3;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream1.read();
      simpleCharStream0.ReInit((InputStream) byteArrayInputStream1);
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0, 3);
      jVCParserTokenManager0.getNextToken();
      Token token0 = jVCParserTokenManager0.getNextToken();
      assertEquals(1, simpleCharStream0.bufpos);
      assertEquals(6, token0.kind);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      SimpleCharStream simpleCharStream0 = new SimpleCharStream((Reader) null);
      simpleCharStream0.inBuf = 92;
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)29;
      byteArray0[1] = (byte)124;
      byteArray0[2] = (byte)13;
      byteArray0[3] = (byte)13;
      byteArray0[4] = (byte) (-56);
      byteArray0[5] = (byte)53;
      byteArray0[6] = (byte)12;
      byteArray0[7] = (byte) (-33);
      byteArray0[8] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream1.read();
      simpleCharStream0.ReInit((InputStream) byteArrayInputStream1);
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0, 3);
      jVCParserTokenManager0.getNextToken();
      jVCParserTokenManager0.getNextToken();
      jVCParserTokenManager0.ReInit(simpleCharStream0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      SimpleCharStream simpleCharStream0 = new SimpleCharStream((Reader) null);
      simpleCharStream0.inBuf = 29;
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte)3;
      byteArray1[1] = (byte) (-56);
      byteArray1[2] = (byte)105;
      byteArray1[3] = (byte)124;
      byteArray1[4] = (byte)53;
      byteArray1[5] = (byte)53;
      byteArray1[6] = (byte)124;
      byteArray1[7] = (byte) (-17);
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray1);
      ByteArrayInputStream byteArrayInputStream2 = new ByteArrayInputStream(byteArray0, 586, (-1412));
      byteArrayInputStream2.read();
      simpleCharStream0.ReInit((InputStream) byteArrayInputStream1);
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0, 3);
      jVCParserTokenManager0.getNextToken();
      jVCParserTokenManager0.getNextToken();
      jVCParserTokenManager0.ReInit(simpleCharStream0);
  }
}
