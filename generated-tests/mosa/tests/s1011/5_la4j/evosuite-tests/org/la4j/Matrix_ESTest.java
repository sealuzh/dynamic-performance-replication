/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 02:46:28 GMT 2018
 */

package org.la4j;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.text.ChoiceFormat;
import java.text.DecimalFormat;
import java.text.NumberFormat;
import java.util.LinkedList;
import java.util.NoSuchElementException;
import java.util.Random;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;
import org.la4j.LinearAlgebra;
import org.la4j.Matrix;
import org.la4j.Vector;
import org.la4j.matrix.ColumnMajorSparseMatrix;
import org.la4j.matrix.DenseMatrix;
import org.la4j.matrix.RowMajorSparseMatrix;
import org.la4j.matrix.SparseMatrix;
import org.la4j.matrix.dense.Basic2DMatrix;
import org.la4j.matrix.functor.AdvancedMatrixPredicate;
import org.la4j.matrix.functor.MatrixAccumulator;
import org.la4j.matrix.functor.MatrixFunction;
import org.la4j.matrix.functor.MatrixPredicate;
import org.la4j.matrix.functor.MatrixProcedure;
import org.la4j.matrix.sparse.CCSMatrix;
import org.la4j.matrix.sparse.CRSMatrix;
import org.la4j.operation.MatrixMatrixOperation;
import org.la4j.operation.MatrixOperation;
import org.la4j.operation.inplace.InPlaceCopyMatrixToMatrix;
import org.la4j.operation.ooplace.OoPlaceMatricesSubtraction;
import org.la4j.operation.ooplace.OoPlaceMatrixByVectorMultiplication;
import org.la4j.operation.ooplace.OoPlaceOuterProduct;
import org.la4j.operation.ooplace.OoPlaceVectorHadamardProduct;
import org.la4j.operation.ooplace.OoPlaceVectorsAddition;
import org.la4j.vector.DenseVector;
import org.la4j.vector.SparseVector;
import org.la4j.vector.functor.VectorAccumulator;
import org.la4j.vector.functor.VectorFunction;
import org.la4j.vector.functor.VectorProcedure;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Matrix_ESTest extends Matrix_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
          Matrix matrix0 = Matrix.constant(1750, 1750, 1750);
          assertEquals(1750, matrix0.rows());
          assertEquals(1750, matrix0.columns());
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Matrix matrix0 = Matrix.zero(1149, 1149);
      DecimalFormat decimalFormat0 = new DecimalFormat();
      matrix0.mkString((NumberFormat) decimalFormat0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.identity(0);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      Matrix matrix0 = denseMatrix0.transformRow(0, vectorFunction0);
      Matrix matrix1 = matrix0.sliceTopLeft(0, 0);
      matrix0.equals((Object) matrix1);
      DecimalFormat decimalFormat0 = new DecimalFormat();
      decimalFormat0.setParseIntegerOnly(true);
      matrix1.mkString((NumberFormat) decimalFormat0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      int int0 = 798;
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.diagonal(798, 798);
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix(798, 798);
      NumberFormat.getInstance();
      basic2DMatrix0.equals((Matrix) rowMajorSparseMatrix0, 432.569);
      basic2DMatrix0.determinant();
      MockRandom mockRandom0 = new MockRandom(int0);
      int int1 = 9;
      double double0 = 4.9E-324;
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(int1, double0);
      cRSMatrix0.blankOfRows(int0);
      cRSMatrix0.toCSV();
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Matrix matrix0 = Matrix.diagonal(1055, 1055);
      MockRandom mockRandom0 = new MockRandom();
      Matrix matrix1 = Matrix.randomSymmetric(Integer.MAX_VALUE, mockRandom0);
      matrix0.add(matrix1);
      matrix0.toBinary();
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.identity(0);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      int int0 = 1926;
      denseMatrix0.swapColumns(401, 0);
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = denseMatrix0.toColumnMajorSparseMatrix();
      columnMajorSparseMatrix0.infinityNorm();
      // Undeclared exception!
      try { 
        columnMajorSparseMatrix0.copyOfRows((-2799));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: -2799x0
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.identity(0);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      Matrix matrix0 = denseMatrix0.transformRow(0, vectorFunction0);
      Matrix matrix1 = matrix0.sliceTopLeft(0, 0);
      matrix0.equals((Object) matrix1);
      DecimalFormat decimalFormat0 = new DecimalFormat();
      // Undeclared exception!
      try { 
        matrix1.blankOfRows((-2730));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      // Undeclared exception!
      try { 
        ColumnMajorSparseMatrix.zero(1836, (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: 1836x-1
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Matrix.zero(1149, 5);
      DecimalFormat decimalFormat0 = new DecimalFormat();
      decimalFormat0.setParseIntegerOnly(false);
      int int0 = 8;
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix();
      Matrix matrix0 = basic2DMatrix0.sliceBottomRight(0, 810);
      int int1 = 17;
      matrix0.sliceBottomRight(int1, int0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      int int0 = 10;
      CRSMatrix.identity(10);
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(10, (-4485.0));
      // Undeclared exception!
      try { 
        cRSMatrix0.set((-4578), (-4578), 10);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '-4578' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.identity(2);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      denseMatrix0.sliceTopLeft(2, 2);
      denseMatrix0.euclideanNorm();
      denseMatrix0.hashCode();
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.zero(0, 0);
      ((CCSMatrix) columnMajorSparseMatrix0).nonZeroColumnMajorIterator();
      LinearAlgebra.SolverFactory linearAlgebra_SolverFactory0 = LinearAlgebra.SolverFactory.GAUSSIAN;
      columnMajorSparseMatrix0.withSolver(linearAlgebra_SolverFactory0);
      columnMajorSparseMatrix0.subtract((Matrix) columnMajorSparseMatrix0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      CRSMatrix.identity(10);
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(10, (-4485.0));
      RowMajorSparseMatrix.identity(10);
      cRSMatrix0.toCSV();
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      Matrix.unit(10, 6);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(10, 10);
      SparseMatrix sparseMatrix0 = SparseMatrix.diagonal(10, 10);
      RowMajorSparseMatrix.identity(10);
      cRSMatrix0.toCSV();
      cRSMatrix0.toBinary();
      cRSMatrix0.determinant();
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        sparseMatrix0.updateColumn(10, vectorFunction0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '10' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.identity(14);
      columnMajorSparseMatrix0.sum();
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.identity(2303);
      rowMajorSparseMatrix0.insert((Matrix) cRSMatrix0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Matrix matrix0 = Matrix.identity(2303);
      matrix0.copyOfRows(1922);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      int int0 = 798;
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.diagonal(798, 798);
      DenseMatrix denseMatrix0 = rowMajorSparseMatrix0.toDenseMatrix();
      OoPlaceMatrixByVectorMultiplication ooPlaceMatrixByVectorMultiplication0 = new OoPlaceMatrixByVectorMultiplication();
      denseMatrix0.infinityNorm();
      String string0 = "m>S";
      DenseMatrix denseMatrix1 = DenseMatrix.fromCSV(string0);
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      denseMatrix0.each(matrixProcedure0);
      Vector vector0 = null;
      denseMatrix1.insertRow(int0, vector0);
      denseMatrix0.setRow(int0, vector0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      OoPlaceMatrixByVectorMultiplication ooPlaceMatrixByVectorMultiplication0 = new OoPlaceMatrixByVectorMultiplication();
      DenseMatrix denseMatrix0 = DenseMatrix.fromCSV("   ");
      Double double0 = new Double(10);
      Matrix matrix0 = denseMatrix0.divide(1.0);
      // Undeclared exception!
      try { 
        matrix0.slice(10, 10, 10, (-1759));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong slice range: [10..10][10..-1759].
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Matrix matrix0 = Matrix.constant(0, 0, (-1.0));
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 0;
      matrix0.toColumnMajorSparseMatrix();
      double[][] doubleArray1 = new double[8][9];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      double[] doubleArray2 = new double[3];
      doubleArray2[0] = (double) 0;
      doubleArray2[2] = (double) 0;
      doubleArray1[2] = doubleArray2;
      doubleArray1[3] = doubleArray0;
      double[] doubleArray3 = new double[9];
      doubleArray3[1] = (-1.0);
      doubleArray3[3] = (double) 0;
      doubleArray3[5] = (-1.0);
      doubleArray3[6] = (-1031.6);
      doubleArray3[7] = (double) 0;
      doubleArray3[8] = (double) 1926;
      doubleArray1[5] = doubleArray0;
      doubleArray1[6] = doubleArray0;
      doubleArray1[7] = doubleArray0;
      Matrix.from2DArray(doubleArray1);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Matrix.constant(0, 0, (-1.0));
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 0;
      Matrix.from1DArray(0, 0, doubleArray0);
      Matrix matrix0 = Matrix.zero(5, 32);
      DecimalFormat decimalFormat0 = new DecimalFormat();
      decimalFormat0.setParseIntegerOnly(true);
      matrix0.mkString((NumberFormat) decimalFormat0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.identity(0);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      MockRandom mockRandom0 = new MockRandom();
      basic2DMatrix0.rotate();
      basic2DMatrix0.copyOfRows(0);
      // Undeclared exception!
      try { 
        basic2DMatrix0.removeRow(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..-1
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix(32, 32);
      Matrix matrix0 = basic2DMatrix0.multiply((-4485.0));
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        matrix0.foldColumn(32, vectorAccumulator0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.identity(0);
      Matrix matrix0 = rowMajorSparseMatrix0.blankOfColumns(383);
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(3994);
      cRSMatrix0.iteratorOfColumn(0);
      CRSMatrix.diagonal(3994, 0);
      matrix0.toCSV();
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      int int0 = 10;
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(10);
      CRSMatrix cRSMatrix1 = CRSMatrix.diagonal(10, (-4485.0));
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.identity(10);
      cRSMatrix1.toCSV();
      rowMajorSparseMatrix0.toBinary();
      cRSMatrix0.determinant();
      // Undeclared exception!
      try { 
        cRSMatrix1.maxInColumn(392);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '392' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.identity(0);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      Matrix matrix0 = denseMatrix0.sliceTopLeft(0, 0);
      matrix0.euclideanNorm();
      denseMatrix0.add((double) 0);
      matrix0.toCSV();
      matrix0.updateRow(10, (VectorFunction) null);
      int int0 = Double.MAX_EXPONENT;
      Double double0 = new Double(1023);
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      matrix0.each(matrixProcedure0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      cRSMatrix0.toColumnVector();
      Matrix matrix0 = cRSMatrix0.transpose();
      cRSMatrix0.columns();
      cRSMatrix0.nonZeroIterator();
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      matrix0.foldColumns(vectorAccumulator0);
      NumberFormat numberFormat0 = NumberFormat.getCurrencyInstance();
      numberFormat0.setParseIntegerOnly(false);
      cRSMatrix0.mkString(numberFormat0);
      cRSMatrix0.toMatrixMarket();
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Matrix matrix0 = Matrix.zero(1149, 5);
      DecimalFormat decimalFormat0 = new DecimalFormat();
      matrix0.add(181.5157229088);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorAccumulator0).accumulate();
      matrix0.foldRow(5, vectorAccumulator0);
      decimalFormat0.setParseIntegerOnly(false);
      matrix0.mkString((NumberFormat) decimalFormat0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Matrix matrix0 = Matrix.zero(0, 1149);
      Matrix matrix1 = Matrix.zero(1149, 5);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      Matrix.block(matrix0, matrix0, matrix0, matrix1);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.zero(0, 2911);
      Matrix matrix0 = columnMajorSparseMatrix0.multiply((double) 2911);
      LinearAlgebra.SolverFactory linearAlgebra_SolverFactory0 = LinearAlgebra.SolverFactory.JACOBI;
      // Undeclared exception!
      try { 
        matrix0.withSolver(linearAlgebra_SolverFactory0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Given coefficient matrix can not be used with this solver.
         //
         verifyException("org.la4j.linear.AbstractSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      OoPlaceMatrixByVectorMultiplication ooPlaceMatrixByVectorMultiplication0 = new OoPlaceMatrixByVectorMultiplication();
      DenseMatrix denseMatrix0 = DenseMatrix.fromCSV("   ");
      Matrix matrix0 = Matrix.identity(22);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(vectorAccumulator0).accumulate();
      matrix0.foldRows(vectorAccumulator0);
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      matrix0.each(matrixProcedure0);
      denseMatrix0.minInRow(793);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Matrix matrix0 = Matrix.zero(1149, 5);
      DecimalFormat decimalFormat0 = new DecimalFormat();
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.zero(1149, 5);
      Matrix matrix1 = basic2DMatrix0.removeRow(15);
      matrix1.shuffle();
      matrix0.rowMajorIterator();
      basic2DMatrix0.copyOfShape(15, 3);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Matrix matrix0 = Matrix.zero(0, 1149);
      Matrix matrix1 = Matrix.zero(1149, 5);
      DecimalFormat decimalFormat0 = new DecimalFormat();
      decimalFormat0.setParseIntegerOnly(false);
      matrix0.mkString((NumberFormat) decimalFormat0);
      matrix1.setRow(5, (-3877.90915668));
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      NumberFormat.getIntegerInstance();
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.unit(15, 15);
      int int0 = 1644;
      Vector vector0 = Vector.unit(15);
      basic2DMatrix0.multiply(vector0);
      double[] doubleArray0 = new double[7];
      doubleArray0[2] = (double) 1644;
      doubleArray0[3] = (double) 1644;
      doubleArray0[5] = (double) 15;
      DenseVector denseVector0 = DenseVector.fromArray(doubleArray0);
      // Undeclared exception!
      try { 
        basic2DMatrix0.insertColumn(0, denseVector0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong vector length: 7. Should be: 15.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-1831.0);
      SparseVector sparseVector0 = SparseVector.fromArray(doubleArray0);
      Matrix matrix0 = sparseVector0.toRowMatrix();
      matrix0.toColumnVector();
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      RowMajorSparseMatrix.diagonal(9, 4);
      MatrixAccumulator matrixAccumulator0 = mock(MatrixAccumulator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        Matrix.zero(37, Integer.MAX_VALUE);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: use 'Integer.MAX_VALUE - 1' instead.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.longs();
      Matrix matrix0 = Matrix.random(0, 0, mockRandom0);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      matrix0.equals((Object) vectorAccumulator0);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      matrix0.transformRow(17, vectorFunction0);
      // Undeclared exception!
      try { 
        matrix0.sliceTopLeft((-1), 1491);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong slice range: [0..-1][0..1491].
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.identity(16);
      rowMajorSparseMatrix0.swapRows(16, 16);
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(16);
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.unit(1, 16);
      basic2DMatrix0.rank();
      cRSMatrix0.toCSV();
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      DenseMatrix.identity(0);
      Basic2DMatrix basic2DMatrix0 = (Basic2DMatrix)Matrix.zero(7, 7);
      DecimalFormat decimalFormat0 = new DecimalFormat();
      decimalFormat0.setParseIntegerOnly(true);
      basic2DMatrix0.mkString((NumberFormat) decimalFormat0);
      // Undeclared exception!
      try { 
        basic2DMatrix0.ensureIndexesAreInBounds(1944, 4164);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '1944' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.identity(3);
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.identity(3);
      Matrix matrix0 = rowMajorSparseMatrix0.insert((Matrix) basic2DMatrix0);
      rowMajorSparseMatrix0.mkString("uHa x=3dW/H+PFO<9", "uHa x=3dW/H+PFO<9");
      // Undeclared exception!
      try { 
        matrix0.insert((Matrix) rowMajorSparseMatrix0, 3, 1793, 4, 3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Destination position out of bounds: 3, 1793
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Matrix matrix0 = Matrix.zero(1149, 1149);
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(16, (-2783.987174095405));
      Matrix matrix1 = matrix0.insert((Matrix) cRSMatrix0, 7, 16, (-3707), 3396, (-2147479589), 1);
      matrix1.removeLastRow();
      cRSMatrix0.toCSV();
      cRSMatrix0.toCSV();
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      OoPlaceVectorHadamardProduct ooPlaceVectorHadamardProduct0 = new OoPlaceVectorHadamardProduct();
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      DenseVector denseVector0 = DenseVector.fromCollection(linkedList0);
      Vector vector0 = ooPlaceVectorHadamardProduct0.apply(denseVector0, denseVector0);
      Vector vector1 = vector0.blank();
      Vector vector2 = vector1.add((Vector) denseVector0);
      Matrix matrix0 = vector2.toColumnMatrix();
      // Undeclared exception!
      try { 
        matrix0.removeFirstRow();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..-1
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.longs();
      Matrix matrix0 = Matrix.random(0, 0, mockRandom0);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      matrix0.equals((Object) vectorAccumulator0);
      mockRandom0.nextBoolean();
      Matrix matrix1 = Matrix.zero(5, 5);
      // Undeclared exception!
      try { 
        matrix1.subtract((Matrix) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.DenseMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      CRSMatrix.identity(10);
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(10, (-4485.0));
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorAccumulator0).accumulate();
      cRSMatrix0.foldNonZeroInColumn(10, vectorAccumulator0);
      cRSMatrix0.product();
      cRSMatrix0.nonZeroRowMajorIterator();
      RowMajorSparseMatrix.identity(10);
      cRSMatrix0.toCSV();
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.identity(0);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      denseMatrix0.euclideanNorm();
      Matrix matrix0 = denseMatrix0.add((double) 0);
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.identity(0);
      rowMajorSparseMatrix0.blankOfColumns(10);
      denseMatrix0.toCSV();
      int int0 = Double.MAX_EXPONENT;
      denseMatrix0.setRow(10, (double) 0);
      matrix0.updateColumn(5, vectorFunction0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.zero(0, 0);
      MockRandom mockRandom0 = new MockRandom(0);
      basic2DMatrix0.rotate();
      Matrix matrix0 = basic2DMatrix0.copyOfRows(0);
      basic2DMatrix0.blankOfShape(0, 0);
      NumberFormat.getIntegerInstance();
      NumberFormat.getIntegerInstance();
      matrix0.trace();
      matrix0.diagonalProduct();
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      CRSMatrix.diagonal(10, (-4485.0));
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.identity(10);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        rowMajorSparseMatrix0.updateRow(10, vectorFunction0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 11
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix$5", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.diagonal(798, 798);
      DenseMatrix denseMatrix0 = rowMajorSparseMatrix0.toDenseMatrix();
      NumberFormat numberFormat0 = NumberFormat.getInstance();
      double double0 = 432.569;
      denseMatrix0.removeColumn(1);
      denseMatrix0.equals((Matrix) rowMajorSparseMatrix0, double0);
      String string0 = null;
      String string1 = "";
      denseMatrix0.mkString(numberFormat0, string0, string1);
      DenseMatrix.fromCSV(string0);
      OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new OoPlaceMatricesSubtraction();
      rowMajorSparseMatrix0.manhattanNorm();
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      CRSMatrix.identity(10);
      String string0 = "l*!6$&8y|aKRDg";
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.nextBoolean();
      Matrix matrix0 = Matrix.randomSymmetric(10, mockRandom0);
      // Undeclared exception!
      try { 
        matrix0.removeColumn((-450));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..9
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(10, 10);
      RowMajorSparseMatrix.identity(10);
      cRSMatrix0.toCSV();
      NumberFormat.getInstance();
      cRSMatrix0.toCSV();
      cRSMatrix0.power(614);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.constant(32, 378, 32);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      Matrix matrix0 = basic2DMatrix0.transformColumn(32, vectorFunction0);
      matrix0.insert((Matrix) basic2DMatrix0, 1523, (-4922), (-342), (-433), 3221, 378);
      double double0 = (-1567.747712581);
      matrix0.divide(double0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.identity(0);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      Matrix matrix0 = denseMatrix0.transformRow(0, vectorFunction0);
      Matrix matrix1 = matrix0.sliceTopLeft(0, 0);
      MockRandom mockRandom0 = new MockRandom(0);
      SparseMatrix sparseMatrix0 = SparseMatrix.randomSymmetric(0, (double) 0, (Random) mockRandom0);
      sparseMatrix0.setRow(0, (double) 0);
      denseMatrix0.minInRow(3);
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      matrix1.each(matrixProcedure0);
      Matrix matrix2 = sparseMatrix0.shuffle();
      MatrixOperation<Object> matrixOperation0 = (MatrixOperation<Object>) mock(MatrixOperation.class, new ViolatedAssumptionAnswer());
      doReturn(matrix2).when(matrixOperation0).apply(any(org.la4j.matrix.RowMajorSparseMatrix.class));
      MatrixMatrixOperation<Object> matrixMatrixOperation0 = (MatrixMatrixOperation<Object>) mock(MatrixMatrixOperation.class, new ViolatedAssumptionAnswer());
      doReturn(matrixOperation0).when(matrixMatrixOperation0).partiallyApply(any(org.la4j.matrix.RowMajorSparseMatrix.class));
      sparseMatrix0.apply(matrixMatrixOperation0, matrix2);
      OoPlaceMatrixByVectorMultiplication ooPlaceMatrixByVectorMultiplication0 = new OoPlaceMatrixByVectorMultiplication();
      DenseMatrix.fromCSV("   ");
      int int0 = 3;
      DenseMatrix denseMatrix1 = DenseMatrix.unit(3, 1702);
      // Undeclared exception!
      try { 
        denseMatrix1.foldColumns((VectorAccumulator) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.Vectors$24", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.identity(0);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.identity(0);
      rowMajorSparseMatrix0.swapColumns(0, 348);
      rowMajorSparseMatrix0.blankOfColumns(10);
      denseMatrix0.toCSV();
      Integer integer0 = new Integer(10);
      // Undeclared exception!
      try { 
        Matrix.zero((-1763), 0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.identity(0);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      Matrix matrix0 = denseMatrix0.sliceTopLeft(0, 0);
      matrix0.euclideanNorm();
      Basic2DMatrix.constant(0, 0, 0);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      matrix0.foldRows(vectorAccumulator0);
      Double double0 = new Double(1.0);
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      matrix0.each(matrixProcedure0);
      OoPlaceMatrixByVectorMultiplication ooPlaceMatrixByVectorMultiplication0 = new OoPlaceMatrixByVectorMultiplication();
      matrix0.transpose();
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.longs();
      Matrix matrix0 = Matrix.random(0, 0, mockRandom0);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      byte[] byteArray0 = new byte[4];
      mockRandom0.nextBoolean();
      byteArray0[0] = (byte)54;
      MatrixAccumulator matrixAccumulator0 = mock(MatrixAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(1879.0).when(matrixAccumulator0).accumulate();
      matrix0.fold(matrixAccumulator0);
      byteArray0[1] = (byte)92;
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.unit((byte)54, 12);
      basic2DMatrix0.transpose();
      basic2DMatrix0.euclideanNorm();
      ChoiceFormat choiceFormat0 = new ChoiceFormat("general");
      choiceFormat0.setParseIntegerOnly(false);
      // Undeclared exception!
      try { 
        basic2DMatrix0.mkString((NumberFormat) choiceFormat0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("java.text.ChoiceFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.identity(2);
      MockRandom mockRandom0 = new MockRandom(0);
      denseMatrix0.rotate();
      Matrix matrix0 = denseMatrix0.copyOfRows(2);
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.randomSymmetric(37, mockRandom0);
      Matrix matrix1 = matrix0.shuffle();
      matrix1.rowMajorIterator();
      // Undeclared exception!
      try { 
        basic2DMatrix0.copyOfShape((-225), 37);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: -225x37
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      int int0 = 7;
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(7);
      cRSMatrix0.setAll(0);
      double[] doubleArray0 = new double[0];
      Vector vector0 = Vector.fromArray(doubleArray0);
      // Undeclared exception!
      try { 
        cRSMatrix0.insertRow(5, vector0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong vector length: 0. Should be: 7.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(2482, 10);
      cRSMatrix0.toCSV();
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      DenseMatrix.identity(0);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.identity(0);
      // Undeclared exception!
      try { 
        rowMajorSparseMatrix0.power((-2567));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The exponent should be positive: -2567.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      int int0 = 0;
      DenseMatrix denseMatrix0 = DenseMatrix.identity(0);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      Matrix matrix0 = denseMatrix0.transformRow(0, vectorFunction0);
      matrix0.sliceTopLeft(0, 0);
      int int1 = 0;
      MockRandom mockRandom0 = new MockRandom(0);
      SparseMatrix sparseMatrix0 = SparseMatrix.randomSymmetric(0, (double) 0, (Random) mockRandom0);
      sparseMatrix0.setRow(0, (double) 0);
      sparseMatrix0.swapColumns((-2046), (-2046));
      // Undeclared exception!
      try { 
        sparseMatrix0.setRow((-2046), 0.0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2046
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix$5", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix(3, 3);
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      Basic2DMatrix basic2DMatrix1 = null;
      cRSMatrix0.setColumn(765, (double) 765);
      // Undeclared exception!
      try { 
        cRSMatrix0.insert((Matrix) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.identity(0);
      denseMatrix0.add((double) 0);
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(0);
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.identity(0);
      cRSMatrix0.toCSV();
      rowMajorSparseMatrix0.hadamardProduct(cRSMatrix0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      CRSMatrix.identity(10);
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(10, (-4485.0));
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.identity(10);
      cRSMatrix0.toCSV();
      // Undeclared exception!
      try { 
        cRSMatrix0.insert((Matrix) rowMajorSparseMatrix0, 1, Integer.MAX_VALUE, Integer.MAX_VALUE, 4, 10, 4);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Destination position out of bounds: 2147483647, 4
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.identity(0);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.identity(0);
      rowMajorSparseMatrix0.blankOfColumns(10);
      denseMatrix0.toCSV();
      Integer integer0 = new Integer(10);
      int[] intArray0 = new int[1];
      // Undeclared exception!
      try { 
        denseMatrix0.select(intArray0, intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(0);
      SparseMatrix sparseMatrix0 = SparseMatrix.randomSymmetric(0, (double) 0, (Random) mockRandom0);
      RowMajorSparseMatrix.identity(0);
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      MatrixOperation<Object> matrixOperation0 = (MatrixOperation<Object>) mock(MatrixOperation.class, new ViolatedAssumptionAnswer());
      doReturn(sparseMatrix0).when(matrixOperation0).apply(any(org.la4j.matrix.RowMajorSparseMatrix.class));
      MatrixMatrixOperation<Object> matrixMatrixOperation0 = (MatrixMatrixOperation<Object>) mock(MatrixMatrixOperation.class, new ViolatedAssumptionAnswer());
      doReturn(matrixOperation0).when(matrixMatrixOperation0).partiallyApply(any(org.la4j.matrix.RowMajorSparseMatrix.class));
      sparseMatrix0.apply(matrixMatrixOperation0, (Matrix) sparseMatrix0);
      OoPlaceMatrixByVectorMultiplication ooPlaceMatrixByVectorMultiplication0 = new OoPlaceMatrixByVectorMultiplication();
      DenseMatrix.fromCSV("   ");
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      sparseMatrix0.transform(matrixFunction0);
      // Undeclared exception!
      try { 
        sparseMatrix0.sliceBottomRight(0, 8);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong slice range: [0..0][8..0].
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      OoPlaceMatrixByVectorMultiplication ooPlaceMatrixByVectorMultiplication0 = new OoPlaceMatrixByVectorMultiplication();
      DenseMatrix denseMatrix0 = DenseMatrix.fromCSV("   ");
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      denseMatrix0.forEach(consumer0);
      Double double0 = new Double(10);
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      denseMatrix0.each(matrixProcedure0);
      denseMatrix0.manhattanNorm();
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      DecimalFormat decimalFormat0 = new DecimalFormat();
      InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new InPlaceCopyMatrixToMatrix();
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix();
      RowMajorSparseMatrix rowMajorSparseMatrix0 = basic2DMatrix0.toRowMajorSparseMatrix();
      CRSMatrix cRSMatrix0 = CRSMatrix.block(basic2DMatrix0, basic2DMatrix0, rowMajorSparseMatrix0, basic2DMatrix0);
      CRSMatrix cRSMatrix1 = (CRSMatrix)inPlaceCopyMatrixToMatrix0.applySimple((DenseMatrix) basic2DMatrix0, (SparseMatrix) cRSMatrix0);
      cRSMatrix1.ensureDimensionsAreCorrect(10, 960);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.identity(0);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      Matrix matrix0 = denseMatrix0.transformRow(0, vectorFunction0);
      matrix0.max();
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      matrix0.update(matrixFunction0);
      // Undeclared exception!
      try { 
        DenseMatrix.fromCSV("IO^?9k8^");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.identity(0);
      rowMajorSparseMatrix0.blankOfColumns(0);
      int int0 = Double.MAX_EXPONENT;
      rowMajorSparseMatrix0.mkString("Wrong slice range: [", "org.la4j.LinearAlgebra$InverterFactory$3");
      // Undeclared exception!
      try { 
        rowMajorSparseMatrix0.removeLastRow();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..-1
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      DecimalFormat decimalFormat0 = new DecimalFormat();
      String string0 = "%%MatrixMarket";
      // Undeclared exception!
      try { 
        Basic2DMatrix.fromMatrixMarket("%%MatrixMarket");
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.StringTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.longs();
      Matrix matrix0 = Matrix.random(0, 0, mockRandom0);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      byte[] byteArray0 = new byte[20];
      mockRandom0.nextBoolean();
      matrix0.equals((Object) null);
      mockRandom0.nextBytes(byteArray0);
      // Undeclared exception!
      try { 
        mockRandom0.longs((long) (byte)54, (long) (byte)54, 0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // bound must be greater than origin
         //
         verifyException("java.util.Random", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.identity(0);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.unit(0, 0);
      denseMatrix0.equals((Matrix) basic2DMatrix0, (-2444.356));
      OoPlaceOuterProduct ooPlaceOuterProduct0 = new OoPlaceOuterProduct();
      NumberFormat.getInstance();
      basic2DMatrix0.determinant();
      MockRandom mockRandom0 = new MockRandom(0);
      CRSMatrix.diagonal(1466, 4.440892098500626E-14);
      // Undeclared exception!
      try { 
        basic2DMatrix0.removeLastColumn();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..-1
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      int int0 = 1149;
      int int1 = 5;
      Matrix matrix0 = Matrix.zero(1149, 5);
      DecimalFormat decimalFormat0 = new DecimalFormat();
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      int int2 = 32;
      Matrix matrix1 = matrix0.insert((Matrix) cRSMatrix0, (-2740), 1149, 5, (-731), 1149, 32);
      matrix1.removeLastRow();
      MockRandom mockRandom0 = new MockRandom();
      CRSMatrix cRSMatrix1 = CRSMatrix.random(int2, int1, (double) int0, (Random) mockRandom0);
      cRSMatrix1.toCSV();
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      int int0 = 0;
      DenseMatrix denseMatrix0 = DenseMatrix.identity(0);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      MockRandom mockRandom0 = new MockRandom(0);
      Matrix matrix0 = denseMatrix0.rotate();
      denseMatrix0.copyOfRows(0);
      ChoiceFormat choiceFormat0 = new ChoiceFormat("'B%\">WMOxh[>32(");
      choiceFormat0.setParseIntegerOnly(true);
      matrix0.mkString((NumberFormat) choiceFormat0);
      denseMatrix0.kroneckerProduct(matrix0);
      // Undeclared exception!
      try { 
        Basic2DMatrix.fromCSV("'B%\">WMOxh[>32(");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      int int0 = 10;
      DenseMatrix denseMatrix0 = DenseMatrix.identity(10);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        denseMatrix0.transformRow(10, vectorFunction0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 10
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.diagonal(798, 798);
      NumberFormat.getInstance();
      MockRandom mockRandom0 = new MockRandom(798);
      AdvancedMatrixPredicate advancedMatrixPredicate0 = mock(AdvancedMatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(advancedMatrixPredicate0).test(any(org.la4j.Matrix.class));
      rowMajorSparseMatrix0.is(advancedMatrixPredicate0);
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(9, 4.9E-324);
      Matrix matrix0 = cRSMatrix0.blankOfRows(798);
      cRSMatrix0.toCSV();
      matrix0.norm();
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.identity(0);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      Matrix matrix0 = denseMatrix0.sliceTopLeft(0, 0);
      matrix0.euclideanNorm();
      Matrix matrix1 = matrix0.add(3882.9);
      denseMatrix0.blankOfColumns(Integer.MAX_VALUE);
      matrix0.updateRow((-597), (VectorFunction) null);
      // Undeclared exception!
      try { 
        matrix1.insert(matrix0, 1133, Integer.MAX_VALUE, 9, 1551, 10, (-1565));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot have negative rows or columns: 10x-1565
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      OoPlaceMatrixByVectorMultiplication ooPlaceMatrixByVectorMultiplication0 = new OoPlaceMatrixByVectorMultiplication();
      DenseMatrix denseMatrix0 = DenseMatrix.fromCSV("   ");
      Double double0 = new Double(10);
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      denseMatrix0.each(matrixProcedure0);
      denseMatrix0.max();
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.identity(0);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      Matrix matrix0 = denseMatrix0.transformRow(0, vectorFunction0);
      matrix0.sliceTopLeft(0, 0);
      int int0 = 501;
      // Undeclared exception!
      try { 
        denseMatrix0.removeColumn(501);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..-1
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Matrix matrix0 = Matrix.zero(6, 5);
      DecimalFormat decimalFormat0 = new DecimalFormat();
      Double double0 = new Double(432.569);
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      matrix0.setAll(432.569);
      matrix0.each(matrixProcedure0);
      matrix0.removeLastRow();
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.identity(0);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      Matrix matrix0 = denseMatrix0.transformRow(0, vectorFunction0);
      Matrix matrix1 = matrix0.sliceTopLeft(0, 0);
      MockRandom mockRandom0 = new MockRandom(0);
      SparseMatrix sparseMatrix0 = SparseMatrix.randomSymmetric(0, (double) 0, (Random) mockRandom0);
      denseMatrix0.minInRow(3);
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      matrix1.each(matrixProcedure0);
      Matrix matrix2 = sparseMatrix0.shuffle();
      MatrixOperation<Object> matrixOperation0 = (MatrixOperation<Object>) mock(MatrixOperation.class, new ViolatedAssumptionAnswer());
      doReturn(sparseMatrix0).when(matrixOperation0).apply(any(org.la4j.matrix.RowMajorSparseMatrix.class));
      MatrixMatrixOperation<Object> matrixMatrixOperation0 = (MatrixMatrixOperation<Object>) mock(MatrixMatrixOperation.class, new ViolatedAssumptionAnswer());
      doReturn(matrixOperation0).when(matrixMatrixOperation0).partiallyApply(any(org.la4j.matrix.RowMajorSparseMatrix.class));
      sparseMatrix0.apply(matrixMatrixOperation0, matrix2);
      OoPlaceMatrixByVectorMultiplication ooPlaceMatrixByVectorMultiplication0 = new OoPlaceMatrixByVectorMultiplication();
      DenseMatrix denseMatrix1 = DenseMatrix.fromCSV("   ");
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      sparseMatrix0.equals((Object) denseMatrix1);
      CRSMatrix cRSMatrix0 = new CRSMatrix(0, 0, 0);
      // Undeclared exception!
      try { 
        sparseMatrix0.sliceBottomRight(0, 8);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong slice range: [0..0][8..0].
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      NumberFormat.getIntegerInstance();
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.identity(3);
      int int0 = 1644;
      double[] doubleArray0 = new double[7];
      doubleArray0[3] = (double) 1644;
      doubleArray0[5] = (double) 3;
      DenseVector denseVector0 = DenseVector.fromArray(doubleArray0);
      // Undeclared exception!
      try { 
        basic2DMatrix0.insertColumn(3, denseVector0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..2
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      int int0 = Integer.MAX_VALUE;
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) Integer.MAX_VALUE;
      doubleArray0[1] = (double) Integer.MAX_VALUE;
      doubleArray0[2] = (double) Integer.MAX_VALUE;
      doubleArray0[3] = (double) Integer.MAX_VALUE;
      doubleArray0[4] = (double) Integer.MAX_VALUE;
      doubleArray0[5] = (double) Integer.MAX_VALUE;
      // Undeclared exception!
      try { 
        CRSMatrix.from1DArray(Integer.MAX_VALUE, Integer.MAX_VALUE, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: use 'Integer.MAX_VALUE - 1' instead.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.identity(0);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(0, 0, 0);
      cRSMatrix0.blankOfColumns(10);
      denseMatrix0.toCSV();
      Integer integer0 = new Integer(10);
      int[] intArray0 = new int[1];
      denseMatrix0.spliterator();
      cRSMatrix0.blankOfShape(0, 0);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.foldRows(vectorAccumulator0);
      denseMatrix0.updateColumn((int) integer0, vectorFunction0);
      cRSMatrix0.toSparseMatrix();
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.diagonal(798, 798);
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix(798, 10);
      NumberFormat.getInstance();
      basic2DMatrix0.equals((Matrix) rowMajorSparseMatrix0, (double) 798);
      OoPlaceOuterProduct ooPlaceOuterProduct0 = new OoPlaceOuterProduct();
      NumberFormat.getInstance();
      double double0 = new Integer(798);
      MockRandom mockRandom0 = new MockRandom(0L);
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(2883, Double.NEGATIVE_INFINITY);
      basic2DMatrix0.removeLastColumn();
      cRSMatrix0.toCSV();
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.identity(0);
      denseMatrix0.columnMajorIterator();
      MockRandom mockRandom0 = new MockRandom(0);
      Matrix.zero(0, 0);
      DecimalFormat decimalFormat0 = new DecimalFormat();
      // Undeclared exception!
      try { 
        DenseMatrix.fromCSV("Uo!h.");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(758, 758);
      OoPlaceVectorsAddition ooPlaceVectorsAddition0 = new OoPlaceVectorsAddition();
      DenseVector denseVector0 = DenseVector.unit(796);
      DenseVector denseVector1 = denseVector0.toDenseVector();
      double[] doubleArray0 = new double[0];
      SparseVector sparseVector0 = SparseVector.fromArray(doubleArray0);
      Vector vector0 = ooPlaceVectorsAddition0.applySymmetric(denseVector1, sparseVector0);
      // Undeclared exception!
      try { 
        cRSMatrix0.setColumn(796, vector0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong vector length: 796. Should be: 758.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.longs();
      Matrix matrix0 = Matrix.random(0, 0, mockRandom0);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      mockRandom0.nextBoolean();
      matrix0.product();
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix(0, 0);
      CCSMatrix cCSMatrix0 = CCSMatrix.block(matrix0, matrix0, matrix0, basic2DMatrix0);
      Matrix matrix1 = cCSMatrix0.power(379);
      Matrix matrix2 = cCSMatrix0.blankOfColumns(397);
      matrix2.removeLastColumn();
      RowMajorSparseMatrix rowMajorSparseMatrix0 = matrix1.toRowMajorSparseMatrix();
      Matrix matrix3 = Matrix.zero(397, 0);
      DecimalFormat decimalFormat0 = new DecimalFormat();
      decimalFormat0.setParseIntegerOnly(false);
      rowMajorSparseMatrix0.mkString((NumberFormat) null);
      // Undeclared exception!
      try { 
        matrix3.removeFirstColumn();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..-1
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(10);
      CRSMatrix cRSMatrix1 = new CRSMatrix(10, 10);
      LinearAlgebra.InverterFactory linearAlgebra_InverterFactory0 = LinearAlgebra.InverterFactory.SMART;
      cRSMatrix1.withInverter(linearAlgebra_InverterFactory0);
      CRSMatrix cRSMatrix2 = new CRSMatrix(10, 10);
      cRSMatrix1.toCSV();
      cRSMatrix2.toBinary();
      cRSMatrix0.determinant();
      // Undeclared exception!
      try { 
        cRSMatrix1.iteratorOfRow(425);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 425
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix$5", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      NumberFormat.getIntegerInstance();
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.identity(3);
      int int0 = 1644;
      double[] doubleArray0 = new double[7];
      doubleArray0[2] = (double) 1644;
      doubleArray0[3] = (double) 1644;
      DenseVector denseVector0 = DenseVector.fromArray(doubleArray0);
      // Undeclared exception!
      try { 
        basic2DMatrix0.insertColumn(0, denseVector0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong vector length: 7. Should be: 3.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      int int0 = 0;
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(0);
      double[] doubleArray0 = new double[9];
      cRSMatrix0.setAll(0);
      Vector vector0 = Vector.fromArray(doubleArray0);
      Matrix matrix0 = Matrix.zero(0, 0);
      // Undeclared exception!
      try { 
        matrix0.insertColumn((-1), vector0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..-1
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.identity(0);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      Matrix matrix0 = denseMatrix0.sliceTopLeft(0, 0);
      double double0 = new Integer(0);
      denseMatrix0.add((double) 0);
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.identity(0);
      Matrix matrix1 = rowMajorSparseMatrix0.blankOfColumns(10);
      matrix0.toCSV();
      CRSMatrix.identity(10);
      rowMajorSparseMatrix0.iteratorOfColumn(0);
      matrix0.rank();
      CRSMatrix.diagonal(10, (-4485.0));
      // Undeclared exception!
      try { 
        matrix1.insert(matrix0, 32, (-355), 0, 6, 1644, 1691);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot have negative source position: 0, 6
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.identity(0);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      Matrix matrix0 = denseMatrix0.transformRow(0, vectorFunction0);
      matrix0.minInColumn(448);
      matrix0.equals((Object) matrix0);
      DecimalFormat decimalFormat0 = new DecimalFormat();
      denseMatrix0.mkString((NumberFormat) decimalFormat0);
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(matrixPredicate0).test(anyInt() , anyInt());
      denseMatrix0.is(matrixPredicate0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      OoPlaceMatrixByVectorMultiplication ooPlaceMatrixByVectorMultiplication0 = new OoPlaceMatrixByVectorMultiplication();
      DenseMatrix denseMatrix0 = DenseMatrix.fromCSV("   ");
      Double double0 = new Double(10);
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(matrixPredicate0).test(anyInt() , anyInt());
      denseMatrix0.non(matrixPredicate0);
      denseMatrix0.add((-346.25));
      // Undeclared exception!
      try { 
        CRSMatrix.fromMatrixMarket("   ");
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.StringTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix(798, 798);
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix();
      basic2DMatrix0.subtract(1.0);
      NumberFormat numberFormat0 = NumberFormat.getIntegerInstance();
      NumberFormat.getNumberInstance();
      basic2DMatrix0.columnMajorIterator();
      numberFormat0.setParseIntegerOnly(true);
      cRSMatrix0.trace();
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.longs();
      Matrix.random(0, 388, mockRandom0);
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.random(395, 0, mockRandom0);
      basic2DMatrix0.product();
      CCSMatrix.identity(0);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      basic2DMatrix0.updateRow(0, vectorFunction0);
      int int0 = Double.MAX_EXPONENT;
      SparseVector.zero(407);
      int int1 = Double.MAX_EXPONENT;
      basic2DMatrix0.setRow((-530), (-52.0));
      // Undeclared exception!
      try { 
        basic2DMatrix0.setColumn(1023, (double) 388);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.longs();
      Matrix matrix0 = Matrix.random(0, 0, mockRandom0);
      matrix0.toString();
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      matrix0.equals((Object) vectorAccumulator0);
      mockRandom0.nextBoolean();
      Matrix matrix1 = Matrix.zero(5, 5);
      DecimalFormat decimalFormat0 = new DecimalFormat();
      decimalFormat0.getDecimalFormatSymbols();
      decimalFormat0.setParseIntegerOnly(false);
      matrix1.mkString((NumberFormat) decimalFormat0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.identity(13);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      Matrix matrix0 = denseMatrix0.sliceTopLeft(13, 13);
      matrix0.euclideanNorm();
      denseMatrix0.add((double) 13);
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.identity(13);
      rowMajorSparseMatrix0.blankOfColumns(10);
      matrix0.toCSV();
      // Undeclared exception!
      try { 
        matrix0.updateRow(10, (VectorFunction) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix();
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(841, 7);
      // Undeclared exception!
      try { 
        basic2DMatrix0.add((Matrix) cCSMatrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Given matrices should have the same shape: 0x0 does not equal to 841x7.
         //
         verifyException("org.la4j.operation.ooplace.OoPlaceMatricesAddition", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      OoPlaceMatrixByVectorMultiplication ooPlaceMatrixByVectorMultiplication0 = new OoPlaceMatrixByVectorMultiplication();
      DenseMatrix denseMatrix0 = DenseMatrix.fromCSV("   ");
      Double double0 = new Double(10);
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(matrixPredicate0).test(anyInt() , anyInt());
      denseMatrix0.non(matrixPredicate0);
      denseMatrix0.add((-346.25));
      // Undeclared exception!
      try { 
        CRSMatrix.fromMatrixMarket("   ");
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.StringTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(10, 10);
      RowMajorSparseMatrix.identity(10);
      cRSMatrix0.toCSV();
      cRSMatrix0.toBinary();
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix(750, 37);
      // Undeclared exception!
      basic2DMatrix0.multiplyByItsTranspose();
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      int int0 = 523;
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.identity(523);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      Matrix matrix0 = columnMajorSparseMatrix0.transform(matrixFunction0);
      int int1 = 1168;
      long long0 = (-1611L);
      MockRandom mockRandom0 = new MockRandom(long0);
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.randomSymmetric(int1, mockRandom0);
      double double0 = 580.93667072;
      double double1 = (-1357.319);
      mockRandom0.doubles(double0, double1);
      Vector vector0 = basic2DMatrix0.toRowVector();
      matrix0.setRow(int1, vector0);
      matrix0.toMatrixMarket();
      matrix0.copyOfColumns(int0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      int int0 = 798;
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix(798, 798);
      NumberFormat.getInstance();
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      // Undeclared exception!
      basic2DMatrix0.update(matrixFunction0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(798, 798);
      DenseMatrix denseMatrix0 = cRSMatrix0.toDenseMatrix();
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(matrixPredicate0).test(anyInt() , anyInt());
      doReturn(false).when(matrixPredicate0).test(anyInt() , anyInt() , anyDouble());
      denseMatrix0.non(matrixPredicate0);
      NumberFormat.getInstance();
      denseMatrix0.determinant();
      long long0 = (-2684L);
      MockRandom mockRandom0 = new MockRandom(long0);
      String string0 = "A{&x*FL";
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.fromMatrixMarket(string0);
      Double double0 = new Double(long0);
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      basic2DMatrix0.each(matrixProcedure0);
      OoPlaceMatrixByVectorMultiplication ooPlaceMatrixByVectorMultiplication0 = new OoPlaceMatrixByVectorMultiplication();
      int int0 = 820;
      int int1 = (-2090970919);
      denseMatrix0.sliceBottomRight(int0, int1);
      Matrix.randomSymmetric(int0, mockRandom0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      double[][] doubleArray0 = new double[4][1];
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = (-1989.193748146);
      doubleArray1[1] = 798.0;
      doubleArray1[2] = 2775.07913448;
      doubleArray1[3] = 1674.0;
      doubleArray1[4] = (-3278.5177945189503);
      doubleArray1[5] = (-1.0);
      doubleArray1[6] = 0.0;
      doubleArray1[7] = 1321.326;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[2];
      doubleArray2[0] = 1321.326;
      doubleArray2[1] = 1674.0;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[5];
      doubleArray3[0] = (-1.0);
      doubleArray3[1] = (-1.0);
      doubleArray3[2] = 2775.07913448;
      doubleArray3[3] = 798.0;
      doubleArray3[4] = 1674.0;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[6];
      doubleArray4[0] = (-1.0);
      doubleArray4[1] = 798.0;
      doubleArray4[2] = 100.0;
      doubleArray4[3] = 0.0;
      doubleArray4[4] = 702.84454398;
      doubleArray4[5] = 2775.07913448;
      doubleArray0[3] = doubleArray4;
      DenseMatrix denseMatrix0 = DenseMatrix.from2DArray(doubleArray0);
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        denseMatrix0.select(intArray0, intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No rows or columns selected.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.identity(0);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      Matrix matrix0 = denseMatrix0.sliceTopLeft(0, 0);
      matrix0.euclideanNorm();
      matrix0.add(3882.9);
      Matrix matrix1 = denseMatrix0.blankOfColumns(Integer.MAX_VALUE);
      matrix1.toBinary();
      matrix0.updateRow(1346, (VectorFunction) null);
      denseMatrix0.swapColumns(22, 1346);
      matrix1.maxInColumn(Integer.MAX_VALUE);
      Matrix.random(0, 1346, (Random) null);
      denseMatrix0.updateColumn(0, (VectorFunction) null);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (double) 0;
      matrix1.maxInRow((-2366));
      doubleArray0[2] = 3882.9;
      Double double0 = new Double(Double.NEGATIVE_INFINITY);
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      matrix0.each(matrixProcedure0);
      OoPlaceMatrixByVectorMultiplication ooPlaceMatrixByVectorMultiplication0 = new OoPlaceMatrixByVectorMultiplication();
      denseMatrix0.manhattanNorm();
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      int int0 = 0;
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(0);
      double[] doubleArray0 = new double[1];
      cRSMatrix0.setAll(0);
      Vector vector0 = Vector.fromArray(doubleArray0);
      // Undeclared exception!
      try { 
        cRSMatrix0.insertRow(0, vector0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..-1
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix();
      // Undeclared exception!
      try { 
        basic2DMatrix0.toRowVector();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(0);
      CRSMatrix cRSMatrix1 = CRSMatrix.identity(0);
      cRSMatrix0.iteratorOfRow(0);
      CRSMatrix cRSMatrix2 = CRSMatrix.diagonal(1192, 0);
      // Undeclared exception!
      try { 
        cRSMatrix2.insert((Matrix) cRSMatrix1, 634, 1192, 0, 391, 1192, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Destination position out of bounds: 634, 1192
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.identity(20);
      MockRandom mockRandom0 = new MockRandom(20);
      Matrix matrix0 = denseMatrix0.rotate();
      mockRandom0.longs(9995L);
      mockRandom0.longs(9995L);
      DecimalFormat decimalFormat0 = new DecimalFormat();
      mockRandom0.nextInt();
      Matrix.random(20, 0, mockRandom0);
      CRSMatrix.identity(0);
      denseMatrix0.iteratorOfColumn(1);
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.identity(3);
      basic2DMatrix0.rank();
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      int[] intArray0 = new int[1];
      matrix0.shuffle();
      Matrix matrix1 = matrix0.select(intArray0, intArray0);
      matrix1.blankOfRows(833);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Basic2DMatrix.identity(3);
      double[] doubleArray0 = new double[7];
      doubleArray0[2] = (double) 1644;
      doubleArray0[3] = (double) 1644;
      doubleArray0[5] = (double) 3;
      CRSMatrix cRSMatrix0 = new CRSMatrix(1644, 0);
      // Undeclared exception!
      try { 
        cRSMatrix0.determinant();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Can not compute determinant of non-square matrix.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      DenseMatrix.identity(20);
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.identity(20);
      int int0 = 1789;
      // Undeclared exception!
      try { 
        rowMajorSparseMatrix0.swapRows(20, 1789);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 21
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      CRSMatrix.identity(10);
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(10, (-4474.147716198743));
      RowMajorSparseMatrix.identity(10);
      String string0 = cRSMatrix0.toCSV();
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.fromCSV(string0);
      basic2DMatrix0.determinant();
      MockRandom mockRandom0 = new MockRandom(10);
      CRSMatrix.diagonal(14, 1.0);
      basic2DMatrix0.multiplyByItsTranspose();
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix(33, 33);
      MockRandom mockRandom0 = new MockRandom(33);
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.identity(0);
      Matrix matrix0 = rowMajorSparseMatrix0.blankOfColumns(383);
      basic2DMatrix0.toCSV();
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(3994);
      basic2DMatrix0.rank();
      CRSMatrix cRSMatrix1 = CRSMatrix.diagonal(3994, 0);
      cRSMatrix1.insert((Matrix) cRSMatrix0, 7, 1, 0, 10, 33, 383);
      matrix0.toCSV();
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.identity(0);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      Matrix matrix0 = denseMatrix0.sliceTopLeft(0, 0);
      matrix0.euclideanNorm();
      Matrix matrix1 = matrix0.add(3882.9);
      Matrix matrix2 = denseMatrix0.blankOfColumns(Integer.MAX_VALUE);
      matrix0.updateRow(1346, (VectorFunction) null);
      denseMatrix0.swapColumns(22, 1346);
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      matrix1.each(matrixProcedure0);
      MatrixAccumulator matrixAccumulator0 = mock(MatrixAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(matrixAccumulator0).accumulate();
      matrix2.fold(matrixAccumulator0);
      denseMatrix0.min();
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      int int0 = 15;
      CRSMatrix.identity(15);
      double double0 = (-4485.0);
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(15, (-4485.0));
      RowMajorSparseMatrix.identity(15);
      String string0 = cRSMatrix0.toCSV();
      Basic2DMatrix.fromCSV(string0);
      // Undeclared exception!
      try { 
        Basic2DMatrix.fromMatrixMarket("(-m=,nbOc0MOc[5*0-");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong input file format: can not read header '%%MatrixMarket'.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      int int0 = 798;
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix(798, 798);
      NumberFormat.getInstance();
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        basic2DMatrix0.transformColumn(798, vectorFunction0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      int int0 = 733;
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.diagonal(733, 733);
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.identity(733);
      DecimalFormat decimalFormat0 = new DecimalFormat();
      basic2DMatrix0.equals((Matrix) rowMajorSparseMatrix0, 0.0);
      basic2DMatrix0.determinant();
      MockRandom mockRandom0 = new MockRandom(int0);
      int int1 = 9;
      int int2 = (-1099);
      CRSMatrix.diagonal(int2, int0);
      rowMajorSparseMatrix0.blankOfRows(int1);
      rowMajorSparseMatrix0.toCSV();
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.diagonal(733, 733);
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.identity(733);
      basic2DMatrix0.equals((Matrix) rowMajorSparseMatrix0, (double) 733);
      basic2DMatrix0.toCSV();
      int int0 = Double.MAX_EXPONENT;
      int int1 = 1;
      SparseVector.zero(int1);
      int int2 = 10;
      int int3 = (-835);
      double double0 = (-412.7303);
      basic2DMatrix0.setRow(int3, double0);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      basic2DMatrix0.updateColumn(int2, vectorFunction0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.identity(4931);
      // Undeclared exception!
      try { 
        cRSMatrix0.insert((Matrix) rowMajorSparseMatrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Out of bounds: Cannot add 4931 rows and 4931 cols at 0, 0 in a 0x0 matrix.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      CRSMatrix.diagonal(10, 10);
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(10, 10);
      CRSMatrix cRSMatrix0 = new CRSMatrix(10, 5, 10);
      // Undeclared exception!
      try { 
        cRSMatrix0.insert((Matrix) rowMajorSparseMatrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Out of bounds: Cannot add 10 rows and 10 cols at 0, 0 in a 10x5 matrix.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      int int0 = 0;
      CRSMatrix.identity(0);
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.identity(5077);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 5077;
      doubleArray0[1] = (double) 5077;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = 3565.0;
      DenseVector denseVector0 = DenseVector.fromArray(doubleArray0);
      int int1 = 4;
      // Undeclared exception!
      basic2DMatrix0.insertColumn(int1, denseVector0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      double[][] doubleArray0 = new double[9][6];
      double[] doubleArray1 = new double[0];
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[3];
      doubleArray2[0] = (-1668.507812831);
      doubleArray2[1] = (-1668.507812831);
      doubleArray2[2] = 96.07149;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[1];
      doubleArray3[0] = 96.07149;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[8];
      doubleArray4[0] = 100.0;
      doubleArray4[1] = (-1668.507812831);
      doubleArray4[2] = (-1668.507812831);
      doubleArray4[3] = (-1668.507812831);
      doubleArray4[4] = (-1668.507812831);
      doubleArray4[5] = 96.07149;
      doubleArray4[6] = 3707.1992004093727;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[7];
      doubleArray5[0] = (-1855.332423131);
      doubleArray5[1] = (-1668.507812831);
      doubleArray5[3] = (-1668.507812831);
      DenseMatrix denseMatrix0 = DenseMatrix.from2DArray(doubleArray0);
      denseMatrix0.copyOfShape(32, 649);
      denseMatrix0.rank();
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(20);
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.identity(0);
      Matrix matrix0 = rowMajorSparseMatrix0.blankOfColumns(383);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 383;
      Vector vector0 = Vector.fromArray(doubleArray0);
      int int0 = (-3469);
      // Undeclared exception!
      try { 
        matrix0.insertRow((-3469), vector0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..-1
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix(7, 0);
      cRSMatrix0.setAll(0);
      double[] doubleArray0 = new double[0];
      Vector vector0 = Vector.fromArray(doubleArray0);
      Matrix matrix0 = cRSMatrix0.insertRow(5, vector0);
      cRSMatrix0.toCSV();
      NumberFormat.getInstance();
      cRSMatrix0.toCSV();
      // Undeclared exception!
      try { 
        matrix0.power(7);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The number of rows in the left-hand matrix should be equal to the number of columns in the right-hand matrix: 8 does not equal to 0.
         //
         verifyException("org.la4j.operation.ooplace.OoPlaceMatricesMultiplication", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      int int0 = 7;
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(7);
      cRSMatrix0.setAll(0);
      double[] doubleArray0 = new double[0];
      Vector.fromArray(doubleArray0);
      // Undeclared exception!
      try { 
        cRSMatrix0.minInColumn((-2073));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '-2073' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }
}
