/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 02:09:29 GMT 2018
 */

package weka.gui.beans;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.AWTEventMulticaster;
import java.awt.AWTKeyStroke;
import java.awt.Component;
import java.awt.Frame;
import java.awt.HeadlessException;
import java.awt.Insets;
import java.awt.event.InputMethodListener;
import java.awt.event.MouseListener;
import java.beans.EventSetDescriptor;
import java.util.Set;
import javax.swing.JApplet;
import javax.swing.JFrame;
import javax.swing.TransferHandler;
import javax.swing.border.Border;
import javax.swing.border.LineBorder;
import javax.swing.plaf.multi.MultiViewportUI;
import javax.swing.text.DefaultCaret;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.time.chrono.MockMinguoDate;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.util.SystemInUtil;
import org.junit.runner.RunWith;
import weka.associations.AbstractAssociator;
import weka.associations.Apriori;
import weka.associations.FilteredAssociator;
import weka.attributeSelection.PrincipalComponents;
import weka.clusterers.SimpleKMeans;
import weka.core.CheckOptionHandler;
import weka.core.DenseInstance;
import weka.core.EuclideanDistance;
import weka.core.Instances;
import weka.core.ListOptions;
import weka.core.ManhattanDistance;
import weka.core.OptionHandlerJavadoc;
import weka.core.TechnicalInformationHandlerJavadoc;
import weka.core.converters.TextDirectoryLoader;
import weka.filters.AllFilter;
import weka.filters.MultiFilter;
import weka.filters.supervised.attribute.AttributeSelection;
import weka.filters.supervised.attribute.Discretize;
import weka.filters.supervised.attribute.NominalToBinary;
import weka.filters.unsupervised.attribute.Add;
import weka.gui.Logger;
import weka.gui.WekaTaskMonitor;
import weka.gui.beans.Appender;
import weka.gui.beans.AttributeSummarizer;
import weka.gui.beans.BeanVisual;
import weka.gui.beans.ClassAssigner;
import weka.gui.beans.Classifier;
import weka.gui.beans.ClassifierPerformanceEvaluator;
import weka.gui.beans.ConfigurationListener;
import weka.gui.beans.DataSetEvent;
import weka.gui.beans.DataSourceListener;
import weka.gui.beans.DataVisualizer;
import weka.gui.beans.Filter;
import weka.gui.beans.FlowByExpression;
import weka.gui.beans.InstanceEvent;
import weka.gui.beans.InstanceStreamToBatchMaker;
import weka.gui.beans.Loader;
import weka.gui.beans.MetaBean;
import weka.gui.beans.ModelPerformanceChart;
import weka.gui.beans.PredictionAppender;
import weka.gui.beans.Saver;
import weka.gui.beans.Sorter;
import weka.gui.beans.SubstringLabeler;
import weka.gui.beans.SubstringReplacer;
import weka.gui.beans.TestSetEvent;
import weka.gui.beans.TextViewer;
import weka.gui.beans.TrainingSetEvent;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Filter_ESTest extends Filter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Filter filter0 = new Filter();
      filter0.isBusy();
      Discretize discretize0 = new Discretize();
      filter0.setFilter(discretize0);
      // Undeclared exception!
      try { 
        filter0.setWrappedAlgorithm((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.gui.beans.Filter", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Filter filter0 = new Filter();
      FilteredAssociator filteredAssociator0 = new FilteredAssociator();
      weka.filters.Filter filter1 = filteredAssociator0.getFilter();
      filter0.setFilter(filter1);
      PredictionAppender predictionAppender0 = new PredictionAppender();
      Logger logger0 = predictionAppender0.m_logger;
      filter0.setLog((Logger) null);
      assertEquals("MultiFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Filter filter0 = new Filter();
      filter0.firePropertyChange("+F#", 4656.0F, (-1165.713F));
      filter0.setCustomName("+F#");
      filter0.addDataSourceListener((DataSourceListener) null);
      assertEquals("+F#", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Filter filter0 = new Filter();
      DataVisualizer dataVisualizer0 = new DataVisualizer();
      filter0.revalidate();
      filter0.addTrainingSetListener(dataVisualizer0);
      filter0.getFocusListeners();
      filter0.getFilter();
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Filter filter0 = new Filter();
      BeanVisual beanVisual0 = filter0.getVisual();
      assertEquals("AllFilter", beanVisual0.getText());
      assertEquals("weka/gui/beans/icons/DefaultFilter_animated.gif", beanVisual0.getAnimatedIconPath());
      assertEquals("weka/gui/beans/icons/DefaultFilter.gif", beanVisual0.getIconPath());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Filter filter0 = new Filter();
      filter0.addConfigurationListener((ConfigurationListener) null);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Filter filter0 = new Filter();
      filter0.enumerateRequests();
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Filter filter0 = new Filter();
      TextViewer textViewer0 = new TextViewer();
      filter0.removeTrainingSetListener(textViewer0);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Filter filter0 = new Filter();
      ClassifierPerformanceEvaluator classifierPerformanceEvaluator0 = new ClassifierPerformanceEvaluator();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      BeanVisual beanVisual0 = classifierPerformanceEvaluator0.getVisual();
      filter0.setVisual(beanVisual0);
      Sorter sorter0 = new Sorter();
      filter0.addTestSetListener(sorter0);
      ConfigurationListener configurationListener0 = mock(ConfigurationListener.class, new ViolatedAssumptionAnswer());
      filter0.removeConfigurationListener(configurationListener0);
      assertEquals("ClassifierPerformanceEvaluator", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Filter filter0 = new Filter();
      InstanceStreamToBatchMaker instanceStreamToBatchMaker0 = new InstanceStreamToBatchMaker();
      filter0.removeInstanceListener(instanceStreamToBatchMaker0);
      // Undeclared exception!
      try { 
        filter0.performRequest("WARNING: Not an incremental filter.");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // WARNING: Not an incremental filter. not supported (Filter)
         //
         verifyException("weka.gui.beans.Filter", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Filter filter0 = new Filter();
      PredictionAppender predictionAppender0 = new PredictionAppender();
      InstanceEvent instanceEvent0 = predictionAppender0.m_instanceEvent;
      filter0.notifyInstanceListeners((InstanceEvent) null);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Filter filter0 = new Filter();
      SubstringLabeler substringLabeler0 = new SubstringLabeler();
      InstanceEvent instanceEvent0 = substringLabeler0.m_ie;
      filter0.acceptInstance(instanceEvent0);
      filter0.removeDataSourceListener(substringLabeler0);
      // Undeclared exception!
      try { 
        filter0.setWrappedAlgorithm((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.gui.beans.Filter", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Filter filter0 = new Filter();
      boolean boolean0 = filter0.eventGeneratable("WARNING: Not an incremental filter.");
      assertFalse(boolean0);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Filter filter0 = new Filter();
      filter0.getWidth();
      MockMinguoDate mockMinguoDate0 = new MockMinguoDate();
      filter0.disconnectionNotification("Ranked attributes:\n", mockMinguoDate0);
      SubstringLabeler substringLabeler0 = new SubstringLabeler();
      filter0.addDataSourceListener(substringLabeler0);
      filter0.addTestSetListener(substringLabeler0);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Filter filter0 = new Filter();
      filter0.getWrappedAlgorithm();
      filter0.getColorModel();
      filter0.useDefaultVisual();
      String string0 = filter0.getCustomName();
      assertEquals("AllFilter", string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Filter filter0 = new Filter();
      filter0.setVerifyInputWhenFocusTarget(false);
      filter0.useDefaultVisual();
      filter0.removeConfigurationListener((ConfigurationListener) null);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Filter filter0 = new Filter();
      filter0.stop();
      filter0.setCustomName("PVL%xD?6:dr+*");
      Loader loader0 = new Loader();
      FileSystemHandling.shouldAllThrowIOExceptions();
      MultiFilter multiFilter0 = new MultiFilter();
      filter0.connectionNotification("Zzn_7", multiFilter0);
      assertEquals("PVL%xD?6:dr+*", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Filter filter0 = new Filter();
      TextViewer textViewer0 = new TextViewer();
      textViewer0.getGraphicsConfiguration();
      filter0.removeTestSetListener(textViewer0);
      filter0.getWrappedAlgorithm();
      boolean boolean0 = filter0.connectionAllowed("bYdGkh");
      assertTrue(boolean0);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Filter filter0 = new Filter();
      boolean boolean0 = filter0.isBusy();
      assertFalse(boolean0);
      
      ClassAssigner classAssigner0 = new ClassAssigner();
      classAssigner0.getConnectedFormat();
      DataSetEvent dataSetEvent0 = new DataSetEvent(filter0, (Instances) null);
      filter0.acceptDataSet(dataSetEvent0);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Filter filter0 = new Filter();
      Appender appender0 = new Appender();
      Instances instances0 = appender0.m_completeHeader;
      TrainingSetEvent trainingSetEvent0 = new TrainingSetEvent(filter0, (Instances) null, 20, 20, 3686, 20);
      filter0.acceptTrainingSet(trainingSetEvent0);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Filter filter0 = new Filter();
      Add add0 = new Add();
      filter0.setFilter(add0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      InstanceEvent instanceEvent0 = new InstanceEvent(fileSystemHandling0);
      filter0.acceptInstance(instanceEvent0);
      TextViewer textViewer0 = new TextViewer();
      // Undeclared exception!
      try { 
        filter0.connectionAllowed((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Filter filter0 = new Filter();
      filter0.grabFocus();
      Classifier classifier0 = new Classifier();
      filter0.globalInfo();
      filter0.getWrappedAlgorithm();
      boolean boolean0 = classifier0.m_reject;
      Loader loader0 = new Loader();
      filter0.disconnectionNotification("D0[", loader0);
      filter0.addInstanceListener(classifier0);
      SubstringLabeler substringLabeler0 = new SubstringLabeler();
      InstanceEvent instanceEvent0 = substringLabeler0.m_ie;
      // Undeclared exception!
      try { 
        filter0.notifyInstanceListeners(instanceEvent0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.gui.beans.Classifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "s82}yq*c");
      Filter filter0 = new Filter();
      ClassAssigner classAssigner0 = new ClassAssigner();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "s82}yq*c");
      classAssigner0.transferFocusBackward();
      filter0.addInstanceListener(classAssigner0);
      classAssigner0.setFocusTraversalKeysEnabled(false);
      filter0.addDataSourceListener(classAssigner0);
      filter0.acceptDataSet((DataSetEvent) null);
      ClassAssigner classAssigner1 = new ClassAssigner();
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 2205.0;
      doubleArray0[1] = 2464.0;
      doubleArray0[2] = 2464.0;
      doubleArray0[3] = 2464.0;
      doubleArray0[4] = 2464.0;
      doubleArray0[5] = 2464.0;
      DenseInstance denseInstance0 = new DenseInstance(2464.0, doubleArray0);
      InstanceEvent instanceEvent0 = new InstanceEvent(classAssigner1, denseInstance0, 6);
      filter0.notifyInstanceListeners(instanceEvent0);
      filter0.getWrappedAlgorithm();
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Filter filter0 = new Filter();
      Add add0 = new Add();
      Add add1 = new Add();
      filter0.setFilter(add1);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      OptionHandlerJavadoc optionHandlerJavadoc0 = new OptionHandlerJavadoc();
      InstanceEvent instanceEvent0 = new InstanceEvent(optionHandlerJavadoc0);
      SubstringReplacer substringReplacer0 = new SubstringReplacer();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)47;
      byteArray0[1] = (byte)39;
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte)39;
      byteArray0[5] = (byte)39;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      InstanceEvent instanceEvent1 = substringReplacer0.m_ie;
      instanceEvent1.setStatus((-448));
      filter0.acceptInstance(instanceEvent1);
      TextViewer textViewer0 = new TextViewer();
      CheckOptionHandler checkOptionHandler0 = new CheckOptionHandler();
      SystemInUtil.addInputLine("Z");
      MetaBean metaBean0 = new MetaBean();
      filter0.getInputVerifier();
      FlowByExpression flowByExpression0 = new FlowByExpression();
      ClassAssigner classAssigner0 = new ClassAssigner();
      classAssigner0.getConnectedFormat();
      DataSetEvent dataSetEvent0 = new DataSetEvent(instanceEvent0, (Instances) null);
      filter0.acceptDataSet(dataSetEvent0);
      filter0.connectionAllowed("@data");
      Frame frame0 = null;
      try {
        frame0 = new Frame("k[$L1");
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Filter filter0 = new Filter();
      FlowByExpression flowByExpression0 = new FlowByExpression();
      filter0.removeTestSetListener(flowByExpression0);
      System.setCurrentTimeMillis((-1L));
      AllFilter allFilter0 = new AllFilter();
      filter0.setWrappedAlgorithm(allFilter0);
      String string0 = "Total Population: ";
      // Undeclared exception!
      try { 
        filter0.connectionNotification("Total Population: ", (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Hashtable", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Filter filter0 = new Filter();
      NominalToBinary nominalToBinary0 = new NominalToBinary();
      filter0.setFilter(nominalToBinary0);
      ClassifierPerformanceEvaluator classifierPerformanceEvaluator0 = new ClassifierPerformanceEvaluator();
      SimpleKMeans simpleKMeans0 = new SimpleKMeans();
      simpleKMeans0.getClusterCentroids();
      ManhattanDistance manhattanDistance0 = new ManhattanDistance((Instances) null);
      EuclideanDistance euclideanDistance0 = new EuclideanDistance();
      FlowByExpression flowByExpression0 = new FlowByExpression();
      filter0.acceptTrainingSet((TrainingSetEvent) null);
      TrainingSetEvent trainingSetEvent0 = new TrainingSetEvent(classifierPerformanceEvaluator0, (Instances) null, (-33), (-33), (-33), 2);
      filter0.acceptTrainingSet((TrainingSetEvent) null);
      // Undeclared exception!
      try { 
        filter0.performRequest("TJ/FRk");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // TJ/FRk not supported (Filter)
         //
         verifyException("weka.gui.beans.Filter", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-60);
      byteArray0[1] = (byte)117;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Filter filter0 = new Filter();
      InstanceStreamToBatchMaker instanceStreamToBatchMaker0 = new InstanceStreamToBatchMaker();
      filter0.removeInstanceListener(instanceStreamToBatchMaker0);
      Appender appender0 = new Appender();
      appender0.remove((Component) instanceStreamToBatchMaker0);
      appender0.hasFocus();
      filter0.addTestSetListener(appender0);
      // Undeclared exception!
      try { 
        filter0.connectionAllowed((EventSetDescriptor) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.gui.beans.Filter", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Filter filter0 = new Filter();
      AllFilter allFilter0 = new AllFilter();
      SubstringReplacer substringReplacer0 = new SubstringReplacer();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      MultiFilter multiFilter0 = new MultiFilter();
      SubstringReplacer substringReplacer1 = new SubstringReplacer();
      filter0.connectionNotification("h/Jp;Q", substringReplacer1);
      ClassifierPerformanceEvaluator classifierPerformanceEvaluator0 = new ClassifierPerformanceEvaluator();
      ModelPerformanceChart modelPerformanceChart0 = new ModelPerformanceChart();
      JFrame jFrame0 = modelPerformanceChart0.m_popupFrame;
      boolean boolean0 = filter0.eventGeneratable("h/Jp;Q");
      PredictionAppender predictionAppender0 = new PredictionAppender();
      DefaultCaret defaultCaret0 = new DefaultCaret();
      AWTEventMulticaster.remove((MouseListener) defaultCaret0, (MouseListener) defaultCaret0);
      predictionAppender0.removeMouseListener(defaultCaret0);
      InstanceEvent instanceEvent0 = predictionAppender0.m_instanceEvent;
      filter0.acceptInstance((InstanceEvent) null);
      Saver saver0 = new Saver();
      filter0.removeDataSourceListener(saver0);
      filter0.isBusy();
      boolean boolean1 = filter0.isBusy();
      assertEquals("AllFilter", filter0.getCustomName());
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Filter filter0 = new Filter();
      Insets insets0 = filter0.getInsets();
      AttributeSummarizer attributeSummarizer0 = new AttributeSummarizer();
      filter0.addTrainingSetListener(attributeSummarizer0);
      filter0.useDefaultVisual();
      Sorter sorter0 = new Sorter();
      sorter0.isFocusOwner();
      InstanceEvent instanceEvent0 = sorter0.m_ie;
      AttributeSelection attributeSelection0 = new AttributeSelection();
      String string0 = filter0.globalInfo();
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", string0);
      
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      TrainingSetEvent trainingSetEvent0 = new TrainingSetEvent(insets0, instances0, (-3850), (-3850));
      filter0.acceptTrainingSet(trainingSetEvent0);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Filter filter0 = new Filter();
      Insets insets0 = filter0.getInsets();
      filter0.useDefaultVisual();
      Sorter sorter0 = new Sorter();
      sorter0.isFocusOwner();
      InstanceEvent instanceEvent0 = sorter0.m_ie;
      AttributeSelection attributeSelection0 = new AttributeSelection();
      filter0.setFilter(attributeSelection0);
      filter0.globalInfo();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/9_weka");
      FileSystemHandling.appendDataToFile(evoSuiteFile0, (byte[]) null);
      TrainingSetEvent trainingSetEvent0 = new TrainingSetEvent(insets0, instances0, (-3850), (-3850));
      filter0.acceptTrainingSet(trainingSetEvent0);
      assertEquals("<html><font color=blue>A supervised attribute filter that can be used to select attributes</font><br><br> It is very flexible and allows various search and evaluation methods to be combined.<br></html>", filter0.globalInfo());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Filter filter0 = new Filter();
      Add add0 = new Add();
      FileSystemHandling.shouldAllThrowIOExceptions();
      MultiFilter multiFilter0 = new MultiFilter();
      filter0.setFilter(multiFilter0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      OptionHandlerJavadoc optionHandlerJavadoc0 = new OptionHandlerJavadoc();
      InstanceEvent instanceEvent0 = new InstanceEvent(optionHandlerJavadoc0);
      SubstringReplacer substringReplacer0 = new SubstringReplacer();
      InstanceEvent instanceEvent1 = substringReplacer0.m_ie;
      instanceEvent0.setStatus(2);
      filter0.acceptInstance(instanceEvent0);
      TextViewer textViewer0 = new TextViewer();
      Filter filter1 = new Filter();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      MultiFilter multiFilter1 = new MultiFilter();
      Filter filter2 = new Filter();
      Border border0 = LineBorder.createBlackLineBorder();
      filter1.setBorder(border0);
      filter0.removeTestSetListener(filter1);
      // Undeclared exception!
      try { 
        filter2.connectionNotification("<!-- options-start -->", (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Hashtable", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Filter filter0 = new Filter();
      Add add0 = new Add();
      Add add1 = new Add();
      OptionHandlerJavadoc optionHandlerJavadoc0 = new OptionHandlerJavadoc();
      InstanceEvent instanceEvent0 = new InstanceEvent(optionHandlerJavadoc0);
      SubstringReplacer substringReplacer0 = new SubstringReplacer();
      instanceEvent0.setStatus((-448));
      filter0.acceptInstance(instanceEvent0);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      DataSetEvent dataSetEvent0 = new DataSetEvent(add0, instances0);
      filter0.acceptDataSet(dataSetEvent0);
      substringReplacer0.setAlignmentY((-1677.4062F));
      MultiFilter multiFilter0 = new MultiFilter();
      filter0.connectionAllowed("<!-- options-end -->");
      Saver saver0 = new Saver();
      Saver saver1 = new Saver();
      AttributeSummarizer attributeSummarizer0 = new AttributeSummarizer();
      TestSetEvent testSetEvent0 = new TestSetEvent(attributeSummarizer0, instances0, 0, 2);
      filter0.acceptTestSet(testSetEvent0);
      filter0.acceptInstance(instanceEvent0);
      CheckOptionHandler checkOptionHandler0 = new CheckOptionHandler();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      PrincipalComponents principalComponents0 = new PrincipalComponents();
      try { 
        principalComponents0.transformedHeader();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Principal components hasn't been built yet
         //
         verifyException("weka.attributeSelection.PrincipalComponents", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Filter filter0 = new Filter();
      Add add0 = new Add();
      InputMethodListener inputMethodListener0 = mock(InputMethodListener.class, new ViolatedAssumptionAnswer());
      add0.setNominalLabels("oyZsV.y]YEG#{");
      AWTEventMulticaster.remove(inputMethodListener0, inputMethodListener0);
      filter0.addInputMethodListener((InputMethodListener) null);
      filter0.setFilter(add0);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      InstanceStreamToBatchMaker instanceStreamToBatchMaker0 = new InstanceStreamToBatchMaker();
      instanceStreamToBatchMaker0.setRequestFocusEnabled(true);
      DataSetEvent dataSetEvent0 = new DataSetEvent(instanceStreamToBatchMaker0, instances0);
      filter0.acceptDataSet(dataSetEvent0);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      Random.setNextRandom(29);
      filter0.setRequestFocusEnabled(true);
      filter0.isBusy();
      // Undeclared exception!
      try { 
        filter0.performRequest("Classifier");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Classifier not supported (Filter)
         //
         verifyException("weka.gui.beans.Filter", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Filter filter0 = new Filter();
      Add add0 = new Add();
      InputMethodListener inputMethodListener0 = mock(InputMethodListener.class, new ViolatedAssumptionAnswer());
      AWTEventMulticaster.remove(inputMethodListener0, inputMethodListener0);
      AWTEventMulticaster.add((InputMethodListener) null, (InputMethodListener) null);
      filter0.addInputMethodListener((InputMethodListener) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      filter0.setFilter(add0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      SubstringReplacer substringReplacer0 = new SubstringReplacer();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "!1^7hlC");
      TextViewer textViewer0 = new TextViewer();
      Filter filter1 = new Filter();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      boolean boolean0 = substringReplacer0.m_busy;
      Apriori apriori0 = new Apriori();
      FlowByExpression flowByExpression0 = new FlowByExpression();
      filter1.acceptTrainingSet((TrainingSetEvent) null);
      filter1.performRequest("Stop");
      Filter filter2 = new Filter();
      filter1.addTrainingSetListener(filter0);
      Sorter sorter0 = new Sorter();
      InstanceEvent instanceEvent0 = sorter0.m_ie;
      // Undeclared exception!
      try { 
        filter1.performRequest("[Filter] ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // [Filter]  not supported (Filter)
         //
         verifyException("weka.gui.beans.Filter", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Filter filter0 = new Filter();
      WekaTaskMonitor wekaTaskMonitor0 = new WekaTaskMonitor();
      weka.gui.LogPanel logPanel0 = new weka.gui.LogPanel(wekaTaskMonitor0, false);
      filter0.setLog(logPanel0);
      filter0.getFilter();
      PredictionAppender predictionAppender0 = new PredictionAppender();
      InstanceEvent instanceEvent0 = predictionAppender0.m_instanceEvent;
      filter0.acceptInstance((InstanceEvent) null);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Filter filter0 = new Filter();
      filter0.getWrappedAlgorithm();
      byte[] byteArray0 = new byte[5];
      byteArray0[3] = (byte)117;
      byteArray0[4] = (byte)75;
      Apriori apriori0 = new Apriori();
      apriori0.getInstancesOnlyClass();
      String[] stringArray0 = new String[10];
      stringArray0[0] = ".arff";
      AbstractAssociator.runAssociator(apriori0, stringArray0);
      CheckOptionHandler checkOptionHandler0 = new CheckOptionHandler();
      String string0 = "model";
      MetaBean metaBean0 = new MetaBean();
      filter0.connectionNotification("model", apriori0);
      ListOptions listOptions0 = new ListOptions();
      TestSetEvent testSetEvent0 = new TestSetEvent(listOptions0, (Instances) null);
      filter0.acceptTestSet(testSetEvent0);
      InstanceEvent instanceEvent0 = null;
      filter0.acceptInstance((InstanceEvent) null);
      CheckOptionHandler checkOptionHandler1 = new CheckOptionHandler();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      PrincipalComponents principalComponents0 = new PrincipalComponents();
      PrincipalComponents principalComponents1 = new PrincipalComponents();
      try { 
        principalComponents1.transformedHeader();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Principal components hasn't been built yet
         //
         verifyException("weka.attributeSelection.PrincipalComponents", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Filter filter0 = new Filter();
      Add add0 = new Add();
      InputMethodListener inputMethodListener0 = mock(InputMethodListener.class, new ViolatedAssumptionAnswer());
      add0.setNominalLabels("oyZsV.y]YEG#{");
      AWTEventMulticaster.remove(inputMethodListener0, inputMethodListener0);
      filter0.addInputMethodListener((InputMethodListener) null);
      filter0.setFilter(add0);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      InstanceStreamToBatchMaker instanceStreamToBatchMaker0 = new InstanceStreamToBatchMaker();
      DataSetEvent dataSetEvent0 = new DataSetEvent(instanceStreamToBatchMaker0, instances0);
      filter0.acceptDataSet(dataSetEvent0);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      SubstringReplacer substringReplacer0 = new SubstringReplacer();
      InstanceEvent instanceEvent0 = substringReplacer0.m_ie;
      instanceEvent0.setStatus((-1512));
      filter0.acceptInstance(instanceEvent0);
      TextViewer textViewer0 = new TextViewer();
      CheckOptionHandler checkOptionHandler0 = new CheckOptionHandler();
      SystemInUtil.addInputLine(".bsi");
      Set<AWTKeyStroke> set0 = filter0.getFocusTraversalKeys(2);
      // Undeclared exception!
      try { 
        textViewer0.setFocusTraversalKeys(1487, set0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // invalid focus traversal key identifier
         //
         verifyException("java.awt.Container", e);
      }
  }
}
