/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 03 02:56:15 GMT 2019
 */

package wheel.json;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StringWriter;
import java.io.Writer;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import wheel.json.JSONArray;
import wheel.json.JSONObject;
import wheel.json.JSONTokener;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONObject_ESTest extends JSONObject_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      HashMap<JSONObject, Long> hashMap0 = new HashMap<JSONObject, Long>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.accumulate(",", hashMap0);
      String string0 = JSONObject.valueToString(jSONObject1, 12, 47);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      String[] stringArray0 = new String[4];
      JSONObject jSONObject0 = new JSONObject("\"{9a&IBcuAI", stringArray0);
      try { 
        jSONObject0.getJSONObject("TdK/-$5I[V");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"TdK/-$5I[V\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("{3(LZn5'/On>G@");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at character 9 of {3(LZn5'/On>G@
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("~Me)c");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of ~Me)c
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      jSONObject0.put("", (Collection) linkedList0);
      JSONArray jSONArray0 = (JSONArray)jSONObject0.remove("");
      assertEquals(0, jSONArray0.length());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Integer integer0 = new Integer(2241);
      jSONObject0.put("", (Object) integer0);
      long long0 = jSONObject0.optLong("");
      assertEquals(2241L, long0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("", (-1.0));
      long long0 = jSONObject0.optLong("");
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.putOpt("TdK/-$5I[V", jSONObject0);
      jSONObject0.optJSONObject("TdK/-$5I[V");
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      jSONObject0.put("", (Collection) linkedList0);
      JSONArray jSONArray0 = jSONObject0.optJSONArray("");
      assertEquals(0, jSONArray0.length());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("com", 2806.9);
      int int0 = jSONObject0.optInt("com");
      assertEquals(2806, int0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("] is not a JSONObject.", (-1485L));
      int int0 = jSONObject0.optInt("] is not a JSONObject.");
      assertEquals((-1485), int0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("cle", 0.0);
      double double0 = jSONObject1.optDouble("cle");
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Long long0 = new Long(2301L);
      JSONObject jSONObject1 = jSONObject0.put("ishashCode", (Object) long0);
      double double0 = jSONObject1.optDouble("ishashCode");
      assertEquals(2301.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("", (long) (-2081));
      double double0 = jSONObject0.optDouble("");
      assertEquals((-2081.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      jSONObject0.put("", (Collection) linkedList0);
      JSONArray jSONArray0 = (JSONArray)jSONObject0.opt("");
      assertEquals(0, jSONArray0.length());
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Integer integer0 = new Integer(0);
      JSONObject jSONObject0 = new JSONObject(integer0);
      int int0 = jSONObject0.length();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("\"{9a&IBcuAI", false);
      boolean boolean0 = jSONObject0.has("\"{9a&IBcuAI");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("", true);
      String string0 = jSONObject1.getString("");
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      HashMap<String, Boolean> hashMap0 = new HashMap<String, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.put("has", (long) 59);
      long long0 = jSONObject0.getLong("has");
      assertEquals(59L, long0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("wheel.json.JSONException", (-1546));
      long long0 = jSONObject1.getLong("wheel.json.JSONException");
      assertEquals((-1546L), long0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      jSONObject0.accumulate("JSONArray[", jSONArray0);
      JSONArray jSONArray1 = jSONObject0.getJSONArray("JSONArray[");
      assertEquals(1, jSONArray1.length());
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Integer integer0 = new Integer(2241);
      jSONObject0.put("", (Object) integer0);
      int int0 = jSONObject0.getInt("");
      assertEquals(2241, int0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("getvalueOf", 0L);
      double double0 = jSONObject0.getDouble("getvalueOf");
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("-H6V", (-903L));
      double double0 = jSONObject0.getDouble("-H6V");
      assertEquals((-903.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.accumulate("", (Object) null);
      assertEquals(0, jSONObject1.length());
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      String string0 = JSONObject.valueToString((Object) null, 0, (byte)0);
      assertEquals("null", string0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.toString(0, 0);
      assertEquals("{}", string0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      JSONObject jSONObject0 = new JSONObject(jSONArray0);
      jSONObject0.toString(0);
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) ".&sIKfq;GNA");
      jSONObject0.toString((-2040));
      assertEquals(3, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      JSONObject.testValidity((Object) null);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Object object0 = new Object();
      JSONObject.testValidity(object0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = jSONObject0.remove((String) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = JSONObject.NULL;
      jSONObject0.putOpt("gettoString", object0);
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      jSONObject0.putOpt("", jSONArray0);
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, (Map) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      HashMap<Float, Boolean> hashMap0 = new HashMap<Float, Boolean>();
      Float float0 = new Float(0.0);
      Boolean boolean0 = Boolean.FALSE;
      hashMap0.put(float0, boolean0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("KNM,H", (Map) hashMap0);
      assertSame(jSONObject0, jSONObject1);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject(object0);
      jSONObject0.put("UwgfH_<@xf[vA)&4\"i0", (Collection) null);
      assertEquals(2, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Object, JSONObject> hashMap0 = new HashMap<Object, JSONObject>();
      Collection<JSONObject> collection0 = hashMap0.values();
      JSONObject jSONObject1 = jSONObject0.put("true", collection0);
      assertEquals(1, jSONObject1.length());
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = new Object();
      JSONObject jSONObject1 = jSONObject0.put("", object0);
      assertSame(jSONObject1, jSONObject0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put(" of ", 0);
      assertSame(jSONObject0, jSONObject1);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("", (-1063));
      assertSame(jSONObject0, jSONObject1);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      JSONObject jSONObject0 = new JSONObject(jSONArray0);
      try { 
        jSONObject0.put((String) null, (double) 0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Integer integer0 = new Integer(0);
      JSONObject jSONObject0 = new JSONObject(integer0);
      jSONObject0.put("", (double) 0);
      jSONObject0.getInt("");
      assertEquals(2, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.optString((String) null, (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      JSONObject jSONObject0 = new JSONObject(jSONArray0);
      jSONObject0.optString("", "");
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.optString((String) null);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      JSONObject jSONObject0 = new JSONObject(jSONArray0);
      jSONObject0.optString("");
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      long long0 = jSONObject0.optLong("\"{9a&IBcuAI", 0L);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      long long0 = jSONObject0.optLong("[VfCG52", (long) 77);
      assertEquals(77L, long0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      JSONObject jSONObject0 = new JSONObject(jSONArray0);
      long long0 = jSONObject0.optLong("", (-949L));
      assertEquals((-949L), long0);
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      long long0 = jSONObject0.optLong((String) null);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.optJSONObject((String) null);
      assertNull(jSONObject1);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.optJSONObject("");
      assertNull(jSONObject1);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = jSONObject0.optJSONArray((String) null);
      assertNull(jSONArray0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      JSONObject jSONObject0 = new JSONObject(jSONArray0);
      int int0 = jSONObject0.optInt("Expected a ',' or '}'", 0);
      assertEquals(1, jSONObject0.length());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Short short0 = new Short((short) (-1));
      JSONObject jSONObject0 = new JSONObject(short0);
      int int0 = jSONObject0.optInt("/?tB~", (int) (short) (-1));
      assertEquals(1, jSONObject0.length());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      int int0 = jSONObject0.optInt((String) null, 1855);
      assertEquals(1855, int0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      int int0 = jSONObject0.optInt("", 9);
      assertEquals(9, int0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      String[] stringArray0 = new String[5];
      Float float0 = new Float((-1453.250390138283));
      JSONObject jSONObject0 = new JSONObject(float0, stringArray0);
      int int0 = jSONObject0.optInt((String) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      int int0 = jSONObject0.optInt("");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      JSONObject jSONObject0 = new JSONObject(jSONArray0);
      double double0 = jSONObject0.optDouble("", (double) 0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONObject0.optBoolean((String) null, false);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONObject0.optBoolean("", true);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONObject0.optBoolean((String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONObject0.optBoolean("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = jSONObject0.opt("");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONObject0.isNull((String) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONObject0.isNull("");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "1");
      jSONObject0.has((String) null);
      assertEquals(3, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONObject0.has("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getString("/(W@");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"/(W@\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getLong((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Integer integer0 = new Integer(0);
      JSONObject jSONObject0 = new JSONObject(integer0);
      try { 
        jSONObject0.getLong("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getJSONObject((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getJSONArray((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getJSONArray("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      String string0 = JSONObject.valueToString((Object) null, (-3950), (-3950));
      String[] stringArray0 = new String[5];
      JSONObject jSONObject0 = new JSONObject(string0, stringArray0);
      try { 
        jSONObject0.getInt((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getDouble((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getDouble("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getBoolean((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getBoolean("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.get((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      String string0 = JSONObject.doubleToString((-1922));
      assertEquals("-1922", string0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.append((String) null, (Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = new Object();
      jSONObject0.accumulate("\"{9a&IBcuAI", object0);
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        jSONObject0.write((Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "ishashCode");
      // Undeclared exception!
      JSONObject.valueToString(jSONObject0, 879, 1541);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Float float0 = new Float(Double.NaN);
      try { 
        JSONObject.valueToString(float0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put((Object) null);
      try { 
        jSONObject0.toJSONArray(jSONArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[0] not found.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Double double0 = new Double(Double.NaN);
      JSONObject jSONObject0 = new JSONObject(double0);
      try { 
        jSONObject0.putOpt("zWt]$+o57fe[", double0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<JSONArray, Object> hashMap0 = new HashMap<JSONArray, Object>();
      try { 
        jSONObject0.put((String) null, (Map) hashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      try { 
        jSONObject0.put((String) null, (Collection) linkedList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      HashMap<Double, String> hashMap0 = new HashMap<Double, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.put((String) null, 9);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.getNames((JSONObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      HashMap<Float, Boolean> hashMap0 = new HashMap<Float, Boolean>();
      Float float0 = new Float(0.0);
      Boolean boolean0 = Boolean.FALSE;
      hashMap0.put(float0, boolean0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      // Undeclared exception!
      try { 
        JSONObject.getNames(jSONObject0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Float cannot be cast to java.lang.String
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getDouble(",\n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\",\\n\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.accumulate((String) null, (Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("H:S4H}y8s");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of H:S4H}y8s
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((JSONTokener) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject((Object) jSONObject0, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.toString(45, 45);
      assertEquals("{}", string0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      String string0 = JSONObject.quote("{</^(4Zd");
      assertEquals("\"{<\\/^(4Zd\"", string0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      String string0 = JSONObject.quote("SQ'2(2_D}G\\9DgIfZ");
      assertEquals("\"SQ'2(2_D}G\\\\9DgIfZ\"", string0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      String string0 = JSONObject.quote((String) null);
      assertEquals("\"\"", string0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt((String) null, jSONObject0);
      assertSame(jSONObject1, jSONObject0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, (Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = jSONObject0.optString("\"\"", (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.accumulate("wheel.json.JSONObject$Null", jSONObject0);
      jSONObject0.optString("wheel.json.JSONObject$Null", "\"{9a&IBcuAI");
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Double double0 = new Double(0.0);
      JSONObject jSONObject0 = new JSONObject(double0);
      double double1 = jSONObject0.optDouble((String) null, (-904.365));
      assertEquals((-904.365), double1, 0.01);
      assertEquals(3, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = jSONObject0.opt("JSONArray initial value should be a string or collection or array.");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = jSONObject0.opt((String) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Double double0 = Double.valueOf(0.0);
      String string0 = JSONObject.numberToString(double0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      JSONObject jSONObject1 = jSONObject0.put("", (Collection) linkedList0);
      try { 
        jSONObject1.getInt("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("getdecode", (Object) "4");
      double double0 = jSONObject1.getDouble("getdecode");
      assertEquals(4.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("Ss6A{aJ30)g{-#h:g7", (-156.45076712088263));
      try { 
        jSONObject1.getBoolean("Ss6A{aJ30)g{-#h:g7");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"Ss6A{aJ30)g{-#h:g7\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("(", (Object) "(");
      try { 
        jSONObject1.getBoolean("(");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"(\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Boolean boolean0 = Boolean.valueOf(true);
      JSONObject jSONObject1 = jSONObject0.put("c$K2v", (Object) boolean0);
      boolean boolean1 = jSONObject1.getBoolean("c$K2v");
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("cle", false);
      boolean boolean0 = jSONObject0.getBoolean("cle");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      jSONObject0.put("", (Collection) linkedList0);
      JSONArray jSONArray0 = (JSONArray)jSONObject0.get("");
      assertEquals(0, jSONArray0.length());
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.get("] is not a JSONObject.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"] is not a JSONObject.\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      int int0 = jSONObject0.length();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      long long0 = jSONObject0.optLong((String) null, (long) 24);
      assertEquals(24L, long0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("{}");
      JSONObject jSONObject0 = new JSONObject(jSONTokener0);
      Iterator iterator0 = jSONObject0.keys();
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = jSONObject0.remove("W11Kz_gN/C*2");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      JSONObject jSONObject0 = new JSONObject(stringWriter0);
      jSONObject0.append("$7qA=m4/kbKZ=]ge;U", "$7qA=m4/kbKZ=]ge;U");
      jSONObject0.write(stringWriter0);
      assertEquals(3, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      String string0 = JSONObject.valueToString(linkedList0, 1749, 1749);
      assertEquals("[]", string0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      String string0 = JSONObject.valueToString(object0, 2149, 2149);
      assertEquals("null", string0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      jSONObject0.append("isoptLong", (Object) null);
      String string0 = jSONObject0.toString((-574), (-574));
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      String string0 = JSONObject.valueToString(linkedList0);
      assertEquals("[]", string0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      HashMap<Integer, JSONObject> hashMap0 = new HashMap<Integer, JSONObject>();
      String string0 = JSONObject.valueToString(hashMap0);
      assertEquals("{}", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      String string0 = JSONObject.valueToString(jSONArray0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = JSONObject.valueToString(jSONObject0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      String string0 = JSONObject.valueToString(object0);
      assertEquals("null", string0);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      String string0 = JSONObject.valueToString((Object) null);
      assertEquals("null", string0);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = new JSONObject(jSONObject0);
      jSONObject1.toString(12);
      assertEquals(1, jSONObject1.length());
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = JSONObject.valueToString(jSONObject0, (-1922), (-1922));
      assertEquals("{}", string0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "");
      String string0 = jSONObject0.toString();
      assertNotNull(string0);
      assertEquals(3, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put((Object) jSONObject0);
      JSONArray jSONArray1 = jSONObject0.toJSONArray(jSONArray0);
      assertEquals(1, jSONArray1.length());
      assertNotSame(jSONArray1, jSONArray0);
      assertNotNull(jSONArray1);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONObject0.toJSONArray(jSONArray0);
      assertNull(jSONArray1);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = jSONObject0.toJSONArray((JSONArray) null);
      assertNull(jSONArray0);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Float float0 = new Float((-1516.6687F));
      String[] stringArray0 = JSONObject.getNames((Object) float0);
      JSONObject jSONObject0 = new JSONObject(float0, stringArray0);
      assertEquals(8, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Float float0 = new Float(Double.NaN);
      try { 
        JSONObject.valueToString(float0, 60, 60);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Double double0 = new Double(0.0);
      String[] stringArray0 = JSONObject.getNames((Object) double0);
      assertNotNull(stringArray0);
      
      JSONObject jSONObject0 = new JSONObject(double0, stringArray0);
      assertEquals(8, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      String string0 = JSONObject.quote("8/ &eT8W");
      assertEquals("\"8/ &eT8W\"", string0);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      int int0 = jSONObject0.optInt("\r");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.append("isoptLong", "isoptLong");
      jSONObject0.append("wheel.json.JSONObject$1", "wheel.json.JSONObject$1");
      String string0 = jSONObject1.toString(61, 3289);
      // Undeclared exception!
      JSONObject.quote(string0);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getJSONObject("\b");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\\b\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      String string0 = JSONObject.quote("");
      assertEquals("\"\"", string0);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt("{}", (Object) null);
      assertSame(jSONObject0, jSONObject1);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[1];
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      assertFalse(jSONObject1.equals((Object)jSONObject0));
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("9Hu", (Object) "9Hu");
      String string0 = jSONObject1.optString("9Hu");
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Float, Integer> hashMap0 = new HashMap<Float, Integer>();
      JSONObject jSONObject1 = jSONObject0.put("] is not a number.", (Map) hashMap0);
      JSONObject jSONObject2 = jSONObject0.optJSONObject("] is not a number.");
      assertFalse(jSONObject2.equals((Object)jSONObject1));
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = jSONObject0.optJSONArray("{}");
      assertNull(jSONArray0);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("getreplaceFirst", 5360L);
      double double0 = jSONObject1.optDouble("getreplaceFirst", (double) 5360L);
      assertEquals(5360.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) ".&sIKfq;GNA");
      // Undeclared exception!
      jSONObject0.toString(2244);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      try { 
        JSONObject.numberToString((Number) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null pointer
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Short short0 = new Short((short) (-861));
      String string0 = JSONObject.valueToString(short0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = jSONObject0.names();
      assertNull(jSONArray0);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) ".&sIKfq;GNA");
      jSONObject0.names();
      StringWriter stringWriter0 = new StringWriter();
      Writer writer0 = jSONObject0.write(stringWriter0);
      jSONObject0.accumulate(".&sIKfq;GNA", writer0);
      Long long0 = new Long(0L);
      String string0 = JSONObject.numberToString(long0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Object object0 = new Object();
      String[] stringArray0 = JSONObject.getNames(object0);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      String[] stringArray0 = JSONObject.getNames((Object) null);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("JSONObject[", (-1314));
      String[] stringArray0 = JSONObject.getNames(jSONObject1);
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Double double0 = new Double(0.0);
      jSONObject0.put("smRk;7", (Object) double0);
      long long0 = jSONObject0.getLong("smRk;7");
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Double, Double> hashMap0 = new HashMap<Double, Double>();
      jSONObject0.put("", (Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.getJSONObject("");
      assertFalse(jSONObject1.equals((Object)jSONObject0));
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("] is not a Boolean.", false);
      try { 
        jSONObject0.getJSONObject("] is not a Boolean.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"] is not a Boolean.\"] is not a JSONObject.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      JSONObject jSONObject1 = jSONObject0.put("do", (Collection) linkedList0);
      JSONArray jSONArray0 = jSONObject1.getJSONArray("do");
      assertEquals(0, jSONArray0.length());
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.accumulate("wheel.json.JSONObject", "wheel.json.JSONObject");
      try { 
        jSONObject1.getJSONArray("wheel.json.JSONObject");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"wheel.json.JSONObject\"] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Boolean boolean0 = Boolean.TRUE;
      jSONObject0.put("474.6657984753710", (Object) boolean0);
      try { 
        jSONObject0.getLong("474.6657984753710");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"474.6657984753710\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("isappend", (Object) jSONObject0);
      boolean boolean0 = jSONObject0.optBoolean("isappend");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Boolean boolean0 = Boolean.TRUE;
      jSONObject0.put("gUwyt#B/6J)sVO", (Object) boolean0);
      boolean boolean1 = jSONObject0.optBoolean("gUwyt#B/6J)sVO");
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("false", (Object) "false");
      boolean boolean0 = jSONObject1.getBoolean("false");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      String string0 = JSONObject.doubleToString(3192.04163);
      assertEquals("3192.04163", string0);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      String string0 = JSONObject.doubleToString(Double.NaN);
      assertEquals("null", string0);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      String string0 = JSONObject.doubleToString(0.0);
      assertEquals("0", string0);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.append("M.&j,`~`", "M.&j,`~`");
      JSONObject jSONObject2 = jSONObject1.append("M.&j,`~`", jSONObject0);
      assertSame(jSONObject2, jSONObject1);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("}`|LN?h:OJL3u]=", 956);
      Object object0 = new Object();
      try { 
        jSONObject1.append("}`|LN?h:OJL3u]=", object0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[}`|LN?h:OJL3u]=] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.append("", "");
      JSONObject jSONObject2 = jSONObject1.accumulate("", "");
      assertSame(jSONObject1, jSONObject2);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("false", (Object) "false");
      Integer integer0 = new Integer(13);
      JSONObject jSONObject2 = jSONObject1.accumulate("false", integer0);
      assertSame(jSONObject2, jSONObject1);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      JSONObject jSONObject1 = jSONObject0.append("isoptLong", (Object) null);
      JSONArray jSONArray0 = jSONObject1.optJSONArray("isoptLong");
      assertEquals(1, jSONArray0.length());
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{\n\"java.lang.String@0000000004\": [\njava.lang.Byte@0000000032,\njava.lang.Byte@0000000033,\njava.lang.Byte@0000000034,\njava.lang.Byte@0000000035,\njava.lang.Byte@0000000036,\njava.lang.Byte@0000000037,\njava.lang.Byte@0000000038,\njava.lang.Byte@0000000039,\njava.lang.Byte@0000000040,\njava.lang.Byte@0000000041,\njava.lang.Byte@0000000042\n],\n\"java.lang.String@0000000029\": \"java.lang.Class@0000000030\",\n\"java.lang.String@0000000002\": java.lang.Boolean@0000000003\n}");
      assertEquals(3, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("{_YN'77+dD}J]");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at character 11 of {_YN'77+dD}J]
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("{k:P&yp?oW");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ',' or '}' at character 10 of {k:P&yp?oW
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("{");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must end with '}' at character 1 of {
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      String[] stringArray0 = new String[17];
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((JSONObject) null, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject1 = jSONObject0.put("5StUcuKeU]gI\"E", object0);
      boolean boolean0 = jSONObject1.isNull("5StUcuKeU]gI\"E");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("(", (Object) "(");
      boolean boolean0 = jSONObject0.isNull("(");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      Double double0 = Double.valueOf(2823.33556956);
      JSONObject jSONObject0 = new JSONObject(double0);
      // Undeclared exception!
      jSONObject0.toString(3745, 2977);
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      int int0 = jSONObject0.optInt("\t");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("JSONObject[", (-1314));
      assertEquals(1, jSONObject0.length());
      
      int int0 = jSONObject1.getInt("JSONObject[");
      assertEquals((-1314), int0);
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      long long0 = jSONObject0.optLong("[");
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONObject0.optBoolean("wheel.json.JSONObject$1", true);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("{_YXN'77zm=}^]");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Missing value at character 11 of {_YXN'77zm=}^]
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      JSONObject jSONObject0 = new JSONObject(stringWriter0);
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      jSONObject0.put("LWv'5B\"-Yb!", (Map) hashMap0);
      jSONObject0.write(stringWriter0);
      assertEquals(3, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("9Hu", (Object) null);
      assertEquals(0, jSONObject1.length());
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, (-1L));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getString((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      double double0 = jSONObject0.optDouble((String) null);
      assertEquals(Double.NaN, double0, 0.01);
  }
}
