/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 05 05:24:53 GMT 2019
 */

package us.codecraft.webmagic.utils;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.HashMap;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import us.codecraft.webmagic.utils.DoubleKeyMap;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DoubleKeyMap_ESTest extends DoubleKeyMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DoubleKeyMap<String, String, HashMap<Integer, String>> doubleKeyMap0 = new DoubleKeyMap<String, String, HashMap<Integer, String>>();
      HashMap<Integer, String> hashMap0 = new HashMap<Integer, String>();
      doubleKeyMap0.put("", "", hashMap0);
      HashMap<Integer, String> hashMap1 = doubleKeyMap0.get("", "%q;W(my{(=:g;A_UY:");
      assertNull(hashMap1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      HashMap<Map<Object, String>, Map<Map<String, HashMap<Object, Object>>, Integer>> hashMap0 = new HashMap<Map<Object, String>, Map<Map<String, HashMap<Object, Object>>, Integer>>();
      DoubleKeyMap<Map<Object, String>, Map<String, HashMap<Object, Object>>, Integer> doubleKeyMap0 = new DoubleKeyMap<Map<Object, String>, Map<String, HashMap<Object, Object>>, Integer>(hashMap0);
      HashMap<Object, String> hashMap1 = new HashMap<Object, String>();
      DoubleKeyMap<Object, Integer, Map<String, HashMap<Object, Object>>> doubleKeyMap1 = new DoubleKeyMap<Object, Integer, Map<String, HashMap<Object, Object>>>();
      Map<Integer, Map<String, String>> map0 = doubleKeyMap1.newMap();
      DoubleKeyMap<Integer, String, String> doubleKeyMap2 = new DoubleKeyMap<Integer, String, String>(map0);
      Map<Map<String, HashMap<Object, Object>>, Integer> map1 = doubleKeyMap2.newMap();
      hashMap0.put(hashMap1, map1);
      Map<Map<String, HashMap<Object, Object>>, Integer> map2 = doubleKeyMap0.remove((Map<Object, String>) hashMap1);
      assertEquals(0, map2.size());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DoubleKeyMap<String, String, String> doubleKeyMap0 = new DoubleKeyMap<String, String, String>();
      doubleKeyMap0.put("rCQ4fe;ke&;oT<owJ6", "rCQ4fe;ke&;oT<owJ6", "3zZV;:?)=_iQj");
      Map<String, String> map0 = doubleKeyMap0.get("rCQ4fe;ke&;oT<owJ6");
      assertFalse(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DoubleKeyMap<String, Object, String> doubleKeyMap0 = new DoubleKeyMap<String, Object, String>();
      HashMap<String, HashMap<Object, Object>> hashMap0 = new HashMap<String, HashMap<Object, Object>>();
      DoubleKeyMap<Object, Object, Object> doubleKeyMap1 = new DoubleKeyMap<Object, Object, Object>((Map<Object, Map<Object, Object>>) null);
      Object object0 = doubleKeyMap1.remove((Object) hashMap0, (Object) doubleKeyMap0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DoubleKeyMap<String, Integer, Object> doubleKeyMap0 = new DoubleKeyMap<String, Integer, Object>();
      Integer integer0 = new Integer((-247));
      Object object0 = doubleKeyMap0.remove((String) null, integer0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DoubleKeyMap<String, Object, String> doubleKeyMap0 = new DoubleKeyMap<String, Object, String>();
      DoubleKeyMap<Object, String, Map<String, HashMap<Object, Object>>> doubleKeyMap1 = new DoubleKeyMap<Object, String, Map<String, HashMap<Object, Object>>>();
      Map<String, HashMap<Object, Object>> map0 = doubleKeyMap1.remove((Object) doubleKeyMap0, "");
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Class<Map> class0 = Map.class;
      HashMap<Integer, Map<Integer, HashMap<String, Integer>>> hashMap0 = new HashMap<Integer, Map<Integer, HashMap<String, Integer>>>();
      DoubleKeyMap<Integer, Integer, HashMap<String, Integer>> doubleKeyMap0 = new DoubleKeyMap<Integer, Integer, HashMap<String, Integer>>(hashMap0);
      Map<String, Map<Map<Object, String>, HashMap<String, Object>>> map0 = doubleKeyMap0.newMap();
      DoubleKeyMap<String, Map<Object, String>, HashMap<String, Object>> doubleKeyMap1 = new DoubleKeyMap<String, Map<Object, String>, HashMap<String, Object>>(map0, class0);
      Map<Map<Object, String>, HashMap<String, Object>> map1 = doubleKeyMap1.remove((String) null);
      assertNull(map1);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DoubleKeyMap<String, Object, String> doubleKeyMap0 = new DoubleKeyMap<String, Object, String>();
      DoubleKeyMap<Object, HashMap<Integer, String>, String> doubleKeyMap1 = new DoubleKeyMap<Object, HashMap<Integer, String>, String>();
      Map<HashMap<Integer, String>, String> map0 = doubleKeyMap1.remove((Object) doubleKeyMap0);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DoubleKeyMap<Map<Object, String>, Map<String, HashMap<Object, Object>>, Integer> doubleKeyMap0 = new DoubleKeyMap<Map<Object, String>, Map<String, HashMap<Object, Object>>, Integer>();
      DoubleKeyMap<Object, Object, Object> doubleKeyMap1 = new DoubleKeyMap<Object, Object, Object>();
      Object object0 = doubleKeyMap1.put((Object) doubleKeyMap0, (Object) doubleKeyMap0, (Object) doubleKeyMap0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DoubleKeyMap<Object, Object, HashMap<Object, Integer>> doubleKeyMap0 = new DoubleKeyMap<Object, Object, HashMap<Object, Integer>>();
      Integer integer0 = new Integer((-1));
      Object object0 = new Object();
      HashMap<Object, Integer> hashMap0 = doubleKeyMap0.get((Object) integer0, object0);
      assertNull(hashMap0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DoubleKeyMap<String, Integer, Object> doubleKeyMap0 = new DoubleKeyMap<String, Integer, Object>();
      HashMap<Object, Map<Object, Map<String, HashMap<Object, Object>>>> hashMap0 = new HashMap<Object, Map<Object, Map<String, HashMap<Object, Object>>>>();
      DoubleKeyMap<Object, Object, Map<String, HashMap<Object, Object>>> doubleKeyMap1 = new DoubleKeyMap<Object, Object, Map<String, HashMap<Object, Object>>>(hashMap0);
      Map<String, HashMap<Object, Object>> map0 = doubleKeyMap1.get((Object) doubleKeyMap0, (Object) hashMap0);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DoubleKeyMap<String, Object, String> doubleKeyMap0 = new DoubleKeyMap<String, Object, String>();
      HashMap<Object, Map<Integer, Integer>> hashMap0 = new HashMap<Object, Map<Integer, Integer>>();
      DoubleKeyMap<Object, Integer, Integer> doubleKeyMap1 = new DoubleKeyMap<Object, Integer, Integer>(hashMap0);
      Map<Integer, Integer> map0 = doubleKeyMap1.get((Object) doubleKeyMap0);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      HashMap<Map<Object, String>, Map<Map<String, HashMap<Object, Object>>, Integer>> hashMap0 = new HashMap<Map<Object, String>, Map<Map<String, HashMap<Object, Object>>, Integer>>();
      DoubleKeyMap<Map<Object, String>, Map<String, HashMap<Object, Object>>, Integer> doubleKeyMap0 = new DoubleKeyMap<Map<Object, String>, Map<String, HashMap<Object, Object>>, Integer>(hashMap0);
      DoubleKeyMap<HashMap<String, String>, Object, Integer> doubleKeyMap1 = new DoubleKeyMap<HashMap<String, String>, Object, Integer>();
      Map<Object, String> map0 = doubleKeyMap1.newMap();
      HashMap<String, HashMap<Object, Object>> hashMap1 = new HashMap<String, HashMap<Object, Object>>();
      HashMap<Object, Object> hashMap2 = new HashMap<Object, Object>();
      hashMap2.put(hashMap1, "O,2dvQz'q ~C?");
      hashMap1.put("E*Gcdc6/lL~pTmfcN", hashMap2);
      HashMap<Map<String, HashMap<Object, Object>>, Integer> hashMap3 = new HashMap<Map<String, HashMap<Object, Object>>, Integer>();
      hashMap0.put(map0, hashMap3);
      // Undeclared exception!
      try { 
        doubleKeyMap0.remove(map0, (Map<String, HashMap<Object, Object>>) hashMap1);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      HashMap<Object, Map<Integer, Integer>> hashMap0 = new HashMap<Object, Map<Integer, Integer>>();
      DoubleKeyMap<Object, Integer, Integer> doubleKeyMap0 = new DoubleKeyMap<Object, Integer, Integer>(hashMap0);
      // Undeclared exception!
      try { 
        doubleKeyMap0.put((Object) hashMap0, (Integer) null, (Integer) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      HashMap<String, Map<Map<Integer, String>, Object>> hashMap0 = new HashMap<String, Map<Map<Integer, String>, Object>>();
      Class<Map> class0 = Map.class;
      DoubleKeyMap<String, Map<Integer, String>, Object> doubleKeyMap0 = new DoubleKeyMap<String, Map<Integer, String>, Object>(hashMap0, class0);
      HashMap<Integer, String> hashMap1 = new HashMap<Integer, String>();
      // Undeclared exception!
      try { 
        doubleKeyMap0.put("", (Map<Integer, String>) hashMap1, (Object) "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Class<Map> class0 = Map.class;
      DoubleKeyMap<String, Object, Integer> doubleKeyMap0 = null;
      try {
        doubleKeyMap0 = new DoubleKeyMap<String, Object, Integer>((Map<String, Map<Object, Integer>>) null, class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DoubleKeyMap<HashMap<String, Integer>, String, HashMap<String, Integer>> doubleKeyMap0 = null;
      try {
        doubleKeyMap0 = new DoubleKeyMap<HashMap<String, Integer>, String, HashMap<String, Integer>>((Class<? extends Map>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      HashMap<Object, Map<Integer, HashMap<Map<String, HashMap<Object, Object>>, String>>> hashMap0 = new HashMap<Object, Map<Integer, HashMap<Map<String, HashMap<Object, Object>>, String>>>();
      DoubleKeyMap<Object, Integer, HashMap<Map<String, HashMap<Object, Object>>, String>> doubleKeyMap0 = new DoubleKeyMap<Object, Integer, HashMap<Map<String, HashMap<Object, Object>>, String>>(hashMap0);
      Map<Integer, HashMap<Map<String, HashMap<Object, Object>>, String>> map0 = doubleKeyMap0.get((Object) null);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      HashMap<String, Map<HashMap<Object, Object>, Integer>> hashMap0 = new HashMap<String, Map<HashMap<Object, Object>, Integer>>();
      DoubleKeyMap<String, HashMap<Object, Object>, Integer> doubleKeyMap0 = new DoubleKeyMap<String, HashMap<Object, Object>, Integer>(hashMap0);
      Integer integer0 = doubleKeyMap0.remove("|$DD8]v", (HashMap<Object, Object>) null);
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DoubleKeyMap<HashMap<String, String>, Object, Integer> doubleKeyMap0 = new DoubleKeyMap<HashMap<String, String>, Object, Integer>();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      doubleKeyMap0.put(hashMap0, (Object) hashMap0, (Integer) null);
      Integer integer0 = doubleKeyMap0.remove(hashMap0, (Object) "us.codecraft.webmagic.utils.MultiKeyMapBase");
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      HashMap<String, Map<Object, Map<String, Object>>> hashMap0 = new HashMap<String, Map<Object, Map<String, Object>>>();
      Class<Map> class0 = Map.class;
      DoubleKeyMap<String, Object, Map<String, Object>> doubleKeyMap0 = new DoubleKeyMap<String, Object, Map<String, Object>>(hashMap0, class0);
      DoubleKeyMap<Object, Integer, Integer> doubleKeyMap1 = new DoubleKeyMap<Object, Integer, Integer>();
      Map<String, Map<HashMap<Object, Map<Object, Map<String, HashMap<Object, Object>>>>, HashMap<Object, Map<Object, Map<String, HashMap<Object, Object>>>>>> map0 = doubleKeyMap1.newMap();
      HashMap<Object, Map<String, Object>> hashMap1 = new HashMap<Object, Map<String, Object>>();
      hashMap0.put("", hashMap1);
      HashMap<String, Object> hashMap2 = new HashMap<String, Object>();
      Map<String, Object> map1 = doubleKeyMap0.put("", (Object) map0, (Map<String, Object>) hashMap2);
      assertNull(map1);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DoubleKeyMap<String, String, HashMap<Integer, String>> doubleKeyMap0 = new DoubleKeyMap<String, String, HashMap<Integer, String>>();
      HashMap<Integer, String> hashMap0 = new HashMap<Integer, String>();
      doubleKeyMap0.put((String) null, (String) null, hashMap0);
      HashMap<Integer, String> hashMap1 = doubleKeyMap0.get((String) null, (String) null);
      assertSame(hashMap1, hashMap0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Class<Map> class0 = Map.class;
      DoubleKeyMap<HashMap<String, Integer>, String, HashMap<String, Integer>> doubleKeyMap0 = null;
      try {
        doubleKeyMap0 = new DoubleKeyMap<HashMap<String, Integer>, String, HashMap<String, Integer>>(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      HashMap<Map<Object, String>, Map<Map<String, HashMap<Object, Object>>, Integer>> hashMap0 = new HashMap<Map<Object, String>, Map<Map<String, HashMap<Object, Object>>, Integer>>();
      DoubleKeyMap<Map<Object, String>, Map<String, HashMap<Object, Object>>, Integer> doubleKeyMap0 = new DoubleKeyMap<Map<Object, String>, Map<String, HashMap<Object, Object>>, Integer>(hashMap0);
      DoubleKeyMap<HashMap<String, String>, Object, Integer> doubleKeyMap1 = new DoubleKeyMap<HashMap<String, String>, Object, Integer>();
      Map<Object, String> map0 = doubleKeyMap1.newMap();
      HashMap<String, HashMap<Object, Object>> hashMap1 = new HashMap<String, HashMap<Object, Object>>();
      HashMap<Map<String, HashMap<Object, Object>>, Integer> hashMap2 = new HashMap<Map<String, HashMap<Object, Object>>, Integer>();
      hashMap0.put(map0, hashMap2);
      doubleKeyMap0.remove(map0, (Map<String, HashMap<Object, Object>>) hashMap1);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
  }
}
