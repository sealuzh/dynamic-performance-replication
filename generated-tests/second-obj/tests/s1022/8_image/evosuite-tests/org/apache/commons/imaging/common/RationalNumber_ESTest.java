/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 08:45:14 GMT 2018
 */

package org.apache.commons.imaging.common;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.imaging.common.RationalNumber;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class RationalNumber_ESTest extends RationalNumber_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf(0.0);
      double double0 = rationalNumber0.doubleValue();
      assertEquals(0.0, double0, 0.01);
      assertEquals(1, rationalNumber0.divisor);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf(0.0);
      int int0 = rationalNumber0.intValue();
      assertEquals(0.0, rationalNumber0.doubleValue(), 0.01);
      assertEquals(0, int0);
      assertEquals(1, rationalNumber0.divisor);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf(4.056247462358442E-7);
      String string0 = rationalNumber0.toString();
      assertEquals("1/2465333 (0)", string0);
      
      float float0 = rationalNumber0.floatValue();
      assertEquals(4.0562472E-7F, float0, 0.01F);
      assertEquals(4.0562471682324457E-7, rationalNumber0.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf(2.4069710138974187E-4);
      int int0 = rationalNumber0.intValue();
      assertEquals(2, rationalNumber0.numerator);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf((-2.147483647E9));
      String string0 = rationalNumber0.toString();
      assertEquals("-2,147,483,647", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      RationalNumber rationalNumber0 = new RationalNumber((-2564), 0);
      String string0 = rationalNumber0.toString();
      assertEquals("Invalid rational (-2564/0)", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf(2.147483647E9);
      int int0 = rationalNumber0.intValue();
      assertEquals(Integer.MAX_VALUE, int0);
      assertEquals(1, rationalNumber0.divisor);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf((-918.0060443987187));
      double double0 = rationalNumber0.doubleValue();
      assertEquals((-918.009900990099), double0, 0.01);
      
      long long0 = rationalNumber0.longValue();
      assertEquals((-918L), long0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      // Undeclared exception!
      try { 
        RationalNumber.factoryMethod(2147483664L, 0L);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Invalid value, numerator: 2147483664, divisor: 0
         //
         verifyException("org.apache.commons.imaging.common.RationalNumber", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.factoryMethod(2147483664L, 174L);
      String string0 = rationalNumber0.toDisplayString();
      assertEquals("12,341,860.138", string0);
      
      RationalNumber rationalNumber1 = RationalNumber.valueOf(2147483664L);
      String string1 = rationalNumber0.toString();
      assertEquals("357913944/29 (12,341,860.138)", string1);
      assertEquals(29, rationalNumber0.divisor);
      
      int int0 = rationalNumber1.intValue();
      assertEquals(Integer.MAX_VALUE, int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.factoryMethod(1L, 1L);
      RationalNumber rationalNumber1 = new RationalNumber(1, 1);
      rationalNumber0.toDisplayString();
      rationalNumber0.negate();
      RationalNumber rationalNumber2 = new RationalNumber(1, 1);
      RationalNumber.valueOf(1);
      RationalNumber rationalNumber3 = RationalNumber.valueOf((-1367.158172673));
      assertEquals(8143, rationalNumber3.divisor);
      
      String string0 = rationalNumber1.toDisplayString();
      assertEquals("1", string0);
      
      RationalNumber rationalNumber4 = RationalNumber.valueOf(1);
      RationalNumber rationalNumber5 = RationalNumber.factoryMethod(1, (-2147483693L));
      String string1 = rationalNumber5.toString();
      assertEquals("1/2147483603 (0)", string1);
      
      RationalNumber rationalNumber6 = new RationalNumber(1, 1);
      String string2 = rationalNumber5.toDisplayString();
      assertEquals("0", string2);
      
      RationalNumber rationalNumber7 = rationalNumber1.negate();
      RationalNumber rationalNumber8 = new RationalNumber(1, (-1));
      rationalNumber5.negate();
      RationalNumber rationalNumber9 = new RationalNumber(1, 2147483603);
      rationalNumber9.toString();
      RationalNumber rationalNumber10 = rationalNumber2.negate();
      String string3 = rationalNumber10.toString();
      assertEquals("-1", string3);
      
      RationalNumber rationalNumber11 = rationalNumber4.negate();
      rationalNumber11.negate();
      assertEquals(1L, rationalNumber4.longValue());
      
      RationalNumber rationalNumber12 = new RationalNumber(8143, (-5679));
      RationalNumber.factoryMethod(1, 595L);
      rationalNumber7.longValue();
      rationalNumber8.longValue();
      int int0 = rationalNumber12.intValue();
      assertEquals((-1), int0);
      assertEquals((-1L), rationalNumber12.longValue());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.factoryMethod(1L, 1L);
      RationalNumber rationalNumber1 = RationalNumber.factoryMethod(1, 1);
      RationalNumber rationalNumber2 = new RationalNumber(1, 1);
      String string0 = rationalNumber0.toDisplayString();
      RationalNumber rationalNumber3 = RationalNumber.factoryMethod(82L, 1);
      assertEquals(82, rationalNumber3.intValue());
      assertEquals(1, rationalNumber3.divisor);
      
      String string1 = rationalNumber1.toString();
      assertTrue(string1.equals((Object)string0));
      
      RationalNumber rationalNumber4 = RationalNumber.factoryMethod(1, 2147483664L);
      assertEquals((-4.656612907771862E-10), rationalNumber4.doubleValue(), 0.01);
      assertEquals((-4.656613E-10F), rationalNumber4.floatValue(), 0.01F);
      
      RationalNumber rationalNumber5 = rationalNumber1.negate();
      assertEquals((-1.0F), rationalNumber5.floatValue(), 0.01F);
      
      rationalNumber0.intValue();
      rationalNumber1.longValue();
      rationalNumber1.floatValue();
      long long0 = rationalNumber0.longValue();
      assertEquals(1L, long0);
      
      double double0 = rationalNumber2.doubleValue();
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.factoryMethod(391L, (-1635L));
      RationalNumber rationalNumber1 = RationalNumber.factoryMethod((-1635), 0L);
      RationalNumber rationalNumber2 = rationalNumber0.negate();
      RationalNumber rationalNumber3 = RationalNumber.factoryMethod(121L, 2871L);
      RationalNumber.valueOf(3.121878121419286E-4);
      rationalNumber3.toDisplayString();
      rationalNumber3.toDisplayString();
      rationalNumber2.toString();
      RationalNumber.factoryMethod((-2147483656L), 391);
      // Undeclared exception!
      try { 
        rationalNumber1.longValue();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.apache.commons.imaging.common.RationalNumber", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.factoryMethod((-845L), 2147483664L);
      rationalNumber0.toString();
      rationalNumber0.toString();
      RationalNumber rationalNumber1 = RationalNumber.factoryMethod(1915, 2147483664L);
      assertEquals(357913944, rationalNumber1.divisor);
      assertEquals(8.912757E-7F, rationalNumber1.floatValue(), 0.01F);
      
      String string0 = rationalNumber0.toString();
      assertEquals("-47/119304648 (-0)", string0);
      
      long long0 = rationalNumber0.longValue();
      assertEquals(0L, long0);
      
      String string1 = rationalNumber0.toDisplayString();
      assertEquals("-0", string1);
      
      float float0 = rationalNumber0.floatValue();
      assertEquals((-3.9394945E-7F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf(2.147483632621054E9);
      RationalNumber rationalNumber1 = rationalNumber0.negate();
      RationalNumber rationalNumber2 = RationalNumber.valueOf(1.0E-8);
      rationalNumber1.floatValue();
      rationalNumber1.floatValue();
      assertEquals((-2.147483633E9), rationalNumber1.doubleValue(), 0.01);
      
      rationalNumber0.doubleValue();
      rationalNumber0.intValue();
      int int0 = rationalNumber0.intValue();
      assertEquals(2147483633, int0);
      
      double double0 = rationalNumber2.doubleValue();
      assertEquals(1.0E-8F, rationalNumber2.floatValue(), 0.01F);
      assertEquals(1.0E-8, double0, 0.01);
  }
}
