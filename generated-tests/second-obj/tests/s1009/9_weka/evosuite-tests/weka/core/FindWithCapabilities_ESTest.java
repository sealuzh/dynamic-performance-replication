/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 06 22:44:48 GMT 2018
 */

package weka.core;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.HashSet;
import java.util.Properties;
import java.util.Vector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import weka.core.BinarySparseInstance;
import weka.core.Capabilities;
import weka.core.CapabilitiesHandler;
import weka.core.ClassCache;
import weka.core.ClassDiscovery;
import weka.core.DenseInstance;
import weka.core.FindWithCapabilities;
import weka.core.Instances;
import weka.core.ProtectedProperties;
import weka.core.Range;
import weka.core.SingleIndex;
import weka.core.TestInstances;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class FindWithCapabilities_ESTest extends FindWithCapabilities_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities0.setHandler(findWithCapabilities1);
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.UNARY_CLASS;
      findWithCapabilities1.enable(capabilities_Capability0);
      findWithCapabilities1.listOptions();
      findWithCapabilities0.isEnabledNot(capabilities_Capability0);
      String[] stringArray0 = findWithCapabilities1.getOptions();
      try { 
        findWithCapabilities1.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities0.setHandler(findWithCapabilities1);
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.UNARY_CLASS;
      findWithCapabilities1.m_GenericPropertiesCreator = false;
      findWithCapabilities0.enable(capabilities_Capability0);
      findWithCapabilities0.getOptions();
      Capabilities capabilities0 = findWithCapabilities0.m_Capabilities;
      findWithCapabilities1.setCapabilities(capabilities0);
      assertNotSame(findWithCapabilities0, findWithCapabilities1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Vector<String> vector0 = findWithCapabilities0.getMisses();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NUMERIC_ATTRIBUTES;
      findWithCapabilities0.enableNot(capabilities_Capability0);
      vector0.add("\tMust handle binary classes.");
      vector0.add("\tMust handle binary classes.");
      findWithCapabilities0.find();
      findWithCapabilities0.setFilename("o3(s7hV9_SH*-");
      findWithCapabilities0.getOptions();
      // Undeclared exception!
      try { 
        findWithCapabilities0.setHandler((CapabilitiesHandler) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.setClassIndex("-c");
      Capabilities capabilities0 = findWithCapabilities0.m_Capabilities;
      findWithCapabilities0.setNotCapabilities(capabilities0);
      String string0 = "|QTS \\O?DKDJ#/K|4\\u";
      String[] stringArray0 = new String[6];
      stringArray0[0] = string0;
      stringArray0[1] = string0;
      stringArray0[2] = "weka/core/Capabilities.props";
      stringArray0[3] = "]js YM tH#i";
      stringArray0[4] = "-c";
      stringArray0[5] = "]js YM tH#i";
      FindWithCapabilities.main(stringArray0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities capabilities0 = findWithCapabilities0.getCapabilities();
      TestInstances testInstances0 = new TestInstances();
      findWithCapabilities0.getHandler();
      findWithCapabilities0.setClassIndex(".5");
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.MISSING_CLASS_VALUES;
      findWithCapabilities0.enable(capabilities_Capability0);
      capabilities0.getAttributeCapabilities();
      capabilities0.enableAllAttributes();
      capabilities0.capabilities();
      Capabilities capabilities1 = findWithCapabilities0.getNotCapabilities();
      capabilities1.disableAllClasses();
      capabilities1.or(capabilities0);
      findWithCapabilities0.getOptions();
      Range range0 = new Range();
      Vector vector0 = range0.m_RangeStrings;
      findWithCapabilities0.setHandler(findWithCapabilities0);
      // Undeclared exception!
      try { 
        findWithCapabilities0.setHandler((CapabilitiesHandler) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities capabilities0 = findWithCapabilities0.getCapabilities();
      TestInstances testInstances0 = new TestInstances();
      CapabilitiesHandler capabilitiesHandler0 = testInstances0.m_Handler;
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities1.m_Superclass = "..";
      findWithCapabilities1.setClassIndex("..");
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.MISSING_CLASS_VALUES;
      findWithCapabilities1.enable(capabilities_Capability0);
      Capabilities capabilities1 = capabilities0.getAttributeCapabilities();
      capabilities1.assign(capabilities0);
      capabilities0.enableAllAttributes();
      capabilities0.capabilities();
      findWithCapabilities1.getRevision();
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.EMPTY_NOMINAL_CLASS;
      findWithCapabilities1.isEnabledNot(capabilities_Capability1);
      findWithCapabilities1.find();
      Capabilities capabilities2 = findWithCapabilities0.m_NotCapabilities;
      String[] stringArray0 = findWithCapabilities0.getOptions();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability2 = Capabilities.Capability.NOMINAL_CLASS;
      findWithCapabilities2.isEnabledNot(capabilities_Capability2);
      findWithCapabilities2.getMisses();
      System.setCurrentTimeMillis((-1L));
      try { 
        findWithCapabilities2.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      FileSystemHandling.shouldAllThrowIOExceptions();
      findWithCapabilities0.find();
      findWithCapabilities0.m_GenericPropertiesCreator = false;
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NUMERIC_ATTRIBUTES;
      findWithCapabilities0.enable(capabilities_Capability0);
      findWithCapabilities0.listOptions();
      findWithCapabilities0.isEnabledNot(capabilities_Capability0);
      findWithCapabilities0.getOptions();
      Capabilities capabilities0 = findWithCapabilities0.m_Capabilities;
      findWithCapabilities0.setCapabilities(capabilities0);
      findWithCapabilities0.disableNot(capabilities_Capability0);
      assertEquals("", findWithCapabilities0.getFilename());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Vector<String> vector0 = findWithCapabilities0.find();
      findWithCapabilities0.m_Matches = vector0;
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NO_CLASS;
      findWithCapabilities0.enable(capabilities_Capability0);
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities1.listOptions();
      findWithCapabilities0.getOptions();
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      Capabilities capabilities0 = findWithCapabilities2.m_Capabilities;
      findWithCapabilities2.setCapabilities(capabilities0);
      findWithCapabilities1.setNotCapabilities(capabilities0);
      assertNotSame(findWithCapabilities1, findWithCapabilities0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.BINARY_CLASS;
      findWithCapabilities0.enable(capabilities_Capability0);
      String[] stringArray0 = findWithCapabilities0.getOptions();
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.setClassIndex("-c");
      Capabilities capabilities0 = findWithCapabilities0.m_Capabilities;
      findWithCapabilities0.setNotCapabilities(capabilities0);
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NUMERIC_CLASS;
      findWithCapabilities0.enable(capabilities_Capability0);
      findWithCapabilities0.listOptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.DATE_CLASS;
      capabilities0.m_MinimumNumberInstancesTest = true;
      findWithCapabilities0.isEnabledNot(capabilities_Capability1);
      findWithCapabilities0.getOptions();
      Capabilities capabilities1 = findWithCapabilities0.m_Capabilities;
      DenseInstance denseInstance0 = new DenseInstance(2286.682, (double[]) null);
      BinarySparseInstance binarySparseInstance0 = null;
      try {
        binarySparseInstance0 = new BinarySparseInstance(denseInstance0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.DenseInstance", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      String string0 = "..";
      findWithCapabilities0.m_Superclass = "..";
      findWithCapabilities0.setClassIndex("..");
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.MISSING_CLASS_VALUES;
      findWithCapabilities0.enable(capabilities_Capability0);
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.EMPTY_NOMINAL_ATTRIBUTES;
      findWithCapabilities0.enable(capabilities_Capability1);
      findWithCapabilities0.getOptions();
      // Undeclared exception!
      try { 
        findWithCapabilities0.getClassIndex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No upper limit has been specified for index
         //
         verifyException("weka.core.SingleIndex", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NO_CLASS;
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities0.setHandler(findWithCapabilities1);
      String[] stringArray0 = findWithCapabilities0.getOptions();
      try { 
        findWithCapabilities1.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NOMINAL_CLASS;
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      findWithCapabilities0.enable(capabilities_Capability0);
      findWithCapabilities0.listOptions();
      String[] stringArray0 = findWithCapabilities0.getOptions();
      FindWithCapabilities.main(stringArray0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      String[] stringArray0 = new String[7];
      String string0 = "-*M0nNF)";
      stringArray0[0] = "-*M0nNF)";
      stringArray0[1] = "g .8 G]+";
      findWithCapabilities0.listOptions();
      stringArray0[2] = "\nSet with attribute deleted:\n";
      stringArray0[3] = "5!.Qb%l]!$grg";
      stringArray0[4] = "u6c:4E1V5I>lc";
      stringArray0[5] = "&ia;V9PGTxJdxx9AV'[";
      stringArray0[6] = "-binary-class";
      try { 
        findWithCapabilities0.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities capabilities0 = findWithCapabilities0.getCapabilities();
      TestInstances testInstances0 = new TestInstances();
      findWithCapabilities0.getHandler();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities0.setClassIndex(".5");
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.DATE_CLASS;
      findWithCapabilities0.enable(capabilities_Capability0);
      capabilities0.getAttributeCapabilities();
      capabilities0.enableAllAttributes();
      capabilities0.capabilities();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Capabilities capabilities1 = findWithCapabilities1.getNotCapabilities();
      Capabilities capabilities2 = capabilities0.getClassCapabilities();
      capabilities2.or(capabilities1);
      findWithCapabilities0.getOptions();
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      Range range0 = new Range();
      Vector vector0 = range0.m_RangeStrings;
      // Undeclared exception!
      try { 
        findWithCapabilities1.setHandler((CapabilitiesHandler) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NOMINAL_CLASS;
      findWithCapabilities0.getRevision();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.NOMINAL_ATTRIBUTES;
      findWithCapabilities0.disableNot(capabilities_Capability0);
      findWithCapabilities1.setFilename("w81{rsH3)[&c0|/+~om");
      Capabilities.Capability capabilities_Capability2 = Capabilities.Capability.MISSING_VALUES;
      findWithCapabilities0.enableNot(capabilities_Capability2);
      String[] stringArray0 = findWithCapabilities1.getOptions();
      Vector<String> vector0 = new Vector<String>();
      findWithCapabilities1.find();
      findWithCapabilities2.getRevision();
      findWithCapabilities0.isEnabledNot(capabilities_Capability1);
      findWithCapabilities1.getMisses();
      Capabilities capabilities0 = findWithCapabilities1.m_NotCapabilities;
      String[] stringArray1 = findWithCapabilities0.getOptions();
      FindWithCapabilities findWithCapabilities3 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability3 = Capabilities.Capability.NUMERIC_ATTRIBUTES;
      findWithCapabilities2.isEnabledNot(capabilities_Capability3);
      System.setCurrentTimeMillis(0L);
      FindWithCapabilities.main(stringArray1);
      assertNotSame(stringArray1, stringArray0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NO_CLASS;
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.NOMINAL_CLASS;
      findWithCapabilities0.enableNot(capabilities_Capability1);
      Vector<String> vector0 = new Vector<String>();
      findWithCapabilities1.getMatches();
      String string0 = findWithCapabilities0.m_Filename;
      findWithCapabilities0.isEnabledNot(capabilities_Capability0);
      findWithCapabilities1.find();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Capabilities capabilities0 = findWithCapabilities0.m_NotCapabilities;
      String[] stringArray0 = findWithCapabilities0.getOptions();
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability2 = Capabilities.Capability.EMPTY_NOMINAL_ATTRIBUTES;
      findWithCapabilities0.isEnabledNot(capabilities_Capability2);
      findWithCapabilities0.getMisses();
      System.setCurrentTimeMillis(0L);
      try { 
        findWithCapabilities0.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NO_CLASS;
      findWithCapabilities0.disable(capabilities_Capability0);
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.NOMINAL_CLASS;
      findWithCapabilities0.enableNot(capabilities_Capability1);
      Vector<String> vector0 = new Vector<String>();
      findWithCapabilities0.find();
      findWithCapabilities1.getRevision();
      findWithCapabilities0.isEnabledNot(capabilities_Capability0);
      findWithCapabilities1.find();
      Capabilities capabilities0 = findWithCapabilities0.m_NotCapabilities;
      findWithCapabilities0.getOptions();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability2 = Capabilities.Capability.EMPTY_NOMINAL_ATTRIBUTES;
      findWithCapabilities0.isEnabledNot(capabilities_Capability2);
      findWithCapabilities0.getMisses();
      System.setCurrentTimeMillis(0L);
      Random.setNextRandom(858);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      boolean boolean0 = ClassCache.VERBOSE;
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.DATE_ATTRIBUTES;
      findWithCapabilities0.enable(capabilities_Capability0);
      Capabilities capabilities0 = findWithCapabilities0.getCapabilities();
      capabilities0.m_Owner = (CapabilitiesHandler) findWithCapabilities0;
      findWithCapabilities0.setCapabilities(capabilities0);
      findWithCapabilities0.listOptions();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/users/apanichella/wekafiles");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "weka/core/Capabilities.props");
      findWithCapabilities0.getOptions();
      Capabilities capabilities1 = findWithCapabilities0.m_Capabilities;
      ClassCache classCache0 = null;
      try {
        classCache0 = new ClassCache();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.evosuite.instrumentation.InstrumentingClassLoader cannot be cast to java.net.URLClassLoader
         //
         verifyException("weka.core.ClassCache", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.setClassIndex(">=");
      findWithCapabilities0.m_GenericPropertiesCreator = false;
      findWithCapabilities0.getCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.STRING_ATTRIBUTES;
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities1.disableNot(capabilities_Capability0);
      findWithCapabilities1.enable(capabilities_Capability0);
      findWithCapabilities0.setFilename("-uninstall-package");
      findWithCapabilities1.enableNot(capabilities_Capability0);
      findWithCapabilities1.find();
      findWithCapabilities1.getRevision();
      Vector<String> vector0 = findWithCapabilities0.m_Packages;
      Capabilities capabilities0 = findWithCapabilities0.m_NotCapabilities;
      String[] stringArray0 = findWithCapabilities1.getOptions();
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      SingleIndex singleIndex0 = new SingleIndex("\tRetrieves the package list from the GenericPropertiesCreator\n\tfor the given superclass. (overrides -packages <list>).");
      findWithCapabilities2.m_ClassIndex = singleIndex0;
      System.setCurrentTimeMillis((-1L));
      FindWithCapabilities.main(stringArray0);
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.NUMERIC_CLASS;
      boolean boolean0 = findWithCapabilities0.isEnabled(capabilities_Capability1);
      boolean boolean1 = findWithCapabilities2.isEnabledNot(capabilities_Capability1);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.getMatches();
      Capabilities capabilities0 = new Capabilities(findWithCapabilities0);
      findWithCapabilities0.m_NotCapabilities = capabilities0;
      Random.setNextRandom(2);
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NUMERIC_ATTRIBUTES;
      capabilities0.disable(capabilities_Capability0);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "weka/core/Capabilities.props";
      stringArray0[1] = "weka/core/Capabilities.props";
      stringArray0[2] = "weka/core/Capabilities.props";
      stringArray0[3] = "-relational-class";
      FindWithCapabilities.main(stringArray0);
      // Undeclared exception!
      try { 
        findWithCapabilities0.getClassIndex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No index set
         //
         verifyException("weka.core.SingleIndex", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.DATE_CLASS;
      findWithCapabilities0.enableNot(capabilities_Capability0);
      String[] stringArray0 = findWithCapabilities0.getOptions();
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.setClassIndex(">=");
      findWithCapabilities0.m_GenericPropertiesCreator = true;
      findWithCapabilities0.getCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.STRING_ATTRIBUTES;
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities1.disableNot(capabilities_Capability0);
      findWithCapabilities0.setFilename("-uninstall-package");
      findWithCapabilities1.enableNot(capabilities_Capability0);
      findWithCapabilities1.find();
      findWithCapabilities1.getRevision();
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.DATE_CLASS;
      Vector<String> vector0 = findWithCapabilities0.m_Packages;
      Capabilities capabilities0 = findWithCapabilities0.m_NotCapabilities;
      String[] stringArray0 = findWithCapabilities1.getOptions();
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      SingleIndex singleIndex0 = new SingleIndex("\tRetrieves the package list from the GenericPropertiesCreator\n\tfor the given superclass. (overrides -packages <list>).");
      findWithCapabilities2.m_Filename = "weka/core/Capabilities.props";
      findWithCapabilities2.m_ClassIndex = singleIndex0;
      findWithCapabilities2.isEnabledNot(capabilities_Capability1);
      System.setCurrentTimeMillis((-1L));
      FindWithCapabilities.main(stringArray0);
      Capabilities.Capability capabilities_Capability2 = Capabilities.Capability.NUMERIC_CLASS;
      findWithCapabilities0.isEnabled(capabilities_Capability2);
      assertEquals("-uninstall-package", findWithCapabilities0.getFilename());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-2);
      byteArray0[1] = (byte)25;
      byteArray0[2] = (byte) (-82);
      byteArray0[3] = (byte)39;
      byteArray0[4] = (byte) (-36);
      byteArray0[5] = (byte)53;
      byteArray0[6] = (byte)103;
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.UNARY_CLASS;
      findWithCapabilities0.enableNot(capabilities_Capability0);
      findWithCapabilities0.getRevision();
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.NO_CLASS;
      findWithCapabilities0.isEnabledNot(capabilities_Capability1);
      findWithCapabilities0.getMisses();
      Capabilities capabilities0 = findWithCapabilities0.getNotCapabilities();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability2 = Capabilities.Capability.UNARY_ATTRIBUTES;
      findWithCapabilities1.isEnabledNot(capabilities_Capability2);
      System.setCurrentTimeMillis((byte)25);
      System.setCurrentTimeMillis(0L);
      findWithCapabilities1.setCapabilities(capabilities0);
      String[] stringArray0 = findWithCapabilities0.getOptions();
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.find();
      findWithCapabilities0.setClassIndex(">=");
      Capabilities capabilities0 = findWithCapabilities0.getCapabilities();
      Capabilities capabilities1 = capabilities0.getAttributeCapabilities();
      Capabilities capabilities2 = capabilities1.getClassCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities2);
      capabilities1.m_Owner = (CapabilitiesHandler) findWithCapabilities0;
      testInstances0.getHandler();
      String[] stringArray0 = findWithCapabilities0.getOptions();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities1.setClassIndex("weka/core/Capabilities.props");
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      findWithCapabilities2.setFilename("ULBF_XvfrbxP");
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.BINARY_ATTRIBUTES;
      findWithCapabilities2.enableNot(capabilities_Capability0);
      findWithCapabilities0.find();
      findWithCapabilities1.getRevision();
      boolean boolean0 = capabilities1.m_Test;
      Vector<String> vector0 = findWithCapabilities1.m_Packages;
      Capabilities capabilities3 = findWithCapabilities0.m_NotCapabilities;
      String[] stringArray1 = findWithCapabilities2.getOptions();
      FindWithCapabilities findWithCapabilities3 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.MISSING_VALUES;
      findWithCapabilities3.isEnabledNot(capabilities_Capability1);
      System.setCurrentTimeMillis((-1L));
      FindWithCapabilities.main(stringArray0);
      try { 
        findWithCapabilities1.setOptions(stringArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities capabilities0 = findWithCapabilities0.getCapabilities();
      TestInstances testInstances0 = new TestInstances();
      findWithCapabilities0.getHandler();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities1.m_Superclass = "..";
      findWithCapabilities1.setClassIndex("..");
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.MISSING_CLASS_VALUES;
      findWithCapabilities1.enable(capabilities_Capability0);
      capabilities0.getAttributeCapabilities();
      capabilities0.enableAllAttributes();
      capabilities0.capabilities();
      Capabilities capabilities1 = findWithCapabilities0.getNotCapabilities();
      capabilities1.or(capabilities0);
      findWithCapabilities1.getOptions();
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      Range range0 = new Range();
      range0.m_Invert = true;
      Vector vector0 = range0.m_RangeStrings;
      findWithCapabilities2.setHandler(findWithCapabilities0);
      String[] stringArray0 = findWithCapabilities0.getOptions();
      findWithCapabilities1.find();
      findWithCapabilities1.getNotCapabilities();
      try { 
        findWithCapabilities1.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities capabilities0 = findWithCapabilities0.getNotCapabilities();
      findWithCapabilities0.getNotCapabilities();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/users/apanichella/wekafiles/props/Capabilities.props");
      FileSystemHandling.createFolder(evoSuiteFile0);
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      CapabilitiesHandler capabilitiesHandler0 = findWithCapabilities0.m_Handler;
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities1.setClassIndex(".*");
      Capabilities capabilities1 = findWithCapabilities1.m_NotCapabilities;
      capabilities0.capabilities();
      capabilities1.toString();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.UNARY_CLASS;
      capabilities0.enable(capabilities_Capability0);
      findWithCapabilities1.setCapabilities(capabilities0);
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      findWithCapabilities2.setHandler(findWithCapabilities1);
      SingleIndex singleIndex0 = findWithCapabilities2.m_ClassIndex;
      String[] stringArray0 = findWithCapabilities0.getOptions();
      FindWithCapabilities.main(stringArray0);
      findWithCapabilities0.isEnabledNot(capabilities_Capability0);
      FindWithCapabilities.main(testInstances0.DEFAULT_WORDS);
      FindWithCapabilities findWithCapabilities3 = new FindWithCapabilities();
      ClassDiscovery.m_ClassCache = null;
      // Undeclared exception!
      try { 
        findWithCapabilities3.getClassIndex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No index set
         //
         verifyException("weka.core.SingleIndex", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities capabilities0 = findWithCapabilities0.getCapabilities();
      boolean boolean0 = capabilities0.m_MinimumNumberInstancesTest;
      findWithCapabilities0.setClassIndex("TNY72bIUdHC");
      findWithCapabilities0.getCapabilities();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NUMERIC_CLASS;
      findWithCapabilities1.disableNot(capabilities_Capability0);
      findWithCapabilities1.setFilename("-uninstall-package");
      findWithCapabilities1.enableNot(capabilities_Capability0);
      findWithCapabilities1.find();
      findWithCapabilities0.setHandler(findWithCapabilities1);
      findWithCapabilities0.getRevision();
      Vector<String> vector0 = findWithCapabilities1.m_Packages;
      Capabilities capabilities1 = findWithCapabilities0.m_NotCapabilities;
      String[] stringArray0 = findWithCapabilities1.getOptions();
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      SingleIndex singleIndex0 = new SingleIndex("-uninstall-package");
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.RELATIONAL_ATTRIBUTES;
      findWithCapabilities2.isEnabledNot(capabilities_Capability1);
      System.setCurrentTimeMillis((-1L));
      FindWithCapabilities.main(stringArray0);
      boolean boolean1 = findWithCapabilities0.isEnabled(capabilities_Capability1);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.DATE_CLASS;
      findWithCapabilities0.enable(capabilities_Capability0);
      findWithCapabilities0.enable(capabilities_Capability0);
      Vector<String> vector0 = findWithCapabilities0.m_Packages;
      findWithCapabilities0.m_Packages = vector0;
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.NUMERIC_CLASS;
      findWithCapabilities0.disableNot(capabilities_Capability1);
      findWithCapabilities0.disable(capabilities_Capability0);
      findWithCapabilities0.enableNot(capabilities_Capability1);
      findWithCapabilities0.isEnabled(capabilities_Capability1);
      Capabilities.Capability capabilities_Capability2 = Capabilities.Capability.STRING_CLASS;
      findWithCapabilities0.getOptions();
      Capabilities capabilities0 = findWithCapabilities0.m_Capabilities;
      findWithCapabilities0.setFilename("dQ09iKji0T");
      findWithCapabilities0.getHandler();
      vector0.add("numeric-class");
      // Undeclared exception!
      try { 
        findWithCapabilities0.setHandler((CapabilitiesHandler) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.RELATIONAL_ATTRIBUTES;
      findWithCapabilities0.setClassIndex(">=");
      Capabilities capabilities0 = findWithCapabilities0.getCapabilities();
      Capabilities capabilities1 = capabilities0.getAttributeCapabilities();
      Capabilities capabilities2 = findWithCapabilities0.getNotCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities1);
      Capabilities capabilities3 = capabilities0.getClassCapabilities();
      CapabilitiesHandler capabilitiesHandler0 = findWithCapabilities0.m_Handler;
      capabilities2.enableAllClasses();
      capabilities3.or(capabilities1);
      TestInstances.arrayToList(testInstances0.DEFAULT_WORDS);
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities1.getCapabilities();
      capabilities2.capabilities();
      capabilities2.toSource("The,quick,brown,fox,jumps,over,the,lazy,dog", (-2));
      findWithCapabilities1.setCapabilities(capabilities2);
      testInstances0.getHandler();
      findWithCapabilities1.setHandler(findWithCapabilities0);
      findWithCapabilities0.getOptions();
      Random.setNextRandom(4);
      findWithCapabilities1.handles(capabilities_Capability0);
      String[] stringArray0 = new String[0];
      FindWithCapabilities.main(stringArray0);
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.UNARY_CLASS;
      findWithCapabilities1.isEnabledNot(capabilities_Capability1);
      FindWithCapabilities.main(testInstances0.DEFAULT_WORDS);
      findWithCapabilities1.getHandler();
      FindWithCapabilities.main(testInstances0.DEFAULT_WORDS);
      findWithCapabilities1.disable(capabilities_Capability0);
      findWithCapabilities0.setFilename("weka/core/Capabilities.props");
      // Undeclared exception!
      try { 
        findWithCapabilities1.getClassIndex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No index set
         //
         verifyException("weka.core.SingleIndex", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.MISSING_CLASS_VALUES;
      findWithCapabilities0.enableNot(capabilities_Capability0);
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.STRING_CLASS;
      findWithCapabilities0.m_GenericPropertiesCreator = false;
      findWithCapabilities0.enable(capabilities_Capability1);
      findWithCapabilities0.getOptions();
      // Undeclared exception!
      try { 
        findWithCapabilities0.getClassIndex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No index set
         //
         verifyException("weka.core.SingleIndex", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "R32VT8p8l0Q";
      stringArray0[1] = "author";
      stringArray0[2] = "-numeric-class";
      stringArray0[3] = ")~z";
      stringArray0[4] = "string-atts";
      stringArray0[5] = "0iCh\"8+^ .Gi3TECH";
      stringArray0[6] = "6,q7/Pl/}9UY|;";
      stringArray0[7] = "<1 P=xlT)f(VhX5\"O";
      stringArray0[8] = "QujI2b<UG!";
      try { 
        findWithCapabilities0.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities capabilities0 = findWithCapabilities0.getCapabilities();
      findWithCapabilities0.getCapabilities();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/users/apanichella/wekafiles/props/Capabilities.props");
      FileSystemHandling.createFolder(evoSuiteFile0);
      TestInstances testInstances0 = new TestInstances();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities1.m_Superclass = ".5";
      findWithCapabilities1.setClassIndex(".5");
      findWithCapabilities0.getNotCapabilities();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      Capabilities.PROPERTIES = (Properties) protectedProperties0;
      capabilities0.capabilities();
      Capabilities capabilities1 = findWithCapabilities1.getNotCapabilities();
      capabilities1.capabilities();
      capabilities1.enableAll();
      Capabilities capabilities2 = findWithCapabilities0.getNotCapabilities();
      capabilities2.or(capabilities1);
      String string0 = findWithCapabilities1.m_Filename;
      String[] stringArray0 = findWithCapabilities1.getOptions();
      Random.setNextRandom((-3521));
      FindWithCapabilities.main(testInstances0.DEFAULT_WORDS);
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities3 = new FindWithCapabilities();
      FindWithCapabilities.main(stringArray0);
      findWithCapabilities3.setFilename("H+,h,+>J");
      FindWithCapabilities.main(stringArray0);
      FindWithCapabilities findWithCapabilities4 = new FindWithCapabilities();
      // Undeclared exception!
      try { 
        findWithCapabilities4.getClassIndex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No index set
         //
         verifyException("weka.core.SingleIndex", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities capabilities0 = findWithCapabilities0.getCapabilities();
      TestInstances testInstances0 = new TestInstances();
      findWithCapabilities0.getHandler();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities1.m_Superclass = "..";
      findWithCapabilities1.setClassIndex("..");
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.ONLY_MULTIINSTANCE;
      findWithCapabilities1.enable(capabilities_Capability0);
      capabilities0.enable(capabilities_Capability0);
      capabilities0.getAttributeCapabilities();
      capabilities0.enableAllAttributes();
      capabilities0.capabilities();
      Capabilities capabilities1 = findWithCapabilities0.getNotCapabilities();
      capabilities1.or(capabilities0);
      findWithCapabilities1.getOptions();
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      Range range0 = new Range();
      // Undeclared exception!
      try { 
        findWithCapabilities2.setHandler((CapabilitiesHandler) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.find();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.MISSING_VALUES;
      findWithCapabilities0.enable(capabilities_Capability0);
      findWithCapabilities0.setClassIndex(">=");
      Capabilities capabilities0 = findWithCapabilities0.getCapabilities();
      Capabilities capabilities1 = capabilities0.getAttributeCapabilities();
      Capabilities capabilities2 = findWithCapabilities0.getNotCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities1);
      Capabilities capabilities3 = capabilities0.getClassCapabilities();
      CapabilitiesHandler capabilitiesHandler0 = findWithCapabilities0.m_Handler;
      String[] stringArray0 = findWithCapabilities0.getOptions();
      capabilities3.or(capabilities1);
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities1.setClassIndex("weka/core/Capabilities.props");
      findWithCapabilities1.m_GenericPropertiesCreator = true;
      Capabilities capabilities4 = findWithCapabilities1.m_NotCapabilities;
      capabilities2.capabilities();
      capabilities0.toString();
      findWithCapabilities1.setCapabilities(capabilities2);
      testInstances0.getHandler();
      findWithCapabilities0.enableNot(capabilities_Capability0);
      findWithCapabilities1.setHandler(findWithCapabilities0);
      findWithCapabilities0.getOptions();
      Random.setNextRandom((-1));
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.MISSING_CLASS_VALUES;
      findWithCapabilities1.handles(capabilities_Capability1);
      FindWithCapabilities.main(stringArray0);
      Capabilities.Capability capabilities_Capability2 = Capabilities.Capability.UNARY_CLASS;
      findWithCapabilities1.isEnabledNot(capabilities_Capability2);
      findWithCapabilities1.getHandler();
      FindWithCapabilities.main(testInstances0.DEFAULT_WORDS);
      findWithCapabilities0.setFilename("='wP([C[x7>|)X");
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      findWithCapabilities2.getRevision();
      // Undeclared exception!
      try { 
        findWithCapabilities2.getClassIndex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No index set
         //
         verifyException("weka.core.SingleIndex", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)106;
      byteArray0[1] = (byte) (-102);
      byteArray0[2] = (byte)15;
      byteArray0[3] = (byte)87;
      byteArray0[4] = (byte) (-108);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.listOptions();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      findWithCapabilities0.getMatches();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.DATE_ATTRIBUTES;
      findWithCapabilities0.enableNot(capabilities_Capability0);
      findWithCapabilities0.getHandler();
      findWithCapabilities0.getOptions();
      findWithCapabilities0.getFilename();
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.NO_CLASS;
      findWithCapabilities0.m_GenericPropertiesCreator = true;
      findWithCapabilities0.enable(capabilities_Capability1);
      findWithCapabilities0.listOptions();
      Capabilities.Capability capabilities_Capability2 = Capabilities.Capability.ONLY_MULTIINSTANCE;
      findWithCapabilities0.enable(capabilities_Capability2);
      String[] stringArray0 = findWithCapabilities0.getOptions();
      try { 
        findWithCapabilities0.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities capabilities0 = findWithCapabilities0.getCapabilities();
      Capabilities capabilities1 = findWithCapabilities0.getCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NO_CLASS;
      findWithCapabilities0.enable(capabilities_Capability0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/users/apanichella/wekafiles/props/Capabilities.props");
      FileSystemHandling.createFolder(evoSuiteFile0);
      TestInstances testInstances0 = new TestInstances();
      findWithCapabilities0.setClassIndex("ku;ZzT");
      findWithCapabilities0.getNotCapabilities();
      Properties properties0 = new Properties();
      Properties properties1 = Capabilities.PROPERTIES;
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties1);
      capabilities1.capabilities();
      findWithCapabilities0.getNotCapabilities();
      capabilities0.capabilities();
      Capabilities capabilities2 = findWithCapabilities0.getNotCapabilities();
      capabilities2.or(capabilities0);
      String string0 = findWithCapabilities0.m_Filename;
      String[] stringArray0 = findWithCapabilities0.getOptions();
      Random.setNextRandom((-2));
      FindWithCapabilities.main(testInstances0.DEFAULT_WORDS);
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      FindWithCapabilities.main(stringArray0);
      findWithCapabilities2.setFilename("|:LP7");
      FindWithCapabilities.main(stringArray0);
      FindWithCapabilities findWithCapabilities3 = new FindWithCapabilities();
      // Undeclared exception!
      try { 
        findWithCapabilities3.getClassIndex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No index set
         //
         verifyException("weka.core.SingleIndex", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      System.setCurrentTimeMillis(1876L);
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities0.setHandler(findWithCapabilities1);
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NO_CLASS;
      findWithCapabilities0.enableNot(capabilities_Capability0);
      findWithCapabilities0.m_Packages = null;
      // Undeclared exception!
      try { 
        findWithCapabilities0.getOptions();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      boolean boolean0 = ClassCache.VERBOSE;
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.MISSING_CLASS_VALUES;
      findWithCapabilities0.enable(capabilities_Capability0);
      Capabilities capabilities0 = findWithCapabilities0.getCapabilities();
      capabilities0.m_Owner = (CapabilitiesHandler) findWithCapabilities0;
      findWithCapabilities0.setCapabilities(capabilities0);
      findWithCapabilities0.listOptions();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/users/apanichella/wekafiles");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "weka/core/Capabilities.props");
      findWithCapabilities0.getOptions();
      Capabilities capabilities1 = findWithCapabilities0.m_Capabilities;
      ClassCache classCache0 = null;
      try {
        classCache0 = new ClassCache();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.evosuite.instrumentation.InstrumentingClassLoader cannot be cast to java.net.URLClassLoader
         //
         verifyException("weka.core.ClassCache", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.getCapabilities();
      TestInstances testInstances0 = new TestInstances();
      String string0 = "..";
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/users/apanichella/wekafiles/props");
      FileSystemHandling.setPermissions(evoSuiteFile0, true, true, true);
      findWithCapabilities0.setClassIndex("{?\u0003mab'yQ$dD(!0'");
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.RELATIONAL_CLASS;
      findWithCapabilities0.enable(capabilities_Capability0);
      findWithCapabilities0.getNotCapabilities();
      findWithCapabilities0.getOptions();
      byte byte0 = (byte) (-120);
      boolean boolean0 = findWithCapabilities0.m_GenericPropertiesCreator;
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      Range range0 = new Range();
      Vector vector0 = range0.m_RangeStrings;
      CapabilitiesHandler capabilitiesHandler0 = testInstances0.m_Handler;
      // Undeclared exception!
      try { 
        findWithCapabilities0.setHandler((CapabilitiesHandler) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.m_Superclass = "..";
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/users/apanichella/wekafiles");
      FileSystemHandling.setPermissions(evoSuiteFile0, false, false, false);
      findWithCapabilities0.setClassIndex("..");
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.MISSING_CLASS_VALUES;
      findWithCapabilities0.enable(capabilities_Capability0);
      findWithCapabilities0.getNotCapabilities();
      String[] stringArray0 = findWithCapabilities0.getOptions();
      byte[] byteArray0 = new byte[5];
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte) (-120);
      byteArray0[3] = (byte)121;
      byteArray0[4] = (byte)28;
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      Range range0 = new Range();
      Vector vector0 = range0.m_RangeStrings;
      FindWithCapabilities.main(stringArray0);
      assertEquals("", findWithCapabilities0.getFilename());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "-date-class";
      stringArray0[1] = "\tMust handle string attributes.";
      stringArray0[2] = "";
      stringArray0[3] = "' is not a CapabilitiesHandler!";
      FindWithCapabilities.main(stringArray0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities capabilities0 = findWithCapabilities0.getCapabilities();
      TestInstances testInstances0 = new TestInstances();
      findWithCapabilities0.getHandler();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities1.m_Superclass = " ";
      findWithCapabilities1.setClassIndex(" ");
      capabilities0.getAttributeCapabilities();
      capabilities0.enableAllAttributes();
      capabilities0.capabilities();
      Capabilities capabilities1 = findWithCapabilities1.m_Capabilities;
      capabilities1.or(capabilities0);
      String[] stringArray0 = findWithCapabilities1.getOptions();
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/users/apanichella/wekafiles");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      Range range0 = new Range();
      Vector vector0 = range0.m_RangeStrings;
      String[] stringArray1 = findWithCapabilities0.getOptions();
      Random.setNextRandom((-3177));
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NO_CLASS;
      findWithCapabilities1.handles(capabilities_Capability0);
      boolean boolean0 = capabilities1.m_MinimumNumberInstancesTest;
      FindWithCapabilities.main(stringArray0);
      FindWithCapabilities findWithCapabilities3 = new FindWithCapabilities();
      String[] stringArray2 = findWithCapabilities2.getOptions();
      FindWithCapabilities.main(testInstances0.DEFAULT_WORDS);
      FindWithCapabilities.main(stringArray2);
      findWithCapabilities3.isEnabled(capabilities_Capability0);
      FindWithCapabilities.main(stringArray1);
      findWithCapabilities3.setFilename("-t <file>");
      // Undeclared exception!
      try { 
        findWithCapabilities1.getClassIndex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No upper limit has been specified for index
         //
         verifyException("weka.core.SingleIndex", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.getHandler();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities1.m_Superclass = "..";
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.BINARY_ATTRIBUTES;
      findWithCapabilities0.disableNot(capabilities_Capability0);
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.STRING_CLASS;
      findWithCapabilities0.enable(capabilities_Capability1);
      findWithCapabilities1.setFilename("..");
      Capabilities.Capability capabilities_Capability2 = Capabilities.Capability.NOMINAL_ATTRIBUTES;
      findWithCapabilities1.enableNot(capabilities_Capability2);
      findWithCapabilities0.find();
      findWithCapabilities0.getRevision();
      Vector<String> vector0 = findWithCapabilities0.m_Packages;
      Capabilities capabilities0 = findWithCapabilities2.m_NotCapabilities;
      String[] stringArray0 = findWithCapabilities0.getOptions();
      FindWithCapabilities findWithCapabilities3 = new FindWithCapabilities();
      SingleIndex singleIndex0 = new SingleIndex("O|'R=k/");
      System.setCurrentTimeMillis((-1L));
      SingleIndex.main(stringArray0);
      FindWithCapabilities.main(stringArray0);
      FindWithCapabilities findWithCapabilities4 = new FindWithCapabilities();
      // Undeclared exception!
      try { 
        findWithCapabilities0.setFilename((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }
}
