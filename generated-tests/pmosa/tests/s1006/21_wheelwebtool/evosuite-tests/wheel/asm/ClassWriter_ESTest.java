/*
 * This file was automatically generated by EvoSuite
 * Tue Jul 17 06:48:01 GMT 2018
 */

package wheel.asm;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayInputStream;
import java.io.File;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.time.chrono.MockMinguoDate;
import org.evosuite.runtime.mock.java.time.chrono.MockThaiBuddhistDate;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import wheel.asm.AnnotationVisitor;
import wheel.asm.Attribute;
import wheel.asm.ClassReader;
import wheel.asm.ClassWriter;
import wheel.asm.FieldVisitor;
import wheel.asm.Frame;
import wheel.asm.Item;
import wheel.asm.MethodVisitor;
import wheel.asm.MethodWriter;
import wheel.asm.Type;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ClassWriter_ESTest extends ClassWriter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("wheel.asm.Frame");
      ClassWriter classWriter0 = new ClassWriter(classReader0, 2);
      classWriter0.getCommonSuperClass("wheel.asm.Frame", "wheel.asm.Frame");
      // Undeclared exception!
      try { 
        classWriter0.getMergedType(220, 220);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(4096);
      AnnotationVisitor annotationVisitor0 = classWriter0.visitAnnotation("w", false);
      assertNotNull(annotationVisitor0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(1025);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      classWriter0.visit(1025, 1753, "fC", "", (String) null, (String[]) null);
      // Undeclared exception!
      try { 
        classWriter0.getCommonSuperClass("StackMapTable", "i)DGd_T+,6QjLp7");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.ClassNotFoundException: Class 'StackMapTable.class' should be in target project, but could not be found!
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(44);
      String[] stringArray0 = new String[2];
      stringArray0[0] = null;
      stringArray0[0] = null;
      // Undeclared exception!
      try { 
        classWriter0.visit(44, 44, "|PIDG", (String) null, (String) null, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(202);
      String string0 = "Invalid IOCase name: ";
      classWriter0.newFieldItem("Invalid IOCase name: ", "Invalid IOCase name: ", "QfYg@)DO");
      classWriter0.visitInnerClass("7<(;F~Msu.0^YTF", "7<(;F~Msu.0^YTF", "7<(;F~Msu.0^YTF", 0);
      String string1 = "^.3pcHu`%]r2=|N";
      String string2 = "`vvKRJKD4qK";
      classWriter0.visitSource("^.3pcHu`%]r2=|N", "`vvKRJKD4qK");
      String string3 = "D7_<";
      classWriter0.version = 202;
      classWriter0.index = 202;
      classWriter0.newFieldItem("D7_<", "System", "System");
      classWriter0.newUTF8("D7_<");
      String[] stringArray0 = new String[3];
      stringArray0[0] = "D7_<";
      stringArray0[1] = ".nn#u#ma";
      stringArray0[2] = ".nn#u#ma";
      // Undeclared exception!
      try { 
        classWriter0.visitMethod(202, "System", "%", ".nn#u#ma", stringArray0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      classWriter0.visitSource("#\"ALBb9", "#\"ALBb9");
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("org.apache.commons.io.filefilter.TrueFileFilter");
      ClassWriter classWriter0 = new ClassWriter(classReader0, 47);
      classReader0.getClassName();
      Item item0 = classWriter0.newInteger((-456));
      assertNotNull(item0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-1573));
      classWriter0.visitInnerClass((String) null, (String) null, (String) null, 59);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(4103);
      classWriter0.newNameType(",*g[9MqnTb.6@n", ",*g[9MqnTb.6@n");
      byte[] byteArray0 = classWriter0.toByteArray();
      assertNotNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      classWriter0.newFloat(0);
      MockMinguoDate mockMinguoDate0 = new MockMinguoDate();
      // Undeclared exception!
      try { 
        classWriter0.newConst(mockMinguoDate0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // value org.evosuite.runtime.mock.java.time.chrono.MockMinguoDate@4ee56717
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(3789);
      classWriter0.invalidFrames = false;
      String[] stringArray0 = new String[5];
      stringArray0[0] = "}4/3V;)B5X]iBgQ:";
      stringArray0[1] = "}4/3V;)B5X]iBgQ:";
      classWriter0.version = 0;
      stringArray0[2] = "}4/3V;)B5X]iBgQ:";
      stringArray0[3] = "}4/3V;)B5X]iBgQ:";
      stringArray0[4] = "}4/3V;)B5X]iBgQ:";
      classWriter0.visitMethod(0, "}4/3V;)B5X]iBgQ:", "}4/3V;)B5X]iBgQ:", "}4/3V;)B5X]iBgQ:", stringArray0);
      classWriter0.newConstItem("}4/3V;)B5X]iBgQ:");
      classWriter0.newConstItem("}4/3V;)B5X]iBgQ:");
      MockThaiBuddhistDate mockThaiBuddhistDate0 = new MockThaiBuddhistDate();
      // Undeclared exception!
      try { 
        classWriter0.visitField(7, "}4/3V;)B5X]iBgQ:", "l4){#**Ax$d{`f76", "% ", mockThaiBuddhistDate0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // value org.evosuite.runtime.mock.java.time.chrono.MockThaiBuddhistDate@5f90e40f
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      MockMinguoDate mockMinguoDate0 = new MockMinguoDate();
      classWriter0.newConst("");
      byte[] byteArray0 = classWriter0.toByteArray();
      assertNotNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(74);
      classWriter0.newDouble(78.3666);
      byte[] byteArray0 = classWriter0.toByteArray();
      assertNotNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-128));
      String string0 = "w";
      classWriter0.addUninitializedType("w", (-128));
      classWriter0.visitOuterClass("w", "w", "w");
      classWriter0.newInteger((-128));
      String string1 = null;
      // Undeclared exception!
      try { 
        classWriter0.newMethod((String) null, (String) null, (String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-2271));
      classWriter0.visitOuterClass("4*", (String) null, "4*");
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(4096);
      classWriter0.newDouble(4096);
      // Undeclared exception!
      try { 
        classWriter0.newMethod((String) null, "LineNumberTable", "LineNumberTable", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-904));
      classWriter0.visitOuterClass(";+", ";+", (String) null);
      // Undeclared exception!
      try { 
        classWriter0.getMergedType((-904), (-904));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(4102);
      Long long0 = new Long(4102);
      Boolean boolean0 = Boolean.valueOf(false);
      int int0 = classWriter0.newConst(boolean0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-777));
      String[] stringArray0 = new String[8];
      stringArray0[0] = "&7jLMvDXozW80:";
      stringArray0[1] = "";
      stringArray0[2] = null;
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "*)ROP";
      stringArray0[6] = "";
      stringArray0[7] = "&7jLMvDXozW80:";
      // Undeclared exception!
      try { 
        classWriter0.visit((-777), 16777225, "", (String) null, "", stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(1700);
      classWriter0.visitAnnotation("@=5+<.P|x==}!", true);
      classWriter0.thisName = "The filters must not be null";
      classWriter0.newClassItem("SourceFile");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      classWriter0.newClass("~CZ_+Y@dX");
      Attribute attribute0 = new Attribute("The filters must not be null");
      classWriter0.visitAttribute(attribute0);
      assertTrue(attribute0.isUnknown());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(1700);
      classWriter0.visitAnnotation("@=5+<.P|x==}!", true);
      classWriter0.thisName = "The filters must not be null";
      MethodWriter methodWriter0 = classWriter0.firstMethod;
      classWriter0.lastMethod = null;
      classWriter0.newClassItem("SourceFile");
      classWriter0.newClass("~CZ_+Y@dX");
      classWriter0.visitEnd();
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      Long long0 = new Long(2);
      classWriter0.newConst(long0);
      int int0 = Frame.VALUE;
      assertFalse(int0 == int1);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(19);
      classWriter0.toByteArray();
      int int0 = classWriter0.addType("4#AF6~24HAg&2||Zqg");
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(4103);
      int int0 = classWriter0.addType("");
      assertEquals(1, int0);
      
      ClassWriter classWriter1 = new ClassWriter(2);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)54;
      byteArray0[1] = (byte)11;
      byteArray0[2] = (byte)2;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      int int1 = classWriter0.addUninitializedType("AkS+`-Kp$52sndibVd", 192);
      assertEquals(2, int1);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-570));
      classWriter0.visitEnd();
      Item item0 = classWriter0.newDouble((-570));
      Item item1 = classWriter0.newFieldItem("", "", "");
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      classWriter0.visit(2, (-570), "SourceFile", "", "", stringArray0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)40;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-36);
      byteArray0[3] = (byte)107;
      byteArray0[4] = (byte)27;
      byteArray0[5] = (byte)127;
      byteArray0[6] = (byte)115;
      byteArray0[7] = (byte) (-7);
      byteArray0[8] = (byte) (-51);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Item item2 = classWriter0.newDouble((-1.0));
      assertNotSame(item2, item1);
      assertNotNull(item2);
      assertNotSame(item2, item0);
      
      System.setCurrentTimeMillis(0L);
      Item item3 = classWriter0.newFieldItem("SourceFile", "", "");
      assertNotNull(item3);
      assertNotSame(item3, item1);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(75);
      classWriter0.visitSource("b+\"N<9Q8t", (String) null);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(74);
      Item[] itemArray0 = new Item[6];
      Item item0 = new Item();
      itemArray0[0] = item0;
      Item item1 = new Item(1, item0);
      itemArray0[1] = item1;
      Item item2 = classWriter0.newFloat(74);
      itemArray0[2] = item2;
      Item item3 = classWriter0.newFloat(74);
      itemArray0[3] = item3;
      Item item4 = classWriter0.newDouble(74);
      itemArray0[4] = item4;
      Item item5 = classWriter0.key3;
      itemArray0[5] = item5;
      classWriter0.typeTable = itemArray0;
      int int0 = classWriter0.newField("", "", "");
      assertEquals(7, int0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-3716));
      classWriter0.invalidFrames = false;
      Type type0 = Type.SHORT_TYPE;
      Item item0 = classWriter0.newConstItem(type0);
      assertNotNull(item0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(74);
      classWriter0.visitInnerClass("!", "45hZm$g", "", 74);
      classWriter0.visitInnerClass("45hZm$g", "45hZm$g", "AAAAAAAAAAAAAAAABCKLLDDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAADDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAAAAAAAAAAAAAAAAAAIIIIIIIIIIIIIIIIDNOAAAAAAGGGGGGGHAFBFAAFFAAQPIIJJIIIIIIIIIIIIIIIIII", (-2507));
      String string0 = File.separator;
      assertEquals("/", string0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(607);
      classWriter0.visitSource((String) null, "RuntimeVisibleAnnotations");
      Attribute attribute0 = new Attribute((String) null);
      classWriter0.visitAttribute(attribute0);
      // Undeclared exception!
      try { 
        classWriter0.visitField(29, (String) null, "RuntimeVisibleAnnotations", "RuntimeVisibleAnnotations", (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(11);
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte) (-12);
      byteArray0[2] = (byte)127;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream0.reset();
      String[] stringArray0 = new String[3];
      classWriter0.visitOuterClass("", "", stringArray0[2]);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(898);
      classWriter0.visitOuterClass("7LLG9=Z|[xkr", (String) null, "");
      classWriter0.toByteArray();
      classWriter0.newClassItem("");
      classWriter0.newDouble(0.0);
      classWriter0.visitInnerClass("", "VSIQ21u$!)", "", 898);
      classWriter0.newFieldItem("", "<o(_C \"A>E", "*n+_6");
      classWriter0.visitEnd();
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(27);
      Item item0 = classWriter0.newInteger(27);
      Item item1 = classWriter0.newInteger(27);
      assertNotNull(item1);
      assertSame(item1, item0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-3978));
      Item item0 = classWriter0.newDouble((-3978));
      Item item1 = classWriter0.newDouble((-3978));
      assertNotNull(item1);
      assertSame(item1, item0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(33);
      classWriter0.addUninitializedType("", 33);
      classWriter0.addUninitializedType("", 33);
      FieldVisitor fieldVisitor0 = classWriter0.visitField(43, "LocalVariableTypeTable", "", "void", "void");
      assertNotNull(fieldVisitor0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(131008);
      classWriter0.addType("");
      classWriter0.addType("");
      classWriter0.newFieldItem("InnerClasses", "", "");
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      stringArray0[1] = "InnerClasses";
      stringArray0[2] = "Ljava/lang/Synthetic;";
      MethodVisitor methodVisitor0 = classWriter0.visitMethod(1, "", "Sensitive", "Ljava/lang/Synthetic;", stringArray0);
      assertNotNull(methodVisitor0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(75);
      String string0 = "";
      classWriter0.visit(4191, 4191, "", "org.apache.commons.io.filefilter.CanReadFileFilter", "org.apache.commons.io.filefilter.CanReadFileFilter", (String[]) null);
      classWriter0.toByteArray();
      classWriter0.toByteArray();
      long long0 = (-911L);
      // Undeclared exception!
      try { 
        classWriter0.getCommonSuperClass("", (String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.ClassNotFoundException: 
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(75);
      classWriter0.visit(4191, 4191, "", "org.apache.commons.io.filefilter.CanReadFileFilter", "org.apache.commons.io.filefilter.CanReadFileFilter", (String[]) null);
      byte[] byteArray0 = classWriter0.toByteArray();
      classWriter0.newLong((-911L));
      classWriter0.newMethodItem("Ini\"rClasses", "z", "", true);
      classWriter0.newMethod("mX%`9 N@im=*", "ConstantValue", "", false);
      classWriter0.newField("", "The wildcard must not be null", "");
      byte[] byteArray1 = classWriter0.toByteArray();
      assertFalse(byteArray1.equals((Object)byteArray0));
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(131008);
      Item item0 = classWriter0.newMethodItem("", "", "", true);
      Item item1 = classWriter0.newMethodItem("", "4-%-/dUStp", "", true);
      assertNotSame(item1, item0);
      
      int int0 = classWriter0.newMethod("", "", "", true);
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(131034);
      classWriter0.toByteArray();
      classWriter0.newLong(0L);
      classWriter0.newFieldItem("%fSYxb$+`lZ4uPSixbA", "Label offset position has not been resolved yet", "%fSYxb$+`lZ4uPSixbA");
      classWriter0.newLong(0L);
      // Undeclared exception!
      try { 
        classWriter0.getCommonSuperClass("&UkM|/lB_zxe_4|X", "RuntimeVisibleAnnotations");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.ClassNotFoundException: Class '&UkM|/lB_zxe_4|X.class' should be in target project, but could not be found!
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(36);
      byte[] byteArray0 = ClassWriter.TYPE;
      classWriter0.newInteger(2);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String string0 = classWriter0.getCommonSuperClass("org.apache.commons.io.filefilter.TrueFileFilter", "org.apache.commons.io.filefilter.TrueFileFilter");
      assertEquals("org.apache.commons.io.filefilter.TrueFileFilter", string0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(1014);
      classWriter0.toByteArray();
      MethodWriter methodWriter0 = classWriter0.lastMethod;
      classWriter0.lastMethod = null;
      Item item0 = classWriter0.newFieldItem("d$Jfb\"2 nA^/}l", "d$Jfb\"2 nA^/}l", "d$Jfb\"2 nA^/}l");
      assertNotNull(item0);
      
      Item item1 = classWriter0.newLong(1014);
      assertNotNull(item1);
      
      int int0 = classWriter0.newField("d$Jfb\"2 nA^/}l", "d$Jfb\"2 nA^/}l", "d$Jfb\"2 nA^/}l");
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(1020);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      classWriter0.getCommonSuperClass("org.apache.commons.io.filefilter.EmptyFileFilter", "org.apache.commons.io.filefilter.TrueFileFilter");
      ClassWriter classWriter1 = new ClassWriter(1);
      // Undeclared exception!
      try { 
        classWriter1.getMergedType(33, 29);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }
}
