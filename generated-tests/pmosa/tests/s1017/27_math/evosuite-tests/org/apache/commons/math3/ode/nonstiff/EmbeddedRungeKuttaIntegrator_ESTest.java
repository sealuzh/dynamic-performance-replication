/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 18 13:09:11 GMT 2018
 */

package org.apache.commons.math3.ode.nonstiff;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.ode.ExpandableStatefulODE;
import org.apache.commons.math3.ode.FirstOrderConverter;
import org.apache.commons.math3.ode.SecondOrderDifferentialEquations;
import org.apache.commons.math3.ode.nonstiff.DormandPrince54Integrator;
import org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator;
import org.apache.commons.math3.ode.nonstiff.HighamHall54Integrator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class EmbeddedRungeKuttaIntegrator_ESTest extends EmbeddedRungeKuttaIntegrator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 3918.5582;
      doubleArray0[1] = 248.0;
      doubleArray0[2] = 248.0;
      doubleArray0[3] = 248.0;
      doubleArray0[4] = 248.0;
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(248.0, 248.0, doubleArray0, doubleArray0);
      double double0 = dormandPrince54Integrator0.getSafety();
      assertEquals(0.9, double0, 0.01);
      assertEquals(0.2, dormandPrince54Integrator0.getMinReduction(), 0.01);
      assertEquals(10.0, dormandPrince54Integrator0.getMaxGrowth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(1307.0, 6.8812326946963, 1.029901759234897E-7, 1.029901759234897E-7);
      dormandPrince853Integrator0.scalRelativeTolerance = 1300.657;
      dormandPrince853Integrator0.getMaxGrowth();
      dormandPrince853Integrator0.getSafety();
      dormandPrince853Integrator0.setMaxGrowth(6.8812326946963);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 1300.657;
      doubleArray0[1] = 1.029901759234897E-7;
      doubleArray0[2] = 1307.0;
      dormandPrince853Integrator0.vecRelativeTolerance = doubleArray0;
      dormandPrince853Integrator0.getOrder();
      dormandPrince853Integrator0.setSafety(0.0);
      assertEquals(6.8812326946963, dormandPrince853Integrator0.getMaxGrowth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(1.0, 738, 0.0, 1.0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(140).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      // Undeclared exception!
      dormandPrince54Integrator0.integrate(expandableStatefulODE0, 0.0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      double double0 = 5.049564425991982E302;
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 5.049564425991982E302;
      doubleArray0[1] = 5.049564425991982E302;
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = 5.049564425991982E302;
      doubleArray1[1] = 5.049564425991982E302;
      doubleArray1[2] = 5.049564425991982E302;
      double double1 = 0.0;
      double double2 = 4.471273900208441E233;
      double double3 = (-1.6001563011916016E-8);
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(5.049564425991982E302, 4.471273900208441E233, (-1.6001563011916016E-8), 5.049564425991982E302);
      dormandPrince54Integrator0.getEventHandlers();
      double double4 = 0.3676496744155884;
      dormandPrince54Integrator0.setMaxGrowth(0.3676496744155884);
      dormandPrince54Integrator0.getMinReduction();
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      double double5 = 1897.5691993;
      // Undeclared exception!
      dormandPrince54Integrator0.integrate(expandableStatefulODE0, 1897.5691993);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(3463.756713972, (-2250.8615373577095), (-2250.8615373577095), (-2250.8615373577095));
      dormandPrince54Integrator0.setMaxEvaluations(0);
      dormandPrince54Integrator0.setMinReduction(0.0);
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(3463.756713972, 0.0, 4.194022929828008E-9, 3033.3700009196);
      double[][] doubleArray0 = new double[3][2];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = 4.194022929828008E-9;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[0];
      highamHall54Integrator0.getStepHandlers();
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[9];
      doubleArray3[0] = 0.0;
      doubleArray3[1] = 0.0;
      doubleArray3[2] = 0.0;
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      expandableStatefulODE0.getTotalDimension();
      // Undeclared exception!
      highamHall54Integrator0.integrate(expandableStatefulODE0, 1.0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      double double0 = 0.2;
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.2;
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(0.2, 0.2, 0.2, 2038.0435780042);
      dormandPrince54Integrator0.setMaxEvaluations(1932735283);
      dormandPrince54Integrator0.setMinReduction(10.0);
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(10.0, 2038.0435780042, 1.0, 1.0);
      highamHall54Integrator0.getStepHandlers();
      double[][] doubleArray1 = new double[7][5];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      doubleArray1[5] = doubleArray0;
      double[] doubleArray2 = new double[1];
      doubleArray2[0] = 3033.3700009196;
      doubleArray1[6] = doubleArray2;
      highamHall54Integrator0.estimateError(doubleArray1, doubleArray0, doubleArray0, (-1449.8111));
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(1).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      double double1 = 0.0;
      // Undeclared exception!
      dormandPrince54Integrator0.integrate(expandableStatefulODE0, 0.0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(0.0, 738, 0.0, 0.0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(140).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      expandableStatefulODE0.setTime((-2.9726830960751796E-9));
      // Undeclared exception!
      dormandPrince54Integrator0.integrate(expandableStatefulODE0, (double) 738);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      double double0 = (-1.6001563011916016E-8);
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(1986.21425699712, (-1.6001563011916016E-8), (-1.6001563011916016E-8), 9.670771210463886E128);
      dormandPrince54Integrator0.getEventHandlers();
      double double1 = (-5.67996159922899E-5);
      dormandPrince54Integrator0.setMaxGrowth((-5.67996159922899E-5));
      dormandPrince54Integrator0.getMinReduction();
      int int0 = 184;
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(184).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      expandableStatefulODE0.setTime((-1.0));
      try { 
        dormandPrince54Integrator0.integrate(expandableStatefulODE0, 0.2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // minimal step size (1.99E03) reached, integration needs 9.09E-13
         //
         verifyException("org.apache.commons.math3.ode.nonstiff.AdaptiveStepsizeIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      double double0 = 4.995552216100365E-193;
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      double[] doubleArray0 = new double[0];
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator((-1.0), 4.995552216100365E-193, doubleArray0, doubleArray0);
      // Undeclared exception!
      dormandPrince54Integrator0.integrate(expandableStatefulODE0, 1.0);
  }
}
