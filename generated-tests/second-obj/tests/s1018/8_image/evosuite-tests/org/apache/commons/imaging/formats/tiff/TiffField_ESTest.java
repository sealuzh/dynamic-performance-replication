/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 05:41:34 GMT 2018
 */

package org.apache.commons.imaging.formats.tiff;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.io.PrintWriter;
import java.io.UnsupportedEncodingException;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;
import java.util.regex.Pattern;
import org.apache.commons.imaging.formats.tiff.TiffElement;
import org.apache.commons.imaging.formats.tiff.TiffField;
import org.apache.commons.imaging.formats.tiff.fieldtypes.FieldType;
import org.apache.commons.imaging.formats.tiff.fieldtypes.FieldTypeAscii;
import org.apache.commons.imaging.formats.tiff.fieldtypes.FieldTypeByte;
import org.apache.commons.imaging.formats.tiff.fieldtypes.FieldTypeDouble;
import org.apache.commons.imaging.formats.tiff.fieldtypes.FieldTypeFloat;
import org.apache.commons.imaging.formats.tiff.fieldtypes.FieldTypeLong;
import org.apache.commons.imaging.formats.tiff.fieldtypes.FieldTypeRational;
import org.apache.commons.imaging.formats.tiff.fieldtypes.FieldTypeShort;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TiffField_ESTest extends TiffField_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)87;
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      FieldTypeByte fieldTypeByte0 = FieldType.BYTE;
      fieldTypeByte0.writeData(byteArray0, byteOrder0);
      TiffField tiffField0 = new TiffField((byte)87, (byte)87, fieldTypeByte0, 64L, (byte)87, byteArray0, byteOrder0, (byte)87);
      String string0 = tiffField0.getValueDescription();
      assertEquals(64, tiffField0.getBytesLength());
      assertEquals(87, tiffField0.getDirectoryType());
      assertNotNull(string0);
      assertEquals(87, tiffField0.getOffset());
      assertEquals(87, tiffField0.getTag());
      assertEquals(64L, tiffField0.getCount());
      assertEquals(87, tiffField0.getSortHint());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      byte[] byteArray0 = new byte[107];
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      ByteOrder byteOrder1 = ByteOrder.nativeOrder();
      System.setCurrentTimeMillis(1445);
      FieldTypeShort fieldTypeShort0 = FieldType.SSHORT;
      TiffField tiffField0 = new TiffField(822, 822, fieldTypeShort0, 1445, 1445, byteArray0, byteOrder1, 822);
      tiffField0.getValueDescription();
      try { 
        FieldType.getFieldType(822);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Field type 822 is unsupported
         //
         verifyException("org.apache.commons.imaging.formats.tiff.fieldtypes.FieldType", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      byte[] byteArray0 = new byte[93];
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      FieldTypeShort fieldTypeShort0 = FieldType.SHORT;
      TiffField tiffField0 = new TiffField((byte)54, (byte)54, fieldTypeShort0, (byte)54, (byte)54, byteArray0, byteOrder0, (byte)54);
      String string0 = tiffField0.getValueDescription();
      Object object0 = new Object();
      Object object1 = new Object();
      ByteOrder.nativeOrder();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "-,9u~me1tM7{");
      String string1 = Pattern.quote(", ");
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      FieldTypeAscii fieldTypeAscii0 = FieldType.ASCII;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)89;
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
      ByteBuffer byteBuffer1 = byteBuffer0.get(byteArray0);
      ByteOrder byteOrder0 = byteBuffer1.order();
      TiffField tiffField0 = new TiffField(1549, 1549, fieldTypeAscii0, 34912L, 1549, byteArray0, byteOrder0, (byte)89);
      String string0 = tiffField0.getStringValue();
      assertEquals(34912, tiffField0.getBytesLength());
      assertEquals(1549, tiffField0.getTag());
      assertEquals(89, tiffField0.getSortHint());
      assertEquals(1549, tiffField0.getOffset());
      assertNotNull(string0);
      assertEquals(1549, tiffField0.getDirectoryType());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      FieldTypeRational fieldTypeRational0 = FieldType.RATIONAL;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-64);
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      TiffField tiffField0 = new TiffField(955, 25, fieldTypeRational0, 5760L, 955, byteArray0, byteOrder0, 955);
      try { 
        tiffField0.getStringValue();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Expected String value(-1 (0xffffffff: Unknown Tag): ): [Lorg.apache.commons.imaging.common.RationalNumber;@1d9bb226
         //
         verifyException("org.apache.commons.imaging.formats.tiff.TiffField", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      TiffField tiffField0 = new TiffField((-1398), (-851), (FieldType) null, (-1398), (-1688L), (byte[]) null, byteOrder0, (-851));
      tiffField0.getDirectoryType();
      // Undeclared exception!
      try { 
        tiffField0.getDoubleValue();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.formats.tiff.taginfos.TagInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      FieldTypeLong fieldTypeLong0 = FieldType.IFD;
      byte[] byteArray0 = new byte[1];
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      TiffField tiffField0 = new TiffField(2115, 6, fieldTypeLong0, 2115, 0L, byteArray0, byteOrder0, 2115);
      tiffField0.getTag();
      // Undeclared exception!
      try { 
        tiffField0.getIntValue();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // [I cannot be cast to java.lang.Number
         //
         verifyException("org.apache.commons.imaging.formats.tiff.TiffField", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      FieldTypeRational fieldTypeRational0 = FieldType.SRATIONAL;
      byte[] byteArray0 = new byte[0];
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      TiffField tiffField0 = new TiffField(519, 531, fieldTypeRational0, 4L, 240L, byteArray0, byteOrder0, 531);
      int int0 = tiffField0.getIntValueOrArraySum();
      assertEquals(4L, tiffField0.getCount());
      assertEquals(531, tiffField0.getSortHint());
      assertEquals(0, int0);
      assertEquals(519, tiffField0.getTag());
      assertEquals(531, tiffField0.getDirectoryType());
      assertEquals(240, tiffField0.getOffset());
      assertEquals(32, tiffField0.getBytesLength());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      FieldTypeByte fieldTypeByte0 = FieldType.UNDEFINED;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-16);
      byteArray0[1] = (byte) (-7);
      TiffField tiffField0 = new TiffField((-859), (-1227), fieldTypeByte0, 1398L, 1369L, byteArray0, (ByteOrder) null, (byte) (-7));
      try { 
        tiffField0.getIntValueOrArraySum();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unknown value: [B@3fc83efd for: -1 (0xffffffff: Unknown Tag): 
         //
         verifyException("org.apache.commons.imaging.formats.tiff.TiffField", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      FieldTypeFloat fieldTypeFloat0 = FieldType.FLOAT;
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      TiffField tiffField0 = new TiffField(38, 38, fieldTypeFloat0, 38, 38, (byte[]) null, byteOrder0, 2262);
      // Undeclared exception!
      try { 
        tiffField0.getOversizeValueElement();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.formats.tiff.TiffField", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      FieldTypeAscii fieldTypeAscii0 = FieldType.ASCII;
      byte[] byteArray0 = new byte[1];
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      TiffField tiffField0 = new TiffField((-92), 0, fieldTypeAscii0, 0, 1474, byteArray0, byteOrder0, (-2099));
      TiffField.OversizeValueElement tiffField_OversizeValueElement0 = tiffField0.new OversizeValueElement(1474, 0);
      String string0 = tiffField_OversizeValueElement0.getElementDescription(false);
      assertEquals((-2099), tiffField0.getSortHint());
      assertNotNull(string0);
      assertEquals(1474, tiffField0.getOffset());
      assertEquals((-92), tiffField0.getTag());
      assertTrue(tiffField0.isLocalValue());
      assertEquals(0, tiffField0.getDirectoryType());
      assertEquals("OversizeValueElement, tag: Unknown Tag, fieldType: ASCII", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      FieldTypeLong fieldTypeLong0 = FieldType.IFD;
      TiffField tiffField0 = new TiffField(33449, (-641), fieldTypeLong0, 4L, (-2147483648L), byteArray0, byteOrder0, (-641));
      tiffField0.getFieldTypeName();
      assertEquals(33449, tiffField0.getTag());
      assertEquals((-641), tiffField0.getDirectoryType());
      assertEquals(4L, tiffField0.getCount());
      assertEquals((-641), tiffField0.getSortHint());
      assertEquals(Integer.MIN_VALUE, tiffField0.getOffset());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      FieldTypeByte fieldTypeByte0 = FieldType.UNDEFINED;
      byte[] byteArray0 = new byte[1];
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      TiffField tiffField0 = new TiffField(33449, (-2769), fieldTypeByte0, (-2769), 33449, byteArray0, byteOrder0, 33449);
      tiffField0.getOversizeValueElement();
      // Undeclared exception!
      try { 
        tiffField0.getStringValue();
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.common.BinaryFunctions", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      FieldTypeByte fieldTypeByte0 = FieldType.SBYTE;
      byte[] byteArray0 = new byte[1];
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      TiffField tiffField0 = new TiffField(1066, 1066, fieldTypeByte0, 1066, 1066, byteArray0, byteOrder0, 1066);
      String string0 = tiffField0.getTagName();
      assertEquals(1066, tiffField0.getSortHint());
      assertEquals("Unknown Tag (0x42a)", string0);
      assertEquals(1066, tiffField0.getDirectoryType());
      assertEquals(1066, tiffField0.getOffset());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      FieldTypeByte fieldTypeByte0 = FieldType.SBYTE;
      byte[] byteArray0 = new byte[0];
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      TiffField tiffField0 = new TiffField(1066, 1066, fieldTypeByte0, 1066, 1066, byteArray0, byteOrder0, 1066);
      String string0 = tiffField0.getDescriptionWithoutValue();
      assertEquals("1066 (0x42a: Unknown Tag): ", string0);
      assertEquals(1066, tiffField0.getSortHint());
      assertEquals(1066, tiffField0.getOffset());
      assertEquals(1066, tiffField0.getDirectoryType());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      FieldTypeRational fieldTypeRational0 = FieldType.SRATIONAL;
      byte[] byteArray0 = new byte[0];
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      TiffField tiffField0 = new TiffField(519, 531, fieldTypeRational0, 51L, 240L, byteArray0, byteOrder0, 531);
      String string0 = tiffField0.getValueDescription();
      assertNotNull(string0);
      assertEquals("", string0);
      
      int int0 = tiffField0.getSortHint();
      assertEquals(240, tiffField0.getOffset());
      assertEquals(531, int0);
      assertEquals(408, tiffField0.getBytesLength());
      assertEquals(51L, tiffField0.getCount());
      assertEquals(519, tiffField0.getTag());
      assertEquals(531, tiffField0.getDirectoryType());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      FieldTypeAscii fieldTypeAscii0 = new FieldTypeAscii(31, "X>/=_[J3?PIm6");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)50;
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      TiffField tiffField0 = new TiffField((-1135), 31, fieldTypeAscii0, 31, (-164L), byteArray0, byteOrder0, (-3012));
      tiffField0.dump();
      assertEquals((-164), tiffField0.getOffset());
      assertEquals(31L, tiffField0.getCount());
      assertEquals((-1135), tiffField0.getTag());
      assertEquals(31, tiffField0.getBytesLength());
      assertEquals(31, tiffField0.getDirectoryType());
      assertEquals((-3012), tiffField0.getSortHint());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FieldTypeRational fieldTypeRational0 = FieldType.SRATIONAL;
      byte[] byteArray0 = new byte[163];
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      TiffField tiffField0 = new TiffField((byte) (-89), 0, fieldTypeRational0, 2367L, (byte) (-89), byteArray0, byteOrder0, (byte)27);
      String string0 = tiffField0.getValueDescription();
      assertEquals(0, tiffField0.getDirectoryType());
      assertEquals(18936, tiffField0.getBytesLength());
      assertNotNull(string0);
      assertEquals(27, tiffField0.getSortHint());
      assertEquals((-89), tiffField0.getOffset());
      assertEquals(2367L, tiffField0.getCount());
      assertEquals((-89), tiffField0.getTag());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      FieldTypeFloat fieldTypeFloat0 = new FieldTypeFloat(22, "");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-5);
      byteArray0[1] = (byte) (-5);
      byteArray0[2] = (byte)60;
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      TiffField tiffField0 = new TiffField((-1203), (byte)30, fieldTypeFloat0, 272120L, (byte) (-5), byteArray0, byteOrder0, (byte)60);
      String string0 = tiffField0.getValueDescription();
      assertEquals(1088480, tiffField0.getBytesLength());
      assertEquals((-5), tiffField0.getOffset());
      assertEquals(30, tiffField0.getDirectoryType());
      assertEquals((-1203), tiffField0.getTag());
      assertEquals(272120L, tiffField0.getCount());
      assertEquals(60, tiffField0.getSortHint());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      FieldTypeRational fieldTypeRational0 = FieldType.RATIONAL;
      byte[] byteArray0 = new byte[257];
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      Object object0 = new Object();
      TiffField tiffField0 = new TiffField(34043, (-233), fieldTypeRational0, 1361L, 34043, byteArray0, byteOrder0, 50);
      ByteOrder.nativeOrder();
      // Undeclared exception!
      try { 
        tiffField0.getIntValueOrArraySum();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.apache.commons.imaging.common.RationalNumber", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      FieldTypeByte fieldTypeByte0 = FieldType.UNDEFINED;
      TiffField tiffField0 = new TiffField(3115, 12, fieldTypeByte0, 3115, 3115, (byte[]) null, (ByteOrder) null, 12);
      TiffField.OversizeValueElement tiffField_OversizeValueElement0 = tiffField0.new OversizeValueElement(31, 41987);
      String string0 = tiffField_OversizeValueElement0.getElementDescription(true);
      assertEquals(12, tiffField0.getDirectoryType());
      assertNull(string0);
      assertEquals(12, tiffField0.getSortHint());
      assertEquals(3115, tiffField0.getTag());
      assertEquals(3115, tiffField0.getOffset());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      FieldTypeFloat fieldTypeFloat0 = new FieldTypeFloat(50, "d9Q@,th+a");
      byte[] byteArray0 = new byte[0];
      TiffField tiffField0 = new TiffField(48259, 25, fieldTypeFloat0, 25, 25, byteArray0, (ByteOrder) null, 50);
      // Undeclared exception!
      try { 
        tiffField0.getDoubleValue();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // [F cannot be cast to java.lang.Number
         //
         verifyException("org.apache.commons.imaging.formats.tiff.TiffField", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      FieldTypeShort fieldTypeShort0 = FieldType.SHORT;
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)33;
      byteArray0[2] = (byte)33;
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      TiffField tiffField0 = new TiffField(111, 0, fieldTypeShort0, (byte)33, 111, byteArray0, byteOrder0, (byte)0);
      int int0 = tiffField0.getOffset();
      assertEquals(111, int0);
      
      int[] intArray0 = tiffField0.getIntArrayValue();
      assertEquals(0, tiffField0.getSortHint());
      assertEquals(0, tiffField0.getDirectoryType());
      assertEquals(66, tiffField0.getBytesLength());
      assertEquals(111, tiffField0.getTag());
      assertEquals(33L, tiffField0.getCount());
      assertArrayEquals(new int[] {33, 33, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      byte[] byteArray0 = new byte[16];
      FieldTypeRational fieldTypeRational0 = new FieldTypeRational(1538, ", ");
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      ByteOrder.nativeOrder();
      TiffField tiffField0 = new TiffField(12, 34023, fieldTypeRational0, 34023, (-354), byteArray0, byteOrder0, (-354));
      // Undeclared exception!
      try { 
        tiffField0.getIntArrayValue();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.apache.commons.imaging.common.RationalNumber", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      FieldTypeLong fieldTypeLong0 = FieldType.IFD;
      byte[] byteArray0 = new byte[1];
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      TiffField tiffField0 = new TiffField(2115, 6, fieldTypeLong0, 2115, 0L, byteArray0, byteOrder0, 1);
      int int0 = tiffField0.getTag();
      assertEquals(2115, int0);
      
      long long0 = new Long(2115);
      tiffField0.getIntArrayValue();
      int int1 = tiffField0.getSortHint();
      assertEquals(1, int1);
      assertEquals(2115L, tiffField0.getCount());
      assertEquals(6, tiffField0.getDirectoryType());
      assertEquals(8460, tiffField0.getBytesLength());
      assertEquals(0, tiffField0.getOffset());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      FieldTypeDouble fieldTypeDouble0 = new FieldTypeDouble((byte)0, (String) null);
      TiffField tiffField0 = new TiffField((byte)0, 2111, fieldTypeDouble0, (byte)123, (-2732L), byteArray0, byteOrder0, (byte)0);
      tiffField0.getDoubleArrayValue();
      assertEquals((-2732), tiffField0.getOffset());
      assertEquals(984, tiffField0.getBytesLength());
      assertEquals(123L, tiffField0.getCount());
      assertEquals(2111, tiffField0.getDirectoryType());
      assertEquals(0, tiffField0.getTag());
      assertEquals(0, tiffField0.getSortHint());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      FieldTypeRational fieldTypeRational0 = FieldType.RATIONAL;
      byte[] byteArray0 = new byte[18];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte) (-92);
      byteArray0[3] = (byte)15;
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte) (-40);
      byteArray0[6] = (byte)1;
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      TiffField tiffField0 = new TiffField(61, 61, fieldTypeRational0, 61, 61, byteArray0, byteOrder0, (-909));
      double[] doubleArray0 = tiffField0.getDoubleArrayValue();
      assertEquals((-909), tiffField0.getSortHint());
      assertEquals(61, tiffField0.getDirectoryType());
      assertArrayEquals(new double[] {2167.091884347618, Double.NaN}, doubleArray0, 0.01);
      assertEquals(61, tiffField0.getTag());
      assertEquals(61L, tiffField0.getCount());
      assertEquals(61, tiffField0.getOffset());
      assertEquals(488, tiffField0.getBytesLength());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      byte[] byteArray0 = new byte[44];
      FieldTypeByte fieldTypeByte0 = FieldType.BYTE;
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      TiffField tiffField0 = new TiffField(2142283926, 2142283926, fieldTypeByte0, 2142283926, 896L, byteArray0, byteOrder0, 2142283926);
      FileSystemHandling.shouldAllThrowIOExceptions();
      ByteOrder byteOrder1 = ByteOrder.LITTLE_ENDIAN;
      try { 
        tiffField0.getIntArrayValue();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unknown value: [B@7ab7f5b1 for: -1 (0xffffffff: Unknown Tag): 
         //
         verifyException("org.apache.commons.imaging.formats.tiff.TiffField", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      byte[] byteArray0 = new byte[31];
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      FieldTypeLong fieldTypeLong0 = FieldType.SLONG;
      Integer integer0 = new Integer(2583);
      fieldTypeLong0.writeData(integer0, byteOrder0);
      TiffField tiffField0 = new TiffField(34006, 34006, fieldTypeLong0, 34L, 34006, byteArray0, byteOrder0, 34006);
      tiffField0.getDoubleArrayValue();
      assertEquals(34L, tiffField0.getCount());
      assertEquals(34006, tiffField0.getDirectoryType());
      assertEquals(136, tiffField0.getBytesLength());
      assertEquals(34006, tiffField0.getTag());
      assertEquals(34006, tiffField0.getOffset());
      assertEquals(34006, tiffField0.getSortHint());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      byte[] byteArray0 = new byte[34];
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      FieldTypeLong fieldTypeLong0 = FieldType.IFD;
      TiffField tiffField0 = new TiffField((-3327), 2573, fieldTypeLong0, 1L, 2142283931, byteArray0, byteOrder0, 2142283931);
      tiffField0.toString();
      assertEquals(2142283931, tiffField0.getOffset());
      assertEquals(2573, tiffField0.getDirectoryType());
      assertEquals(1L, tiffField0.getCount());
      assertEquals((-3327), tiffField0.getTag());
      assertEquals(4, tiffField0.getBytesLength());
      assertEquals(2142283931, tiffField0.getSortHint());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      FieldTypeShort fieldTypeShort0 = new FieldTypeShort(0, (String) null);
      byte[] byteArray0 = new byte[11];
      byteArray0[0] = (byte)33;
      byteArray0[2] = (byte)33;
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      TiffField tiffField0 = new TiffField(111, 0, fieldTypeShort0, (byte)1, 111, byteArray0, byteOrder0, (byte)0);
      int int0 = tiffField0.getOffset();
      assertEquals(111, int0);
      
      tiffField0.getIntArrayValue();
      assertEquals(1L, tiffField0.getCount());
      assertEquals(111, tiffField0.getTag());
      assertEquals(0, tiffField0.getSortHint());
      assertEquals(0, tiffField0.getDirectoryType());
      assertEquals(2, tiffField0.getBytesLength());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      FieldTypeRational fieldTypeRational0 = FieldType.RATIONAL;
      byte[] byteArray0 = new byte[255];
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      TiffField tiffField0 = new TiffField(11, 11, fieldTypeRational0, 11, 11, byteArray0, byteOrder0, 34026);
      String string0 = tiffField0.getTagName();
      assertEquals("ProcessingSoftware", string0);
      assertEquals(11, tiffField0.getDirectoryType());
      assertEquals(34026, tiffField0.getSortHint());
      assertEquals(11, tiffField0.getTag());
      assertEquals(11, tiffField0.getOffset());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      System.setCurrentTimeMillis((-419L));
      FieldTypeShort fieldTypeShort0 = FieldType.SSHORT;
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)74;
      byteArray0[1] = (byte) (-73);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)2;
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      TiffField tiffField0 = new TiffField(50, 50, fieldTypeShort0, 50, (-419L), byteArray0, byteOrder0, 15);
      int int0 = tiffField0.getIntValueOrArraySum();
      assertEquals(50, tiffField0.getDirectoryType());
      assertEquals((-18102), int0);
      assertEquals(50, tiffField0.getTag());
      assertEquals(50L, tiffField0.getCount());
      assertEquals(15, tiffField0.getSortHint());
      assertEquals(100, tiffField0.getBytesLength());
      assertEquals((-419), tiffField0.getOffset());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      FieldTypeDouble fieldTypeDouble0 = FieldType.DOUBLE;
      byte[] byteArray0 = new byte[20];
      byteArray0[0] = (byte)27;
      byteArray0[1] = (byte)12;
      byteArray0[2] = (byte)120;
      byteArray0[3] = (byte)111;
      byteArray0[4] = (byte)24;
      byteArray0[5] = (byte)111;
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      TiffField tiffField0 = new TiffField((-2214), (-2214), fieldTypeDouble0, 601L, (-1L), byteArray0, byteOrder0, (byte)111);
      tiffField0.dump();
      assertEquals((-1), tiffField0.getOffset());
      assertEquals((-2214), tiffField0.getTag());
      assertEquals(601L, tiffField0.getCount());
      assertEquals(111, tiffField0.getSortHint());
      assertEquals((-2214), tiffField0.getDirectoryType());
      assertEquals(4808, tiffField0.getBytesLength());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      byte[] byteArray0 = new byte[210];
      ByteOrder.nativeOrder();
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      FieldTypeFloat fieldTypeFloat0 = FieldType.FLOAT;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FieldTypeFloat fieldTypeFloat1 = FieldType.FLOAT;
      Object object0 = new Object();
      ByteOrder byteOrder1 = ByteOrder.LITTLE_ENDIAN;
      TiffField tiffField0 = new TiffField(4314, 34, fieldTypeFloat1, 74L, 11, byteArray0, byteOrder0, (-1944));
      tiffField0.getDoubleArrayValue();
      int int0 = tiffField0.getTag();
      assertEquals(296, tiffField0.getBytesLength());
      assertEquals((-1944), tiffField0.getSortHint());
      assertEquals(74L, tiffField0.getCount());
      assertEquals(4314, int0);
      assertEquals(11, tiffField0.getOffset());
      assertEquals(34, tiffField0.getDirectoryType());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[120];
      ByteOrder.nativeOrder();
      ByteOrder.nativeOrder();
      FileSystemHandling.shouldAllThrowIOExceptions();
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      System.setCurrentTimeMillis(4);
      FieldTypeShort fieldTypeShort0 = FieldType.SHORT;
      ByteOrder.nativeOrder();
      TiffField tiffField0 = new TiffField(1057, 4, fieldTypeShort0, 1057, 64L, byteArray0, byteOrder0, (-2999));
      tiffField0.getDoubleArrayValue();
      assertEquals(2114, tiffField0.getBytesLength());
      assertEquals(1057, tiffField0.getTag());
      assertEquals(64, tiffField0.getOffset());
      assertEquals((-2999), tiffField0.getSortHint());
      assertEquals(1057L, tiffField0.getCount());
      assertEquals(4, tiffField0.getDirectoryType());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FieldTypeRational fieldTypeRational0 = FieldType.RATIONAL;
      byte[] byteArray0 = new byte[106];
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      ByteOrder byteOrder1 = ByteOrder.BIG_ENDIAN;
      Object object0 = new Object();
      ByteOrder.nativeOrder();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ByteOrder byteOrder2 = ByteOrder.BIG_ENDIAN;
      TiffField tiffField0 = new TiffField(50, 1126, fieldTypeRational0, 0L, 50, byteArray0, byteOrder0, (-1810));
      assertEquals(0, tiffField0.getBytesLength());
      
      tiffField0.getIntArrayValue();
      assertEquals(50, tiffField0.getTag());
      assertEquals(1126, tiffField0.getDirectoryType());
      assertEquals(50, tiffField0.getOffset());
      assertEquals((-1810), tiffField0.getSortHint());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      byte[] byteArray0 = new byte[34];
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      FieldTypeLong fieldTypeLong0 = FieldType.IFD;
      TiffField tiffField0 = new TiffField(34006, 34006, fieldTypeLong0, 1L, 34006, byteArray0, byteOrder0, 34006);
      tiffField0.getDoubleArrayValue();
      tiffField0.getBytesLength();
      assertEquals(34006, tiffField0.getDirectoryType());
      assertEquals(34006, tiffField0.getSortHint());
      assertEquals(1L, tiffField0.getCount());
      assertEquals(34006, tiffField0.getTag());
      assertEquals(34006, tiffField0.getOffset());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      byte[] byteArray0 = new byte[122];
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      FieldTypeLong fieldTypeLong0 = FieldType.IFD;
      FieldTypeAscii fieldTypeAscii0 = FieldType.ASCII;
      ByteOrder.nativeOrder();
      ByteOrder.nativeOrder();
      TiffField tiffField0 = new TiffField(0, 0, fieldTypeLong0, 2081, 0, byteArray0, byteOrder0, 2455);
      tiffField0.dump();
      assertEquals(0, tiffField0.getOffset());
      assertEquals(2455, tiffField0.getSortHint());
      assertEquals(2081L, tiffField0.getCount());
      assertEquals(0, tiffField0.getTag());
      assertEquals(0, tiffField0.getDirectoryType());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      byte[] byteArray0 = new byte[5];
      FieldTypeByte fieldTypeByte0 = FieldType.SBYTE;
      TiffField tiffField0 = new TiffField(34850, (byte)82, fieldTypeByte0, 3205L, (-1310L), byteArray0, byteOrder0, (byte)82);
      try { 
        tiffField0.getDoubleArrayValue();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unknown value: [B@6f2b485 for: -1 (0xffffffff: Unknown Tag): 
         //
         verifyException("org.apache.commons.imaging.formats.tiff.TiffField", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      byte[] byteArray0 = new byte[16];
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      ByteOrder.nativeOrder();
      FieldTypeShort fieldTypeShort0 = FieldType.SSHORT;
      TiffField tiffField0 = new TiffField((byte)26, (byte)119, fieldTypeShort0, 1, (byte)47, byteArray0, byteOrder0, (byte)26);
      tiffField0.getOversizeValueElement();
      tiffField0.getIntValueOrArraySum();
      int int0 = Byte.SIZE;
      String string0 = "}Yb,{";
      try { 
        FieldType.getFieldType((byte)26);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Field type 26 is unsupported
         //
         verifyException("org.apache.commons.imaging.formats.tiff.fieldtypes.FieldType", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[55];
      FieldTypeByte fieldTypeByte0 = FieldType.BYTE;
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      ByteOrder.nativeOrder();
      int int0 = 2142283870;
      FileSystemHandling.shouldAllThrowIOExceptions();
      long long0 = 896L;
      TiffField tiffField0 = new TiffField(2142283870, 2142283870, fieldTypeByte0, 2142283870, 896L, byteArray0, byteOrder0, 2142283870);
      tiffField0.getValueDescription();
      try { 
        fieldTypeByte0.writeData("0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0... (55)", byteOrder0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Invalid data: 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0... (55) (java.lang.String)
         //
         verifyException("org.apache.commons.imaging.formats.tiff.fieldtypes.FieldTypeByte", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      byte[] byteArray0 = new byte[122];
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      ByteOrder.nativeOrder();
      FieldTypeLong fieldTypeLong0 = FieldType.IFD;
      FieldTypeAscii fieldTypeAscii0 = FieldType.ASCII;
      ByteOrder.nativeOrder();
      ByteOrder.nativeOrder();
      TiffField tiffField0 = new TiffField((-2128), (-2128), fieldTypeAscii0, 2081, (-658L), byteArray0, byteOrder0, 0);
      TiffField.OversizeValueElement tiffField_OversizeValueElement0 = tiffField0.new OversizeValueElement(0, 0);
      tiffField0.dump();
      assertEquals(0, tiffField0.getSortHint());
      assertEquals(2081L, tiffField0.getCount());
      assertEquals((-2128), tiffField0.getDirectoryType());
      assertEquals((-2128), tiffField0.getTag());
      assertEquals((-658), tiffField0.getOffset());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      byte[] byteArray0 = new byte[210];
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      Object object0 = new Object();
      FieldTypeFloat fieldTypeFloat0 = FieldType.FLOAT;
      MockFile mockFile0 = new MockFile("P*", "P*");
      int int0 = Double.MAX_EXPONENT;
      mockFile0.getAbsolutePath();
      TiffField tiffField0 = new TiffField(11, 11, fieldTypeFloat0, 1023, 11, byteArray0, byteOrder0, (-789));
      tiffField0.getFieldType();
      tiffField0.toString();
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter(mockFile0, "11 (0xb: ProcessingSoftware): 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0... (52) (1023 Float)");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // 11 (0xb: ProcessingSoftware): 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0... (52) (1023 Float)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)61;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "d\"`&b'|R6G1Lj2|0");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      byte[] byteArray1 = new byte[298];
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      ByteOrder byteOrder1 = ByteOrder.LITTLE_ENDIAN;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      MockFile mockFile0 = new MockFile("PreviewSettingsDigest");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      FieldTypeLong fieldTypeLong0 = FieldType.SLONG;
      TiffField tiffField0 = new TiffField(4, (byte)61, fieldTypeLong0, 25792L, 4, byteArray1, byteOrder0, 3750);
      MockFileWriter mockFileWriter0 = new MockFileWriter(mockFile0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileWriter0, true);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) fileSystemHandling1;
      objectArray0[1] = (Object) mockPrintWriter0;
      objectArray0[2] = (Object) mockPrintWriter0;
      objectArray0[3] = (Object) mockFile0;
      objectArray0[4] = (Object) null;
      PrintWriter printWriter0 = mockPrintWriter0.printf("d\"`&b'|R6G1Lj2|0", objectArray0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0);
      tiffField0.dump((PrintWriter) mockPrintWriter1, "d\"`&b'|R6G1Lj2|0");
      assertEquals(230L, mockFile0.length());
      
      tiffField0.getIntValueOrArraySum();
      assertEquals(4, tiffField0.getTag());
  }
}
