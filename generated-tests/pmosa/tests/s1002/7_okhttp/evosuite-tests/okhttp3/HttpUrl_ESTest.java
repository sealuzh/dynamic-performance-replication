/*
 * This file was automatically generated by EvoSuite
 * Mon Jul 16 20:15:46 GMT 2018
 */

package okhttp3;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.net.MalformedURLException;
import java.net.URI;
import java.net.URISyntaxException;
import java.net.URL;
import java.net.UnknownHostException;
import java.util.Collection;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import okhttp3.HttpUrl;
import okio.Buffer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class HttpUrl_ESTest extends HttpUrl_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      httpUrl_Builder0.encodedUsername = "_c\"MBtj'CA5L S";
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addQueryParameter("TD.>", "TD.>");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.encodedQuery("TD.>");
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.encodedFragment("b%.?d&Q");
      HttpUrl.Builder httpUrl_Builder4 = httpUrl_Builder3.removeAllEncodedQueryParameters("TD.>");
      // Undeclared exception!
      try { 
        httpUrl_Builder4.build();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // scheme == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      httpUrl_Builder0.username(".");
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.removeAllQueryParameters(".");
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.encodedQuery(".");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.removeAllEncodedQueryParameters(".");
      // Undeclared exception!
      try { 
        httpUrl_Builder2.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.addQueryParameter((String) null, "encodedPathSegments == null");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // name == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      String string0 = "%";
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.encodedFragment("%");
      // Undeclared exception!
      try { 
        httpUrl_Builder1.build();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // scheme == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addEncodedPathSegment("\n");
      String string0 = null;
      // Undeclared exception!
      try { 
        httpUrl_Builder1.setEncodedPathSegment((-1062), (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // encodedPathSegment == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      httpUrl_Builder0.setQueryParameter("", "");
      // Undeclared exception!
      try { 
        httpUrl_Builder0.encodedPath("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected encodedPath: 
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      httpUrl_Builder0.encodedQuery((String) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      // Undeclared exception!
      try { 
        httpUrl_Builder0.setPathSegment((-1079924597), "{");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      try { 
        HttpUrl.getChecked("37u}Ws.*j?h.h");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // Invalid URL: MISSING_SCHEME for 37u}Ws.*j?h.h
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      String string0 = "";
      try { 
        HttpUrl.getChecked("");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // Invalid URL: MISSING_SCHEME for 
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.parse("Y~\u0004c0/1P7Nm>y@Qo!^");
      assertNull(httpUrl0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      int int0 = 178;
      // Undeclared exception!
      try { 
        httpUrl_Builder0.setQueryParameter((String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // name == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      httpUrl_Builder0.removeAllQueryParameters("/");
      // Undeclared exception!
      try { 
        httpUrl_Builder0.build();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // scheme == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      String string0 = ".%2e";
      httpUrl_Builder0.addEncodedPathSegment(".%2e");
      String string1 = "endIndex < beginIndex: ";
      String string2 = "i@~+T)l1";
      httpUrl_Builder0.encodedFragment("i@~+T)l1");
      // Undeclared exception!
      try { 
        httpUrl_Builder0.encodedPath("endIndex < beginIndex: ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected encodedPath: endIndex < beginIndex: 
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.setEncodedPathSegment(483, "+");
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 483, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      String string0 = "";
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.setQueryParameter("", "#DR<+Nl1j}6k.;y+k");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.encodedFragment("");
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.password("L9%t64^ae!");
      HttpUrl.Builder httpUrl_Builder4 = httpUrl_Builder3.addEncodedPathSegments("");
      int int0 = 1839;
      httpUrl_Builder4.encodedQuery("<`h_hOi{s2Wb");
      // Undeclared exception!
      try { 
        httpUrl_Builder4.setEncodedPathSegment(1839, "");
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1839, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      httpUrl_Builder0.addEncodedPathSegments("d");
      String string0 = ":";
      // Undeclared exception!
      try { 
        httpUrl_Builder0.host(":");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: :
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      HttpUrl.canonicalize("]?Hm+(b", "%2B", false, false, true, false);
      try { 
        HttpUrl.getChecked("%2B");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // Invalid URL: MISSING_SCHEME for %2B
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      httpUrl_Builder0.addPathSegments("%3f");
      // Undeclared exception!
      try { 
        httpUrl_Builder0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.addEncodedPathSegments((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // encodedPathSegments == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      String string0 = "9n.";
      // Undeclared exception!
      try { 
        httpUrl_Builder0.addPathSegment((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // pathSegment == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      httpUrl_Builder0.encodedPassword(".");
      httpUrl_Builder0.removeAllEncodedQueryParameters("q_AI[[9Tpc7+g:6`}e#");
      // Undeclared exception!
      try { 
        httpUrl_Builder0.addPathSegments((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // pathSegments == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.port(4363);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.port(1946);
      int int0 = 55296;
      // Undeclared exception!
      try { 
        httpUrl_Builder1.removePathSegment(55296);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 55296, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      int int0 = 12;
      String string0 = "maxBufferSize < 1: ";
      // Undeclared exception!
      try { 
        httpUrl_Builder0.scheme("maxBufferSize < 1: ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected scheme: maxBufferSize < 1: 
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.username("");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.encodedFragment("");
      // Undeclared exception!
      try { 
        httpUrl_Builder2.scheme((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // scheme == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      httpUrl_Builder0.query((String) null);
      String string0 = null;
      // Undeclared exception!
      try { 
        httpUrl_Builder0.host((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // host == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      String string0 = "";
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.encodedFragment("");
      String string1 = "t*<$2neT0\"U/|/qj} V";
      httpUrl_Builder1.query("t*<$2neT0\"U/|/qj} V");
      httpUrl_Builder1.addPathSegments("");
      int int0 = 873;
      httpUrl_Builder1.port(873);
      String string2 = "unexpected encodedPath: ";
      // Undeclared exception!
      try { 
        httpUrl_Builder1.setQueryParameter((String) null, "unexpected encodedPath: ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // name == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.fragment("{");
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      String string0 = null;
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.encodedQuery((String) null);
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.fragment((String) null);
      String string1 = null;
      // Undeclared exception!
      try { 
        httpUrl_Builder2.encodedUsername((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // encodedUsername == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.encodedUsername((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // encodedUsername == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      String string0 = "qY;\")c *\" %R4/z";
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.setPathSegment(0, "qY;\")c *\" %R4/z");
      String string1 = null;
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.encodedFragment((String) null);
      // Undeclared exception!
      try { 
        httpUrl_Builder2.encodedUsername((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // encodedUsername == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.encodedPassword("http");
      httpUrl_Builder0.encodedQuery("http");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.host("http");
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.username(")$-UEEQ@C");
      String string0 = "y/$<HX&z[f_!l+\"Rr";
      httpUrl_Builder0.encodedUsername = ")$-UEEQ@C";
      // Undeclared exception!
      try { 
        httpUrl_Builder3.removePathSegment(122);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 122, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      String string0 = "encodedName == null";
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.setQueryParameter("encodedName == null", "#");
      httpUrl_Builder1.addEncodedQueryParameter("encodedName == null", " < ");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.addEncodedPathSegments("base64 == null");
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.password("hWpGKqT/1");
      int int0 = 32;
      httpUrl_Builder3.addPathSegment("Iko(_WZV|qVjVT@+,");
      // Undeclared exception!
      try { 
        httpUrl_Builder2.setEncodedPathSegment(32, "M%q;kkC~*]`}6|;'9[?");
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 32, Size: 2
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      httpUrl_Builder0.setEncodedQueryParameter("(H%8@.erJM", (String) null);
      String string0 = ":";
      // Undeclared exception!
      try { 
        httpUrl_Builder0.host(":");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: :
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      String string0 = "";
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addPathSegments("");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.removeAllEncodedQueryParameters("");
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.reencodeForUri();
      // Undeclared exception!
      try { 
        httpUrl_Builder3.scheme("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected scheme: 
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      String string0 = "\n";
      httpUrl_Builder0.reencodeForUri();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.build();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // scheme == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.query("..");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.removePathSegment(0);
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.fragment("..");
      // Undeclared exception!
      try { 
        httpUrl_Builder3.port(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected port: 0
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      httpUrl_Builder0.removePathSegment(0);
      // Undeclared exception!
      try { 
        httpUrl_Builder0.build();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // scheme == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.host("{4>F:^t~snh:");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: {4>F:^t~snh:
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      String string0 = "::";
      // Undeclared exception!
      try { 
        httpUrl_Builder0.host("::");
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      HttpUrl.Builder.ParseResult.values();
      HttpUrl.queryStringToNamesAndValues(";{iMu5");
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.fragment(";{iMu5");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.addEncodedPathSegments("Invalid host: ");
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.addEncodedQueryParameter(";{iMu5", "tY");
      httpUrl_Builder2.setEncodedPathSegment(0, ";{iMu5");
      HttpUrl.Builder httpUrl_Builder4 = httpUrl_Builder3.encodedQuery("%40");
      HttpUrl.Builder httpUrl_Builder5 = httpUrl_Builder4.addQueryParameter("KG", "");
      httpUrl_Builder5.addPathSegments("%40");
      HttpUrl.Builder httpUrl_Builder6 = httpUrl_Builder5.addEncodedPathSegments("jz/x:");
      assertSame(httpUrl_Builder5, httpUrl_Builder6);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      httpUrl_Builder0.setEncodedPathSegment(0, "\r");
      // Undeclared exception!
      try { 
        HttpUrl.get((URL) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      String string0 = "source exhausted prematurely";
      HttpUrl.defaultPort("source exhausted prematurely");
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.setPathSegment((-1), "VB@");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      int int0 = HttpUrl.defaultPort("d");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.getChecked("http:f");
      httpUrl0.queryParameterNames();
      assertEquals("http://f/", httpUrl0.toString());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals(80, httpUrl0.port());
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      httpUrl_Builder0.encodedPath("/");
      // Undeclared exception!
      try { 
        httpUrl_Builder0.host("D::");
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.host("efbbbf");
      // Undeclared exception!
      try { 
        httpUrl_Builder1.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.removeAllEncodedQueryParameters("\r");
      httpUrl_Builder1.port(3315);
      HttpUrl httpUrl0 = null;
      try {
        httpUrl0 = new HttpUrl(httpUrl_Builder1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.parse("b::P^WtA[:Xm3uGb?");
      assertNull(httpUrl0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      httpUrl_Builder0.encodedUsername("D::");
      // Undeclared exception!
      try { 
        httpUrl_Builder0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      HttpUrl.Builder.ParseResult.values();
      HttpUrl.queryStringToNamesAndValues(";{iMu5");
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.fragment(";{iMu5");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.addEncodedPathSegments("Invalid host: ");
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.addEncodedQueryParameter(";{iMu5", "tY");
      httpUrl_Builder2.setEncodedPathSegment(0, ";{iMu5");
      httpUrl_Builder2.addQueryParameter(";{iMu5", "P");
      httpUrl_Builder3.removeAllQueryParameters("t96}]0'G~KjNx&OR");
      HttpUrl.Builder httpUrl_Builder4 = httpUrl_Builder0.addQueryParameter(".-w3Fd*BZA=h", "");
      assertSame(httpUrl_Builder4, httpUrl_Builder0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      String string0 = "..";
      try { 
        HttpUrl.getChecked("..");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // Invalid URL: MISSING_SCHEME for ..
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      String string0 = "q]LB:-h8gU3+O,\\B^";
      String string1 = "D0Wb[B";
      try { 
        HttpUrl.getChecked("D0Wb[B");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // Invalid URL: MISSING_SCHEME for D0Wb[B
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      HttpUrl.canonicalize("", 0, 0, "", false, true, true, true);
      HttpUrl.parse("[Nssg=o g\",=l(b3h");
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.encodedUsername("P0),Q");
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      httpUrl_Builder0.encodedUsername = "_c\"MBtj'CA5L S";
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addQueryParameter("TD.>", "TD.>");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.encodedQuery("TD.>");
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.encodedFragment("b%.?d&Q");
      httpUrl_Builder3.removeAllEncodedQueryParameters("TD.>");
      HttpUrl httpUrl0 = HttpUrl.parse("b%.?d&Q");
      assertNull(httpUrl0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      httpUrl_Builder0.addPathSegments("");
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.setEncodedQueryParameter("", "");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder0.addPathSegment("");
      httpUrl_Builder2.query("");
      String string0 = "";
      httpUrl_Builder2.encodedUsername("");
      String string1 = "QcgcY=4%Z&";
      httpUrl_Builder1.password("QcgcY=4%Z&");
      String string2 = "";
      // Undeclared exception!
      try { 
        httpUrl_Builder0.removePathSegment(2160);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2160, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      Buffer buffer0 = new Buffer();
      int int0 = 612;
      HttpUrl.percentDecode(buffer0, "cFU5M2]}1|$", 612, 612, false);
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.query("cFU5M2]}1|$");
      httpUrl_Builder1.fragment("cFU5M2]}1|$");
      httpUrl_Builder1.query("qY;%22)c%20*%22%20%25R4%2Fz");
      try { 
        HttpUrl.getChecked("m0,P+*bsuk;:");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // Invalid URL: MISSING_SCHEME for m0,P+*bsuk;:
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      httpUrl_Builder0.encodedQuery("GM\blI");
      FileSystemHandling.shouldAllThrowIOExceptions();
      HttpUrl.decodeHexDigit('}');
      URL uRL0 = MockURL.getHttpExample();
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      httpUrl0.encodedPath();
      String string0 = "";
      // Undeclared exception!
      try { 
        httpUrl_Builder0.setPathSegment(57343, "");
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 57343, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      boolean boolean0 = HttpUrl.percentEncoded(") disagree", 8, 122);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.parse(":");
      String string0 = HttpUrl.canonicalize("%2F", "[text=", true, true, true, true);
      assertEquals("%2F", string0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      httpUrl_Builder0.encodedUsername(", F|,g%A#");
      String string0 = ":";
      // Undeclared exception!
      try { 
        httpUrl_Builder0.host(":");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: :
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.decodeHexDigit('d');
      String string0 = "%).}9&Pa#Ugz)W ";
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.fragment("%).}9&Pa#Ugz)W ");
      httpUrl_Builder1.reencodeForUri();
      httpUrl_Builder0.setEncodedQueryParameter("a=tt%7c%3ey%22%7b%5c8eaeee%7f", "%).}9&Pa#Ugz)W ");
      try { 
        MockURL.URL("fooExample", "https:/www.somefakebutwellformedurl.org/fooexample", "l\"]NHaf:c0AYIk*g{");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // unknown protocol: fooexample
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      httpUrl_Builder0.addQueryParameter("/%I(@W\"W |{", "/%I(@W\"W |{");
      HttpUrl.percentEncoded(">mR-g", 114, 114);
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addPathSegments(">mR-g");
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      HttpUrl.Builder.ParseResult.values();
      HttpUrl.queryStringToNamesAndValues(";{iMu5");
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.fragment(";{iMu5");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.addEncodedPathSegments("Invalid host: ");
      httpUrl_Builder2.setEncodedPathSegment(0, ";{iMu5");
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.encodedQuery("%40");
      HttpUrl.Builder httpUrl_Builder4 = httpUrl_Builder3.addQueryParameter("KG", "A");
      HttpUrl.Builder httpUrl_Builder5 = httpUrl_Builder4.reencodeForUri();
      assertSame(httpUrl_Builder1, httpUrl_Builder5);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      httpUrl_Builder0.host("%7cj");
      try { 
        MockURL.URL("%7cj");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // no protocol: %7cj
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      String string0 = ".%2e";
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.reencodeForUri();
      // Undeclared exception!
      try { 
        httpUrl_Builder1.host(".%2e");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: .%2e
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      String string0 = "%";
      // Undeclared exception!
      try { 
        httpUrl_Builder0.host("%");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: %
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      httpUrl_Builder0.encodedUsername = "^j'#>EJO";
      httpUrl_Builder0.addEncodedPathSegment("^j'#>EJO");
      // Undeclared exception!
      try { 
        httpUrl_Builder0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      HttpUrl.queryStringToNamesAndValues("34p3I1WCx@dldN]");
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      String string0 = "P5H8&";
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.query("P5H8&");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.encodedFragment((String) null);
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.password("34p3I1WCx@dldN]");
      HttpUrl.Builder httpUrl_Builder4 = httpUrl_Builder3.addEncodedQueryParameter("34p3I1WCx@dldN]", "yd'");
      // Undeclared exception!
      try { 
        httpUrl_Builder4.encodedPassword((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // encodedPassword == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.query((String) null);
      String string0 = "nRJWJb2^R]GI<'qj]6~";
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.password("nRJWJb2^R]GI<'qj]6~");
      // Undeclared exception!
      try { 
        httpUrl_Builder2.host("nRJWJb2^R]GI<'qj]6~");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: nRJWJb2^R]GI<'qj]6~
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      String string0 = "\r";
      httpUrl_Builder0.addQueryParameter("\r", "6w@I{3?;SEV9zB3");
      // Undeclared exception!
      try { 
        HttpUrl.percentEncoded("%253f", 3776, 57343);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.queryStringToNamesAndValues("[hex=");
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.query("s<;9LG{-Mz@]");
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      String string0 = "%cj";
      // Undeclared exception!
      try { 
        httpUrl_Builder0.host("%cj");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: %cj
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      HttpUrl.Builder.ParseResult.values();
      String string0 = ";{iMu5";
      HttpUrl.queryStringToNamesAndValues(";{iMu5");
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addEncodedQueryParameter("fooExample", (String) null);
      // Undeclared exception!
      try { 
        httpUrl_Builder1.setPathSegment(70, ":");
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 70, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      httpUrl_Builder0.removePathSegment(0);
      // Undeclared exception!
      try { 
        httpUrl_Builder0.host("_}A8gM~9V u+v0v'");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: _}A8gM~9V u+v0v'
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      httpUrl_Builder0.host("f+&9");
      String string0 = "fcV0";
      // Undeclared exception!
      try { 
        httpUrl_Builder0.addEncodedQueryParameter((String) null, "fcV0");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // encodedName == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      String string0 = "::";
      // Undeclared exception!
      try { 
        httpUrl_Builder0.host("::");
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      String string0 = "Par}";
      httpUrl_Builder0.encodedUsername = "Par}";
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addQueryParameter("Par}", (String) null);
      httpUrl_Builder1.encodedQuery("eiR4b");
      // Undeclared exception!
      try { 
        httpUrl_Builder0.setEncodedQueryParameter((String) null, "eiR4b");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // encodedName == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.host("D:");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: D:
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      String string0 = "4?:^t~snh:";
      // Undeclared exception!
      try { 
        httpUrl_Builder0.host("4?:^t~snh:");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: 4?:^t~snh:
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.host("Dh:");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: Dh:
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.port(48);
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.removeAllEncodedQueryParameters("_c\"MBtj'CA5L S");
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.setQueryParameter("+2Ugn,wkI5oF>Z", ".fVJP7:1lkTkUp");
      HttpUrl.Builder httpUrl_Builder4 = httpUrl_Builder3.addPathSegments("+2Ugn,wkI5oF>Z");
      HttpUrl.Builder httpUrl_Builder5 = httpUrl_Builder4.username(" \"'<>#");
      httpUrl_Builder5.addQueryParameter(".fVJP7:1lkTkUp", "TD.>");
      httpUrl_Builder0.encodedQuery("z,SI*6");
      HttpUrl.Builder httpUrl_Builder6 = httpUrl_Builder3.reencodeForUri();
      httpUrl_Builder6.setEncodedQueryParameter(" \"'<>#", "T Xk'<i?Z|M*I.Y}m");
      httpUrl_Builder3.removeAllEncodedQueryParameters(".fVJP7:1lkTkUp");
      HttpUrl httpUrl0 = HttpUrl.parse("jfMT-3TPeNEX&");
      assertNull(httpUrl0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addEncodedPathSegments(".");
      httpUrl_Builder0.removeAllQueryParameters("wK{wg4vBK1u](y9l]ma");
      // Undeclared exception!
      try { 
        httpUrl_Builder1.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      try { 
        HttpUrl.getChecked("o+7O1&");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // Invalid URL: MISSING_SCHEME for o+7O1&
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      httpUrl_Builder0.reencodeForUri();
      String string0 = "D.:";
      // Undeclared exception!
      try { 
        httpUrl_Builder0.host("D.:");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: D.:
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      int int0 = (-1079924597);
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.host("b.DP^WtA[:Xm3uGb?");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: b.DP^WtA[:Xm3uGb?
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.port(41);
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.encodedPassword("");
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.encodedFragment("%=x<:Bm{A\"q;=#: <e<");
      HttpUrl.Builder httpUrl_Builder4 = httpUrl_Builder3.setQueryParameter("size > Integer.MAX_VALUE: ", "");
      HttpUrl httpUrl0 = null;
      try {
        httpUrl0 = new HttpUrl(httpUrl_Builder4);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      String string0 = "4::^t~snh:";
      // Undeclared exception!
      try { 
        httpUrl_Builder0.host("4::^t~snh:");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: 4::^t~snh:
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.getChecked("http:a&xm3ubh");
      httpUrl0.encodedUsername();
      httpUrl0.queryParameterValues("http:a&xm3ubh");
      assertEquals("http://a&xm3ubh/", httpUrl0.toString());
      assertEquals(80, httpUrl0.port());
      assertEquals(1, httpUrl0.pathSize());
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.username("pathSegment%20==%20null");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.encodedPassword("5IW2kWE3TRGrR}?#.@U");
      URL uRL0 = MockURL.getHttpExample();
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      httpUrl0.newBuilder();
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.setEncodedQueryParameter("5IW2kWE3TRGrR}?#.@U", "NY_'#My|#");
      HttpUrl httpUrl1 = null;
      try {
        httpUrl1 = new HttpUrl(httpUrl_Builder3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.parse("https:bh");
      assertNotNull(httpUrl0);
      
      List<String> list0 = httpUrl0.encodedPathSegments();
      assertEquals(1, list0.size());
      assertEquals("https://bh/", httpUrl0.toString());
      assertEquals(443, httpUrl0.port());
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.parse("http:amRKubh");
      assertNotNull(httpUrl0);
      
      httpUrl0.newBuilder();
      assertEquals(1, httpUrl0.pathSize());
      assertEquals(80, httpUrl0.port());
      assertEquals("http://amrkubh/", httpUrl0.toString());
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.getChecked("http:fq~grmdt/j5");
      httpUrl0.encodedPassword();
      assertEquals("http://fq~grmdt/j5", httpUrl0.toString());
      assertEquals(80, httpUrl0.port());
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.getChecked("https:&xm3ubh");
      httpUrl0.encodedFragment();
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("https://&xm3ubh/", httpUrl0.toString());
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.parse("http:fq~trmf");
      assertNotNull(httpUrl0);
      
      httpUrl0.encodedQuery();
      httpUrl0.query();
      assertEquals("http://fq~trmf/", httpUrl0.toString());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals(80, httpUrl0.port());
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.port(41);
      httpUrl_Builder1.encodedPassword("{");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder0.setQueryParameter("size > Integer.MAX_VALUE: ", "{");
      httpUrl_Builder2.addEncodedPathSegment("4+");
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder0.addEncodedPathSegments("p3grwj^9]oy4j6^");
      HttpUrl.Builder httpUrl_Builder4 = httpUrl_Builder3.encodedQuery("=:J5oe&f?");
      HttpUrl httpUrl0 = null;
      try {
        httpUrl0 = new HttpUrl(httpUrl_Builder4);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      URL uRL0 = MockURL.getHttpExample();
      URL uRL1 = MockURL.URL(uRL0, "P");
      HttpUrl.get(uRL1);
      HttpUrl httpUrl0 = HttpUrl.get(uRL1);
      assertNotNull(httpUrl0);
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl0.newBuilder();
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.reencodeForUri();
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.setEncodedQueryParameter("P", "NY_'#My|#");
      HttpUrl httpUrl1 = new HttpUrl(httpUrl_Builder2);
      httpUrl_Builder3.encodedUsername("P");
      httpUrl1.encodedUsername();
      assertEquals(1, httpUrl1.querySize());
      assertEquals("http://www.somefakebutwellformedurl.org/P", httpUrl0.toString());
      assertEquals("http://www.somefakebutwellformedurl.org/P?P=NY_%27%23My|%23", httpUrl1.toString());
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.encodedQuery("..");
      httpUrl_Builder1.removeAllQueryParameters("..");
      // Undeclared exception!
      try { 
        httpUrl_Builder0.setPathSegment(1338, "..");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected path segment: ..
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl httpUrl0 = HttpUrl.parse("https:{h");
      assertNotNull(httpUrl0);
      
      httpUrl0.query();
      assertEquals(443, httpUrl0.port());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("https://{h/", httpUrl0.toString());
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      URL uRL0 = MockURL.getHttpExample();
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      assertNotNull(httpUrl0);
      
      HttpUrl httpUrl1 = httpUrl0.resolve("%w@a-QR&F");
      assertNotNull(httpUrl1);
      
      HttpUrl httpUrl2 = httpUrl1.resolve("%60%22oI%239");
      assertEquals("http://www.somefakebutwellformedurl.org/%60%22oI%239", httpUrl2.toString());
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      String string0 = "http:fq~trmf";
      HttpUrl httpUrl0 = HttpUrl.parse("http:fq~trmf");
      httpUrl0.newBuilder("http:fq~trmf");
      // Undeclared exception!
      try { 
        httpUrl0.queryParameterValue(9);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      assertNotNull(httpUrl0);
      
      HttpUrl httpUrl1 = httpUrl0.resolve("d::");
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertNull(httpUrl1);
      assertEquals(80, httpUrl0.port());
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      httpUrl_Builder0.addPathSegment(" \"':;<=>@[]^`{}|/?#&!$(),~");
      httpUrl_Builder0.addEncodedPathSegments("..");
      try { 
        HttpUrl.getChecked("9N&v0N}NF52N~A%");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // Invalid URL: MISSING_SCHEME for 9N&v0N}NF52N~A%
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      FileSystemHandling.shouldAllThrowIOExceptions();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.reencodeForUri();
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.setEncodedQueryParameter("b.DP^WtA[:Xm3ubh", ":");
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.addEncodedPathSegment(":");
      HttpUrl.Builder httpUrl_Builder4 = httpUrl_Builder3.reencodeForUri();
      HttpUrl httpUrl0 = null;
      try {
        httpUrl0 = new HttpUrl(httpUrl_Builder4);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      String string0 = HttpUrl.canonicalize("<x`1FORU3oE%%%d4", "Rr3^msJw?KV5B)-", true, true, true, false);
      assertEquals("<x`1FO%52U%33oE%25%25%d4", string0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      URL uRL0 = MockURL.getHttpExample();
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      HttpUrl httpUrl1 = httpUrl0.resolve("%w@a-QR&F");
      httpUrl1.pathSegments();
      httpUrl0.encodedPathSegments();
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.removeAllQueryParameters("5v\"");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.addEncodedQueryParameter("5v\"", "username == null");
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.addPathSegment("SX1FYJV[+v3y");
      HttpUrl.Builder httpUrl_Builder4 = httpUrl_Builder3.setEncodedQueryParameter("5v\"", "5v\"");
      HttpUrl.Builder httpUrl_Builder5 = httpUrl_Builder4.addEncodedPathSegment("username == null");
      HttpUrl.Builder httpUrl_Builder6 = httpUrl_Builder5.password("SX1FYJV[+v3y");
      assertSame(httpUrl_Builder6, httpUrl_Builder1);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.parse("http:f");
      assertNotNull(httpUrl0);
      
      httpUrl0.queryParameterValues("ZiL");
      assertEquals("http://f/", httpUrl0.toString());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals(80, httpUrl0.port());
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.encodedFragment("s3e'-E");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder0.query("[");
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.addEncodedPathSegments("%2e");
      httpUrl_Builder3.username("[");
      HttpUrl.parse("http:");
      HttpUrl.Builder httpUrl_Builder4 = httpUrl_Builder0.removeAllQueryParameters("UNSUPPORTED_SCHEME");
      assertSame(httpUrl_Builder4, httpUrl_Builder1);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.getChecked("http:a");
      // Undeclared exception!
      try { 
        httpUrl0.queryParameterValue(1114111);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      URL uRL0 = MockURL.getHttpExample();
      URL uRL1 = MockURL.URL(uRL0, "P");
      HttpUrl httpUrl0 = HttpUrl.get(uRL1);
      httpUrl0.resolve("%w@a-QR&F");
      try { 
        HttpUrl.getChecked("http:/");
        fail("Expecting exception: UnknownHostException");
      
      } catch(UnknownHostException e) {
         //
         // Invalid host: http:/
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      String string0 = "}B8>>=]b@'%6";
      // Undeclared exception!
      try { 
        httpUrl_Builder0.host("}B8>>=]b@'%6");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: }B8>>=]b@'%6
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "http:f");
      HttpUrl httpUrl0 = HttpUrl.getChecked("http:f");
      // Undeclared exception!
      try { 
        httpUrl0.queryParameterName(50);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      httpUrl_Builder0.addEncodedPathSegment("\n");
      httpUrl_Builder0.username("\n");
      httpUrl_Builder0.password("");
      // Undeclared exception!
      try { 
        httpUrl_Builder0.build();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // scheme == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      HttpUrl.get(uRL0);
      HttpUrl httpUrl1 = httpUrl0.resolve("aglV/&e2");
      URI uRI0 = httpUrl1.uri();
      assertEquals("http://www.somefakebutwellformedurl.org/aglV/&e2", uRI0.toString());
      assertEquals(80, httpUrl0.port());
      assertEquals(1, httpUrl0.pathSize());
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      URL uRL1 = MockURL.URL(uRL0, "P");
      HttpUrl httpUrl0 = HttpUrl.get(uRL1);
      assertNotNull(httpUrl0);
      
      HttpUrl httpUrl1 = httpUrl0.resolve("P");
      assertNotNull(httpUrl1);
      
      URI uRI0 = httpUrl1.uri();
      assertEquals("http://www.somefakebutwellformedurl.org/P", uRI0.toString());
      
      int int0 = httpUrl1.port();
      assertEquals("http://www.somefakebutwellformedurl.org/P", httpUrl1.toString());
      assertEquals(80, int0);
      
      String string0 = httpUrl0.username();
      assertEquals("", string0);
      assertEquals(1, httpUrl0.pathSize());
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      URL uRL1 = MockURL.URL(uRL0, "P");
      HttpUrl httpUrl0 = HttpUrl.get(uRL1);
      httpUrl0.resolve("P");
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addEncodedPathSegment("P");
      httpUrl_Builder1.setEncodedQueryParameter("<vF<]6_$UQ6", (String) null);
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder0.query("size < 4: ");
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.encodedPath("/ 1,4g~\"vyM-ai uwJ");
      HttpUrl httpUrl1 = null;
      try {
        httpUrl1 = new HttpUrl(httpUrl_Builder3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.host("%+");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: %+
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      assertNotNull(httpUrl0);
      
      HttpUrl.Builder httpUrl_Builder0 = httpUrl0.newBuilder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.reencodeForUri();
      httpUrl_Builder1.setEncodedQueryParameter("P", "P");
      HttpUrl httpUrl1 = new HttpUrl(httpUrl_Builder1);
      HttpUrl httpUrl2 = new HttpUrl(httpUrl_Builder0);
      boolean boolean0 = httpUrl2.isHttps();
      assertEquals(1, httpUrl2.querySize());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample?P=P", httpUrl2.toString());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      assertNotNull(httpUrl0);
      
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      String string0 = httpUrl0.redact();
      assertEquals("http://www.somefakebutwellformedurl.org/...", string0);
      
      HttpUrl.parse("oky,):4xyx42@q");
      httpUrl0.port();
      String string1 = httpUrl0.username();
      assertEquals("", string1);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      assertNotNull(httpUrl0);
      
      HttpUrl.Builder httpUrl_Builder0 = httpUrl0.newBuilder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.reencodeForUri();
      httpUrl_Builder1.setEncodedQueryParameter("P", "P");
      HttpUrl httpUrl1 = new HttpUrl(httpUrl_Builder1);
      HttpUrl httpUrl2 = new HttpUrl(httpUrl_Builder0);
      httpUrl2.scheme();
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample?P=P", httpUrl2.toString());
      assertEquals(1, httpUrl2.querySize());
      assertEquals(80, httpUrl2.port());
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.encodedFragment("%7CJ");
      httpUrl_Builder1.addEncodedPathSegments("%7CJ");
      // Undeclared exception!
      try { 
        httpUrl_Builder1.setPathSegment((-4161), ".");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected path segment: .
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      httpUrl_Builder0.setEncodedQueryParameter("i[xZBGVF%", "i[xZBGVF%");
      httpUrl_Builder0.reencodeForUri();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.build();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // scheme == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpUrl.get(uRL0);
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      HttpUrl httpUrl1 = httpUrl0.resolve("");
      httpUrl1.uri();
      HttpUrl.parse("MISSING_SCHEME");
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      URL uRL0 = MockURL.getHttpExample();
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      HttpUrl.Builder httpUrl_Builder0 = httpUrl0.newBuilder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.reencodeForUri();
      httpUrl_Builder1.setEncodedQueryParameter("P", "P");
      httpUrl0.resolve("\r");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.addQueryParameter("\r", "P");
      httpUrl_Builder2.removeAllQueryParameters("\r");
      HttpUrl.get(uRL0);
      httpUrl0.encodedPath();
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      String string0 = null;
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.removeAllQueryParameters("^5v#Ay");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.addEncodedPathSegment("%2e.");
      // Undeclared exception!
      try { 
        httpUrl_Builder2.removePathSegment(119);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 119, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      HttpUrl.parse("http:~#h");
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      httpUrl0.url();
      httpUrl0.query();
      // Undeclared exception!
      try { 
        HttpUrl.percentDecode((String) null, (-1104370271), 1582, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addQueryParameter("ISIZE", "ISIZE");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.fragment("U");
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.query("U");
      HttpUrl.Builder httpUrl_Builder4 = httpUrl_Builder3.encodedUsername("ISIZE");
      HttpUrl.Builder httpUrl_Builder5 = httpUrl_Builder4.port(90);
      httpUrl_Builder5.addEncodedQueryParameter("fooExample", "U");
      httpUrl_Builder3.host("ISIZE");
      httpUrl_Builder4.username("%2e");
      HttpUrl.parse(":");
      httpUrl0.password();
      // Undeclared exception!
      try { 
        httpUrl_Builder3.port((-1908874351));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected port: -1908874351
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      String string0 = "\u2026]";
      String string1 = "d;";
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.setEncodedQueryParameter("\u2026]", "d;");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.reencodeForUri();
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.encodedPassword("\u2026]");
      // Undeclared exception!
      try { 
        httpUrl_Builder3.build();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // scheme == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addPathSegments("\u2026");
      String string0 = "\r";
      // Undeclared exception!
      try { 
        httpUrl_Builder1.addEncodedPathSegment((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // encodedPathSegment == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.getChecked("http:fq~g;rmdt/j5");
      httpUrl0.queryParameter("8HzA");
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      httpUrl0.resolve("&P*SWm8gP+K||");
      int int0 = (-2424);
      StringBuilder stringBuilder0 = null;
      try {
        stringBuilder0 = new StringBuilder((-2424));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      HttpUrl.get(uRL0);
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      String string0 = "~";
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.setEncodedQueryParameter("~", "~");
      String string1 = "q0(ZrROd@pU1.\\#4";
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.setQueryParameter("string%20==%20null", "q0(ZrROd@pU1.#4");
      String string2 = ":";
      // Undeclared exception!
      try { 
        httpUrl_Builder2.host(":");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: :
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      MockURL.toURI(uRL0);
      HttpUrl.get(uRL0);
      int int0 = 0;
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.password("f[4_U;~o(P{Q$=76");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.addPathSegment("f[4_U;~o(P{Q$=76");
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.addEncodedPathSegment("f[4_U;~o(P{Q$=76");
      HttpUrl.Builder httpUrl_Builder4 = httpUrl_Builder3.removePathSegment(0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      // Undeclared exception!
      try { 
        httpUrl_Builder4.addEncodedQueryParameter((String) null, "INVALID_HOST");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // encodedName == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      MockURL.toURI(uRL0);
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.encodedPassword("okio.ByteStrbng");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.encodedQuery("]");
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.fragment("]");
      HttpUrl.Builder httpUrl_Builder4 = httpUrl_Builder3.query("]");
      httpUrl_Builder4.parse(httpUrl0, "?");
      HttpUrl httpUrl1 = httpUrl_Builder4.build();
      httpUrl1.queryParameter("fooexample");
      httpUrl1.queryParameter("]");
      httpUrl1.resolve("okio.Segment");
      httpUrl0.uri();
      httpUrl0.port();
      // Undeclared exception!
      try { 
        httpUrl_Builder3.removePathSegment(7);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 7, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      HttpUrl httpUrl1 = httpUrl0.resolve("HV^vHzC.R?m0.4d-HaI");
      httpUrl1.queryParameterNames();
      httpUrl1.uri();
      HttpUrl.percentDecode("HV^vHzC.R?m0.4d-HaI", true);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      HttpUrl.Builder httpUrl_Builder0 = httpUrl0.newBuilder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.reencodeForUri();
      httpUrl_Builder0.setEncodedQueryParameter("Content-Length (", "Content-Length (");
      HttpUrl httpUrl1 = new HttpUrl(httpUrl_Builder1);
      // Undeclared exception!
      try { 
        httpUrl1.queryParameterName(53);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 106, Size: 2
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      HttpUrl httpUrl1 = httpUrl0.resolve("HV^vHzC.R?m0.4d-HaI");
      // Undeclared exception!
      try { 
        httpUrl1.queryParameterValue((-2650));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      String string0 = ".%2e";
      httpUrl_Builder0.addEncodedPathSegment(".%2e");
      String string1 = "D::::";
      httpUrl_Builder0.setQueryParameter(".%2e", "D::::");
      httpUrl_Builder0.addQueryParameter(".%2e", ".%2e");
      try { 
        HttpUrl.getChecked("D::::");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // Invalid URL: UNSUPPORTED_SCHEME for D::::
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      httpUrl_Builder0.addEncodedPathSegment(".%2e");
      HttpUrl.getChecked("http:fq~g;rmdt/j5");
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      URL uRL0 = MockURL.getHttpExample();
      URL uRL1 = MockURL.URL(uRL0, "P");
      HttpUrl httpUrl0 = HttpUrl.get(uRL1);
      HttpUrl httpUrl1 = HttpUrl.get(uRL1);
      HttpUrl.Builder httpUrl_Builder1 = httpUrl1.newBuilder();
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.reencodeForUri();
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.setEncodedQueryParameter("P", "NY_'#My|#");
      HttpUrl httpUrl2 = new HttpUrl(httpUrl_Builder2);
      httpUrl2.encodedUsername();
      httpUrl_Builder3.parse(httpUrl1, "NY_'#My|#");
      httpUrl0.encodedPathSegments();
      httpUrl2.newBuilder("^`{|}");
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpUrl.get(uRL0);
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addQueryParameter("u;FBn^b", "u;FBn^b");
      String string0 = "R/E]v!,{EMjn";
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.addEncodedQueryParameter("R/E]v!,{EMjn", "R/E]v!,{EMjn");
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.encodedQuery("R/E]v!,{EMjn");
      HttpUrl.Builder httpUrl_Builder4 = httpUrl_Builder3.username("@)!.LBH^56k");
      HttpUrl.Builder httpUrl_Builder5 = httpUrl_Builder4.addEncodedPathSegments("u;FBn^b");
      httpUrl_Builder5.encodedQuery("%-O?y~`e%cWnG");
      HttpUrl.Builder httpUrl_Builder6 = httpUrl_Builder5.reencodeForUri();
      // Undeclared exception!
      try { 
        httpUrl_Builder6.build();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // scheme == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.host("[:");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: [:
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      String string0 = "[Unexpected codepoint: ";
      // Undeclared exception!
      try { 
        httpUrl_Builder0.host("[Unexpected codepoint: ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: [Unexpected codepoint: 
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      try { 
        HttpUrl.getChecked("http:a[T/:xm3ubh");
        fail("Expecting exception: UnknownHostException");
      
      } catch(UnknownHostException e) {
         //
         // Invalid host: http:a[T/:xm3ubh
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      httpUrl_Builder0.encodedFragment = "&d7))rH";
      httpUrl_Builder0.encodedQueryNamesAndValues = null;
      httpUrl_Builder0.addEncodedPathSegment("\n");
      try { 
        HttpUrl.getChecked("https:ta[:xm3ubh");
        fail("Expecting exception: UnknownHostException");
      
      } catch(UnknownHostException e) {
         //
         // Invalid host: https:ta[:xm3ubh
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      String string0 = "D:";
      // Undeclared exception!
      try { 
        httpUrl_Builder0.host("D:");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: D:
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Expected leading [0-9a-fA-F] character but was 0x");
      HttpUrl httpUrl0 = HttpUrl.getChecked("http:fq~g;rmdt");
      httpUrl0.querySize();
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.getChecked("http:fq~g;rmdt/j5");
      httpUrl0.querySize();
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "http:fq~g;rmdt/j5");
      HttpUrl httpUrl0 = HttpUrl.parse("http:fq~g;rmdt/j5");
      httpUrl0.fragment();
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.encodedPassword("%?s");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.password("b.D^WtA[:Xm3ubh");
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.addEncodedPathSegment(":::");
      httpUrl_Builder3.addEncodedQueryParameter("okhttp3.HttpUrl", "okhttp3.HttpUrl");
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.getChecked("http:fq~g;rmdt/j5");
      httpUrl0.host();
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      try { 
        HttpUrl.getChecked("http:fq~@rmt%jW5");
        fail("Expecting exception: UnknownHostException");
      
      } catch(UnknownHostException e) {
         //
         // Invalid host: http:fq~@rmt%jW5
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      HttpUrl.parse("http:fq~g@rmdt/jW5");
      HttpUrl.percentDecode("dm%25qp6%3ewo5m~-6g%3c5@%23", false);
      try { 
        MockURI.URI("http:fq~g@rmdt/jW5", "http:fq~g@rmdt/jW5", "http:fq~g@rmdt/jW5", "http:fq~g@rmdt/jW5");
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Relative path in absolute URI: http:fq~g@rmdt/jW5://[http:fq~g@rmdt/jW5]http:fq~g@rmdt/jW5#http:fq~g@rmdt/jW5
         //
         verifyException("java.net.URI", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.parse("http:fq~g@rmdt/jW5");
      httpUrl0.uri();
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      HttpUrl httpUrl1 = httpUrl0.resolve("m#lHv~8,");
      httpUrl1.uri();
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.getChecked("http:a&xm3ubh");
      httpUrl0.queryParameterValues("http:a&xm3ubh");
      httpUrl0.equals("<r)");
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.parse("http:fq~g;rmdtj5");
      httpUrl0.equals("http:fq~g;rmdtj5");
      HttpUrl.canonicalize("http:fq~g;rmdtj5", "http:fq~g;rmdtj5", true, false, true, false);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      String string0 = "http:fq~g;rmdt/j5";
      HttpUrl httpUrl0 = HttpUrl.getChecked("http:fq~g;rmdt/j5");
      httpUrl0.queryParameterValues("http:fq~g;rmdt/j5");
      String string1 = "http:#@(pfr";
      HttpUrl.parse("http:#@(pfr");
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.port((-24589507));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected port: -24589507
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      String string0 = "/..";
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.username("/..");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.addEncodedPathSegments("/..");
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.encodedFragment(" \"'<>#&=");
      HttpUrl.Builder httpUrl_Builder4 = httpUrl_Builder3.encodedPassword("okio.SegmentedByteString");
      // Undeclared exception!
      try { 
        httpUrl_Builder4.host("7fm?");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: 7fm?
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      String string0 = "http:a:xm3ubh";
      HttpUrl.parse("http:a:xm3ubh");
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.setEncodedPathSegment(5, "http:a:xm3ubh");
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 5, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      try { 
        HttpUrl.getChecked("http::m#3ubVdIh");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // Invalid URL: INVALID_PORT for http::m#3ubVdIh
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.getChecked("http:fq~g;rmdtj5");
      httpUrl0.uri();
      MockURI.URI("http:fq~g;rmdtj5");
      httpUrl0.hashCode();
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      String string0 = "";
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.password("");
      // Undeclared exception!
      try { 
        httpUrl_Builder1.encodedPath("Z>");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected encodedPath: Z>
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      try { 
        HttpUrl.getChecked("https:a:xm3ubh");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // Invalid URL: INVALID_PORT for https:a:xm3ubh
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.getChecked("http:am#Rubh");
      HttpUrl httpUrl1 = httpUrl0.resolve("http:am#Rubh");
      httpUrl0.equals(httpUrl1);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.getChecked("http:a&xm3ubh");
      httpUrl0.query();
      URI uRI0 = MockURI.URI("http:a&xm3ubh", (String) null, (String) null, "http:a&xm3ubh", "4");
      URI uRI1 = MockURI.normalize(uRI0);
      HttpUrl.get(uRI1);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.getChecked("http:~{h");
      httpUrl0.resolve("http:~{h");
      HttpUrl.parse("[a.:xm3bh");
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.setEncodedPathSegment(0, ".");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected path segment: .
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }
}
