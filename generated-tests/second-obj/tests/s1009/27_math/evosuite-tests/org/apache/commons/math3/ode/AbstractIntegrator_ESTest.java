/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 06 22:49:10 GMT 2018
 */

package org.apache.commons.math3.ode;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.analysis.UnivariateFunction;
import org.apache.commons.math3.analysis.function.Exp;
import org.apache.commons.math3.analysis.solvers.IllinoisSolver;
import org.apache.commons.math3.analysis.solvers.MullerSolver2;
import org.apache.commons.math3.analysis.solvers.RiddersSolver;
import org.apache.commons.math3.analysis.solvers.UnivariateSolver;
import org.apache.commons.math3.ode.ExpandableStatefulODE;
import org.apache.commons.math3.ode.FirstOrderConverter;
import org.apache.commons.math3.ode.FirstOrderDifferentialEquations;
import org.apache.commons.math3.ode.SecondOrderDifferentialEquations;
import org.apache.commons.math3.ode.SecondaryEquations;
import org.apache.commons.math3.ode.events.EventFilter;
import org.apache.commons.math3.ode.events.EventHandler;
import org.apache.commons.math3.ode.events.FilterType;
import org.apache.commons.math3.ode.nonstiff.AdamsBashforthIntegrator;
import org.apache.commons.math3.ode.nonstiff.ClassicalRungeKuttaIntegrator;
import org.apache.commons.math3.ode.nonstiff.DormandPrince54Integrator;
import org.apache.commons.math3.ode.nonstiff.EulerIntegrator;
import org.apache.commons.math3.ode.nonstiff.GillIntegrator;
import org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerIntegrator;
import org.apache.commons.math3.ode.nonstiff.HighamHall54Integrator;
import org.apache.commons.math3.ode.nonstiff.LutherIntegrator;
import org.apache.commons.math3.ode.nonstiff.ThreeEighthesIntegrator;
import org.apache.commons.math3.ode.sampling.FixedStepHandler;
import org.apache.commons.math3.ode.sampling.StepNormalizer;
import org.apache.commons.math3.ode.sampling.StepNormalizerMode;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AbstractIntegrator_ESTest extends AbstractIntegrator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      double double0 = 0.0;
      GillIntegrator gillIntegrator0 = new GillIntegrator(0.0);
      gillIntegrator0.clearEventHandlers();
      gillIntegrator0.getEvaluations();
      gillIntegrator0.getCurrentStepStart();
      gillIntegrator0.getMaxEvaluations();
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (double) Integer.MAX_VALUE;
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      FilterType filterType0 = FilterType.TRIGGER_ONLY_DECREASING_EVENTS;
      EventFilter eventFilter0 = new EventFilter(eventHandler0, filterType0);
      RiddersSolver riddersSolver0 = new RiddersSolver();
      gillIntegrator0.addEventHandler((EventHandler) eventFilter0, 2.147483647E9, Double.NaN, 427, (UnivariateSolver) riddersSolver0);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (double) Integer.MAX_VALUE;
      doubleArray0[4] = Double.NaN;
      doubleArray0[5] = (double) Integer.MAX_VALUE;
      // Undeclared exception!
      try { 
        gillIntegrator0.computeDerivatives(Integer.MAX_VALUE, doubleArray0, doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(2432.99, 5.3774170051560117E-8, 1.0, 1.0);
      dormandPrince54Integrator0.addEventHandler((EventHandler) null, 1.0, 5.070274654122399E107, (-736));
      dormandPrince54Integrator0.getEventHandlers();
      dormandPrince54Integrator0.getOrder();
      dormandPrince54Integrator0.getOrder();
      assertEquals(Integer.MAX_VALUE, dormandPrince54Integrator0.getMaxEvaluations());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ClassicalRungeKuttaIntegrator classicalRungeKuttaIntegrator0 = new ClassicalRungeKuttaIntegrator(615.7030018793198);
      classicalRungeKuttaIntegrator0.getStepHandlers();
      double double0 = classicalRungeKuttaIntegrator0.getCurrentSignedStepsize();
      assertEquals(Double.NaN, double0, 0.01);
      
      FixedStepHandler fixedStepHandler0 = mock(FixedStepHandler.class, new ViolatedAssumptionAnswer());
      StepNormalizerMode stepNormalizerMode0 = StepNormalizerMode.INCREMENT;
      StepNormalizer stepNormalizer0 = new StepNormalizer(Double.NaN, fixedStepHandler0, stepNormalizerMode0);
      stepNormalizer0.init(615.7030018793198, (double[]) null, Double.NaN);
      classicalRungeKuttaIntegrator0.addStepHandler(stepNormalizer0);
      assertEquals(Double.NaN, classicalRungeKuttaIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(Integer.MAX_VALUE, classicalRungeKuttaIntegrator0.getMaxEvaluations());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(2686.1, 2686.1, 2686.1, 3665.70711642825);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(1).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      highamHall54Integrator0.getEventHandlers();
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 2686.1;
      doubleArray0[1] = 2686.1;
      doubleArray0[2] = 3665.70711642825;
      try { 
        highamHall54Integrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 3665.70711642825, doubleArray0, 2686.1, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 3 != 2
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ThreeEighthesIntegrator threeEighthesIntegrator0 = new ThreeEighthesIntegrator((-374.4));
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(851).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      threeEighthesIntegrator0.clearEventHandlers();
      double[] doubleArray0 = new double[3];
      doubleArray0[2] = (-374.4);
      doubleArray0[1] = (-374.4);
      Double double0 = new Double((-374.4));
      threeEighthesIntegrator0.getName();
      // Undeclared exception!
      try { 
        firstOrderConverter0.computeDerivatives(3724.35338, doubleArray0, doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.ode.FirstOrderConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      EulerIntegrator eulerIntegrator0 = new EulerIntegrator((-383.0));
      assertEquals(Integer.MAX_VALUE, eulerIntegrator0.getMaxEvaluations());
      
      eulerIntegrator0.setMaxEvaluations(0);
      eulerIntegrator0.getEventHandlers();
      eulerIntegrator0.getStepHandlers();
      assertEquals(0, eulerIntegrator0.getMaxEvaluations());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LutherIntegrator lutherIntegrator0 = new LutherIntegrator(1038.09);
      double[] doubleArray0 = new double[7];
      doubleArray0[1] = (-17.412845707012092);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[6] = 1038.09;
      lutherIntegrator0.clearStepHandlers();
      double double0 = lutherIntegrator0.getCurrentSignedStepsize();
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(Integer.MAX_VALUE, lutherIntegrator0.getMaxEvaluations());
      assertEquals(Double.NaN, lutherIntegrator0.getCurrentStepStart(), 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      double double0 = (-383.0);
      EulerIntegrator eulerIntegrator0 = new EulerIntegrator((-383.0));
      int int0 = 0;
      eulerIntegrator0.setMaxEvaluations(0);
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      FilterType filterType0 = FilterType.TRIGGER_ONLY_INCREASING_EVENTS;
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      try { 
        eulerIntegrator0.integrate(expandableStatefulODE0, Double.NaN);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: maximal count (0) exceeded
         //
         verifyException("org.apache.commons.math3.util.Incrementor$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LutherIntegrator lutherIntegrator0 = new LutherIntegrator(1979.9252406395267);
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(eventHandler0).g(anyDouble() , any(double[].class));
      FilterType filterType0 = FilterType.TRIGGER_ONLY_INCREASING_EVENTS;
      EventFilter eventFilter0 = new EventFilter(eventHandler0, filterType0);
      IllinoisSolver illinoisSolver0 = new IllinoisSolver();
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(3).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      SecondaryEquations secondaryEquations0 = mock(SecondaryEquations.class, new ViolatedAssumptionAnswer());
      double[] doubleArray0 = new double[6];
      firstOrderConverter0.computeDerivatives((-1.0), doubleArray0, doubleArray0);
      doubleArray0[0] = (-1770.1);
      doubleArray0[1] = (-1770.1);
      doubleArray0[2] = 0.5712664127349854;
      doubleArray0[3] = (-1770.1);
      doubleArray0[4] = 0.5712664127349854;
      doubleArray0[5] = (-1.0);
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(2212.2206215569, 1274.4546302740398, doubleArray0, doubleArray0);
      highamHall54Integrator0.getStepHandlers();
      HighamHall54Integrator highamHall54Integrator1 = new HighamHall54Integrator((-1770.1), 1000.0, doubleArray0, doubleArray0);
      highamHall54Integrator1.addEventHandler((EventHandler) eventFilter0, (-427.1719799994754), 2.5786490440368652, 3);
      highamHall54Integrator1.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 5.6843418860808015E-11, doubleArray0, (-1770.1), doubleArray0);
      assertEquals(15, highamHall54Integrator1.getEvaluations());
      
      FixedStepHandler fixedStepHandler0 = mock(FixedStepHandler.class, new ViolatedAssumptionAnswer());
      StepNormalizer stepNormalizer0 = new StepNormalizer(1251.8, fixedStepHandler0);
      lutherIntegrator0.addStepHandler(stepNormalizer0);
      assertEquals(Double.NaN, lutherIntegrator0.getCurrentSignedStepsize(), 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LutherIntegrator lutherIntegrator0 = new LutherIntegrator(1979.9252406395267);
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(1979.9252406395267, 1979.9252406395267, 2212.2206215569, 1979.9252406395267);
      graggBulirschStoerIntegrator0.getStepHandlers();
      graggBulirschStoerIntegrator0.setStepSizeControl((-1.0), (-2919.3106294027), (-1.0), 0.0);
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      FilterType filterType0 = FilterType.TRIGGER_ONLY_INCREASING_EVENTS;
      EventFilter eventFilter0 = new EventFilter(eventHandler0, filterType0);
      IllinoisSolver illinoisSolver0 = new IllinoisSolver();
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(3).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      SecondaryEquations secondaryEquations0 = mock(SecondaryEquations.class, new ViolatedAssumptionAnswer());
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-1770.1);
      doubleArray0[1] = (-1770.1);
      doubleArray0[2] = 0.5712664127349854;
      doubleArray0[3] = (-1770.1);
      doubleArray0[4] = 0.5712664127349854;
      doubleArray0[5] = (-1.0);
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-1770.1), 1000.0, doubleArray0, doubleArray0);
      firstOrderConverter0.computeDerivatives(2910.781436281227, doubleArray0, doubleArray0);
      highamHall54Integrator0.getEventHandlers();
      double double0 = highamHall54Integrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 5.6843418860808015E-11, doubleArray0, 0.0, doubleArray0);
      assertEquals(8, highamHall54Integrator0.getEvaluations());
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LutherIntegrator lutherIntegrator0 = new LutherIntegrator(1979.9252406395267);
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      FilterType filterType0 = FilterType.TRIGGER_ONLY_INCREASING_EVENTS;
      EventFilter eventFilter0 = new EventFilter(eventHandler0, filterType0);
      FilterType filterType1 = FilterType.TRIGGER_ONLY_INCREASING_EVENTS;
      EventFilter eventFilter1 = new EventFilter(eventFilter0, filterType1);
      EventFilter eventFilter2 = new EventFilter(eventFilter1, filterType0);
      IllinoisSolver illinoisSolver0 = new IllinoisSolver();
      lutherIntegrator0.getEventHandlers();
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(2497.331084950457, 213.3363593, 2910.781436281227, 2497.331084950457);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(47).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      ExpandableStatefulODE expandableStatefulODE1 = new ExpandableStatefulODE(firstOrderConverter0);
      ExpandableStatefulODE expandableStatefulODE2 = new ExpandableStatefulODE(firstOrderConverter0);
      SecondaryEquations secondaryEquations0 = mock(SecondaryEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondaryEquations0).getDimension();
      expandableStatefulODE0.addSecondaryEquations(secondaryEquations0);
      ExpandableStatefulODE expandableStatefulODE3 = new ExpandableStatefulODE(firstOrderConverter0);
      // Undeclared exception!
      graggBulirschStoerIntegrator0.integrate(expandableStatefulODE0, (-122.15506500252032));
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(2686.1, 2686.1, 2686.1, 3665.70711642825);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(1).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      highamHall54Integrator0.getEventHandlers();
      IllinoisSolver illinoisSolver0 = new IllinoisSolver();
      double double0 = (-4.073965591445897E121);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 2686.1;
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doubleArray0[1] = (double) 1;
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(2062.305026, (-4.073965591445897E121), doubleArray0, doubleArray0);
      EventHandler eventHandler1 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0).when(eventHandler1).g(anyDouble() , any(double[].class));
      FilterType filterType0 = FilterType.TRIGGER_ONLY_INCREASING_EVENTS;
      EventFilter eventFilter0 = new EventFilter(eventHandler1, filterType0);
      double double1 = 3042.7126510513394;
      HighamHall54Integrator highamHall54Integrator1 = new HighamHall54Integrator(3042.7126510513394, 1, doubleArray0, doubleArray0);
      highamHall54Integrator1.getStepHandlers();
      HighamHall54Integrator highamHall54Integrator2 = new HighamHall54Integrator(2212.220621556843, 1, doubleArray0, doubleArray0);
      FilterType filterType1 = FilterType.TRIGGER_ONLY_INCREASING_EVENTS;
      EventFilter eventFilter1 = new EventFilter(eventFilter0, filterType1);
      highamHall54Integrator2.addEventHandler((EventHandler) eventFilter1, 2686.1, 222.14317226, 3369);
      try { 
        highamHall54Integrator2.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, (-413.05), doubleArray0, 3042.7126510513394, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // minimal step size (2.21E03) reached, integration needs 1.00E01
         //
         verifyException("org.apache.commons.math3.ode.nonstiff.AdaptiveStepsizeIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LutherIntegrator lutherIntegrator0 = new LutherIntegrator(1979.9252406395267);
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      FilterType filterType0 = FilterType.TRIGGER_ONLY_INCREASING_EVENTS;
      EventFilter eventFilter0 = new EventFilter(eventHandler0, filterType0);
      IllinoisSolver illinoisSolver0 = new IllinoisSolver();
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(3).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      SecondaryEquations secondaryEquations0 = mock(SecondaryEquations.class, new ViolatedAssumptionAnswer());
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-1770.1);
      firstOrderConverter0.computeDerivatives(171.1294841746759, doubleArray0, doubleArray0);
      doubleArray0[1] = (-1770.1);
      doubleArray0[2] = 12.957367232481307;
      doubleArray0[3] = (-1770.1);
      doubleArray0[4] = 12.957367232481307;
      doubleArray0[5] = (-1.0);
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(12.957367232481307, (-1770.1), doubleArray0, doubleArray0);
      firstOrderConverter0.computeDerivatives(2434.84, doubleArray0, doubleArray0);
      double[] doubleArray1 = new double[0];
      try { 
        highamHall54Integrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 1770.1000000000568, doubleArray0, 0.0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 != 6
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LutherIntegrator lutherIntegrator0 = new LutherIntegrator(1979.9252406395267);
      double double0 = 2212.220621557;
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(1979.9252406395267, 1979.9252406395267, 2212.220621557, 1979.9252406395267);
      graggBulirschStoerIntegrator0.setStepSizeControl((-1.0), (-2919.3106294027), (-1.0), 0.008333333333333333);
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn((EventHandler.Action) null).when(eventHandler0).eventOccurred(anyDouble() , any(double[].class) , anyBoolean());
      FilterType filterType0 = FilterType.TRIGGER_ONLY_INCREASING_EVENTS;
      EventFilter eventFilter0 = new EventFilter(eventHandler0, filterType0);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-3152.89652);
      doubleArray0[1] = (-1.0);
      doubleArray0[2] = (-1.0);
      eventFilter0.eventOccurred((-3152.89652), doubleArray0, false);
      IllinoisSolver illinoisSolver0 = new IllinoisSolver();
      lutherIntegrator0.getEventHandlers();
      graggBulirschStoerIntegrator0.addEventHandler((EventHandler) eventFilter0, (-1770.1), 1979.9252406395267, 3, (UnivariateSolver) illinoisSolver0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      AdamsBashforthIntegrator adamsBashforthIntegrator0 = new AdamsBashforthIntegrator(3, 2138.1501932, 318.768, 684.77052789839, 2212.220621556843);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations1 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations1).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations1);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      // Undeclared exception!
      try { 
        adamsBashforthIntegrator0.integrate(expandableStatefulODE0, 2212.220621556843);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // matrix must have at least one column
         //
         verifyException("org.apache.commons.math3.linear.Array2DRowRealMatrix", e);
      }
  }
}
