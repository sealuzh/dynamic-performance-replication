/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 02:18:11 GMT 2018
 */

package us.codecraft.webmagic.utils;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.HashMap;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import us.codecraft.webmagic.utils.DoubleKeyMap;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DoubleKeyMap_ESTest extends DoubleKeyMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      DoubleKeyMap<Integer, String, String> doubleKeyMap0 = new DoubleKeyMap<Integer, String, String>();
      Integer integer0 = new Integer(0);
      // Undeclared exception!
      try { 
        doubleKeyMap0.put(integer0, (Map<String, String>) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      DoubleKeyMap<String, String, Object> doubleKeyMap0 = new DoubleKeyMap<String, String, Object>();
      Class<Map> class0 = Map.class;
      doubleKeyMap0.put("", "m9<", (Object) "m9<");
      doubleKeyMap0.put("", "", (Object) "");
      DoubleKeyMap<Object, Integer, Object> doubleKeyMap1 = null;
      try {
        doubleKeyMap1 = new DoubleKeyMap<Object, Integer, Object>(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Class<Map> class0 = Map.class;
      DoubleKeyMap<Object, Integer, Object> doubleKeyMap0 = new DoubleKeyMap<Object, Integer, Object>();
      Integer integer0 = new Integer((-648));
      Object object0 = new Object();
      doubleKeyMap0.put((Object) class0, integer0, object0);
      doubleKeyMap0.remove((Object) class0, integer0);
      Map<Integer, Object> map0 = doubleKeyMap0.get((Object) class0);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      HashMap<String, Map<String, Object>> hashMap0 = new HashMap<String, Map<String, Object>>();
      String string0 = null;
      HashMap<String, Object> hashMap1 = new HashMap<String, Object>();
      hashMap0.put((String) null, hashMap1);
      DoubleKeyMap<String, String, Object> doubleKeyMap0 = new DoubleKeyMap<String, String, Object>(hashMap0);
      String string1 = "us.codecraft.webmagic.utils.MultiKeyMapBase";
      doubleKeyMap0.put((String) null, "us.codecraft.webmagic.utils.MultiKeyMapBase", (Object) "us.codecraft.webmagic.utils.MultiKeyMapBase");
      doubleKeyMap0.remove((String) null, (String) null);
      Class<HashMap> class0 = HashMap.class;
      DoubleKeyMap<Object, Object, String> doubleKeyMap1 = new DoubleKeyMap<Object, Object, String>(class0);
      Object object0 = new Object();
      DoubleKeyMap<Object, String, String> doubleKeyMap2 = new DoubleKeyMap<Object, String, String>(class0);
      doubleKeyMap2.remove((Object) null);
      Object object1 = new Object();
      Class<Map> class1 = Map.class;
      DoubleKeyMap<Integer, Object, String> doubleKeyMap3 = null;
      try {
        doubleKeyMap3 = new DoubleKeyMap<Integer, Object, String>(class1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      DoubleKeyMap<Object, String, String> doubleKeyMap0 = new DoubleKeyMap<Object, String, String>();
      Class<HashMap> class0 = HashMap.class;
      DoubleKeyMap<String, String, String> doubleKeyMap1 = new DoubleKeyMap<String, String, String>(class0);
      doubleKeyMap1.get("", "");
      Object object0 = new Object();
      DoubleKeyMap<Object, Object, String> doubleKeyMap2 = new DoubleKeyMap<Object, Object, String>(class0);
      Map<String, Map<String, Object>> map0 = doubleKeyMap2.newMap();
      DoubleKeyMap<String, String, Object> doubleKeyMap3 = new DoubleKeyMap<String, String, Object>(map0);
      Map<Object, Map<Object, Object>> map1 = doubleKeyMap3.newMap();
      DoubleKeyMap<Object, Object, Object> doubleKeyMap4 = new DoubleKeyMap<Object, Object, Object>(map1, class0);
      Integer integer0 = new Integer(0);
      DoubleKeyMap<String, Object, Object> doubleKeyMap5 = new DoubleKeyMap<String, Object, Object>();
      Map<String, Map<Integer, Object>> map2 = doubleKeyMap5.newMap();
      doubleKeyMap4.get((Object) integer0, (Object) map2);
      Class<HashMap> class1 = HashMap.class;
      DoubleKeyMap<Integer, Object, String> doubleKeyMap6 = new DoubleKeyMap<Integer, Object, String>(class0);
      Integer integer1 = new Integer((-1));
      Object object1 = new Object();
      Object object2 = new Object();
      doubleKeyMap6.remove(integer1, object2);
      DoubleKeyMap<Object, Map<Integer, Object>, Integer> doubleKeyMap7 = new DoubleKeyMap<Object, Map<Integer, Object>, Integer>(class1);
      Map<String, Map<Object, Object>> map3 = doubleKeyMap4.newMap();
      Class<Map> class2 = Map.class;
      Map<Integer, Object> map4 = doubleKeyMap5.newMap();
      Integer integer2 = new Integer((-1));
      doubleKeyMap7.put((Object) null, map4, integer2);
      DoubleKeyMap<String, Object, Object> doubleKeyMap8 = new DoubleKeyMap<String, Object, Object>(map3, class2);
      Map<Integer, Object> map5 = doubleKeyMap5.newMap();
      doubleKeyMap7.get((Object) null, map5);
      Object object3 = doubleKeyMap3.remove("", "");
      assertNull(object3);
  }
}
