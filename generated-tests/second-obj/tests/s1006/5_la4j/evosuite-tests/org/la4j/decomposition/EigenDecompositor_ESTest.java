/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 06 20:03:24 GMT 2018
 */

package org.la4j.decomposition;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;
import org.la4j.Matrix;
import org.la4j.decomposition.EigenDecompositor;
import org.la4j.matrix.ColumnMajorSparseMatrix;
import org.la4j.matrix.DenseMatrix;
import org.la4j.matrix.SparseMatrix;
import org.la4j.matrix.functor.MatrixFunction;
import org.la4j.operation.inplace.InPlaceCopyMatrixToMatrix;
import org.la4j.operation.ooplace.OoPlaceMatricesSubtraction;
import org.la4j.operation.ooplace.OoPlaceOuterProduct;
import org.la4j.vector.DenseVector;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class EigenDecompositor_ESTest extends EigenDecompositor_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.zero(164, 1478);
      EigenDecompositor eigenDecompositor0 = null;
      try {
        eigenDecompositor0 = new EigenDecompositor(columnMajorSparseMatrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Given matrix can not be used with this decompositor.
         //
         verifyException("org.la4j.decomposition.AbstractDecompositor", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      double[][] doubleArray0 = new double[2][3];
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = 1.5543122344752186E-15;
      doubleArray1[1] = (-0.4375);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[8];
      doubleArray2[2] = (double) 5;
      doubleArray2[0] = 1.6084752329714007E-14;
      SparseMatrix sparseMatrix0 = SparseMatrix.from2DArray(doubleArray0);
      EigenDecompositor eigenDecompositor0 = new EigenDecompositor(sparseMatrix0);
      eigenDecompositor0.decompose();
      Random.setNextRandom(5);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      int int0 = 0;
      double[][] doubleArray0 = new double[2][3];
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = 1.5543122344752188E-15;
      doubleArray1[1] = (-0.4375);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[8];
      doubleArray2[0] = (double) 5;
      doubleArray2[1] = (double) 0;
      doubleArray2[2] = (double) 0;
      doubleArray2[3] = 1.6084752329714007E-14;
      doubleArray2[4] = (double) 5;
      doubleArray2[5] = 1.5543122344752186E-15;
      doubleArray2[6] = (-0.4375);
      doubleArray2[7] = (-2781.320259);
      doubleArray0[1] = doubleArray2;
      SparseMatrix sparseMatrix0 = SparseMatrix.from2DArray(doubleArray0);
      EigenDecompositor eigenDecompositor0 = new EigenDecompositor(sparseMatrix0);
      eigenDecompositor0.decompose();
      // Undeclared exception!
      try { 
        DenseMatrix.constant(0, (-395), (-1924.0));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      int int0 = 446;
      Random.setNextRandom(446);
      OoPlaceOuterProduct ooPlaceOuterProduct0 = new OoPlaceOuterProduct();
      int int1 = 34;
      MockRandom mockRandom0 = new MockRandom();
      DenseVector denseVector0 = DenseVector.random(34, mockRandom0);
      Matrix matrix0 = ooPlaceOuterProduct0.apply(denseVector0, denseVector0);
      EigenDecompositor eigenDecompositor0 = new EigenDecompositor(matrix0);
      // Undeclared exception!
      eigenDecompositor0.decompose();
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.zero(5, 5);
      EigenDecompositor eigenDecompositor0 = new EigenDecompositor(denseMatrix0);
      eigenDecompositor0.decompose();
      eigenDecompositor0.applicableTo(denseMatrix0);
      Matrix[] matrixArray0 = eigenDecompositor0.decompose();
      eigenDecompositor0.matrix.columnMajorIterator();
      denseMatrix0.setColumn(0, 1.5543122344752188E-15);
      eigenDecompositor0.decompose();
      double[][] doubleArray0 = new double[2][3];
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = 1.5543122344752186E-15;
      doubleArray1[1] = (double) 5;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[8];
      doubleArray2[0] = (double) 5;
      doubleArray2[1] = (double) 0;
      doubleArray2[2] = (double) 5;
      doubleArray2[6] = 1.5543122344752186E-15;
      doubleArray0[1] = doubleArray2;
      SparseMatrix sparseMatrix0 = SparseMatrix.from2DArray(doubleArray0);
      EigenDecompositor eigenDecompositor1 = new EigenDecompositor(sparseMatrix0);
      Matrix[] matrixArray1 = eigenDecompositor1.decompose();
      assertNotSame(matrixArray1, matrixArray0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      int int0 = 5;
      DenseMatrix denseMatrix0 = DenseMatrix.zero(5, 5);
      EigenDecompositor eigenDecompositor0 = new EigenDecompositor(denseMatrix0);
      eigenDecompositor0.matrix = (Matrix) denseMatrix0;
      eigenDecompositor0.applicableTo(denseMatrix0);
      Matrix.identity(5);
      eigenDecompositor0.matrix = (Matrix) denseMatrix0;
      denseMatrix0.setColumn(2, 4.9E-324);
      // Undeclared exception!
      eigenDecompositor0.decompose();
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.zero(5, 5);
      EigenDecompositor eigenDecompositor0 = new EigenDecompositor(denseMatrix0);
      eigenDecompositor0.decompose();
      EigenDecompositor eigenDecompositor1 = new EigenDecompositor(denseMatrix0);
      eigenDecompositor1.matrix = (Matrix) denseMatrix0;
      eigenDecompositor0.matrix = (Matrix) denseMatrix0;
      eigenDecompositor0.matrix = (Matrix) denseMatrix0;
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(Double.NEGATIVE_INFINITY, (double)5, (double)0, Double.NEGATIVE_INFINITY, 710.0135).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      eigenDecompositor0.matrix.update(matrixFunction0);
      denseMatrix0.setColumn(0, (double) 0);
      eigenDecompositor0.decompose();
      InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new InPlaceCopyMatrixToMatrix();
      SparseMatrix sparseMatrix0 = null;
      // Undeclared exception!
      try { 
        inPlaceCopyMatrixToMatrix0.applySimple(denseMatrix0, (SparseMatrix) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.operation.inplace.InPlaceCopyMatrixToMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.zero(5, 5);
      EigenDecompositor eigenDecompositor0 = new EigenDecompositor(denseMatrix0);
      eigenDecompositor0.matrix = (Matrix) denseMatrix0;
      eigenDecompositor0.applicableTo(denseMatrix0);
      denseMatrix0.setColumn(0, 1.5543122344752188E-15);
      double[][] doubleArray0 = new double[2][3];
      double[] doubleArray1 = new double[2];
      doubleArray1[1] = (-0.4375);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[8];
      doubleArray2[0] = (double) 5;
      doubleArray2[1] = (double) 0;
      SparseMatrix sparseMatrix0 = SparseMatrix.from2DArray(doubleArray0);
      InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new InPlaceCopyMatrixToMatrix();
      InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix1 = new InPlaceCopyMatrixToMatrix();
      inPlaceCopyMatrixToMatrix1.applySimple(sparseMatrix0, denseMatrix0);
      EigenDecompositor eigenDecompositor1 = new EigenDecompositor(eigenDecompositor0.matrix);
      EigenDecompositor eigenDecompositor2 = new EigenDecompositor(eigenDecompositor0.matrix);
      eigenDecompositor2.decompose();
      EigenDecompositor eigenDecompositor3 = new EigenDecompositor(denseMatrix0);
      eigenDecompositor3.applicableTo(sparseMatrix0);
      Random.setNextRandom(28);
  }
}
