/*
 * This file was automatically generated by EvoSuite
 * Tue Jul 17 03:00:25 GMT 2018
 */

package com.google.re2j;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.re2j.Machine;
import com.google.re2j.RE2;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class RE2_ESTest extends RE2_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      RE2 rE2_0 = RE2.compileImpl("", 2118, true);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-81);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)12;
      byteArray0[4] = (byte) (-16);
      byteArray0[5] = (byte) (-32);
      byte[] byteArray1 = rE2_0.findUTF8(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      RE2 rE2_0 = RE2.compilePOSIX("Le\"zVKJ1sUF$W*$Oo`G");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-43);
      byte[] byteArray1 = rE2_0.findUTF8(byteArray0);
      assertNull(byteArray1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      RE2 rE2_0 = RE2.compilePOSIX("");
      rE2_0.replaceAll("", "");
      RE2 rE2_1 = RE2.compileImpl("b{~L?)p", (-1), false);
      byte[] byteArray0 = new byte[0];
      rE2_1.findAllUTF8Index(byteArray0, (-1));
      byte[] byteArray1 = new byte[0];
      rE2_0.findAll("?0aOE5fjn|6f)Qn)&R(", (-1));
      rE2_0.findUTF8Index(byteArray1);
      List<byte[]> list0 = rE2_0.findAllUTF8(byteArray0, 8);
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      RE2 rE2_0 = RE2.compilePOSIX("");
      byte[] byteArray0 = new byte[6];
      int[] intArray0 = rE2_0.findUTF8Index(byteArray0);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertNotNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      RE2 rE2_0 = RE2.compilePOSIX("Hex_Digit");
      List<int[]> list0 = rE2_0.findAllUTF8Index(byteArray0, 1407);
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      byte[] byteArray0 = new byte[17];
      RE2 rE2_0 = new RE2("$7IN^=j?K^ZjwT");
      List<byte[]> list0 = rE2_0.findAllUTF8(byteArray0, 1681);
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      RE2 rE2_0 = new RE2("FAIL");
      rE2_0.replaceAll("DJT", "DJT");
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-6);
      rE2_0.findAllUTF8(byteArray0, (-2615));
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-128);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)2;
      rE2_0.findSubmatchIndex(" .|8aw{&N.-{-8t^NhN");
      byteArray0[5] = (byte)14;
      byte[][] byteArray1 = rE2_0.findUTF8Submatch(byteArray0);
      assertNull(byteArray1);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      RE2 rE2_0 = RE2.compile("any -> ");
      byte[] byteArray0 = new byte[0];
      rE2_0.findUTF8Submatch(byteArray0);
      Machine machine0 = new Machine(rE2_0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      RE2 rE2_0 = RE2.compilePOSIX("");
      boolean boolean0 = rE2_0.match("");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      RE2 rE2_0 = RE2.compile("C]#*.]!s>XcX&tq");
      String string0 = rE2_0.find("Limbu");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      RE2 rE2_0 = new RE2("RUNE_ANY_NOT_NL");
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)78;
      byteArray0[1] = (byte)74;
      byteArray0[2] = (byte)16;
      byteArray0[3] = (byte)0;
      int[] intArray0 = rE2_0.findUTF8SubmatchIndex(byteArray0);
      assertNull(intArray0);
      
      rE2_0.longest = true;
      String string0 = rE2_0.find("RUNE_ANY_NOT_NL");
      assertEquals("RUNE_ANY_NOT_NL", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      RE2 rE2_0 = RE2.compile("KSijHn4#xf01");
      List<int[]> list0 = rE2_0.findAllUTF8SubmatchIndex(byteArray0, (-2291));
      assertNull(list0);
      
      int int0 = rE2_0.numberOfCapturingGroups();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      RE2 rE2_0 = RE2.compile("2xvkh]@{Pljm");
      String string0 = "-l$)peLx';C$F";
      rE2_0.replaceFirst("-l$)peLx';C$F", "-l$)peLx';C$F");
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)8;
      byteArray0[2] = (byte)91;
      byteArray0[3] = (byte) (-2);
      rE2_0.findAllUTF8SubmatchIndex(byteArray0, (byte)1);
      try { 
        RE2.compile("-l$)peLx';C$F");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: regexp/syntax: internal error: `stack underflow`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      String string0 = "\"$Lm\"7";
      RE2 rE2_0 = RE2.compileImpl("\"$Lm\"7", 0, true);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-16);
      byteArray0[1] = (byte)20;
      rE2_0.prefixUTF8 = byteArray0;
      String string1 = rE2_0.toString();
      assertEquals("\"$Lm\"7", string1);
      
      rE2_0.get();
      rE2_0.findAllSubmatch("]p", 0);
      rE2_0.findSubmatchIndex("\"$Lm\"7");
      RE2.compileImpl("A", 0, false);
      boolean boolean0 = rE2_0.match(string0);
      assertFalse(boolean0);
      
      String string2 = "";
      int int0 = 212;
      rE2_0.findAll(string2, int0);
      assertEquals("\"$Lm\"7", rE2_0.toString());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      RE2 rE2_0 = RE2.compile("");
      Machine machine0 = new Machine(rE2_0);
      List<String[]> list0 = rE2_0.findAllSubmatch("", (-200));
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      RE2 rE2_0 = RE2.compilePOSIX("");
      byte[] byteArray0 = new byte[0];
      List<byte[][]> list0 = rE2_0.findAllUTF8Submatch(byteArray0, (-2533));
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      RE2.match("", "");
      RE2 rE2_0 = RE2.compileImpl("", 1340, true);
      rE2_0.get();
      rE2_0.findAll("", 718);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)16;
      byteArray0[2] = (byte)4;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-100);
      byteArray0[6] = (byte)28;
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte)0;
      List<byte[][]> list0 = rE2_0.findAllUTF8Submatch(byteArray0, (byte)0);
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      RE2 rE2_0 = new RE2("Sm");
      int[] intArray0 = new int[8];
      rE2_0.match("Sm", (byte)0, (byte)0, (byte)0, intArray0, 345);
      List<int[]> list0 = rE2_0.findAllIndex("Sm", (byte)0);
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      RE2 rE2_0 = RE2.compilePOSIX("");
      boolean boolean0 = rE2_0.matchUTF8(byteArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      RE2 rE2_0 = RE2.compilePOSIX("");
      // Undeclared exception!
      try { 
        rE2_0.match("", 2147483645, 2147483645, 2147483645, (int[]) null, 2147483645);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Machine", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      RE2 rE2_0 = RE2.compile("");
      int[] intArray0 = new int[4];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)12;
      byteArray0[1] = (byte) (-53);
      rE2_0.findAllUTF8SubmatchIndex(byteArray0, 0);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)18;
      byteArray0[4] = (byte)43;
      rE2_0.matchUTF8(byteArray0);
      intArray0[3] = 0;
      rE2_0.match("", 0, 0, 0, intArray0, 0);
      rE2_0.replaceFirst("", "");
      RE2 rE2_1 = RE2.compileImpl("", (-4329), true);
      rE2_1.toString();
      RE2 rE2_2 = RE2.compilePOSIX("g$n!y>#wU}<6H8h/");
      assertFalse(rE2_2.equals((Object)rE2_0));
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      RE2 rE2_0 = new RE2("");
      int[] intArray0 = new int[8];
      // Undeclared exception!
      try { 
        rE2_0.match("", (byte)0, (byte)0, (byte)0, intArray0, 345);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      RE2 rE2_0 = RE2.compileImpl("", (-2645), false);
      String string0 = rE2_0.replaceFirst("", "/z8rospYt|aSPO<");
      assertEquals("/z8rospYt|aSPO<", string0);
      
      rE2_0.prefixRune = 3004;
      rE2_0.reset();
      rE2_0.find("");
      rE2_0.match("");
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)8;
      byteArray0[1] = (byte)59;
      byteArray0[2] = (byte)42;
      byteArray0[3] = (byte)0;
      List<int[]> list0 = rE2_0.findAllUTF8SubmatchIndex(byteArray0, (-3790));
      assertEquals(5, list0.size());
      assertNotNull(list0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      RE2 rE2_0 = RE2.compileImpl("", 10266700, false);
      rE2_0.findIndex("");
      String string0 = rE2_0.toString();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      RE2 rE2_0 = RE2.compilePOSIX("9");
      RE2.quoteMeta("9");
      String[] stringArray0 = rE2_0.findSubmatch("9");
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      RE2 rE2_0 = new RE2("Lhu");
      List<int[]> list0 = rE2_0.findAllIndex("", (-1592));
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      RE2 rE2_0 = new RE2("O-ce9#~M'$zw");
      rE2_0.findAllIndex("O-ce9#~M'$zw", 1719);
      rE2_0.findIndex("O-ce9#~M'$zw");
      int[] intArray0 = new int[8];
      intArray0[0] = 3377;
      rE2_0.replaceAll("|gxJ>~", "O-ce9#~M'$zw");
      intArray0[1] = 1548;
      rE2_0.prefix = "O-ce9#~M'$zw";
      intArray0[2] = 0;
      intArray0[3] = (-596);
      intArray0[4] = 0;
      RE2.match("_12*Y]4.q @^Mk;x/\"h", "O-ce9#~M'$zw");
      intArray0[5] = 3377;
      intArray0[6] = 243;
      intArray0[7] = 1719;
      rE2_0.match("O-ce9#~M'$zw", 0, 3377, 0, intArray0, 1719);
      RE2.compile("O-ce9#~M'$zw");
      RE2 rE2_1 = RE2.compileImpl("O-ce9#~M'$zw", (-779), true);
      byte[] byteArray0 = new byte[0];
      List<int[]> list0 = rE2_1.findAllUTF8Index(byteArray0, (-4776));
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      RE2 rE2_0 = RE2.compilePOSIX("");
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)24;
      byteArray0[1] = (byte)25;
      byteArray0[2] = (byte) (-54);
      byteArray0[3] = (byte)0;
      int[] intArray0 = rE2_0.findUTF8SubmatchIndex(byteArray0);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte) (-64);
      List<int[]> list0 = rE2_0.findAllIndex("0mpEcGwTdiG#o&J)#6", 14);
      assertNotNull(list0);
      assertEquals(14, list0.size());
      
      byteArray1[1] = (byte)17;
      byteArray1[2] = (byte)0;
      byteArray1[3] = (byte) (-102);
      byteArray1[4] = (byte)2;
      byteArray1[5] = (byte)67;
      boolean boolean0 = rE2_0.matchUTF8(byteArray1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      RE2 rE2_0 = RE2.compilePOSIX("");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)16;
      byteArray0[1] = (byte)104;
      rE2_0.findAllUTF8Index(byteArray0, 7);
      String string0 = rE2_0.find("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      RE2 rE2_0 = RE2.compile("");
      List<int[]> list0 = rE2_0.findAllSubmatchIndex("", 64288);
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      RE2 rE2_0 = RE2.compile("dCUMFf!}L+");
      RE2.compile("dCUMFf!}L+");
      List<int[]> list0 = rE2_0.findAllSubmatchIndex("\"Y|hHip6;UHvXE1", 1114111);
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      RE2 rE2_0 = new RE2("");
      List<String> list0 = rE2_0.findAll("", 65);
      assertNotNull(list0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-4);
      byteArray0[1] = (byte) (-44);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)28;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)16;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte)28;
      List<byte[][]> list1 = rE2_0.findAllUTF8Submatch(byteArray0, (byte)16);
      assertNotNull(list1);
      assertEquals(7, list1.size());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      RE2 rE2_0 = RE2.compile("keOI@~");
      int[] intArray0 = rE2_0.findSubmatchIndex("keOI@~");
      assertArrayEquals(new int[] {0, 6}, intArray0);
      
      List<String[]> list0 = rE2_0.findAllSubmatch("keOI@~", 1114111);
      assertEquals(1, list0.size());
      assertNotNull(list0);
      
      RE2.quoteMeta("");
      rE2_0.get();
      byte[] byteArray0 = new byte[0];
      rE2_0.findAllUTF8Index(byteArray0, (-1611));
      int int0 = rE2_0.numberOfCapturingGroups();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      RE2 rE2_0 = new RE2("FAIL");
      String string0 = rE2_0.replaceAll("DJT", "DJT");
      byte[] byteArray0 = new byte[6];
      RE2 rE2_1 = RE2.compile("FAIL");
      rE2_1.findAllIndex("cDGeO", 1458);
      rE2_1.findSubmatch("DJT");
      RE2 rE2_2 = new RE2("X8N`Ba");
      rE2_0.findUTF8(byteArray0);
      rE2_0.findAllSubmatch("FAIL", 0);
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      intArray0[1] = 1458;
      intArray0[2] = 593;
      rE2_1.match("X8N`Ba", 710, (-1212), 0, intArray0, (byte) (-6));
      RE2 rE2_3 = new RE2("[invalid char class]");
      String string1 = rE2_3.replaceAll("%A8 @0u", "cDGeO");
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      RE2 rE2_0 = new RE2("Vgg#jo%");
      rE2_0.get();
      int[] intArray0 = rE2_0.findIndex("Vgg#jo%");
      String string0 = "o";
      rE2_0.findSubmatch("o");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-53);
      byteArray0[1] = (byte)12;
      byteArray0[2] = (byte) (-53);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      rE2_0.findAllUTF8SubmatchIndex(byteArray0, (-1611));
      rE2_0.matchUTF8(byteArray0);
      // Undeclared exception!
      try { 
        rE2_0.match("o", (byte)12, (byte)18, (byte)0, intArray0, (byte) (-53));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Machine", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      RE2 rE2_0 = RE2.compile("");
      rE2_0.prefix = "";
      byte[] byteArray0 = new byte[7];
      byte[][] byteArray1 = rE2_0.findUTF8Submatch(byteArray0);
      assertNotNull(byteArray1);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      RE2 rE2_0 = RE2.compilePOSIX("");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)16;
      byteArray0[1] = (byte)104;
      rE2_0.findSubmatchIndex(" .|8aw{&N.-{-8t^NhN");
      byte[][] byteArray1 = rE2_0.findUTF8Submatch(byteArray0);
      rE2_0.get();
      RE2.quoteMeta("CI?<3I)w0xWx%DZp0");
      rE2_0.findAll("", (byte)16);
      byte[][] byteArray2 = rE2_0.findUTF8Submatch(byteArray0);
      assertFalse(byteArray2.equals((Object)byteArray1));
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      RE2 rE2_0 = new RE2("Vgg#jo%");
      rE2_0.get();
      int[] intArray0 = rE2_0.findIndex("Vgg#jo%");
      rE2_0.findSubmatch("");
      List<int[]> list0 = rE2_0.findAllIndex("Vgg#jo%", (-1));
      assertEquals(1, list0.size());
      assertNotNull(list0);
      
      rE2_0.findSubmatch("Vgg#jo%");
      RE2 rE2_1 = RE2.compilePOSIX("!W|0o?pIKNVW5");
      rE2_1.match("Vgg#jo%", 127242, 788, 1509, intArray0, (-1));
      RE2 rE2_2 = RE2.compile("");
      String string0 = rE2_2.replaceAll("wJn,17%}oH", "!W|0o?pIKNVW5");
      assertEquals("!W|0o?pIKNVW5w!W|0o?pIKNVW5J!W|0o?pIKNVW5n!W|0o?pIKNVW5,!W|0o?pIKNVW51!W|0o?pIKNVW57!W|0o?pIKNVW5%!W|0o?pIKNVW5}!W|0o?pIKNVW5o!W|0o?pIKNVW5H!W|0o?pIKNVW5", string0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      RE2 rE2_0 = new RE2("\b");
      rE2_0.find("Z-:%=b");
      rE2_0.replaceAll("\b", "wX");
      List<String[]> list0 = rE2_0.findAllSubmatch("wXbwX", 2843);
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      String string0 = "";
      RE2 rE2_0 = RE2.compile("");
      int[] intArray0 = new int[4];
      intArray0[0] = 0;
      intArray0[2] = 0;
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)12;
      byteArray0[0] = (byte)84;
      rE2_0.findAllSubmatchIndex("", 0);
      rE2_0.matchUTF8(byteArray0);
      RE2 rE2_1 = RE2.compile("wU^y{Y");
      boolean boolean0 = rE2_0.prefixComplete;
      int int0 = 2759;
      rE2_0.match("wU^y{Y", 2, (byte)84, 0, (int[]) null, 2759);
      rE2_1.replaceFirst("", "");
      rE2_0.get();
      String string1 = "41%n5E1-OTj(d8";
      RE2 rE2_2 = null;
      try {
        rE2_2 = new RE2("41%n5E1-OTj(d8");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ): `41%n5E1-OTj(d8`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }
}
