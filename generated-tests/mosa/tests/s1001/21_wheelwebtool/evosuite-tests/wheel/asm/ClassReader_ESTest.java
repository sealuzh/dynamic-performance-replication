/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 06 16:28:17 GMT 2018
 */

package wheel.asm;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.DataInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.SequenceInputStream;
import java.util.Enumeration;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import wheel.asm.Attribute;
import wheel.asm.ClassReader;
import wheel.asm.ClassVisitor;
import wheel.asm.ClassWriter;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ClassReader_ESTest extends ClassReader_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ClassReader classReader0 = null;
      try {
        classReader0 = new ClassReader("+");
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Class not found
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("wheel.asm.Edge");
      ClassWriter classWriter0 = new ClassWriter(classReader0, 4);
      classReader0.accept((ClassVisitor) classWriter0, 2);
      assertEquals(4, ClassReader.SKIP_FRAMES);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("wheel.asm.Edge");
      ClassWriter classWriter0 = new ClassWriter(2);
      classReader0.accept((ClassVisitor) classWriter0, 2);
      assertEquals(271, classReader0.header);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("wheel.asm.Edge");
      ClassWriter classWriter0 = new ClassWriter(classReader0, 8);
      int int0 = classReader0.getAccess();
      assertEquals(32, int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("wheel.asm.Edge");
      ClassWriter classWriter0 = new ClassWriter(classReader0, 8);
      classReader0.accept((ClassVisitor) classWriter0, 8);
      assertEquals(32, classReader0.getAccess());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("wheel.asm.Edge");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ClassReader classReader1 = null;
      try {
        classReader1 = new ClassReader(classReader0.b, 4, 271);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 18724
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("wheel.asm.Edge");
      classReader0.getClassName();
      Attribute attribute0 = new Attribute("wheel.asm.Edge");
      assertTrue(attribute0.isUnknown());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("wheel.asm.Edge");
      ClassWriter classWriter0 = new ClassWriter(4);
      classReader0.accept((ClassVisitor) classWriter0, 8);
      assertEquals(1, ClassReader.SKIP_CODE);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("wheel.asm.Edge");
      classReader0.getInterfaces();
      assertEquals(271, classReader0.header);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("wheel.asm.Edge");
      assertNotNull(classReader0);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(271, classReader0.header);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(32, classReader0.getAccess());
      
      ClassWriter classWriter0 = new ClassWriter(classReader0, 8);
      assertNotNull(classWriter0);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(271, classReader0.header);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(32, classReader0.getAccess());
      
      ClassReader classReader1 = new ClassReader("wheel.asm.Opcodes");
      assertNotNull(classReader1);
      assertEquals(3040, classReader1.header);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertFalse(classReader1.equals((Object)classReader0));
      assertEquals(1537, classReader1.getAccess());
      
      classReader1.accept((ClassVisitor) classWriter0, 4);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(271, classReader0.header);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(3040, classReader1.header);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertFalse(classReader0.equals((Object)classReader1));
      assertFalse(classReader1.equals((Object)classReader0));
      assertEquals(32, classReader0.getAccess());
      assertEquals(1537, classReader1.getAccess());
      assertNotSame(classReader0, classReader1);
      assertNotSame(classReader1, classReader0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("wheel.asm.Opcodes");
      assertNotNull(classReader0);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(3040, classReader0.header);
      assertEquals(1537, classReader0.getAccess());
      
      // Undeclared exception!
      try { 
        classReader0.getItem((-1324));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1324
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("wheel.asm.Edge");
      assertNotNull(classReader0);
      assertEquals(271, classReader0.header);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(32, classReader0.getAccess());
      
      ClassWriter classWriter0 = new ClassWriter(271);
      assertNotNull(classWriter0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      ClassReader classReader1 = null;
      try {
        classReader1 = new ClassReader(classReader0.b, 230, 20);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 425
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("wheel.asm.Edge");
      assertNotNull(classReader0);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(271, classReader0.header);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(32, classReader0.getAccess());
      
      ClassWriter classWriter0 = new ClassWriter(8);
      assertNotNull(classWriter0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      // Undeclared exception!
      try { 
        classReader0.readConst(2, (char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("wheel.asm.Edge");
      assertNotNull(classReader0);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(271, classReader0.header);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(32, classReader0.getAccess());
      
      int int0 = classReader0.readByte(182);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(271, classReader0.header);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(99, int0);
      assertEquals(32, classReader0.getAccess());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("wheel.asm.Edge");
      assertNotNull(classReader0);
      assertEquals(271, classReader0.header);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(32, classReader0.getAccess());
      
      int int0 = 8;
      // Undeclared exception!
      try { 
        classReader0.readConst(8, (char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      assertNotNull(sequenceInputStream0);
      
      DataInputStream dataInputStream0 = new DataInputStream(sequenceInputStream0);
      assertNotNull(dataInputStream0);
      
      ClassReader classReader0 = null;
      try {
        classReader0 = new ClassReader(dataInputStream0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("wheel.asm.Edge");
      assertNotNull(classReader0);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(271, classReader0.header);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(32, classReader0.getAccess());
      
      ClassReader classReader1 = new ClassReader(classReader0.b, 271, 4);
      assertNotNull(classReader1);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(271, classReader0.header);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(295, classReader1.header);
      assertFalse(classReader1.equals((Object)classReader0));
      assertEquals(32, classReader0.getAccess());
      assertEquals(7, classReader1.getAccess());
      
      ClassWriter classWriter0 = null;
      try {
        classWriter0 = new ClassWriter(classReader1, 121);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("wheel.asm.Edge");
      assertNotNull(classReader0);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(271, classReader0.header);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(32, classReader0.getAccess());
      
      char[] charArray0 = new char[10];
      // Undeclared exception!
      try { 
        classReader0.readUTF8(4, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 10
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("wheel.asm.Edge");
      assertNotNull(classReader0);
      assertEquals(271, classReader0.header);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(32, classReader0.getAccess());
      
      ClassWriter classWriter0 = new ClassWriter(8);
      assertNotNull(classWriter0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      ClassReader classReader1 = new ClassReader("org.apache.commons.io.filefilter.FalseFileFilter");
      assertNotNull(classReader1);
      assertEquals(534, classReader1.header);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertFalse(classReader1.equals((Object)classReader0));
      assertEquals(33, classReader1.getAccess());
      
      String[] stringArray0 = classReader1.getInterfaces();
      assertNotNull(stringArray0);
      assertEquals(534, classReader1.header);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertFalse(classReader1.equals((Object)classReader0));
      assertEquals(33, classReader1.getAccess());
      assertNotSame(classReader1, classReader0);
      
      ClassWriter classWriter1 = new ClassWriter(1);
      assertNotNull(classWriter1);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertFalse(classWriter1.equals((Object)classWriter0));
      
      String string0 = classWriter1.getCommonSuperClass("org.apache.commons.io.filefilter.FalseFileFilter", "wheel.asm.Edge");
      assertNotNull(string0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertFalse(classWriter1.equals((Object)classWriter0));
      assertEquals("java/lang/Object", string0);
      assertNotSame(classWriter1, classWriter0);
      
      classReader0.copyPool(classWriter1);
      assertEquals(271, classReader0.header);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertFalse(classReader0.equals((Object)classReader1));
      assertFalse(classWriter1.equals((Object)classWriter0));
      assertEquals(32, classReader0.getAccess());
      assertNotSame(classReader0, classReader1);
      assertNotSame(classWriter1, classWriter0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("wheel.asm.Edge");
      assertNotNull(classReader0);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(271, classReader0.header);
      assertEquals(32, classReader0.getAccess());
      
      Attribute attribute0 = new Attribute("wheel.asm.Edge");
      assertNotNull(attribute0);
      assertTrue(attribute0.isUnknown());
      assertFalse(attribute0.isCodeAttribute());
      
      Attribute attribute1 = attribute0.next;
      assertNull(attribute1);
      
      String string0 = classReader0.getSuperName();
      assertNotNull(string0);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(271, classReader0.header);
      assertEquals("java/lang/Object", string0);
      assertEquals(32, classReader0.getAccess());
      
      ClassReader classReader1 = new ClassReader("java/lang/Object");
      assertNotNull(classReader1);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(927, classReader1.header);
      assertFalse(classReader1.equals((Object)classReader0));
      assertEquals(33, classReader1.getAccess());
      
      ClassWriter classWriter0 = new ClassWriter(classReader0, 271);
      assertNotNull(classWriter0);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(271, classReader0.header);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertFalse(classReader0.equals((Object)classReader1));
      assertEquals(32, classReader0.getAccess());
      
      ClassWriter classWriter1 = new ClassWriter(224);
      assertNotNull(classWriter1);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertFalse(classWriter1.equals((Object)classWriter0));
      
      classWriter1.version = 2;
      classReader1.copyPool(classWriter1);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(927, classReader1.header);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertFalse(classReader1.equals((Object)classReader0));
      assertFalse(classWriter1.equals((Object)classWriter0));
      assertEquals(33, classReader1.getAccess());
      assertNotSame(classReader1, classReader0);
      assertNotSame(classWriter1, classWriter0);
      
      String string1 = classReader1.getSuperName();
      assertNull(string1);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(927, classReader1.header);
      assertFalse(classReader1.equals((Object)classReader0));
      assertEquals(33, classReader1.getAccess());
      assertNotSame(classReader1, classReader0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          ClassReader classReader0 = new ClassReader("wheel.asm.Edge");
          assertNotNull(classReader0);
          assertEquals(1, ClassReader.SKIP_CODE);
          assertEquals(8, ClassReader.EXPAND_FRAMES);
          assertEquals(4, ClassReader.SKIP_FRAMES);
          assertEquals(2, ClassReader.SKIP_DEBUG);
          assertEquals(271, classReader0.header);
          assertEquals(32, classReader0.getAccess());
          
          ClassWriter classWriter0 = new ClassWriter(classReader0, 8);
          assertNotNull(classWriter0);
          assertEquals(1, ClassReader.SKIP_CODE);
          assertEquals(8, ClassReader.EXPAND_FRAMES);
          assertEquals(4, ClassReader.SKIP_FRAMES);
          assertEquals(2, ClassReader.SKIP_DEBUG);
          assertEquals(271, classReader0.header);
          assertEquals(1, ClassWriter.COMPUTE_MAXS);
          assertEquals(2, ClassWriter.COMPUTE_FRAMES);
          assertEquals(32, classReader0.getAccess());
          
          ClassReader classReader1 = new ClassReader("wheel.asm.Opcodes");
          assertNotNull(classReader1);
          assertEquals(4, ClassReader.SKIP_FRAMES);
          assertEquals(1, ClassReader.SKIP_CODE);
          assertEquals(8, ClassReader.EXPAND_FRAMES);
          assertEquals(2, ClassReader.SKIP_DEBUG);
          assertEquals(3040, classReader1.header);
          assertFalse(classReader1.equals((Object)classReader0));
          assertEquals(1537, classReader1.getAccess());
          
          classReader1.accept((ClassVisitor) classWriter0, 2);
          assertEquals(1, ClassReader.SKIP_CODE);
          assertEquals(8, ClassReader.EXPAND_FRAMES);
          assertEquals(4, ClassReader.SKIP_FRAMES);
          assertEquals(2, ClassReader.SKIP_DEBUG);
          assertEquals(271, classReader0.header);
          assertEquals(1, ClassWriter.COMPUTE_MAXS);
          assertEquals(2, ClassWriter.COMPUTE_FRAMES);
          assertEquals(4, ClassReader.SKIP_FRAMES);
          assertEquals(1, ClassReader.SKIP_CODE);
          assertEquals(8, ClassReader.EXPAND_FRAMES);
          assertEquals(2, ClassReader.SKIP_DEBUG);
          assertEquals(3040, classReader1.header);
          assertFalse(classReader0.equals((Object)classReader1));
          assertFalse(classReader1.equals((Object)classReader0));
          assertEquals(32, classReader0.getAccess());
          assertEquals(1537, classReader1.getAccess());
          assertNotSame(classReader0, classReader1);
          assertNotSame(classReader1, classReader0);
          
          char[] charArray0 = new char[4];
          charArray0[0] = ':';
          charArray0[1] = 'O';
          charArray0[2] = 'w';
          charArray0[3] = 'T';
          // Undeclared exception!
          try { 
            classReader1.readConst(8, charArray0);
            fail("Expecting exception: ArrayIndexOutOfBoundsException");
          
          } catch(ArrayIndexOutOfBoundsException e) {
             //
             // 4
             //
             verifyException("wheel.asm.ClassReader", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("wheel.asm.Edge");
      assertNotNull(classReader0);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(271, classReader0.header);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(32, classReader0.getAccess());
      
      ClassWriter classWriter0 = new ClassWriter(classReader0, 8);
      assertNotNull(classWriter0);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(271, classReader0.header);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(32, classReader0.getAccess());
      
      ClassReader classReader1 = new ClassReader("org.apache.commons.io.IOCase");
      assertNotNull(classReader1);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(1531, classReader1.header);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertFalse(classReader1.equals((Object)classReader0));
      assertEquals(49, classReader1.getAccess());
      
      classReader1.accept((ClassVisitor) classWriter0, 2);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(271, classReader0.header);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(1531, classReader1.header);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertFalse(classReader0.equals((Object)classReader1));
      assertFalse(classReader1.equals((Object)classReader0));
      assertEquals(32, classReader0.getAccess());
      assertEquals(49, classReader1.getAccess());
      assertNotSame(classReader0, classReader1);
      assertNotSame(classReader1, classReader0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("wheel.asm.Edge");
      assertNotNull(classReader0);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(271, classReader0.header);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(32, classReader0.getAccess());
      
      ClassWriter classWriter0 = new ClassWriter(classReader0, 1);
      assertNotNull(classWriter0);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(271, classReader0.header);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(32, classReader0.getAccess());
      
      ClassReader classReader1 = new ClassReader("wheel.asm.ClassReader");
      assertNotNull(classReader1);
      assertEquals(8070, classReader1.header);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertFalse(classReader1.equals((Object)classReader0));
      assertEquals(33, classReader1.getAccess());
      
      ClassWriter classWriter1 = new ClassWriter(2);
      assertNotNull(classWriter1);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertFalse(classWriter1.equals((Object)classWriter0));
      
      classReader1.accept((ClassVisitor) classWriter1, 4);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("wheel.asm.Edge");
      assertNotNull(classReader0);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(271, classReader0.header);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(32, classReader0.getAccess());
      
      ClassWriter classWriter0 = new ClassWriter(classReader0, 8);
      assertNotNull(classWriter0);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(271, classReader0.header);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(32, classReader0.getAccess());
      
      ClassReader classReader1 = new ClassReader("org.apache.commons.io.IOCase");
      assertNotNull(classReader1);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(1531, classReader1.header);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertFalse(classReader1.equals((Object)classReader0));
      assertEquals(49, classReader1.getAccess());
      
      classReader1.accept((ClassVisitor) classWriter0, 8);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(271, classReader0.header);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(1531, classReader1.header);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertFalse(classReader0.equals((Object)classReader1));
      assertFalse(classReader1.equals((Object)classReader0));
      assertEquals(32, classReader0.getAccess());
      assertEquals(49, classReader1.getAccess());
      assertNotSame(classReader0, classReader1);
      assertNotSame(classReader1, classReader0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("wheel.asm.Edge");
      assertNotNull(classReader0);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(271, classReader0.header);
      assertEquals(32, classReader0.getAccess());
      
      ClassWriter classWriter0 = new ClassWriter(classReader0, 1);
      assertNotNull(classWriter0);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(271, classReader0.header);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(32, classReader0.getAccess());
      
      ClassReader classReader1 = new ClassReader("wheel.asm.ClassReader");
      assertNotNull(classReader1);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(8070, classReader1.header);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertFalse(classReader1.equals((Object)classReader0));
      assertEquals(33, classReader1.getAccess());
      
      ClassWriter classWriter1 = new ClassWriter(classReader1, 1);
      classReader1.accept((ClassVisitor) classWriter0, 1);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("wheel.asm.Edge");
      assertNotNull(classReader0);
      assertEquals(271, classReader0.header);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(32, classReader0.getAccess());
      
      ClassWriter classWriter0 = new ClassWriter(classReader0, 1);
      assertNotNull(classWriter0);
      assertEquals(271, classReader0.header);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(32, classReader0.getAccess());
      
      ClassReader classReader1 = new ClassReader("wheel.asm.ClassReader");
      assertNotNull(classReader1);
      assertEquals(8070, classReader1.header);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertFalse(classReader1.equals((Object)classReader0));
      assertEquals(33, classReader1.getAccess());
      
      classReader1.accept((ClassVisitor) classWriter0, 16777218);
      classReader0.copyPool(classWriter0);
      classReader1.copyPool(classWriter0);
  }
}
