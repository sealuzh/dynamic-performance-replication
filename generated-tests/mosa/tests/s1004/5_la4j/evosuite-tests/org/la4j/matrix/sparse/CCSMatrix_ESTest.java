/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 06 19:26:03 GMT 2018
 */

package org.la4j.matrix.sparse;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.BufferUnderflowException;
import java.text.DecimalFormat;
import java.text.NumberFormat;
import java.util.Locale;
import java.util.NoSuchElementException;
import java.util.Random;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;
import org.la4j.Matrix;
import org.la4j.matrix.ColumnMajorSparseMatrix;
import org.la4j.matrix.MatrixFactory;
import org.la4j.matrix.functor.MatrixAccumulator;
import org.la4j.matrix.functor.MatrixFunction;
import org.la4j.matrix.functor.MatrixProcedure;
import org.la4j.matrix.sparse.CCSMatrix;
import org.la4j.operation.MatrixOperation;
import org.la4j.operation.ooplace.OoPlaceVectorByMatrixMultiplication;
import org.la4j.vector.DenseVector;
import org.la4j.vector.functor.VectorAccumulator;
import org.la4j.vector.functor.VectorFunction;
import org.la4j.vector.functor.VectorProcedure;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CCSMatrix_ESTest extends CCSMatrix_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      Matrix matrix0 = cCSMatrix0.multiplyByItsTranspose();
      assertEquals(0, matrix0.rows());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      // Undeclared exception!
      try { 
        CCSMatrix.fromMatrixMarket("");
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.StringTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      double[][] doubleArray0 = new double[9][8];
      CCSMatrix cCSMatrix0 = CCSMatrix.from2DArray(doubleArray0);
      // Undeclared exception!
      try { 
        CCSMatrix.block(cCSMatrix0, cCSMatrix0, cCSMatrix0, cCSMatrix0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '9' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      double[] doubleArray0 = new double[27];
      doubleArray0[11] = (-523.7904801023);
      doubleArray0[7] = 33.31477119662652;
      double[][] doubleArray1 = new double[1][0];
      doubleArray1[0] = doubleArray0;
      CCSMatrix cCSMatrix0 = CCSMatrix.from2DArray(doubleArray1);
      cCSMatrix0.columnMajorIterator();
      assertEquals((-523.7904801023), cCSMatrix0.min(), 0.01);
      assertEquals(0.07407407407407407, cCSMatrix0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      // Undeclared exception!
      try { 
        CCSMatrix.fromBinary(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can not decode CCSMatrix from the given byte array.
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.fromCSV("");
      // Undeclared exception!
      try { 
        cCSMatrix0.iteratorOfColumn(32);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 32
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix$5", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[1] = (double) 16;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 16;
      doubleArray0[4] = (-523.7904801023);
      double[][] doubleArray1 = new double[9][8];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      doubleArray1[5] = doubleArray0;
      doubleArray1[6] = doubleArray0;
      doubleArray1[7] = doubleArray0;
      doubleArray1[8] = doubleArray0;
      CCSMatrix cCSMatrix0 = CCSMatrix.from2DArray(doubleArray1);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(vectorAccumulator0).accumulate();
      cCSMatrix0.foldRows(vectorAccumulator0);
      double double0 = cCSMatrix0.max();
      assertEquals(27, cCSMatrix0.cardinality());
      assertEquals(16.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(36);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)8, (double)36, (-15.414561569810143), (-15.414561569810143), 0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      cCSMatrix0.updateColumn(8, vectorFunction0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      int int0 = 2569;
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 2569;
      doubleArray0[1] = (double) 2569;
      doubleArray0[2] = (-1668.46);
      CCSMatrix cCSMatrix0 = CCSMatrix.from1DArray(2569, 2569, doubleArray0);
      cCSMatrix0.nonZeroIteratorOfColumn(int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.nextInt();
      // Undeclared exception!
      try { 
        CCSMatrix.random(603, 603, 3.0, (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The density value should be between 0 and 1.0
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.fromCSV("");
      Matrix matrix0 = cCSMatrix0.rotate();
      CCSMatrix cCSMatrix1 = CCSMatrix.diagonal(9, 0.0);
      // Undeclared exception!
      try { 
        CCSMatrix.block(matrix0, matrix0, matrix0, cCSMatrix1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Sides of blocks are incompatible!
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix(2121, 2121, 2121);
      Matrix matrix0 = cCSMatrix0.transpose();
      cCSMatrix0.nonZeroIteratorOfColumn(2121);
      // Undeclared exception!
      try { 
        CCSMatrix.block(matrix0, cCSMatrix0, matrix0, cCSMatrix0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '2122' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(22);
      cCSMatrix0.infinityNorm();
      // Undeclared exception!
      try { 
        cCSMatrix0.nonZeroAt(22, (-2433));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2433
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix(4, 4, 4);
      CCSMatrix cCSMatrix1 = CCSMatrix.identity(4);
      Matrix matrix0 = cCSMatrix1.removeFirstRow();
      // Undeclared exception!
      try { 
        CCSMatrix.block(cCSMatrix0, matrix0, matrix0, cCSMatrix1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Sides of blocks are incompatible!
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(657, 657);
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.zero(657, 1904);
      CCSMatrix.block(cCSMatrix0, cCSMatrix0, cCSMatrix0, columnMajorSparseMatrix0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(2120);
      cCSMatrix0.nonZeroIteratorOfColumn(2120);
      CCSMatrix.randomSymmetric(2120, 0.0, (Random) null);
      CCSMatrix.block(cCSMatrix0, cCSMatrix0, cCSMatrix0, cCSMatrix0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.fromCSV("");
      cCSMatrix0.sum();
      double[] doubleArray0 = new double[0];
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(4);
      cCSMatrix0.toString();
      cCSMatrix0.determinant();
      cCSMatrix0.rowMajorIterator();
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.eachNonZeroInColumn(3, vectorProcedure0);
      cCSMatrix0.columnMajorIterator();
      cCSMatrix0.min();
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      int int0 = 7;
      MockRandom mockRandom0 = new MockRandom();
      int int1 = 610;
      int int2 = (-474);
      Locale locale0 = Locale.FRANCE;
      NumberFormat.getCurrencyInstance(locale0);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      CCSMatrix cCSMatrix0 = CCSMatrix.from1DArray(7, 610, doubleArray0);
      cCSMatrix0.multiply((double) int1);
      int int3 = (-1744);
      cCSMatrix0.swapColumns(int2, int3);
      int int4 = 331;
      CCSMatrix.zero(int4, int0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(37);
      int[] intArray0 = new int[4];
      intArray0[0] = 34;
      intArray0[1] = 3;
      intArray0[2] = 37;
      intArray0[3] = 37;
      cCSMatrix0.select(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      cCSMatrix0.iteratorOrNonZeroColumns();
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      int int0 = (-1001);
      MockRandom mockRandom0 = new MockRandom((-1001));
      // Undeclared exception!
      try { 
        CCSMatrix.random((-1001), (-1001), (double) (-1001), (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The density value should be between 0 and 1.0
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.fromCSV("");
      cCSMatrix0.min();
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(4019, 34);
      cCSMatrix0.copyOfShape(37, 34);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(4);
      CCSMatrix cCSMatrix1 = new CCSMatrix(4, 4, 4);
      cCSMatrix1.toString();
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)4, (double)4, (double)4, (double)4, (double)4).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cCSMatrix0.update(matrixFunction0);
      cCSMatrix0.transpose();
      cCSMatrix1.copyOfShape(4, 1);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      MockRandom mockRandom0 = new MockRandom();
      CCSMatrix cCSMatrix0 = CCSMatrix.from1DArray(0, 32, doubleArray0);
      cCSMatrix0.max();
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.fromCSV("    ");
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        cCSMatrix0.select(intArray0, intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No rows or columns selected.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.fromCSV("    ");
      CCSMatrix.block(cCSMatrix0, cCSMatrix0, cCSMatrix0, cCSMatrix0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(36);
      cCSMatrix0.toDenseMatrix();
      cCSMatrix0.setAll(36);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.updateColumn(36, vectorFunction0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      CCSMatrix.block(cCSMatrix0, cCSMatrix0, cCSMatrix0, cCSMatrix0);
      cCSMatrix0.setAll((-1502.59924));
      // Undeclared exception!
      try { 
        CCSMatrix.fromCSV("B0~e{0");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.fromCSV("");
      cCSMatrix0.toColumnMajorSparseMatrix();
      cCSMatrix0.rotate();
      CCSMatrix cCSMatrix1 = CCSMatrix.block(cCSMatrix0, cCSMatrix0, cCSMatrix0, cCSMatrix0);
      // Undeclared exception!
      try { 
        cCSMatrix1.maxInColumn(31);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 31
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[3] = (byte)5;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      MockRandom mockRandom0 = new MockRandom();
      CCSMatrix.random(3371, (int) (byte)5, (double) (byte)0, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(4);
      cCSMatrix0.copyOfRows(3);
      int[] intArray0 = new int[1];
      cCSMatrix0.toColumnVector();
      intArray0[0] = 3;
      cCSMatrix0.select(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(8);
      cCSMatrix0.sum();
      DenseVector.zero(8);
      cCSMatrix0.min();
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[2] = (double) 0;
      doubleArray0[4] = (-523.7904801023);
      double[][] doubleArray1 = new double[9][8];
      doubleArray1[0] = doubleArray0;
      CCSMatrix cCSMatrix0 = CCSMatrix.from2DArray(doubleArray1);
      cCSMatrix0.toColumnVector();
      cCSMatrix0.min();
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      double[][] doubleArray0 = new double[1][6];
      Matrix matrix0 = Matrix.from2DArray(doubleArray0);
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(4, 4);
      Matrix matrix1 = cCSMatrix0.sliceBottomRight(4, 4);
      // Undeclared exception!
      try { 
        CCSMatrix.block(matrix0, matrix0, matrix1, cCSMatrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Sides of blocks are incompatible!
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(1, 1);
      cCSMatrix0.toBinary();
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      CCSMatrix.fromCSV("  7 ");
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix(1264, 4, 4);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(Double.POSITIVE_INFINITY, (double)1264, (double)4, (double)4).when(vectorAccumulator0).accumulate();
      cCSMatrix0.foldColumns(vectorAccumulator0);
      // Undeclared exception!
      try { 
        cCSMatrix0.nonZeroAt(4, 4);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(4);
      CCSMatrix.zero(4, 4);
      Locale locale0 = Locale.TAIWAN;
      NumberFormat.getCurrencyInstance(locale0);
      cCSMatrix0.maxInColumn(2);
      cCSMatrix0.shuffle();
      cCSMatrix0.removeLastRow();
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(2077);
      CCSMatrix cCSMatrix1 = CCSMatrix.zero(1561, 2077);
      Locale locale0 = Locale.TAIWAN;
      NumberFormat.getCurrencyInstance(locale0);
      cCSMatrix1.maxInColumn(1534);
      cCSMatrix1.shuffle();
      cCSMatrix0.removeLastRow();
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)48;
      // Undeclared exception!
      try { 
        CCSMatrix.fromBinary(byteArray0);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      CCSMatrix.random(681, 1, (double) 1, (Random) mockRandom0);
      ColumnMajorSparseMatrix.diagonal(4, 4);
      DecimalFormat decimalFormat0 = new DecimalFormat();
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(36);
      Matrix matrix0 = cCSMatrix0.divide(36);
      cCSMatrix0.insert(matrix0);
      cCSMatrix0.rotate();
      MockRandom mockRandom0 = new MockRandom(36);
      int[] intArray0 = new int[7];
      intArray0[0] = 7;
      intArray0[1] = 36;
      intArray0[2] = 36;
      intArray0[3] = 36;
      intArray0[4] = 36;
      intArray0[5] = (-1);
      intArray0[6] = 36;
      int[] intArray1 = new int[0];
      cCSMatrix0.select(intArray0, intArray1);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(3);
      DenseVector.constant(1, 1);
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.eachNonZero(matrixProcedure0);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.eachInColumn(1, vectorProcedure0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(58, 58);
      MatrixOperation<CCSMatrix> matrixOperation0 = (MatrixOperation<CCSMatrix>) mock(MatrixOperation.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(matrixOperation0).apply(any(org.la4j.matrix.ColumnMajorSparseMatrix.class));
      cCSMatrix0.apply(matrixOperation0);
      cCSMatrix0.max();
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(4);
      CCSMatrix cCSMatrix1 = new CCSMatrix(4, 4, 4);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)4, (double)4, 283.561, (-1918.86641354618), (-1918.86641354618)).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cCSMatrix0.update(matrixFunction0);
      cCSMatrix0.transpose();
      // Undeclared exception!
      try { 
        cCSMatrix0.eachNonZeroInColumn(0, (VectorProcedure) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(657, 657);
      cCSMatrix0.trace();
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.eachNonZero(matrixProcedure0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(8);
      cCSMatrix0.rotate();
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(vectorAccumulator0).accumulate();
      cCSMatrix0.foldNonZeroInRows(vectorAccumulator0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(36);
      Matrix matrix0 = cCSMatrix0.divide(36);
      cCSMatrix0.insert(matrix0);
      cCSMatrix0.determinant();
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(657);
      DenseVector denseVector0 = DenseVector.zero(657);
      OoPlaceVectorByMatrixMultiplication ooPlaceVectorByMatrixMultiplication0 = new OoPlaceVectorByMatrixMultiplication();
      ooPlaceVectorByMatrixMultiplication0.apply(denseVector0, (ColumnMajorSparseMatrix) cCSMatrix0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix(4, 4, 4);
      Matrix matrix0 = cCSMatrix0.copyOfShape(1515, 1515);
      cCSMatrix0.setAll(4);
      CCSMatrix cCSMatrix1 = CCSMatrix.diagonal(4, 4);
      matrix0.equals((Matrix) cCSMatrix1, 1.0);
      CCSMatrix cCSMatrix2 = new CCSMatrix();
      cCSMatrix2.setAll(0.0);
      cCSMatrix1.nonZeroColumnMajorIterator();
      CCSMatrix.diagonal(1515, 0.0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(36);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      cCSMatrix0.updateColumn(8, vectorFunction0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(4);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      cCSMatrix0.updateColumn(3, vectorFunction0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(4);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cCSMatrix0.update(matrixFunction0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 16;
      doubleArray0[6] = (double) 16;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 16;
      doubleArray0[4] = (-523.7904801023);
      double[][] doubleArray1 = new double[9][8];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      doubleArray1[5] = doubleArray0;
      doubleArray1[6] = doubleArray0;
      doubleArray1[7] = doubleArray0;
      doubleArray1[8] = doubleArray0;
      CCSMatrix cCSMatrix0 = CCSMatrix.from2DArray(doubleArray1);
      cCSMatrix0.maxInColumn(0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(4);
      cCSMatrix0.transpose();
      // Undeclared exception!
      try { 
        cCSMatrix0.eachNonZero((MatrixProcedure) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(4);
      MatrixAccumulator matrixAccumulator0 = mock(MatrixAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(matrixAccumulator0).accumulate();
      cCSMatrix0.foldNonZero(matrixAccumulator0);
      int[] intArray0 = new int[6];
      cCSMatrix0.select(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      double[][] doubleArray0 = new double[9][8];
      CCSMatrix cCSMatrix0 = CCSMatrix.from2DArray(doubleArray0);
      CCSMatrix cCSMatrix1 = new CCSMatrix();
      cCSMatrix0.insert((Matrix) cCSMatrix1);
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      CCSMatrix.randomSymmetric(543, 1.0, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(3, 3, 3);
      DenseVector denseVector0 = DenseVector.zero(3);
      OoPlaceVectorByMatrixMultiplication ooPlaceVectorByMatrixMultiplication0 = new OoPlaceVectorByMatrixMultiplication();
      ooPlaceVectorByMatrixMultiplication0.apply(denseVector0, (ColumnMajorSparseMatrix) cCSMatrix0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(4);
      Matrix matrix0 = cCSMatrix0.divide(Double.NEGATIVE_INFINITY);
      cCSMatrix0.insert(matrix0);
      Matrix matrix1 = cCSMatrix0.rotate();
      // Undeclared exception!
      try { 
        CCSMatrix.block(matrix0, matrix1, matrix0, matrix1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '5' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(657, 657);
      cCSMatrix0.minInColumn(16);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(3);
      cCSMatrix0.minInColumn(1);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix(54, 54, 54);
      cCSMatrix0.iteratorOrNonZeroColumns();
      CCSMatrix.identity(54);
      CCSMatrix cCSMatrix1 = CCSMatrix.diagonal(1560, 0.0);
      cCSMatrix1.determinant();
      MatrixFactory<Matrix> matrixFactory0 = (MatrixFactory<Matrix>) mock(MatrixFactory.class, new ViolatedAssumptionAnswer());
      cCSMatrix1.to(matrixFactory0);
  }
}
