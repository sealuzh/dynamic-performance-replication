/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 18 13:46:18 GMT 2018
 */

package org.apache.commons.imaging.common;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.imaging.common.RationalNumber;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class RationalNumber_ESTest extends RationalNumber_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf((-2.147483647E9));
      RationalNumber rationalNumber1 = rationalNumber0.negate();
      RationalNumber rationalNumber2 = rationalNumber1.negate();
      long long0 = rationalNumber1.longValue();
      assertEquals(2147483647L, long0);
      
      String string0 = rationalNumber2.toDisplayString();
      assertEquals(1, rationalNumber2.divisor);
      assertEquals("-2147483647", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf(2147483662L);
      assertEquals(2.147483647E9, rationalNumber0.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      RationalNumber rationalNumber0 = new RationalNumber(448, 448);
      float float0 = rationalNumber0.floatValue();
      assertEquals(1.0F, float0, 0.01F);
      
      String string0 = rationalNumber0.toDisplayString();
      assertEquals("1", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf(0.0);
      assertEquals(0.0F, rationalNumber0.floatValue(), 0.01F);
      assertEquals(1, rationalNumber0.divisor);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf(0.07999999999992724);
      long long0 = rationalNumber0.longValue();
      assertEquals(25, rationalNumber0.divisor);
      assertEquals(0L, long0);
      assertEquals(2, rationalNumber0.numerator);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf(1445.5);
      assertEquals(2891, rationalNumber0.numerator);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      RationalNumber rationalNumber0 = new RationalNumber((-381), (-381));
      RationalNumber rationalNumber1 = rationalNumber0.negate();
      rationalNumber1.negate();
      RationalNumber.factoryMethod(609L, 1855L);
      RationalNumber.factoryMethod(44L, (-381));
      RationalNumber.factoryMethod((-381), (-2676L));
      double double0 = 635.48458823;
      rationalNumber0.toDisplayString();
      RationalNumber.valueOf(635.48458823);
      RationalNumber rationalNumber2 = RationalNumber.valueOf(2871.349430988641);
      rationalNumber0.toDisplayString();
      rationalNumber0.intValue();
      rationalNumber2.longValue();
      rationalNumber2.negate();
      RationalNumber rationalNumber3 = RationalNumber.factoryMethod((-2147483648L), 0L);
      // Undeclared exception!
      try { 
        rationalNumber3.toDisplayString();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.apache.commons.imaging.common.RationalNumber", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf(1469.0685);
      String string0 = rationalNumber0.toDisplayString();
      assertEquals("1,469.069", string0);
      
      RationalNumber rationalNumber1 = RationalNumber.factoryMethod(2000, 2000);
      String string1 = rationalNumber0.toString();
      assertEquals("2938137/2000 (1,469.069)", string1);
      
      double double0 = rationalNumber1.doubleValue();
      assertEquals(1.0, double0, 0.01);
      
      RationalNumber rationalNumber2 = RationalNumber.factoryMethod(1573L, 0L);
      assertEquals(Double.POSITIVE_INFINITY, rationalNumber2.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      RationalNumber rationalNumber0 = new RationalNumber((-23), Integer.MAX_VALUE);
      rationalNumber0.floatValue();
      RationalNumber rationalNumber1 = rationalNumber0.negate();
      rationalNumber1.toDisplayString();
      RationalNumber rationalNumber2 = RationalNumber.valueOf(0.0);
      String string0 = rationalNumber1.toString();
      assertEquals("23/2147483647 (0)", string0);
      
      rationalNumber0.floatValue();
      rationalNumber0.floatValue();
      rationalNumber1.negate();
      RationalNumber rationalNumber3 = RationalNumber.valueOf(0.0);
      RationalNumber rationalNumber4 = rationalNumber3.negate();
      String string1 = rationalNumber3.toString();
      rationalNumber0.floatValue();
      RationalNumber.factoryMethod(Integer.MAX_VALUE, (-1L));
      rationalNumber0.negate();
      RationalNumber.factoryMethod((-2623L), (-23));
      rationalNumber1.negate();
      rationalNumber1.doubleValue();
      RationalNumber rationalNumber5 = rationalNumber3.negate();
      RationalNumber rationalNumber6 = RationalNumber.valueOf((-1702.18945373));
      assertEquals((-1702.1896F), rationalNumber6.floatValue(), 0.01F);
      
      rationalNumber2.doubleValue();
      RationalNumber.valueOf(0.0);
      rationalNumber5.floatValue();
      String string2 = rationalNumber1.toDisplayString();
      assertTrue(string2.equals((Object)string1));
      
      rationalNumber3.negate();
      RationalNumber rationalNumber7 = rationalNumber4.negate();
      assertEquals(0.0, rationalNumber7.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      RationalNumber rationalNumber0 = new RationalNumber(1105, (-525));
      RationalNumber rationalNumber1 = rationalNumber0.negate();
      RationalNumber rationalNumber2 = rationalNumber1.negate();
      rationalNumber2.toDisplayString();
      rationalNumber0.intValue();
      RationalNumber rationalNumber3 = RationalNumber.factoryMethod((-525), (-525));
      rationalNumber0.toDisplayString();
      rationalNumber1.floatValue();
      rationalNumber0.doubleValue();
      RationalNumber rationalNumber4 = RationalNumber.factoryMethod(1, 1105);
      String string0 = rationalNumber1.toDisplayString();
      assertEquals("2.105", string0);
      
      RationalNumber rationalNumber5 = rationalNumber4.negate();
      assertEquals((-9.049774E-4F), rationalNumber5.floatValue(), 0.01F);
      
      String string1 = rationalNumber2.toDisplayString();
      assertEquals("-2.105", string1);
      
      rationalNumber2.floatValue();
      rationalNumber4.floatValue();
      RationalNumber rationalNumber6 = rationalNumber0.negate();
      rationalNumber4.doubleValue();
      long long0 = rationalNumber6.longValue();
      assertEquals(2L, long0);
      
      RationalNumber rationalNumber7 = RationalNumber.valueOf(9.049773755656109E-4);
      assertEquals(9.049773755656109E-4, rationalNumber7.doubleValue(), 0.01);
      
      int int0 = rationalNumber0.intValue();
      assertEquals((-2), int0);
      
      String string2 = rationalNumber4.toDisplayString();
      assertEquals(1105, rationalNumber4.divisor);
      assertEquals("0.001", string2);
      
      int int1 = rationalNumber3.intValue();
      assertEquals(1, int1);
      assertEquals(1L, rationalNumber3.longValue());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf(1.305542974006091E-7);
      float float0 = rationalNumber0.floatValue();
      assertEquals(1.305543022342541E-7, rationalNumber0.doubleValue(), 0.01);
      assertEquals(1.305543E-7F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf(1.0);
      RationalNumber.valueOf(1.0);
      RationalNumber rationalNumber1 = rationalNumber0.negate();
      RationalNumber rationalNumber2 = RationalNumber.valueOf(732.4566477);
      rationalNumber2.negate();
      RationalNumber rationalNumber3 = RationalNumber.factoryMethod(1, 1);
      rationalNumber3.toString();
      RationalNumber rationalNumber4 = rationalNumber0.negate();
      RationalNumber.factoryMethod(0L, 11117227);
      RationalNumber.valueOf(1);
      rationalNumber0.longValue();
      rationalNumber0.longValue();
      rationalNumber0.doubleValue();
      rationalNumber2.negate();
      rationalNumber2.intValue();
      assertEquals(732L, rationalNumber2.longValue());
      assertEquals(11117227, rationalNumber2.numerator);
      
      rationalNumber0.longValue();
      rationalNumber1.longValue();
      String string0 = rationalNumber4.toString();
      assertEquals("-1", string0);
      assertEquals((-1), rationalNumber4.intValue());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      // Undeclared exception!
      try { 
        RationalNumber.factoryMethod((-2147483670L), 0L);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Invalid value, numerator: -2147483670, divisor: 0
         //
         verifyException("org.apache.commons.imaging.common.RationalNumber", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      // Undeclared exception!
      try { 
        RationalNumber.factoryMethod(2147483662L, 0L);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Invalid value, numerator: 2147483662, divisor: 0
         //
         verifyException("org.apache.commons.imaging.common.RationalNumber", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.factoryMethod((-2147483674L), (-2147483674L));
      float float0 = rationalNumber0.floatValue();
      assertEquals(1.0F, float0, 0.01F);
      
      double double0 = rationalNumber0.doubleValue();
      assertEquals(1.0, double0, 0.01);
      assertEquals(1, rationalNumber0.divisor);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf(6.7186233536631335E-6);
      rationalNumber0.longValue();
      rationalNumber0.floatValue();
      RationalNumber rationalNumber1 = new RationalNumber(1, (-655));
      rationalNumber1.toString();
      RationalNumber rationalNumber2 = RationalNumber.factoryMethod(148840, 2147483662L);
      RationalNumber rationalNumber3 = rationalNumber1.negate();
      RationalNumber rationalNumber4 = RationalNumber.valueOf((-1));
      assertEquals((-1L), rationalNumber4.longValue());
      assertEquals(1, rationalNumber4.divisor);
      
      String string0 = rationalNumber1.toString();
      assertEquals("1/-655 (-0.002)", string0);
      
      RationalNumber rationalNumber5 = RationalNumber.valueOf(8.357446586160222E-5);
      assertEquals(8.357709987463435E-5, rationalNumber5.doubleValue(), 0.01);
      
      float float0 = rationalNumber2.floatValue();
      assertEquals(1073741831, rationalNumber2.divisor);
      assertEquals(6.9309026E-5F, float0, 0.01F);
      
      String string1 = rationalNumber3.toString();
      assertEquals("-1/-655 (0.002)", string1);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.factoryMethod(2147483662L, 2147483662L);
      rationalNumber0.floatValue();
      double double0 = rationalNumber0.doubleValue();
      assertEquals(1.0, double0, 0.01);
      
      RationalNumber rationalNumber1 = RationalNumber.factoryMethod(1, 2147483662L);
      RationalNumber rationalNumber2 = new RationalNumber(17, (-2147483634));
      float float0 = rationalNumber1.floatValue();
      assertEquals((-4.656613E-10F), float0, 0.01F);
      assertEquals((-4.656612903435053E-10), rationalNumber1.doubleValue(), 0.01);
      assertEquals((-2147483634), rationalNumber1.divisor);
      
      RationalNumber rationalNumber3 = RationalNumber.valueOf((-1.0));
      RationalNumber rationalNumber4 = rationalNumber3.negate();
      float float1 = rationalNumber4.floatValue();
      assertEquals(1, rationalNumber4.numerator);
      assertEquals(1.0F, float1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.factoryMethod(2147483662L, 2147483662L);
      float float0 = rationalNumber0.floatValue();
      assertEquals(1.0F, float0, 0.01F);
      
      rationalNumber0.doubleValue();
      RationalNumber rationalNumber1 = RationalNumber.factoryMethod(2147483662L, 1);
      RationalNumber rationalNumber2 = rationalNumber1.negate();
      assertEquals(2.147483634E9, rationalNumber2.doubleValue(), 0.01);
      
      RationalNumber rationalNumber3 = RationalNumber.valueOf(1);
      String string0 = rationalNumber3.toString();
      assertEquals("1", string0);
      
      RationalNumber rationalNumber4 = new RationalNumber(1, 1);
      RationalNumber rationalNumber5 = rationalNumber3.negate();
      assertEquals((-1.0F), rationalNumber5.floatValue(), 0.01F);
  }
}
