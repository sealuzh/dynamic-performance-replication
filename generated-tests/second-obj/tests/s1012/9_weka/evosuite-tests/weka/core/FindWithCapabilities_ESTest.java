/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 01:06:31 GMT 2018
 */

package weka.core;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.Locale;
import java.util.Properties;
import java.util.Vector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import weka.core.Attribute;
import weka.core.BinarySparseInstance;
import weka.core.Capabilities;
import weka.core.CapabilitiesHandler;
import weka.core.ClassCache;
import weka.core.ClassDiscovery;
import weka.core.FindWithCapabilities;
import weka.core.GlobalInfoJavadoc;
import weka.core.Instances;
import weka.core.Range;
import weka.core.SingleIndex;
import weka.core.TechnicalInformationHandlerJavadoc;
import weka.core.TestInstances;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class FindWithCapabilities_ESTest extends FindWithCapabilities_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NO_CLASS;
      findWithCapabilities0.enable(capabilities_Capability0);
      findWithCapabilities0.getRevision();
      findWithCapabilities0.find();
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.NUMERIC_ATTRIBUTES;
      findWithCapabilities0.enable(capabilities_Capability1);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "8034";
      findWithCapabilities0.getOptions();
      Capabilities capabilities0 = new Capabilities(findWithCapabilities0);
      findWithCapabilities0.setCapabilities(capabilities0);
      findWithCapabilities0.listOptions();
      String string0 = GlobalInfoJavadoc.GLOBALINFO_METHOD;
      findWithCapabilities0.setClassIndex("\n<p/>\n");
      capabilities0.getAttributeCapabilities();
      TestInstances testInstances0 = new TestInstances();
      CapabilitiesHandler capabilitiesHandler0 = testInstances0.m_Handler;
      // Undeclared exception!
      try { 
        findWithCapabilities0.setHandler((CapabilitiesHandler) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.STRING_ATTRIBUTES;
      findWithCapabilities0.enableNot(capabilities_Capability0);
      findWithCapabilities0.listOptions();
      findWithCapabilities0.getOptions();
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.STRING_CLASS;
      boolean boolean0 = findWithCapabilities0.handles(capabilities_Capability1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.getMatches();
      findWithCapabilities0.find();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.EMPTY_NOMINAL_ATTRIBUTES;
      findWithCapabilities0.handles(capabilities_Capability0);
      findWithCapabilities0.disableNot(capabilities_Capability0);
      assertEquals("", findWithCapabilities0.getFilename());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.getRevision();
      findWithCapabilities0.find();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NUMERIC_ATTRIBUTES;
      findWithCapabilities0.enable(capabilities_Capability0);
      findWithCapabilities0.getFilename();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "8034";
      stringArray0[1] = "";
      stringArray0[2] = "8034";
      stringArray0[4] = "8034";
      stringArray0[5] = "";
      stringArray0[6] = "";
      stringArray0[8] = "";
      findWithCapabilities0.setClassIndex("y%U$G(?Pcbix6Y#UH*");
      findWithCapabilities0.getRevision();
      findWithCapabilities0.enableNot(capabilities_Capability0);
      findWithCapabilities0.getOptions();
      findWithCapabilities0.listOptions();
      Capabilities capabilities0 = findWithCapabilities0.getCapabilities();
      findWithCapabilities0.setNotCapabilities(capabilities0);
      assertEquals("", findWithCapabilities0.getFilename());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Random.setNextRandom((-2154));
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.UNARY_ATTRIBUTES;
      findWithCapabilities0.enable(capabilities_Capability0);
      findWithCapabilities0.find();
      findWithCapabilities0.m_Filename = "w^azLBXt[a*";
      findWithCapabilities0.getOptions();
      findWithCapabilities0.getFilename();
      // Undeclared exception!
      try { 
        findWithCapabilities0.getClassIndex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No index set
         //
         verifyException("weka.core.SingleIndex", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/9_weka/Capabilities.props");
      FileSystemHandling.setPermissions(evoSuiteFile0, true, true, true);
      findWithCapabilities0.setClassIndex("! ");
      findWithCapabilities0.m_Superclass = "! ";
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "4S>x2LtN'O");
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NUMERIC_CLASS;
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.MISSING_CLASS_VALUES;
      findWithCapabilities0.enableNot(capabilities_Capability1);
      findWithCapabilities0.listOptions();
      findWithCapabilities0.getOptions();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities0.handles(capabilities_Capability0);
      Capabilities capabilities0 = findWithCapabilities1.m_NotCapabilities;
      Capabilities capabilities1 = findWithCapabilities0.getNotCapabilities();
      findWithCapabilities1.setCapabilities(capabilities1);
      assertEquals("", findWithCapabilities0.getFilename());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.STRING_ATTRIBUTES;
      findWithCapabilities0.enableNot(capabilities_Capability0);
      findWithCapabilities0.listOptions();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      Capabilities capabilities0 = findWithCapabilities1.getCapabilities();
      findWithCapabilities0.m_Capabilities = capabilities0;
      String[] stringArray0 = findWithCapabilities0.getOptions();
      try { 
        findWithCapabilities0.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities0.setHandler(findWithCapabilities1);
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NO_CLASS;
      findWithCapabilities0.setFilename("weka/core/Capabilities.props");
      Vector<String> vector0 = findWithCapabilities0.getMatches();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/users/apanichella/wekafiles/props");
      FileSystemHandling.setPermissions(evoSuiteFile0, true, true, false);
      findWithCapabilities1.m_Misses = vector0;
      FileSystemHandling.createFolder(evoSuiteFile0);
      findWithCapabilities1.setClassIndex("1 ");
      findWithCapabilities0.enableNot(capabilities_Capability0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Capabilities capabilities0 = findWithCapabilities0.m_NotCapabilities;
      capabilities0.getRevision();
      findWithCapabilities1.setNotCapabilities(capabilities0);
      findWithCapabilities1.m_Superclass = "1 ";
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "4S>x2LtN'O");
      findWithCapabilities0.listOptions();
      String[] stringArray0 = findWithCapabilities1.getOptions();
      vector0.add("ETuI?");
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.NO_CLASS;
      findWithCapabilities1.disableNot(capabilities_Capability1);
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      FindWithCapabilities.main(stringArray0);
      System.setCurrentTimeMillis((-1152L));
      findWithCapabilities2.getMisses();
      findWithCapabilities1.setFilename("1 ");
      Capabilities.Capability capabilities_Capability2 = Capabilities.Capability.RELATIONAL_CLASS;
      findWithCapabilities2.isEnabled(capabilities_Capability2);
      findWithCapabilities2.setCapabilities(capabilities0);
      assertEquals("weka/core/Capabilities.props", findWithCapabilities0.getFilename());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities capabilities0 = findWithCapabilities0.getNotCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.BINARY_ATTRIBUTES;
      findWithCapabilities0.enableNot(capabilities_Capability0);
      findWithCapabilities0.setNotCapabilities(capabilities0);
      findWithCapabilities0.getOptions();
      Vector<String> vector0 = findWithCapabilities0.find();
      assertEquals(10, vector0.capacity());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.setClassIndex("1 ");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      findWithCapabilities0.m_Superclass = "1 ";
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NOMINAL_ATTRIBUTES;
      findWithCapabilities0.enableNot(capabilities_Capability0);
      findWithCapabilities0.getOptions();
      findWithCapabilities0.listOptions();
      String[] stringArray0 = findWithCapabilities0.getOptions();
      FindWithCapabilities.main(stringArray0);
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.MISSING_CLASS_VALUES;
      findWithCapabilities0.disableNot(capabilities_Capability1);
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      ClassCache classCache0 = null;
      try {
        classCache0 = new ClassCache();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.evosuite.instrumentation.InstrumentingClassLoader cannot be cast to java.net.URLClassLoader
         //
         verifyException("weka.core.ClassCache", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NOMINAL_CLASS;
      findWithCapabilities0.enable(capabilities_Capability0);
      findWithCapabilities0.getRevision();
      findWithCapabilities0.find();
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.NUMERIC_ATTRIBUTES;
      findWithCapabilities0.enable(capabilities_Capability1);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "8034";
      findWithCapabilities0.getOptions();
      Capabilities capabilities0 = new Capabilities(findWithCapabilities0);
      findWithCapabilities0.setCapabilities(capabilities0);
      String string0 = GlobalInfoJavadoc.GLOBALINFO_METHOD;
      findWithCapabilities0.setClassIndex("\n<p/>\n");
      capabilities0.getAttributeCapabilities();
      TestInstances testInstances0 = new TestInstances();
      CapabilitiesHandler capabilitiesHandler0 = testInstances0.m_Handler;
      // Undeclared exception!
      try { 
        findWithCapabilities0.setHandler((CapabilitiesHandler) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.find();
      String string0 = findWithCapabilities0.m_Filename;
      findWithCapabilities0.listOptions();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.DATE_CLASS;
      findWithCapabilities0.enableNot(capabilities_Capability0);
      findWithCapabilities0.getOptions();
      System.setCurrentTimeMillis((-1670L));
      // Undeclared exception!
      try { 
        findWithCapabilities0.getClassIndex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No index set
         //
         verifyException("weka.core.SingleIndex", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.MISSING_VALUES;
      findWithCapabilities0.setFilename("weka/core/Capabilities.props");
      String[] stringArray0 = TestInstances.DEFAULT_WORDS;
      Vector<String> vector0 = findWithCapabilities0.getMatches();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/9_weka/Capabilities.props");
      findWithCapabilities1.m_Misses = vector0;
      FileSystemHandling.createFolder(evoSuiteFile0);
      findWithCapabilities1.setClassIndex("1 ");
      findWithCapabilities0.enableNot(capabilities_Capability0);
      FindWithCapabilities.main(stringArray0);
      findWithCapabilities1.m_Superclass = "1 ";
      findWithCapabilities0.getOptions();
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "4S>x2LtN'O");
      try { 
        findWithCapabilities1.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      SingleIndex singleIndex0 = findWithCapabilities0.m_ClassIndex;
      findWithCapabilities0.m_ClassIndex = singleIndex0;
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.STRING_CLASS;
      findWithCapabilities0.enable(capabilities_Capability0);
      String[] stringArray0 = new String[2];
      Capabilities capabilities0 = findWithCapabilities0.getCapabilities();
      findWithCapabilities0.m_Capabilities = capabilities0;
      findWithCapabilities0.getOptions();
      SingleIndex.indexToString(2087);
      stringArray0[0] = "J-%ayFEvR)";
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      String string0 = "';guJp`Q{s#UQkL(.6&";
      // Undeclared exception!
      try { 
        singleIndex0.setValue();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No index set
         //
         verifyException("weka.core.SingleIndex", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities capabilities0 = findWithCapabilities0.getNotCapabilities();
      findWithCapabilities0.m_Capabilities = capabilities0;
      findWithCapabilities0.setFilename("");
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NUMERIC_CLASS;
      findWithCapabilities0.enableNot(capabilities_Capability0);
      findWithCapabilities0.getOptions();
      findWithCapabilities0.setCapabilities(capabilities0);
      Enumeration enumeration0 = findWithCapabilities0.listOptions();
      findWithCapabilities0.getFilename();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/users/apanichella/wekafiles/props");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      findWithCapabilities0.getMatches();
      findWithCapabilities0.find();
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "-}l;9X]Mz7yCxZG6SW5");
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.BINARY_ATTRIBUTES;
      findWithCapabilities0.enable(capabilities_Capability1);
      findWithCapabilities0.disable(capabilities_Capability1);
      findWithCapabilities0.getNotCapabilities();
      findWithCapabilities0.handles(capabilities_Capability1);
      Enumeration enumeration1 = findWithCapabilities0.listOptions();
      assertFalse(enumeration1.equals((Object)enumeration0));
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SingleIndex singleIndex0 = new SingleIndex();
      String string0 = File.pathSeparator;
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.setClassIndex("xD");
      String string1 = TechnicalInformationHandlerJavadoc.BIBTEX_ENDTAG;
      findWithCapabilities0.find();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/users/apanichella/wekafiles/props/Capabilities.props");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "pKz:&X2v2(y+-3");
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NUMERIC_CLASS;
      findWithCapabilities0.enableNot(capabilities_Capability0);
      findWithCapabilities0.listOptions();
      String[] stringArray0 = findWithCapabilities0.getOptions();
      Capabilities capabilities0 = new Capabilities(findWithCapabilities0);
      Capabilities capabilities1 = capabilities0.getOtherCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities1);
      Instances instances0 = testInstances0.generate("<!-- technical-bibtex-end -->");
      instances0.stringWithoutHeader();
      System.setCurrentTimeMillis((-2530L));
      capabilities1.enableAllClasses();
      try { 
        Capabilities.main(stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // No file provided with option '-file'!
         //
         verifyException("weka.core.Capabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.getNotCapabilities();
      findWithCapabilities0.setFilename("k");
      findWithCapabilities0.getOptions();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "weka/core/Capabilities.props";
      stringArray0[1] = "k";
      stringArray0[2] = "weka/core/Capabilities.props";
      stringArray0[3] = "-date-class";
      stringArray0[4] = "weka/core/Capabilities.props";
      stringArray0[5] = "k";
      FindWithCapabilities.main(stringArray0);
      findWithCapabilities0.setClassIndex("1_pe|ig2CUeqq`)a06");
      findWithCapabilities0.getRevision();
      Vector<String> vector0 = findWithCapabilities0.find();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/users/apanichella/wekafiles/props/Capabilities.props");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "weka/core/Capabilities.props");
      vector0.add("-date-class");
      String[] stringArray1 = new String[6];
      stringArray1[0] = "_o-U9!%dQpU]";
      stringArray1[1] = "weka/core/Capabilities.props";
      stringArray1[2] = "8034";
      stringArray1[3] = "1_pe|ig2CUeqq`)a06";
      stringArray1[4] = "-date-class";
      stringArray1[5] = "weka/core/Capabilities.props";
      FindWithCapabilities.main(stringArray1);
      findWithCapabilities0.getNotCapabilities();
      // Undeclared exception!
      try { 
        findWithCapabilities0.getClassIndex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No upper limit has been specified for index
         //
         verifyException("weka.core.SingleIndex", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.find();
      findWithCapabilities0.getMatches();
      findWithCapabilities0.setClassIndex("`oy4fT4lMHTY1B");
      findWithCapabilities0.getRevision();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NUMERIC_CLASS;
      findWithCapabilities0.enableNot(capabilities_Capability0);
      String[] stringArray0 = findWithCapabilities0.getOptions();
      findWithCapabilities0.getOptions();
      Random.setNextRandom((-1844543035));
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      findWithCapabilities1.find();
      findWithCapabilities0.getCapabilities();
      FindWithCapabilities.main(stringArray0);
      // Undeclared exception!
      try { 
        findWithCapabilities2.getClassIndex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No index set
         //
         verifyException("weka.core.SingleIndex", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "-word-separators <chars>";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ",oTvkzv\u0006;XU(");
      stringArray0[1] = "-string-class";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "-string-class");
      stringArray0[2] = "7.O'=km>\"9";
      stringArray0[3] = "Ruvd{/dH";
      stringArray0[4] = "d+C:a";
      FindWithCapabilities.main(stringArray0);
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.getHandler();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NOMINAL_ATTRIBUTES;
      findWithCapabilities0.enable(capabilities_Capability0);
      // Undeclared exception!
      try { 
        findWithCapabilities0.setHandler((CapabilitiesHandler) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.getNotCapabilities();
      findWithCapabilities0.setFilename("");
      findWithCapabilities0.getFilename();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      findWithCapabilities2.setClassIndex("-1");
      // Undeclared exception!
      try { 
        findWithCapabilities0.getClassIndex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No index set
         //
         verifyException("weka.core.SingleIndex", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities capabilities0 = findWithCapabilities0.getNotCapabilities();
      findWithCapabilities0.m_Capabilities = capabilities0;
      capabilities0.m_MinimumNumberInstances = (-4384);
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.STRING_ATTRIBUTES;
      findWithCapabilities0.enableNot(capabilities_Capability0);
      findWithCapabilities0.listOptions();
      String[] stringArray0 = findWithCapabilities0.getOptions();
      FindWithCapabilities.main(stringArray0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.MISSING_VALUES;
      findWithCapabilities0.enable(capabilities_Capability0);
      findWithCapabilities0.listOptions();
      findWithCapabilities0.setFilename("weka/core/Capabilities.props");
      String[] stringArray0 = findWithCapabilities0.getOptions();
      findWithCapabilities0.m_Capabilities.getAttributeCapabilities();
      findWithCapabilities0.getRevision();
      FindWithCapabilities.main(stringArray0);
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      // Undeclared exception!
      try { 
        findWithCapabilities1.getClassIndex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No index set
         //
         verifyException("weka.core.SingleIndex", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities0.setHandler(findWithCapabilities1);
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.RELATIONAL_ATTRIBUTES;
      findWithCapabilities0.enable(capabilities_Capability0);
      findWithCapabilities0.listOptions();
      findWithCapabilities0.setFilename("weka/core/Capabilities.props");
      findWithCapabilities0.getOptions();
      Capabilities capabilities0 = findWithCapabilities0.getNotCapabilities();
      Capabilities capabilities1 = capabilities0.getAttributeCapabilities();
      capabilities1.getClassCapabilities();
      findWithCapabilities1.getRevision();
      // Undeclared exception!
      try { 
        findWithCapabilities0.getClassIndex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No index set
         //
         verifyException("weka.core.SingleIndex", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities0.setHandler(findWithCapabilities1);
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.MISSING_VALUES;
      findWithCapabilities0.enable(capabilities_Capability0);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "Q\u0006u#l;Me";
      stringArray0[1] = " less than lower bound (";
      findWithCapabilities0.listOptions();
      stringArray0[2] = "K`kP";
      FindWithCapabilities.main(stringArray0);
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      findWithCapabilities0.setClassIndex("-1");
      findWithCapabilities0.getRevision();
      findWithCapabilities0.enableNot(capabilities_Capability0);
      findWithCapabilities1.getOptions();
      findWithCapabilities0.listOptions();
      String[] stringArray1 = findWithCapabilities1.getOptions();
      findWithCapabilities2.getCapabilities();
      FindWithCapabilities.main(stringArray0);
      findWithCapabilities0.getClassIndex();
      try { 
        Capabilities.main(stringArray1);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // No file provided with option '-file'!
         //
         verifyException("weka.core.Capabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/9_weka/Capabilities.props");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "HipeW#/\"tj2v!i]1ES");
      findWithCapabilities0.setHandler(findWithCapabilities1);
      findWithCapabilities0.setFilename("weka/core/Capabilities.props");
      String[] stringArray0 = Locale.getISOCountries();
      findWithCapabilities0.getMatches();
      FileSystemHandling.createFolder(evoSuiteFile0);
      findWithCapabilities1.setFilename("HipeW#/\"tj2v!i]1ES");
      findWithCapabilities1.setClassIndex("}1:X:I?oh<_Mj=m5:Y^");
      Capabilities capabilities0 = findWithCapabilities1.m_NotCapabilities;
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NOMINAL_CLASS;
      findWithCapabilities1.enableNot(capabilities_Capability0);
      findWithCapabilities0.getOptions();
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "1 ");
      String[] stringArray1 = findWithCapabilities0.getOptions();
      FindWithCapabilities.main(stringArray1);
      findWithCapabilities1.getHandler();
      Capabilities capabilities1 = new Capabilities((CapabilitiesHandler) null);
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities3 = new FindWithCapabilities();
      findWithCapabilities3.find();
      findWithCapabilities3.enableNot(capabilities_Capability0);
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.NUMERIC_ATTRIBUTES;
      findWithCapabilities1.enableNot(capabilities_Capability1);
      try { 
        Capabilities.main(stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // No file provided with option '-file'!
         //
         verifyException("weka.core.Capabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.MISSING_VALUES;
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.ONLY_MULTIINSTANCE;
      findWithCapabilities0.enable(capabilities_Capability1);
      findWithCapabilities0.listOptions();
      findWithCapabilities0.getOptions();
      try { 
        Capabilities.forInstances((Instances) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Capabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      SingleIndex singleIndex0 = new SingleIndex();
      findWithCapabilities1.m_ClassIndex = singleIndex0;
      findWithCapabilities0.setHandler(findWithCapabilities1);
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NO_CLASS;
      findWithCapabilities0.enable(capabilities_Capability0);
      findWithCapabilities0.listOptions();
      findWithCapabilities0.setFilename("weka/core/Capabilities.props");
      String[] stringArray0 = findWithCapabilities0.getOptions();
      try { 
        findWithCapabilities0.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "-c");
      findWithCapabilities0.find();
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Class");
      findWithCapabilities0.listOptions();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "-c";
      stringArray0[1] = "+SpE[#:q=;/Y";
      stringArray0[2] = "Class";
      try { 
        findWithCapabilities1.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NUMERIC_ATTRIBUTES;
      findWithCapabilities1.enableNot(capabilities_Capability0);
      Random.setNextRandom((-2557));
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.RELATIONAL_CLASS;
      findWithCapabilities1.enableNot(capabilities_Capability1);
      findWithCapabilities1.listOptions();
      findWithCapabilities1.getOptions();
      ClassCache classCache0 = null;
      try {
        classCache0 = new ClassCache();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.evosuite.instrumentation.InstrumentingClassLoader cannot be cast to java.net.URLClassLoader
         //
         verifyException("weka.core.ClassCache", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.MISSING_VALUES;
      findWithCapabilities0.disableNot(capabilities_Capability0);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "-not-relational-atts";
      Vector<String> vector0 = findWithCapabilities0.getMatches();
      findWithCapabilities0.m_Packages = vector0;
      stringArray0[1] = "-not-relational-atts";
      stringArray0[2] = "Nwp4{[wRj$$L\"ZlTcp";
      findWithCapabilities0.getMatches();
      findWithCapabilities0.setClassIndex("! ");
      findWithCapabilities0.getRevision();
      findWithCapabilities0.enableNot(capabilities_Capability0);
      String[] stringArray1 = findWithCapabilities0.getOptions();
      findWithCapabilities0.getOptions();
      findWithCapabilities0.getCapabilities();
      FindWithCapabilities.main(stringArray1);
      // Undeclared exception!
      try { 
        findWithCapabilities0.getClassIndex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No upper limit has been specified for index
         //
         verifyException("weka.core.SingleIndex", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/9_weka/Capabilities.props");
      FileSystemHandling.setPermissions(evoSuiteFile0, true, true, true);
      FileSystemHandling.createFolder(evoSuiteFile0);
      findWithCapabilities0.setClassIndex("1 ");
      findWithCapabilities0.m_Superclass = "1 ";
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "4S>x2LtN'O");
      String[] stringArray0 = findWithCapabilities0.getOptions();
      FindWithCapabilities.main(stringArray0);
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NO_CLASS;
      findWithCapabilities0.disableNot(capabilities_Capability0);
      Capabilities capabilities0 = new Capabilities(findWithCapabilities0);
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      testInstances0.getData();
      try { 
        Capabilities.forInstances((Instances) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Capabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "\tMust handle numeric attributes.";
      stringArray0[1] = "v~,$$7L9V";
      stringArray0[2] = "-not-string-class";
      stringArray0[3] = "- allowed: ";
      stringArray0[4] = "-not-string-class";
      stringArray0[5] = "S%HTa/iUU{Gr'm=Hf/";
      stringArray0[6] = "4";
      stringArray0[7] = ")!gtY";
      stringArray0[8] = "|w;!V0NIKyYxu";
      try { 
        findWithCapabilities0.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NUMERIC_ATTRIBUTES;
      findWithCapabilities1.enableNot(capabilities_Capability0);
      Random.setNextRandom((-2557));
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.STRING_CLASS;
      findWithCapabilities1.enableNot(capabilities_Capability1);
      findWithCapabilities1.listOptions();
      findWithCapabilities1.getOptions();
      ClassCache classCache0 = null;
      try {
        classCache0 = new ClassCache();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.evosuite.instrumentation.InstrumentingClassLoader cannot be cast to java.net.URLClassLoader
         //
         verifyException("weka.core.ClassCache", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.MISSING_CLASS_VALUES;
      findWithCapabilities1.enable(capabilities_Capability0);
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      String[] stringArray0 = findWithCapabilities2.getOptions();
      findWithCapabilities1.setClassIndex("%");
      findWithCapabilities2.getRevision();
      String[] stringArray1 = findWithCapabilities1.getOptions();
      FindWithCapabilities findWithCapabilities3 = new FindWithCapabilities();
      findWithCapabilities3.listOptions();
      FindWithCapabilities findWithCapabilities4 = new FindWithCapabilities();
      findWithCapabilities4.getCapabilities();
      FindWithCapabilities.main(stringArray1);
      try { 
        findWithCapabilities4.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.UNARY_CLASS;
      findWithCapabilities0.enable(capabilities_Capability0);
      findWithCapabilities0.listOptions();
      String[] stringArray0 = findWithCapabilities0.getOptions();
      findWithCapabilities0.setClassIndex("! ");
      findWithCapabilities0.getRevision();
      findWithCapabilities1.getOptions();
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities3 = new FindWithCapabilities();
      Capabilities capabilities0 = findWithCapabilities2.m_NotCapabilities;
      try { 
        findWithCapabilities2.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.listOptions();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      findWithCapabilities1.setFilename("rMCa; k[)$jj-");
      FileSystemHandling.shouldAllThrowIOExceptions();
      Vector<String> vector0 = new Vector<String>();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Capabilities capabilities0 = findWithCapabilities0.m_Capabilities;
      findWithCapabilities1.setNotCapabilities(capabilities0);
      findWithCapabilities0.setClassIndex("not-relational-atts");
      ClassDiscovery.m_Cache = null;
      boolean boolean0 = capabilities0.m_MinimumNumberInstancesTest;
      System.setCurrentTimeMillis((-1L));
      findWithCapabilities1.setClassIndex("K");
      String[] stringArray0 = new String[8];
      stringArray0[0] = "not-relational-atts";
      stringArray0[1] = "J5O9";
      stringArray0[2] = "rMCa; k[)$jj-";
      stringArray0[3] = "weka/core/Capabilities.props";
      stringArray0[4] = "-missing-class-values";
      stringArray0[5] = "weka/core/Capabilities.props";
      stringArray0[6] = "J5O9";
      stringArray0[7] = "weka/core/Capabilities.props";
      try { 
        findWithCapabilities0.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NO_CLASS;
      findWithCapabilities0.enable(capabilities_Capability0);
      findWithCapabilities0.getRevision();
      findWithCapabilities0.find();
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.NUMERIC_ATTRIBUTES;
      findWithCapabilities0.enable(capabilities_Capability1);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "8034";
      String[] stringArray1 = findWithCapabilities0.getOptions();
      Capabilities capabilities0 = new Capabilities(findWithCapabilities0);
      findWithCapabilities0.setCapabilities(capabilities0);
      findWithCapabilities0.listOptions();
      String string0 = GlobalInfoJavadoc.GLOBALINFO_METHOD;
      findWithCapabilities0.setClassIndex("\n<p/>\n");
      Capabilities capabilities1 = capabilities0.getAttributeCapabilities();
      TestInstances testInstances0 = new TestInstances();
      String[] stringArray2 = new String[6];
      stringArray2[0] = "";
      stringArray2[1] = "weka/core/Capabilities.props";
      stringArray2[2] = " ";
      stringArray2[3] = "weka/core/Capabilities.props";
      stringArray2[4] = "weka/core/Capabilities.props";
      stringArray2[5] = " ";
      FindWithCapabilities.main(stringArray2);
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      FindWithCapabilities.main(stringArray1);
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      findWithCapabilities2.getOptions();
      Capabilities capabilities2 = new Capabilities(findWithCapabilities1);
      capabilities1.setOwner(findWithCapabilities2);
      FindWithCapabilities findWithCapabilities3 = new FindWithCapabilities();
      Capabilities capabilities3 = findWithCapabilities2.m_Capabilities;
      findWithCapabilities0.setCapabilities(capabilities0);
      assertFalse(capabilities0.equals((Object)capabilities2));
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.UNARY_CLASS;
      findWithCapabilities0.listOptions();
      findWithCapabilities0.disableNot(capabilities_Capability0);
      findWithCapabilities1.setFilename(",6?JGj");
      findWithCapabilities1.getOptions();
      findWithCapabilities1.getRevision();
      findWithCapabilities1.enableNot(capabilities_Capability0);
      findWithCapabilities0.enableNot(capabilities_Capability0);
      findWithCapabilities0.getOptions();
      findWithCapabilities0.listOptions();
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      findWithCapabilities2.getCapabilities();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "weka/core/Capabilities.props";
      stringArray0[1] = "! ";
      stringArray0[2] = ",6?JGj";
      FindWithCapabilities.main(stringArray0);
      // Undeclared exception!
      try { 
        findWithCapabilities2.getClassIndex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No index set
         //
         verifyException("weka.core.SingleIndex", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      String[] stringArray0 = findWithCapabilities0.getOptions();
      Vector<String> vector0 = new Vector<String>();
      findWithCapabilities1.getMatches();
      findWithCapabilities0.setClassIndex("\tMust handle missing class values.");
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.UNARY_CLASS;
      findWithCapabilities1.enableNot(capabilities_Capability0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FindWithCapabilities.main(stringArray0);
      findWithCapabilities1.listOptions();
      String[] stringArray1 = findWithCapabilities1.getOptions();
      FindWithCapabilities.main(stringArray1);
      findWithCapabilities0.disableNot(capabilities_Capability0);
      FindWithCapabilities.main(stringArray1);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.RELATIONAL_CLASS;
      findWithCapabilities1.isEnabledNot(capabilities_Capability1);
      Capabilities capabilities0 = new Capabilities(findWithCapabilities1);
      capabilities0.enableAll();
      TestInstances.forCapabilities(capabilities0);
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities3 = new FindWithCapabilities();
      findWithCapabilities1.getHandler();
      FindWithCapabilities findWithCapabilities4 = new FindWithCapabilities();
      findWithCapabilities4.setHandler(findWithCapabilities1);
      assertFalse(findWithCapabilities4.equals((Object)findWithCapabilities1));
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "4x";
      stringArray0[4] = "KW*em}F{(!6AZD`<:p8";
      stringArray0[2] = "weka/core/Capabilities.props";
      stringArray0[3] = "p3RP7UO`cPg/&@!6";
      findWithCapabilities0.getMatches();
      findWithCapabilities0.setClassIndex("-word-separators <chars>");
      findWithCapabilities0.getRevision();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.BINARY_ATTRIBUTES;
      findWithCapabilities0.enableNot(capabilities_Capability0);
      findWithCapabilities0.getRevision();
      String[] stringArray1 = findWithCapabilities0.getOptions();
      findWithCapabilities0.getCapabilities();
      FindWithCapabilities.main(stringArray1);
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      String string0 = GlobalInfoJavadoc.GLOBALINFO_ENDTAG;
      try { 
        Capabilities.main(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.find();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.DATE_ATTRIBUTES;
      findWithCapabilities0.enableNot(capabilities_Capability0);
      String[] stringArray0 = findWithCapabilities0.getOptions();
      findWithCapabilities0.listOptions();
      String[] stringArray1 = TestInstances.DEFAULT_WORDS;
      findWithCapabilities0.getCapabilities();
      findWithCapabilities0.listOptions();
      findWithCapabilities0.disable(capabilities_Capability0);
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.BINARY_CLASS;
      findWithCapabilities0.disableNot(capabilities_Capability1);
      FindWithCapabilities.main(stringArray0);
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      try { 
        findWithCapabilities0.setOptions((String[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities0.setHandler(findWithCapabilities1);
      findWithCapabilities0.setFilename("weka/core/Capabilities.props");
      findWithCapabilities0.getOptions();
      findWithCapabilities0.getMatches();
      findWithCapabilities0.getMatches();
      findWithCapabilities1.setClassIndex("! ");
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NOMINAL_CLASS;
      findWithCapabilities1.enable(capabilities_Capability0);
      findWithCapabilities1.getFilename();
      findWithCapabilities0.enableNot(capabilities_Capability0);
      String[] stringArray0 = findWithCapabilities0.getOptions();
      findWithCapabilities1.listOptions();
      findWithCapabilities1.getOptions();
      try { 
        findWithCapabilities0.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      FileSystemHandling.shouldAllThrowIOExceptions();
      findWithCapabilities0.m_GenericPropertiesCreator = true;
      findWithCapabilities0.setHandler(findWithCapabilities1);
      findWithCapabilities1.listOptions();
      Vector<String> vector0 = findWithCapabilities1.getMatches();
      String string0 = File.pathSeparator;
      findWithCapabilities0.setClassIndex("I%[3B");
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.MISSING_CLASS_VALUES;
      findWithCapabilities1.enableNot(capabilities_Capability0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Capabilities capabilities0 = findWithCapabilities1.m_NotCapabilities;
      findWithCapabilities1.setNotCapabilities(capabilities0);
      String[] stringArray0 = new String[1];
      stringArray0[0] = ":";
      FindWithCapabilities.main(stringArray0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "$Revision: 9186 $");
      findWithCapabilities0.listOptions();
      String[] stringArray1 = findWithCapabilities1.getOptions();
      FindWithCapabilities.main(stringArray1);
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.RELATIONAL_CLASS;
      findWithCapabilities0.disableNot(capabilities_Capability1);
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      FindWithCapabilities.main(stringArray1);
      System.setCurrentTimeMillis(0L);
      FindWithCapabilities findWithCapabilities3 = new FindWithCapabilities();
      Vector<String> vector1 = findWithCapabilities3.getMisses();
      assertTrue(vector1.equals((Object)vector0));
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NUMERIC_ATTRIBUTES;
      findWithCapabilities1.enableNot(capabilities_Capability0);
      Random.setNextRandom((-2557));
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.STRING_CLASS;
      findWithCapabilities1.enableNot(capabilities_Capability1);
      String[] stringArray0 = findWithCapabilities1.getOptions();
      try { 
        findWithCapabilities1.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities0.setHandler(findWithCapabilities1);
      findWithCapabilities1.setFilename(",+(ScGWL|u>ZF3td");
      findWithCapabilities1.getMatches();
      findWithCapabilities1.setClassIndex("_^06?ktlG%C5,Cq^N'");
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.DATE_CLASS;
      findWithCapabilities1.enableNot(capabilities_Capability0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Capabilities capabilities0 = findWithCapabilities1.m_NotCapabilities;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Can't find class called '");
      findWithCapabilities0.setNotCapabilities(capabilities0);
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.STRING_ATTRIBUTES;
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("Can't find class called '", arrayList0, 745);
      Capabilities.forInstances(instances0);
      findWithCapabilities1.enableNot(capabilities_Capability1);
      String[] stringArray0 = findWithCapabilities1.getOptions();
      findWithCapabilities0.listOptions();
      findWithCapabilities0.getOptions();
      FindWithCapabilities.main(stringArray0);
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      Capabilities capabilities1 = findWithCapabilities2.getNotCapabilities();
      capabilities0.enableAll();
      TestInstances.forCapabilities(capabilities1);
      findWithCapabilities1.setHandler(findWithCapabilities0);
      FindWithCapabilities findWithCapabilities3 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability2 = Capabilities.Capability.RELATIONAL_ATTRIBUTES;
      findWithCapabilities3.disableNot(capabilities_Capability2);
      FindWithCapabilities findWithCapabilities4 = new FindWithCapabilities();
      ClassCache classCache0 = null;
      try {
        classCache0 = new ClassCache();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.evosuite.instrumentation.InstrumentingClassLoader cannot be cast to java.net.URLClassLoader
         //
         verifyException("weka.core.ClassCache", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      System.setCurrentTimeMillis(982L);
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.getMisses();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.RELATIONAL_CLASS;
      findWithCapabilities0.enableNot(capabilities_Capability0);
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      Capabilities capabilities0 = findWithCapabilities0.m_NotCapabilities;
      findWithCapabilities0.setNotCapabilities(capabilities0);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "weka/core/Capabilities.props";
      stringArray0[1] = "weka/core/Capabilities.props";
      stringArray0[2] = "weka/core/Capabilities.props";
      stringArray0[3] = "weka/core/Capabilities.props";
      stringArray0[4] = "weka/core/Capabilities.props";
      FindWithCapabilities.main(stringArray0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "weka/core/Capabilities.props");
      findWithCapabilities0.listOptions();
      String[] stringArray1 = findWithCapabilities0.getOptions();
      FindWithCapabilities.main(stringArray1);
      findWithCapabilities0.disableNot(capabilities_Capability0);
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      FindWithCapabilities.main(stringArray1);
      System.setCurrentTimeMillis((-3719L));
      findWithCapabilities0.getMisses();
      System.setCurrentTimeMillis((-3719L));
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "M&";
      String string0 = "\tThe minimum number of instances (default 1).";
      stringArray0[1] = "\tThe minimum number of instances (default 1).";
      stringArray0[2] = "ew}O!$MbD rR";
      stringArray0[3] = "xI+V3|?pIrbK7M{Gt^";
      stringArray0[4] = "j'\"!MFX TRR/F!$M";
      stringArray0[5] = "-date-atts";
      FindWithCapabilities.main(stringArray0);
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.EMPTY_NOMINAL_CLASS;
      findWithCapabilities0.enableNot(capabilities_Capability0);
      CapabilitiesHandler capabilitiesHandler0 = null;
      // Undeclared exception!
      try { 
        findWithCapabilities0.getClassIndex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No index set
         //
         verifyException("weka.core.SingleIndex", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/9_weka/Capabilities.props");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "HipeWj#/\"tj2v!i]1ES");
      findWithCapabilities0.setHandler(findWithCapabilities1);
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.RELATIONAL_ATTRIBUTES;
      findWithCapabilities0.setFilename("weka/core/Capabilities.props");
      Locale.getISOCountries();
      findWithCapabilities0.getMatches();
      EvoSuiteFile evoSuiteFile1 = new EvoSuiteFile("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/9_weka/Capabilities.props");
      FileSystemHandling.createFolder(evoSuiteFile1);
      findWithCapabilities1.setClassIndex("8t");
      findWithCapabilities0.enableNot(capabilities_Capability0);
      Capabilities capabilities0 = findWithCapabilities0.m_NotCapabilities;
      findWithCapabilities1.setNotCapabilities(capabilities0);
      findWithCapabilities1.m_Superclass = "8t";
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)4;
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte)4;
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      findWithCapabilities1.m_Capabilities = capabilities0;
      String[] stringArray0 = Locale.getISOLanguages();
      FileSystemHandling.appendLineToFile(evoSuiteFile1, "4S>x2LtN'O");
      findWithCapabilities0.listOptions();
      String[] stringArray1 = findWithCapabilities1.getOptions();
      FindWithCapabilities.main(stringArray1);
      FindWithCapabilities.main(stringArray0);
      double[] doubleArray0 = new double[1];
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0.0, doubleArray0);
      Instances instances0 = binarySparseInstance0.dataset();
      assertNull(instances0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.MISSING_VALUES;
      findWithCapabilities0.disable(capabilities_Capability0);
      Vector<String> vector0 = findWithCapabilities0.getMatches();
      findWithCapabilities0.m_Misses = vector0;
      findWithCapabilities0.find();
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.DATE_CLASS;
      findWithCapabilities0.enable(capabilities_Capability1);
      String[] stringArray0 = findWithCapabilities0.getOptions();
      FindWithCapabilities.main(stringArray0);
      Capabilities.Capability capabilities_Capability2 = Capabilities.Capability.RELATIONAL_ATTRIBUTES;
      findWithCapabilities0.disableNot(capabilities_Capability2);
      String[] stringArray1 = new String[0];
      FindWithCapabilities.main(stringArray1);
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FindWithCapabilities.main(stringArray1);
      findWithCapabilities1.getOptions();
      Capabilities capabilities0 = findWithCapabilities1.getNotCapabilities();
      boolean boolean0 = capabilities0.m_AttributeTest;
      Capabilities capabilities1 = new Capabilities(findWithCapabilities1);
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      findWithCapabilities2.enableNot(capabilities_Capability1);
      Capabilities.main(stringArray1);
      findWithCapabilities1.setClassIndex("gR;qi{");
      assertFalse(findWithCapabilities1.equals((Object)findWithCapabilities2));
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Random.setNextRandom((-2154));
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.UNARY_ATTRIBUTES;
      findWithCapabilities0.enable(capabilities_Capability0);
      findWithCapabilities0.find();
      findWithCapabilities0.m_Filename = "w^azLBXt[a*";
      findWithCapabilities0.getOptions();
      findWithCapabilities0.getFilename();
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.RELATIONAL_CLASS;
      findWithCapabilities0.enable(capabilities_Capability1);
      String[] stringArray0 = findWithCapabilities0.getOptions();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      findWithCapabilities0.disableNot(capabilities_Capability0);
      try { 
        findWithCapabilities0.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities0.setHandler(findWithCapabilities1);
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NUMERIC_CLASS;
      findWithCapabilities0.setFilename("weka/core/Capabilities.props");
      String[] stringArray0 = Locale.getISOCountries();
      Vector<String> vector0 = findWithCapabilities0.getMatches();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/9_weka/Capabilities.props");
      FileSystemHandling.createFolder(evoSuiteFile0);
      findWithCapabilities1.setClassIndex("1 ");
      findWithCapabilities0.enableNot(capabilities_Capability0);
      Capabilities capabilities0 = findWithCapabilities0.m_NotCapabilities;
      FindWithCapabilities.main(stringArray0);
      findWithCapabilities1.m_Superclass = "1 ";
      findWithCapabilities1.m_Capabilities = capabilities0;
      String[] stringArray1 = Locale.getISOLanguages();
      FileSystemHandling.createFolder(evoSuiteFile0);
      findWithCapabilities0.listOptions();
      String[] stringArray2 = findWithCapabilities1.getOptions();
      FindWithCapabilities.main(stringArray2);
      FindWithCapabilities.main(stringArray1);
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      FindWithCapabilities.main(stringArray1);
      findWithCapabilities1.getOptions();
      boolean boolean0 = capabilities0.m_AttributeTest;
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.MISSING_CLASS_VALUES;
      findWithCapabilities2.isEnabledNot(capabilities_Capability1);
      findWithCapabilities0.m_Matches = vector0;
      findWithCapabilities2.getRevision();
      findWithCapabilities2.setClassIndex("weka/core/Capabilities.props");
      Capabilities.Capability capabilities_Capability2 = Capabilities.Capability.BINARY_ATTRIBUTES;
      findWithCapabilities0.disable(capabilities_Capability2);
      System.setCurrentTimeMillis((-1965L));
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "Min index (doubles): ";
      stringArray0[1] = "(";
      stringArray0[2] = "-only-multiinstance";
      stringArray0[3] = ">[ $SJlZVb ,I";
      stringArray0[4] = "-1? ";
      FindWithCapabilities.main(stringArray0);
      // Undeclared exception!
      try { 
        findWithCapabilities0.setFilename((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities0.setHandler(findWithCapabilities1);
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.MISSING_VALUES;
      findWithCapabilities0.setFilename("weka/core/Capabilities.props");
      String[] stringArray0 = findWithCapabilities1.getOptions();
      findWithCapabilities1.getMatches();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/9_weka/Capabilities.props");
      FileSystemHandling.createFolder(evoSuiteFile0);
      findWithCapabilities1.setClassIndex("1 ");
      findWithCapabilities0.enableNot(capabilities_Capability0);
      Capabilities capabilities0 = findWithCapabilities0.m_NotCapabilities;
      findWithCapabilities1.setNotCapabilities(capabilities0);
      FindWithCapabilities.main(stringArray0);
      findWithCapabilities1.m_Superclass = "1 ";
      findWithCapabilities1.m_Capabilities = capabilities0;
      String[] stringArray1 = findWithCapabilities0.getOptions();
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "4S>x2LtN'O");
      findWithCapabilities0.listOptions();
      capabilities0.enableAllAttributes();
      String[] stringArray2 = findWithCapabilities1.getOptions();
      FindWithCapabilities.main(stringArray2);
      FindWithCapabilities.main(stringArray1);
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      FindWithCapabilities.main(stringArray1);
      findWithCapabilities1.getOptions();
      FindWithCapabilities findWithCapabilities3 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.NUMERIC_ATTRIBUTES;
      findWithCapabilities3.enableNot(capabilities_Capability1);
      try { 
        Capabilities.main(stringArray2);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // No file provided with option '-file'!
         //
         verifyException("weka.core.Capabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/9_weka/Capabilities.props");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "HipeW#/\"tj2v!i]1ES");
      findWithCapabilities0.setHandler(findWithCapabilities1);
      findWithCapabilities0.setFilename("weka/core/Capabilities.props");
      String[] stringArray0 = Locale.getISOCountries();
      EvoSuiteFile evoSuiteFile1 = new EvoSuiteFile("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/9_weka/Capabilities.props");
      FileSystemHandling.createFolder(evoSuiteFile1);
      Capabilities capabilities0 = findWithCapabilities0.m_NotCapabilities;
      findWithCapabilities1.setNotCapabilities(capabilities0);
      FindWithCapabilities.main(stringArray0);
      findWithCapabilities1.m_Superclass = "1 ";
      findWithCapabilities1.m_Capabilities = capabilities0;
      findWithCapabilities1.setClassIndex("HipeW#/\"tj2v!i]1ES");
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.BINARY_ATTRIBUTES;
      findWithCapabilities0.enableNot(capabilities_Capability0);
      Capabilities capabilities1 = findWithCapabilities0.m_NotCapabilities;
      findWithCapabilities0.setNotCapabilities(capabilities0);
      FindWithCapabilities.main(stringArray0);
      String[] stringArray1 = findWithCapabilities0.getOptions();
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "weka/core/Capabilities.props");
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      findWithCapabilities2.listOptions();
      FindWithCapabilities.main(stringArray0);
      FindWithCapabilities.main(stringArray1);
      FindWithCapabilities findWithCapabilities3 = new FindWithCapabilities();
      FindWithCapabilities.main(stringArray1);
      String[] stringArray2 = findWithCapabilities2.getOptions();
      assertFalse(stringArray2.equals((Object)stringArray1));
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/9_weka/Capabilities.props");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "H~peW#/utj2v!i]1ES");
      findWithCapabilities0.setHandler(findWithCapabilities1);
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NOMINAL_CLASS;
      findWithCapabilities0.setFilename("weka/core/Capabilities.props");
      findWithCapabilities0.getMatches();
      EvoSuiteFile evoSuiteFile1 = new EvoSuiteFile("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/9_weka/Capabilities.props");
      FileSystemHandling.createFolder(evoSuiteFile1);
      findWithCapabilities1.setClassIndex("1 ");
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte)78;
      byteArray0[2] = (byte) (-125);
      FileSystemHandling.appendDataToFile(evoSuiteFile1, byteArray0);
      findWithCapabilities0.enableNot(capabilities_Capability0);
      Capabilities capabilities0 = findWithCapabilities0.m_NotCapabilities;
      findWithCapabilities0.enableNot(capabilities_Capability0);
      findWithCapabilities1.setNotCapabilities(capabilities0);
      findWithCapabilities1.m_Superclass = "1 ";
      findWithCapabilities1.m_Capabilities = capabilities0;
      String[] stringArray0 = findWithCapabilities0.getOptions();
      FileSystemHandling.appendLineToFile(evoSuiteFile1, "4S>x2LtN'O");
      findWithCapabilities0.listOptions();
      String[] stringArray1 = findWithCapabilities1.getOptions();
      FindWithCapabilities.main(stringArray1);
      FindWithCapabilities.main(stringArray0);
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      findWithCapabilities2.m_Handler = (CapabilitiesHandler) findWithCapabilities1;
      FindWithCapabilities.main(stringArray0);
      Capabilities capabilities1 = new Capabilities(findWithCapabilities2);
      findWithCapabilities2.m_GenericPropertiesCreator = true;
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.UNARY_CLASS;
      capabilities0.setMinimumNumberInstances((-2014172649));
      findWithCapabilities2.find();
      findWithCapabilities1.enableNot(capabilities_Capability1);
      try { 
        Capabilities.main(stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // No file provided with option '-file'!
         //
         verifyException("weka.core.Capabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      Capabilities capabilities0 = findWithCapabilities1.getNotCapabilities();
      Capabilities capabilities1 = capabilities0.getOtherCapabilities();
      findWithCapabilities0.setNotCapabilities(capabilities1);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/9_weka/Capabilities.props");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "HipeW#/\"tj2v!i]1ES");
      findWithCapabilities0.setHandler(findWithCapabilities1);
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.RELATIONAL_ATTRIBUTES;
      findWithCapabilities0.setFilename("weka/core/Capabilities.props");
      String[] stringArray0 = Locale.getISOCountries();
      Range range0 = new Range("weka/core/Capabilities.props");
      Vector vector0 = range0.m_RangeStrings;
      findWithCapabilities0.m_Packages = vector0;
      findWithCapabilities0.getMatches();
      EvoSuiteFile evoSuiteFile1 = new EvoSuiteFile("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/9_weka/Capabilities.props");
      FileSystemHandling.createFolder(evoSuiteFile1);
      findWithCapabilities1.setClassIndex("weka/core/Capabilities.props");
      findWithCapabilities0.enableNot(capabilities_Capability0);
      Capabilities capabilities2 = findWithCapabilities0.m_NotCapabilities;
      capabilities2.m_InstancesTest = true;
      findWithCapabilities1.setNotCapabilities(capabilities2);
      FindWithCapabilities.main(stringArray0);
      findWithCapabilities1.m_Superclass = "weka/core/Capabilities.props";
      capabilities1.getAttributeCapabilities();
      String[] stringArray1 = findWithCapabilities0.getOptions();
      FileSystemHandling.appendLineToFile(evoSuiteFile1, "weka/core/Capabilities.props");
      findWithCapabilities0.listOptions();
      String[] stringArray2 = findWithCapabilities1.getOptions();
      FindWithCapabilities.main(stringArray2);
      FindWithCapabilities.main(stringArray1);
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      findWithCapabilities1.m_Capabilities.setMinimumNumberInstances(1419);
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.STRING_ATTRIBUTES;
      findWithCapabilities2.enableNot(capabilities_Capability1);
      Random.setNextRandom(0);
      try { 
        Capabilities.main(stringArray2);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // No file provided with option '-file'!
         //
         verifyException("weka.core.Capabilities", e);
      }
  }
}
