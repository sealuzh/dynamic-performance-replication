/*
 * This file was automatically generated by EvoSuite
 * Tue Jul 17 02:51:28 GMT 2018
 */

package org.la4j;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.RoundingMode;
import java.text.ChoiceFormat;
import java.text.DecimalFormat;
import java.text.NumberFormat;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.Locale;
import java.util.NoSuchElementException;
import java.util.Random;
import java.util.function.Consumer;
import java.util.stream.DoubleStream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;
import org.la4j.LinearAlgebra;
import org.la4j.Matrix;
import org.la4j.Vector;
import org.la4j.decomposition.MatrixDecompositor;
import org.la4j.inversion.MatrixInverter;
import org.la4j.iterator.ColumnMajorMatrixIterator;
import org.la4j.iterator.RowMajorMatrixIterator;
import org.la4j.iterator.VectorIterator;
import org.la4j.matrix.ColumnMajorSparseMatrix;
import org.la4j.matrix.DenseMatrix;
import org.la4j.matrix.MatrixFactory;
import org.la4j.matrix.RowMajorSparseMatrix;
import org.la4j.matrix.SparseMatrix;
import org.la4j.matrix.dense.Basic2DMatrix;
import org.la4j.matrix.functor.AdvancedMatrixPredicate;
import org.la4j.matrix.functor.MatrixFunction;
import org.la4j.matrix.functor.MatrixPredicate;
import org.la4j.matrix.functor.MatrixProcedure;
import org.la4j.matrix.sparse.CCSMatrix;
import org.la4j.matrix.sparse.CRSMatrix;
import org.la4j.operation.MatrixMatrixOperation;
import org.la4j.operation.MatrixOperation;
import org.la4j.operation.MatrixVectorOperation;
import org.la4j.operation.ooplace.OoPlaceMatricesMultiplication;
import org.la4j.operation.ooplace.OoPlaceMatricesSubtraction;
import org.la4j.operation.ooplace.OoPlaceMatrixByItsTransposeMultiplication;
import org.la4j.operation.ooplace.OoPlaceMatrixByVectorMultiplication;
import org.la4j.operation.ooplace.OoPlaceOuterProduct;
import org.la4j.operation.ooplace.OoPlaceVectorByMatrixMultiplication;
import org.la4j.vector.DenseVector;
import org.la4j.vector.SparseVector;
import org.la4j.vector.dense.BasicVector;
import org.la4j.vector.functor.VectorAccumulator;
import org.la4j.vector.functor.VectorFunction;
import org.la4j.vector.functor.VectorProcedure;
import org.la4j.vector.sparse.CompressedVector;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Matrix_ESTest extends Matrix_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.zero(31, 31);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        columnMajorSparseMatrix0.updateRow(48, vectorFunction0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '48' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix(619, 619, 619);
      // Undeclared exception!
      try { 
        cRSMatrix0.swapColumns(619, 1615);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '619' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      int int0 = 0;
      int int1 = 1340;
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.zero(0, 1340);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      Matrix matrix0 = columnMajorSparseMatrix0.transformColumn(0, vectorFunction0);
      matrix0.toColumnVector();
      matrix0.kroneckerProduct(columnMajorSparseMatrix0);
      matrix0.rank();
      matrix0.setColumn(0, Double.NEGATIVE_INFINITY);
      // Undeclared exception!
      try { 
        columnMajorSparseMatrix0.minInRow(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '0' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      MatrixOperation<ColumnMajorSparseMatrix> matrixOperation0 = (MatrixOperation<ColumnMajorSparseMatrix>) mock(MatrixOperation.class, new ViolatedAssumptionAnswer());
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(10, 10, 7);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        rowMajorSparseMatrix0.transformColumn(10, vectorFunction0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '10' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      int int0 = cRSMatrix0.rank();
      assertEquals(0, cRSMatrix0.rows());
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      cCSMatrix0.maxInRow(37);
      assertEquals(0, cCSMatrix0.columns());
      assertEquals(0, cCSMatrix0.rows());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(0, 0);
      cRSMatrix0.setColumn((-967), (-843.130883329806));
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(matrixPredicate0).test(anyInt() , anyInt());
      boolean boolean0 = cRSMatrix0.non(matrixPredicate0);
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(0, cRSMatrix0.rows());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(605);
      // Undeclared exception!
      try { 
        cCSMatrix0.insert((Matrix) null, 605, 37);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(0, 0, 0);
      // Undeclared exception!
      try { 
        cRSMatrix0.insert((Matrix) cRSMatrix0, 0, 0, 0, 0, 625, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Out of bounds: Cannot add 625 rows and 0 cols at 0, 0 in a 0x0 matrix.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.identity(0);
      LinearAlgebra.DecompositorFactory linearAlgebra_DecompositorFactory0 = LinearAlgebra.DecompositorFactory.CHOLESKY;
      rowMajorSparseMatrix0.withDecompositor(linearAlgebra_DecompositorFactory0);
      rowMajorSparseMatrix0.hashCode();
      CRSMatrix cRSMatrix0 = (CRSMatrix)rowMajorSparseMatrix0.multiplyByItsTranspose();
      cRSMatrix0.insert((Matrix) rowMajorSparseMatrix0);
      // Undeclared exception!
      try { 
        cRSMatrix0.fail("Cannot have negative rows or columns: ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot have negative rows or columns: 
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      SparseVector sparseVector0 = SparseVector.zero(3, 470);
      CRSMatrix cRSMatrix0 = (CRSMatrix)sparseVector0.toRowMatrix();
      cRSMatrix0.hashCode();
      assertEquals(3, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      double[][] doubleArray0 = new double[4][5];
      double[] doubleArray1 = new double[0];
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[3];
      doubleArray2[0] = 2473.0192484673;
      doubleArray2[1] = 280.385;
      doubleArray2[2] = (-403.301);
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[2];
      doubleArray3[0] = (-403.301);
      doubleArray3[1] = 0.0;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[9];
      doubleArray4[0] = 280.385;
      doubleArray4[1] = 2473.0192484673;
      doubleArray4[2] = 2473.0192484673;
      doubleArray4[3] = 0.0;
      doubleArray4[4] = 2473.0192484673;
      doubleArray4[5] = (-110.4809545805909);
      doubleArray4[6] = 0.0;
      doubleArray4[7] = 280.385;
      doubleArray4[8] = 2473.0192484673;
      doubleArray0[3] = doubleArray4;
      DenseMatrix denseMatrix0 = DenseMatrix.from2DArray(doubleArray0);
      double double0 = denseMatrix0.product();
      assertEquals(4, denseMatrix0.rows());
      assertEquals(1.0, double0, 0.01);
      assertEquals(0, denseMatrix0.columns());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix();
      basic2DMatrix0.norm();
      assertEquals(0, basic2DMatrix0.columns());
      assertEquals(0, basic2DMatrix0.rows());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      Matrix matrix0 = Matrix.randomSymmetric(7, mockRandom0);
      // Undeclared exception!
      try { 
        matrix0.maxInColumn(48);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      int int0 = 1000;
      CRSMatrix cRSMatrix0 = new CRSMatrix(1000, 1000, 1000);
      // Undeclared exception!
      try { 
        cRSMatrix0.foldColumns((VectorAccumulator) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.Vectors$24", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(0, 0);
      int int0 = 10;
      Matrix matrix0 = rowMajorSparseMatrix0.power(10);
      matrix0.blank();
      int int1 = (-3566);
      rowMajorSparseMatrix0.maxInColumn((-3566));
      // Undeclared exception!
      try { 
        rowMajorSparseMatrix0.minInRow(0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      int int0 = 5;
      int int1 = 1563;
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(5, 1563);
      int int2 = Integer.MAX_VALUE;
      Matrix matrix0 = cRSMatrix0.power(Integer.MAX_VALUE);
      int int3 = (-1769);
      int int4 = 592;
      Matrix matrix1 = cRSMatrix0.insert(matrix0, int0, int1, int2, int1, int3, int4);
      matrix1.insert(matrix0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      int int0 = 1749;
      int int1 = 1097;
      CRSMatrix cRSMatrix0 = new CRSMatrix(1749, 1097);
      // Undeclared exception!
      cRSMatrix0.power(1097);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.diagonal(7, 7);
      // Undeclared exception!
      try { 
        denseMatrix0.power((-1923));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The exponent should be positive: -1923.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Matrix matrix0 = Matrix.diagonal(1982, 3377.95789775864);
      matrix0.blankOfRows(1);
      matrix0.sum();
      int int0 = 0;
      matrix0.minInRow(int0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(17, 17, 0);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(vectorAccumulator0).accumulate();
      rowMajorSparseMatrix0.foldRows(vectorAccumulator0);
      assertEquals(17, rowMajorSparseMatrix0.columns());
      assertEquals(17, rowMajorSparseMatrix0.rows());
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      assertEquals(0, cRSMatrix0.rows());
      
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      double[] doubleArray0 = cRSMatrix0.foldRows(vectorAccumulator0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, cRSMatrix0.columns());
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new OoPlaceMatricesSubtraction();
      SparseMatrix sparseMatrix0 = SparseMatrix.diagonal(954, 954);
      Matrix matrix0 = ooPlaceMatricesSubtraction0.applySimple(sparseMatrix0, sparseMatrix0);
      matrix0.insert((Matrix) sparseMatrix0, 954, 954, (-835), 954, (-835), 954);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      int int0 = 1;
      DenseMatrix denseMatrix0 = DenseMatrix.zero(1, 1);
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(1, 1);
      Matrix matrix0 = ooPlaceMatricesMultiplication0.apply(denseMatrix0, rowMajorSparseMatrix0);
      matrix0.rank();
      int int1 = 2049;
      // Undeclared exception!
      try { 
        matrix0.slice((-2333), (-2333), 0, 2049);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '-2333' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      int int0 = 1;
      DenseMatrix denseMatrix0 = DenseMatrix.zero(1, 1);
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(17, 17);
      Matrix matrix0 = ooPlaceMatricesMultiplication0.apply(denseMatrix0, rowMajorSparseMatrix0);
      matrix0.rank();
      int int1 = 2049;
      // Undeclared exception!
      try { 
        matrix0.slice((-2333), 32, 0, 2049);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '-2333' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.constant(2919, 2919, (-1.0));
      // Undeclared exception!
      try { 
        denseMatrix0.sliceTopLeft(Integer.MAX_VALUE, (-1152));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong slice range: [0..2147483647][0..-1152].
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.zero(53, 53);
      // Undeclared exception!
      try { 
        columnMajorSparseMatrix0.slice(17, (-2486), 1134, 53);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '-2486' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new OoPlaceMatricesSubtraction();
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(239, 2563, 239);
      // Undeclared exception!
      try { 
        rowMajorSparseMatrix0.slice(2563, 7, 1207, 1207);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong slice range: [2563..1207][7..1207].
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      int int0 = 1105;
      SparseMatrix sparseMatrix0 = SparseMatrix.diagonal(1105, 1105);
      // Undeclared exception!
      try { 
        sparseMatrix0.removeColumn(1105);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..1104
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(3);
      assertEquals(3, cCSMatrix0.columns());
      
      CCSMatrix cCSMatrix1 = (CCSMatrix)cCSMatrix0.removeLastColumn();
      assertEquals(2, cCSMatrix1.columns());
      assertEquals(0.3333333333333333, cCSMatrix1.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(0, 0, 0);
      // Undeclared exception!
      try { 
        cRSMatrix0.removeLastColumn();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..-1
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      int int0 = 32;
      SparseMatrix sparseMatrix0 = SparseMatrix.zero(32, 32, 32);
      Matrix matrix0 = sparseMatrix0.removeColumn(0);
      // Undeclared exception!
      try { 
        matrix0.subtract((Matrix) sparseMatrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Given matrices should have the same shape: 32x31 does not equal to 32x32.
         //
         verifyException("org.la4j.operation.ooplace.OoPlaceMatricesSubtraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      OoPlaceOuterProduct ooPlaceOuterProduct0 = new OoPlaceOuterProduct();
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-2.3087);
      doubleArray0[1] = (-1717.0);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 1147.0;
      doubleArray0[5] = 2504.57;
      doubleArray0[6] = 4563.2;
      doubleArray0[7] = 0.0;
      DenseVector denseVector0 = DenseVector.fromArray(doubleArray0);
      Matrix matrix0 = ooPlaceOuterProduct0.apply(denseVector0, denseVector0);
      Matrix matrix1 = matrix0.removeFirstColumn();
      assertEquals(7, matrix1.columns());
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new OoPlaceMatricesSubtraction();
      SparseMatrix sparseMatrix0 = SparseMatrix.diagonal(954, 954);
      Matrix matrix0 = ooPlaceMatricesSubtraction0.applySimple(sparseMatrix0, sparseMatrix0);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (double) 954;
      doubleArray0[2] = (double) 954;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (double) 954;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 0.0;
      DenseVector denseVector0 = DenseVector.fromArray(doubleArray0);
      OoPlaceOuterProduct ooPlaceOuterProduct0 = new OoPlaceOuterProduct();
      Matrix matrix1 = denseVector0.toColumnMatrix();
      matrix1.sum();
      matrix0.removeFirstColumn();
      Object object0 = new Object();
      sparseMatrix0.equals(object0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.zero(31, 31);
      DenseVector denseVector0 = DenseVector.zero(31);
      // Undeclared exception!
      try { 
        columnMajorSparseMatrix0.insertRow(177, denseVector0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..30
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      DenseMatrix denseMatrix0 = DenseMatrix.identity(528);
      int int0 = (-172);
      DenseVector denseVector0 = DenseVector.unit(470);
      // Undeclared exception!
      try { 
        denseMatrix0.insertRow(528, denseVector0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..527
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      double[][] doubleArray0 = new double[0][1];
      Matrix matrix0 = Matrix.from2DArray(doubleArray0);
      matrix0.toDenseMatrix();
      int int0 = 0;
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        Matrix.fromCSV("WC");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new OoPlaceMatricesSubtraction();
      SparseMatrix sparseMatrix0 = SparseMatrix.diagonal(954, 954);
      ooPlaceMatricesSubtraction0.applySimple(sparseMatrix0, sparseMatrix0);
      DenseMatrix denseMatrix0 = DenseMatrix.zero(918, 767);
      denseMatrix0.minInColumn(918);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      int int0 = 0;
      MockRandom mockRandom0 = new MockRandom();
      DenseMatrix denseMatrix0 = DenseMatrix.random(0, 0, mockRandom0);
      double[] doubleArray0 = new double[0];
      SparseVector.fromArray(doubleArray0);
      DenseMatrix denseMatrix1 = DenseMatrix.identity(1150);
      Vector.random(1150, mockRandom0);
      Matrix.random(0, 8, mockRandom0);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      denseMatrix1.transformRow(8, vectorFunction0);
      Matrix matrix0 = denseMatrix0.removeFirstRow();
      int int1 = 32;
      MatrixOperation<String> matrixOperation0 = (MatrixOperation<String>) mock(MatrixOperation.class, new ViolatedAssumptionAnswer());
      matrix0.apply(matrixOperation0);
      Matrix matrix1 = Matrix.zero(int0, int1);
      int int2 = (-1);
      int int3 = (-2830);
      matrix0.sliceBottomRight(int2, int3);
      LinearAlgebra.InverterFactory linearAlgebra_InverterFactory0 = LinearAlgebra.InverterFactory.NO_PIVOT_GAUSS;
      denseMatrix0.withInverter(linearAlgebra_InverterFactory0);
      SparseMatrix sparseMatrix0 = matrix0.toSparseMatrix();
      int int4 = (-679);
      sparseMatrix0.getColumn(int4);
      NumberFormat numberFormat0 = NumberFormat.getIntegerInstance();
      matrix1.mkString(numberFormat0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      int int0 = 0;
      MockRandom mockRandom0 = new MockRandom();
      DenseMatrix.random(0, 0, mockRandom0);
      OoPlaceMatrixByVectorMultiplication ooPlaceMatrixByVectorMultiplication0 = new OoPlaceMatrixByVectorMultiplication();
      double[] doubleArray0 = new double[0];
      SparseVector.fromArray(doubleArray0);
      // Undeclared exception!
      try { 
        SparseMatrix.fromMatrixMarket("%%MatrixMarket");
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.StringTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      DenseVector denseVector0 = DenseVector.fromCollection(linkedList0);
      Matrix matrix0 = denseVector0.toColumnMatrix();
      Matrix matrix1 = matrix0.subtract((-674.3374882582276));
      assertEquals(0, matrix1.rows());
      assertNotSame(matrix1, matrix0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      double[] doubleArray0 = new double[4];
      // Undeclared exception!
      try { 
        SparseMatrix.zero(Integer.MAX_VALUE, Integer.MAX_VALUE);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: use 'Integer.MAX_VALUE - 1' instead.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      SparseMatrix sparseMatrix0 = SparseMatrix.zero(1340, 1340, 1340);
      int int0 = 2165;
      // Undeclared exception!
      sparseMatrix0.euclideanNorm();
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new OoPlaceMatricesSubtraction();
      int int0 = 1485;
      DenseMatrix denseMatrix0 = DenseMatrix.identity(1485);
      int int1 = 48;
      DenseVector denseVector0 = DenseVector.unit(48);
      Matrix matrix0 = denseMatrix0.insertRow(32, denseVector0);
      String string0 = "row-major";
      DenseMatrix denseMatrix1 = DenseMatrix.fromCSV(string0);
      double double0 = (-2080.3);
      Matrix matrix1 = denseMatrix1.multiply(double0);
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.block(denseMatrix0, matrix1, matrix1, matrix0);
      int int2 = 355;
      matrix0.insert((Matrix) denseMatrix0, int0, int2);
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      denseMatrix0.each(matrixProcedure0);
      int int3 = 41;
      denseMatrix0.swapRows(int3, int2);
      rowMajorSparseMatrix0.getColumn(int1);
      int int4 = 1678;
      matrix1.blankOfShape(int1, int4);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.identity(4);
      DenseVector denseVector0 = DenseVector.zero(4);
      denseMatrix0.insertRow(0, denseVector0);
      // Undeclared exception!
      try { 
        SparseMatrix.fromMatrixMarket("h");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong input file format: can not read header '%%MatrixMarket'.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      double[][] doubleArray0 = new double[2][6];
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = (-966.0);
      doubleArray1[3] = (-2116.3531);
      doubleArray1[4] = 2.0;
      doubleArray1[5] = (-966.0);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[7];
      doubleArray2[1] = 0.0;
      doubleArray2[3] = (-966.0);
      doubleArray2[4] = 2.0;
      doubleArray2[5] = (-2116.3531);
      doubleArray2[6] = (-966.0);
      doubleArray0[1] = doubleArray2;
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      Vector vector0 = Vector.fromArray(doubleArray1);
      // Undeclared exception!
      try { 
        cRSMatrix0.setRow(301, vector0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong vector length: 6. Should be: 0.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      DenseVector denseVector0 = DenseVector.fromCollection(linkedList0);
      // Undeclared exception!
      try { 
        cRSMatrix0.insertRow((-3066), denseVector0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..-1
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new OoPlaceMatricesSubtraction();
      DenseMatrix denseMatrix0 = DenseMatrix.constant(13, 2511, 2511);
      // Undeclared exception!
      denseMatrix0.max();
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new OoPlaceMatricesSubtraction();
      int int0 = 954;
      SparseMatrix sparseMatrix0 = SparseMatrix.diagonal(954, 954);
      Matrix matrix0 = ooPlaceMatricesSubtraction0.applySimple(sparseMatrix0, sparseMatrix0);
      int int1 = 2805;
      int int2 = 3;
      Matrix matrix1 = matrix0.insert((Matrix) sparseMatrix0, 954, 954, 2805, 954, 954, 3);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) int0;
      doubleArray0[1] = (double) int0;
      doubleArray0[2] = (double) int2;
      doubleArray0[3] = (double) int2;
      doubleArray0[4] = (double) int0;
      doubleArray0[5] = (double) int1;
      doubleArray0[6] = (double) int1;
      doubleArray0[7] = (double) int1;
      Matrix.from1DArray(int1, int0, doubleArray0);
      matrix1.maxInColumn(int0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      double[] doubleArray0 = new double[0];
      String[] stringArray0 = new String[0];
      ChoiceFormat choiceFormat0 = new ChoiceFormat(doubleArray0, stringArray0);
      cCSMatrix0.toCSV((NumberFormat) choiceFormat0);
      RowMajorMatrixIterator rowMajorMatrixIterator0 = cCSMatrix0.rowMajorIterator();
      assertNotNull(rowMajorMatrixIterator0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.zero(4, 4);
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(17, 17);
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      Matrix matrix0 = ooPlaceMatricesMultiplication0.apply(denseMatrix0, rowMajorSparseMatrix0);
      rowMajorSparseMatrix0.rank();
      int int0 = 932;
      // Undeclared exception!
      try { 
        matrix0.slice(2745, 932, 1276, (-2324));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong slice range: [2745..1276][932..-2324].
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new OoPlaceMatricesSubtraction();
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(16, 16, 16);
      rowMajorSparseMatrix0.euclideanNorm();
      ooPlaceMatricesSubtraction0.partiallyApply(rowMajorSparseMatrix0);
      SparseMatrix sparseMatrix0 = SparseMatrix.diagonal(954, 954);
      Matrix matrix0 = ooPlaceMatricesSubtraction0.applySimple(sparseMatrix0, sparseMatrix0);
      sparseMatrix0.getColumn(954);
      OoPlaceOuterProduct ooPlaceOuterProduct0 = new OoPlaceOuterProduct();
      DenseVector denseVector0 = DenseVector.zero(16);
      Matrix matrix1 = ooPlaceOuterProduct0.apply(denseVector0, denseVector0);
      Matrix.block(matrix1, matrix0, matrix0, matrix1);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      int int0 = 0;
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.nextGaussian();
      DenseMatrix denseMatrix0 = DenseMatrix.random(0, 0, mockRandom0);
      OoPlaceMatrixByVectorMultiplication ooPlaceMatrixByVectorMultiplication0 = new OoPlaceMatrixByVectorMultiplication();
      double[] doubleArray0 = new double[0];
      SparseVector.fromArray(doubleArray0);
      String string0 = "%%MatrixMarket";
      // Undeclared exception!
      try { 
        denseMatrix0.removeLastRow();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..-1
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      SparseMatrix sparseMatrix0 = SparseMatrix.diagonal(498, 0);
      LinearAlgebra.InverterFactory linearAlgebra_InverterFactory0 = LinearAlgebra.InverterFactory.NO_PIVOT_GAUSS;
      SparseMatrix.identity(4);
      sparseMatrix0.withInverter(linearAlgebra_InverterFactory0);
      // Undeclared exception!
      sparseMatrix0.sum();
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      RowMajorSparseMatrix.fromCSV("");
      int int0 = (-1338);
      int int1 = 1;
      // Undeclared exception!
      try { 
        Matrix.from1DArray((-1338), 1, (double[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: -1338x1
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.fromCSV("   ");
      linkedList0.remove((Object) columnMajorSparseMatrix0);
      assertEquals(0, columnMajorSparseMatrix0.columns());
      assertEquals(1, columnMajorSparseMatrix0.rows());
      
      SparseVector.fromCollection(linkedList0);
      Integer integer0 = new Integer(0);
      linkedList0.add(integer0);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      DenseMatrix denseMatrix0 = DenseMatrix.constant(5, 5, (-3371.30506133));
      Matrix matrix0 = denseMatrix0.subtract(0.0);
      assertTrue(matrix0.equals((Object)denseMatrix0));
      assertNotSame(matrix0, denseMatrix0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Matrix matrix0 = Matrix.fromCSV(", ");
      assertEquals(1, matrix0.rows());
      assertEquals(0, matrix0.columns());
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new OoPlaceMatricesSubtraction();
      SparseMatrix sparseMatrix0 = SparseMatrix.diagonal(954, 954);
      ooPlaceMatricesSubtraction0.applySimple(sparseMatrix0, sparseMatrix0);
      sparseMatrix0.getColumn(954);
      LinearAlgebra.SolverFactory linearAlgebra_SolverFactory0 = LinearAlgebra.SolverFactory.JACOBI;
      sparseMatrix0.withSolver(linearAlgebra_SolverFactory0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new OoPlaceMatricesSubtraction();
      SparseMatrix sparseMatrix0 = SparseMatrix.diagonal(954, 954);
      Matrix matrix0 = ooPlaceMatricesSubtraction0.applySimple(sparseMatrix0, sparseMatrix0);
      sparseMatrix0.getColumn(954);
      Locale locale0 = Locale.US;
      NumberFormat numberFormat0 = NumberFormat.getNumberInstance(locale0);
      matrix0.toCSV(numberFormat0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      org.evosuite.runtime.Random.setNextRandom(4);
      Matrix matrix0 = Matrix.diagonal(3592, 3592);
      ChoiceFormat choiceFormat0 = new ChoiceFormat("This");
      matrix0.toCSV((NumberFormat) choiceFormat0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.identity(4);
      String string0 = denseMatrix0.toCSV();
      assertEquals("1.000, 0.000, 0.000, 0.000\n0.000, 1.000, 0.000, 0.000\n0.000, 0.000, 1.000, 0.000\n0.000, 0.000, 0.000, 1.000\n", string0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      SparseMatrix sparseMatrix0 = SparseMatrix.fromCSV("");
      Vector vector0 = sparseMatrix0.getColumn(6);
      AdvancedMatrixPredicate advancedMatrixPredicate0 = mock(AdvancedMatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(advancedMatrixPredicate0).test(any(org.la4j.Matrix.class));
      sparseMatrix0.is(advancedMatrixPredicate0);
      NumberFormat numberFormat0 = NumberFormat.getInstance();
      sparseMatrix0.mkString(numberFormat0, "", "9P");
      sparseMatrix0.norm();
      Matrix matrix0 = vector0.toColumnMatrix();
      matrix0.iteratorOfRow(8);
      // Undeclared exception!
      try { 
        sparseMatrix0.insert(matrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Out of bounds: Cannot add 0 rows and 1 cols at 0, 0 in a 0x0 matrix.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      SparseMatrix sparseMatrix0 = SparseMatrix.diagonal(0, 0);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      sparseMatrix0.foldColumns(vectorAccumulator0);
      sparseMatrix0.toColumnVector();
      LinearAlgebra.InverterFactory linearAlgebra_InverterFactory0 = LinearAlgebra.InverterFactory.GAUSS_JORDAN;
      MatrixInverter matrixInverter0 = sparseMatrix0.withInverter(linearAlgebra_InverterFactory0);
      assertNotNull(matrixInverter0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      SparseVector sparseVector0 = SparseVector.zero(0);
      Matrix matrix0 = sparseVector0.toDiagonalMatrix();
      double double0 = matrix0.trace();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      DenseMatrix.zero(4, 4);
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(17, 17);
      assertEquals(0.0, rowMajorSparseMatrix0.density(), 0.01);
      
      SparseMatrix sparseMatrix0 = SparseMatrix.diagonal(1, 0.0);
      double double0 = sparseMatrix0.trace();
      assertEquals(0.0, double0, 0.01);
      
      OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new OoPlaceMatricesSubtraction();
      Matrix matrix0 = ooPlaceMatricesSubtraction0.applySimple(sparseMatrix0, sparseMatrix0);
      assertEquals(1, matrix0.columns());
      
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.zero(1, 4);
      double double1 = columnMajorSparseMatrix0.sum();
      assertEquals(double1, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new OoPlaceMatricesSubtraction();
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      cRSMatrix0.slice(954, 32, 954, 32);
      String string0 = "E,:(D";
      // Undeclared exception!
      try { 
        Matrix.fromMatrixMarket("E,:(D");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong input file format: can not read header '%%MatrixMarket'.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 7;
      doubleArray0[1] = (double) 7;
      doubleArray0[3] = (double) 7;
      doubleArray0[4] = (double) 1356;
      doubleArray0[5] = (double) 1356;
      doubleArray0[6] = (double) 7;
      doubleArray0[7] = (double) 1356;
      doubleArray0[8] = (double) 7;
      int[] intArray0 = new int[3];
      intArray0[0] = 1356;
      intArray0[1] = 7;
      intArray0[2] = 1356;
      CRSMatrix cRSMatrix0 = new CRSMatrix(7, 1356, 7, doubleArray0, intArray0, intArray0);
      // Undeclared exception!
      try { 
        cRSMatrix0.removeFirstRow();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      OoPlaceMatrixByVectorMultiplication ooPlaceMatrixByVectorMultiplication0 = new OoPlaceMatrixByVectorMultiplication();
      OoPlaceMatrixByVectorMultiplication ooPlaceMatrixByVectorMultiplication1 = new OoPlaceMatrixByVectorMultiplication();
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      SparseVector.fromArray(doubleArray0);
      double[][] doubleArray1 = new double[7][7];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      double[] doubleArray2 = new double[3];
      doubleArray2[0] = (double) 0;
      doubleArray2[1] = (double) 0;
      doubleArray2[2] = (double) 0;
      doubleArray1[3] = doubleArray2;
      doubleArray1[4] = doubleArray0;
      doubleArray1[5] = doubleArray0;
      doubleArray1[6] = doubleArray0;
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix(doubleArray1);
      // Undeclared exception!
      try { 
        basic2DMatrix0.removeLastRow();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      OoPlaceMatrixByVectorMultiplication ooPlaceMatrixByVectorMultiplication0 = new OoPlaceMatrixByVectorMultiplication();
      Matrix.identity(2914);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new OoPlaceMatricesSubtraction();
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(607, 1, 15);
      Matrix matrix0 = cRSMatrix0.removeLastRow();
      Matrix matrix1 = matrix0.blankOfRows(4);
      assertEquals(606, matrix0.rows());
      assertEquals(4, matrix1.rows());
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.identity(36);
      assertEquals(36, rowMajorSparseMatrix0.columns());
      assertEquals(1.0, rowMajorSparseMatrix0.max(), 0.01);
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      assertEquals(0.027777777777777776, rowMajorSparseMatrix0.density(), 0.01);
      assertEquals(36, rowMajorSparseMatrix0.rows());
      assertEquals(0.0, rowMajorSparseMatrix0.min(), 0.01);
      assertEquals(36, rowMajorSparseMatrix0.cardinality());
      assertNotNull(rowMajorSparseMatrix0);
      
      rowMajorSparseMatrix0.hashCode();
      assertEquals(36, rowMajorSparseMatrix0.columns());
      assertEquals(1.0, rowMajorSparseMatrix0.max(), 0.01);
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      assertEquals(0.027777777777777776, rowMajorSparseMatrix0.density(), 0.01);
      assertEquals(36, rowMajorSparseMatrix0.rows());
      assertEquals(0.0, rowMajorSparseMatrix0.min(), 0.01);
      assertEquals(36, rowMajorSparseMatrix0.cardinality());
      
      CRSMatrix cRSMatrix0 = (CRSMatrix)rowMajorSparseMatrix0.multiplyByItsTranspose();
      CRSMatrix cRSMatrix1 = (CRSMatrix)cRSMatrix0.insert((Matrix) rowMajorSparseMatrix0);
      cRSMatrix0.fail("Cannot have negative rows or columns: ");
      int int0 = (-2115);
      cRSMatrix1.blankOfShape(int0, int0);
      rowMajorSparseMatrix0.getColumn(int0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.unit(226, 1142);
      assertEquals(1142, denseMatrix0.columns());
      assertEquals(226, denseMatrix0.rows());
      assertNotNull(denseMatrix0);
      
      OoPlaceMatrixByItsTransposeMultiplication ooPlaceMatrixByItsTransposeMultiplication0 = new OoPlaceMatrixByItsTransposeMultiplication();
      assertNotNull(ooPlaceMatrixByItsTransposeMultiplication0);
      
      // Undeclared exception!
      denseMatrix0.insert((Matrix) denseMatrix0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.identity(0);
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      assertEquals(0, rowMajorSparseMatrix0.rows());
      assertEquals(0.0, rowMajorSparseMatrix0.max(), 0.01);
      assertEquals(0.0, rowMajorSparseMatrix0.min(), 0.01);
      assertEquals(0, rowMajorSparseMatrix0.cardinality());
      assertEquals(0, rowMajorSparseMatrix0.columns());
      assertEquals(Double.NaN, rowMajorSparseMatrix0.density(), 0.01);
      assertNotNull(rowMajorSparseMatrix0);
      
      int int0 = Double.MIN_EXPONENT;
      assertEquals((-1022), int0);
      
      CRSMatrix cRSMatrix0 = (CRSMatrix)rowMajorSparseMatrix0.multiplyByItsTranspose();
      assertTrue(cRSMatrix0.equals((Object)rowMajorSparseMatrix0));
      assertNotSame(rowMajorSparseMatrix0, cRSMatrix0);
      assertNotSame(cRSMatrix0, rowMajorSparseMatrix0);
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      assertEquals(0, rowMajorSparseMatrix0.rows());
      assertEquals(0.0, rowMajorSparseMatrix0.max(), 0.01);
      assertEquals(0.0, rowMajorSparseMatrix0.min(), 0.01);
      assertEquals(0, rowMajorSparseMatrix0.cardinality());
      assertEquals(0, rowMajorSparseMatrix0.columns());
      assertEquals(Double.NaN, rowMajorSparseMatrix0.density(), 0.01);
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0, cRSMatrix0.rows());
      assertNotNull(cRSMatrix0);
      
      double double0 = cRSMatrix0.determinant();
      assertTrue(rowMajorSparseMatrix0.equals((Object)cRSMatrix0));
      assertTrue(cRSMatrix0.equals((Object)rowMajorSparseMatrix0));
      assertNotSame(rowMajorSparseMatrix0, cRSMatrix0);
      assertNotSame(cRSMatrix0, rowMajorSparseMatrix0);
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      assertEquals(0, rowMajorSparseMatrix0.rows());
      assertEquals(0.0, rowMajorSparseMatrix0.max(), 0.01);
      assertEquals(0.0, rowMajorSparseMatrix0.min(), 0.01);
      assertEquals(0, rowMajorSparseMatrix0.cardinality());
      assertEquals(0, rowMajorSparseMatrix0.columns());
      assertEquals(Double.NaN, rowMajorSparseMatrix0.density(), 0.01);
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0, cRSMatrix0.rows());
      assertEquals(0.0, double0, 0.01);
      
      VectorIterator vectorIterator0 = rowMajorSparseMatrix0.iteratorOfColumn(0);
      assertTrue(rowMajorSparseMatrix0.equals((Object)cRSMatrix0));
      assertNotSame(rowMajorSparseMatrix0, cRSMatrix0);
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      assertEquals(0, rowMajorSparseMatrix0.rows());
      assertEquals(0.0, rowMajorSparseMatrix0.max(), 0.01);
      assertEquals(0.0, rowMajorSparseMatrix0.min(), 0.01);
      assertEquals(0, rowMajorSparseMatrix0.cardinality());
      assertEquals(0, rowMajorSparseMatrix0.columns());
      assertEquals(Double.NaN, rowMajorSparseMatrix0.density(), 0.01);
      assertNotNull(vectorIterator0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new OoPlaceMatricesSubtraction();
      assertNotNull(ooPlaceMatricesSubtraction0);
      
      Basic2DMatrix basic2DMatrix0 = (Basic2DMatrix)Matrix.constant(607, 4892, (-3240.25235));
      assertEquals(607, basic2DMatrix0.rows());
      assertEquals(4892, basic2DMatrix0.columns());
      assertNotNull(basic2DMatrix0);
      
      // Undeclared exception!
      try { 
        basic2DMatrix0.ensureIndexesAreInBounds(1089, 1095);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '1089' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.identity(11);
      assertEquals(11, columnMajorSparseMatrix0.columns());
      assertEquals(0.0, columnMajorSparseMatrix0.min(), 0.01);
      assertEquals(1.0, columnMajorSparseMatrix0.max(), 0.01);
      assertFalse(columnMajorSparseMatrix0.isRowMajor());
      assertEquals(0.09090909090909091, columnMajorSparseMatrix0.density(), 0.01);
      assertEquals(11, columnMajorSparseMatrix0.cardinality());
      assertEquals(11, columnMajorSparseMatrix0.rows());
      assertNotNull(columnMajorSparseMatrix0);
      
      CCSMatrix cCSMatrix0 = (CCSMatrix)columnMajorSparseMatrix0.shuffle();
      assertTrue(cCSMatrix0.equals((Object)columnMajorSparseMatrix0));
      assertNotSame(columnMajorSparseMatrix0, cCSMatrix0);
      assertNotSame(cCSMatrix0, columnMajorSparseMatrix0);
      assertEquals(11, columnMajorSparseMatrix0.columns());
      assertEquals(0.0, columnMajorSparseMatrix0.min(), 0.01);
      assertEquals(1.0, columnMajorSparseMatrix0.max(), 0.01);
      assertFalse(columnMajorSparseMatrix0.isRowMajor());
      assertEquals(0.09090909090909091, columnMajorSparseMatrix0.density(), 0.01);
      assertEquals(11, columnMajorSparseMatrix0.cardinality());
      assertEquals(11, columnMajorSparseMatrix0.rows());
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(11, cCSMatrix0.cardinality());
      assertEquals(11, cCSMatrix0.columns());
      assertEquals(0.09090909090909091, cCSMatrix0.density(), 0.01);
      assertEquals(1.0, cCSMatrix0.max(), 0.01);
      assertEquals(11, cCSMatrix0.rows());
      assertNotNull(cCSMatrix0);
      
      String string0 = columnMajorSparseMatrix0.toMatrixMarket();
      assertTrue(columnMajorSparseMatrix0.equals((Object)cCSMatrix0));
      assertNotSame(columnMajorSparseMatrix0, cCSMatrix0);
      assertEquals(11, columnMajorSparseMatrix0.columns());
      assertEquals(0.0, columnMajorSparseMatrix0.min(), 0.01);
      assertEquals(1.0, columnMajorSparseMatrix0.max(), 0.01);
      assertFalse(columnMajorSparseMatrix0.isRowMajor());
      assertEquals(0.09090909090909091, columnMajorSparseMatrix0.density(), 0.01);
      assertEquals(11, columnMajorSparseMatrix0.cardinality());
      assertEquals(11, columnMajorSparseMatrix0.rows());
      assertEquals("%%MatrixMarket matrix coordinate real general column-major\n11 11 11\n1 1 1.000\n2 2 1.000\n3 3 1.000\n4 4 1.000\n5 5 1.000\n6 6 1.000\n7 7 1.000\n8 8 1.000\n9 9 1.000\n10 10 1.000\n11 11 1.000\n", string0);
      assertNotNull(string0);
      
      double double0 = columnMajorSparseMatrix0.trace();
      assertTrue(columnMajorSparseMatrix0.equals((Object)cCSMatrix0));
      assertNotSame(columnMajorSparseMatrix0, cCSMatrix0);
      assertEquals(11, columnMajorSparseMatrix0.columns());
      assertEquals(0.0, columnMajorSparseMatrix0.min(), 0.01);
      assertEquals(1.0, columnMajorSparseMatrix0.max(), 0.01);
      assertFalse(columnMajorSparseMatrix0.isRowMajor());
      assertEquals(0.09090909090909091, columnMajorSparseMatrix0.density(), 0.01);
      assertEquals(11, columnMajorSparseMatrix0.cardinality());
      assertEquals(11, columnMajorSparseMatrix0.rows());
      assertEquals(11.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(0, cRSMatrix0.rows());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertNotNull(cRSMatrix0);
      
      CRSMatrix cRSMatrix1 = (CRSMatrix)cRSMatrix0.shuffle();
      assertTrue(cRSMatrix1.equals((Object)cRSMatrix0));
      assertNotSame(cRSMatrix0, cRSMatrix1);
      assertNotSame(cRSMatrix1, cRSMatrix0);
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(0, cRSMatrix0.rows());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0, cRSMatrix1.rows());
      assertEquals(0.0, cRSMatrix1.max(), 0.01);
      assertTrue(cRSMatrix1.isRowMajor());
      assertEquals(0.0, cRSMatrix1.min(), 0.01);
      assertEquals(0, cRSMatrix1.cardinality());
      assertEquals(0, cRSMatrix1.columns());
      assertEquals(Double.NaN, cRSMatrix1.density(), 0.01);
      assertNotNull(cRSMatrix1);
      
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        cRSMatrix0.foldRow(5, vectorAccumulator0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      int int0 = 10;
      Matrix matrix0 = Matrix.unit(10, 10);
      assertEquals(10, matrix0.columns());
      assertEquals(10, matrix0.rows());
      assertNotNull(matrix0);
      
      double double0 = matrix0.manhattanNorm();
      assertEquals(10, matrix0.columns());
      assertEquals(10, matrix0.rows());
      assertEquals(100.0, double0, 0.01);
      
      // Undeclared exception!
      try { 
        ColumnMajorSparseMatrix.fromCSV((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix();
      assertEquals(0, basic2DMatrix0.rows());
      assertEquals(0, basic2DMatrix0.columns());
      assertNotNull(basic2DMatrix0);
      
      basic2DMatrix0.updateColumn(1195, vectorFunction0);
      assertEquals(0, basic2DMatrix0.rows());
      assertEquals(0, basic2DMatrix0.columns());
      
      byte[] byteArray0 = basic2DMatrix0.toBinary();
      assertArrayEquals(new byte[] {(byte)16, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(0, basic2DMatrix0.rows());
      assertEquals(0, basic2DMatrix0.columns());
      assertNotNull(byteArray0);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 1113;
      doubleArray0[1] = (double) (-3463);
      doubleArray0[2] = (double) 1113;
      doubleArray0[3] = (double) 1113;
      doubleArray0[4] = (double) (-3463);
      doubleArray0[5] = (double) 1195;
      doubleArray0[6] = (double) 1195;
      // Undeclared exception!
      try { 
        Matrix.from1DArray((-3463), 1113, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: -3463x1113
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertNotNull(cRSMatrix0);
      
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.updateColumn((-1), vectorFunction0);
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      
      RowMajorSparseMatrix rowMajorSparseMatrix0 = cRSMatrix0.toRowMajorSparseMatrix();
      assertSame(cRSMatrix0, rowMajorSparseMatrix0);
      assertSame(rowMajorSparseMatrix0, cRSMatrix0);
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, rowMajorSparseMatrix0.max(), 0.01);
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      assertEquals(0, rowMajorSparseMatrix0.cardinality());
      assertEquals(Double.NaN, rowMajorSparseMatrix0.density(), 0.01);
      assertEquals(0, rowMajorSparseMatrix0.rows());
      assertEquals(0.0, rowMajorSparseMatrix0.min(), 0.01);
      assertEquals(0, rowMajorSparseMatrix0.columns());
      assertNotNull(rowMajorSparseMatrix0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.zero(10, 10);
      assertEquals(10, columnMajorSparseMatrix0.rows());
      assertEquals(10, columnMajorSparseMatrix0.columns());
      assertFalse(columnMajorSparseMatrix0.isRowMajor());
      assertEquals(0.0, columnMajorSparseMatrix0.density(), 0.01);
      assertEquals(0.0, columnMajorSparseMatrix0.min(), 0.01);
      assertEquals(0.0, columnMajorSparseMatrix0.max(), 0.01);
      assertEquals(0, columnMajorSparseMatrix0.cardinality());
      assertNotNull(columnMajorSparseMatrix0);
      
      MatrixOperation<ColumnMajorSparseMatrix> matrixOperation0 = (MatrixOperation<ColumnMajorSparseMatrix>) mock(MatrixOperation.class, new ViolatedAssumptionAnswer());
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 10;
      doubleArray0[1] = (double) 10;
      doubleArray0[2] = (double) 10;
      doubleArray0[3] = (double) 10;
      doubleArray0[4] = (double) 10;
      DenseMatrix denseMatrix0 = DenseMatrix.from1DArray(10, 3, doubleArray0);
      assertArrayEquals(new double[] {10.0, 10.0, 10.0, 10.0, 10.0}, doubleArray0, 0.01);
      assertEquals(3, denseMatrix0.columns());
      assertEquals(10, denseMatrix0.rows());
      assertNotNull(denseMatrix0);
      
      // Undeclared exception!
      try { 
        denseMatrix0.divide((-3159.2));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new OoPlaceMatricesSubtraction();
      assertNotNull(ooPlaceMatricesSubtraction0);
      
      int int0 = 239;
      int int1 = 3893;
      double[] doubleArray0 = new double[0];
      DenseMatrix denseMatrix0 = DenseMatrix.from1DArray(3893, 239, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(3893, denseMatrix0.rows());
      assertEquals(239, denseMatrix0.columns());
      assertNotNull(denseMatrix0);
      
      // Undeclared exception!
      try { 
        denseMatrix0.divide(0.0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.diagonal(3, 1.0);
      assertEquals(3, denseMatrix0.rows());
      assertEquals(3, denseMatrix0.columns());
      assertNotNull(denseMatrix0);
      
      double double0 = denseMatrix0.determinant();
      assertEquals(3, denseMatrix0.rows());
      assertEquals(3, denseMatrix0.columns());
      assertEquals(1.0, double0, 0.01);
      
      Vector vector0 = denseMatrix0.toRowVector();
      assertEquals(3, denseMatrix0.rows());
      assertEquals(3, denseMatrix0.columns());
      assertEquals(3, vector0.length());
      assertNotNull(vector0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      int int0 = 10;
      Matrix matrix0 = Matrix.unit(10, 10);
      assertEquals(10, matrix0.columns());
      assertEquals(10, matrix0.rows());
      assertNotNull(matrix0);
      
      MatrixOperation<ColumnMajorSparseMatrix> matrixOperation0 = (MatrixOperation<ColumnMajorSparseMatrix>) mock(MatrixOperation.class, new ViolatedAssumptionAnswer());
      MatrixMatrixOperation<ColumnMajorSparseMatrix> matrixMatrixOperation0 = (MatrixMatrixOperation<ColumnMajorSparseMatrix>) mock(MatrixMatrixOperation.class, new ViolatedAssumptionAnswer());
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 10;
      doubleArray0[1] = (double) 10;
      doubleArray0[2] = (double) 10;
      doubleArray0[3] = (double) 10;
      doubleArray0[4] = (double) 10;
      doubleArray0[5] = (double) 10;
      DenseMatrix denseMatrix0 = DenseMatrix.from1DArray(10, 10, doubleArray0);
      assertArrayEquals(new double[] {10.0, 10.0, 10.0, 10.0, 10.0, 10.0}, doubleArray0, 0.01);
      assertEquals(10, denseMatrix0.rows());
      assertEquals(10, denseMatrix0.columns());
      assertNotNull(denseMatrix0);
      
      // Undeclared exception!
      try { 
        denseMatrix0.determinant();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.diagonal(1, 1);
      assertEquals(1, denseMatrix0.columns());
      assertEquals(1, denseMatrix0.rows());
      assertNotNull(denseMatrix0);
      
      double double0 = denseMatrix0.determinant();
      assertEquals(1, denseMatrix0.columns());
      assertEquals(1, denseMatrix0.rows());
      assertEquals(1.0, double0, 0.01);
      
      int int0 = denseMatrix0.columns();
      assertEquals(1, denseMatrix0.columns());
      assertEquals(1, denseMatrix0.rows());
      assertEquals(1, int0);
      
      Vector vector0 = denseMatrix0.toRowVector();
      assertEquals(1, denseMatrix0.columns());
      assertEquals(1, denseMatrix0.rows());
      assertEquals(1, vector0.length());
      assertNotNull(vector0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.identity(0);
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      assertEquals(0, rowMajorSparseMatrix0.rows());
      assertEquals(0.0, rowMajorSparseMatrix0.max(), 0.01);
      assertEquals(0.0, rowMajorSparseMatrix0.min(), 0.01);
      assertEquals(0, rowMajorSparseMatrix0.cardinality());
      assertEquals(Double.NaN, rowMajorSparseMatrix0.density(), 0.01);
      assertEquals(0, rowMajorSparseMatrix0.columns());
      assertNotNull(rowMajorSparseMatrix0);
      
      RowMajorSparseMatrix rowMajorSparseMatrix1 = RowMajorSparseMatrix.zero(48, 1064, 5);
      assertFalse(rowMajorSparseMatrix1.equals((Object)rowMajorSparseMatrix0));
      assertNotSame(rowMajorSparseMatrix1, rowMajorSparseMatrix0);
      assertEquals(0.0, rowMajorSparseMatrix1.max(), 0.01);
      assertEquals(48, rowMajorSparseMatrix1.rows());
      assertTrue(rowMajorSparseMatrix1.isRowMajor());
      assertEquals(0.0, rowMajorSparseMatrix1.min(), 0.01);
      assertEquals(0, rowMajorSparseMatrix1.cardinality());
      assertEquals(1064, rowMajorSparseMatrix1.columns());
      assertEquals(0.0, rowMajorSparseMatrix1.density(), 0.01);
      assertNotNull(rowMajorSparseMatrix1);
      
      OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new OoPlaceMatricesSubtraction();
      assertNotNull(ooPlaceMatricesSubtraction0);
      
      CRSMatrix cRSMatrix0 = (CRSMatrix)ooPlaceMatricesSubtraction0.applySimple((SparseMatrix) rowMajorSparseMatrix0, (SparseMatrix) rowMajorSparseMatrix0);
      assertFalse(rowMajorSparseMatrix0.equals((Object)rowMajorSparseMatrix1));
      assertFalse(cRSMatrix0.equals((Object)rowMajorSparseMatrix1));
      assertTrue(cRSMatrix0.equals((Object)rowMajorSparseMatrix0));
      assertNotSame(rowMajorSparseMatrix0, cRSMatrix0);
      assertNotSame(rowMajorSparseMatrix0, rowMajorSparseMatrix1);
      assertNotSame(cRSMatrix0, rowMajorSparseMatrix0);
      assertNotSame(cRSMatrix0, rowMajorSparseMatrix1);
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      assertEquals(0, rowMajorSparseMatrix0.rows());
      assertEquals(0.0, rowMajorSparseMatrix0.max(), 0.01);
      assertEquals(0.0, rowMajorSparseMatrix0.min(), 0.01);
      assertEquals(0, rowMajorSparseMatrix0.cardinality());
      assertEquals(Double.NaN, rowMajorSparseMatrix0.density(), 0.01);
      assertEquals(0, rowMajorSparseMatrix0.columns());
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.rows());
      assertEquals(0, cRSMatrix0.columns());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertNotNull(cRSMatrix0);
      
      CRSMatrix cRSMatrix1 = (CRSMatrix)rowMajorSparseMatrix0.shuffle();
      assertTrue(rowMajorSparseMatrix0.equals((Object)cRSMatrix0));
      assertFalse(rowMajorSparseMatrix0.equals((Object)rowMajorSparseMatrix1));
      assertTrue(cRSMatrix1.equals((Object)cRSMatrix0));
      assertTrue(cRSMatrix1.equals((Object)rowMajorSparseMatrix0));
      assertFalse(cRSMatrix1.equals((Object)rowMajorSparseMatrix1));
      assertNotSame(rowMajorSparseMatrix0, cRSMatrix1);
      assertNotSame(rowMajorSparseMatrix0, cRSMatrix0);
      assertNotSame(rowMajorSparseMatrix0, rowMajorSparseMatrix1);
      assertNotSame(cRSMatrix1, cRSMatrix0);
      assertNotSame(cRSMatrix1, rowMajorSparseMatrix1);
      assertNotSame(cRSMatrix1, rowMajorSparseMatrix0);
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      assertEquals(0, rowMajorSparseMatrix0.rows());
      assertEquals(0.0, rowMajorSparseMatrix0.max(), 0.01);
      assertEquals(0.0, rowMajorSparseMatrix0.min(), 0.01);
      assertEquals(0, rowMajorSparseMatrix0.cardinality());
      assertEquals(Double.NaN, rowMajorSparseMatrix0.density(), 0.01);
      assertEquals(0, rowMajorSparseMatrix0.columns());
      assertEquals(0.0, cRSMatrix1.max(), 0.01);
      assertEquals(Double.NaN, cRSMatrix1.density(), 0.01);
      assertTrue(cRSMatrix1.isRowMajor());
      assertEquals(0, cRSMatrix1.cardinality());
      assertEquals(0, cRSMatrix1.columns());
      assertEquals(0.0, cRSMatrix1.min(), 0.01);
      assertEquals(0, cRSMatrix1.rows());
      assertNotNull(cRSMatrix1);
      
      double double0 = cRSMatrix1.determinant();
      assertTrue(rowMajorSparseMatrix0.equals((Object)cRSMatrix0));
      assertTrue(rowMajorSparseMatrix0.equals((Object)cRSMatrix1));
      assertFalse(rowMajorSparseMatrix0.equals((Object)rowMajorSparseMatrix1));
      assertTrue(cRSMatrix1.equals((Object)cRSMatrix0));
      assertTrue(cRSMatrix1.equals((Object)rowMajorSparseMatrix0));
      assertFalse(cRSMatrix1.equals((Object)rowMajorSparseMatrix1));
      assertNotSame(rowMajorSparseMatrix0, cRSMatrix1);
      assertNotSame(rowMajorSparseMatrix0, cRSMatrix0);
      assertNotSame(rowMajorSparseMatrix0, rowMajorSparseMatrix1);
      assertNotSame(cRSMatrix1, cRSMatrix0);
      assertNotSame(cRSMatrix1, rowMajorSparseMatrix1);
      assertNotSame(cRSMatrix1, rowMajorSparseMatrix0);
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      assertEquals(0, rowMajorSparseMatrix0.rows());
      assertEquals(0.0, rowMajorSparseMatrix0.max(), 0.01);
      assertEquals(0.0, rowMajorSparseMatrix0.min(), 0.01);
      assertEquals(0, rowMajorSparseMatrix0.cardinality());
      assertEquals(Double.NaN, rowMajorSparseMatrix0.density(), 0.01);
      assertEquals(0, rowMajorSparseMatrix0.columns());
      assertEquals(0.0, cRSMatrix1.max(), 0.01);
      assertEquals(Double.NaN, cRSMatrix1.density(), 0.01);
      assertTrue(cRSMatrix1.isRowMajor());
      assertEquals(0, cRSMatrix1.cardinality());
      assertEquals(0, cRSMatrix1.columns());
      assertEquals(0.0, cRSMatrix1.min(), 0.01);
      assertEquals(0, cRSMatrix1.rows());
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      assertNotNull(ooPlaceMatricesMultiplication0);
      
      DenseMatrix denseMatrix0 = DenseMatrix.zero(4, 4);
      assertEquals(4, denseMatrix0.columns());
      assertEquals(4, denseMatrix0.rows());
      assertNotNull(denseMatrix0);
      
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(17, 17);
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      assertEquals(0, rowMajorSparseMatrix0.cardinality());
      assertEquals(0.0, rowMajorSparseMatrix0.max(), 0.01);
      assertEquals(0.0, rowMajorSparseMatrix0.density(), 0.01);
      assertEquals(17, rowMajorSparseMatrix0.rows());
      assertEquals(0.0, rowMajorSparseMatrix0.min(), 0.01);
      assertEquals(17, rowMajorSparseMatrix0.columns());
      assertNotNull(rowMajorSparseMatrix0);
      
      CCSMatrix cCSMatrix0 = (CCSMatrix)ooPlaceMatricesMultiplication0.apply(denseMatrix0, rowMajorSparseMatrix0);
      assertEquals(4, denseMatrix0.columns());
      assertEquals(4, denseMatrix0.rows());
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      assertEquals(0, rowMajorSparseMatrix0.cardinality());
      assertEquals(0.0, rowMajorSparseMatrix0.max(), 0.01);
      assertEquals(0.0, rowMajorSparseMatrix0.density(), 0.01);
      assertEquals(17, rowMajorSparseMatrix0.rows());
      assertEquals(0.0, rowMajorSparseMatrix0.min(), 0.01);
      assertEquals(17, rowMajorSparseMatrix0.columns());
      assertEquals(0.0, cCSMatrix0.density(), 0.01);
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(4, cCSMatrix0.rows());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(17, cCSMatrix0.columns());
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertEquals(0, cCSMatrix0.cardinality());
      assertNotNull(cCSMatrix0);
      
      int int0 = cCSMatrix0.rank();
      assertEquals(4, denseMatrix0.columns());
      assertEquals(4, denseMatrix0.rows());
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      assertEquals(0, rowMajorSparseMatrix0.cardinality());
      assertEquals(0.0, rowMajorSparseMatrix0.max(), 0.01);
      assertEquals(0.0, rowMajorSparseMatrix0.density(), 0.01);
      assertEquals(17, rowMajorSparseMatrix0.rows());
      assertEquals(0.0, rowMajorSparseMatrix0.min(), 0.01);
      assertEquals(17, rowMajorSparseMatrix0.columns());
      assertEquals(0.0, cCSMatrix0.density(), 0.01);
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(4, cCSMatrix0.rows());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(17, cCSMatrix0.columns());
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(0, int0);
      
      CRSMatrix cRSMatrix0 = (CRSMatrix)rowMajorSparseMatrix0.multiplyByItsTranspose();
      assertTrue(cRSMatrix0.equals((Object)rowMajorSparseMatrix0));
      assertNotSame(rowMajorSparseMatrix0, cRSMatrix0);
      assertNotSame(cRSMatrix0, rowMajorSparseMatrix0);
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      assertEquals(0, rowMajorSparseMatrix0.cardinality());
      assertEquals(0.0, rowMajorSparseMatrix0.max(), 0.01);
      assertEquals(0.0, rowMajorSparseMatrix0.density(), 0.01);
      assertEquals(17, rowMajorSparseMatrix0.rows());
      assertEquals(0.0, rowMajorSparseMatrix0.min(), 0.01);
      assertEquals(17, rowMajorSparseMatrix0.columns());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(17, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(17, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertNotNull(cRSMatrix0);
      
      CRSMatrix cRSMatrix1 = (CRSMatrix)rowMajorSparseMatrix0.removeLastColumn();
      cRSMatrix1.rotate();
      rowMajorSparseMatrix0.insert((Matrix) cRSMatrix1);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      double[][] doubleArray0 = new double[6][2];
      double[] doubleArray1 = new double[0];
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[8];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 1.0;
      doubleArray2[1] = 0.0;
      doubleArray2[2] = 2408.7;
      doubleArray2[3] = (-1.0);
      doubleArray2[4] = 1711.208142;
      doubleArray2[5] = 1.0;
      doubleArray2[6] = 3477.741110105;
      doubleArray2[7] = 4898.226642;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[9];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[0] = 734.6364716416019;
      doubleArray3[1] = 0.0;
      doubleArray3[2] = 1711.208142;
      doubleArray3[3] = 3477.741110105;
      doubleArray3[4] = 4898.226642;
      doubleArray3[5] = 3477.741110105;
      doubleArray3[6] = 0.0;
      doubleArray3[7] = 2408.7;
      doubleArray3[8] = 2408.7;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[4];
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      
      doubleArray4[0] = 4898.226642;
      doubleArray4[1] = 0.0;
      doubleArray4[2] = 734.6364716416019;
      doubleArray4[3] = (-3216.6768182);
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[1];
      assertFalse(doubleArray5.equals((Object)doubleArray4));
      assertFalse(doubleArray5.equals((Object)doubleArray3));
      assertFalse(doubleArray5.equals((Object)doubleArray2));
      assertFalse(doubleArray5.equals((Object)doubleArray1));
      
      doubleArray5[0] = (-3216.6768182);
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[1];
      assertFalse(doubleArray6.equals((Object)doubleArray3));
      assertFalse(doubleArray6.equals((Object)doubleArray4));
      assertFalse(doubleArray6.equals((Object)doubleArray5));
      assertFalse(doubleArray6.equals((Object)doubleArray2));
      assertFalse(doubleArray6.equals((Object)doubleArray1));
      
      doubleArray6[0] = 2408.7;
      doubleArray0[5] = doubleArray6;
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix(doubleArray0);
      assertEquals(6, basic2DMatrix0.rows());
      assertEquals(0, basic2DMatrix0.columns());
      assertNotNull(basic2DMatrix0);
      
      Matrix matrix0 = basic2DMatrix0.transpose();
      assertFalse(matrix0.equals((Object)basic2DMatrix0));
      assertNotSame(basic2DMatrix0, matrix0);
      assertNotSame(matrix0, basic2DMatrix0);
      assertEquals(6, basic2DMatrix0.rows());
      assertEquals(0, basic2DMatrix0.columns());
      assertEquals(0, matrix0.columns());
      assertEquals(0, matrix0.rows());
      assertNotNull(matrix0);
      
      // Undeclared exception!
      try { 
        CRSMatrix.block(basic2DMatrix0, basic2DMatrix0, matrix0, basic2DMatrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Sides of blocks are incompatible!
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.zero(0, 0);
      assertEquals(0, columnMajorSparseMatrix0.cardinality());
      assertEquals(0.0, columnMajorSparseMatrix0.min(), 0.01);
      assertEquals(Double.NaN, columnMajorSparseMatrix0.density(), 0.01);
      assertEquals(0, columnMajorSparseMatrix0.rows());
      assertFalse(columnMajorSparseMatrix0.isRowMajor());
      assertEquals(0, columnMajorSparseMatrix0.columns());
      assertEquals(0.0, columnMajorSparseMatrix0.max(), 0.01);
      assertNotNull(columnMajorSparseMatrix0);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (double) 3;
      doubleArray0[2] = (double) 3;
      doubleArray0[3] = (double) 0;
      DenseMatrix denseMatrix0 = DenseMatrix.from1DArray(0, 0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 3.0, 3.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0, denseMatrix0.rows());
      assertEquals(0, denseMatrix0.columns());
      assertNotNull(denseMatrix0);
      
      Matrix matrix0 = denseMatrix0.divide(0);
      assertTrue(matrix0.equals((Object)denseMatrix0));
      assertNotSame(denseMatrix0, matrix0);
      assertNotSame(matrix0, denseMatrix0);
      assertArrayEquals(new double[] {0.0, 3.0, 3.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0, denseMatrix0.rows());
      assertEquals(0, denseMatrix0.columns());
      assertEquals(0, matrix0.rows());
      assertEquals(0, matrix0.columns());
      assertNotNull(matrix0);
      
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      denseMatrix0.eachInRow(3, vectorProcedure0);
      assertTrue(denseMatrix0.equals((Object)matrix0));
      assertNotSame(denseMatrix0, matrix0);
      assertArrayEquals(new double[] {0.0, 3.0, 3.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0, denseMatrix0.rows());
      assertEquals(0, denseMatrix0.columns());
      
      org.evosuite.runtime.Random.setNextRandom(406);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new OoPlaceMatricesSubtraction();
      assertNotNull(ooPlaceMatricesSubtraction0);
      
      int int0 = 48;
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(239, 3893, 48);
      assertEquals(0.0, rowMajorSparseMatrix0.density(), 0.01);
      assertEquals(0, rowMajorSparseMatrix0.cardinality());
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      assertEquals(0.0, rowMajorSparseMatrix0.max(), 0.01);
      assertEquals(3893, rowMajorSparseMatrix0.columns());
      assertEquals(0.0, rowMajorSparseMatrix0.min(), 0.01);
      assertEquals(239, rowMajorSparseMatrix0.rows());
      assertNotNull(rowMajorSparseMatrix0);
      
      ColumnMajorMatrixIterator columnMajorMatrixIterator0 = rowMajorSparseMatrix0.columnMajorIterator();
      assertEquals(0.0, rowMajorSparseMatrix0.density(), 0.01);
      assertEquals(0, rowMajorSparseMatrix0.cardinality());
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      assertEquals(0.0, rowMajorSparseMatrix0.max(), 0.01);
      assertEquals(3893, rowMajorSparseMatrix0.columns());
      assertEquals(0.0, rowMajorSparseMatrix0.min(), 0.01);
      assertEquals(239, rowMajorSparseMatrix0.rows());
      assertNotNull(columnMajorMatrixIterator0);
      
      int int1 = 32;
      int int2 = 2041;
      int int3 = (-2157);
      OoPlaceVectorByMatrixMultiplication ooPlaceVectorByMatrixMultiplication0 = new OoPlaceVectorByMatrixMultiplication();
      assertNotNull(ooPlaceVectorByMatrixMultiplication0);
      
      // Undeclared exception!
      try { 
        DenseVector.fromArray((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.vector.dense.BasicVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      assertNotNull(ooPlaceMatricesMultiplication0);
      
      SparseMatrix sparseMatrix0 = SparseMatrix.fromCSV("");
      assertEquals(0, sparseMatrix0.rows());
      assertEquals(Double.NaN, sparseMatrix0.density(), 0.01);
      assertTrue(sparseMatrix0.isRowMajor());
      assertEquals(0, sparseMatrix0.cardinality());
      assertEquals(0.0, sparseMatrix0.max(), 0.01);
      assertEquals(0, sparseMatrix0.columns());
      assertEquals(0.0, sparseMatrix0.min(), 0.01);
      assertNotNull(sparseMatrix0);
      
      int int0 = 6;
      CompressedVector compressedVector0 = (CompressedVector)sparseMatrix0.getColumn(6);
      assertEquals(0, sparseMatrix0.rows());
      assertEquals(Double.NaN, sparseMatrix0.density(), 0.01);
      assertTrue(sparseMatrix0.isRowMajor());
      assertEquals(0, sparseMatrix0.cardinality());
      assertEquals(0.0, sparseMatrix0.max(), 0.01);
      assertEquals(0, sparseMatrix0.columns());
      assertEquals(0.0, sparseMatrix0.min(), 0.01);
      assertEquals(0, compressedVector0.length());
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      assertNotNull(compressedVector0);
      
      AdvancedMatrixPredicate advancedMatrixPredicate0 = mock(AdvancedMatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(advancedMatrixPredicate0).test(any(org.la4j.Matrix.class));
      boolean boolean0 = sparseMatrix0.is(advancedMatrixPredicate0);
      assertEquals(0, sparseMatrix0.rows());
      assertEquals(Double.NaN, sparseMatrix0.density(), 0.01);
      assertTrue(sparseMatrix0.isRowMajor());
      assertEquals(0, sparseMatrix0.cardinality());
      assertEquals(0.0, sparseMatrix0.max(), 0.01);
      assertEquals(0, sparseMatrix0.columns());
      assertEquals(0.0, sparseMatrix0.min(), 0.01);
      assertTrue(boolean0);
      
      DecimalFormat decimalFormat0 = (DecimalFormat)NumberFormat.getInstance();
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertEquals("#,##0.###", decimalFormat0.toLocalizedPattern());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertEquals("#,##0.###", decimalFormat0.toPattern());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertTrue(decimalFormat0.isGroupingUsed());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertEquals("", decimalFormat0.getPositivePrefix());
      assertEquals(3, decimalFormat0.getMaximumFractionDigits());
      assertNotNull(decimalFormat0);
      
      CCSMatrix cCSMatrix0 = (CCSMatrix)ColumnMajorSparseMatrix.diagonal(6, 6);
      assertEquals(6.0, cCSMatrix0.max(), 0.01);
      assertEquals(6, cCSMatrix0.columns());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(6, cCSMatrix0.cardinality());
      assertEquals(0.16666666666666666, cCSMatrix0.density(), 0.01);
      assertEquals(6, cCSMatrix0.rows());
      assertNotNull(cCSMatrix0);
      
      String string0 = cCSMatrix0.mkString((NumberFormat) decimalFormat0, "array", "array");
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertEquals("#,##0.###", decimalFormat0.toLocalizedPattern());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertEquals("#,##0.###", decimalFormat0.toPattern());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertTrue(decimalFormat0.isGroupingUsed());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertEquals("", decimalFormat0.getPositivePrefix());
      assertEquals(3, decimalFormat0.getMaximumFractionDigits());
      assertEquals(6.0, cCSMatrix0.max(), 0.01);
      assertEquals(6, cCSMatrix0.columns());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(6, cCSMatrix0.cardinality());
      assertEquals(0.16666666666666666, cCSMatrix0.density(), 0.01);
      assertEquals(6, cCSMatrix0.rows());
      assertEquals("6array0array0array0array0array0array0array6array0array0array0array0array0array0array6array0array0array0array0array0array0array6array0array0array0array0array0array0array6array0array0array0array0array0array0array6array", string0);
      assertNotNull(string0);
      
      // Undeclared exception!
      try { 
        sparseMatrix0.hadamardProduct(cCSMatrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Given matrices should have the same shape: 0x0 does not equal to 6x6.
         //
         verifyException("org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      assertNotNull(ooPlaceMatricesMultiplication0);
      
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertNotNull(cRSMatrix0);
      
      CRSMatrix cRSMatrix1 = (CRSMatrix)ooPlaceMatricesMultiplication0.apply((RowMajorSparseMatrix) cRSMatrix0, (RowMajorSparseMatrix) cRSMatrix0);
      assertTrue(cRSMatrix1.equals((Object)cRSMatrix0));
      assertNotSame(cRSMatrix0, cRSMatrix1);
      assertNotSame(cRSMatrix1, cRSMatrix0);
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0.0, cRSMatrix1.min(), 0.01);
      assertEquals(0, cRSMatrix1.cardinality());
      assertEquals(Double.NaN, cRSMatrix1.density(), 0.01);
      assertEquals(0, cRSMatrix1.columns());
      assertEquals(0, cRSMatrix1.rows());
      assertEquals(0.0, cRSMatrix1.max(), 0.01);
      assertTrue(cRSMatrix1.isRowMajor());
      assertNotNull(cRSMatrix1);
      
      MatrixOperation<SparseMatrix> matrixOperation0 = null;
      // Undeclared exception!
      try { 
        cRSMatrix0.sliceTopLeft(113, 113);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '0' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      assertNotNull(ooPlaceMatricesMultiplication0);
      
      SparseMatrix sparseMatrix0 = SparseMatrix.fromCSV("");
      assertEquals(0, sparseMatrix0.rows());
      assertEquals(Double.NaN, sparseMatrix0.density(), 0.01);
      assertEquals(0, sparseMatrix0.cardinality());
      assertTrue(sparseMatrix0.isRowMajor());
      assertEquals(0.0, sparseMatrix0.max(), 0.01);
      assertEquals(0, sparseMatrix0.columns());
      assertEquals(0.0, sparseMatrix0.min(), 0.01);
      assertNotNull(sparseMatrix0);
      
      CompressedVector compressedVector0 = (CompressedVector)sparseMatrix0.getColumn(6);
      assertEquals(0, sparseMatrix0.rows());
      assertEquals(Double.NaN, sparseMatrix0.density(), 0.01);
      assertEquals(0, sparseMatrix0.cardinality());
      assertTrue(sparseMatrix0.isRowMajor());
      assertEquals(0.0, sparseMatrix0.max(), 0.01);
      assertEquals(0, sparseMatrix0.columns());
      assertEquals(0.0, sparseMatrix0.min(), 0.01);
      assertEquals(0, compressedVector0.length());
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      assertNotNull(compressedVector0);
      
      AdvancedMatrixPredicate advancedMatrixPredicate0 = mock(AdvancedMatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(advancedMatrixPredicate0).test(any(org.la4j.Matrix.class));
      CRSMatrix cRSMatrix0 = (CRSMatrix)RowMajorSparseMatrix.identity(6);
      assertFalse(cRSMatrix0.equals((Object)sparseMatrix0));
      assertNotSame(cRSMatrix0, sparseMatrix0);
      assertEquals(1.0, cRSMatrix0.max(), 0.01);
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(6, cRSMatrix0.rows());
      assertEquals(0.16666666666666666, cRSMatrix0.density(), 0.01);
      assertEquals(6, cRSMatrix0.columns());
      assertEquals(6, cRSMatrix0.cardinality());
      assertNotNull(cRSMatrix0);
      
      boolean boolean0 = sparseMatrix0.is(advancedMatrixPredicate0);
      assertFalse(sparseMatrix0.equals((Object)cRSMatrix0));
      assertNotSame(sparseMatrix0, cRSMatrix0);
      assertEquals(0, sparseMatrix0.rows());
      assertEquals(Double.NaN, sparseMatrix0.density(), 0.01);
      assertEquals(0, sparseMatrix0.cardinality());
      assertTrue(sparseMatrix0.isRowMajor());
      assertEquals(0.0, sparseMatrix0.max(), 0.01);
      assertEquals(0, sparseMatrix0.columns());
      assertEquals(0.0, sparseMatrix0.min(), 0.01);
      assertFalse(boolean0);
      
      DecimalFormat decimalFormat0 = (DecimalFormat)NumberFormat.getInstance();
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertEquals("#,##0.###", decimalFormat0.toLocalizedPattern());
      assertTrue(decimalFormat0.isGroupingUsed());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertEquals(3, decimalFormat0.getMaximumFractionDigits());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertEquals("#,##0.###", decimalFormat0.toPattern());
      assertEquals("", decimalFormat0.getPositivePrefix());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertNotNull(decimalFormat0);
      
      CCSMatrix cCSMatrix0 = (CCSMatrix)ColumnMajorSparseMatrix.diagonal(6, 6);
      assertEquals(6, cCSMatrix0.columns());
      assertEquals(6, cCSMatrix0.rows());
      assertEquals(0.16666666666666666, cCSMatrix0.density(), 0.01);
      assertEquals(6.0, cCSMatrix0.max(), 0.01);
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(6, cCSMatrix0.cardinality());
      assertNotNull(cCSMatrix0);
      
      String string0 = sparseMatrix0.mkString((NumberFormat) decimalFormat0, "nu9", "nu9");
      assertFalse(sparseMatrix0.equals((Object)cRSMatrix0));
      assertNotSame(sparseMatrix0, cRSMatrix0);
      assertEquals(0, sparseMatrix0.rows());
      assertEquals(Double.NaN, sparseMatrix0.density(), 0.01);
      assertEquals(0, sparseMatrix0.cardinality());
      assertTrue(sparseMatrix0.isRowMajor());
      assertEquals(0.0, sparseMatrix0.max(), 0.01);
      assertEquals(0, sparseMatrix0.columns());
      assertEquals(0.0, sparseMatrix0.min(), 0.01);
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertEquals("#,##0.###", decimalFormat0.toLocalizedPattern());
      assertTrue(decimalFormat0.isGroupingUsed());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertEquals(3, decimalFormat0.getMaximumFractionDigits());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertEquals("#,##0.###", decimalFormat0.toPattern());
      assertEquals("", decimalFormat0.getPositivePrefix());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertEquals("", string0);
      assertNotNull(string0);
      
      Basic2DMatrix basic2DMatrix0 = (Basic2DMatrix)sparseMatrix0.toDenseMatrix();
      assertFalse(sparseMatrix0.equals((Object)cRSMatrix0));
      assertNotSame(sparseMatrix0, cRSMatrix0);
      assertEquals(0, sparseMatrix0.rows());
      assertEquals(Double.NaN, sparseMatrix0.density(), 0.01);
      assertEquals(0, sparseMatrix0.cardinality());
      assertTrue(sparseMatrix0.isRowMajor());
      assertEquals(0.0, sparseMatrix0.max(), 0.01);
      assertEquals(0, sparseMatrix0.columns());
      assertEquals(0.0, sparseMatrix0.min(), 0.01);
      assertEquals(0, basic2DMatrix0.rows());
      assertEquals(0, basic2DMatrix0.columns());
      assertNotNull(basic2DMatrix0);
      
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      basic2DMatrix0.update(matrixFunction0);
      assertFalse(sparseMatrix0.equals((Object)cRSMatrix0));
      assertNotSame(sparseMatrix0, cRSMatrix0);
      assertEquals(0, sparseMatrix0.rows());
      assertEquals(Double.NaN, sparseMatrix0.density(), 0.01);
      assertEquals(0, sparseMatrix0.cardinality());
      assertTrue(sparseMatrix0.isRowMajor());
      assertEquals(0.0, sparseMatrix0.max(), 0.01);
      assertEquals(0, sparseMatrix0.columns());
      assertEquals(0.0, sparseMatrix0.min(), 0.01);
      assertEquals(0, basic2DMatrix0.rows());
      assertEquals(0, basic2DMatrix0.columns());
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0, cRSMatrix0.rows());
      assertNotNull(cRSMatrix0);
      
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.update(matrixFunction0);
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0, cRSMatrix0.rows());
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      String string0 = cRSMatrix0.toMatrixMarket();
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0, cRSMatrix0.rows());
      assertEquals("%%MatrixMarket matrix coordinate real general row-major\n0 0 0\n", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      assertNotNull(ooPlaceMatricesMultiplication0);
      
      SparseMatrix sparseMatrix0 = SparseMatrix.fromCSV("");
      assertEquals(0, sparseMatrix0.rows());
      assertEquals(Double.NaN, sparseMatrix0.density(), 0.01);
      assertTrue(sparseMatrix0.isRowMajor());
      assertEquals(0, sparseMatrix0.cardinality());
      assertEquals(0.0, sparseMatrix0.max(), 0.01);
      assertEquals(0, sparseMatrix0.columns());
      assertEquals(0.0, sparseMatrix0.min(), 0.01);
      assertNotNull(sparseMatrix0);
      
      CompressedVector compressedVector0 = (CompressedVector)sparseMatrix0.getColumn(6);
      assertEquals(0, sparseMatrix0.rows());
      assertEquals(Double.NaN, sparseMatrix0.density(), 0.01);
      assertTrue(sparseMatrix0.isRowMajor());
      assertEquals(0, sparseMatrix0.cardinality());
      assertEquals(0.0, sparseMatrix0.max(), 0.01);
      assertEquals(0, sparseMatrix0.columns());
      assertEquals(0.0, sparseMatrix0.min(), 0.01);
      assertEquals(0, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
      assertNotNull(compressedVector0);
      
      AdvancedMatrixPredicate advancedMatrixPredicate0 = mock(AdvancedMatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(advancedMatrixPredicate0).test(any(org.la4j.Matrix.class));
      boolean boolean0 = sparseMatrix0.is(advancedMatrixPredicate0);
      assertEquals(0, sparseMatrix0.rows());
      assertEquals(Double.NaN, sparseMatrix0.density(), 0.01);
      assertTrue(sparseMatrix0.isRowMajor());
      assertEquals(0, sparseMatrix0.cardinality());
      assertEquals(0.0, sparseMatrix0.max(), 0.01);
      assertEquals(0, sparseMatrix0.columns());
      assertEquals(0.0, sparseMatrix0.min(), 0.01);
      assertFalse(boolean0);
      
      DecimalFormat decimalFormat0 = (DecimalFormat)NumberFormat.getInstance();
      assertEquals("#,##0.###", decimalFormat0.toPattern());
      assertEquals("", decimalFormat0.getPositivePrefix());
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals(3, decimalFormat0.getMaximumFractionDigits());
      assertEquals("#,##0.###", decimalFormat0.toLocalizedPattern());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertTrue(decimalFormat0.isGroupingUsed());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertNotNull(decimalFormat0);
      
      RoundingMode roundingMode0 = RoundingMode.DOWN;
      decimalFormat0.setRoundingMode(roundingMode0);
      assertEquals("#,##0.###", decimalFormat0.toPattern());
      assertEquals("", decimalFormat0.getPositivePrefix());
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals(3, decimalFormat0.getMaximumFractionDigits());
      assertEquals("#,##0.###", decimalFormat0.toLocalizedPattern());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertTrue(decimalFormat0.isGroupingUsed());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertEquals(RoundingMode.DOWN, decimalFormat0.getRoundingMode());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      
      CCSMatrix cCSMatrix0 = (CCSMatrix)ColumnMajorSparseMatrix.diagonal(6, 6);
      assertEquals(6, cCSMatrix0.rows());
      assertEquals(0.16666666666666666, cCSMatrix0.density(), 0.01);
      assertEquals(6.0, cCSMatrix0.max(), 0.01);
      assertEquals(6, cCSMatrix0.cardinality());
      assertEquals(6, cCSMatrix0.columns());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertFalse(cCSMatrix0.isRowMajor());
      assertNotNull(cCSMatrix0);
      
      String string0 = cCSMatrix0.mkString((NumberFormat) decimalFormat0, "array", "array");
      assertEquals("#,##0.###", decimalFormat0.toPattern());
      assertEquals("", decimalFormat0.getPositivePrefix());
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals(3, decimalFormat0.getMaximumFractionDigits());
      assertEquals("#,##0.###", decimalFormat0.toLocalizedPattern());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertTrue(decimalFormat0.isGroupingUsed());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertEquals(RoundingMode.DOWN, decimalFormat0.getRoundingMode());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertEquals(6, cCSMatrix0.rows());
      assertEquals(0.16666666666666666, cCSMatrix0.density(), 0.01);
      assertEquals(6.0, cCSMatrix0.max(), 0.01);
      assertEquals(6, cCSMatrix0.cardinality());
      assertEquals(6, cCSMatrix0.columns());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals("6array0array0array0array0array0array0array6array0array0array0array0array0array0array6array0array0array0array0array0array0array6array0array0array0array0array0array0array6array0array0array0array0array0array0array6array", string0);
      assertNotNull(string0);
      
      AdvancedMatrixPredicate advancedMatrixPredicate1 = mock(AdvancedMatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(advancedMatrixPredicate1).test(any(org.la4j.Matrix.class));
      boolean boolean1 = cCSMatrix0.non(advancedMatrixPredicate1);
      assertFalse(boolean1 == boolean0);
      assertEquals(6, cCSMatrix0.rows());
      assertEquals(0.16666666666666666, cCSMatrix0.density(), 0.01);
      assertEquals(6.0, cCSMatrix0.max(), 0.01);
      assertEquals(6, cCSMatrix0.cardinality());
      assertEquals(6, cCSMatrix0.columns());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertFalse(cCSMatrix0.isRowMajor());
      assertTrue(boolean1);
      
      CRSMatrix cRSMatrix0 = (CRSMatrix)cCSMatrix0.toSparseMatrix();
      assertFalse(cRSMatrix0.equals((Object)sparseMatrix0));
      assertNotSame(cRSMatrix0, sparseMatrix0);
      assertEquals(6, cCSMatrix0.rows());
      assertEquals(0.16666666666666666, cCSMatrix0.density(), 0.01);
      assertEquals(6.0, cCSMatrix0.max(), 0.01);
      assertEquals(6, cCSMatrix0.cardinality());
      assertEquals(6, cCSMatrix0.columns());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(6.0, cRSMatrix0.max(), 0.01);
      assertEquals(0.16666666666666666, cRSMatrix0.density(), 0.01);
      assertEquals(6, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(6, cRSMatrix0.cardinality());
      assertEquals(6, cRSMatrix0.columns());
      assertNotNull(cRSMatrix0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix(7, 7, 7);
      assertEquals(7, cRSMatrix0.columns());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(7, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertNotNull(cRSMatrix0);
      
      boolean boolean0 = cRSMatrix0.equals((Object) cRSMatrix0);
      assertEquals(7, cRSMatrix0.columns());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(7, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertTrue(boolean0);
      
      AdvancedMatrixPredicate advancedMatrixPredicate0 = mock(AdvancedMatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(advancedMatrixPredicate0).test(any(org.la4j.Matrix.class));
      boolean boolean1 = cRSMatrix0.non(advancedMatrixPredicate0);
      assertTrue(boolean1 == boolean0);
      assertEquals(7, cRSMatrix0.columns());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(7, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.zero(10, 10);
      assertEquals(10, columnMajorSparseMatrix0.columns());
      assertEquals(0.0, columnMajorSparseMatrix0.min(), 0.01);
      assertEquals(0, columnMajorSparseMatrix0.cardinality());
      assertEquals(0.0, columnMajorSparseMatrix0.density(), 0.01);
      assertFalse(columnMajorSparseMatrix0.isRowMajor());
      assertEquals(0.0, columnMajorSparseMatrix0.max(), 0.01);
      assertEquals(10, columnMajorSparseMatrix0.rows());
      assertNotNull(columnMajorSparseMatrix0);
      
      MatrixOperation<ColumnMajorSparseMatrix> matrixOperation0 = (MatrixOperation<ColumnMajorSparseMatrix>) mock(MatrixOperation.class, new ViolatedAssumptionAnswer());
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(10, 10, 7);
      assertEquals(10, rowMajorSparseMatrix0.columns());
      assertEquals(0, rowMajorSparseMatrix0.cardinality());
      assertEquals(0.0, rowMajorSparseMatrix0.min(), 0.01);
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      assertEquals(0.0, rowMajorSparseMatrix0.max(), 0.01);
      assertEquals(10, rowMajorSparseMatrix0.rows());
      assertEquals(0.0, rowMajorSparseMatrix0.density(), 0.01);
      assertNotNull(rowMajorSparseMatrix0);
      
      OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new OoPlaceMatricesSubtraction();
      assertNotNull(ooPlaceMatricesSubtraction0);
      
      CCSMatrix cCSMatrix0 = (CCSMatrix)ooPlaceMatricesSubtraction0.applySimple((SparseMatrix) columnMajorSparseMatrix0, (SparseMatrix) rowMajorSparseMatrix0);
      assertTrue(cCSMatrix0.equals((Object)columnMajorSparseMatrix0));
      assertNotSame(columnMajorSparseMatrix0, cCSMatrix0);
      assertNotSame(cCSMatrix0, columnMajorSparseMatrix0);
      assertEquals(10, columnMajorSparseMatrix0.columns());
      assertEquals(0.0, columnMajorSparseMatrix0.min(), 0.01);
      assertEquals(0, columnMajorSparseMatrix0.cardinality());
      assertEquals(0.0, columnMajorSparseMatrix0.density(), 0.01);
      assertFalse(columnMajorSparseMatrix0.isRowMajor());
      assertEquals(0.0, columnMajorSparseMatrix0.max(), 0.01);
      assertEquals(10, columnMajorSparseMatrix0.rows());
      assertEquals(10, rowMajorSparseMatrix0.columns());
      assertEquals(0, rowMajorSparseMatrix0.cardinality());
      assertEquals(0.0, rowMajorSparseMatrix0.min(), 0.01);
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      assertEquals(0.0, rowMajorSparseMatrix0.max(), 0.01);
      assertEquals(10, rowMajorSparseMatrix0.rows());
      assertEquals(0.0, rowMajorSparseMatrix0.density(), 0.01);
      assertEquals(10, cCSMatrix0.rows());
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(10, cCSMatrix0.columns());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(0.0, cCSMatrix0.density(), 0.01);
      assertNotNull(cCSMatrix0);
      
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(17, 7);
      assertFalse(cRSMatrix0.equals((Object)rowMajorSparseMatrix0));
      assertNotSame(cRSMatrix0, rowMajorSparseMatrix0);
      assertEquals(7, cRSMatrix0.columns());
      assertEquals(17, cRSMatrix0.rows());
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertNotNull(cRSMatrix0);
      
      CRSMatrix cRSMatrix1 = (CRSMatrix)cRSMatrix0.shuffle();
      assertFalse(cRSMatrix0.equals((Object)rowMajorSparseMatrix0));
      assertFalse(cRSMatrix1.equals((Object)rowMajorSparseMatrix0));
      assertTrue(cRSMatrix1.equals((Object)cRSMatrix0));
      assertNotSame(cRSMatrix0, rowMajorSparseMatrix0);
      assertNotSame(cRSMatrix0, cRSMatrix1);
      assertNotSame(cRSMatrix1, rowMajorSparseMatrix0);
      assertNotSame(cRSMatrix1, cRSMatrix0);
      assertEquals(7, cRSMatrix0.columns());
      assertEquals(17, cRSMatrix0.rows());
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(7, cRSMatrix1.columns());
      assertEquals(17, cRSMatrix1.rows());
      assertTrue(cRSMatrix1.isRowMajor());
      assertEquals(0, cRSMatrix1.cardinality());
      assertEquals(0.0, cRSMatrix1.max(), 0.01);
      assertEquals(0.0, cRSMatrix1.density(), 0.01);
      assertEquals(0.0, cRSMatrix1.min(), 0.01);
      assertNotNull(cRSMatrix1);
      
      // Undeclared exception!
      try { 
        cRSMatrix1.determinant();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Can not compute determinant of non-square matrix.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      OoPlaceOuterProduct ooPlaceOuterProduct0 = new OoPlaceOuterProduct();
      assertNotNull(ooPlaceOuterProduct0);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-541.5277325);
      doubleArray0[1] = (-1559.47819);
      doubleArray0[2] = 4493.9384450512725;
      doubleArray0[3] = Double.NEGATIVE_INFINITY;
      doubleArray0[4] = 0.5;
      doubleArray0[5] = 1934.7;
      doubleArray0[6] = (-1.0);
      DenseVector denseVector0 = DenseVector.fromArray(doubleArray0);
      assertArrayEquals(new double[] {(-541.5277325), (-1559.47819), 4493.9384450512725, Double.NEGATIVE_INFINITY, 0.5, 1934.7, (-1.0)}, doubleArray0, 0.01);
      assertEquals(7, denseVector0.length());
      assertNotNull(denseVector0);
      
      Matrix matrix0 = ooPlaceOuterProduct0.apply(denseVector0, denseVector0);
      assertArrayEquals(new double[] {(-541.5277325), (-1559.47819), 4493.9384450512725, Double.NEGATIVE_INFINITY, 0.5, 1934.7, (-1.0)}, doubleArray0, 0.01);
      assertEquals(7, denseVector0.length());
      assertEquals(7, matrix0.columns());
      assertEquals(7, matrix0.rows());
      assertNotNull(matrix0);
      
      String string0 = matrix0.toCSV();
      assertArrayEquals(new double[] {(-541.5277325), (-1559.47819), 4493.9384450512725, Double.NEGATIVE_INFINITY, 0.5, 1934.7, (-1.0)}, doubleArray0, 0.01);
      assertEquals(7, denseVector0.length());
      assertEquals(7, matrix0.columns());
      assertEquals(7, matrix0.rows());
      assertEquals("  293252.285,   844500.688, -2433592.296,  \u221E, -270.764, -1047693.704,   541.528\n  844500.688,  2431972.225, -7008198.992,  \u221E, -779.739, -3017122.454,  1559.478\n-2433592.296, -7008198.992, 20195482.748, -\u221E, 2246.969,  8694422.710, -4493.938\n           \u221E,            \u221E,           -\u221E,  \u221E,       -\u221E,           -\u221E,         \u221E\n    -270.764,     -779.739,     2246.969, -\u221E,    0.250,      967.350,    -0.500\n-1047693.704, -3017122.454,  8694422.710, -\u221E,  967.350,  3743064.090, -1934.700\n     541.528,     1559.478,    -4493.938,  \u221E,   -0.500,    -1934.700,     1.000\n", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Matrix matrix0 = Matrix.unit(10, 10);
      assertEquals(10, matrix0.rows());
      assertEquals(10, matrix0.columns());
      assertNotNull(matrix0);
      
      MatrixOperation<ColumnMajorSparseMatrix> matrixOperation0 = (MatrixOperation<ColumnMajorSparseMatrix>) mock(MatrixOperation.class, new ViolatedAssumptionAnswer());
      MatrixMatrixOperation<ColumnMajorSparseMatrix> matrixMatrixOperation0 = (MatrixMatrixOperation<ColumnMajorSparseMatrix>) mock(MatrixMatrixOperation.class, new ViolatedAssumptionAnswer());
      CRSMatrix cRSMatrix0 = new CRSMatrix(2194, 2194, 10);
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(2194, cRSMatrix0.columns());
      assertEquals(2194, cRSMatrix0.rows());
      assertNotNull(cRSMatrix0);
      
      CompressedVector compressedVector0 = (CompressedVector)cRSMatrix0.getColumn(2194);
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(2194, cRSMatrix0.columns());
      assertEquals(2194, cRSMatrix0.rows());
      assertEquals(2194, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertNotNull(compressedVector0);
      
      AdvancedMatrixPredicate advancedMatrixPredicate0 = mock(AdvancedMatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(advancedMatrixPredicate0).test(any(org.la4j.Matrix.class));
      boolean boolean0 = cRSMatrix0.is(advancedMatrixPredicate0);
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(2194, cRSMatrix0.columns());
      assertEquals(2194, cRSMatrix0.rows());
      assertFalse(boolean0);
      
      DecimalFormat decimalFormat0 = (DecimalFormat)NumberFormat.getInstance();
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertEquals("#,##0.###", decimalFormat0.toLocalizedPattern());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertEquals("#,##0.###", decimalFormat0.toPattern());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertTrue(decimalFormat0.isGroupingUsed());
      assertEquals("", decimalFormat0.getPositivePrefix());
      assertEquals(3, decimalFormat0.getMaximumFractionDigits());
      assertNotNull(decimalFormat0);
      
      CCSMatrix cCSMatrix0 = (CCSMatrix)ColumnMajorSparseMatrix.diagonal(10, 2194);
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(10, cCSMatrix0.cardinality());
      assertEquals(0.1, cCSMatrix0.density(), 0.01);
      assertEquals(10, cCSMatrix0.rows());
      assertEquals(10, cCSMatrix0.columns());
      assertEquals(2194.0, cCSMatrix0.max(), 0.01);
      assertNotNull(cCSMatrix0);
      
      String string0 = cCSMatrix0.mkString((NumberFormat) decimalFormat0, "array", "array");
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertEquals("#,##0.###", decimalFormat0.toLocalizedPattern());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertEquals("#,##0.###", decimalFormat0.toPattern());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertTrue(decimalFormat0.isGroupingUsed());
      assertEquals("", decimalFormat0.getPositivePrefix());
      assertEquals(3, decimalFormat0.getMaximumFractionDigits());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(10, cCSMatrix0.cardinality());
      assertEquals(0.1, cCSMatrix0.density(), 0.01);
      assertEquals(10, cCSMatrix0.rows());
      assertEquals(10, cCSMatrix0.columns());
      assertEquals(2194.0, cCSMatrix0.max(), 0.01);
      assertEquals("2,194array    0array    0array    0array    0array    0array    0array    0array    0array    0array    0array2,194array    0array    0array    0array    0array    0array    0array    0array    0array    0array    0array2,194array    0array    0array    0array    0array    0array    0array    0array    0array    0array    0array2,194array    0array    0array    0array    0array    0array    0array    0array    0array    0array    0array2,194array    0array    0array    0array    0array    0array    0array    0array    0array    0array    0array2,194array    0array    0array    0array    0array    0array    0array    0array    0array    0array    0array2,194array    0array    0array    0array    0array    0array    0array    0array    0array    0array    0array2,194array    0array    0array    0array    0array    0array    0array    0array    0array    0array    0array2,194array    0array    0array    0array    0array    0array    0array    0array    0array    0array    0array2,194array", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.diagonal(4, 4);
      assertEquals(4, denseMatrix0.rows());
      assertEquals(4, denseMatrix0.columns());
      assertNotNull(denseMatrix0);
      
      double double0 = denseMatrix0.determinant();
      assertEquals(4, denseMatrix0.rows());
      assertEquals(4, denseMatrix0.columns());
      assertEquals(256.0, double0, 0.01);
      
      Vector vector0 = denseMatrix0.toRowVector();
      assertEquals(4, denseMatrix0.rows());
      assertEquals(4, denseMatrix0.columns());
      assertEquals(4, vector0.length());
      assertNotNull(vector0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0, cRSMatrix0.rows());
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(0, cRSMatrix0.cardinality());
      assertNotNull(cRSMatrix0);
      
      double double0 = cRSMatrix0.diagonalProduct();
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0, cRSMatrix0.rows());
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      assertNotNull(ooPlaceMatricesMultiplication0);
      
      SparseMatrix sparseMatrix0 = SparseMatrix.fromCSV("");
      assertEquals(0, sparseMatrix0.rows());
      assertEquals(Double.NaN, sparseMatrix0.density(), 0.01);
      assertTrue(sparseMatrix0.isRowMajor());
      assertEquals(0.0, sparseMatrix0.min(), 0.01);
      assertEquals(0, sparseMatrix0.columns());
      assertEquals(0, sparseMatrix0.cardinality());
      assertEquals(0.0, sparseMatrix0.max(), 0.01);
      assertNotNull(sparseMatrix0);
      
      CompressedVector compressedVector0 = (CompressedVector)sparseMatrix0.getColumn(6);
      assertEquals(0, sparseMatrix0.rows());
      assertEquals(Double.NaN, sparseMatrix0.density(), 0.01);
      assertTrue(sparseMatrix0.isRowMajor());
      assertEquals(0.0, sparseMatrix0.min(), 0.01);
      assertEquals(0, sparseMatrix0.columns());
      assertEquals(0, sparseMatrix0.cardinality());
      assertEquals(0.0, sparseMatrix0.max(), 0.01);
      assertEquals(0, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
      assertNotNull(compressedVector0);
      
      AdvancedMatrixPredicate advancedMatrixPredicate0 = mock(AdvancedMatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(advancedMatrixPredicate0).test(any(org.la4j.Matrix.class));
      boolean boolean0 = sparseMatrix0.is(advancedMatrixPredicate0);
      assertEquals(0, sparseMatrix0.rows());
      assertEquals(Double.NaN, sparseMatrix0.density(), 0.01);
      assertTrue(sparseMatrix0.isRowMajor());
      assertEquals(0.0, sparseMatrix0.min(), 0.01);
      assertEquals(0, sparseMatrix0.columns());
      assertEquals(0, sparseMatrix0.cardinality());
      assertEquals(0.0, sparseMatrix0.max(), 0.01);
      assertFalse(boolean0);
      
      DecimalFormat decimalFormat0 = (DecimalFormat)NumberFormat.getInstance();
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertEquals("#,##0.###", decimalFormat0.toPattern());
      assertEquals("", decimalFormat0.getPositivePrefix());
      assertEquals(3, decimalFormat0.getMaximumFractionDigits());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertTrue(decimalFormat0.isGroupingUsed());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertEquals("#,##0.###", decimalFormat0.toLocalizedPattern());
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertNotNull(decimalFormat0);
      
      RoundingMode roundingMode0 = RoundingMode.DOWN;
      decimalFormat0.setRoundingMode(roundingMode0);
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertEquals("#,##0.###", decimalFormat0.toPattern());
      assertEquals("", decimalFormat0.getPositivePrefix());
      assertEquals(3, decimalFormat0.getMaximumFractionDigits());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertTrue(decimalFormat0.isGroupingUsed());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertEquals(RoundingMode.DOWN, decimalFormat0.getRoundingMode());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertEquals("#,##0.###", decimalFormat0.toLocalizedPattern());
      assertEquals("-", decimalFormat0.getNegativePrefix());
      
      CCSMatrix cCSMatrix0 = (CCSMatrix)ColumnMajorSparseMatrix.diagonal(6, 6);
      assertEquals(6, cCSMatrix0.rows());
      assertEquals(0.16666666666666666, cCSMatrix0.density(), 0.01);
      assertEquals(6.0, cCSMatrix0.max(), 0.01);
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(6, cCSMatrix0.columns());
      assertEquals(6, cCSMatrix0.cardinality());
      assertNotNull(cCSMatrix0);
      
      String string0 = cCSMatrix0.mkString((NumberFormat) decimalFormat0, "array", "array");
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertEquals("#,##0.###", decimalFormat0.toPattern());
      assertEquals("", decimalFormat0.getPositivePrefix());
      assertEquals(3, decimalFormat0.getMaximumFractionDigits());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertTrue(decimalFormat0.isGroupingUsed());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertEquals(RoundingMode.DOWN, decimalFormat0.getRoundingMode());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertEquals("#,##0.###", decimalFormat0.toLocalizedPattern());
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertEquals(6, cCSMatrix0.rows());
      assertEquals(0.16666666666666666, cCSMatrix0.density(), 0.01);
      assertEquals(6.0, cCSMatrix0.max(), 0.01);
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(6, cCSMatrix0.columns());
      assertEquals(6, cCSMatrix0.cardinality());
      assertEquals("6array0array0array0array0array0array0array6array0array0array0array0array0array0array6array0array0array0array0array0array0array6array0array0array0array0array0array0array6array0array0array0array0array0array0array6array", string0);
      assertNotNull(string0);
      
      AdvancedMatrixPredicate advancedMatrixPredicate1 = mock(AdvancedMatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(advancedMatrixPredicate1).test(any(org.la4j.Matrix.class));
      boolean boolean1 = cCSMatrix0.non(advancedMatrixPredicate1);
      assertTrue(boolean1 == boolean0);
      assertEquals(6, cCSMatrix0.rows());
      assertEquals(0.16666666666666666, cCSMatrix0.density(), 0.01);
      assertEquals(6.0, cCSMatrix0.max(), 0.01);
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(6, cCSMatrix0.columns());
      assertEquals(6, cCSMatrix0.cardinality());
      assertFalse(boolean1);
      
      CompressedVector compressedVector1 = (CompressedVector)cCSMatrix0.toRowVector();
      assertFalse(compressedVector1.equals((Object)compressedVector0));
      assertNotSame(compressedVector1, compressedVector0);
      assertEquals(6, cCSMatrix0.rows());
      assertEquals(0.16666666666666666, cCSMatrix0.density(), 0.01);
      assertEquals(6.0, cCSMatrix0.max(), 0.01);
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(6, cCSMatrix0.columns());
      assertEquals(6, cCSMatrix0.cardinality());
      assertEquals(0.16666666666666666, compressedVector1.density(), 0.01);
      assertEquals(6, compressedVector1.length());
      assertEquals(1, compressedVector1.cardinality());
      assertNotNull(compressedVector1);
      
      // Undeclared exception!
      try { 
        sparseMatrix0.insert((Matrix) cCSMatrix0, 6, 6);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Out of bounds: Cannot add 6 rows and 6 cols at 0, 0 in a 0x0 matrix.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.zero(4, 4);
      assertEquals(4, denseMatrix0.rows());
      assertEquals(4, denseMatrix0.columns());
      assertNotNull(denseMatrix0);
      
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(17, 17);
      assertEquals(0.0, rowMajorSparseMatrix0.max(), 0.01);
      assertEquals(17, rowMajorSparseMatrix0.rows());
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      assertEquals(0.0, rowMajorSparseMatrix0.density(), 0.01);
      assertEquals(0.0, rowMajorSparseMatrix0.min(), 0.01);
      assertEquals(17, rowMajorSparseMatrix0.columns());
      assertEquals(0, rowMajorSparseMatrix0.cardinality());
      assertNotNull(rowMajorSparseMatrix0);
      
      boolean boolean0 = rowMajorSparseMatrix0.equals((Matrix) denseMatrix0, (double) 4);
      assertEquals(4, denseMatrix0.rows());
      assertEquals(4, denseMatrix0.columns());
      assertEquals(0.0, rowMajorSparseMatrix0.max(), 0.01);
      assertEquals(17, rowMajorSparseMatrix0.rows());
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      assertEquals(0.0, rowMajorSparseMatrix0.density(), 0.01);
      assertEquals(0.0, rowMajorSparseMatrix0.min(), 0.01);
      assertEquals(17, rowMajorSparseMatrix0.columns());
      assertEquals(0, rowMajorSparseMatrix0.cardinality());
      assertFalse(boolean0);
      
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      assertNotNull(ooPlaceMatricesMultiplication0);
      
      // Undeclared exception!
      try { 
        DenseMatrix.fromCSV("Unknown format: ");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      DenseVector denseVector0 = DenseVector.fromCollection(linkedList0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, denseVector0.length());
      assertNotNull(denseVector0);
      
      Matrix matrix0 = denseVector0.toColumnMatrix();
      assertEquals(0, linkedList0.size());
      assertEquals(0, denseVector0.length());
      assertEquals(0, matrix0.columns());
      assertEquals(0, matrix0.rows());
      assertNotNull(matrix0);
      
      boolean boolean0 = matrix0.equals(matrix0, (-674.3374882582276));
      assertEquals(0, linkedList0.size());
      assertEquals(0, denseVector0.length());
      assertEquals(0, matrix0.columns());
      assertEquals(0, matrix0.rows());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.zero(10, 10);
      assertEquals(0.0, columnMajorSparseMatrix0.min(), 0.01);
      assertEquals(10, columnMajorSparseMatrix0.columns());
      assertEquals(0, columnMajorSparseMatrix0.cardinality());
      assertEquals(10, columnMajorSparseMatrix0.rows());
      assertEquals(0.0, columnMajorSparseMatrix0.density(), 0.01);
      assertEquals(0.0, columnMajorSparseMatrix0.max(), 0.01);
      assertFalse(columnMajorSparseMatrix0.isRowMajor());
      assertNotNull(columnMajorSparseMatrix0);
      
      MatrixOperation<ColumnMajorSparseMatrix> matrixOperation0 = (MatrixOperation<ColumnMajorSparseMatrix>) mock(MatrixOperation.class, new ViolatedAssumptionAnswer());
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(10, 10, 7);
      assertEquals(10, rowMajorSparseMatrix0.columns());
      assertEquals(0.0, rowMajorSparseMatrix0.min(), 0.01);
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      assertEquals(0.0, rowMajorSparseMatrix0.max(), 0.01);
      assertEquals(0, rowMajorSparseMatrix0.cardinality());
      assertEquals(10, rowMajorSparseMatrix0.rows());
      assertEquals(0.0, rowMajorSparseMatrix0.density(), 0.01);
      assertNotNull(rowMajorSparseMatrix0);
      
      double double0 = columnMajorSparseMatrix0.determinant();
      assertEquals(0.0, columnMajorSparseMatrix0.min(), 0.01);
      assertEquals(10, columnMajorSparseMatrix0.columns());
      assertEquals(0, columnMajorSparseMatrix0.cardinality());
      assertEquals(10, columnMajorSparseMatrix0.rows());
      assertEquals(0.0, columnMajorSparseMatrix0.density(), 0.01);
      assertEquals(0.0, columnMajorSparseMatrix0.max(), 0.01);
      assertFalse(columnMajorSparseMatrix0.isRowMajor());
      assertEquals(0.0, double0, 0.01);
      
      String string0 = columnMajorSparseMatrix0.toMatrixMarket();
      assertEquals(0.0, columnMajorSparseMatrix0.min(), 0.01);
      assertEquals(10, columnMajorSparseMatrix0.columns());
      assertEquals(0, columnMajorSparseMatrix0.cardinality());
      assertEquals(10, columnMajorSparseMatrix0.rows());
      assertEquals(0.0, columnMajorSparseMatrix0.density(), 0.01);
      assertEquals(0.0, columnMajorSparseMatrix0.max(), 0.01);
      assertFalse(columnMajorSparseMatrix0.isRowMajor());
      assertEquals("%%MatrixMarket matrix coordinate real general column-major\n10 10 0\n", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.zero(10, 10);
      assertEquals(0.0, columnMajorSparseMatrix0.min(), 0.01);
      assertEquals(0, columnMajorSparseMatrix0.cardinality());
      assertEquals(0.0, columnMajorSparseMatrix0.max(), 0.01);
      assertEquals(10, columnMajorSparseMatrix0.rows());
      assertFalse(columnMajorSparseMatrix0.isRowMajor());
      assertEquals(0.0, columnMajorSparseMatrix0.density(), 0.01);
      assertEquals(10, columnMajorSparseMatrix0.columns());
      assertNotNull(columnMajorSparseMatrix0);
      
      MatrixOperation<ColumnMajorSparseMatrix> matrixOperation0 = (MatrixOperation<ColumnMajorSparseMatrix>) mock(MatrixOperation.class, new ViolatedAssumptionAnswer());
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(10, 10, 7);
      assertEquals(0.0, rowMajorSparseMatrix0.min(), 0.01);
      assertEquals(0, rowMajorSparseMatrix0.cardinality());
      assertEquals(0.0, rowMajorSparseMatrix0.density(), 0.01);
      assertEquals(10, rowMajorSparseMatrix0.rows());
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      assertEquals(10, rowMajorSparseMatrix0.columns());
      assertEquals(0.0, rowMajorSparseMatrix0.max(), 0.01);
      assertNotNull(rowMajorSparseMatrix0);
      
      RowMajorSparseMatrix rowMajorSparseMatrix1 = rowMajorSparseMatrix0.toRowMajorSparseMatrix();
      assertSame(rowMajorSparseMatrix0, rowMajorSparseMatrix1);
      assertSame(rowMajorSparseMatrix1, rowMajorSparseMatrix0);
      assertEquals(0.0, rowMajorSparseMatrix0.min(), 0.01);
      assertEquals(0, rowMajorSparseMatrix0.cardinality());
      assertEquals(0.0, rowMajorSparseMatrix0.density(), 0.01);
      assertEquals(10, rowMajorSparseMatrix0.rows());
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      assertEquals(10, rowMajorSparseMatrix0.columns());
      assertEquals(0.0, rowMajorSparseMatrix0.max(), 0.01);
      assertEquals(10, rowMajorSparseMatrix1.rows());
      assertEquals(0.0, rowMajorSparseMatrix1.density(), 0.01);
      assertEquals(0.0, rowMajorSparseMatrix1.min(), 0.01);
      assertEquals(10, rowMajorSparseMatrix1.columns());
      assertTrue(rowMajorSparseMatrix1.isRowMajor());
      assertEquals(0.0, rowMajorSparseMatrix1.max(), 0.01);
      assertEquals(0, rowMajorSparseMatrix1.cardinality());
      assertNotNull(rowMajorSparseMatrix1);
      
      double double0 = columnMajorSparseMatrix0.determinant();
      assertEquals(0.0, columnMajorSparseMatrix0.min(), 0.01);
      assertEquals(0, columnMajorSparseMatrix0.cardinality());
      assertEquals(0.0, columnMajorSparseMatrix0.max(), 0.01);
      assertEquals(10, columnMajorSparseMatrix0.rows());
      assertFalse(columnMajorSparseMatrix0.isRowMajor());
      assertEquals(0.0, columnMajorSparseMatrix0.density(), 0.01);
      assertEquals(10, columnMajorSparseMatrix0.columns());
      assertEquals(0.0, double0, 0.01);
      
      // Undeclared exception!
      try { 
        rowMajorSparseMatrix0.non((MatrixPredicate) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(0, 0, 0);
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(0, cRSMatrix0.cardinality());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(0, cRSMatrix0.rows());
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertNotNull(cRSMatrix0);
      
      CRSMatrix cRSMatrix1 = (CRSMatrix)cRSMatrix0.multiplyByItsTranspose();
      assertTrue(cRSMatrix1.equals((Object)cRSMatrix0));
      assertNotSame(cRSMatrix0, cRSMatrix1);
      assertNotSame(cRSMatrix1, cRSMatrix0);
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(0, cRSMatrix0.cardinality());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(0, cRSMatrix0.rows());
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix1.rows());
      assertTrue(cRSMatrix1.isRowMajor());
      assertEquals(Double.NaN, cRSMatrix1.density(), 0.01);
      assertEquals(0, cRSMatrix1.cardinality());
      assertEquals(0.0, cRSMatrix1.max(), 0.01);
      assertEquals(0, cRSMatrix1.columns());
      assertEquals(0.0, cRSMatrix1.min(), 0.01);
      assertNotNull(cRSMatrix1);
      
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(matrixPredicate0).test(anyInt() , anyInt());
      boolean boolean0 = cRSMatrix1.is(matrixPredicate0);
      assertTrue(cRSMatrix0.equals((Object)cRSMatrix1));
      assertTrue(cRSMatrix1.equals((Object)cRSMatrix0));
      assertNotSame(cRSMatrix0, cRSMatrix1);
      assertNotSame(cRSMatrix1, cRSMatrix0);
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(0, cRSMatrix0.cardinality());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(0, cRSMatrix0.rows());
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix1.rows());
      assertTrue(cRSMatrix1.isRowMajor());
      assertEquals(Double.NaN, cRSMatrix1.density(), 0.01);
      assertEquals(0, cRSMatrix1.cardinality());
      assertEquals(0.0, cRSMatrix1.max(), 0.01);
      assertEquals(0, cRSMatrix1.columns());
      assertEquals(0.0, cRSMatrix1.min(), 0.01);
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        cRSMatrix1.insert((Matrix) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new OoPlaceMatricesSubtraction();
      assertNotNull(ooPlaceMatricesSubtraction0);
      
      DenseMatrix denseMatrix0 = DenseMatrix.identity(1485);
      assertEquals(1485, denseMatrix0.rows());
      assertEquals(1485, denseMatrix0.columns());
      assertNotNull(denseMatrix0);
      
      DenseVector denseVector0 = DenseVector.zero(1485);
      assertEquals(1485, denseVector0.length());
      assertNotNull(denseVector0);
      
      Matrix matrix0 = denseMatrix0.sliceBottomRight(1485, 1082);
      assertFalse(matrix0.equals((Object)denseMatrix0));
      assertNotSame(denseMatrix0, matrix0);
      assertNotSame(matrix0, denseMatrix0);
      assertEquals(1485, denseMatrix0.rows());
      assertEquals(1485, denseMatrix0.columns());
      assertEquals(0, matrix0.rows());
      assertEquals(0, matrix0.columns());
      assertNotNull(matrix0);
      
      Matrix matrix1 = denseMatrix0.insertRow(0, denseVector0);
      AdvancedMatrixPredicate advancedMatrixPredicate0 = mock(AdvancedMatrixPredicate.class, new ViolatedAssumptionAnswer());
      matrix1.non(advancedMatrixPredicate0);
      String string0 = "Out of bounds: Cannot get ";
      SparseMatrix sparseMatrix0 = SparseMatrix.fromMatrixMarket(string0);
      sparseMatrix0.toRowVector();
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.zero(31, 31);
      assertEquals(0.0, columnMajorSparseMatrix0.max(), 0.01);
      assertFalse(columnMajorSparseMatrix0.isRowMajor());
      assertEquals(31, columnMajorSparseMatrix0.rows());
      assertEquals(0.0, columnMajorSparseMatrix0.density(), 0.01);
      assertEquals(0.0, columnMajorSparseMatrix0.min(), 0.01);
      assertEquals(0, columnMajorSparseMatrix0.cardinality());
      assertEquals(31, columnMajorSparseMatrix0.columns());
      assertNotNull(columnMajorSparseMatrix0);
      
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(31, 1075, 3857);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(31, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(1075, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertNotNull(cRSMatrix0);
      
      CRSMatrix cRSMatrix1 = (CRSMatrix)cRSMatrix0.multiplyByItsTranspose();
      assertFalse(cRSMatrix1.equals((Object)cRSMatrix0));
      assertNotSame(cRSMatrix0, cRSMatrix1);
      assertNotSame(cRSMatrix1, cRSMatrix0);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(31, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(1075, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertEquals(31, cRSMatrix1.rows());
      assertEquals(0.0, cRSMatrix1.min(), 0.01);
      assertEquals(0, cRSMatrix1.cardinality());
      assertEquals(0.0, cRSMatrix1.density(), 0.01);
      assertTrue(cRSMatrix1.isRowMajor());
      assertEquals(31, cRSMatrix1.columns());
      assertEquals(0.0, cRSMatrix1.max(), 0.01);
      assertNotNull(cRSMatrix1);
      
      CCSMatrix cCSMatrix0 = (CCSMatrix)cRSMatrix0.toColumnMajorSparseMatrix();
      cRSMatrix1.insert((Matrix) cCSMatrix0);
      columnMajorSparseMatrix0.product();
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      DoubleStream doubleStream0 = mockRandom0.doubles();
      assertNotNull(doubleStream0);
      
      DenseMatrix denseMatrix0 = DenseMatrix.random(0, 0, mockRandom0);
      assertEquals(0, denseMatrix0.columns());
      assertEquals(0, denseMatrix0.rows());
      assertNotNull(denseMatrix0);
      
      OoPlaceMatrixByVectorMultiplication ooPlaceMatrixByVectorMultiplication0 = new OoPlaceMatrixByVectorMultiplication();
      assertNotNull(ooPlaceMatrixByVectorMultiplication0);
      
      double[] doubleArray0 = new double[1];
      SparseVector sparseVector0 = SparseVector.fromArray(doubleArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(0.0, sparseVector0.density(), 0.01);
      assertEquals(1, sparseVector0.length());
      assertEquals(0, sparseVector0.cardinality());
      assertNotNull(sparseVector0);
      
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(7, 7, 0);
      assertEquals(7, rowMajorSparseMatrix0.rows());
      assertEquals(0.0, rowMajorSparseMatrix0.density(), 0.01);
      assertEquals(0.0, rowMajorSparseMatrix0.min(), 0.01);
      assertEquals(7, rowMajorSparseMatrix0.columns());
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      assertEquals(0, rowMajorSparseMatrix0.cardinality());
      assertEquals(0.0, rowMajorSparseMatrix0.max(), 0.01);
      assertNotNull(rowMajorSparseMatrix0);
      
      CompressedVector compressedVector0 = (CompressedVector)rowMajorSparseMatrix0.getColumn(1060);
      assertFalse(compressedVector0.equals((Object)sparseVector0));
      assertNotSame(compressedVector0, sparseVector0);
      assertEquals(7, rowMajorSparseMatrix0.rows());
      assertEquals(0.0, rowMajorSparseMatrix0.density(), 0.01);
      assertEquals(0.0, rowMajorSparseMatrix0.min(), 0.01);
      assertEquals(7, rowMajorSparseMatrix0.columns());
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      assertEquals(0, rowMajorSparseMatrix0.cardinality());
      assertEquals(0.0, rowMajorSparseMatrix0.max(), 0.01);
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(7, compressedVector0.length());
      assertNotNull(compressedVector0);
      
      CompressedVector compressedVector1 = (CompressedVector)rowMajorSparseMatrix0.toRowVector();
      assertTrue(compressedVector1.equals((Object)compressedVector0));
      assertFalse(compressedVector1.equals((Object)sparseVector0));
      assertNotSame(compressedVector1, sparseVector0);
      assertNotSame(compressedVector1, compressedVector0);
      assertEquals(7, rowMajorSparseMatrix0.rows());
      assertEquals(0.0, rowMajorSparseMatrix0.density(), 0.01);
      assertEquals(0.0, rowMajorSparseMatrix0.min(), 0.01);
      assertEquals(7, rowMajorSparseMatrix0.columns());
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      assertEquals(0, rowMajorSparseMatrix0.cardinality());
      assertEquals(0.0, rowMajorSparseMatrix0.max(), 0.01);
      assertEquals(7, compressedVector1.length());
      assertEquals(0.0, compressedVector1.density(), 0.01);
      assertEquals(0, compressedVector1.cardinality());
      assertNotNull(compressedVector1);
      
      Basic2DMatrix basic2DMatrix0 = (Basic2DMatrix)rowMajorSparseMatrix0.add((double) 0);
      assertFalse(basic2DMatrix0.equals((Object)denseMatrix0));
      assertNotSame(basic2DMatrix0, denseMatrix0);
      assertEquals(7, rowMajorSparseMatrix0.rows());
      assertEquals(0.0, rowMajorSparseMatrix0.density(), 0.01);
      assertEquals(0.0, rowMajorSparseMatrix0.min(), 0.01);
      assertEquals(7, rowMajorSparseMatrix0.columns());
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      assertEquals(0, rowMajorSparseMatrix0.cardinality());
      assertEquals(0.0, rowMajorSparseMatrix0.max(), 0.01);
      assertEquals(7, basic2DMatrix0.columns());
      assertEquals(7, basic2DMatrix0.rows());
      assertNotNull(basic2DMatrix0);
      
      Basic2DMatrix basic2DMatrix1 = (Basic2DMatrix)basic2DMatrix0.add((Matrix) rowMajorSparseMatrix0);
      assertFalse(basic2DMatrix0.equals((Object)denseMatrix0));
      assertFalse(basic2DMatrix1.equals((Object)denseMatrix0));
      assertTrue(basic2DMatrix1.equals((Object)basic2DMatrix0));
      assertNotSame(basic2DMatrix0, basic2DMatrix1);
      assertNotSame(basic2DMatrix0, denseMatrix0);
      assertNotSame(basic2DMatrix1, denseMatrix0);
      assertNotSame(basic2DMatrix1, basic2DMatrix0);
      assertEquals(7, rowMajorSparseMatrix0.rows());
      assertEquals(0.0, rowMajorSparseMatrix0.density(), 0.01);
      assertEquals(0.0, rowMajorSparseMatrix0.min(), 0.01);
      assertEquals(7, rowMajorSparseMatrix0.columns());
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      assertEquals(0, rowMajorSparseMatrix0.cardinality());
      assertEquals(0.0, rowMajorSparseMatrix0.max(), 0.01);
      assertEquals(7, basic2DMatrix0.columns());
      assertEquals(7, basic2DMatrix0.rows());
      assertEquals(7, basic2DMatrix1.columns());
      assertEquals(7, basic2DMatrix1.rows());
      assertNotNull(basic2DMatrix1);
      
      // Undeclared exception!
      try { 
        Matrix.random(17, (-623), mockRandom0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(832, 832, 37);
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(832, cRSMatrix0.rows());
      assertEquals(832, cRSMatrix0.columns());
      assertEquals(0, cRSMatrix0.cardinality());
      assertNotNull(cRSMatrix0);
      
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(matrixPredicate0).test(anyInt() , anyInt());
      boolean boolean0 = cRSMatrix0.non(matrixPredicate0);
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(832, cRSMatrix0.rows());
      assertEquals(832, cRSMatrix0.columns());
      assertEquals(0, cRSMatrix0.cardinality());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Matrix.zero(1079, 147);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(7, 528, 0);
      assertEquals(0, rowMajorSparseMatrix0.cardinality());
      assertEquals(0.0, rowMajorSparseMatrix0.min(), 0.01);
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      assertEquals(0.0, rowMajorSparseMatrix0.density(), 0.01);
      assertEquals(7, rowMajorSparseMatrix0.rows());
      assertEquals(0.0, rowMajorSparseMatrix0.max(), 0.01);
      assertEquals(528, rowMajorSparseMatrix0.columns());
      assertNotNull(rowMajorSparseMatrix0);
      
      rowMajorSparseMatrix0.mkString("Opw_/:3A-m}", (String) null);
      rowMajorSparseMatrix0.slice(0, 7, (-921), 7);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(0, 0, 0);
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.rows());
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(0, cRSMatrix0.cardinality());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertNotNull(cRSMatrix0);
      
      Matrix matrix0 = Matrix.zero(0, 147);
      assertEquals(0, matrix0.rows());
      assertEquals(0, matrix0.columns());
      assertNotNull(matrix0);
      
      double double0 = cRSMatrix0.euclideanNorm();
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.rows());
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(0, cRSMatrix0.cardinality());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(0.0, double0, 0.01);
      
      CRSMatrix cRSMatrix1 = (CRSMatrix)cRSMatrix0.multiplyByItsTranspose();
      assertTrue(cRSMatrix1.equals((Object)cRSMatrix0));
      assertNotSame(cRSMatrix0, cRSMatrix1);
      assertNotSame(cRSMatrix1, cRSMatrix0);
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.rows());
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(0, cRSMatrix0.cardinality());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(0.0, cRSMatrix1.min(), 0.01);
      assertEquals(0, cRSMatrix1.cardinality());
      assertTrue(cRSMatrix1.isRowMajor());
      assertEquals(0.0, cRSMatrix1.max(), 0.01);
      assertEquals(0, cRSMatrix1.rows());
      assertEquals(0, cRSMatrix1.columns());
      assertEquals(Double.NaN, cRSMatrix1.density(), 0.01);
      assertNotNull(cRSMatrix1);
      
      CRSMatrix cRSMatrix2 = (CRSMatrix)cRSMatrix0.insert((Matrix) cRSMatrix1);
      assertTrue(cRSMatrix0.equals((Object)cRSMatrix1));
      assertTrue(cRSMatrix1.equals((Object)cRSMatrix0));
      assertTrue(cRSMatrix2.equals((Object)cRSMatrix1));
      assertTrue(cRSMatrix2.equals((Object)cRSMatrix0));
      assertNotSame(cRSMatrix0, cRSMatrix1);
      assertNotSame(cRSMatrix0, cRSMatrix2);
      assertNotSame(cRSMatrix1, cRSMatrix2);
      assertNotSame(cRSMatrix1, cRSMatrix0);
      assertNotSame(cRSMatrix2, cRSMatrix0);
      assertNotSame(cRSMatrix2, cRSMatrix1);
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.rows());
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(0, cRSMatrix0.cardinality());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(0.0, cRSMatrix1.min(), 0.01);
      assertEquals(0, cRSMatrix1.cardinality());
      assertTrue(cRSMatrix1.isRowMajor());
      assertEquals(0.0, cRSMatrix1.max(), 0.01);
      assertEquals(0, cRSMatrix1.rows());
      assertEquals(0, cRSMatrix1.columns());
      assertEquals(Double.NaN, cRSMatrix1.density(), 0.01);
      assertEquals(0.0, cRSMatrix2.max(), 0.01);
      assertEquals(Double.NaN, cRSMatrix2.density(), 0.01);
      assertEquals(0, cRSMatrix2.rows());
      assertEquals(0.0, cRSMatrix2.min(), 0.01);
      assertTrue(cRSMatrix2.isRowMajor());
      assertEquals(0, cRSMatrix2.columns());
      assertEquals(0, cRSMatrix2.cardinality());
      assertNotNull(cRSMatrix2);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.zero(31, 31);
      assertEquals(31, columnMajorSparseMatrix0.columns());
      assertEquals(0.0, columnMajorSparseMatrix0.max(), 0.01);
      assertEquals(0, columnMajorSparseMatrix0.cardinality());
      assertEquals(31, columnMajorSparseMatrix0.rows());
      assertEquals(0.0, columnMajorSparseMatrix0.density(), 0.01);
      assertFalse(columnMajorSparseMatrix0.isRowMajor());
      assertEquals(0.0, columnMajorSparseMatrix0.min(), 0.01);
      assertNotNull(columnMajorSparseMatrix0);
      
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(31, 31, 7);
      assertEquals(0.0, rowMajorSparseMatrix0.max(), 0.01);
      assertEquals(31, rowMajorSparseMatrix0.rows());
      assertEquals(31, rowMajorSparseMatrix0.columns());
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      assertEquals(0.0, rowMajorSparseMatrix0.min(), 0.01);
      assertEquals(0, rowMajorSparseMatrix0.cardinality());
      assertEquals(0.0, rowMajorSparseMatrix0.density(), 0.01);
      assertNotNull(rowMajorSparseMatrix0);
      
      rowMajorSparseMatrix0.setRow(7, (double) 31);
      assertEquals(0.03225806451612903, rowMajorSparseMatrix0.density(), 0.01);
      assertEquals(31, rowMajorSparseMatrix0.rows());
      assertEquals(31, rowMajorSparseMatrix0.columns());
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      assertEquals(31, rowMajorSparseMatrix0.cardinality());
      assertEquals(0.0, rowMajorSparseMatrix0.min(), 0.01);
      assertEquals(31.0, rowMajorSparseMatrix0.max(), 0.01);
      
      double double0 = rowMajorSparseMatrix0.product();
      assertEquals(0.03225806451612903, rowMajorSparseMatrix0.density(), 0.01);
      assertEquals(31, rowMajorSparseMatrix0.rows());
      assertEquals(31, rowMajorSparseMatrix0.columns());
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      assertEquals(31, rowMajorSparseMatrix0.cardinality());
      assertEquals(0.0, rowMajorSparseMatrix0.min(), 0.01);
      assertEquals(31.0, rowMajorSparseMatrix0.max(), 0.01);
      assertEquals(0.0, double0, 0.01);
      
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(matrixPredicate0).test(anyInt() , anyInt());
      boolean boolean0 = rowMajorSparseMatrix0.non(matrixPredicate0);
      assertEquals(0.03225806451612903, rowMajorSparseMatrix0.density(), 0.01);
      assertEquals(31, rowMajorSparseMatrix0.rows());
      assertEquals(31, rowMajorSparseMatrix0.columns());
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      assertEquals(31, rowMajorSparseMatrix0.cardinality());
      assertEquals(0.0, rowMajorSparseMatrix0.min(), 0.01);
      assertEquals(31.0, rowMajorSparseMatrix0.max(), 0.01);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix();
      assertEquals(0, basic2DMatrix0.rows());
      assertEquals(0, basic2DMatrix0.columns());
      assertNotNull(basic2DMatrix0);
      
      LinearAlgebra.DecompositorFactory linearAlgebra_DecompositorFactory0 = LinearAlgebra.DecompositorFactory.SVD;
      MatrixDecompositor matrixDecompositor0 = basic2DMatrix0.withDecompositor(linearAlgebra_DecompositorFactory0);
      assertEquals(0, basic2DMatrix0.rows());
      assertEquals(0, basic2DMatrix0.columns());
      assertNotNull(matrixDecompositor0);
      
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      basic2DMatrix0.update(matrixFunction0);
      assertEquals(0, basic2DMatrix0.rows());
      assertEquals(0, basic2DMatrix0.columns());
      
      basic2DMatrix0.setRow((-675), (double) (-675));
      assertEquals(0, basic2DMatrix0.rows());
      assertEquals(0, basic2DMatrix0.columns());
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.zero(31, 31);
      assertEquals(0.0, columnMajorSparseMatrix0.max(), 0.01);
      assertFalse(columnMajorSparseMatrix0.isRowMajor());
      assertEquals(31, columnMajorSparseMatrix0.columns());
      assertEquals(31, columnMajorSparseMatrix0.rows());
      assertEquals(0.0, columnMajorSparseMatrix0.min(), 0.01);
      assertEquals(0, columnMajorSparseMatrix0.cardinality());
      assertEquals(0.0, columnMajorSparseMatrix0.density(), 0.01);
      assertNotNull(columnMajorSparseMatrix0);
      
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(31, 31, 7);
      assertEquals(0.0, rowMajorSparseMatrix0.density(), 0.01);
      assertEquals(0.0, rowMajorSparseMatrix0.min(), 0.01);
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      assertEquals(0.0, rowMajorSparseMatrix0.max(), 0.01);
      assertEquals(31, rowMajorSparseMatrix0.rows());
      assertEquals(0, rowMajorSparseMatrix0.cardinality());
      assertEquals(31, rowMajorSparseMatrix0.columns());
      assertNotNull(rowMajorSparseMatrix0);
      
      boolean boolean0 = rowMajorSparseMatrix0.isColumnMajor();
      assertEquals(0.0, rowMajorSparseMatrix0.density(), 0.01);
      assertEquals(0.0, rowMajorSparseMatrix0.min(), 0.01);
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      assertEquals(0.0, rowMajorSparseMatrix0.max(), 0.01);
      assertEquals(31, rowMajorSparseMatrix0.rows());
      assertEquals(0, rowMajorSparseMatrix0.cardinality());
      assertEquals(31, rowMajorSparseMatrix0.columns());
      assertFalse(boolean0);
      
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(matrixPredicate0).test(anyInt() , anyInt());
      boolean boolean1 = rowMajorSparseMatrix0.non(matrixPredicate0);
      assertFalse(boolean1 == boolean0);
      assertEquals(0.0, rowMajorSparseMatrix0.density(), 0.01);
      assertEquals(0.0, rowMajorSparseMatrix0.min(), 0.01);
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      assertEquals(0.0, rowMajorSparseMatrix0.max(), 0.01);
      assertEquals(31, rowMajorSparseMatrix0.rows());
      assertEquals(0, rowMajorSparseMatrix0.cardinality());
      assertEquals(31, rowMajorSparseMatrix0.columns());
      assertTrue(boolean1);
      
      String string0 = columnMajorSparseMatrix0.toCSV();
      assertEquals(0.0, columnMajorSparseMatrix0.max(), 0.01);
      assertFalse(columnMajorSparseMatrix0.isRowMajor());
      assertEquals(31, columnMajorSparseMatrix0.columns());
      assertEquals(31, columnMajorSparseMatrix0.rows());
      assertEquals(0.0, columnMajorSparseMatrix0.min(), 0.01);
      assertEquals(0, columnMajorSparseMatrix0.cardinality());
      assertEquals(0.0, columnMajorSparseMatrix0.density(), 0.01);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.identity(1485);
      assertEquals(1485, denseMatrix0.columns());
      assertEquals(1485, denseMatrix0.rows());
      assertNotNull(denseMatrix0);
      
      DenseVector denseVector0 = DenseVector.zero(1485);
      assertEquals(1485, denseVector0.length());
      assertNotNull(denseVector0);
      
      // Undeclared exception!
      try { 
        denseMatrix0.insert((Matrix) null, (-2419), (-2447), 1485, (-1580));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot have negative rows or columns: 1485x-1580
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.zero(31, 31);
      assertEquals(0.0, columnMajorSparseMatrix0.density(), 0.01);
      assertEquals(0.0, columnMajorSparseMatrix0.min(), 0.01);
      assertEquals(31, columnMajorSparseMatrix0.rows());
      assertFalse(columnMajorSparseMatrix0.isRowMajor());
      assertEquals(0, columnMajorSparseMatrix0.cardinality());
      assertEquals(31, columnMajorSparseMatrix0.columns());
      assertEquals(0.0, columnMajorSparseMatrix0.max(), 0.01);
      assertNotNull(columnMajorSparseMatrix0);
      
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(7);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(7, cRSMatrix0.columns());
      assertEquals(7, cRSMatrix0.rows());
      assertEquals(1.0, cRSMatrix0.max(), 0.01);
      assertEquals(0.14285714285714285, cRSMatrix0.density(), 0.01);
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(7, cRSMatrix0.cardinality());
      assertNotNull(cRSMatrix0);
      
      CompressedVector compressedVector0 = (CompressedVector)cRSMatrix0.toRowVector();
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(7, cRSMatrix0.columns());
      assertEquals(7, cRSMatrix0.rows());
      assertEquals(1.0, cRSMatrix0.max(), 0.01);
      assertEquals(0.14285714285714285, cRSMatrix0.density(), 0.01);
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(7, cRSMatrix0.cardinality());
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(7, compressedVector0.length());
      assertEquals(0.14285714285714285, compressedVector0.density(), 0.01);
      assertNotNull(compressedVector0);
      
      CRSMatrix cRSMatrix1 = (CRSMatrix)cRSMatrix0.slice(7, 31, 31, 31);
      assertFalse(cRSMatrix1.equals((Object)cRSMatrix0));
      assertNotSame(cRSMatrix0, cRSMatrix1);
      assertNotSame(cRSMatrix1, cRSMatrix0);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(7, cRSMatrix0.columns());
      assertEquals(7, cRSMatrix0.rows());
      assertEquals(1.0, cRSMatrix0.max(), 0.01);
      assertEquals(0.14285714285714285, cRSMatrix0.density(), 0.01);
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(7, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix1.min(), 0.01);
      assertEquals(0, cRSMatrix1.cardinality());
      assertEquals(0, cRSMatrix1.columns());
      assertEquals(Double.NaN, cRSMatrix1.density(), 0.01);
      assertEquals(0.0, cRSMatrix1.max(), 0.01);
      assertEquals(24, cRSMatrix1.rows());
      assertTrue(cRSMatrix1.isRowMajor());
      assertNotNull(cRSMatrix1);
      
      // Undeclared exception!
      try { 
        RowMajorSparseMatrix.zero(31, (-566), 69);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: 31x-566
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.unit(4, 4);
      assertEquals(4, basic2DMatrix0.columns());
      assertEquals(4, basic2DMatrix0.rows());
      assertNotNull(basic2DMatrix0);
      
      CRSMatrix cRSMatrix0 = new CRSMatrix(17, 509, 509);
      assertEquals(509, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(17, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0, cRSMatrix0.cardinality());
      assertNotNull(cRSMatrix0);
      
      DenseMatrix denseMatrix0 = DenseMatrix.zero(509, 2);
      assertFalse(denseMatrix0.equals((Object)basic2DMatrix0));
      assertNotSame(denseMatrix0, basic2DMatrix0);
      assertEquals(509, denseMatrix0.rows());
      assertEquals(2, denseMatrix0.columns());
      assertNotNull(denseMatrix0);
      
      boolean boolean0 = cRSMatrix0.equals((Matrix) basic2DMatrix0, 286.0);
      assertFalse(basic2DMatrix0.equals((Object)denseMatrix0));
      assertNotSame(basic2DMatrix0, denseMatrix0);
      assertEquals(4, basic2DMatrix0.columns());
      assertEquals(4, basic2DMatrix0.rows());
      assertEquals(509, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(17, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0, cRSMatrix0.cardinality());
      assertFalse(boolean0);
      
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(5, 2441, 5);
      assertFalse(rowMajorSparseMatrix0.equals((Object)cRSMatrix0));
      assertNotSame(rowMajorSparseMatrix0, cRSMatrix0);
      assertEquals(0.0, rowMajorSparseMatrix0.density(), 0.01);
      assertEquals(0.0, rowMajorSparseMatrix0.min(), 0.01);
      assertEquals(0, rowMajorSparseMatrix0.cardinality());
      assertEquals(0.0, rowMajorSparseMatrix0.max(), 0.01);
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      assertEquals(2441, rowMajorSparseMatrix0.columns());
      assertEquals(5, rowMajorSparseMatrix0.rows());
      assertNotNull(rowMajorSparseMatrix0);
      
      double double0 = basic2DMatrix0.determinant();
      assertFalse(basic2DMatrix0.equals((Object)denseMatrix0));
      assertNotSame(basic2DMatrix0, denseMatrix0);
      assertEquals(4, basic2DMatrix0.columns());
      assertEquals(4, basic2DMatrix0.rows());
      assertEquals(0.0, double0, 0.01);
      
      // Undeclared exception!
      try { 
        cRSMatrix0.non((MatrixPredicate) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.unit(4, 4);
      assertEquals(4, basic2DMatrix0.rows());
      assertEquals(4, basic2DMatrix0.columns());
      assertNotNull(basic2DMatrix0);
      
      CRSMatrix cRSMatrix0 = new CRSMatrix(4, 17, 4);
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(4, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(17, cRSMatrix0.columns());
      assertNotNull(cRSMatrix0);
      
      CRSMatrix cRSMatrix1 = CRSMatrix.zero(2717, 2717, 793);
      assertFalse(cRSMatrix1.equals((Object)cRSMatrix0));
      assertNotSame(cRSMatrix1, cRSMatrix0);
      assertEquals(2717, cRSMatrix1.rows());
      assertEquals(0.0, cRSMatrix1.max(), 0.01);
      assertEquals(0.0, cRSMatrix1.density(), 0.01);
      assertEquals(0.0, cRSMatrix1.min(), 0.01);
      assertTrue(cRSMatrix1.isRowMajor());
      assertEquals(2717, cRSMatrix1.columns());
      assertEquals(0, cRSMatrix1.cardinality());
      assertNotNull(cRSMatrix1);
      
      cRSMatrix1.multiplyByItsTranspose();
      Matrix matrix0 = cRSMatrix1.copyOfRows(793);
      basic2DMatrix0.insert(matrix0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(0, 0, 0);
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0, cRSMatrix0.rows());
      assertNotNull(cRSMatrix0);
      
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      CRSMatrix cRSMatrix1 = (CRSMatrix)cRSMatrix0.transform(matrixFunction0);
      assertTrue(cRSMatrix1.equals((Object)cRSMatrix0));
      assertNotSame(cRSMatrix0, cRSMatrix1);
      assertNotSame(cRSMatrix1, cRSMatrix0);
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix1.max(), 0.01);
      assertEquals(0, cRSMatrix1.rows());
      assertEquals(0, cRSMatrix1.columns());
      assertEquals(Double.NaN, cRSMatrix1.density(), 0.01);
      assertEquals(0.0, cRSMatrix1.min(), 0.01);
      assertEquals(0, cRSMatrix1.cardinality());
      assertTrue(cRSMatrix1.isRowMajor());
      assertNotNull(cRSMatrix1);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.zero(31, 31);
      assertEquals(0.0, columnMajorSparseMatrix0.min(), 0.01);
      assertEquals(31, columnMajorSparseMatrix0.rows());
      assertEquals(31, columnMajorSparseMatrix0.columns());
      assertEquals(0.0, columnMajorSparseMatrix0.max(), 0.01);
      assertEquals(0, columnMajorSparseMatrix0.cardinality());
      assertFalse(columnMajorSparseMatrix0.isRowMajor());
      assertEquals(0.0, columnMajorSparseMatrix0.density(), 0.01);
      assertNotNull(columnMajorSparseMatrix0);
      
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(2284, 31, 31);
      assertEquals(0.0, rowMajorSparseMatrix0.min(), 0.01);
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      assertEquals(0, rowMajorSparseMatrix0.cardinality());
      assertEquals(0.0, rowMajorSparseMatrix0.density(), 0.01);
      assertEquals(2284, rowMajorSparseMatrix0.rows());
      assertEquals(0.0, rowMajorSparseMatrix0.max(), 0.01);
      assertEquals(31, rowMajorSparseMatrix0.columns());
      assertNotNull(rowMajorSparseMatrix0);
      
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      rowMajorSparseMatrix0.copyOfColumns(2284);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      rowMajorSparseMatrix0.transform(matrixFunction0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.unit(4, 4);
      assertEquals(4, basic2DMatrix0.columns());
      assertEquals(4, basic2DMatrix0.rows());
      assertNotNull(basic2DMatrix0);
      
      CRSMatrix cRSMatrix0 = new CRSMatrix(4, 17, 4);
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(4, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(17, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertNotNull(cRSMatrix0);
      
      boolean boolean0 = cRSMatrix0.equals((Matrix) basic2DMatrix0, (double) 4);
      assertEquals(4, basic2DMatrix0.columns());
      assertEquals(4, basic2DMatrix0.rows());
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(4, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(17, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertFalse(boolean0);
      
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(48);
      assertEquals(1.0, cCSMatrix0.max(), 0.01);
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(48, cCSMatrix0.columns());
      assertEquals(48, cCSMatrix0.cardinality());
      assertEquals(0.020833333333333332, cCSMatrix0.density(), 0.01);
      assertEquals(48, cCSMatrix0.rows());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertNotNull(cCSMatrix0);
      
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      cCSMatrix0.updateRow(11, vectorFunction0);
      assertEquals(1.0, cCSMatrix0.max(), 0.01);
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(48, cCSMatrix0.columns());
      assertEquals(47, cCSMatrix0.cardinality());
      assertEquals(0.020399305555555556, cCSMatrix0.density(), 0.01);
      assertEquals(48, cCSMatrix0.rows());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      
      // Undeclared exception!
      try { 
        cRSMatrix0.determinant();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Can not compute determinant of non-square matrix.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.zero(10, 10);
      assertEquals(10, columnMajorSparseMatrix0.columns());
      assertEquals(0, columnMajorSparseMatrix0.cardinality());
      assertEquals(0.0, columnMajorSparseMatrix0.min(), 0.01);
      assertEquals(0.0, columnMajorSparseMatrix0.density(), 0.01);
      assertEquals(0.0, columnMajorSparseMatrix0.max(), 0.01);
      assertFalse(columnMajorSparseMatrix0.isRowMajor());
      assertEquals(10, columnMajorSparseMatrix0.rows());
      assertNotNull(columnMajorSparseMatrix0);
      
      MatrixOperation<ColumnMajorSparseMatrix> matrixOperation0 = (MatrixOperation<ColumnMajorSparseMatrix>) mock(MatrixOperation.class, new ViolatedAssumptionAnswer());
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(10, 10, 7);
      assertEquals(0.0, rowMajorSparseMatrix0.max(), 0.01);
      assertEquals(10, rowMajorSparseMatrix0.columns());
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      assertEquals(0.0, rowMajorSparseMatrix0.density(), 0.01);
      assertEquals(10, rowMajorSparseMatrix0.rows());
      assertEquals(0.0, rowMajorSparseMatrix0.min(), 0.01);
      assertEquals(0, rowMajorSparseMatrix0.cardinality());
      assertNotNull(rowMajorSparseMatrix0);
      
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      CRSMatrix cRSMatrix0 = (CRSMatrix)rowMajorSparseMatrix0.transform(matrixFunction0);
      assertTrue(cRSMatrix0.equals((Object)rowMajorSparseMatrix0));
      assertNotSame(rowMajorSparseMatrix0, cRSMatrix0);
      assertNotSame(cRSMatrix0, rowMajorSparseMatrix0);
      assertEquals(0.0, rowMajorSparseMatrix0.max(), 0.01);
      assertEquals(10, rowMajorSparseMatrix0.columns());
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      assertEquals(0.0, rowMajorSparseMatrix0.density(), 0.01);
      assertEquals(10, rowMajorSparseMatrix0.rows());
      assertEquals(0.0, rowMajorSparseMatrix0.min(), 0.01);
      assertEquals(0, rowMajorSparseMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(10, cRSMatrix0.columns());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(10, cRSMatrix0.rows());
      assertEquals(0, cRSMatrix0.cardinality());
      assertNotNull(cRSMatrix0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(3063, 7, 7);
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(7, cRSMatrix0.columns());
      assertEquals(3063, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertNotNull(cRSMatrix0);
      
      Integer integer0 = new Integer(5);
      assertEquals(5, (int)integer0);
      assertNotNull(integer0);
      
      boolean boolean0 = cRSMatrix0.equals((Object) integer0);
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(7, cRSMatrix0.columns());
      assertEquals(3063, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.zero(10, 10);
      assertEquals(10, columnMajorSparseMatrix0.rows());
      assertEquals(0.0, columnMajorSparseMatrix0.max(), 0.01);
      assertFalse(columnMajorSparseMatrix0.isRowMajor());
      assertEquals(0.0, columnMajorSparseMatrix0.min(), 0.01);
      assertEquals(0, columnMajorSparseMatrix0.cardinality());
      assertEquals(0.0, columnMajorSparseMatrix0.density(), 0.01);
      assertEquals(10, columnMajorSparseMatrix0.columns());
      assertNotNull(columnMajorSparseMatrix0);
      
      MatrixOperation<ColumnMajorSparseMatrix> matrixOperation0 = (MatrixOperation<ColumnMajorSparseMatrix>) mock(MatrixOperation.class, new ViolatedAssumptionAnswer());
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(10, 10, 7);
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      assertEquals(0.0, rowMajorSparseMatrix0.min(), 0.01);
      assertEquals(0.0, rowMajorSparseMatrix0.density(), 0.01);
      assertEquals(10, rowMajorSparseMatrix0.columns());
      assertEquals(0, rowMajorSparseMatrix0.cardinality());
      assertEquals(0.0, rowMajorSparseMatrix0.max(), 0.01);
      assertEquals(10, rowMajorSparseMatrix0.rows());
      assertNotNull(rowMajorSparseMatrix0);
      
      boolean boolean0 = rowMajorSparseMatrix0.equals((Object) matrixOperation0);
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      assertEquals(0.0, rowMajorSparseMatrix0.min(), 0.01);
      assertEquals(0.0, rowMajorSparseMatrix0.density(), 0.01);
      assertEquals(10, rowMajorSparseMatrix0.columns());
      assertEquals(0, rowMajorSparseMatrix0.cardinality());
      assertEquals(0.0, rowMajorSparseMatrix0.max(), 0.01);
      assertEquals(10, rowMajorSparseMatrix0.rows());
      assertFalse(boolean0);
      
      double double0 = rowMajorSparseMatrix0.determinant();
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      assertEquals(0.0, rowMajorSparseMatrix0.min(), 0.01);
      assertEquals(0.0, rowMajorSparseMatrix0.density(), 0.01);
      assertEquals(10, rowMajorSparseMatrix0.columns());
      assertEquals(0, rowMajorSparseMatrix0.cardinality());
      assertEquals(0.0, rowMajorSparseMatrix0.max(), 0.01);
      assertEquals(10, rowMajorSparseMatrix0.rows());
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.zero(10, 10);
      assertEquals(10, columnMajorSparseMatrix0.rows());
      assertEquals(0.0, columnMajorSparseMatrix0.max(), 0.01);
      assertFalse(columnMajorSparseMatrix0.isRowMajor());
      assertEquals(0.0, columnMajorSparseMatrix0.min(), 0.01);
      assertEquals(0, columnMajorSparseMatrix0.cardinality());
      assertEquals(0.0, columnMajorSparseMatrix0.density(), 0.01);
      assertEquals(10, columnMajorSparseMatrix0.columns());
      assertNotNull(columnMajorSparseMatrix0);
      
      MatrixOperation<ColumnMajorSparseMatrix> matrixOperation0 = (MatrixOperation<ColumnMajorSparseMatrix>) mock(MatrixOperation.class, new ViolatedAssumptionAnswer());
      columnMajorSparseMatrix0.swapColumns(10, 10);
      assertEquals(10, columnMajorSparseMatrix0.rows());
      assertEquals(0.0, columnMajorSparseMatrix0.max(), 0.01);
      assertFalse(columnMajorSparseMatrix0.isRowMajor());
      assertEquals(0.0, columnMajorSparseMatrix0.min(), 0.01);
      assertEquals(0, columnMajorSparseMatrix0.cardinality());
      assertEquals(0.0, columnMajorSparseMatrix0.density(), 0.01);
      assertEquals(10, columnMajorSparseMatrix0.columns());
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(0, 0, 0);
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0, cRSMatrix0.rows());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(0, cRSMatrix0.cardinality());
      assertNotNull(cRSMatrix0);
      
      CRSMatrix cRSMatrix1 = (CRSMatrix)cRSMatrix0.insert((Matrix) cRSMatrix0);
      assertTrue(cRSMatrix1.equals((Object)cRSMatrix0));
      assertNotSame(cRSMatrix0, cRSMatrix1);
      assertNotSame(cRSMatrix1, cRSMatrix0);
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0, cRSMatrix0.rows());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0, cRSMatrix1.columns());
      assertTrue(cRSMatrix1.isRowMajor());
      assertEquals(0.0, cRSMatrix1.min(), 0.01);
      assertEquals(0, cRSMatrix1.rows());
      assertEquals(0.0, cRSMatrix1.max(), 0.01);
      assertEquals(Double.NaN, cRSMatrix1.density(), 0.01);
      assertEquals(0, cRSMatrix1.cardinality());
      assertNotNull(cRSMatrix1);
      
      double double0 = cRSMatrix1.infinityNorm();
      assertTrue(cRSMatrix0.equals((Object)cRSMatrix1));
      assertTrue(cRSMatrix1.equals((Object)cRSMatrix0));
      assertNotSame(cRSMatrix0, cRSMatrix1);
      assertNotSame(cRSMatrix1, cRSMatrix0);
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0, cRSMatrix0.rows());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0, cRSMatrix1.columns());
      assertTrue(cRSMatrix1.isRowMajor());
      assertEquals(0.0, cRSMatrix1.min(), 0.01);
      assertEquals(0, cRSMatrix1.rows());
      assertEquals(0.0, cRSMatrix1.max(), 0.01);
      assertEquals(Double.NaN, cRSMatrix1.density(), 0.01);
      assertEquals(0, cRSMatrix1.cardinality());
      assertEquals(Double.NEGATIVE_INFINITY, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      int int0 = 4463;
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(4463);
      assertEquals(2.2406453058480843E-4, cRSMatrix0.density(), 0.01);
      assertEquals(4463, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(1.0, cRSMatrix0.max(), 0.01);
      assertEquals(4463, cRSMatrix0.rows());
      assertEquals(4463, cRSMatrix0.columns());
      assertNotNull(cRSMatrix0);
      
      int int1 = 5039;
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.transformColumn(1479, vectorFunction0);
      VectorFunction vectorFunction1 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      Matrix matrix0 = cRSMatrix0.transformRow(int1, vectorFunction1);
      matrix0.divide(int0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.zero(10, 10);
      assertEquals(0.0, columnMajorSparseMatrix0.density(), 0.01);
      assertEquals(0.0, columnMajorSparseMatrix0.min(), 0.01);
      assertFalse(columnMajorSparseMatrix0.isRowMajor());
      assertEquals(0.0, columnMajorSparseMatrix0.max(), 0.01);
      assertEquals(10, columnMajorSparseMatrix0.columns());
      assertEquals(0, columnMajorSparseMatrix0.cardinality());
      assertEquals(10, columnMajorSparseMatrix0.rows());
      assertNotNull(columnMajorSparseMatrix0);
      
      MatrixOperation<ColumnMajorSparseMatrix> matrixOperation0 = (MatrixOperation<ColumnMajorSparseMatrix>) mock(MatrixOperation.class, new ViolatedAssumptionAnswer());
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(10, 10, 7);
      assertEquals(10, rowMajorSparseMatrix0.rows());
      assertEquals(0.0, rowMajorSparseMatrix0.min(), 0.01);
      assertEquals(0, rowMajorSparseMatrix0.cardinality());
      assertEquals(0.0, rowMajorSparseMatrix0.max(), 0.01);
      assertEquals(0.0, rowMajorSparseMatrix0.density(), 0.01);
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      assertEquals(10, rowMajorSparseMatrix0.columns());
      assertNotNull(rowMajorSparseMatrix0);
      
      DecimalFormat decimalFormat0 = (DecimalFormat)NumberFormat.getPercentInstance();
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertEquals("%", decimalFormat0.getPositiveSuffix());
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals("", decimalFormat0.getPositivePrefix());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertTrue(decimalFormat0.isGroupingUsed());
      assertEquals("#,##0%", decimalFormat0.toPattern());
      assertEquals(0, decimalFormat0.getMaximumFractionDigits());
      assertEquals("%", decimalFormat0.getNegativeSuffix());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertEquals(100, decimalFormat0.getMultiplier());
      assertEquals("#,##0%", decimalFormat0.toLocalizedPattern());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertNotNull(decimalFormat0);
      
      String string0 = rowMajorSparseMatrix0.mkString((NumberFormat) decimalFormat0);
      assertEquals(10, rowMajorSparseMatrix0.rows());
      assertEquals(0.0, rowMajorSparseMatrix0.min(), 0.01);
      assertEquals(0, rowMajorSparseMatrix0.cardinality());
      assertEquals(0.0, rowMajorSparseMatrix0.max(), 0.01);
      assertEquals(0.0, rowMajorSparseMatrix0.density(), 0.01);
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      assertEquals(10, rowMajorSparseMatrix0.columns());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertEquals("%", decimalFormat0.getPositiveSuffix());
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals("", decimalFormat0.getPositivePrefix());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertTrue(decimalFormat0.isGroupingUsed());
      assertEquals("#,##0%", decimalFormat0.toPattern());
      assertEquals(0, decimalFormat0.getMaximumFractionDigits());
      assertEquals("%", decimalFormat0.getNegativeSuffix());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertEquals(100, decimalFormat0.getMultiplier());
      assertEquals("#,##0%", decimalFormat0.toLocalizedPattern());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertEquals("0% 0% 0% 0% 0% 0% 0% 0% 0% 0%\n0% 0% 0% 0% 0% 0% 0% 0% 0% 0%\n0% 0% 0% 0% 0% 0% 0% 0% 0% 0%\n0% 0% 0% 0% 0% 0% 0% 0% 0% 0%\n0% 0% 0% 0% 0% 0% 0% 0% 0% 0%\n0% 0% 0% 0% 0% 0% 0% 0% 0% 0%\n0% 0% 0% 0% 0% 0% 0% 0% 0% 0%\n0% 0% 0% 0% 0% 0% 0% 0% 0% 0%\n0% 0% 0% 0% 0% 0% 0% 0% 0% 0%\n0% 0% 0% 0% 0% 0% 0% 0% 0% 0%\n", string0);
      assertNotNull(string0);
      
      double double0 = rowMajorSparseMatrix0.determinant();
      assertEquals(10, rowMajorSparseMatrix0.rows());
      assertEquals(0.0, rowMajorSparseMatrix0.min(), 0.01);
      assertEquals(0, rowMajorSparseMatrix0.cardinality());
      assertEquals(0.0, rowMajorSparseMatrix0.max(), 0.01);
      assertEquals(0.0, rowMajorSparseMatrix0.density(), 0.01);
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      assertEquals(10, rowMajorSparseMatrix0.columns());
      assertEquals(0.0, double0, 0.01);
      
      // Undeclared exception!
      try { 
        rowMajorSparseMatrix0.get(364, 3952);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '364' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new OoPlaceMatricesSubtraction();
      assertNotNull(ooPlaceMatricesSubtraction0);
      
      Basic2DMatrix basic2DMatrix0 = (Basic2DMatrix)Matrix.constant(607, 4916, (-3240.25235));
      assertEquals(4916, basic2DMatrix0.columns());
      assertEquals(607, basic2DMatrix0.rows());
      assertNotNull(basic2DMatrix0);
      
      // Undeclared exception!
      try { 
        basic2DMatrix0.maxInRow(1290);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.zero(10, 10);
      assertEquals(0.0, columnMajorSparseMatrix0.density(), 0.01);
      assertEquals(0.0, columnMajorSparseMatrix0.min(), 0.01);
      assertFalse(columnMajorSparseMatrix0.isRowMajor());
      assertEquals(0.0, columnMajorSparseMatrix0.max(), 0.01);
      assertEquals(10, columnMajorSparseMatrix0.columns());
      assertEquals(0, columnMajorSparseMatrix0.cardinality());
      assertEquals(10, columnMajorSparseMatrix0.rows());
      assertNotNull(columnMajorSparseMatrix0);
      
      MatrixOperation<ColumnMajorSparseMatrix> matrixOperation0 = (MatrixOperation<ColumnMajorSparseMatrix>) mock(MatrixOperation.class, new ViolatedAssumptionAnswer());
      double double0 = columnMajorSparseMatrix0.determinant();
      assertEquals(0.0, columnMajorSparseMatrix0.density(), 0.01);
      assertEquals(0.0, columnMajorSparseMatrix0.min(), 0.01);
      assertFalse(columnMajorSparseMatrix0.isRowMajor());
      assertEquals(0.0, columnMajorSparseMatrix0.max(), 0.01);
      assertEquals(10, columnMajorSparseMatrix0.columns());
      assertEquals(0, columnMajorSparseMatrix0.cardinality());
      assertEquals(10, columnMajorSparseMatrix0.rows());
      assertEquals(0.0, double0, 0.01);
      
      DenseMatrix denseMatrix0 = columnMajorSparseMatrix0.toDenseMatrix();
      assertEquals(0.0, columnMajorSparseMatrix0.density(), 0.01);
      assertEquals(0.0, columnMajorSparseMatrix0.min(), 0.01);
      assertFalse(columnMajorSparseMatrix0.isRowMajor());
      assertEquals(0.0, columnMajorSparseMatrix0.max(), 0.01);
      assertEquals(10, columnMajorSparseMatrix0.columns());
      assertEquals(0, columnMajorSparseMatrix0.cardinality());
      assertEquals(10, columnMajorSparseMatrix0.rows());
      assertEquals(10, denseMatrix0.rows());
      assertEquals(10, denseMatrix0.columns());
      assertNotNull(denseMatrix0);
      
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      SparseVector sparseVector0 = SparseVector.fromMap(hashMap0, 534);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0.0, sparseVector0.density(), 0.01);
      assertEquals(534, sparseVector0.length());
      assertEquals(0, sparseVector0.cardinality());
      assertNotNull(sparseVector0);
      
      // Undeclared exception!
      try { 
        columnMajorSparseMatrix0.multiply((Vector) sparseVector0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Given vector should have the same length as number of columns in the given matrix: 534 does not equal to 10.
         //
         verifyException("org.la4j.operation.ooplace.OoPlaceMatrixByVectorMultiplication", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Matrix matrix0 = Matrix.fromCSV("");
      assertEquals(0, matrix0.columns());
      assertEquals(0, matrix0.rows());
      assertNotNull(matrix0);
      
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.identity(4);
      assertFalse(basic2DMatrix0.equals((Object)matrix0));
      assertNotSame(basic2DMatrix0, matrix0);
      assertEquals(4, basic2DMatrix0.rows());
      assertEquals(4, basic2DMatrix0.columns());
      assertNotNull(basic2DMatrix0);
      
      Matrix matrix1 = matrix0.blankOfColumns(37);
      assertFalse(matrix0.equals((Object)basic2DMatrix0));
      assertTrue(matrix1.equals((Object)matrix0));
      assertFalse(matrix1.equals((Object)basic2DMatrix0));
      assertNotSame(matrix0, matrix1);
      assertNotSame(matrix0, basic2DMatrix0);
      assertNotSame(matrix1, matrix0);
      assertNotSame(matrix1, basic2DMatrix0);
      assertEquals(0, matrix0.columns());
      assertEquals(0, matrix0.rows());
      assertEquals(0, matrix1.columns());
      assertEquals(0, matrix1.rows());
      assertNotNull(matrix1);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.rows());
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertNotNull(cRSMatrix0);
      
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(matrixPredicate0).test(anyInt() , anyInt());
      boolean boolean0 = cRSMatrix0.non(matrixPredicate0);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.rows());
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0, cRSMatrix0.rows());
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertNotNull(cRSMatrix0);
      
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(matrixPredicate0).test(anyInt() , anyInt());
      boolean boolean0 = cRSMatrix0.non(matrixPredicate0);
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0, cRSMatrix0.rows());
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertTrue(boolean0);
      
      int int0 = 6;
      double double0 = 1.0;
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(6, 1.0);
      assertEquals(6, cCSMatrix0.columns());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(1.0, cCSMatrix0.max(), 0.01);
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(6, cCSMatrix0.cardinality());
      assertEquals(6, cCSMatrix0.rows());
      assertEquals(0.16666666666666666, cCSMatrix0.density(), 0.01);
      assertNotNull(cCSMatrix0);
      
      int int1 = 485;
      int int2 = (-673);
      int int3 = 2;
      // Undeclared exception!
      try { 
        cRSMatrix0.insert((Matrix) cCSMatrix0, 485, 0, (-673), 485, 2, 690);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot have negative destination position: -673, 485
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(0, 0, 0);
      assertEquals(0, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0, cRSMatrix0.columns());
      assertTrue(cRSMatrix0.isRowMajor());
      assertNotNull(cRSMatrix0);
      
      // Undeclared exception!
      try { 
        cRSMatrix0.swapRows(8, 10);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix(0, 0, 0);
      assertEquals(0, cRSMatrix0.rows());
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(0, cRSMatrix0.cardinality());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertNotNull(cRSMatrix0);
      
      CRSMatrix cRSMatrix1 = (CRSMatrix)cRSMatrix0.insert((Matrix) cRSMatrix0);
      assertTrue(cRSMatrix1.equals((Object)cRSMatrix0));
      assertNotSame(cRSMatrix0, cRSMatrix1);
      assertNotSame(cRSMatrix1, cRSMatrix0);
      assertEquals(0, cRSMatrix0.rows());
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(0, cRSMatrix0.cardinality());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(0.0, cRSMatrix1.max(), 0.01);
      assertEquals(0, cRSMatrix1.rows());
      assertTrue(cRSMatrix1.isRowMajor());
      assertEquals(0, cRSMatrix1.columns());
      assertEquals(0.0, cRSMatrix1.min(), 0.01);
      assertEquals(0, cRSMatrix1.cardinality());
      assertEquals(Double.NaN, cRSMatrix1.density(), 0.01);
      assertNotNull(cRSMatrix1);
      
      cRSMatrix1.swapRows(0, 0);
      assertTrue(cRSMatrix0.equals((Object)cRSMatrix1));
      assertTrue(cRSMatrix1.equals((Object)cRSMatrix0));
      assertNotSame(cRSMatrix0, cRSMatrix1);
      assertNotSame(cRSMatrix1, cRSMatrix0);
      assertEquals(0, cRSMatrix0.rows());
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(0, cRSMatrix0.cardinality());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(0.0, cRSMatrix1.max(), 0.01);
      assertEquals(0, cRSMatrix1.rows());
      assertTrue(cRSMatrix1.isRowMajor());
      assertEquals(0, cRSMatrix1.columns());
      assertEquals(0.0, cRSMatrix1.min(), 0.01);
      assertEquals(0, cRSMatrix1.cardinality());
      assertEquals(Double.NaN, cRSMatrix1.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.zero(2931, 2931);
      assertEquals(2931, columnMajorSparseMatrix0.rows());
      assertEquals(0, columnMajorSparseMatrix0.cardinality());
      assertEquals(0.0, columnMajorSparseMatrix0.min(), 0.01);
      assertEquals(0.0, columnMajorSparseMatrix0.density(), 0.01);
      assertEquals(0.0, columnMajorSparseMatrix0.max(), 0.01);
      assertEquals(2931, columnMajorSparseMatrix0.columns());
      assertFalse(columnMajorSparseMatrix0.isRowMajor());
      assertNotNull(columnMajorSparseMatrix0);
      
      MatrixOperation<ColumnMajorSparseMatrix> matrixOperation0 = (MatrixOperation<ColumnMajorSparseMatrix>) mock(MatrixOperation.class, new ViolatedAssumptionAnswer());
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(2931, 2931, 7);
      assertEquals(0.0, rowMajorSparseMatrix0.density(), 0.01);
      assertEquals(0.0, rowMajorSparseMatrix0.min(), 0.01);
      assertEquals(2931, rowMajorSparseMatrix0.rows());
      assertEquals(0.0, rowMajorSparseMatrix0.max(), 0.01);
      assertEquals(2931, rowMajorSparseMatrix0.columns());
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      assertEquals(0, rowMajorSparseMatrix0.cardinality());
      assertNotNull(rowMajorSparseMatrix0);
      
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(7, 0.0);
      assertFalse(cRSMatrix0.equals((Object)rowMajorSparseMatrix0));
      assertNotSame(cRSMatrix0, rowMajorSparseMatrix0);
      assertEquals(7, cRSMatrix0.cardinality());
      assertEquals(7, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(0.14285714285714285, cRSMatrix0.density(), 0.01);
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(7, cRSMatrix0.columns());
      assertNotNull(cRSMatrix0);
      
      boolean boolean0 = cRSMatrix0.equals((Object) rowMajorSparseMatrix0);
      assertFalse(rowMajorSparseMatrix0.equals((Object)cRSMatrix0));
      assertFalse(cRSMatrix0.equals((Object)rowMajorSparseMatrix0));
      assertNotSame(rowMajorSparseMatrix0, cRSMatrix0);
      assertNotSame(cRSMatrix0, rowMajorSparseMatrix0);
      assertEquals(0.0, rowMajorSparseMatrix0.density(), 0.01);
      assertEquals(0.0, rowMajorSparseMatrix0.min(), 0.01);
      assertEquals(2931, rowMajorSparseMatrix0.rows());
      assertEquals(0.0, rowMajorSparseMatrix0.max(), 0.01);
      assertEquals(2931, rowMajorSparseMatrix0.columns());
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      assertEquals(0, rowMajorSparseMatrix0.cardinality());
      assertEquals(7, cRSMatrix0.cardinality());
      assertEquals(7, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(0.14285714285714285, cRSMatrix0.density(), 0.01);
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(7, cRSMatrix0.columns());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.diagonal(7, 7);
      assertEquals(7, denseMatrix0.columns());
      assertEquals(7, denseMatrix0.rows());
      assertNotNull(denseMatrix0);
      
      double double0 = denseMatrix0.determinant();
      assertEquals(7, denseMatrix0.columns());
      assertEquals(7, denseMatrix0.rows());
      assertEquals(823543.0, double0, 0.01);
      
      int int0 = denseMatrix0.columns();
      assertEquals(7, denseMatrix0.columns());
      assertEquals(7, denseMatrix0.rows());
      assertEquals(7, int0);
      
      Vector vector0 = denseMatrix0.toRowVector();
      assertEquals(7, denseMatrix0.columns());
      assertEquals(7, denseMatrix0.rows());
      assertEquals(7, vector0.length());
      assertNotNull(vector0);
      
      String string0 = denseMatrix0.toString();
      assertEquals(7, denseMatrix0.columns());
      assertEquals(7, denseMatrix0.rows());
      assertEquals("7.000 0.000 0.000 0.000 0.000 0.000 0.000\n0.000 7.000 0.000 0.000 0.000 0.000 0.000\n0.000 0.000 7.000 0.000 0.000 0.000 0.000\n0.000 0.000 0.000 7.000 0.000 0.000 0.000\n0.000 0.000 0.000 0.000 7.000 0.000 0.000\n0.000 0.000 0.000 0.000 0.000 7.000 0.000\n0.000 0.000 0.000 0.000 0.000 0.000 7.000\n", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix(619, 619, 619);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(619, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertEquals(619, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertNotNull(cRSMatrix0);
      
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(619);
      assertEquals(619, cCSMatrix0.rows());
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(1.0, cCSMatrix0.max(), 0.01);
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(619, cCSMatrix0.columns());
      assertEquals(619, cCSMatrix0.cardinality());
      assertEquals(0.0016155088852988692, cCSMatrix0.density(), 0.01);
      assertNotNull(cCSMatrix0);
      
      boolean boolean0 = cRSMatrix0.equals((Object) cCSMatrix0);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(619, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertEquals(619, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(619, cCSMatrix0.rows());
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(1.0, cCSMatrix0.max(), 0.01);
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(619, cCSMatrix0.columns());
      assertEquals(619, cCSMatrix0.cardinality());
      assertEquals(0.0016155088852988692, cCSMatrix0.density(), 0.01);
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        Matrix.fromMatrixMarket("Cannot have negative rows or columns: ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong input file format: can not read header '%%MatrixMarket'.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix(6, 6, 7);
      assertEquals(6, cRSMatrix0.columns());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(6, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertNotNull(cRSMatrix0);
      
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(6, 6, 6);
      assertTrue(rowMajorSparseMatrix0.equals((Object)cRSMatrix0));
      assertNotSame(rowMajorSparseMatrix0, cRSMatrix0);
      assertEquals(0.0, rowMajorSparseMatrix0.max(), 0.01);
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      assertEquals(6, rowMajorSparseMatrix0.columns());
      assertEquals(0.0, rowMajorSparseMatrix0.density(), 0.01);
      assertEquals(6, rowMajorSparseMatrix0.rows());
      assertEquals(0.0, rowMajorSparseMatrix0.min(), 0.01);
      assertEquals(0, rowMajorSparseMatrix0.cardinality());
      assertNotNull(rowMajorSparseMatrix0);
      
      boolean boolean0 = cRSMatrix0.equals((Object) rowMajorSparseMatrix0);
      assertTrue(cRSMatrix0.equals((Object)rowMajorSparseMatrix0));
      assertTrue(rowMajorSparseMatrix0.equals((Object)cRSMatrix0));
      assertNotSame(cRSMatrix0, rowMajorSparseMatrix0);
      assertNotSame(rowMajorSparseMatrix0, cRSMatrix0);
      assertEquals(6, cRSMatrix0.columns());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(6, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0.0, rowMajorSparseMatrix0.max(), 0.01);
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      assertEquals(6, rowMajorSparseMatrix0.columns());
      assertEquals(0.0, rowMajorSparseMatrix0.density(), 0.01);
      assertEquals(6, rowMajorSparseMatrix0.rows());
      assertEquals(0.0, rowMajorSparseMatrix0.min(), 0.01);
      assertEquals(0, rowMajorSparseMatrix0.cardinality());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.diagonal(7, 7);
      assertEquals(7, denseMatrix0.columns());
      assertEquals(7, denseMatrix0.rows());
      assertNotNull(denseMatrix0);
      
      double double0 = denseMatrix0.determinant();
      assertEquals(7, denseMatrix0.columns());
      assertEquals(7, denseMatrix0.rows());
      assertEquals(823543.0, double0, 0.01);
      
      double double1 = denseMatrix0.min();
      assertNotEquals(double1, double0, 0.01);
      assertEquals(7, denseMatrix0.columns());
      assertEquals(7, denseMatrix0.rows());
      assertEquals(0.0, double1, 0.01);
      
      int int0 = denseMatrix0.columns();
      assertEquals(7, denseMatrix0.columns());
      assertEquals(7, denseMatrix0.rows());
      assertEquals(7, int0);
      
      Vector vector0 = denseMatrix0.toRowVector();
      assertEquals(7, denseMatrix0.columns());
      assertEquals(7, denseMatrix0.rows());
      assertEquals(7, vector0.length());
      assertNotNull(vector0);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix(7, 7);
      assertEquals(7, basic2DMatrix0.rows());
      assertEquals(7, basic2DMatrix0.columns());
      assertNotNull(basic2DMatrix0);
      
      double double0 = Locale.LanguageRange.MAX_WEIGHT;
      assertEquals(1.0, double0, 0.01);
      
      Matrix matrix0 = basic2DMatrix0.removeLastColumn();
      assertFalse(matrix0.equals((Object)basic2DMatrix0));
      assertNotSame(basic2DMatrix0, matrix0);
      assertNotSame(matrix0, basic2DMatrix0);
      assertEquals(7, basic2DMatrix0.rows());
      assertEquals(7, basic2DMatrix0.columns());
      assertEquals(7, matrix0.rows());
      assertEquals(6, matrix0.columns());
      assertNotNull(matrix0);
      
      String string0 = "_;.Zv5`U>WW&3Z8h";
      int[] intArray0 = new int[1];
      intArray0[0] = 7;
      // Undeclared exception!
      try { 
        basic2DMatrix0.select(intArray0, intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.identity(7);
      assertEquals(7, basic2DMatrix0.columns());
      assertEquals(7, basic2DMatrix0.rows());
      assertNotNull(basic2DMatrix0);
      
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        basic2DMatrix0.select(intArray0, intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No rows or columns selected.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      // Undeclared exception!
      try { 
        Matrix.fromMatrixMarket("%%MatrixMarket matrix coordinate real general ");
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.StringTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(0, 0, 0);
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.rows());
      assertNotNull(cRSMatrix0);
      
      double[][] doubleArray0 = new double[1][3];
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = (double) 0;
      doubleArray1[0] = (double) 0;
      doubleArray1[2] = 1.0;
      doubleArray0[0] = doubleArray1;
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.from2DArray(doubleArray0);
      assertEquals(3, basic2DMatrix0.columns());
      assertEquals(1, basic2DMatrix0.rows());
      assertNotNull(basic2DMatrix0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      Matrix matrix0 = basic2DMatrix0.select(intArray0, intArray0);
      assertFalse(matrix0.equals((Object)basic2DMatrix0));
      assertNotSame(basic2DMatrix0, matrix0);
      assertNotSame(matrix0, basic2DMatrix0);
      assertArrayEquals(new int[] {0}, intArray0);
      assertEquals(3, basic2DMatrix0.columns());
      assertEquals(1, basic2DMatrix0.rows());
      assertEquals(1, matrix0.columns());
      assertEquals(1, matrix0.rows());
      assertNotNull(matrix0);
      
      // Undeclared exception!
      try { 
        Matrix.fromCSV("fiL[");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix(619, 619, 619);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(619, cRSMatrix0.columns());
      assertEquals(619, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertNotNull(cRSMatrix0);
      
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(619, 7, 619);
      assertFalse(rowMajorSparseMatrix0.equals((Object)cRSMatrix0));
      assertNotSame(rowMajorSparseMatrix0, cRSMatrix0);
      assertEquals(7, rowMajorSparseMatrix0.columns());
      assertEquals(0.0, rowMajorSparseMatrix0.min(), 0.01);
      assertEquals(0.0, rowMajorSparseMatrix0.density(), 0.01);
      assertEquals(0, rowMajorSparseMatrix0.cardinality());
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      assertEquals(619, rowMajorSparseMatrix0.rows());
      assertEquals(0.0, rowMajorSparseMatrix0.max(), 0.01);
      assertNotNull(rowMajorSparseMatrix0);
      
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(619);
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(0.0016155088852988692, cCSMatrix0.density(), 0.01);
      assertEquals(619, cCSMatrix0.cardinality());
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(1.0, cCSMatrix0.max(), 0.01);
      assertEquals(619, cCSMatrix0.columns());
      assertEquals(619, cCSMatrix0.rows());
      assertNotNull(cCSMatrix0);
      
      boolean boolean0 = cRSMatrix0.equals((Object) cCSMatrix0);
      assertFalse(cRSMatrix0.equals((Object)rowMajorSparseMatrix0));
      assertNotSame(cRSMatrix0, rowMajorSparseMatrix0);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(619, cRSMatrix0.columns());
      assertEquals(619, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(0.0016155088852988692, cCSMatrix0.density(), 0.01);
      assertEquals(619, cCSMatrix0.cardinality());
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(1.0, cCSMatrix0.max(), 0.01);
      assertEquals(619, cCSMatrix0.columns());
      assertEquals(619, cCSMatrix0.rows());
      assertFalse(boolean0);
      
      // Undeclared exception!
      cCSMatrix0.infinityNorm();
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(1840);
      assertEquals(1840, cCSMatrix0.rows());
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(5.434782608695652E-4, cCSMatrix0.density(), 0.01);
      assertEquals(1840, cCSMatrix0.columns());
      assertEquals(1.0, cCSMatrix0.max(), 0.01);
      assertEquals(1840, cCSMatrix0.cardinality());
      assertNotNull(cCSMatrix0);
      
      DenseVector denseVector0 = DenseVector.zero(1840);
      assertEquals(1840, denseVector0.length());
      assertNotNull(denseVector0);
      
      // Undeclared exception!
      try { 
        cCSMatrix0.insertColumn(1840, denseVector0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..1839
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(6);
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(6, cCSMatrix0.columns());
      assertEquals(6, cCSMatrix0.rows());
      assertEquals(0.16666666666666666, cCSMatrix0.density(), 0.01);
      assertEquals(1.0, cCSMatrix0.max(), 0.01);
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(6, cCSMatrix0.cardinality());
      assertNotNull(cCSMatrix0);
      
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(0, cRSMatrix0.rows());
      assertNotNull(cRSMatrix0);
      
      boolean boolean0 = cRSMatrix0.equals((Object) cCSMatrix0);
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(6, cCSMatrix0.columns());
      assertEquals(6, cCSMatrix0.rows());
      assertEquals(0.16666666666666666, cCSMatrix0.density(), 0.01);
      assertEquals(1.0, cCSMatrix0.max(), 0.01);
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(6, cCSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(0, cRSMatrix0.rows());
      assertFalse(boolean0);
      
      CCSMatrix cCSMatrix1 = (CCSMatrix)cCSMatrix0.insert((Matrix) cRSMatrix0);
      assertTrue(cCSMatrix1.equals((Object)cCSMatrix0));
      assertNotSame(cCSMatrix0, cCSMatrix1);
      assertNotSame(cCSMatrix1, cCSMatrix0);
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(6, cCSMatrix0.columns());
      assertEquals(6, cCSMatrix0.rows());
      assertEquals(0.16666666666666666, cCSMatrix0.density(), 0.01);
      assertEquals(1.0, cCSMatrix0.max(), 0.01);
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(6, cCSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(0, cRSMatrix0.rows());
      assertFalse(cCSMatrix1.isRowMajor());
      assertEquals(1.0, cCSMatrix1.max(), 0.01);
      assertEquals(6, cCSMatrix1.columns());
      assertEquals(6, cCSMatrix1.cardinality());
      assertEquals(0.0, cCSMatrix1.min(), 0.01);
      assertEquals(0.16666666666666666, cCSMatrix1.density(), 0.01);
      assertEquals(6, cCSMatrix1.rows());
      assertNotNull(cCSMatrix1);
      
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(vectorAccumulator0).accumulate();
      double[] doubleArray0 = cCSMatrix1.foldNonZeroInColumns(vectorAccumulator0);
      assertTrue(cCSMatrix0.equals((Object)cCSMatrix1));
      assertTrue(cCSMatrix1.equals((Object)cCSMatrix0));
      assertNotSame(cCSMatrix0, cCSMatrix1);
      assertNotSame(cCSMatrix1, cCSMatrix0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(6, cCSMatrix0.columns());
      assertEquals(6, cCSMatrix0.rows());
      assertEquals(0.16666666666666666, cCSMatrix0.density(), 0.01);
      assertEquals(1.0, cCSMatrix0.max(), 0.01);
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(6, cCSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(0, cRSMatrix0.rows());
      assertFalse(cCSMatrix1.isRowMajor());
      assertEquals(1.0, cCSMatrix1.max(), 0.01);
      assertEquals(6, cCSMatrix1.columns());
      assertEquals(6, cCSMatrix1.cardinality());
      assertEquals(0.0, cCSMatrix1.min(), 0.01);
      assertEquals(0.16666666666666666, cCSMatrix1.density(), 0.01);
      assertEquals(6, cCSMatrix1.rows());
      assertNotNull(doubleArray0);
      
      BasicVector basicVector0 = (BasicVector)DenseVector.zero(6);
      assertEquals(6, basicVector0.length());
      assertNotNull(basicVector0);
      
      // Undeclared exception!
      try { 
        cCSMatrix1.insertColumn(6, basicVector0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..5
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(6);
      assertEquals(6, cCSMatrix0.rows());
      assertEquals(0.16666666666666666, cCSMatrix0.density(), 0.01);
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(6, cCSMatrix0.cardinality());
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(6, cCSMatrix0.columns());
      assertEquals(1.0, cCSMatrix0.max(), 0.01);
      assertNotNull(cCSMatrix0);
      
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      DenseVector denseVector0 = DenseVector.zero(6);
      assertEquals(6, denseVector0.length());
      assertNotNull(denseVector0);
      
      // Undeclared exception!
      try { 
        cCSMatrix0.insertColumn((-3431), denseVector0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..5
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      SparseMatrix sparseMatrix0 = SparseMatrix.identity(10);
      assertEquals(10, sparseMatrix0.cardinality());
      assertEquals(1.0, sparseMatrix0.max(), 0.01);
      assertEquals(0.1, sparseMatrix0.density(), 0.01);
      assertEquals(10, sparseMatrix0.rows());
      assertTrue(sparseMatrix0.isRowMajor());
      assertEquals(0.0, sparseMatrix0.min(), 0.01);
      assertEquals(10, sparseMatrix0.columns());
      assertNotNull(sparseMatrix0);
      
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(619);
      assertEquals(1.0, cCSMatrix0.max(), 0.01);
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0.0016155088852988692, cCSMatrix0.density(), 0.01);
      assertEquals(619, cCSMatrix0.cardinality());
      assertEquals(619, cCSMatrix0.rows());
      assertEquals(619, cCSMatrix0.columns());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertNotNull(cCSMatrix0);
      
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(vectorAccumulator0).accumulate();
      double[] doubleArray0 = cCSMatrix0.foldNonZeroInColumns(vectorAccumulator0);
      assertEquals(1.0, cCSMatrix0.max(), 0.01);
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0.0016155088852988692, cCSMatrix0.density(), 0.01);
      assertEquals(619, cCSMatrix0.cardinality());
      assertEquals(619, cCSMatrix0.rows());
      assertEquals(619, cCSMatrix0.columns());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertNotNull(doubleArray0);
      
      DenseVector denseVector0 = DenseVector.zero(619);
      assertEquals(619, denseVector0.length());
      assertNotNull(denseVector0);
      
      cCSMatrix0.insertColumn(10, denseVector0);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(10, 776.2);
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(10, cCSMatrix0.rows());
      assertEquals(0.1, cCSMatrix0.density(), 0.01);
      assertEquals(10, cCSMatrix0.columns());
      assertEquals(776.2, cCSMatrix0.max(), 0.01);
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(10, cCSMatrix0.cardinality());
      assertNotNull(cCSMatrix0);
      
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(vectorAccumulator0).accumulate();
      double[] doubleArray0 = cCSMatrix0.foldNonZeroInColumns(vectorAccumulator0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(10, cCSMatrix0.rows());
      assertEquals(0.1, cCSMatrix0.density(), 0.01);
      assertEquals(10, cCSMatrix0.columns());
      assertEquals(776.2, cCSMatrix0.max(), 0.01);
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(10, cCSMatrix0.cardinality());
      assertNotNull(doubleArray0);
      
      DenseVector denseVector0 = DenseVector.zero(10);
      assertEquals(10, denseVector0.length());
      assertNotNull(denseVector0);
      
      CCSMatrix cCSMatrix1 = (CCSMatrix)cCSMatrix0.insertColumn(6, denseVector0);
      assertFalse(cCSMatrix1.equals((Object)cCSMatrix0));
      assertNotSame(cCSMatrix0, cCSMatrix1);
      assertNotSame(cCSMatrix1, cCSMatrix0);
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(10, cCSMatrix0.rows());
      assertEquals(0.1, cCSMatrix0.density(), 0.01);
      assertEquals(10, cCSMatrix0.columns());
      assertEquals(776.2, cCSMatrix0.max(), 0.01);
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(10, cCSMatrix0.cardinality());
      assertEquals(10, denseVector0.length());
      assertEquals(10, cCSMatrix1.cardinality());
      assertEquals(0.09090909090909091, cCSMatrix1.density(), 0.01);
      assertEquals(0.0, cCSMatrix1.min(), 0.01);
      assertFalse(cCSMatrix1.isRowMajor());
      assertEquals(10, cCSMatrix1.rows());
      assertEquals(11, cCSMatrix1.columns());
      assertEquals(776.2, cCSMatrix1.max(), 0.01);
      assertNotNull(cCSMatrix1);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.diagonal(6, 6);
      assertEquals(6, denseMatrix0.columns());
      assertEquals(6, denseMatrix0.rows());
      assertNotNull(denseMatrix0);
      
      Consumer<Double> consumer0 = (Consumer<Double>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      denseMatrix0.forEach(consumer0);
      assertEquals(6, denseMatrix0.columns());
      assertEquals(6, denseMatrix0.rows());
      
      Matrix matrix0 = denseMatrix0.add((double) 6);
      assertFalse(matrix0.equals((Object)denseMatrix0));
      assertNotSame(denseMatrix0, matrix0);
      assertNotSame(matrix0, denseMatrix0);
      assertEquals(6, denseMatrix0.columns());
      assertEquals(6, denseMatrix0.rows());
      assertEquals(6, matrix0.rows());
      assertEquals(6, matrix0.columns());
      assertNotNull(matrix0);
      
      double double0 = denseMatrix0.determinant();
      assertFalse(denseMatrix0.equals((Object)matrix0));
      assertNotSame(denseMatrix0, matrix0);
      assertEquals(6, denseMatrix0.columns());
      assertEquals(6, denseMatrix0.rows());
      assertEquals(46656.0, double0, 0.01);
      
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      matrix0.update(matrixFunction0);
      assertFalse(denseMatrix0.equals((Object)matrix0));
      assertFalse(matrix0.equals((Object)denseMatrix0));
      assertNotSame(denseMatrix0, matrix0);
      assertNotSame(matrix0, denseMatrix0);
      assertEquals(6, denseMatrix0.columns());
      assertEquals(6, denseMatrix0.rows());
      assertEquals(6, matrix0.rows());
      assertEquals(6, matrix0.columns());
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      // Undeclared exception!
      try { 
        Matrix.fromMatrixMarket("%%MatrixMarket matrix coorinte real general ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unknown format: coorinte.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }
}
