/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 04:13:23 GMT 2018
 */

package com.google.re2j;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.re2j.Regexp;
import com.google.re2j.Simplify;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Simplify_ESTest extends Simplify_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.STAR;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp0);
      // Undeclared exception!
      try { 
        Simplify.simplify(regexp1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Simplify", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.CAPTURE;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp0);
      // Undeclared exception!
      try { 
        Simplify.simplify(regexp1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Simplify", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Regexp[] regexpArray0 = new Regexp[1];
      Regexp.Op regexp_Op0 = Regexp.Op.REPEAT;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexp0.min = (-1);
      regexp0.subs = regexpArray0;
      // Undeclared exception!
      try { 
        Simplify.simplify(regexp0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Simplify", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Regexp[] regexpArray0 = new Regexp[5];
      Regexp.Op regexp_Op0 = Regexp.Op.CONCAT;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexp0.subs = regexpArray0;
      regexp0.min = 35;
      regexp0.subs = regexpArray0;
      Regexp regexp1 = Simplify.simplify(regexp0);
      Regexp regexp2 = Simplify.simplify(regexp0);
      assertNotNull(regexp2);
      assertSame(regexp2, regexp1);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Regexp[] regexpArray0 = new Regexp[1];
      Regexp.Op regexp_Op0 = Regexp.Op.REPEAT;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexp0.min = 13;
      regexp0.subs = regexpArray0;
      Regexp regexp1 = new Regexp(regexp0);
      Regexp regexp2 = Simplify.simplify(regexp1);
      assertNotSame(regexp2, regexp1);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Regexp[] regexpArray0 = new Regexp[7];
      regexpArray0[5] = regexpArray0[3];
      Regexp.Op regexp_Op0 = Regexp.Op.REPEAT;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexp0.subs = regexpArray0;
      regexp0.max = (-2863);
      Regexp regexp1 = Simplify.simplify(regexp0);
      Regexp regexp2 = Simplify.simplify(regexp1);
      assertSame(regexp2, regexp1);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Regexp[] regexpArray0 = new Regexp[9];
      regexpArray0[5] = regexpArray0[3];
      Regexp.Op regexp_Op0 = Regexp.Op.REPEAT;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexp0.subs = regexpArray0;
      regexp0.max = (-1);
      // Undeclared exception!
      try { 
        Simplify.simplify(regexp0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Simplify", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.ANY_CHAR;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp_Op0);
      Regexp[] regexpArray0 = new Regexp[6];
      regexpArray0[0] = regexp1;
      Regexp.Op regexp_Op1 = Regexp.Op.REPEAT;
      Regexp regexp2 = new Regexp(regexp_Op1);
      regexp2.reinit();
      regexp1.cap = 64;
      regexp2.min = (-1);
      regexp2.subs = regexpArray0;
      Regexp regexp3 = Simplify.simplify(regexp2);
      Object object0 = new Object();
      regexp1.equals(regexp0);
      regexp2.equals((Object) null);
      Simplify.simplify(regexp1);
      Simplify.simplify(regexp3);
      Regexp regexp4 = null;
      try {
        regexp4 = new Regexp((Regexp) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Regexp", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.ALTERNATE;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp[] regexpArray0 = new Regexp[1];
      Regexp regexp1 = new Regexp(regexp0);
      regexp1.name = "*S?`$m";
      regexpArray0[0] = regexp1;
      regexp1.reinit();
      regexp0.flags = 13;
      regexp1.min = (-400);
      regexp0.subs = regexpArray0;
      Regexp regexp2 = Simplify.simplify(regexp0);
      Regexp regexp3 = new Regexp(regexp0);
      Regexp regexp4 = Simplify.simplify(regexp3);
      regexp0.equals(regexp4);
      Regexp regexp5 = Simplify.simplify(regexp1);
      Simplify.simplify(regexp1);
      Simplify.simplify(regexp1);
      Simplify.simplify(regexp1);
      Simplify.simplify(regexp5);
      assertSame(regexp0, regexp2);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.ANY_CHAR;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp_Op0);
      Regexp[] regexpArray0 = new Regexp[6];
      regexpArray0[0] = regexp1;
      Regexp.Op regexp_Op1 = Regexp.Op.REPEAT;
      Regexp regexp2 = new Regexp(regexp_Op1);
      regexp1.cap = 64;
      regexp2.min = (-1);
      regexp2.subs = regexpArray0;
      regexp2.max = (-1);
      Regexp regexp3 = new Regexp(regexp_Op0);
      Regexp regexp4 = Simplify.simplify(regexp2);
      regexp0.subs = regexpArray0;
      Regexp regexp5 = new Regexp(regexp1);
      Object object0 = new Object();
      regexp5.equals(object0);
      regexp5.reinit();
      Regexp regexp6 = new Regexp(regexp0);
      Regexp regexp7 = Simplify.simplify(regexp1);
      regexp7.toString();
      Regexp regexp8 = new Regexp(regexp_Op1);
      regexp2.min = 64;
      Regexp regexp9 = new Regexp(regexp_Op1);
      Regexp.Op regexp_Op2 = Regexp.Op.PLUS;
      regexp4.op = regexp_Op2;
      Regexp regexp10 = new Regexp(regexp1);
      regexp3.subs = regexp2.subs;
      Regexp regexp11 = new Regexp(regexp7);
      Simplify.simplify(regexp4);
      Regexp regexp12 = new Regexp(regexp4);
      Regexp regexp13 = new Regexp(regexp0);
      Regexp regexp14 = new Regexp(regexp4.op);
      assertFalse(regexp14.equals((Object)regexp7));
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.ANY_CHAR;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp_Op0);
      Regexp[] regexpArray0 = new Regexp[6];
      regexpArray0[0] = regexp1;
      Regexp.Op regexp_Op1 = Regexp.Op.REPEAT;
      Regexp regexp2 = new Regexp(regexp_Op1);
      regexp1.cap = 64;
      regexp2.min = (-1);
      regexp2.subs = regexpArray0;
      regexp2.max = (-1);
      Regexp regexp3 = new Regexp(regexp_Op0);
      Simplify.simplify(regexp2);
      regexp0.subs = regexpArray0;
      Regexp regexp4 = new Regexp(regexp1);
      Object object0 = new Object();
      regexp4.equals(object0);
      regexp4.reinit();
      Regexp regexp5 = new Regexp(regexp0);
      Regexp regexp6 = Simplify.simplify(regexp1);
      regexp6.toString();
      Regexp regexp7 = new Regexp(regexp_Op1);
      regexp2.min = 64;
      Regexp regexp8 = new Regexp(regexp_Op1);
      Regexp regexp9 = new Regexp(regexp1);
      Simplify.simplify(regexp2);
      Regexp regexp10 = new Regexp(regexp3);
      Simplify.simplify(regexp5);
      Regexp regexp11 = new Regexp(regexp_Op1);
      Regexp regexp12 = Simplify.simplify(regexp10);
      regexp12.equals("rP@");
      Simplify.simplify(regexp0);
      Regexp regexp13 = Simplify.simplify(regexp6);
      assertNotSame(regexp13, regexp0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.ANY_CHAR_NOT_NL;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp[] regexpArray0 = new Regexp[2];
      regexpArray0[0] = regexp0;
      Regexp.Op regexp_Op1 = Regexp.Op.REPEAT;
      Regexp regexp1 = new Regexp(regexp_Op1);
      regexp1.min = (-1);
      regexp1.subs = regexpArray0;
      regexp1.max = (-1);
      Regexp regexp2 = Simplify.simplify(regexp0);
      Regexp regexp3 = Simplify.simplify(regexp1);
      Regexp regexp4 = Simplify.simplify(regexp2);
      regexp4.equals(regexp2);
      regexp2.name = null;
      Object object0 = new Object();
      regexp4.reinit();
      Object object1 = new Object();
      Regexp.Op regexp_Op2 = Regexp.Op.NO_WORD_BOUNDARY;
      Regexp regexp5 = new Regexp(regexp_Op2);
      Regexp regexp6 = new Regexp(regexp0);
      Regexp regexp7 = new Regexp(regexp0);
      Regexp.Op regexp_Op3 = Regexp.Op.REPEAT;
      regexp4.op = regexp_Op3;
      Regexp regexp8 = new Regexp(regexp_Op3);
      Regexp regexp9 = Simplify.simplify(regexp3);
      assertNotSame(regexp3, regexp9);
      assertFalse(regexp9.equals((Object)regexp3));
      
      int[] intArray0 = new int[0];
      regexp2.runes = intArray0;
      Regexp.Op regexp_Op4 = Regexp.Op.END_TEXT;
      Regexp regexp10 = new Regexp(regexp_Op4);
      Simplify.simplify(regexp4);
      Simplify.simplify(regexp2);
      Simplify.simplify(regexp7);
      Regexp regexp11 = Simplify.simplify(regexp2);
      assertFalse(regexp11.equals((Object)regexp9));
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.ANY_CHAR;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp[] regexpArray0 = new Regexp[9];
      regexpArray0[0] = regexp0;
      Regexp.Op regexp_Op1 = Regexp.Op.REPEAT;
      Regexp regexp1 = new Regexp(regexp_Op1);
      regexp1.min = (-1);
      regexp1.subs = regexpArray0;
      regexp1.max = (-1);
      Regexp regexp2 = Simplify.simplify(regexp0);
      Regexp regexp3 = Simplify.simplify(regexp1);
      regexp0.equals(regexp2);
      regexp3.reinit();
      Object object0 = new Object();
      regexp1.max = 2;
      Regexp.Op regexp_Op2 = Regexp.Op.CONCAT;
      Regexp regexp4 = new Regexp(regexp_Op2);
      Regexp regexp5 = new Regexp(regexp0);
      Simplify.simplify(regexp2);
      Simplify.simplify(regexp1);
      Regexp regexp6 = Simplify.simplify(regexp0);
      assertTrue(regexp6.equals((Object)regexp5));
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.ANY_CHAR_NOT_NL;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp0);
      Regexp[] regexpArray0 = new Regexp[6];
      regexpArray0[0] = regexp1;
      Regexp.Op regexp_Op1 = Regexp.Op.REPEAT;
      Regexp regexp2 = new Regexp(regexp_Op1);
      regexp2.reinit();
      regexp1.cap = 38;
      regexp2.min = 7;
      regexp2.equals(regexp1);
      regexp2.subs = regexpArray0;
      regexp2.max = 38;
      Regexp regexp3 = Simplify.simplify(regexp1);
      Simplify.simplify(regexp1);
      Regexp regexp4 = new Regexp(regexp_Op1);
      Object object0 = new Object();
      Object object1 = new Object();
      regexp4.equals(object1);
      regexp0.reinit();
      Simplify.simplify(regexp0);
      Simplify.simplify(regexp1);
      Simplify.simplify(regexp2);
      Regexp regexp5 = new Regexp(regexp_Op1);
      Regexp regexp6 = new Regexp(regexp_Op0);
      Regexp regexp7 = new Regexp(regexp_Op1);
      Simplify.simplify(regexp0);
      Regexp regexp8 = new Regexp(regexp_Op0);
      Simplify.simplify(regexp3);
      Regexp.Op regexp_Op2 = Regexp.Op.CONCAT;
      Regexp regexp9 = new Regexp(regexp_Op2);
      Regexp regexp10 = new Regexp(regexp_Op0);
      Simplify.simplify(regexp0);
      Regexp regexp11 = Simplify.simplify(regexp1);
      Regexp regexp12 = Simplify.simplify(regexp11);
      assertNotSame(regexp12, regexp5);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.ANY_CHAR_NOT_NL;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp[] regexpArray0 = new Regexp[6];
      regexpArray0[0] = regexp0;
      Regexp.Op regexp_Op1 = Regexp.Op.REPEAT;
      Regexp regexp1 = new Regexp(regexp_Op1);
      regexp1.reinit();
      regexp1.min = (-1);
      regexp1.equals(regexp0);
      regexp1.subs = regexpArray0;
      regexp1.max = (-1);
      regexp0.max = (-1);
      Simplify.simplify(regexp0);
      Regexp regexp2 = Simplify.simplify(regexp1);
      Regexp regexp3 = Simplify.simplify(regexp2);
      Regexp regexp4 = new Regexp(regexp_Op1);
      Object object0 = new Object();
      regexp4.subs = regexp1.subs;
      Object object1 = new Object();
      regexp4.reinit();
      Simplify.simplify(regexp3);
      Regexp regexp5 = new Regexp(regexp0);
      Regexp regexp6 = new Regexp(regexp0);
      regexp3.flags = 54;
      regexp3.equals(regexp2);
      Regexp.Op regexp_Op2 = Regexp.Op.PLUS;
      regexp3.op = regexp_Op2;
      Simplify.simplify((Regexp) null);
      Regexp regexp7 = Simplify.simplify(regexp3);
      assertSame(regexp2, regexp7);
      
      Regexp regexp8 = new Regexp(regexp3);
      Regexp regexp9 = new Regexp(regexp8);
      Regexp regexp10 = Simplify.simplify(regexp5);
      Regexp regexp11 = Simplify.simplify(regexp10);
      assertFalse(regexp11.equals((Object)regexp7));
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.ANY_CHAR;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp[] regexpArray0 = new Regexp[2];
      regexpArray0[0] = regexp0;
      Regexp.Op regexp_Op1 = Regexp.Op.REPEAT;
      Regexp regexp1 = new Regexp(regexp_Op1);
      regexp1.min = (-1);
      regexp1.subs = regexpArray0;
      regexp1.max = (-1);
      Regexp regexp2 = Simplify.simplify(regexp0);
      Regexp regexp3 = new Regexp(regexp_Op1);
      Regexp regexp4 = Simplify.simplify(regexp2);
      regexp4.equals(regexp2);
      regexp2.name = null;
      Object object0 = new Object();
      regexp1.max = 2;
      Regexp regexp5 = Simplify.simplify(regexp1);
      Regexp.Op regexp_Op2 = Regexp.Op.CONCAT;
      Regexp regexp6 = new Regexp(regexp_Op2);
      Regexp regexp7 = new Regexp(regexp5);
      regexp5.op = regexp_Op1;
      Regexp regexp8 = Simplify.simplify(regexp5);
      Regexp regexp9 = Simplify.simplify(regexp0);
      regexp8.reinit();
      regexp0.op = regexp_Op1;
      Simplify.simplify(regexp2);
      regexp6.cap = (-1);
      Simplify.simplify(regexp7);
      Regexp regexp10 = new Regexp(regexp8);
      Simplify.simplify(regexp1);
      Regexp regexp11 = new Regexp(regexp9);
      // Undeclared exception!
      try { 
        Simplify.simplify(regexp6);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Simplify", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.ANY_CHAR;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp[] regexpArray0 = new Regexp[2];
      regexpArray0[0] = regexp0;
      Regexp.Op regexp_Op1 = Regexp.Op.REPEAT;
      Regexp regexp1 = new Regexp(regexp_Op1);
      regexp1.min = 1;
      regexp1.subs = regexpArray0;
      Regexp regexp2 = Simplify.simplify(regexp0);
      Regexp regexp3 = Simplify.simplify(regexp1);
      Regexp regexp4 = new Regexp(regexp_Op0);
      regexp4.equals(regexp3);
      regexp4.reinit();
      regexp4.equals(regexp2);
      regexp0.reinit();
      Object object0 = new Object();
      Object object1 = new Object();
      Regexp regexp5 = Simplify.simplify(regexp0);
      Simplify.simplify(regexp5);
      Regexp.Op regexp_Op2 = Regexp.Op.ALTERNATE;
      Regexp regexp6 = new Regexp(regexp_Op2);
      // Undeclared exception!
      try { 
        Simplify.simplify(regexp6);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Simplify", e);
      }
  }
}
