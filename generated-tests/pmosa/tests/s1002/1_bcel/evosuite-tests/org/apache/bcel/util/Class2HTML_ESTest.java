/*
 * This file was automatically generated by EvoSuite
 * Mon Jul 16 20:21:17 GMT 2018
 */

package org.apache.bcel.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.FileNotFoundException;
import java.io.InputStream;
import java.lang.reflect.Method;
import org.apache.bcel.classfile.JavaClass;
import org.apache.bcel.util.Class2HTML;
import org.apache.bcel.util.ClassLoaderRepository;
import org.apache.bcel.util.ClassPath;
import org.apache.bcel.util.ClassPathRepository;
import org.apache.bcel.util.SyntheticRepository;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.time.chrono.MockHijrahDate;
import org.evosuite.runtime.mock.java.time.chrono.MockMinguoDate;
import org.evosuite.runtime.mock.java.time.chrono.MockThaiBuddhistDate;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Class2HTML_ESTest extends Class2HTML_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SyntheticRepository.getInstance();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Class2HTML.toHTML("g");
      String[] stringArray0 = new String[1];
      stringArray0[0] = "g";
      try { 
        Class2HTML.main(stringArray0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Class2HTML.referenceType("Nl");
      String[] stringArray0 = new String[1];
      stringArray0[0] = "<A HREF=\"Nl.html\" TARGET=_top>Nl</A>";
      try { 
        Class2HTML.main(stringArray0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SyntheticRepository syntheticRepository0 = SyntheticRepository.getInstance();
      Class<Object> class0 = Object.class;
      JavaClass javaClass0 = syntheticRepository0.loadClass(class0);
      Class2HTML class2HTML0 = new Class2HTML(javaClass0, "org.apache.commons.io.filefilter.CanWriteFileFilter");
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SyntheticRepository.getInstance();
      java.lang.ClassLoader classLoader0 = java.lang.ClassLoader.getSystemClassLoader();
      ClassLoaderRepository classLoaderRepository0 = new ClassLoaderRepository(classLoader0);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "java.util.regex.Matcher";
      stringArray0[1] = "java.util.regex.Matcher";
      stringArray0[3] = "java.util.regex.Matcher";
      stringArray0[4] = "java.util.regex.Matcher";
      stringArray0[1] = "java.util.regex.Matcher";
      JavaClass javaClass0 = classLoaderRepository0.loadClass("java.lang.String$1");
      Class2HTML class2HTML0 = new Class2HTML(javaClass0, "java.util.regex.Matcher");
      String string0 = Class2HTML.toHTML("java.lang.String$1");
      assertEquals("java.lang.String$1", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Class2HTML.toHTML("KE,;u:!c*x<zb");
      Class2HTML.toHTML(";!J#");
      String[] stringArray0 = new String[1];
      stringArray0[0] = "KE,;u:!c*x<zb";
      try { 
        Class2HTML.main(stringArray0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Class2HTML.toHTML("<TR VALIGN=TOP><TD><FONT COLOR=\"#FF0000\"><A NAME=method");
      Class2HTML.toHTML("&lt;TR VALIGN=TOP&gt;&lt;TD&gt;&lt;FONT COLOR=\"#FF0000\"&gt;&lt;A NAME=method");
      String[] stringArray0 = new String[8];
      stringArray0[0] = "<TR VALIGN=TOP><TD><FONT COLOR=\"#FF0000\"><A NAME=method";
      stringArray0[1] = "&lt;TR VALIGN=TOP&gt;&lt;TD&gt;&lt;FONT COLOR=\"#FF0000\"&gt;&lt;A NAME=method";
      stringArray0[2] = "-zip";
      stringArray0[3] = "&lt;TR VALIGN=TOP&gt;&lt;TD&gt;&lt;FONT COLOR=\"#FF0000\"&gt;&lt;A NAME=method";
      stringArray0[4] = "&lt;TR VALIGN=TOP&gt;&lt;TD&gt;&lt;FONT COLOR=\"#FF0000\"&gt;&lt;A NAME=method";
      stringArray0[5] = "<TR VALIGN=TOP><TD><FONT COLOR=\"#FF0000\"><A NAME=method";
      stringArray0[6] = "#fIc<,OV.";
      stringArray0[7] = "<TR VALIGN=TOP><TD><FONT COLOR=\"#FF0000\"><A NAME=method";
      try { 
        Class2HTML.main(stringArray0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // &lt;TR VALIGN=TOP&gt;&lt;TD&gt;&lt;FONT COLOR=\"#FF0000\"&gt;&lt;A NAME=method (No such file or directory)
         //
         verifyException("java.util.zip.ZipFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Class2HTML.toHTML("<TR VALIGN=TOP><TD><FONT COLOR=\"#FF0000\"><A NAME=method");
      Class2HTML.toHTML("&lt;TR VALIGN=TOP&gt;&lt;TD&gt;&lt;FONT COLOR=\"#FF0000\"&gt;&lt;A NAME=method");
      String[] stringArray0 = new String[8];
      stringArray0[0] = "&lt;TR VALIGN=TOP&gt;&lt;TD&gt;&lt;FONT COLOR=\"#FF0000\"&gt;&lt;A NAME=method";
      stringArray0[1] = "&lt;TR VALIGN=TOP&gt;&lt;TD&gt;&lt;FONT COLOR=\"#FF0000\"&gt;&lt;A NAME=method";
      stringArray0[2] = "-i";
      stringArray0[3] = "&lt;TR VALIGN=TOP&gt;&lt;TD&gt;&lt;FONT COLOR=\"#FF0000\"&gt;&lt;A NAME=method";
      stringArray0[4] = "&lt;TR VALIGN=TOP&gt;&lt;TD&gt;&lt;FONT COLOR=\"#FF0000\"&gt;&lt;A NAME=method";
      stringArray0[5] = "<TR VALIGN=TOP><TD><FONT COLOR=\"#FF0000\"><A NAME=method";
      stringArray0[6] = "dconst_1";
      stringArray0[7] = "<TR VALIGN=TOP><TD><FONT COLOR=\"#FF0000\"><A NAME=method";
      try { 
        Class2HTML.main(stringArray0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Class2HTML.toHTML("<TR VALIGN=TOP><TD><FONT COLOR=\"#FF0000\"><A NAME=method");
      String string0 = Class2HTML.toHTML("_cp.html\"\n MARGINWIDTH=\"0\" MARGINHEIGHT=\"0\" FRAMEBORDER=\"1\" SCROLLING=\"AUTO\">\n<FRAME NAME=\"Attributes\" SRC=\"");
      assertEquals("_cp.html\"\\n MARGINWIDTH=\"0\" MARGINHEIGHT=\"0\" FRAMEBORDER=\"1\" SCROLLING=\"AUTO\"&gt;\\n&lt;FRAME NAME=\"Attributes\" SRC=\"", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SyntheticRepository syntheticRepository0 = SyntheticRepository.getInstance();
      java.lang.ClassLoader classLoader0 = java.lang.ClassLoader.getSystemClassLoader();
      ClassLoaderRepository classLoaderRepository0 = new ClassLoaderRepository(classLoader0);
      classLoaderRepository0.getClassPath();
      SyntheticRepository.getInstance((ClassPath) null);
      Class<InputStream> class0 = InputStream.class;
      syntheticRepository0.loadClass(class0);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "java.util.regex.Matcher";
      stringArray0[1] = "java.util.regex.Matcher";
      stringArray0[2] = "java.util.regex.Matcher";
      stringArray0[3] = "java.util.regex.Matcher";
      stringArray0[4] = "java.util.regex.Matcher";
      stringArray0[5] = "java.util.regex.Matcher";
      stringArray0[6] = "java.util.regex.Matcher";
      stringArray0[7] = "-d";
      stringArray0[8] = "java.util.regex.Matcher";
      try { 
        Class2HTML.main(stringArray0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SyntheticRepository.getInstance();
      FileSystemHandling.shouldAllThrowIOExceptions();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "-d";
      stringArray0[1] = "-d";
      Class2HTML.main(stringArray0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SyntheticRepository syntheticRepository0 = SyntheticRepository.getInstance();
      Class<MockHijrahDate> class0 = MockHijrahDate.class;
      syntheticRepository0.loadClass(class0);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "-d";
      stringArray0[1] = "-d";
      stringArray0[2] = "-d";
      stringArray0[3] = "-d";
      stringArray0[4] = "-d";
      stringArray0[5] = "-d";
      Class2HTML.main(stringArray0);
      Class<MockMinguoDate> class1 = MockMinguoDate.class;
      JavaClass javaClass0 = syntheticRepository0.loadClass(class1);
      Class2HTML class2HTML0 = new Class2HTML(javaClass0, "float");
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SyntheticRepository.getInstance();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "-d";
      stringArray0[1] = "-d";
      stringArray0[2] = "-d";
      stringArray0[3] = "java.util.regex.Matcher/";
      Class2HTML.main(stringArray0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SyntheticRepository syntheticRepository0 = SyntheticRepository.getInstance();
      ClassPath classPath0 = new ClassPath("CONSTANT_Float");
      ClassPath classPath1 = new ClassPath(classPath0, "D\"E");
      ClassPathRepository classPathRepository0 = new ClassPathRepository(classPath1);
      Class<MockThaiBuddhistDate> class0 = MockThaiBuddhistDate.class;
      classPath1.getResourceAsStream("D\"E");
      JavaClass javaClass0 = classPathRepository0.loadClass(class0);
      syntheticRepository0.removeClass(javaClass0);
      Class<InputStream> class1 = InputStream.class;
      JavaClass javaClass1 = syntheticRepository0.loadClass(class1);
      javaClass1.setClassName("sX");
      Class2HTML class2HTML0 = new Class2HTML(javaClass1, "j=Z9_");
  }
}
