/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 05:08:31 GMT 2018
 */

package wheel.asm;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectStreamConstants;
import java.io.SequenceInputStream;
import java.util.Enumeration;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import wheel.asm.Attribute;
import wheel.asm.ClassReader;
import wheel.asm.ClassVisitor;
import wheel.asm.ClassWriter;
import wheel.asm.Edge;
import wheel.asm.FieldWriter;
import wheel.asm.Frame;
import wheel.asm.Item;
import wheel.asm.Label;
import wheel.asm.Type;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ClassReader_ESTest extends ClassReader_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      ClassReader classReader0 = null;
      try {
        classReader0 = new ClassReader(sequenceInputStream0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      System.setCurrentTimeMillis(0L);
      ClassReader classReader0 = null;
      try {
        classReader0 = new ClassReader("LocalVariableTypeTable");
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Class not found
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("org.apache.commons.io.IOCase");
      ClassWriter classWriter0 = new ClassWriter(1);
      Attribute attribute0 = new Attribute("(Ut R@td XXl0");
      Attribute attribute1 = new Attribute("org.apache.commons.io.IOCase");
      Attribute attribute2 = attribute0.next;
      classReader0.accept((ClassVisitor) classWriter0, (Attribute[]) null, 1);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      classReader0.readShort(2691);
      Attribute attribute3 = new Attribute("(Ut R@td XXl0");
      Attribute attribute4 = attribute1.next;
      classReader0.accept((ClassVisitor) classWriter0, (Attribute[]) null, 251);
      // Undeclared exception!
      try { 
        classReader0.getItem(991);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 991
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("org.apache.commons.io.IOCase");
      ClassWriter classWriter0 = new ClassWriter(classReader0, 4);
      Attribute attribute0 = new Attribute("(Ut R@td XXl0");
      Attribute attribute1 = new Attribute("Signature");
      Attribute attribute2 = attribute1.next;
      // Undeclared exception!
      try { 
        classReader0.getItem(3751);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3751
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("org.apache.commons.io.IOCase");
      assertEquals(49, classReader0.getAccess());
      assertNotNull(classReader0);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(1531, classReader0.header);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'P';
      charArray0[1] = '3';
      charArray0[2] = '/';
      charArray0[3] = 'o';
      // Undeclared exception!
      try { 
        classReader0.readUTF8(128, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("org.apache.commons.io.IOCase");
      assertEquals(49, classReader0.getAccess());
      assertNotNull(classReader0);
      assertEquals(1531, classReader0.header);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      
      ClassWriter classWriter0 = new ClassWriter(1531);
      assertNotNull(classWriter0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      int int0 = classWriter0.addUninitializedType("org.apache.commons.io.IOCase", 1);
      assertEquals(1, int0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      FieldWriter fieldWriter0 = classWriter0.lastField;
      assertNull(fieldWriter0);
      
      Item item0 = classWriter0.newDouble(0.0);
      assertNotNull(item0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      String string0 = classReader0.getSuperName();
      assertEquals(49, classReader0.getAccess());
      assertNotNull(string0);
      assertEquals("java/lang/Object", string0);
      assertEquals(1531, classReader0.header);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      
      classReader0.accept((ClassVisitor) classWriter0, 111);
      assertEquals(49, classReader0.getAccess());
      assertEquals(1531, classReader0.header);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      char[] charArray0 = new char[3];
      charArray0[1] = 'f';
      charArray0[1] = '%';
      // Undeclared exception!
      try { 
        classReader0.readUTF8((-1662), charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("org.apache.commons.io.IOCase");
      assertEquals(49, classReader0.getAccess());
      assertNotNull(classReader0);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(1531, classReader0.header);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(1, ClassReader.SKIP_CODE);
      
      ClassWriter classWriter0 = new ClassWriter(classReader0, 4);
      assertEquals(49, classReader0.getAccess());
      assertNotNull(classWriter0);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(1531, classReader0.header);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      Attribute attribute0 = new Attribute("Signature");
      assertTrue(attribute0.isUnknown());
      assertFalse(attribute0.isCodeAttribute());
      assertNotNull(attribute0);
      
      Attribute attribute1 = attribute0.next;
      assertNull(attribute1);
      
      Attribute[] attributeArray0 = new Attribute[4];
      classReader0.accept((ClassVisitor) classWriter0, attributeArray0, 4);
      assertEquals(49, classReader0.getAccess());
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(1531, classReader0.header);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("org.apache.commons.io.IOCase");
      assertEquals(49, classReader0.getAccess());
      assertNotNull(classReader0);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(1531, classReader0.header);
      
      String[] stringArray0 = classReader0.getInterfaces();
      assertEquals(49, classReader0.getAccess());
      assertNotNull(stringArray0);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(1531, classReader0.header);
      
      int int0 = Type.BYTE;
      assertEquals(3, int0);
      
      String string0 = classReader0.getSuperName();
      assertEquals(49, classReader0.getAccess());
      assertNotNull(string0);
      assertEquals("java/lang/Object", string0);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(1531, classReader0.header);
      
      String string1 = classReader0.getSuperName();
      assertEquals(49, classReader0.getAccess());
      assertNotNull(string1);
      assertEquals("java/lang/Object", string1);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(1531, classReader0.header);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-107);
      int int1 = classReader0.readByte((byte)0);
      assertEquals(49, classReader0.getAccess());
      assertEquals(202, int1);
      assertFalse(int1 == int0);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(1531, classReader0.header);
      
      int int2 = classReader0.readByte(1);
      assertEquals(49, classReader0.getAccess());
      assertEquals(254, int2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(1531, classReader0.header);
      
      String string2 = classReader0.getSuperName();
      assertEquals(49, classReader0.getAccess());
      assertNotNull(string2);
      assertEquals("java/lang/Object", string2);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(1531, classReader0.header);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("org.apache.commons.io.IOCase");
      assertEquals(49, classReader0.getAccess());
      assertNotNull(classReader0);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(1531, classReader0.header);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      
      int int0 = Frame.INTEGER;
      assertEquals(16777217, int0);
      
      ClassReader classReader1 = new ClassReader(classReader0.b);
      assertEquals(49, classReader0.getAccess());
      assertEquals(49, classReader1.getAccess());
      assertNotNull(classReader1);
      assertFalse(classReader1.equals((Object)classReader0));
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(1531, classReader0.header);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(1531, classReader1.header);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      
      String string0 = classReader0.getSuperName();
      assertNotSame(classReader0, classReader1);
      assertEquals(49, classReader0.getAccess());
      assertNotNull(string0);
      assertEquals("java/lang/Object", string0);
      assertFalse(classReader0.equals((Object)classReader1));
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(1531, classReader0.header);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)115;
      byteArray0[1] = (byte)115;
      short short0 = classReader0.readShort(19);
      assertNotSame(classReader0, classReader1);
      assertEquals(49, classReader0.getAccess());
      assertEquals((short)20746, short0);
      assertFalse(classReader0.equals((Object)classReader1));
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(1531, classReader0.header);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      
      int int1 = classReader0.readByte((byte)115);
      assertNotSame(classReader0, classReader1);
      assertEquals(49, classReader0.getAccess());
      assertEquals(102, int1);
      assertFalse(classReader0.equals((Object)classReader1));
      assertFalse(int1 == int0);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(1531, classReader0.header);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(4, ClassReader.SKIP_FRAMES);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("org.apache.commons.io.IOCase");
      assertEquals(49, classReader0.getAccess());
      assertNotNull(classReader0);
      assertEquals(1531, classReader0.header);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(1, ClassReader.SKIP_CODE);
      
      ClassWriter classWriter0 = new ClassWriter(1);
      assertNotNull(classWriter0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      Attribute attribute0 = new Attribute("(Ut R@td XXl0");
      assertTrue(attribute0.isUnknown());
      assertFalse(attribute0.isCodeAttribute());
      assertNotNull(attribute0);
      
      Attribute attribute1 = new Attribute("org.apache.commons.io.IOCase");
      assertFalse(attribute1.isCodeAttribute());
      assertTrue(attribute1.isUnknown());
      assertNotNull(attribute1);
      assertFalse(attribute1.equals((Object)attribute0));
      
      Attribute attribute2 = attribute0.next;
      assertNull(attribute2);
      
      attribute0.value = classReader0.b;
      assertEquals(49, classReader0.getAccess());
      assertTrue(attribute0.isUnknown());
      assertFalse(attribute0.isCodeAttribute());
      
      classReader0.accept((ClassVisitor) classWriter0, (Attribute[]) null, 2);
      assertEquals(49, classReader0.getAccess());
      assertEquals(1531, classReader0.header);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      int int0 = classReader0.readInt(9);
      assertEquals(49, classReader0.getAccess());
      assertEquals(2097741847, int0);
      assertEquals(1531, classReader0.header);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(1, ClassReader.SKIP_CODE);
      
      int int1 = (-2104);
      // Undeclared exception!
      try { 
        classReader0.readByte((-2104));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2104
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      ClassReader classReader0 = new ClassReader("org.apache.commons.io.IOCase");
      assertEquals(49, classReader0.getAccess());
      assertNotNull(classReader0);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(1531, classReader0.header);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(1, ClassReader.SKIP_CODE);
      
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      assertEquals(2, int0);
      
      String string0 = classReader0.getSuperName();
      assertEquals(49, classReader0.getAccess());
      assertNotNull(string0);
      assertEquals("java/lang/Object", string0);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(1531, classReader0.header);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(1, ClassReader.SKIP_CODE);
      
      ClassWriter classWriter0 = new ClassWriter(1);
      assertNotNull(classWriter0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      byte[] byteArray0 = new byte[14];
      byteArray0[1] = (byte) (-109);
      int int1 = classWriter0.newClass("java/lang/Object");
      assertEquals(2, int1);
      assertTrue(int1 == int0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      classReader0.accept((ClassVisitor) classWriter0, (int) (byte)0);
      assertEquals(49, classReader0.getAccess());
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(1531, classReader0.header);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      // Undeclared exception!
      try { 
        classReader0.readUTF8(5, (char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("org.apache.commons.io.IOCase");
      ClassWriter classWriter0 = new ClassWriter(1531);
      int int0 = Frame.INTEGER;
      ClassReader classReader1 = new ClassReader(classReader0.b);
      classReader0.getSuperName();
      byte[] byteArray0 = new byte[7];
      ClassReader classReader2 = new ClassReader("java/lang/Object");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      classReader1.getInterfaces();
      ClassReader classReader3 = new ClassReader(classReader1.b);
      classWriter0.getCommonSuperClass("java/lang/Object", "java/lang/Object");
      classReader2.readInt(2);
      classReader2.accept((ClassVisitor) classWriter0, (Attribute[]) null, (-1161953280));
      classReader1.readUnsignedShort(1531);
      classReader2.accept((ClassVisitor) classWriter0, (Attribute[]) null, 122);
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        classReader2.readClass((-1), charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      byte byte0 = (byte) (-109);
      byte[] byteArray0 = new byte[14];
      byteArray0[1] = (byte) (-109);
      Label[] labelArray0 = null;
      ClassReader classReader0 = new ClassReader(byteArray0);
      classReader0.getAccess();
      // Undeclared exception!
      try { 
        classReader0.readByte((-2801));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2801
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      byte[] byteArray0 = new byte[14];
      ClassReader classReader0 = new ClassReader(byteArray0);
      classReader0.getAccess();
      byte[] byteArray1 = new byte[8];
      // Undeclared exception!
      try { 
        classReader0.readLabel((byte)0, (Label[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      String string0 = "org.apache.commons.io.IOCase";
      ClassReader classReader0 = new ClassReader("org.apache.commons.io.IOCase");
      ClassWriter classWriter0 = new ClassWriter(1531);
      classWriter0.addUninitializedType("org.apache.commons.io.IOCase", 1);
      classWriter0.visitSource("", "Synthetic");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      char[] charArray0 = new char[7];
      charArray0[0] = 'T';
      charArray0[1] = 'P';
      charArray0[2] = 's';
      charArray0[3] = 'm';
      charArray0[4] = ',';
      charArray0[5] = '+';
      charArray0[6] = '%';
      // Undeclared exception!
      try { 
        classReader0.readConst(1, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ClassReader classReader0 = new ClassReader("org.apache.commons.io.IOCase");
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      ClassReader classReader1 = new ClassReader(classReader0.b);
      classReader0.getSuperName();
      ClassWriter classWriter0 = new ClassWriter(1);
      byte[] byteArray0 = new byte[14];
      byteArray0[1] = (byte) (-109);
      classWriter0.newClass("java/lang/Object");
      ClassReader classReader2 = null;
      try {
        classReader2 = new ClassReader(classReader1.b, 124, 92);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 47629
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("org.apache.commons.io.IOCase");
      ClassWriter classWriter0 = new ClassWriter(classReader0, 4);
      int int0 = Frame.INTEGER;
      classReader0.getClassName();
      classReader0.getSuperName();
      ClassWriter classWriter1 = new ClassWriter(classReader0, 19);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-121);
      ClassReader classReader1 = new ClassReader("java/lang/Object");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      classReader0.getInterfaces();
      classReader0.getSuperName();
      classWriter0.getCommonSuperClass("org/apache/commons/io/IOCase", "org.apache.commons.io.IOCase");
      int int1 = 1244;
      classReader1.accept((ClassVisitor) classWriter1, 1244);
      char[] charArray0 = null;
      // Undeclared exception!
      try { 
        classReader0.readUTF8(8, (char[]) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 125
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ClassReader classReader0 = new ClassReader("org.apache.commons.io.IOCase");
      int int0 = Frame.BASE;
      classReader0.getSuperName();
      int int1 = 19;
      ClassWriter classWriter0 = new ClassWriter(classReader0, 19);
      Attribute[] attributeArray0 = null;
      ClassReader classReader1 = new ClassReader("java/lang/Object");
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      classReader1.getInterfaces();
      ClassReader classReader2 = new ClassReader(classReader0.b);
      String string0 = "RuntimeInvisibleAnnotations";
      // Undeclared exception!
      try { 
        classWriter0.getCommonSuperClass("RuntimeInvisibleAnnotations", "org.apache.commons.io.IOCase");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.ClassNotFoundException: Class 'RuntimeInvisibleAnnotations.class' should be in target project, but could not be found!
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ClassReader classReader0 = new ClassReader("org.apache.commons.io.IOCase");
      int int0 = Frame.INTEGER;
      ClassReader classReader1 = new ClassReader(classReader0.b);
      classReader0.getSuperName();
      ClassWriter classWriter0 = new ClassWriter(classReader1, 771);
      ClassReader classReader2 = new ClassReader("java/lang/Object");
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      classReader0.getInterfaces();
      ClassReader classReader3 = new ClassReader(classReader1.b);
      classWriter0.getCommonSuperClass("org.apache.commons.io.IOCase", "java/lang/Object");
      ClassWriter classWriter1 = new ClassWriter(classReader2, 1120);
      char[] charArray0 = new char[2];
      charArray0[0] = 'h';
      charArray0[1] = 'y';
      // Undeclared exception!
      try { 
        classReader3.readConst((-4337), charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -4337
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("org.apache.commons.io.IOCase");
      ClassWriter classWriter0 = new ClassWriter(classReader0, 4);
      int int0 = Frame.INTEGER;
      ClassReader classReader1 = new ClassReader(classReader0.b);
      classReader0.getClassName();
      classReader0.getSuperName();
      ClassWriter classWriter1 = new ClassWriter(classReader0, 19);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-121);
      ClassReader classReader2 = new ClassReader("java/lang/Object");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      classReader1.getInterfaces();
      ClassReader classReader3 = new ClassReader(classReader1.b);
      classWriter0.getCommonSuperClass("org/apache/commons/io/IOCase", "org.apache.commons.io.IOCase");
      int int1 = Frame.ARRAY_OF;
      classReader2.readUnsignedShort(38);
      classReader2.accept((ClassVisitor) classWriter1, (Attribute[]) null, 268435456);
      classReader2.getSuperName();
      classReader2.accept((ClassVisitor) classWriter0, (Attribute[]) null, (-1843));
      classReader2.readUnsignedShort(2);
      char[] charArray0 = new char[7];
      charArray0[0] = 'x';
      charArray0[1] = 'x';
      charArray0[1] = 's';
      charArray0[3] = '\u0000';
      // Undeclared exception!
      try { 
        classReader0.readConst((-623), charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -623
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }
}
