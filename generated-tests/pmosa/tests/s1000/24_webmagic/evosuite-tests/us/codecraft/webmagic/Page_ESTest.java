/*
 * This file was automatically generated by EvoSuite
 * Mon Jul 16 13:12:56 GMT 2018
 */

package us.codecraft.webmagic;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import us.codecraft.webmagic.Page;
import us.codecraft.webmagic.Request;
import us.codecraft.webmagic.selector.AndSelector;
import us.codecraft.webmagic.selector.Html;
import us.codecraft.webmagic.selector.Json;
import us.codecraft.webmagic.selector.JsonPathSelector;
import us.codecraft.webmagic.selector.OrSelector;
import us.codecraft.webmagic.selector.PlainText;
import us.codecraft.webmagic.selector.RegexSelector;
import us.codecraft.webmagic.selector.ReplaceSelector;
import us.codecraft.webmagic.selector.Selectable;
import us.codecraft.webmagic.selector.Selector;
import us.codecraft.webmagic.selector.SmartContentSelector;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Page_ESTest extends Page_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Page page0 = new Page();
      page0.getTargetRequests();
      page0.setBytes((byte[]) null);
      page0.setCharset((String) null);
      page0.getJson();
      Page page1 = Page.fail();
      page0.setDownloadSuccess(true);
      Request request0 = new Request();
      Request request1 = request0.setBinaryContent(false);
      Request request2 = request1.addCookie("_cycle_tried_times", ", resultItems=");
      Request request3 = request2.setMethod("$XAEdF_I'7=$");
      Request request4 = request3.addHeader("_cycle_tried_times", ", resultItems=");
      page1.setRequest(request4);
      page0.getBytes();
      page0.setCharset((String) null);
      assertTrue(page0.isDownloadSuccess());
      
      Json json0 = page1.getJson();
      assertNotNull(json0);
      assertFalse(page1.isDownloadSuccess());
      assertEquals(200, page1.getStatusCode());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Page page0 = Page.fail();
      Request request0 = new Request("");
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)46;
      byteArray0[1] = (byte)125;
      byteArray0[2] = (byte)40;
      request0.addHeader(")fracA5V^BL", "");
      request0.addHeader("", "");
      byteArray0[3] = (byte)20;
      page0.setBytes(byteArray0);
      request0.putExtra("87Kttk h'FPl", "87Kttk h'FPl");
      request0.setMethod("7I");
      page0.addTargetRequest(request0);
      page0.toString();
      page0.setDownloadSuccess(false);
      page0.setRawText("kPFEUwD=P:I0j1QUqs.");
      // Undeclared exception!
      try { 
        page0.addTargetRequest(", charset='");
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("us.codecraft.webmagic.Page", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Page page0 = new Page();
      page0.setDownloadSuccess(false);
      assertEquals(200, page0.getStatusCode());
      
      page0.setStatusCode(1);
      page0.getRequest();
      page0.getBytes();
      assertFalse(page0.isDownloadSuccess());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Page page0 = new Page();
      Page page1 = page0.setRawText("LU");
      Request request0 = new Request((String) null);
      request0.putExtra("/LeYufI", (Object) null);
      Request request1 = request0.setMethod((String) null);
      request1.setExtras((Map<String, Object>) null);
      Page.fail();
      request0.setBinaryContent(false);
      Request request2 = request0.setUrl("");
      page1.addTargetRequest(request2);
      Page page2 = page0.setSkip(false);
      SmartContentSelector smartContentSelector0 = new SmartContentSelector();
      page2.setRequest(request1);
      // Undeclared exception!
      try { 
        smartContentSelector0.selectList("_cycle_tried_times");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.selector.SmartContentSelector", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Page page0 = Page.fail();
      Request request0 = new Request();
      Request request1 = request0.addHeader("$ can not apply to plain text. Please check whether you use a previous xpath with attribute select (/@href etc).", "O2P]rP");
      Request request2 = request0.putExtra(">", request1);
      Request request3 = request2.setUrl("");
      Request request4 = request3.addHeader("", "");
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      Request request5 = request4.setExtras(hashMap0);
      page0.addTargetRequest(request5);
      Page page1 = page0.setSkip(true);
      Json json0 = page1.getJson();
      assertNotNull(json0);
      
      page1.getTargetRequests();
      page0.getCharset();
      assertEquals(200, page0.getStatusCode());
      assertFalse(page0.isDownloadSuccess());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Page page0 = new Page();
      page0.getTargetRequests();
      page0.getRequest();
      Page page1 = page0.setRawText("_cycle_tried_times");
      Object object0 = new Object();
      page1.putField("_cycle_tried_times", object0);
      assertTrue(page1.isDownloadSuccess());
      assertEquals(200, page1.getStatusCode());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Page page0 = Page.fail();
      page0.isDownloadSuccess();
      Selector[] selectorArray0 = new Selector[0];
      // Undeclared exception!
      try { 
        page0.getHtml();
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/jsoup/nodes/Node
         //
         verifyException("us.codecraft.webmagic.Page", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Page page0 = new Page();
      Page page1 = page0.setRawText((String) null);
      int int0 = page1.getStatusCode();
      assertEquals(200, int0);
      assertTrue(page1.isDownloadSuccess());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Page page0 = new Page();
      Request request0 = null;
      page0.addTargetRequest((Request) null);
      page0.getHeaders();
      page0.setHeaders((Map<String, List<String>>) null);
      // Undeclared exception!
      try { 
        page0.getHtml();
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/jsoup/nodes/Node
         //
         verifyException("us.codecraft.webmagic.Page", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Page page0 = new Page();
      Request request0 = new Request((String) null);
      Request request1 = request0.setCharset("");
      page0.setRequest(request1);
      Request request2 = new Request("#");
      page0.setRequest(request2);
      PlainText plainText0 = PlainText.create("");
      plainText0.getFirstSourceText();
      plainText0.replace("#", "_cycle_tried_times");
      request2.setMethod("(?is)<!DOCTYPE.*?>");
      request2.putExtra("", page0);
      page0.setUrl(plainText0);
      page0.setRequest(request2);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-49);
      // Undeclared exception!
      try { 
        plainText0.$("");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // $ can not apply to plain text. Please check whether you use a previous xpath with attribute select (/@href etc).
         //
         verifyException("us.codecraft.webmagic.selector.PlainText", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Page page0 = Page.fail();
      page0.setStatusCode(0);
      page0.getUrl();
      // Undeclared exception!
      try { 
        page0.getHtml();
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/jsoup/nodes/Node
         //
         verifyException("us.codecraft.webmagic.Page", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Page page0 = new Page();
      Page page1 = page0.setSkip(true);
      HashMap<String, List<String>> hashMap0 = new HashMap<String, List<String>>();
      LinkedList<Selector> linkedList0 = new LinkedList<Selector>();
      AndSelector andSelector0 = new AndSelector(linkedList0);
      List<String> list0 = andSelector0.selectList("invalid regex ");
      hashMap0.put("invalid regex ", list0);
      page1.setCharset((String) null);
      page1.setHeaders(hashMap0);
      page0.setUrl((Selectable) null);
      Json json0 = new Json("");
      json0.match();
      page0.setUrl(json0);
      page1.setStatusCode(3);
      page1.getCharset();
      page1.getRawText();
      HashMap<String, List<String>> hashMap1 = new HashMap<String, List<String>>();
      hashMap1.values();
      page1.setHeaders(hashMap1);
      assertEquals(3, page1.getStatusCode());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Page page0 = new Page();
      HashMap<String, List<String>> hashMap0 = new HashMap<String, List<String>>();
      page0.getJson();
      page0.setHeaders(hashMap0);
      page0.getResultItems();
      // Undeclared exception!
      try { 
        page0.toString();
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/collections/CollectionUtils
         //
         verifyException("us.codecraft.webmagic.selector.AbstractSelectable", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Page page0 = new Page();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add(" lA|>c7AAA7-S");
      // Undeclared exception!
      try { 
        page0.addTargetRequests((List<String>) linkedList0, 0L);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("us.codecraft.webmagic.Page", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Page page0 = new Page();
      page0.setRawText("");
      Json json0 = page0.getJson();
      assertNotNull(json0);
      
      LinkedList<String> linkedList0 = new LinkedList<String>();
      page0.addTargetRequests((List<String>) linkedList0, (-1L));
      assertTrue(page0.isDownloadSuccess());
      assertEquals(200, page0.getStatusCode());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Page page0 = Page.fail();
      LinkedList<Selector> linkedList0 = new LinkedList<Selector>();
      AndSelector andSelector0 = new AndSelector(linkedList0);
      List<String> list0 = andSelector0.selectList("");
      page0.addTargetRequests(list0);
      assertFalse(page0.isDownloadSuccess());
      assertEquals(200, page0.getStatusCode());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Page page0 = new Page();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      page0.addTargetRequests((List<String>) linkedList0);
      // Undeclared exception!
      try { 
        page0.getHtml();
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/jsoup/nodes/Node
         //
         verifyException("us.codecraft.webmagic.Page", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Page page0 = new Page();
      page0.getJson();
      Json json0 = page0.getJson();
      assertNotNull(json0);
      
      page0.getTargetRequests();
      assertTrue(page0.isDownloadSuccess());
      assertEquals(200, page0.getStatusCode());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Page page0 = Page.fail();
      page0.setHtml((Html) null);
      assertEquals(200, page0.getStatusCode());
      assertFalse(page0.isDownloadSuccess());
  }
}
