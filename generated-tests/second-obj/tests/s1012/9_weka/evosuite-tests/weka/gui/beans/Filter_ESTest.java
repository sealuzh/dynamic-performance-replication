/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 00:54:13 GMT 2018
 */

package weka.gui.beans;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.AWTEventMulticaster;
import java.awt.Component;
import java.awt.Frame;
import java.awt.GraphicsConfiguration;
import java.awt.HeadlessException;
import java.awt.Label;
import java.awt.RenderingHints;
import java.awt.TextField;
import java.awt.event.HierarchyBoundsListener;
import java.awt.event.MouseListener;
import java.awt.event.MouseWheelListener;
import java.awt.geom.AffineTransform;
import java.awt.image.AffineTransformOp;
import java.awt.image.DirectColorModel;
import java.beans.EventSetDescriptor;
import java.io.IOException;
import java.net.URI;
import java.net.URISyntaxException;
import java.util.Enumeration;
import java.util.Map;
import javax.swing.Icon;
import javax.swing.JToggleButton;
import javax.swing.plaf.metal.MetalComboBoxEditor;
import javax.swing.text.DefaultCaret;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.mock.java.time.chrono.MockHijrahDate;
import org.evosuite.runtime.mock.java.time.chrono.MockJapaneseDate;
import org.evosuite.runtime.mock.java.time.chrono.MockMinguoDate;
import org.evosuite.runtime.mock.javax.swing.MockJFileChooser;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import weka.associations.FPGrowth;
import weka.classifiers.bayes.BayesNet;
import weka.core.EuclideanDistance;
import weka.core.Instance;
import weka.core.Instances;
import weka.core.NormalizableDistance;
import weka.core.OptionHandlerJavadoc;
import weka.core.TestInstances;
import weka.core.converters.CSVLoader;
import weka.core.converters.MatlabLoader;
import weka.core.converters.TextDirectoryLoader;
import weka.core.tokenizers.WordTokenizer;
import weka.filters.AllFilter;
import weka.filters.MultiFilter;
import weka.filters.supervised.attribute.ClassOrder;
import weka.filters.supervised.instance.StratifiedRemoveFolds;
import weka.gui.Logger;
import weka.gui.SysErrLog;
import weka.gui.beans.Appender;
import weka.gui.beans.Associator;
import weka.gui.beans.AttributeSummarizer;
import weka.gui.beans.BeanVisual;
import weka.gui.beans.ClassAssigner;
import weka.gui.beans.ClassValuePicker;
import weka.gui.beans.Classifier;
import weka.gui.beans.Clusterer;
import weka.gui.beans.ConfigurationListener;
import weka.gui.beans.CrossValidationFoldMaker;
import weka.gui.beans.DataSetEvent;
import weka.gui.beans.Filter;
import weka.gui.beans.FlowByExpression;
import weka.gui.beans.InstanceEvent;
import weka.gui.beans.InstanceListener;
import weka.gui.beans.Loader;
import weka.gui.beans.PredictionAppender;
import weka.gui.beans.Saver;
import weka.gui.beans.ScatterPlotMatrix;
import weka.gui.beans.SerializedModelSaver;
import weka.gui.beans.Sorter;
import weka.gui.beans.SubstringLabeler;
import weka.gui.beans.SubstringReplacer;
import weka.gui.beans.TestSetEvent;
import weka.gui.beans.TestSetMaker;
import weka.gui.beans.TextViewer;
import weka.gui.beans.TrainTestSplitMaker;
import weka.gui.beans.TrainingSetEvent;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Filter_ESTest extends Filter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Filter filter0 = new Filter();
      boolean boolean0 = filter0.isBusy();
      assertFalse(boolean0);
      
      filter0.stop();
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Filter filter0 = new Filter();
      SubstringLabeler substringLabeler0 = new SubstringLabeler();
      filter0.addDataSourceListener(substringLabeler0);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Filter filter0 = new Filter();
      Associator associator0 = new Associator();
      filter0.setAlignmentY((-2614.9F));
      filter0.acceptInstance((InstanceEvent) null);
      filter0.eventGeneratable("HZWsp3'5#H>~lH");
      // Undeclared exception!
      try { 
        filter0.setWrappedAlgorithm("HZWsp3'5#H>~lH");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // class java.lang.String : incorrect type of algorithm (Filter)
         //
         verifyException("weka.gui.beans.Filter", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Filter filter0 = new Filter();
      CrossValidationFoldMaker crossValidationFoldMaker0 = new CrossValidationFoldMaker();
      filter0.addTrainingSetListener(crossValidationFoldMaker0);
      AllFilter allFilter0 = new AllFilter();
      filter0.setFilter(allFilter0);
      Clusterer clusterer0 = new Clusterer();
      filter0.removeTestSetListener(clusterer0);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Filter filter0 = new Filter();
      Sorter sorter0 = new Sorter();
      filter0.removeInstanceListener(sorter0);
      CrossValidationFoldMaker crossValidationFoldMaker0 = new CrossValidationFoldMaker();
      Logger logger0 = crossValidationFoldMaker0.m_logger;
      filter0.setLog((Logger) null);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Filter filter0 = new Filter();
      filter0.disconnectionNotification("KRvWQ/-DNXXl#S,vofv", "KRvWQ/-DNXXl#S,vofv");
      boolean boolean0 = filter0.eventGeneratable("KRvWQ/-DNXXl#S,vofv");
      assertFalse(boolean0);
      
      Classifier classifier0 = new Classifier();
      filter0.addInstanceListener(classifier0);
      ClassValuePicker classValuePicker0 = new ClassValuePicker();
      classValuePicker0.getStructure();
      TestSetEvent testSetEvent0 = new TestSetEvent(filter0, (Instances) null);
      filter0.acceptTestSet(testSetEvent0);
      filter0.useDefaultVisual();
      filter0.removeInstanceListener(classifier0);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Filter filter0 = new Filter();
      ScatterPlotMatrix scatterPlotMatrix0 = new ScatterPlotMatrix();
      filter0.removeTestSetListener(scatterPlotMatrix0);
      filter0.globalInfo();
      // Undeclared exception!
      try { 
        filter0.performRequest("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // <html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html> not supported (Filter)
         //
         verifyException("weka.gui.beans.Filter", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Filter filter0 = new Filter();
      ConfigurationListener configurationListener0 = mock(ConfigurationListener.class, new ViolatedAssumptionAnswer());
      filter0.removeConfigurationListener(configurationListener0);
      Clusterer clusterer0 = new Clusterer();
      filter0.addTestSetListener(clusterer0);
      Appender appender0 = new Appender();
      filter0.removeInstanceListener(appender0);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Filter filter0 = new Filter();
      SerializedModelSaver serializedModelSaver0 = new SerializedModelSaver();
      BeanVisual beanVisual0 = serializedModelSaver0.getVisual();
      filter0.setVisual(beanVisual0);
      TrainTestSplitMaker trainTestSplitMaker0 = new TrainTestSplitMaker();
      filter0.addTestSetListener(trainTestSplitMaker0);
      assertEquals("SerializedModelSaver", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Filter filter0 = new Filter();
      SubstringReplacer substringReplacer0 = new SubstringReplacer();
      InstanceEvent instanceEvent0 = substringReplacer0.m_ie;
      filter0.notifyInstanceListeners(instanceEvent0);
      substringReplacer0.getRegisteredKeyStrokes();
      String string0 = filter0.getCustomName();
      assertEquals("AllFilter", string0);
      
      filter0.acceptInstance(instanceEvent0);
      substringReplacer0.setDebugGraphicsOptions(0);
      BeanVisual beanVisual0 = filter0.getVisual();
      assertEquals("weka/gui/beans/icons/DefaultFilter.gif", beanVisual0.getIconPath());
      assertEquals("weka/gui/beans/icons/DefaultFilter_animated.gif", beanVisual0.getAnimatedIconPath());
      
      Random.setNextRandom(0);
      filter0.removeInstanceListener(substringReplacer0);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Filter filter0 = new Filter();
      ScatterPlotMatrix scatterPlotMatrix0 = new ScatterPlotMatrix();
      filter0.removeTestSetListener(scatterPlotMatrix0);
      scatterPlotMatrix0.isRequestFocusEnabled();
      ClassOrder classOrder0 = new ClassOrder();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      classOrder0.getCapabilities();
      filter0.setFilter(classOrder0);
      filter0.removeDataSourceListener(scatterPlotMatrix0);
      assertEquals("ClassOrder", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Filter filter0 = new Filter();
      Associator associator0 = new Associator();
      filter0.eventGeneratable("HZWsp'=#H>~ls");
      filter0.removeDataSourceListener(associator0);
      ClassOrder classOrder0 = new ClassOrder();
      filter0.setFilter(classOrder0);
      filter0.acceptDataSet((DataSetEvent) null);
      filter0.setFilter(classOrder0);
      filter0.getVisual();
      assertEquals("ClassOrder", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Filter filter0 = new Filter();
      MetalComboBoxEditor metalComboBoxEditor0 = new MetalComboBoxEditor();
      filter0.requestFocusInWindow();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("~z");
      OptionHandlerJavadoc optionHandlerJavadoc0 = new OptionHandlerJavadoc();
      TrainingSetEvent trainingSetEvent0 = new TrainingSetEvent(optionHandlerJavadoc0, instances0, (-2), (-1), (-1), (-1));
      filter0.acceptTrainingSet(trainingSetEvent0);
      filter0.useDefaultVisual();
      FileSystemHandling.shouldAllThrowIOExceptions();
      PredictionAppender predictionAppender0 = new PredictionAppender();
      TestSetEvent testSetEvent0 = new TestSetEvent(metalComboBoxEditor0, instances0);
      filter0.acceptTestSet(testSetEvent0);
      SysErrLog sysErrLog0 = new SysErrLog();
      ClassOrder classOrder0 = new ClassOrder();
      AllFilter allFilter0 = (AllFilter)filter0.getWrappedAlgorithm();
      assertTrue(allFilter0.isFirstBatchDone());
      
      SubstringReplacer substringReplacer0 = new SubstringReplacer();
      SubstringReplacer substringReplacer1 = new SubstringReplacer();
      classOrder0.setOptions(testInstances0.DEFAULT_WORDS);
      filter0.removeInstanceListener(substringReplacer1);
      FlowByExpression flowByExpression0 = new FlowByExpression();
      filter0.removeTestSetListener(flowByExpression0);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Filter filter0 = new Filter();
      assertFalse(filter0.isBusy());
      assertEquals("AllFilter", filter0.getCustomName());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertFalse(filter0.getIgnoreRepaint());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertFalse(filter0.isFocusCycleRoot());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      assertNotNull(filter0);
      
      MetalComboBoxEditor metalComboBoxEditor0 = new MetalComboBoxEditor();
      assertNotNull(metalComboBoxEditor0);
      
      boolean boolean0 = filter0.requestFocusInWindow();
      assertFalse(filter0.isBusy());
      assertEquals("AllFilter", filter0.getCustomName());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertFalse(filter0.getIgnoreRepaint());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertFalse(filter0.isFocusCycleRoot());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      assertFalse(boolean0);
      
      FPGrowth fPGrowth0 = new FPGrowth();
      assertEquals("Set the type of metric by which to rank rules. Confidence is the proportion of the examples covered by the premise that are also covered by the consequence(Class association rules can only be mined using confidence). Lift is confidence divided by the proportion of all examples that are covered by the consequence. This is a measure of the importance of the association that is independent of support. Leverage is the proportion of additional examples covered by both the premise and consequence above those expected if the premise and consequence were independent of each other. The total number of examples that this represents is presented in brackets following the leverage. Conviction is another measure of departure from independence.", fPGrowth0.metricTypeTipText());
      assertEquals(0.9, fPGrowth0.getMinMetric(), 0.01);
      assertEquals(1.0, fPGrowth0.getUpperBoundMinSupport(), 0.01);
      assertFalse(fPGrowth0.getFindAllRulesForSupportLevel());
      assertEquals("The number of rules to output", fPGrowth0.numRulesToFindTipText());
      assertEquals("Iteratively decrease support by this factor. Reduces support until min support is reached or required number of rules has been generated.", fPGrowth0.deltaTipText());
      assertEquals(0.05, fPGrowth0.getDelta(), 0.01);
      assertEquals("Use OR instead of AND for transactions/rules must contain lists.", fPGrowth0.useORForMustContainListTipText());
      assertEquals("", fPGrowth0.getRulesMustContain());
      assertTrue(fPGrowth0.canProduceRules());
      assertEquals(2, fPGrowth0.getPositiveIndex());
      assertEquals("The maximum number of items to include in frequent item sets. -1 means no limit.", fPGrowth0.maxNumberOfItemsTipText());
      assertEquals("Limit input to FPGrowth to those transactions (instances) that contain these items. Provide a comma separated list of attribute names.", fPGrowth0.transactionsMustContainTipText());
      assertEquals(10, fPGrowth0.getNumRulesToFind());
      assertEquals("Set the index of binary valued attributes that is to be considered the positive index. Has no effect for sparse data (in this case the first index (i.e. non-zero values) is always treated as  positive. Also has no effect for unary valued attributes (i.e. when using the Weka Apriori-style format for market basket data, which uses missing value \"?\" to indicate absence of an item.", fPGrowth0.positiveIndexTipText());
      assertEquals(0.1, fPGrowth0.getLowerBoundMinSupport(), 0.01);
      assertEquals("", fPGrowth0.getTransactionsMustContain());
      assertEquals("Upper bound for minimum support as a fraction or number of instances. Start iteratively decreasing minimum support from this value.", fPGrowth0.upperBoundMinSupportTipText());
      assertFalse(fPGrowth0.getUseORForMustContainList());
      assertEquals("Only print rules that contain these items. Provide a comma separated list of attribute names.", fPGrowth0.rulesMustContainTipText());
      assertEquals("Minimum metric score. Consider only rules with scores higher than this value.", fPGrowth0.minMetricTipText());
      assertEquals("Lower bound for minimum support as a fraction or number of instances.", fPGrowth0.lowerBoundMinSupportTipText());
      assertEquals((-1), fPGrowth0.getMaxNumberOfItems());
      assertEquals("Find all rules that meet the lower bound on minimum support and the minimum metric constraint. Turning this mode on will disable the iterative support reduction procedure to find the specified number of rules.", fPGrowth0.findAllRulesForSupportLevelTipText());
      assertNotNull(fPGrowth0);
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = "zgD09Yy+";
      DefaultCaret defaultCaret0 = new DefaultCaret();
      assertEquals(0, defaultCaret0.width);
      assertEquals(0, defaultCaret0.y);
      assertEquals(0, defaultCaret0.x);
      assertEquals(0, defaultCaret0.height);
      assertTrue(defaultCaret0.isEmpty());
      assertEquals(0.0, defaultCaret0.getMinX(), 0.01);
      assertEquals(0.0, defaultCaret0.getCenterY(), 0.01);
      assertEquals(0.0, defaultCaret0.getWidth(), 0.01);
      assertEquals(0.0, defaultCaret0.getHeight(), 0.01);
      assertEquals(0.0, defaultCaret0.getX(), 0.01);
      assertEquals(0.0, defaultCaret0.getMaxX(), 0.01);
      assertEquals(0.0, defaultCaret0.getCenterX(), 0.01);
      assertEquals(0.0, defaultCaret0.getY(), 0.01);
      assertEquals(0.0, defaultCaret0.getMinY(), 0.01);
      assertEquals(0.0, defaultCaret0.getMaxY(), 0.01);
      assertNotNull(defaultCaret0);
      
      filter0.removeFocusListener(defaultCaret0);
      assertEquals(0, defaultCaret0.width);
      assertEquals(0, defaultCaret0.y);
      assertEquals(0, defaultCaret0.x);
      assertEquals(0, defaultCaret0.height);
      assertFalse(filter0.isBusy());
      assertEquals("AllFilter", filter0.getCustomName());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertFalse(filter0.getIgnoreRepaint());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertFalse(filter0.isFocusCycleRoot());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      assertTrue(defaultCaret0.isEmpty());
      assertEquals(0.0, defaultCaret0.getMinX(), 0.01);
      assertEquals(0.0, defaultCaret0.getCenterY(), 0.01);
      assertEquals(0.0, defaultCaret0.getWidth(), 0.01);
      assertEquals(0.0, defaultCaret0.getHeight(), 0.01);
      assertEquals(0.0, defaultCaret0.getX(), 0.01);
      assertEquals(0.0, defaultCaret0.getMaxX(), 0.01);
      assertEquals(0.0, defaultCaret0.getCenterX(), 0.01);
      assertEquals(0.0, defaultCaret0.getY(), 0.01);
      assertEquals(0.0, defaultCaret0.getMinY(), 0.01);
      assertEquals(0.0, defaultCaret0.getMaxY(), 0.01);
      
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      filter0.removeInstanceListener((InstanceListener) null);
      assertFalse(filter0.isBusy());
      assertEquals("AllFilter", filter0.getCustomName());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertFalse(filter0.getIgnoreRepaint());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertFalse(filter0.isFocusCycleRoot());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      
      Enumeration enumeration0 = filter0.enumerateRequests();
      assertFalse(filter0.isBusy());
      assertEquals("AllFilter", filter0.getCustomName());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertFalse(filter0.getIgnoreRepaint());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertFalse(filter0.isFocusCycleRoot());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      assertNotNull(enumeration0);
      
      AllFilter allFilter0 = (AllFilter)filter0.getWrappedAlgorithm();
      assertFalse(filter0.isBusy());
      assertEquals("AllFilter", filter0.getCustomName());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertFalse(filter0.getIgnoreRepaint());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertFalse(filter0.isFocusCycleRoot());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      assertFalse(allFilter0.isOutputFormatDefined());
      assertFalse(allFilter0.isFirstBatchDone());
      assertTrue(allFilter0.isNewBatch());
      assertFalse(allFilter0.mayRemoveInstanceAfterFirstBatchDone());
      assertEquals("An instance filter that passes all instances through unmodified. Primarily for testing purposes.", allFilter0.globalInfo());
      assertNotNull(allFilter0);
      
      SubstringReplacer substringReplacer0 = new SubstringReplacer();
      assertFalse(substringReplacer0.getIgnoreRepaint());
      assertEquals("", substringReplacer0.getMatchReplaceDetails());
      assertTrue(substringReplacer0.getFocusTraversalKeysEnabled());
      assertFalse(substringReplacer0.isFocusTraversalPolicySet());
      assertFalse(substringReplacer0.isFocusCycleRoot());
      assertEquals("SubstringReplacer", substringReplacer0.getCustomName());
      assertFalse(substringReplacer0.isBusy());
      assertEquals("Replaces substrings in String attribute values using either literal match and replace or regular expression matching. The attributesto apply the match and replace rules to can be selected via a range string (e.g 1-5,6,last) or by a comma separated list of attribute names (/first and /last can be used to indicate the first and last attribute respectively)", substringReplacer0.globalInfo());
      assertFalse(substringReplacer0.isFocusTraversalPolicyProvider());
      assertNotNull(substringReplacer0);
      
      substringReplacer0.addMouseListener(defaultCaret0);
      assertEquals(0, defaultCaret0.width);
      assertEquals(0, defaultCaret0.y);
      assertEquals(0, defaultCaret0.x);
      assertEquals(0, defaultCaret0.height);
      assertTrue(defaultCaret0.isEmpty());
      assertEquals(0.0, defaultCaret0.getMinX(), 0.01);
      assertEquals(0.0, defaultCaret0.getCenterY(), 0.01);
      assertEquals(0.0, defaultCaret0.getWidth(), 0.01);
      assertEquals(0.0, defaultCaret0.getHeight(), 0.01);
      assertEquals(0.0, defaultCaret0.getX(), 0.01);
      assertEquals(0.0, defaultCaret0.getMaxX(), 0.01);
      assertEquals(0.0, defaultCaret0.getCenterX(), 0.01);
      assertEquals(0.0, defaultCaret0.getY(), 0.01);
      assertEquals(0.0, defaultCaret0.getMinY(), 0.01);
      assertEquals(0.0, defaultCaret0.getMaxY(), 0.01);
      assertFalse(substringReplacer0.getIgnoreRepaint());
      assertEquals("", substringReplacer0.getMatchReplaceDetails());
      assertTrue(substringReplacer0.getFocusTraversalKeysEnabled());
      assertFalse(substringReplacer0.isFocusTraversalPolicySet());
      assertFalse(substringReplacer0.isFocusCycleRoot());
      assertEquals("SubstringReplacer", substringReplacer0.getCustomName());
      assertFalse(substringReplacer0.isBusy());
      assertEquals("Replaces substrings in String attribute values using either literal match and replace or regular expression matching. The attributesto apply the match and replace rules to can be selected via a range string (e.g 1-5,6,last) or by a comma separated list of attribute names (/first and /last can be used to indicate the first and last attribute respectively)", substringReplacer0.globalInfo());
      assertFalse(substringReplacer0.isFocusTraversalPolicyProvider());
      
      // Undeclared exception!
      try { 
        filter0.connectionAllowed((EventSetDescriptor) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.gui.beans.Filter", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Filter filter0 = new Filter();
      assertFalse(filter0.getIgnoreRepaint());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertEquals("AllFilter", filter0.getCustomName());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertFalse(filter0.isBusy());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertFalse(filter0.isFocusCycleRoot());
      assertNotNull(filter0);
      
      filter0.stop();
      assertFalse(filter0.getIgnoreRepaint());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertEquals("AllFilter", filter0.getCustomName());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertFalse(filter0.isBusy());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertFalse(filter0.isFocusCycleRoot());
      
      filter0.setCustomName("y:C;v{]0e,,d;ks");
      assertFalse(filter0.getIgnoreRepaint());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      assertEquals("y:C;v{]0e,,d;ks", filter0.getCustomName());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertFalse(filter0.isBusy());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertFalse(filter0.isFocusCycleRoot());
      
      filter0.setInheritsPopupMenu(true);
      assertFalse(filter0.getIgnoreRepaint());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      assertEquals("y:C;v{]0e,,d;ks", filter0.getCustomName());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertFalse(filter0.isBusy());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertFalse(filter0.isFocusCycleRoot());
      
      AllFilter allFilter0 = (AllFilter)filter0.getFilter();
      assertFalse(filter0.getIgnoreRepaint());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      assertEquals("y:C;v{]0e,,d;ks", filter0.getCustomName());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertFalse(filter0.isBusy());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertFalse(filter0.isFocusCycleRoot());
      assertFalse(allFilter0.isOutputFormatDefined());
      assertFalse(allFilter0.isFirstBatchDone());
      assertEquals("An instance filter that passes all instances through unmodified. Primarily for testing purposes.", allFilter0.globalInfo());
      assertTrue(allFilter0.isNewBatch());
      assertFalse(allFilter0.mayRemoveInstanceAfterFirstBatchDone());
      assertNotNull(allFilter0);
      
      filter0.setWrappedAlgorithm(allFilter0);
      assertFalse(filter0.getIgnoreRepaint());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertEquals("AllFilter", filter0.getCustomName());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertFalse(filter0.isBusy());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertFalse(filter0.isFocusCycleRoot());
      assertFalse(allFilter0.isOutputFormatDefined());
      assertFalse(allFilter0.isFirstBatchDone());
      assertEquals("An instance filter that passes all instances through unmodified. Primarily for testing purposes.", allFilter0.globalInfo());
      assertTrue(allFilter0.isNewBatch());
      assertFalse(allFilter0.mayRemoveInstanceAfterFirstBatchDone());
      
      String string0 = "94n|9< axdLyGcAi;\"";
      MockJFileChooser mockJFileChooser0 = new MockJFileChooser("uuU[)Nf=uW@54dq");
      assertFalse(mockJFileChooser0.isFocusTraversalPolicyProvider());
      assertFalse(mockJFileChooser0.isFocusTraversalPolicySet());
      assertFalse(mockJFileChooser0.getIgnoreRepaint());
      assertTrue(mockJFileChooser0.getFocusTraversalKeysEnabled());
      assertFalse(mockJFileChooser0.isFocusCycleRoot());
      assertNotNull(mockJFileChooser0);
      
      try { 
        MockURI.URI("uuU[)Nf=uW@54dq");
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Illegal character in path at index 3: uuU[)Nf=uW@54dq
         //
         verifyException("java.net.URI$Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Filter filter0 = new Filter();
      assertFalse(filter0.getIgnoreRepaint());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertFalse(filter0.isBusy());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertFalse(filter0.isFocusCycleRoot());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertEquals("AllFilter", filter0.getCustomName());
      assertNotNull(filter0);
      
      filter0.connectionNotification("io1W8#ZY*!pBieE4&(", "io1W8#ZY*!pBieE4&(");
      assertFalse(filter0.getIgnoreRepaint());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertFalse(filter0.isBusy());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertFalse(filter0.isFocusCycleRoot());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertEquals("AllFilter", filter0.getCustomName());
      
      boolean boolean0 = filter0.eventGeneratable("io1W8#ZY*!pBieE4&(");
      assertFalse(filter0.getIgnoreRepaint());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertFalse(filter0.isBusy());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertFalse(filter0.isFocusCycleRoot());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertEquals("AllFilter", filter0.getCustomName());
      assertTrue(boolean0);
      
      boolean boolean1 = filter0.eventGeneratable("io1W8#ZY*!pBieE4&(");
      assertFalse(filter0.getIgnoreRepaint());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertFalse(filter0.isBusy());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertFalse(filter0.isFocusCycleRoot());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertEquals("AllFilter", filter0.getCustomName());
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      ScatterPlotMatrix scatterPlotMatrix0 = new ScatterPlotMatrix();
      assertFalse(scatterPlotMatrix0.isBusy());
      assertEquals("Scatter plot matrix", scatterPlotMatrix0.getPerspectiveTipText());
      assertEquals("Weka Chart Renderer", scatterPlotMatrix0.getOffscreenRendererName());
      assertEquals("", scatterPlotMatrix0.getOffscreenXAxis());
      assertEquals("Scatter plot matrix", scatterPlotMatrix0.getPerspectiveTitle());
      assertEquals("", scatterPlotMatrix0.getOffscreenAdditionalOpts());
      assertTrue(scatterPlotMatrix0.getFocusTraversalKeysEnabled());
      assertFalse(scatterPlotMatrix0.isFocusCycleRoot());
      assertEquals("400", scatterPlotMatrix0.getOffscreenHeight());
      assertFalse(scatterPlotMatrix0.isFocusTraversalPolicyProvider());
      assertEquals("DataVisualizer", scatterPlotMatrix0.getCustomName());
      assertEquals("Visualize incoming data/training/test sets in a scatter plot matrix.", scatterPlotMatrix0.globalInfo());
      assertEquals("", scatterPlotMatrix0.getOffscreenYAxis());
      assertEquals("500", scatterPlotMatrix0.getOffscreenWidth());
      assertFalse(scatterPlotMatrix0.isFocusTraversalPolicySet());
      assertFalse(scatterPlotMatrix0.getIgnoreRepaint());
      assertTrue(scatterPlotMatrix0.acceptsInstances());
      assertNotNull(scatterPlotMatrix0);
      
      filter0.removeDataSourceListener(scatterPlotMatrix0);
      assertFalse(filter0.getIgnoreRepaint());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertFalse(filter0.isBusy());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertFalse(filter0.isFocusCycleRoot());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertEquals("AllFilter", filter0.getCustomName());
      assertFalse(scatterPlotMatrix0.isBusy());
      assertEquals("Scatter plot matrix", scatterPlotMatrix0.getPerspectiveTipText());
      assertEquals("Weka Chart Renderer", scatterPlotMatrix0.getOffscreenRendererName());
      assertEquals("", scatterPlotMatrix0.getOffscreenXAxis());
      assertEquals("Scatter plot matrix", scatterPlotMatrix0.getPerspectiveTitle());
      assertEquals("", scatterPlotMatrix0.getOffscreenAdditionalOpts());
      assertTrue(scatterPlotMatrix0.getFocusTraversalKeysEnabled());
      assertFalse(scatterPlotMatrix0.isFocusCycleRoot());
      assertEquals("400", scatterPlotMatrix0.getOffscreenHeight());
      assertFalse(scatterPlotMatrix0.isFocusTraversalPolicyProvider());
      assertEquals("DataVisualizer", scatterPlotMatrix0.getCustomName());
      assertEquals("Visualize incoming data/training/test sets in a scatter plot matrix.", scatterPlotMatrix0.globalInfo());
      assertEquals("", scatterPlotMatrix0.getOffscreenYAxis());
      assertEquals("500", scatterPlotMatrix0.getOffscreenWidth());
      assertFalse(scatterPlotMatrix0.isFocusTraversalPolicySet());
      assertFalse(scatterPlotMatrix0.getIgnoreRepaint());
      assertTrue(scatterPlotMatrix0.acceptsInstances());
      
      ClassOrder classOrder0 = new ClassOrder();
      assertEquals(2, ClassOrder.RANDOM);
      assertEquals(1, ClassOrder.FREQ_DESCEND);
      assertEquals(0, ClassOrder.FREQ_ASCEND);
      assertFalse(classOrder0.isOutputFormatDefined());
      assertFalse(classOrder0.mayRemoveInstanceAfterFirstBatchDone());
      assertTrue(classOrder0.isNewBatch());
      assertEquals("Specify the seed of randomization of the class order", classOrder0.seedTipText());
      assertEquals(0, classOrder0.getClassOrder());
      assertEquals("Specify the class order after the filtering", classOrder0.classOrderTipText());
      assertEquals(1L, classOrder0.getSeed());
      assertFalse(classOrder0.isFirstBatchDone());
      assertEquals("Changes the order of the classes so that the class values are no longer of in the order specified in the header. The values will be in the order specified by the user -- it could be either in ascending/descending order by the class frequency or in random order. Note that this filter currently does not change the header, only the class values of the instances, so there is not much point in using it in conjunction with the FilteredClassifier. The value can also be converted back using 'originalValue(double value)' procedure.", classOrder0.globalInfo());
      assertNotNull(classOrder0);
      
      AllFilter allFilter0 = new AllFilter();
      assertFalse(allFilter0.isFirstBatchDone());
      assertFalse(allFilter0.isOutputFormatDefined());
      assertTrue(allFilter0.isNewBatch());
      assertFalse(allFilter0.mayRemoveInstanceAfterFirstBatchDone());
      assertEquals("An instance filter that passes all instances through unmodified. Primarily for testing purposes.", allFilter0.globalInfo());
      assertNotNull(allFilter0);
      
      Saver saver0 = new Saver();
      assertFalse(saver0.isFocusTraversalPolicyProvider());
      assertFalse(saver0.isFocusTraversalPolicySet());
      assertTrue(saver0.getRelationNameForFilename());
      assertEquals("<html><font color=blue>Writes to a destination that is in arff (attribute relation file format) format</font><br><br> The data can be compressed with gzip in order to save space.<br></html>", saver0.globalInfo());
      assertTrue(saver0.getFocusTraversalKeysEnabled());
      assertFalse(saver0.getIgnoreRepaint());
      assertEquals("ArffSaver", saver0.getCustomName());
      assertFalse(saver0.isFocusCycleRoot());
      assertFalse(saver0.isBusy());
      assertNotNull(saver0);
      
      saver0.setLocation(1, 75);
      assertFalse(saver0.isFocusTraversalPolicyProvider());
      assertFalse(saver0.isFocusTraversalPolicySet());
      assertTrue(saver0.getRelationNameForFilename());
      assertEquals("<html><font color=blue>Writes to a destination that is in arff (attribute relation file format) format</font><br><br> The data can be compressed with gzip in order to save space.<br></html>", saver0.globalInfo());
      assertTrue(saver0.getFocusTraversalKeysEnabled());
      assertFalse(saver0.getIgnoreRepaint());
      assertEquals("ArffSaver", saver0.getCustomName());
      assertFalse(saver0.isFocusCycleRoot());
      assertFalse(saver0.isBusy());
      
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertFalse(textDirectoryLoader0.getDebug());
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertEquals("", textDirectoryLoader0.getCharSet());
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertNotNull(textDirectoryLoader0);
      
      Instances instances0 = textDirectoryLoader0.getStructure();
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertFalse(textDirectoryLoader0.getDebug());
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertEquals("", textDirectoryLoader0.getCharSet());
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertEquals("_mnt_gaiagpfs_users_homedirs_apanichella_Evosuite_performance_Dataset_gordon_script_sum_projects_9_weka", instances0.relationName());
      assertTrue(instances0.checkForStringAttributes());
      assertEquals(2, instances0.numAttributes());
      assertEquals(0, instances0.numInstances());
      assertEquals(0, instances0.size());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01);
      assertEquals(0, instances0.numClasses());
      assertEquals(1, instances0.classIndex());
      assertNotNull(instances0);
      
      TestSetEvent testSetEvent0 = new TestSetEvent(instances0, instances0, 0, 0);
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertFalse(textDirectoryLoader0.getDebug());
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertEquals("", textDirectoryLoader0.getCharSet());
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertEquals("_mnt_gaiagpfs_users_homedirs_apanichella_Evosuite_performance_Dataset_gordon_script_sum_projects_9_weka", instances0.relationName());
      assertTrue(instances0.checkForStringAttributes());
      assertEquals(2, instances0.numAttributes());
      assertEquals(0, instances0.numInstances());
      assertEquals(0, instances0.size());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01);
      assertEquals(0, instances0.numClasses());
      assertEquals(1, instances0.classIndex());
      assertEquals(1, testSetEvent0.getMaxRunNumber());
      assertEquals(0, testSetEvent0.getSetNumber());
      assertEquals(1, testSetEvent0.getRunNumber());
      assertEquals(0, testSetEvent0.getMaxSetNumber());
      assertTrue(testSetEvent0.isStructureOnly());
      assertNotNull(testSetEvent0);
      
      filter0.acceptTestSet(testSetEvent0);
      assertFalse(filter0.getIgnoreRepaint());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertFalse(filter0.isBusy());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertFalse(filter0.isFocusCycleRoot());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertEquals("AllFilter", filter0.getCustomName());
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertFalse(textDirectoryLoader0.getDebug());
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertEquals("", textDirectoryLoader0.getCharSet());
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertEquals("_mnt_gaiagpfs_users_homedirs_apanichella_Evosuite_performance_Dataset_gordon_script_sum_projects_9_weka", instances0.relationName());
      assertTrue(instances0.checkForStringAttributes());
      assertEquals(2, instances0.numAttributes());
      assertEquals(0, instances0.numInstances());
      assertEquals(0, instances0.size());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01);
      assertEquals(0, instances0.numClasses());
      assertEquals(1, instances0.classIndex());
      assertEquals(1, testSetEvent0.getMaxRunNumber());
      assertEquals(0, testSetEvent0.getSetNumber());
      assertEquals(1, testSetEvent0.getRunNumber());
      assertEquals(0, testSetEvent0.getMaxSetNumber());
      assertTrue(testSetEvent0.isStructureOnly());
      
      boolean boolean2 = filter0.isBusy();
      assertFalse(filter0.getIgnoreRepaint());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertFalse(filter0.isBusy());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertFalse(filter0.isFocusCycleRoot());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertEquals("AllFilter", filter0.getCustomName());
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Filter filter0 = new Filter();
      assertFalse(filter0.isBusy());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertEquals("AllFilter", filter0.getCustomName());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertFalse(filter0.getIgnoreRepaint());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertFalse(filter0.isFocusCycleRoot());
      assertNotNull(filter0);
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "KRvWQ/-DNXXl#S,vofv");
      assertFalse(boolean0);
      
      SubstringLabeler substringLabeler0 = new SubstringLabeler();
      assertTrue(substringLabeler0.getFocusTraversalKeysEnabled());
      assertEquals("Matches substrings in String attributes using either literal or regular expression matches. The value of a new attribute is set to reflect the status of the match. The new attribute can be either binary (in which case values indicate match or no match) or multi-valued nominal, in which case a label must be associated with each distinct matching rule. In the case of labeled matches, the user can opt to have non matching instances output with missing value set for the new attribute or not output at all (i.e. consumed by the step).", substringLabeler0.globalInfo());
      assertFalse(substringLabeler0.isFocusCycleRoot());
      assertFalse(substringLabeler0.getConsumeNonMatching());
      assertEquals("Match", substringLabeler0.getMatchAttributeName());
      assertFalse(substringLabeler0.isBusy());
      assertFalse(substringLabeler0.isFocusTraversalPolicyProvider());
      assertEquals("", substringLabeler0.getMatchDetails());
      assertEquals("SubstringLabeler", substringLabeler0.getCustomName());
      assertFalse(substringLabeler0.getNominalBinary());
      assertFalse(substringLabeler0.isFocusTraversalPolicySet());
      assertFalse(substringLabeler0.getIgnoreRepaint());
      assertNotNull(substringLabeler0);
      
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      assertEquals("", textDirectoryLoader0.getCharSet());
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertFalse(textDirectoryLoader0.getDebug());
      assertNotNull(textDirectoryLoader0);
      
      Instances instances0 = textDirectoryLoader0.getStructure();
      assertEquals("", textDirectoryLoader0.getCharSet());
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertFalse(textDirectoryLoader0.getDebug());
      assertEquals(0, instances0.numInstances());
      assertEquals("_mnt_gaiagpfs_users_homedirs_apanichella_Evosuite_performance_Dataset_gordon_script_sum_projects_9_weka", instances0.relationName());
      assertEquals(1, instances0.classIndex());
      assertEquals(0, instances0.size());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01);
      assertEquals(0, instances0.numClasses());
      assertEquals(2, instances0.numAttributes());
      assertTrue(instances0.checkForStringAttributes());
      assertNotNull(instances0);
      
      SysErrLog sysErrLog0 = new SysErrLog();
      assertNotNull(sysErrLog0);
      
      sysErrLog0.statusMessage("KRvWQ/-DNXXl#S,vofv");
      PredictionAppender predictionAppender0 = new PredictionAppender();
      assertFalse(predictionAppender0.isFocusCycleRoot());
      assertFalse(predictionAppender0.isFocusTraversalPolicySet());
      assertFalse(predictionAppender0.getAppendPredictedProbabilities());
      assertFalse(predictionAppender0.isFocusTraversalPolicyProvider());
      assertFalse(predictionAppender0.isBusy());
      assertEquals("append probabilities rather than labels for discrete class predictions", predictionAppender0.appendPredictedProbabilitiesTipText());
      assertFalse(predictionAppender0.getIgnoreRepaint());
      assertTrue(predictionAppender0.getFocusTraversalKeysEnabled());
      assertEquals("PredictionAppender", predictionAppender0.getCustomName());
      assertEquals("Accepts batch or incremental classifier events and produces a new data set with classifier predictions appended.", predictionAppender0.globalInfo());
      assertNotNull(predictionAppender0);
      
      ClassAssigner classAssigner0 = new ClassAssigner();
      assertFalse(classAssigner0.getIgnoreRepaint());
      assertTrue(classAssigner0.getFocusTraversalKeysEnabled());
      assertEquals("ClassAssigner", classAssigner0.getCustomName());
      assertEquals("Specify the number of the column that contains the class attribute", classAssigner0.classColumnTipText());
      assertFalse(classAssigner0.isFocusTraversalPolicySet());
      assertFalse(classAssigner0.isFocusCycleRoot());
      assertFalse(classAssigner0.isBusy());
      assertFalse(classAssigner0.isFocusTraversalPolicyProvider());
      assertEquals("Designate which column is to be considered the class column in incoming data.", classAssigner0.globalInfo());
      assertEquals("last", classAssigner0.getClassColumn());
      assertNotNull(classAssigner0);
      
      ClassAssigner classAssigner1 = new ClassAssigner();
      assertFalse(classAssigner1.isFocusTraversalPolicyProvider());
      assertEquals("Designate which column is to be considered the class column in incoming data.", classAssigner1.globalInfo());
      assertEquals("Specify the number of the column that contains the class attribute", classAssigner1.classColumnTipText());
      assertFalse(classAssigner1.isBusy());
      assertEquals("last", classAssigner1.getClassColumn());
      assertEquals("ClassAssigner", classAssigner1.getCustomName());
      assertFalse(classAssigner1.isFocusTraversalPolicySet());
      assertFalse(classAssigner1.getIgnoreRepaint());
      assertFalse(classAssigner1.isFocusCycleRoot());
      assertTrue(classAssigner1.getFocusTraversalKeysEnabled());
      assertFalse(classAssigner1.equals((Object)classAssigner0));
      assertNotNull(classAssigner1);
      
      SubstringReplacer substringReplacer0 = new SubstringReplacer();
      assertFalse(substringReplacer0.isFocusCycleRoot());
      assertEquals("Replaces substrings in String attribute values using either literal match and replace or regular expression matching. The attributesto apply the match and replace rules to can be selected via a range string (e.g 1-5,6,last) or by a comma separated list of attribute names (/first and /last can be used to indicate the first and last attribute respectively)", substringReplacer0.globalInfo());
      assertEquals("", substringReplacer0.getMatchReplaceDetails());
      assertFalse(substringReplacer0.isFocusTraversalPolicyProvider());
      assertEquals("SubstringReplacer", substringReplacer0.getCustomName());
      assertFalse(substringReplacer0.isBusy());
      assertTrue(substringReplacer0.getFocusTraversalKeysEnabled());
      assertFalse(substringReplacer0.getIgnoreRepaint());
      assertFalse(substringReplacer0.isFocusTraversalPolicySet());
      assertNotNull(substringReplacer0);
      
      DefaultCaret defaultCaret0 = new DefaultCaret();
      assertEquals(0, defaultCaret0.height);
      assertEquals(0, defaultCaret0.y);
      assertEquals(0, defaultCaret0.x);
      assertEquals(0, defaultCaret0.width);
      assertEquals(0.0, defaultCaret0.getCenterX(), 0.01);
      assertEquals(0.0, defaultCaret0.getMaxY(), 0.01);
      assertEquals(0.0, defaultCaret0.getMinX(), 0.01);
      assertTrue(defaultCaret0.isEmpty());
      assertEquals(0.0, defaultCaret0.getHeight(), 0.01);
      assertEquals(0.0, defaultCaret0.getMaxX(), 0.01);
      assertEquals(0.0, defaultCaret0.getMinY(), 0.01);
      assertEquals(0.0, defaultCaret0.getCenterY(), 0.01);
      assertEquals(0.0, defaultCaret0.getWidth(), 0.01);
      assertEquals(0.0, defaultCaret0.getX(), 0.01);
      assertEquals(0.0, defaultCaret0.getY(), 0.01);
      assertNotNull(defaultCaret0);
      
      DefaultCaret defaultCaret1 = new DefaultCaret();
      assertEquals(0, defaultCaret1.width);
      assertEquals(0, defaultCaret1.y);
      assertEquals(0, defaultCaret1.x);
      assertEquals(0, defaultCaret1.height);
      assertEquals(0.0, defaultCaret1.getMaxX(), 0.01);
      assertEquals(0.0, defaultCaret1.getMinY(), 0.01);
      assertEquals(0.0, defaultCaret1.getCenterX(), 0.01);
      assertEquals(0.0, defaultCaret1.getMaxY(), 0.01);
      assertTrue(defaultCaret1.isEmpty());
      assertEquals(0.0, defaultCaret1.getHeight(), 0.01);
      assertEquals(0.0, defaultCaret1.getWidth(), 0.01);
      assertEquals(0.0, defaultCaret1.getY(), 0.01);
      assertEquals(0.0, defaultCaret1.getX(), 0.01);
      assertEquals(0.0, defaultCaret1.getMinX(), 0.01);
      assertEquals(0.0, defaultCaret1.getCenterY(), 0.01);
      assertFalse(defaultCaret1.equals((Object)defaultCaret0));
      assertNotNull(defaultCaret1);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = ".bsi";
      stringArray0[1] = ".arff";
      stringArray0[2] = "KRvWQ/-DNXXl#S,vofv";
      SubstringReplacer substringReplacer1 = new SubstringReplacer();
      assertFalse(substringReplacer1.isFocusTraversalPolicySet());
      assertTrue(substringReplacer1.getFocusTraversalKeysEnabled());
      assertEquals("Replaces substrings in String attribute values using either literal match and replace or regular expression matching. The attributesto apply the match and replace rules to can be selected via a range string (e.g 1-5,6,last) or by a comma separated list of attribute names (/first and /last can be used to indicate the first and last attribute respectively)", substringReplacer1.globalInfo());
      assertFalse(substringReplacer1.getIgnoreRepaint());
      assertEquals("", substringReplacer1.getMatchReplaceDetails());
      assertFalse(substringReplacer1.isBusy());
      assertFalse(substringReplacer1.isFocusCycleRoot());
      assertFalse(substringReplacer1.isFocusTraversalPolicyProvider());
      assertEquals("SubstringReplacer", substringReplacer1.getCustomName());
      assertFalse(substringReplacer1.equals((Object)substringReplacer0));
      assertNotNull(substringReplacer1);
      
      DataSetEvent dataSetEvent0 = new DataSetEvent(sysErrLog0, instances0);
      assertTrue(dataSetEvent0.isStructureOnly());
      assertEquals("", textDirectoryLoader0.getCharSet());
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertFalse(textDirectoryLoader0.getDebug());
      assertEquals(0, instances0.numInstances());
      assertEquals("_mnt_gaiagpfs_users_homedirs_apanichella_Evosuite_performance_Dataset_gordon_script_sum_projects_9_weka", instances0.relationName());
      assertEquals(1, instances0.classIndex());
      assertEquals(0, instances0.size());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01);
      assertEquals(0, instances0.numClasses());
      assertEquals(2, instances0.numAttributes());
      assertTrue(instances0.checkForStringAttributes());
      assertNotNull(dataSetEvent0);
      
      filter0.acceptDataSet(dataSetEvent0);
      assertFalse(filter0.isBusy());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertEquals("AllFilter", filter0.getCustomName());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertFalse(filter0.getIgnoreRepaint());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertFalse(filter0.isFocusCycleRoot());
      assertTrue(dataSetEvent0.isStructureOnly());
      assertEquals("", textDirectoryLoader0.getCharSet());
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertFalse(textDirectoryLoader0.getDebug());
      assertEquals(0, instances0.numInstances());
      assertEquals("_mnt_gaiagpfs_users_homedirs_apanichella_Evosuite_performance_Dataset_gordon_script_sum_projects_9_weka", instances0.relationName());
      assertEquals(1, instances0.classIndex());
      assertEquals(0, instances0.size());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01);
      assertEquals(0, instances0.numClasses());
      assertEquals(2, instances0.numAttributes());
      assertTrue(instances0.checkForStringAttributes());
      
      Enumeration enumeration0 = filter0.enumerateRequests();
      assertFalse(filter0.isBusy());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertEquals("AllFilter", filter0.getCustomName());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertFalse(filter0.getIgnoreRepaint());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertFalse(filter0.isFocusCycleRoot());
      assertNotNull(enumeration0);
      
      InstanceEvent instanceEvent0 = null;
      try {
        instanceEvent0 = new InstanceEvent((Object) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null source
         //
         verifyException("java.util.EventObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Filter filter0 = new Filter();
      assertEquals("AllFilter", filter0.getCustomName());
      assertFalse(filter0.isBusy());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      assertFalse(filter0.isFocusCycleRoot());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertFalse(filter0.getIgnoreRepaint());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertNotNull(filter0);
      
      boolean boolean0 = filter0.requestFocusInWindow();
      assertEquals("AllFilter", filter0.getCustomName());
      assertFalse(filter0.isBusy());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      assertFalse(filter0.isFocusCycleRoot());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertFalse(filter0.getIgnoreRepaint());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertFalse(boolean0);
      
      DirectColorModel directColorModel0 = (DirectColorModel)filter0.getColorModel();
      assertEquals("AllFilter", filter0.getCustomName());
      assertFalse(filter0.isBusy());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      assertFalse(filter0.isFocusCycleRoot());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertFalse(filter0.getIgnoreRepaint());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertEquals(3, directColorModel0.getTransparency());
      assertTrue(directColorModel0.hasAlpha());
      assertEquals(3, directColorModel0.getNumColorComponents());
      assertEquals(65280, directColorModel0.getGreenMask());
      assertEquals(3, directColorModel0.getTransferType());
      assertEquals(32, directColorModel0.getPixelSize());
      assertEquals((-16777216), directColorModel0.getAlphaMask());
      assertEquals(16711680, directColorModel0.getRedMask());
      assertEquals(255, directColorModel0.getBlueMask());
      assertFalse(directColorModel0.isAlphaPremultiplied());
      assertEquals(4, directColorModel0.getNumComponents());
      assertNotNull(directColorModel0);
      
      Associator associator0 = new Associator();
      assertFalse(associator0.isBusy());
      assertFalse(associator0.isFocusTraversalPolicyProvider());
      assertFalse(associator0.isFocusCycleRoot());
      assertFalse(associator0.isFocusTraversalPolicySet());
      assertFalse(associator0.getIgnoreRepaint());
      assertEquals("<html><font color=blue>Class implementing an Apriori-type algorithm</font><br><br> Iteratively reduces the minimum support until it finds the required number of rules with the given minimum confidence.<br>The algorithm has an option to mine class association rules.<br>It is adapted as explained in the second reference.<br><br>For more information see:<br><br>R.<br>Agrawal, R.<br>Srikant: Fast Algorithms for Mining Association Rules in Large Databases.<br>In: 20th International Conference on Very Large Data Bases, 478-499, 1994.<br><br>Bing Liu, Wynne Hsu, Yiming Ma: Integrating Classification and Association Rule Mining.<br>In: Fourth International Conference on Knowledge Discovery and Data Mining, 80-86, 1998.<br></html>", associator0.globalInfo());
      assertEquals("Apriori", associator0.getCustomName());
      assertTrue(associator0.getFocusTraversalKeysEnabled());
      assertNotNull(associator0);
      
      HierarchyBoundsListener[] hierarchyBoundsListenerArray0 = filter0.getHierarchyBoundsListeners();
      assertEquals("AllFilter", filter0.getCustomName());
      assertFalse(filter0.isBusy());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      assertFalse(filter0.isFocusCycleRoot());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertFalse(filter0.getIgnoreRepaint());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertNotNull(hierarchyBoundsListenerArray0);
      
      filter0.addNotify();
      assertEquals("AllFilter", filter0.getCustomName());
      assertFalse(filter0.isBusy());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      assertFalse(filter0.isFocusCycleRoot());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertFalse(filter0.getIgnoreRepaint());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      
      AllFilter allFilter0 = new AllFilter();
      assertFalse(allFilter0.isOutputFormatDefined());
      assertTrue(allFilter0.isNewBatch());
      assertFalse(allFilter0.mayRemoveInstanceAfterFirstBatchDone());
      assertEquals("An instance filter that passes all instances through unmodified. Primarily for testing purposes.", allFilter0.globalInfo());
      assertFalse(allFilter0.isFirstBatchDone());
      assertNotNull(allFilter0);
      
      Saver saver0 = new Saver();
      assertEquals("ArffSaver", saver0.getCustomName());
      assertTrue(saver0.getRelationNameForFilename());
      assertEquals("<html><font color=blue>Writes to a destination that is in arff (attribute relation file format) format</font><br><br> The data can be compressed with gzip in order to save space.<br></html>", saver0.globalInfo());
      assertFalse(saver0.isFocusCycleRoot());
      assertFalse(saver0.isBusy());
      assertFalse(saver0.isFocusTraversalPolicyProvider());
      assertFalse(saver0.getIgnoreRepaint());
      assertFalse(saver0.isFocusTraversalPolicySet());
      assertTrue(saver0.getFocusTraversalKeysEnabled());
      assertNotNull(saver0);
      
      saver0.setLocation(15, 15);
      assertEquals("ArffSaver", saver0.getCustomName());
      assertTrue(saver0.getRelationNameForFilename());
      assertEquals("<html><font color=blue>Writes to a destination that is in arff (attribute relation file format) format</font><br><br> The data can be compressed with gzip in order to save space.<br></html>", saver0.globalInfo());
      assertFalse(saver0.isFocusCycleRoot());
      assertFalse(saver0.isBusy());
      assertFalse(saver0.isFocusTraversalPolicyProvider());
      assertFalse(saver0.getIgnoreRepaint());
      assertFalse(saver0.isFocusTraversalPolicySet());
      assertTrue(saver0.getFocusTraversalKeysEnabled());
      
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertEquals("", textDirectoryLoader0.getCharSet());
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertFalse(textDirectoryLoader0.getDebug());
      assertNotNull(textDirectoryLoader0);
      
      Instances instances0 = textDirectoryLoader0.getStructure();
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertEquals("", textDirectoryLoader0.getCharSet());
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertFalse(textDirectoryLoader0.getDebug());
      assertEquals(0, instances0.numClasses());
      assertTrue(instances0.checkForStringAttributes());
      assertEquals(1, instances0.classIndex());
      assertEquals(0, instances0.numInstances());
      assertEquals(2, instances0.numAttributes());
      assertEquals(0, instances0.size());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01);
      assertEquals("_mnt_gaiagpfs_users_homedirs_apanichella_Evosuite_performance_Dataset_gordon_script_sum_projects_9_weka", instances0.relationName());
      assertNotNull(instances0);
      
      textDirectoryLoader0.setCharSet("@relation");
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertEquals("@relation", textDirectoryLoader0.getCharSet());
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertFalse(textDirectoryLoader0.getDebug());
      
      FlowByExpression flowByExpression0 = new FlowByExpression();
      assertFalse(flowByExpression0.isFocusTraversalPolicySet());
      assertFalse(flowByExpression0.isFocusCycleRoot());
      assertEquals("Splits incoming instances (or instance stream) according to the evaluation of a logical expression. The expression can test the values of one or more incoming attributes. The test can involve constants or comparing one attribute's values to another. Inequalities along with string operations such as contains, starts-with, ends-with and regular expressions may be used as operators. \"True\" instances can be sent to one downstream step and \"False\" instances sent to another.", flowByExpression0.globalInfo());
      assertEquals("", flowByExpression0.getFalseStepName());
      assertTrue(flowByExpression0.getFocusTraversalKeysEnabled());
      assertEquals("", flowByExpression0.getTrueStepName());
      assertEquals("", flowByExpression0.getExpressionString());
      assertFalse(flowByExpression0.getIgnoreRepaint());
      assertEquals("FlowByExpression", flowByExpression0.getCustomName());
      assertFalse(flowByExpression0.isBusy());
      assertFalse(flowByExpression0.isFocusTraversalPolicyProvider());
      assertNotNull(flowByExpression0);
      
      InstanceEvent instanceEvent0 = flowByExpression0.m_ie;
      assertEquals(1, InstanceEvent.INSTANCE_AVAILABLE);
      assertEquals(0, InstanceEvent.FORMAT_AVAILABLE);
      assertEquals(2, InstanceEvent.BATCH_FINISHED);
      assertEquals(0, instanceEvent0.getStatus());
      assertNotNull(instanceEvent0);
      
      EuclideanDistance euclideanDistance0 = new EuclideanDistance(instances0);
      assertEquals(2, NormalizableDistance.R_WIDTH);
      assertEquals(1, NormalizableDistance.R_MAX);
      assertEquals(0, NormalizableDistance.R_MIN);
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertEquals("@relation", textDirectoryLoader0.getCharSet());
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertFalse(textDirectoryLoader0.getDebug());
      assertEquals(0, instances0.numClasses());
      assertTrue(instances0.checkForStringAttributes());
      assertEquals(1, instances0.classIndex());
      assertEquals(0, instances0.numInstances());
      assertEquals(2, instances0.numAttributes());
      assertEquals(0, instances0.size());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01);
      assertEquals("_mnt_gaiagpfs_users_homedirs_apanichella_Evosuite_performance_Dataset_gordon_script_sum_projects_9_weka", instances0.relationName());
      assertEquals("", euclideanDistance0.toString());
      assertFalse(euclideanDistance0.getDontNormalize());
      assertFalse(euclideanDistance0.rangesSet());
      assertEquals("Set attribute selection mode. If false, only selected attributes in the range will be used in the distance calculation; if true, only non-selected attributes will be used for the calculation.", euclideanDistance0.invertSelectionTipText());
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", euclideanDistance0.attributeIndicesTipText());
      assertEquals("Whether if the normalization of attributes should be turned off for distance calculation (Default: false i.e. attribute values are normalized). ", euclideanDistance0.dontNormalizeTipText());
      assertNotNull(euclideanDistance0);
      
      TrainingSetEvent trainingSetEvent0 = new TrainingSetEvent(euclideanDistance0, instances0);
      assertEquals(2, NormalizableDistance.R_WIDTH);
      assertEquals(1, NormalizableDistance.R_MAX);
      assertEquals(0, NormalizableDistance.R_MIN);
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertEquals("@relation", textDirectoryLoader0.getCharSet());
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertFalse(textDirectoryLoader0.getDebug());
      assertEquals(0, instances0.numClasses());
      assertTrue(instances0.checkForStringAttributes());
      assertEquals(1, instances0.classIndex());
      assertEquals(0, instances0.numInstances());
      assertEquals(2, instances0.numAttributes());
      assertEquals(0, instances0.size());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01);
      assertEquals("_mnt_gaiagpfs_users_homedirs_apanichella_Evosuite_performance_Dataset_gordon_script_sum_projects_9_weka", instances0.relationName());
      assertEquals("", euclideanDistance0.toString());
      assertFalse(euclideanDistance0.getDontNormalize());
      assertFalse(euclideanDistance0.rangesSet());
      assertEquals("Set attribute selection mode. If false, only selected attributes in the range will be used in the distance calculation; if true, only non-selected attributes will be used for the calculation.", euclideanDistance0.invertSelectionTipText());
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", euclideanDistance0.attributeIndicesTipText());
      assertEquals("Whether if the normalization of attributes should be turned off for distance calculation (Default: false i.e. attribute values are normalized). ", euclideanDistance0.dontNormalizeTipText());
      assertTrue(trainingSetEvent0.isStructureOnly());
      assertEquals(1, trainingSetEvent0.getMaxRunNumber());
      assertEquals(0, trainingSetEvent0.getMaxSetNumber());
      assertEquals(1, trainingSetEvent0.getRunNumber());
      assertEquals(0, trainingSetEvent0.getSetNumber());
      assertNotNull(trainingSetEvent0);
      
      filter0.acceptTrainingSet(trainingSetEvent0);
      assertEquals(2, NormalizableDistance.R_WIDTH);
      assertEquals(1, NormalizableDistance.R_MAX);
      assertEquals(0, NormalizableDistance.R_MIN);
      assertEquals("AllFilter", filter0.getCustomName());
      assertFalse(filter0.isBusy());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      assertFalse(filter0.isFocusCycleRoot());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertFalse(filter0.getIgnoreRepaint());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertEquals("@relation", textDirectoryLoader0.getCharSet());
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertFalse(textDirectoryLoader0.getDebug());
      assertEquals(0, instances0.numClasses());
      assertTrue(instances0.checkForStringAttributes());
      assertEquals(1, instances0.classIndex());
      assertEquals(0, instances0.numInstances());
      assertEquals(2, instances0.numAttributes());
      assertEquals(0, instances0.size());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01);
      assertEquals("_mnt_gaiagpfs_users_homedirs_apanichella_Evosuite_performance_Dataset_gordon_script_sum_projects_9_weka", instances0.relationName());
      assertEquals("", euclideanDistance0.toString());
      assertFalse(euclideanDistance0.getDontNormalize());
      assertFalse(euclideanDistance0.rangesSet());
      assertEquals("Set attribute selection mode. If false, only selected attributes in the range will be used in the distance calculation; if true, only non-selected attributes will be used for the calculation.", euclideanDistance0.invertSelectionTipText());
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", euclideanDistance0.attributeIndicesTipText());
      assertEquals("Whether if the normalization of attributes should be turned off for distance calculation (Default: false i.e. attribute values are normalized). ", euclideanDistance0.dontNormalizeTipText());
      assertTrue(trainingSetEvent0.isStructureOnly());
      assertEquals(1, trainingSetEvent0.getMaxRunNumber());
      assertEquals(0, trainingSetEvent0.getMaxSetNumber());
      assertEquals(1, trainingSetEvent0.getRunNumber());
      assertEquals(0, trainingSetEvent0.getSetNumber());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Filter filter0 = new Filter();
      assertFalse(filter0.isFocusCycleRoot());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertEquals("AllFilter", filter0.getCustomName());
      assertFalse(filter0.getIgnoreRepaint());
      assertFalse(filter0.isBusy());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      assertNotNull(filter0);
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "KRvWQ/-DNXXl#S,vofv");
      assertFalse(boolean0);
      
      SubstringLabeler substringLabeler0 = new SubstringLabeler();
      assertTrue(substringLabeler0.getFocusTraversalKeysEnabled());
      assertFalse(substringLabeler0.getNominalBinary());
      assertFalse(substringLabeler0.getConsumeNonMatching());
      assertFalse(substringLabeler0.isFocusTraversalPolicySet());
      assertFalse(substringLabeler0.getIgnoreRepaint());
      assertFalse(substringLabeler0.isFocusCycleRoot());
      assertFalse(substringLabeler0.isBusy());
      assertFalse(substringLabeler0.isFocusTraversalPolicyProvider());
      assertEquals("Match", substringLabeler0.getMatchAttributeName());
      assertEquals("", substringLabeler0.getMatchDetails());
      assertEquals("SubstringLabeler", substringLabeler0.getCustomName());
      assertEquals("Matches substrings in String attributes using either literal or regular expression matches. The value of a new attribute is set to reflect the status of the match. The new attribute can be either binary (in which case values indicate match or no match) or multi-valued nominal, in which case a label must be associated with each distinct matching rule. In the case of labeled matches, the user can opt to have non matching instances output with missing value set for the new attribute or not output at all (i.e. consumed by the step).", substringLabeler0.globalInfo());
      assertNotNull(substringLabeler0);
      
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertEquals("", textDirectoryLoader0.getCharSet());
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertFalse(textDirectoryLoader0.getDebug());
      assertNotNull(textDirectoryLoader0);
      
      Instances instances0 = textDirectoryLoader0.getStructure();
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertEquals("", textDirectoryLoader0.getCharSet());
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertFalse(textDirectoryLoader0.getDebug());
      assertEquals(0, instances0.size());
      assertTrue(instances0.checkForStringAttributes());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01);
      assertEquals(2, instances0.numAttributes());
      assertEquals(0, instances0.numInstances());
      assertEquals(0, instances0.numClasses());
      assertEquals(1, instances0.classIndex());
      assertEquals("_mnt_gaiagpfs_users_homedirs_apanichella_Evosuite_performance_Dataset_gordon_script_sum_projects_9_weka", instances0.relationName());
      assertNotNull(instances0);
      
      TestSetEvent testSetEvent0 = new TestSetEvent(filter0, instances0, 1514, 156);
      assertFalse(filter0.isFocusCycleRoot());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertEquals("AllFilter", filter0.getCustomName());
      assertFalse(filter0.getIgnoreRepaint());
      assertFalse(filter0.isBusy());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertEquals("", textDirectoryLoader0.getCharSet());
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertFalse(textDirectoryLoader0.getDebug());
      assertEquals(0, instances0.size());
      assertTrue(instances0.checkForStringAttributes());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01);
      assertEquals(2, instances0.numAttributes());
      assertEquals(0, instances0.numInstances());
      assertEquals(0, instances0.numClasses());
      assertEquals(1, instances0.classIndex());
      assertEquals("_mnt_gaiagpfs_users_homedirs_apanichella_Evosuite_performance_Dataset_gordon_script_sum_projects_9_weka", instances0.relationName());
      assertEquals(1514, testSetEvent0.getSetNumber());
      assertEquals(1, testSetEvent0.getMaxRunNumber());
      assertTrue(testSetEvent0.isStructureOnly());
      assertEquals(156, testSetEvent0.getMaxSetNumber());
      assertEquals(1, testSetEvent0.getRunNumber());
      assertNotNull(testSetEvent0);
      
      filter0.acceptTestSet(testSetEvent0);
      assertFalse(filter0.isFocusCycleRoot());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertEquals("AllFilter", filter0.getCustomName());
      assertFalse(filter0.getIgnoreRepaint());
      assertFalse(filter0.isBusy());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertEquals("", textDirectoryLoader0.getCharSet());
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertFalse(textDirectoryLoader0.getDebug());
      assertEquals(0, instances0.size());
      assertTrue(instances0.checkForStringAttributes());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01);
      assertEquals(2, instances0.numAttributes());
      assertEquals(0, instances0.numInstances());
      assertEquals(0, instances0.numClasses());
      assertEquals(1, instances0.classIndex());
      assertEquals("_mnt_gaiagpfs_users_homedirs_apanichella_Evosuite_performance_Dataset_gordon_script_sum_projects_9_weka", instances0.relationName());
      assertEquals(1514, testSetEvent0.getSetNumber());
      assertEquals(1, testSetEvent0.getMaxRunNumber());
      assertTrue(testSetEvent0.isStructureOnly());
      assertEquals(156, testSetEvent0.getMaxSetNumber());
      assertEquals(1, testSetEvent0.getRunNumber());
      
      SysErrLog sysErrLog0 = new SysErrLog();
      assertNotNull(sysErrLog0);
      
      SysErrLog sysErrLog1 = new SysErrLog();
      assertFalse(sysErrLog1.equals((Object)sysErrLog0));
      assertNotNull(sysErrLog1);
      
      sysErrLog1.statusMessage("KRvWQ/-DNXXl#S,vofv");
      assertNotSame(sysErrLog1, sysErrLog0);
      assertFalse(sysErrLog1.equals((Object)sysErrLog0));
      
      sysErrLog0.logMessage("KRvWQ/-DNXXl#S,vofv");
      assertNotSame(sysErrLog0, sysErrLog1);
      assertFalse(sysErrLog0.equals((Object)sysErrLog1));
      
      PredictionAppender predictionAppender0 = new PredictionAppender();
      assertEquals("Accepts batch or incremental classifier events and produces a new data set with classifier predictions appended.", predictionAppender0.globalInfo());
      assertFalse(predictionAppender0.isBusy());
      assertFalse(predictionAppender0.isFocusCycleRoot());
      assertFalse(predictionAppender0.isFocusTraversalPolicyProvider());
      assertEquals("append probabilities rather than labels for discrete class predictions", predictionAppender0.appendPredictedProbabilitiesTipText());
      assertFalse(predictionAppender0.getAppendPredictedProbabilities());
      assertFalse(predictionAppender0.isFocusTraversalPolicySet());
      assertFalse(predictionAppender0.getIgnoreRepaint());
      assertTrue(predictionAppender0.getFocusTraversalKeysEnabled());
      assertEquals("PredictionAppender", predictionAppender0.getCustomName());
      assertNotNull(predictionAppender0);
      
      Logger logger0 = predictionAppender0.m_logger;
      assertNull(logger0);
      
      ClassAssigner classAssigner0 = new ClassAssigner();
      assertTrue(classAssigner0.getFocusTraversalKeysEnabled());
      assertEquals("Designate which column is to be considered the class column in incoming data.", classAssigner0.globalInfo());
      assertFalse(classAssigner0.getIgnoreRepaint());
      assertEquals("last", classAssigner0.getClassColumn());
      assertFalse(classAssigner0.isFocusTraversalPolicySet());
      assertFalse(classAssigner0.isBusy());
      assertFalse(classAssigner0.isFocusTraversalPolicyProvider());
      assertFalse(classAssigner0.isFocusCycleRoot());
      assertEquals("ClassAssigner", classAssigner0.getCustomName());
      assertEquals("Specify the number of the column that contains the class attribute", classAssigner0.classColumnTipText());
      assertNotNull(classAssigner0);
      
      ClassAssigner classAssigner1 = new ClassAssigner();
      assertEquals("ClassAssigner", classAssigner1.getCustomName());
      assertEquals("Designate which column is to be considered the class column in incoming data.", classAssigner1.globalInfo());
      assertFalse(classAssigner1.isFocusTraversalPolicyProvider());
      assertEquals("last", classAssigner1.getClassColumn());
      assertFalse(classAssigner1.isBusy());
      assertEquals("Specify the number of the column that contains the class attribute", classAssigner1.classColumnTipText());
      assertTrue(classAssigner1.getFocusTraversalKeysEnabled());
      assertFalse(classAssigner1.isFocusTraversalPolicySet());
      assertFalse(classAssigner1.isFocusCycleRoot());
      assertFalse(classAssigner1.getIgnoreRepaint());
      assertFalse(classAssigner1.equals((Object)classAssigner0));
      assertNotNull(classAssigner1);
      
      SubstringReplacer substringReplacer0 = new SubstringReplacer();
      assertEquals("SubstringReplacer", substringReplacer0.getCustomName());
      assertFalse(substringReplacer0.getIgnoreRepaint());
      assertTrue(substringReplacer0.getFocusTraversalKeysEnabled());
      assertFalse(substringReplacer0.isFocusCycleRoot());
      assertFalse(substringReplacer0.isFocusTraversalPolicySet());
      assertEquals("", substringReplacer0.getMatchReplaceDetails());
      assertFalse(substringReplacer0.isFocusTraversalPolicyProvider());
      assertEquals("Replaces substrings in String attribute values using either literal match and replace or regular expression matching. The attributesto apply the match and replace rules to can be selected via a range string (e.g 1-5,6,last) or by a comma separated list of attribute names (/first and /last can be used to indicate the first and last attribute respectively)", substringReplacer0.globalInfo());
      assertFalse(substringReplacer0.isBusy());
      assertNotNull(substringReplacer0);
      
      DefaultCaret defaultCaret0 = new DefaultCaret();
      assertEquals(0, defaultCaret0.y);
      assertEquals(0, defaultCaret0.height);
      assertEquals(0, defaultCaret0.x);
      assertEquals(0, defaultCaret0.width);
      assertEquals(0.0, defaultCaret0.getX(), 0.01);
      assertEquals(0.0, defaultCaret0.getHeight(), 0.01);
      assertEquals(0.0, defaultCaret0.getY(), 0.01);
      assertEquals(0.0, defaultCaret0.getCenterY(), 0.01);
      assertTrue(defaultCaret0.isEmpty());
      assertEquals(0.0, defaultCaret0.getMinX(), 0.01);
      assertEquals(0.0, defaultCaret0.getCenterX(), 0.01);
      assertEquals(0.0, defaultCaret0.getMaxX(), 0.01);
      assertEquals(0.0, defaultCaret0.getMinY(), 0.01);
      assertEquals(0.0, defaultCaret0.getWidth(), 0.01);
      assertEquals(0.0, defaultCaret0.getMaxY(), 0.01);
      assertNotNull(defaultCaret0);
      
      MouseListener mouseListener0 = AWTEventMulticaster.remove((MouseListener) defaultCaret0, (MouseListener) defaultCaret0);
      assertEquals(0, defaultCaret0.y);
      assertEquals(0, defaultCaret0.height);
      assertEquals(0, defaultCaret0.x);
      assertEquals(0, defaultCaret0.width);
      assertEquals(0.0, defaultCaret0.getX(), 0.01);
      assertEquals(0.0, defaultCaret0.getHeight(), 0.01);
      assertEquals(0.0, defaultCaret0.getY(), 0.01);
      assertEquals(0.0, defaultCaret0.getCenterY(), 0.01);
      assertTrue(defaultCaret0.isEmpty());
      assertEquals(0.0, defaultCaret0.getMinX(), 0.01);
      assertEquals(0.0, defaultCaret0.getCenterX(), 0.01);
      assertEquals(0.0, defaultCaret0.getMaxX(), 0.01);
      assertEquals(0.0, defaultCaret0.getMinY(), 0.01);
      assertEquals(0.0, defaultCaret0.getWidth(), 0.01);
      assertEquals(0.0, defaultCaret0.getMaxY(), 0.01);
      assertNull(mouseListener0);
      
      substringReplacer0.addMouseListener((MouseListener) null);
      assertEquals("SubstringReplacer", substringReplacer0.getCustomName());
      assertFalse(substringReplacer0.getIgnoreRepaint());
      assertTrue(substringReplacer0.getFocusTraversalKeysEnabled());
      assertFalse(substringReplacer0.isFocusCycleRoot());
      assertFalse(substringReplacer0.isFocusTraversalPolicySet());
      assertEquals("", substringReplacer0.getMatchReplaceDetails());
      assertFalse(substringReplacer0.isFocusTraversalPolicyProvider());
      assertEquals("Replaces substrings in String attribute values using either literal match and replace or regular expression matching. The attributesto apply the match and replace rules to can be selected via a range string (e.g 1-5,6,last) or by a comma separated list of attribute names (/first and /last can be used to indicate the first and last attribute respectively)", substringReplacer0.globalInfo());
      assertFalse(substringReplacer0.isBusy());
      
      MultiFilter multiFilter0 = new MultiFilter();
      assertEquals("The base filters to be used.", multiFilter0.filtersTipText());
      assertFalse(multiFilter0.isFirstBatchDone());
      assertTrue(multiFilter0.isNewBatch());
      assertEquals("Applies several filters successively. In case all supplied filters are StreamableFilters, it will act as a streamable one, too.", multiFilter0.globalInfo());
      assertEquals("Turns on output of debugging information.", multiFilter0.debugTipText());
      assertFalse(multiFilter0.getDebug());
      assertFalse(multiFilter0.isOutputFormatDefined());
      assertFalse(multiFilter0.mayRemoveInstanceAfterFirstBatchDone());
      assertNotNull(multiFilter0);
      
      filter0.setFilter(multiFilter0);
      assertFalse(filter0.isFocusCycleRoot());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertEquals("MultiFilter", filter0.getCustomName());
      assertEquals("<html><font color=blue>Applies several filters successively</font><br><br> In case all supplied filters are StreamableFilters, it will act as a streamable one, too.<br></html>", filter0.globalInfo());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertFalse(filter0.getIgnoreRepaint());
      assertFalse(filter0.isBusy());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertEquals("The base filters to be used.", multiFilter0.filtersTipText());
      assertFalse(multiFilter0.isFirstBatchDone());
      assertTrue(multiFilter0.isNewBatch());
      assertEquals("Applies several filters successively. In case all supplied filters are StreamableFilters, it will act as a streamable one, too.", multiFilter0.globalInfo());
      assertEquals("Turns on output of debugging information.", multiFilter0.debugTipText());
      assertFalse(multiFilter0.getDebug());
      assertFalse(multiFilter0.isOutputFormatDefined());
      assertFalse(multiFilter0.mayRemoveInstanceAfterFirstBatchDone());
      
      filter0.stop();
      assertFalse(filter0.isFocusCycleRoot());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertEquals("MultiFilter", filter0.getCustomName());
      assertEquals("<html><font color=blue>Applies several filters successively</font><br><br> In case all supplied filters are StreamableFilters, it will act as a streamable one, too.<br></html>", filter0.globalInfo());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertFalse(filter0.getIgnoreRepaint());
      assertFalse(filter0.isBusy());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      
      filter0.useDefaultVisual();
      assertFalse(filter0.isFocusCycleRoot());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertEquals("MultiFilter", filter0.getCustomName());
      assertEquals("<html><font color=blue>Applies several filters successively</font><br><br> In case all supplied filters are StreamableFilters, it will act as a streamable one, too.<br></html>", filter0.globalInfo());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertFalse(filter0.getIgnoreRepaint());
      assertFalse(filter0.isBusy());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      
      filter0.addInstanceListener(filter0);
      assertFalse(filter0.isFocusCycleRoot());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertEquals("MultiFilter", filter0.getCustomName());
      assertEquals("<html><font color=blue>Applies several filters successively</font><br><br> In case all supplied filters are StreamableFilters, it will act as a streamable one, too.<br></html>", filter0.globalInfo());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertFalse(filter0.getIgnoreRepaint());
      assertFalse(filter0.isBusy());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      
      BayesNet bayesNet0 = new BayesNet();
      assertEquals("Set the name of a file in BIF XML format. A Bayes network learned from data can be compared with the Bayes network represented by the BIF file. Statistics calculated are o.a. the number of missing and extra arcs.", bayesNet0.BIFFileTipText());
      assertFalse(bayesNet0.getUseADTree());
      assertEquals("When ADTree (the data structure for increasing speed on counts, not to be confused with the classifier under the same name) is used learning time goes down typically. However, because ADTrees are memory intensive, memory problems may occur. Switching this option off makes the structure learning algorithms slower, and run with less memory. By default, ADTrees are used.", bayesNet0.useADTreeTipText());
      assertEquals("If set to true, classifier may output additional info to the console.", bayesNet0.debugTipText());
      assertEquals("Bayes Network learning using various search algorithms and quality measures.\nBase class for a Bayes Network classifier. Provides datastructures (network structure, conditional probability distributions, etc.) and facilities common to Bayes Network learning algorithms like K2 and B.\n\nFor more information see:\n\nhttp://www.cs.waikato.ac.nz/~remco/weka.pdf", bayesNet0.globalInfo());
      assertEquals(2, bayesNet0.graphType());
      assertFalse(bayesNet0.getDebug());
      assertEquals("Select method used for searching network structures.", bayesNet0.searchAlgorithmTipText());
      assertEquals("Select Estimator algorithm for finding the conditional probability tables of the Bayes Network.", bayesNet0.estimatorTipText());
      assertNotNull(bayesNet0);
      
      String string0 = textDirectoryLoader0.getRevision();
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertEquals("", textDirectoryLoader0.getCharSet());
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertFalse(textDirectoryLoader0.getDebug());
      assertNotNull(string0);
      assertEquals("8034", string0);
      
      Instances instances1 = bayesNet0.m_Instances;
      assertNull(instances1);
      
      TestSetMaker testSetMaker0 = new TestSetMaker();
      assertFalse(testSetMaker0.isFocusCycleRoot());
      assertTrue(testSetMaker0.getFocusTraversalKeysEnabled());
      assertFalse(testSetMaker0.isFocusTraversalPolicySet());
      assertEquals("Designate an incoming data set as a test set.", testSetMaker0.globalInfo());
      assertFalse(testSetMaker0.getIgnoreRepaint());
      assertEquals("TestSetMaker", testSetMaker0.getCustomName());
      assertFalse(testSetMaker0.isFocusTraversalPolicyProvider());
      assertFalse(testSetMaker0.isBusy());
      assertNotNull(testSetMaker0);
      
      DataSetEvent dataSetEvent0 = new DataSetEvent(testSetMaker0, instances0);
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertEquals("", textDirectoryLoader0.getCharSet());
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertFalse(textDirectoryLoader0.getDebug());
      assertEquals(0, instances0.size());
      assertTrue(instances0.checkForStringAttributes());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01);
      assertEquals(2, instances0.numAttributes());
      assertEquals(0, instances0.numInstances());
      assertEquals(0, instances0.numClasses());
      assertEquals(1, instances0.classIndex());
      assertEquals("_mnt_gaiagpfs_users_homedirs_apanichella_Evosuite_performance_Dataset_gordon_script_sum_projects_9_weka", instances0.relationName());
      assertFalse(testSetMaker0.isFocusCycleRoot());
      assertTrue(testSetMaker0.getFocusTraversalKeysEnabled());
      assertFalse(testSetMaker0.isFocusTraversalPolicySet());
      assertEquals("Designate an incoming data set as a test set.", testSetMaker0.globalInfo());
      assertFalse(testSetMaker0.getIgnoreRepaint());
      assertEquals("TestSetMaker", testSetMaker0.getCustomName());
      assertFalse(testSetMaker0.isFocusTraversalPolicyProvider());
      assertFalse(testSetMaker0.isBusy());
      assertTrue(dataSetEvent0.isStructureOnly());
      assertNotNull(dataSetEvent0);
      
      filter0.acceptDataSet(dataSetEvent0);
      assertFalse(filter0.isFocusCycleRoot());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertEquals("MultiFilter", filter0.getCustomName());
      assertEquals("<html><font color=blue>Applies several filters successively</font><br><br> In case all supplied filters are StreamableFilters, it will act as a streamable one, too.<br></html>", filter0.globalInfo());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertFalse(filter0.getIgnoreRepaint());
      assertFalse(filter0.isBusy());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertEquals("", textDirectoryLoader0.getCharSet());
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertFalse(textDirectoryLoader0.getDebug());
      assertEquals(0, instances0.size());
      assertTrue(instances0.checkForStringAttributes());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01);
      assertEquals(2, instances0.numAttributes());
      assertEquals(0, instances0.numInstances());
      assertEquals(0, instances0.numClasses());
      assertEquals(1, instances0.classIndex());
      assertEquals("_mnt_gaiagpfs_users_homedirs_apanichella_Evosuite_performance_Dataset_gordon_script_sum_projects_9_weka", instances0.relationName());
      assertFalse(testSetMaker0.isFocusCycleRoot());
      assertTrue(testSetMaker0.getFocusTraversalKeysEnabled());
      assertFalse(testSetMaker0.isFocusTraversalPolicySet());
      assertEquals("Designate an incoming data set as a test set.", testSetMaker0.globalInfo());
      assertFalse(testSetMaker0.getIgnoreRepaint());
      assertEquals("TestSetMaker", testSetMaker0.getCustomName());
      assertFalse(testSetMaker0.isFocusTraversalPolicyProvider());
      assertFalse(testSetMaker0.isBusy());
      assertTrue(dataSetEvent0.isStructureOnly());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Filter filter0 = new Filter();
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertFalse(filter0.getIgnoreRepaint());
      assertFalse(filter0.isFocusCycleRoot());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertFalse(filter0.isBusy());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertEquals("AllFilter", filter0.getCustomName());
      assertNotNull(filter0);
      
      filter0.connectionNotification("io1W8#ZY*!pBieE4&(", "io1W8#ZY*!pBieE4&(");
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertFalse(filter0.getIgnoreRepaint());
      assertFalse(filter0.isFocusCycleRoot());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertFalse(filter0.isBusy());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertEquals("AllFilter", filter0.getCustomName());
      
      boolean boolean0 = filter0.eventGeneratable("io1W8#ZY*!pBieE4&(");
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertFalse(filter0.getIgnoreRepaint());
      assertFalse(filter0.isFocusCycleRoot());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertFalse(filter0.isBusy());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertEquals("AllFilter", filter0.getCustomName());
      assertTrue(boolean0);
      
      ClassOrder classOrder0 = new ClassOrder();
      assertEquals(1, ClassOrder.FREQ_DESCEND);
      assertEquals(0, ClassOrder.FREQ_ASCEND);
      assertEquals(2, ClassOrder.RANDOM);
      assertEquals(1L, classOrder0.getSeed());
      assertEquals("Specify the seed of randomization of the class order", classOrder0.seedTipText());
      assertEquals("Changes the order of the classes so that the class values are no longer of in the order specified in the header. The values will be in the order specified by the user -- it could be either in ascending/descending order by the class frequency or in random order. Note that this filter currently does not change the header, only the class values of the instances, so there is not much point in using it in conjunction with the FilteredClassifier. The value can also be converted back using 'originalValue(double value)' procedure.", classOrder0.globalInfo());
      assertFalse(classOrder0.isFirstBatchDone());
      assertFalse(classOrder0.mayRemoveInstanceAfterFirstBatchDone());
      assertTrue(classOrder0.isNewBatch());
      assertFalse(classOrder0.isOutputFormatDefined());
      assertEquals("Specify the class order after the filtering", classOrder0.classOrderTipText());
      assertEquals(0, classOrder0.getClassOrder());
      assertNotNull(classOrder0);
      
      Associator associator0 = new Associator();
      assertEquals("Apriori", associator0.getCustomName());
      assertTrue(associator0.getFocusTraversalKeysEnabled());
      assertFalse(associator0.isBusy());
      assertFalse(associator0.isFocusTraversalPolicyProvider());
      assertFalse(associator0.isFocusCycleRoot());
      assertFalse(associator0.isFocusTraversalPolicySet());
      assertEquals("<html><font color=blue>Class implementing an Apriori-type algorithm</font><br><br> Iteratively reduces the minimum support until it finds the required number of rules with the given minimum confidence.<br>The algorithm has an option to mine class association rules.<br>It is adapted as explained in the second reference.<br><br>For more information see:<br><br>R.<br>Agrawal, R.<br>Srikant: Fast Algorithms for Mining Association Rules in Large Databases.<br>In: 20th International Conference on Very Large Data Bases, 478-499, 1994.<br><br>Bing Liu, Wynne Hsu, Yiming Ma: Integrating Classification and Association Rule Mining.<br>In: Fourth International Conference on Knowledge Discovery and Data Mining, 80-86, 1998.<br></html>", associator0.globalInfo());
      assertFalse(associator0.getIgnoreRepaint());
      assertNotNull(associator0);
      
      HierarchyBoundsListener[] hierarchyBoundsListenerArray0 = filter0.getHierarchyBoundsListeners();
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertFalse(filter0.getIgnoreRepaint());
      assertFalse(filter0.isFocusCycleRoot());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertFalse(filter0.isBusy());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertEquals("AllFilter", filter0.getCustomName());
      assertNotNull(hierarchyBoundsListenerArray0);
      
      filter0.addNotify();
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertFalse(filter0.getIgnoreRepaint());
      assertFalse(filter0.isFocusCycleRoot());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertFalse(filter0.isBusy());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertEquals("AllFilter", filter0.getCustomName());
      
      filter0.removeDataSourceListener(associator0);
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertFalse(filter0.getIgnoreRepaint());
      assertFalse(filter0.isFocusCycleRoot());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertFalse(filter0.isBusy());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertEquals("AllFilter", filter0.getCustomName());
      assertEquals("Apriori", associator0.getCustomName());
      assertTrue(associator0.getFocusTraversalKeysEnabled());
      assertFalse(associator0.isBusy());
      assertFalse(associator0.isFocusTraversalPolicyProvider());
      assertFalse(associator0.isFocusCycleRoot());
      assertFalse(associator0.isFocusTraversalPolicySet());
      assertEquals("<html><font color=blue>Class implementing an Apriori-type algorithm</font><br><br> Iteratively reduces the minimum support until it finds the required number of rules with the given minimum confidence.<br>The algorithm has an option to mine class association rules.<br>It is adapted as explained in the second reference.<br><br>For more information see:<br><br>R.<br>Agrawal, R.<br>Srikant: Fast Algorithms for Mining Association Rules in Large Databases.<br>In: 20th International Conference on Very Large Data Bases, 478-499, 1994.<br><br>Bing Liu, Wynne Hsu, Yiming Ma: Integrating Classification and Association Rule Mining.<br>In: Fourth International Conference on Knowledge Discovery and Data Mining, 80-86, 1998.<br></html>", associator0.globalInfo());
      assertFalse(associator0.getIgnoreRepaint());
      
      AllFilter allFilter0 = (AllFilter)filter0.getWrappedAlgorithm();
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertFalse(filter0.getIgnoreRepaint());
      assertFalse(filter0.isFocusCycleRoot());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertFalse(filter0.isBusy());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertEquals("AllFilter", filter0.getCustomName());
      assertFalse(allFilter0.isOutputFormatDefined());
      assertFalse(allFilter0.isFirstBatchDone());
      assertEquals("An instance filter that passes all instances through unmodified. Primarily for testing purposes.", allFilter0.globalInfo());
      assertTrue(allFilter0.isNewBatch());
      assertFalse(allFilter0.mayRemoveInstanceAfterFirstBatchDone());
      assertNotNull(allFilter0);
      
      filter0.stop();
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertFalse(filter0.getIgnoreRepaint());
      assertFalse(filter0.isFocusCycleRoot());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertFalse(filter0.isBusy());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertEquals("AllFilter", filter0.getCustomName());
      
      TextViewer textViewer0 = new TextViewer();
      assertFalse(textViewer0.isFocusCycleRoot());
      assertFalse(textViewer0.isFocusTraversalPolicySet());
      assertEquals("General purpose text display.", textViewer0.globalInfo());
      assertTrue(textViewer0.getFocusTraversalKeysEnabled());
      assertFalse(textViewer0.getIgnoreRepaint());
      assertFalse(textViewer0.isBusy());
      assertFalse(textViewer0.isFocusTraversalPolicyProvider());
      assertNotNull(textViewer0);
      
      ClassAssigner classAssigner0 = new ClassAssigner();
      assertFalse(classAssigner0.isFocusTraversalPolicySet());
      assertEquals("Specify the number of the column that contains the class attribute", classAssigner0.classColumnTipText());
      assertTrue(classAssigner0.getFocusTraversalKeysEnabled());
      assertEquals("ClassAssigner", classAssigner0.getCustomName());
      assertEquals("Designate which column is to be considered the class column in incoming data.", classAssigner0.globalInfo());
      assertEquals("last", classAssigner0.getClassColumn());
      assertFalse(classAssigner0.getIgnoreRepaint());
      assertFalse(classAssigner0.isBusy());
      assertFalse(classAssigner0.isFocusTraversalPolicyProvider());
      assertFalse(classAssigner0.isFocusCycleRoot());
      assertNotNull(classAssigner0);
      
      filter0.addTestSetListener(classAssigner0);
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertFalse(filter0.getIgnoreRepaint());
      assertFalse(filter0.isFocusCycleRoot());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertFalse(filter0.isBusy());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertEquals("AllFilter", filter0.getCustomName());
      assertFalse(classAssigner0.isFocusTraversalPolicySet());
      assertEquals("Specify the number of the column that contains the class attribute", classAssigner0.classColumnTipText());
      assertTrue(classAssigner0.getFocusTraversalKeysEnabled());
      assertEquals("ClassAssigner", classAssigner0.getCustomName());
      assertEquals("Designate which column is to be considered the class column in incoming data.", classAssigner0.globalInfo());
      assertEquals("last", classAssigner0.getClassColumn());
      assertFalse(classAssigner0.getIgnoreRepaint());
      assertFalse(classAssigner0.isBusy());
      assertFalse(classAssigner0.isFocusTraversalPolicyProvider());
      assertFalse(classAssigner0.isFocusCycleRoot());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Filter filter0 = new Filter();
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertFalse(filter0.getIgnoreRepaint());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertEquals("AllFilter", filter0.getCustomName());
      assertFalse(filter0.isBusy());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertFalse(filter0.isFocusCycleRoot());
      assertNotNull(filter0);
      
      filter0.acceptTrainingSet((TrainingSetEvent) null);
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertFalse(filter0.getIgnoreRepaint());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertEquals("AllFilter", filter0.getCustomName());
      assertFalse(filter0.isBusy());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertFalse(filter0.isFocusCycleRoot());
      
      BeanVisual beanVisual0 = filter0.getVisual();
      assertEquals(1, BeanVisual.SOUTH_CONNECTOR);
      assertEquals(0, BeanVisual.NORTH_CONNECTOR);
      assertEquals(3, BeanVisual.WEST_CONNECTOR);
      assertEquals(2, BeanVisual.EAST_CONNECTOR);
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertFalse(filter0.getIgnoreRepaint());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertEquals("AllFilter", filter0.getCustomName());
      assertFalse(filter0.isBusy());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertFalse(filter0.isFocusCycleRoot());
      assertTrue(beanVisual0.getFocusTraversalKeysEnabled());
      assertFalse(beanVisual0.getIgnoreRepaint());
      assertEquals("weka/gui/beans/icons/DefaultFilter_animated.gif", beanVisual0.getAnimatedIconPath());
      assertEquals("weka/gui/beans/icons/DefaultFilter.gif", beanVisual0.getIconPath());
      assertFalse(beanVisual0.isFocusTraversalPolicySet());
      assertFalse(beanVisual0.isFocusTraversalPolicyProvider());
      assertFalse(beanVisual0.isFocusCycleRoot());
      assertEquals("AllFilter", beanVisual0.getText());
      assertNotNull(beanVisual0);
      
      AllFilter allFilter0 = (AllFilter)filter0.getWrappedAlgorithm();
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertFalse(filter0.getIgnoreRepaint());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertEquals("AllFilter", filter0.getCustomName());
      assertFalse(filter0.isBusy());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertFalse(filter0.isFocusCycleRoot());
      assertEquals("An instance filter that passes all instances through unmodified. Primarily for testing purposes.", allFilter0.globalInfo());
      assertFalse(allFilter0.isFirstBatchDone());
      assertFalse(allFilter0.isOutputFormatDefined());
      assertTrue(allFilter0.isNewBatch());
      assertFalse(allFilter0.mayRemoveInstanceAfterFirstBatchDone());
      assertNotNull(allFilter0);
      
      String string0 = filter0.getCustomName();
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertFalse(filter0.getIgnoreRepaint());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertEquals("AllFilter", filter0.getCustomName());
      assertFalse(filter0.isBusy());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertFalse(filter0.isFocusCycleRoot());
      assertNotNull(string0);
      assertEquals("AllFilter", string0);
      
      boolean boolean0 = filter0.eventGeneratable("AllFilter");
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertFalse(filter0.getIgnoreRepaint());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertEquals("AllFilter", filter0.getCustomName());
      assertFalse(filter0.isBusy());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertFalse(filter0.isFocusCycleRoot());
      assertFalse(boolean0);
      
      ClassValuePicker classValuePicker0 = new ClassValuePicker();
      assertFalse(classValuePicker0.getIgnoreRepaint());
      assertFalse(classValuePicker0.isBusy());
      assertFalse(classValuePicker0.isFocusCycleRoot());
      assertFalse(classValuePicker0.isFocusTraversalPolicyProvider());
      assertFalse(classValuePicker0.isFocusTraversalPolicySet());
      assertEquals("ClassValuePicker", classValuePicker0.getCustomName());
      assertNull(classValuePicker0.getClassValue());
      assertEquals("Designate which class value is to be considered the \"positive\" class value (useful for ROC style curves).", classValuePicker0.globalInfo());
      assertTrue(classValuePicker0.getFocusTraversalKeysEnabled());
      assertNotNull(classValuePicker0);
      
      Instances instances0 = classValuePicker0.getStructure();
      assertFalse(classValuePicker0.getIgnoreRepaint());
      assertFalse(classValuePicker0.isBusy());
      assertFalse(classValuePicker0.isFocusCycleRoot());
      assertFalse(classValuePicker0.isFocusTraversalPolicyProvider());
      assertFalse(classValuePicker0.isFocusTraversalPolicySet());
      assertEquals("ClassValuePicker", classValuePicker0.getCustomName());
      assertNull(classValuePicker0.getClassValue());
      assertEquals("Designate which class value is to be considered the \"positive\" class value (useful for ROC style curves).", classValuePicker0.globalInfo());
      assertTrue(classValuePicker0.getFocusTraversalKeysEnabled());
      assertNull(instances0);
      
      StratifiedRemoveFolds stratifiedRemoveFolds0 = new StratifiedRemoveFolds();
      assertEquals("the random number seed for shuffling the dataset. If seed is negative, shuffling will not be performed.", stratifiedRemoveFolds0.seedTipText());
      assertFalse(stratifiedRemoveFolds0.isFirstBatchDone());
      assertTrue(stratifiedRemoveFolds0.isNewBatch());
      assertEquals("Whether to invert the selection.", stratifiedRemoveFolds0.invertSelectionTipText());
      assertEquals(1, stratifiedRemoveFolds0.getFold());
      assertEquals("This filter takes a dataset and outputs a specified fold for cross validation. If you do not want the folds to be stratified use the unsupervised version.", stratifiedRemoveFolds0.globalInfo());
      assertFalse(stratifiedRemoveFolds0.getInvertSelection());
      assertFalse(stratifiedRemoveFolds0.mayRemoveInstanceAfterFirstBatchDone());
      assertEquals(0L, stratifiedRemoveFolds0.getSeed());
      assertEquals(10, stratifiedRemoveFolds0.getNumFolds());
      assertEquals("The number of folds to split the dataset into.", stratifiedRemoveFolds0.numFoldsTipText());
      assertEquals("The fold which is selected.", stratifiedRemoveFolds0.foldTipText());
      assertFalse(stratifiedRemoveFolds0.isOutputFormatDefined());
      assertNotNull(stratifiedRemoveFolds0);
      
      TestSetEvent testSetEvent0 = new TestSetEvent(stratifiedRemoveFolds0, (Instances) null);
      assertEquals("the random number seed for shuffling the dataset. If seed is negative, shuffling will not be performed.", stratifiedRemoveFolds0.seedTipText());
      assertFalse(stratifiedRemoveFolds0.isFirstBatchDone());
      assertTrue(stratifiedRemoveFolds0.isNewBatch());
      assertEquals("Whether to invert the selection.", stratifiedRemoveFolds0.invertSelectionTipText());
      assertEquals(1, stratifiedRemoveFolds0.getFold());
      assertEquals("This filter takes a dataset and outputs a specified fold for cross validation. If you do not want the folds to be stratified use the unsupervised version.", stratifiedRemoveFolds0.globalInfo());
      assertFalse(stratifiedRemoveFolds0.getInvertSelection());
      assertFalse(stratifiedRemoveFolds0.mayRemoveInstanceAfterFirstBatchDone());
      assertEquals(0L, stratifiedRemoveFolds0.getSeed());
      assertEquals(10, stratifiedRemoveFolds0.getNumFolds());
      assertEquals("The number of folds to split the dataset into.", stratifiedRemoveFolds0.numFoldsTipText());
      assertEquals("The fold which is selected.", stratifiedRemoveFolds0.foldTipText());
      assertFalse(stratifiedRemoveFolds0.isOutputFormatDefined());
      assertEquals(0, testSetEvent0.getSetNumber());
      assertEquals(1, testSetEvent0.getRunNumber());
      assertFalse(testSetEvent0.isStructureOnly());
      assertEquals(0, testSetEvent0.getMaxSetNumber());
      assertEquals(1, testSetEvent0.getMaxRunNumber());
      assertNotNull(testSetEvent0);
      
      testSetEvent0.m_runNumber = 0;
      assertEquals("the random number seed for shuffling the dataset. If seed is negative, shuffling will not be performed.", stratifiedRemoveFolds0.seedTipText());
      assertFalse(stratifiedRemoveFolds0.isFirstBatchDone());
      assertTrue(stratifiedRemoveFolds0.isNewBatch());
      assertEquals("Whether to invert the selection.", stratifiedRemoveFolds0.invertSelectionTipText());
      assertEquals(1, stratifiedRemoveFolds0.getFold());
      assertEquals("This filter takes a dataset and outputs a specified fold for cross validation. If you do not want the folds to be stratified use the unsupervised version.", stratifiedRemoveFolds0.globalInfo());
      assertFalse(stratifiedRemoveFolds0.getInvertSelection());
      assertFalse(stratifiedRemoveFolds0.mayRemoveInstanceAfterFirstBatchDone());
      assertEquals(0L, stratifiedRemoveFolds0.getSeed());
      assertEquals(10, stratifiedRemoveFolds0.getNumFolds());
      assertEquals("The number of folds to split the dataset into.", stratifiedRemoveFolds0.numFoldsTipText());
      assertEquals("The fold which is selected.", stratifiedRemoveFolds0.foldTipText());
      assertFalse(stratifiedRemoveFolds0.isOutputFormatDefined());
      assertEquals(0, testSetEvent0.getRunNumber());
      assertEquals(0, testSetEvent0.getSetNumber());
      assertFalse(testSetEvent0.isStructureOnly());
      assertEquals(0, testSetEvent0.getMaxSetNumber());
      assertEquals(1, testSetEvent0.getMaxRunNumber());
      
      filter0.acceptTestSet(testSetEvent0);
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertFalse(filter0.getIgnoreRepaint());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertEquals("AllFilter", filter0.getCustomName());
      assertFalse(filter0.isBusy());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertFalse(filter0.isFocusCycleRoot());
      assertEquals("the random number seed for shuffling the dataset. If seed is negative, shuffling will not be performed.", stratifiedRemoveFolds0.seedTipText());
      assertFalse(stratifiedRemoveFolds0.isFirstBatchDone());
      assertTrue(stratifiedRemoveFolds0.isNewBatch());
      assertEquals("Whether to invert the selection.", stratifiedRemoveFolds0.invertSelectionTipText());
      assertEquals(1, stratifiedRemoveFolds0.getFold());
      assertEquals("This filter takes a dataset and outputs a specified fold for cross validation. If you do not want the folds to be stratified use the unsupervised version.", stratifiedRemoveFolds0.globalInfo());
      assertFalse(stratifiedRemoveFolds0.getInvertSelection());
      assertFalse(stratifiedRemoveFolds0.mayRemoveInstanceAfterFirstBatchDone());
      assertEquals(0L, stratifiedRemoveFolds0.getSeed());
      assertEquals(10, stratifiedRemoveFolds0.getNumFolds());
      assertEquals("The number of folds to split the dataset into.", stratifiedRemoveFolds0.numFoldsTipText());
      assertEquals("The fold which is selected.", stratifiedRemoveFolds0.foldTipText());
      assertFalse(stratifiedRemoveFolds0.isOutputFormatDefined());
      assertEquals(0, testSetEvent0.getRunNumber());
      assertEquals(0, testSetEvent0.getSetNumber());
      assertFalse(testSetEvent0.isStructureOnly());
      assertEquals(0, testSetEvent0.getMaxSetNumber());
      assertEquals(1, testSetEvent0.getMaxRunNumber());
      
      filter0.useDefaultVisual();
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertFalse(filter0.getIgnoreRepaint());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertEquals("AllFilter", filter0.getCustomName());
      assertFalse(filter0.isBusy());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertFalse(filter0.isFocusCycleRoot());
      
      DataSetEvent dataSetEvent0 = new DataSetEvent(allFilter0, (Instances) null);
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertFalse(filter0.getIgnoreRepaint());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertEquals("AllFilter", filter0.getCustomName());
      assertFalse(filter0.isBusy());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertFalse(filter0.isFocusCycleRoot());
      assertEquals("An instance filter that passes all instances through unmodified. Primarily for testing purposes.", allFilter0.globalInfo());
      assertFalse(allFilter0.isFirstBatchDone());
      assertFalse(allFilter0.isOutputFormatDefined());
      assertTrue(allFilter0.isNewBatch());
      assertFalse(allFilter0.mayRemoveInstanceAfterFirstBatchDone());
      assertFalse(dataSetEvent0.isStructureOnly());
      assertNotNull(dataSetEvent0);
      
      ClassOrder classOrder0 = new ClassOrder();
      assertEquals(0, ClassOrder.FREQ_ASCEND);
      assertEquals(2, ClassOrder.RANDOM);
      assertEquals(1, ClassOrder.FREQ_DESCEND);
      assertEquals(1L, classOrder0.getSeed());
      assertEquals("Specify the seed of randomization of the class order", classOrder0.seedTipText());
      assertEquals("Changes the order of the classes so that the class values are no longer of in the order specified in the header. The values will be in the order specified by the user -- it could be either in ascending/descending order by the class frequency or in random order. Note that this filter currently does not change the header, only the class values of the instances, so there is not much point in using it in conjunction with the FilteredClassifier. The value can also be converted back using 'originalValue(double value)' procedure.", classOrder0.globalInfo());
      assertFalse(classOrder0.mayRemoveInstanceAfterFirstBatchDone());
      assertTrue(classOrder0.isNewBatch());
      assertFalse(classOrder0.isFirstBatchDone());
      assertEquals("Specify the class order after the filtering", classOrder0.classOrderTipText());
      assertFalse(classOrder0.isOutputFormatDefined());
      assertEquals(0, classOrder0.getClassOrder());
      assertNotNull(classOrder0);
      
      String[] stringArray0 = classOrder0.getOptions();
      assertEquals(0, ClassOrder.FREQ_ASCEND);
      assertEquals(2, ClassOrder.RANDOM);
      assertEquals(1, ClassOrder.FREQ_DESCEND);
      assertEquals(1L, classOrder0.getSeed());
      assertEquals("Specify the seed of randomization of the class order", classOrder0.seedTipText());
      assertEquals("Changes the order of the classes so that the class values are no longer of in the order specified in the header. The values will be in the order specified by the user -- it could be either in ascending/descending order by the class frequency or in random order. Note that this filter currently does not change the header, only the class values of the instances, so there is not much point in using it in conjunction with the FilteredClassifier. The value can also be converted back using 'originalValue(double value)' procedure.", classOrder0.globalInfo());
      assertFalse(classOrder0.mayRemoveInstanceAfterFirstBatchDone());
      assertTrue(classOrder0.isNewBatch());
      assertFalse(classOrder0.isFirstBatchDone());
      assertEquals("Specify the class order after the filtering", classOrder0.classOrderTipText());
      assertFalse(classOrder0.isOutputFormatDefined());
      assertEquals(0, classOrder0.getClassOrder());
      assertNotNull(stringArray0);
      
      filter0.acceptDataSet(dataSetEvent0);
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertFalse(filter0.getIgnoreRepaint());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertEquals("AllFilter", filter0.getCustomName());
      assertFalse(filter0.isBusy());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertFalse(filter0.isFocusCycleRoot());
      assertEquals("An instance filter that passes all instances through unmodified. Primarily for testing purposes.", allFilter0.globalInfo());
      assertFalse(allFilter0.isFirstBatchDone());
      assertFalse(allFilter0.isOutputFormatDefined());
      assertTrue(allFilter0.isNewBatch());
      assertFalse(allFilter0.mayRemoveInstanceAfterFirstBatchDone());
      assertFalse(dataSetEvent0.isStructureOnly());
      
      MatlabLoader matlabLoader0 = new MatlabLoader();
      assertEquals("Reads a Matlab file containing a single matrix in ASCII format.", matlabLoader0.globalInfo());
      assertFalse(matlabLoader0.getUseRelativePath());
      assertEquals("Use relative rather than absolute paths", matlabLoader0.useRelativePathTipText());
      assertEquals(".m", matlabLoader0.getFileExtension());
      assertEquals("Matlab ASCII files", matlabLoader0.getFileDescription());
      assertEquals("http://", matlabLoader0.retrieveURL());
      assertNotNull(matlabLoader0);
      
      try { 
        matlabLoader0.getNextInstance((Instances) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // MatlabLoader can't read data sets incrementally.
         //
         verifyException("weka.core.converters.MatlabLoader", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Filter filter0 = new Filter();
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertEquals("AllFilter", filter0.getCustomName());
      assertFalse(filter0.getIgnoreRepaint());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertFalse(filter0.isFocusCycleRoot());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertFalse(filter0.isBusy());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      assertNotNull(filter0);
      
      filter0.connectionNotification("io1W8#ZY*!pBieE4&(", "io1W8#ZY*!pBieE4&(");
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertEquals("AllFilter", filter0.getCustomName());
      assertFalse(filter0.getIgnoreRepaint());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertFalse(filter0.isFocusCycleRoot());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertFalse(filter0.isBusy());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      
      boolean boolean0 = filter0.eventGeneratable("io1W8#ZY*!pBieE4&(");
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertEquals("AllFilter", filter0.getCustomName());
      assertFalse(filter0.getIgnoreRepaint());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertFalse(filter0.isFocusCycleRoot());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertFalse(filter0.isBusy());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      assertTrue(boolean0);
      
      ClassOrder classOrder0 = new ClassOrder();
      assertEquals(2, ClassOrder.RANDOM);
      assertEquals(0, ClassOrder.FREQ_ASCEND);
      assertEquals(1, ClassOrder.FREQ_DESCEND);
      assertFalse(classOrder0.mayRemoveInstanceAfterFirstBatchDone());
      assertTrue(classOrder0.isNewBatch());
      assertFalse(classOrder0.isFirstBatchDone());
      assertEquals("Changes the order of the classes so that the class values are no longer of in the order specified in the header. The values will be in the order specified by the user -- it could be either in ascending/descending order by the class frequency or in random order. Note that this filter currently does not change the header, only the class values of the instances, so there is not much point in using it in conjunction with the FilteredClassifier. The value can also be converted back using 'originalValue(double value)' procedure.", classOrder0.globalInfo());
      assertEquals(1L, classOrder0.getSeed());
      assertEquals("Specify the seed of randomization of the class order", classOrder0.seedTipText());
      assertEquals("Specify the class order after the filtering", classOrder0.classOrderTipText());
      assertFalse(classOrder0.isOutputFormatDefined());
      assertEquals(0, classOrder0.getClassOrder());
      assertNotNull(classOrder0);
      
      Associator associator0 = new Associator();
      assertFalse(associator0.isBusy());
      assertFalse(associator0.isFocusTraversalPolicyProvider());
      assertFalse(associator0.isFocusCycleRoot());
      assertFalse(associator0.getIgnoreRepaint());
      assertFalse(associator0.isFocusTraversalPolicySet());
      assertEquals("Apriori", associator0.getCustomName());
      assertTrue(associator0.getFocusTraversalKeysEnabled());
      assertEquals("<html><font color=blue>Class implementing an Apriori-type algorithm</font><br><br> Iteratively reduces the minimum support until it finds the required number of rules with the given minimum confidence.<br>The algorithm has an option to mine class association rules.<br>It is adapted as explained in the second reference.<br><br>For more information see:<br><br>R.<br>Agrawal, R.<br>Srikant: Fast Algorithms for Mining Association Rules in Large Databases.<br>In: 20th International Conference on Very Large Data Bases, 478-499, 1994.<br><br>Bing Liu, Wynne Hsu, Yiming Ma: Integrating Classification and Association Rule Mining.<br>In: Fourth International Conference on Knowledge Discovery and Data Mining, 80-86, 1998.<br></html>", associator0.globalInfo());
      assertNotNull(associator0);
      
      HierarchyBoundsListener[] hierarchyBoundsListenerArray0 = filter0.getHierarchyBoundsListeners();
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertEquals("AllFilter", filter0.getCustomName());
      assertFalse(filter0.getIgnoreRepaint());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertFalse(filter0.isFocusCycleRoot());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertFalse(filter0.isBusy());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      assertNotNull(hierarchyBoundsListenerArray0);
      
      filter0.addNotify();
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertEquals("AllFilter", filter0.getCustomName());
      assertFalse(filter0.getIgnoreRepaint());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertFalse(filter0.isFocusCycleRoot());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertFalse(filter0.isBusy());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      
      filter0.useDefaultVisual();
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertEquals("AllFilter", filter0.getCustomName());
      assertFalse(filter0.getIgnoreRepaint());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertFalse(filter0.isFocusCycleRoot());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertFalse(filter0.isBusy());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      
      Loader loader0 = new Loader();
      assertTrue(loader0.getFocusTraversalKeysEnabled());
      assertFalse(loader0.getIgnoreRepaint());
      assertFalse(loader0.isFocusTraversalPolicySet());
      assertFalse(loader0.isFocusCycleRoot());
      assertFalse(loader0.isFocusTraversalPolicyProvider());
      assertEquals("<html><font color=blue>Reads a source that is in arff (attribute relation file format) format</font> <br></html>", loader0.globalInfo());
      assertEquals("ArffLoader", loader0.getCustomName());
      assertFalse(loader0.isBusy());
      assertNotNull(loader0);
      
      float float0 = filter0.getAlignmentX();
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertEquals("AllFilter", filter0.getCustomName());
      assertFalse(filter0.getIgnoreRepaint());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertFalse(filter0.isFocusCycleRoot());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertFalse(filter0.isBusy());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      assertEquals(0.5F, float0, 0.01F);
      
      // Undeclared exception!
      try { 
        filter0.performRequest("TQ/&h@d[5");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // TQ/&h@d[5 not supported (Filter)
         //
         verifyException("weka.gui.beans.Filter", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Filter filter0 = new Filter();
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertFalse(filter0.isFocusCycleRoot());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertFalse(filter0.getIgnoreRepaint());
      assertFalse(filter0.isBusy());
      assertEquals("AllFilter", filter0.getCustomName());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      assertNotNull(filter0);
      
      MetalComboBoxEditor.UIResource metalComboBoxEditor_UIResource0 = new MetalComboBoxEditor.UIResource();
      assertNotNull(metalComboBoxEditor_UIResource0);
      
      Associator associator0 = new Associator();
      assertTrue(associator0.getFocusTraversalKeysEnabled());
      assertEquals("<html><font color=blue>Class implementing an Apriori-type algorithm</font><br><br> Iteratively reduces the minimum support until it finds the required number of rules with the given minimum confidence.<br>The algorithm has an option to mine class association rules.<br>It is adapted as explained in the second reference.<br><br>For more information see:<br><br>R.<br>Agrawal, R.<br>Srikant: Fast Algorithms for Mining Association Rules in Large Databases.<br>In: 20th International Conference on Very Large Data Bases, 478-499, 1994.<br><br>Bing Liu, Wynne Hsu, Yiming Ma: Integrating Classification and Association Rule Mining.<br>In: Fourth International Conference on Knowledge Discovery and Data Mining, 80-86, 1998.<br></html>", associator0.globalInfo());
      assertEquals("Apriori", associator0.getCustomName());
      assertFalse(associator0.isFocusCycleRoot());
      assertFalse(associator0.isFocusTraversalPolicyProvider());
      assertFalse(associator0.isBusy());
      assertFalse(associator0.getIgnoreRepaint());
      assertFalse(associator0.isFocusTraversalPolicySet());
      assertNotNull(associator0);
      
      TestInstances testInstances0 = new TestInstances();
      assertEquals((-1), TestInstances.CLASS_IS_LAST);
      assertEquals((-2), TestInstances.NO_CLASS);
      assertEquals(2, testInstances0.getNumAttributes());
      assertEquals(2, testInstances0.getNumClasses());
      assertEquals(0, testInstances0.getNumNumeric());
      assertEquals(0, testInstances0.getNumString());
      assertEquals(0, testInstances0.getNumRelationalDate());
      assertEquals(0, testInstances0.getNumRelational());
      assertEquals(1, testInstances0.getNumRelationalNominal());
      assertEquals(10, testInstances0.getNumInstancesRelational());
      assertFalse(testInstances0.getMultiInstance());
      assertEquals(1, testInstances0.getSeed());
      assertEquals(2, testInstances0.getNumNominalValues());
      assertEquals(0, testInstances0.getNumDate());
      assertEquals(20, testInstances0.getNumInstances());
      assertEquals(0, testInstances0.getNumRelationalString());
      assertEquals(1, testInstances0.getNumNominal());
      assertEquals(" ", testInstances0.getWordSeparators());
      assertEquals(0, testInstances0.getNumRelationalNumeric());
      assertEquals("Testdata", testInstances0.getRelation());
      assertEquals(1, testInstances0.getClassType());
      assertEquals((-1), testInstances0.getClassIndex());
      assertEquals(2, testInstances0.getNumRelationalNominalValues());
      assertFalse(testInstances0.getNoClass());
      assertNotNull(testInstances0);
      
      Instances instances0 = testInstances0.generate("~z");
      assertEquals((-1), TestInstances.CLASS_IS_LAST);
      assertEquals((-2), TestInstances.NO_CLASS);
      assertEquals(2, testInstances0.getNumAttributes());
      assertEquals(2, testInstances0.getNumClasses());
      assertEquals(0, testInstances0.getNumNumeric());
      assertEquals(0, testInstances0.getNumString());
      assertEquals(0, testInstances0.getNumRelationalDate());
      assertEquals(0, testInstances0.getNumRelational());
      assertEquals(1, testInstances0.getNumRelationalNominal());
      assertEquals(10, testInstances0.getNumInstancesRelational());
      assertFalse(testInstances0.getMultiInstance());
      assertEquals(1, testInstances0.getSeed());
      assertEquals(2, testInstances0.getNumNominalValues());
      assertEquals(0, testInstances0.getNumDate());
      assertEquals(20, testInstances0.getNumInstances());
      assertEquals(0, testInstances0.getNumRelationalString());
      assertEquals(1, testInstances0.getNumNominal());
      assertEquals(" ", testInstances0.getWordSeparators());
      assertEquals(0, testInstances0.getNumRelationalNumeric());
      assertEquals("Testdata", testInstances0.getRelation());
      assertEquals(1, testInstances0.getClassType());
      assertEquals((-1), testInstances0.getClassIndex());
      assertEquals(2, testInstances0.getNumRelationalNominalValues());
      assertFalse(testInstances0.getNoClass());
      assertEquals(1, instances0.classIndex());
      assertEquals(20, instances0.numInstances());
      assertEquals(20, instances0.size());
      assertFalse(instances0.checkForStringAttributes());
      assertEquals(20.0, instances0.sumOfWeights(), 0.01);
      assertEquals(2, instances0.numAttributes());
      assertEquals("Testdata", instances0.relationName());
      assertEquals(2, instances0.numClasses());
      assertNotNull(instances0);
      
      OptionHandlerJavadoc optionHandlerJavadoc0 = new OptionHandlerJavadoc();
      assertTrue(optionHandlerJavadoc0.getUseStars());
      assertTrue(optionHandlerJavadoc0.getProlog());
      assertEquals("weka.core.Javadoc", optionHandlerJavadoc0.getClassname());
      assertFalse(optionHandlerJavadoc0.getSilent());
      assertEquals("", optionHandlerJavadoc0.getDir());
      assertNotNull(optionHandlerJavadoc0);
      
      TrainingSetEvent trainingSetEvent0 = new TrainingSetEvent(optionHandlerJavadoc0, instances0, (-2), (-1), (-1), (-1));
      assertEquals((-1), TestInstances.CLASS_IS_LAST);
      assertEquals((-2), TestInstances.NO_CLASS);
      assertEquals(2, testInstances0.getNumAttributes());
      assertEquals(2, testInstances0.getNumClasses());
      assertEquals(0, testInstances0.getNumNumeric());
      assertEquals(0, testInstances0.getNumString());
      assertEquals(0, testInstances0.getNumRelationalDate());
      assertEquals(0, testInstances0.getNumRelational());
      assertEquals(1, testInstances0.getNumRelationalNominal());
      assertEquals(10, testInstances0.getNumInstancesRelational());
      assertFalse(testInstances0.getMultiInstance());
      assertEquals(1, testInstances0.getSeed());
      assertEquals(2, testInstances0.getNumNominalValues());
      assertEquals(0, testInstances0.getNumDate());
      assertEquals(20, testInstances0.getNumInstances());
      assertEquals(0, testInstances0.getNumRelationalString());
      assertEquals(1, testInstances0.getNumNominal());
      assertEquals(" ", testInstances0.getWordSeparators());
      assertEquals(0, testInstances0.getNumRelationalNumeric());
      assertEquals("Testdata", testInstances0.getRelation());
      assertEquals(1, testInstances0.getClassType());
      assertEquals((-1), testInstances0.getClassIndex());
      assertEquals(2, testInstances0.getNumRelationalNominalValues());
      assertFalse(testInstances0.getNoClass());
      assertEquals(1, instances0.classIndex());
      assertEquals(20, instances0.numInstances());
      assertEquals(20, instances0.size());
      assertFalse(instances0.checkForStringAttributes());
      assertEquals(20.0, instances0.sumOfWeights(), 0.01);
      assertEquals(2, instances0.numAttributes());
      assertEquals("Testdata", instances0.relationName());
      assertEquals(2, instances0.numClasses());
      assertTrue(optionHandlerJavadoc0.getUseStars());
      assertTrue(optionHandlerJavadoc0.getProlog());
      assertEquals("weka.core.Javadoc", optionHandlerJavadoc0.getClassname());
      assertFalse(optionHandlerJavadoc0.getSilent());
      assertEquals("", optionHandlerJavadoc0.getDir());
      assertEquals((-1), trainingSetEvent0.getMaxRunNumber());
      assertEquals((-1), trainingSetEvent0.getMaxSetNumber());
      assertFalse(trainingSetEvent0.isStructureOnly());
      assertEquals((-2), trainingSetEvent0.getRunNumber());
      assertEquals((-1), trainingSetEvent0.getSetNumber());
      assertNotNull(trainingSetEvent0);
      
      filter0.acceptTrainingSet(trainingSetEvent0);
      assertEquals((-1), TestInstances.CLASS_IS_LAST);
      assertEquals((-2), TestInstances.NO_CLASS);
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertFalse(filter0.isFocusCycleRoot());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertFalse(filter0.getIgnoreRepaint());
      assertFalse(filter0.isBusy());
      assertEquals("AllFilter", filter0.getCustomName());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      assertEquals(2, testInstances0.getNumAttributes());
      assertEquals(2, testInstances0.getNumClasses());
      assertEquals(0, testInstances0.getNumNumeric());
      assertEquals(0, testInstances0.getNumString());
      assertEquals(0, testInstances0.getNumRelationalDate());
      assertEquals(0, testInstances0.getNumRelational());
      assertEquals(1, testInstances0.getNumRelationalNominal());
      assertEquals(10, testInstances0.getNumInstancesRelational());
      assertFalse(testInstances0.getMultiInstance());
      assertEquals(1, testInstances0.getSeed());
      assertEquals(2, testInstances0.getNumNominalValues());
      assertEquals(0, testInstances0.getNumDate());
      assertEquals(20, testInstances0.getNumInstances());
      assertEquals(0, testInstances0.getNumRelationalString());
      assertEquals(1, testInstances0.getNumNominal());
      assertEquals(" ", testInstances0.getWordSeparators());
      assertEquals(0, testInstances0.getNumRelationalNumeric());
      assertEquals("Testdata", testInstances0.getRelation());
      assertEquals(1, testInstances0.getClassType());
      assertEquals((-1), testInstances0.getClassIndex());
      assertEquals(2, testInstances0.getNumRelationalNominalValues());
      assertFalse(testInstances0.getNoClass());
      assertEquals(1, instances0.classIndex());
      assertEquals(20, instances0.numInstances());
      assertEquals(20, instances0.size());
      assertFalse(instances0.checkForStringAttributes());
      assertEquals(20.0, instances0.sumOfWeights(), 0.01);
      assertEquals(2, instances0.numAttributes());
      assertEquals("Testdata", instances0.relationName());
      assertEquals(2, instances0.numClasses());
      assertTrue(optionHandlerJavadoc0.getUseStars());
      assertTrue(optionHandlerJavadoc0.getProlog());
      assertEquals("weka.core.Javadoc", optionHandlerJavadoc0.getClassname());
      assertFalse(optionHandlerJavadoc0.getSilent());
      assertEquals("", optionHandlerJavadoc0.getDir());
      assertEquals((-1), trainingSetEvent0.getMaxRunNumber());
      assertEquals((-1), trainingSetEvent0.getMaxSetNumber());
      assertFalse(trainingSetEvent0.isStructureOnly());
      assertEquals((-2), trainingSetEvent0.getRunNumber());
      assertEquals((-1), trainingSetEvent0.getSetNumber());
      
      filter0.useDefaultVisual();
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertFalse(filter0.isFocusCycleRoot());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertFalse(filter0.getIgnoreRepaint());
      assertFalse(filter0.isBusy());
      assertEquals("AllFilter", filter0.getCustomName());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      
      boolean boolean0 = filter0.isBusy();
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertFalse(filter0.isFocusCycleRoot());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertFalse(filter0.getIgnoreRepaint());
      assertFalse(filter0.isBusy());
      assertEquals("AllFilter", filter0.getCustomName());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      assertFalse(boolean0);
      
      filter0.addTrainingSetListener(associator0);
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertFalse(filter0.isFocusCycleRoot());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertFalse(filter0.getIgnoreRepaint());
      assertFalse(filter0.isBusy());
      assertEquals("AllFilter", filter0.getCustomName());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      assertTrue(associator0.getFocusTraversalKeysEnabled());
      assertEquals("<html><font color=blue>Class implementing an Apriori-type algorithm</font><br><br> Iteratively reduces the minimum support until it finds the required number of rules with the given minimum confidence.<br>The algorithm has an option to mine class association rules.<br>It is adapted as explained in the second reference.<br><br>For more information see:<br><br>R.<br>Agrawal, R.<br>Srikant: Fast Algorithms for Mining Association Rules in Large Databases.<br>In: 20th International Conference on Very Large Data Bases, 478-499, 1994.<br><br>Bing Liu, Wynne Hsu, Yiming Ma: Integrating Classification and Association Rule Mining.<br>In: Fourth International Conference on Knowledge Discovery and Data Mining, 80-86, 1998.<br></html>", associator0.globalInfo());
      assertEquals("Apriori", associator0.getCustomName());
      assertFalse(associator0.isFocusCycleRoot());
      assertFalse(associator0.isFocusTraversalPolicyProvider());
      assertFalse(associator0.isBusy());
      assertFalse(associator0.getIgnoreRepaint());
      assertFalse(associator0.isFocusTraversalPolicySet());
      
      PredictionAppender predictionAppender0 = new PredictionAppender();
      assertEquals("append probabilities rather than labels for discrete class predictions", predictionAppender0.appendPredictedProbabilitiesTipText());
      assertFalse(predictionAppender0.isFocusTraversalPolicySet());
      assertTrue(predictionAppender0.getFocusTraversalKeysEnabled());
      assertEquals("Accepts batch or incremental classifier events and produces a new data set with classifier predictions appended.", predictionAppender0.globalInfo());
      assertFalse(predictionAppender0.getAppendPredictedProbabilities());
      assertFalse(predictionAppender0.getIgnoreRepaint());
      assertEquals("PredictionAppender", predictionAppender0.getCustomName());
      assertFalse(predictionAppender0.isFocusTraversalPolicyProvider());
      assertFalse(predictionAppender0.isFocusCycleRoot());
      assertFalse(predictionAppender0.isBusy());
      assertNotNull(predictionAppender0);
      
      Instances.main(testInstances0.DEFAULT_WORDS);
      assertEquals((-1), TestInstances.CLASS_IS_LAST);
      assertEquals((-2), TestInstances.NO_CLASS);
      assertEquals(2, testInstances0.getNumAttributes());
      assertEquals(2, testInstances0.getNumClasses());
      assertEquals(0, testInstances0.getNumNumeric());
      assertEquals(0, testInstances0.getNumString());
      assertEquals(0, testInstances0.getNumRelationalDate());
      assertEquals(0, testInstances0.getNumRelational());
      assertEquals(1, testInstances0.getNumRelationalNominal());
      assertEquals(10, testInstances0.getNumInstancesRelational());
      assertFalse(testInstances0.getMultiInstance());
      assertEquals(1, testInstances0.getSeed());
      assertEquals(2, testInstances0.getNumNominalValues());
      assertEquals(0, testInstances0.getNumDate());
      assertEquals(20, testInstances0.getNumInstances());
      assertEquals(0, testInstances0.getNumRelationalString());
      assertEquals(1, testInstances0.getNumNominal());
      assertEquals(" ", testInstances0.getWordSeparators());
      assertEquals(0, testInstances0.getNumRelationalNumeric());
      assertEquals("Testdata", testInstances0.getRelation());
      assertEquals(1, testInstances0.getClassType());
      assertEquals((-1), testInstances0.getClassIndex());
      assertEquals(2, testInstances0.getNumRelationalNominalValues());
      assertFalse(testInstances0.getNoClass());
      
      AllFilter allFilter0 = (AllFilter)filter0.getWrappedAlgorithm();
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertFalse(filter0.isFocusCycleRoot());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertFalse(filter0.getIgnoreRepaint());
      assertFalse(filter0.isBusy());
      assertEquals("AllFilter", filter0.getCustomName());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      assertTrue(allFilter0.isFirstBatchDone());
      assertTrue(allFilter0.isNewBatch());
      assertFalse(allFilter0.mayRemoveInstanceAfterFirstBatchDone());
      assertTrue(allFilter0.isOutputFormatDefined());
      assertEquals("An instance filter that passes all instances through unmodified. Primarily for testing purposes.", allFilter0.globalInfo());
      assertNotNull(allFilter0);
      
      SubstringReplacer substringReplacer0 = new SubstringReplacer();
      assertFalse(substringReplacer0.getIgnoreRepaint());
      assertEquals("Replaces substrings in String attribute values using either literal match and replace or regular expression matching. The attributesto apply the match and replace rules to can be selected via a range string (e.g 1-5,6,last) or by a comma separated list of attribute names (/first and /last can be used to indicate the first and last attribute respectively)", substringReplacer0.globalInfo());
      assertEquals("SubstringReplacer", substringReplacer0.getCustomName());
      assertFalse(substringReplacer0.isBusy());
      assertFalse(substringReplacer0.isFocusTraversalPolicyProvider());
      assertEquals("", substringReplacer0.getMatchReplaceDetails());
      assertFalse(substringReplacer0.isFocusCycleRoot());
      assertTrue(substringReplacer0.getFocusTraversalKeysEnabled());
      assertFalse(substringReplacer0.isFocusTraversalPolicySet());
      assertNotNull(substringReplacer0);
      
      filter0.addConfigurationListener((ConfigurationListener) null);
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertFalse(filter0.isFocusCycleRoot());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertFalse(filter0.getIgnoreRepaint());
      assertFalse(filter0.isBusy());
      assertEquals("AllFilter", filter0.getCustomName());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      
      Appender appender0 = new Appender();
      assertFalse(appender0.isFocusCycleRoot());
      assertFalse(appender0.isFocusTraversalPolicyProvider());
      assertFalse(appender0.getIgnoreRepaint());
      assertFalse(appender0.isFocusTraversalPolicySet());
      assertTrue(appender0.getFocusTraversalKeysEnabled());
      assertFalse(appender0.isBusy());
      assertEquals("Appender", appender0.getCustomName());
      assertNotNull(appender0);
      
      AllFilter allFilter1 = new AllFilter();
      assertEquals("An instance filter that passes all instances through unmodified. Primarily for testing purposes.", allFilter1.globalInfo());
      assertTrue(allFilter1.isNewBatch());
      assertFalse(allFilter1.mayRemoveInstanceAfterFirstBatchDone());
      assertFalse(allFilter1.isOutputFormatDefined());
      assertFalse(allFilter1.isFirstBatchDone());
      assertFalse(allFilter1.equals((Object)allFilter0));
      assertNotNull(allFilter1);
      
      Saver saver0 = new Saver();
      assertFalse(saver0.isFocusCycleRoot());
      assertFalse(saver0.isFocusTraversalPolicySet());
      assertEquals("ArffSaver", saver0.getCustomName());
      assertFalse(saver0.isFocusTraversalPolicyProvider());
      assertEquals("<html><font color=blue>Writes to a destination that is in arff (attribute relation file format) format</font><br><br> The data can be compressed with gzip in order to save space.<br></html>", saver0.globalInfo());
      assertFalse(saver0.isBusy());
      assertFalse(saver0.getIgnoreRepaint());
      assertTrue(saver0.getFocusTraversalKeysEnabled());
      assertTrue(saver0.getRelationNameForFilename());
      assertNotNull(saver0);
      
      saver0.setLocation((-1), (-2));
      assertFalse(saver0.isFocusCycleRoot());
      assertFalse(saver0.isFocusTraversalPolicySet());
      assertEquals("ArffSaver", saver0.getCustomName());
      assertFalse(saver0.isFocusTraversalPolicyProvider());
      assertEquals("<html><font color=blue>Writes to a destination that is in arff (attribute relation file format) format</font><br><br> The data can be compressed with gzip in order to save space.<br></html>", saver0.globalInfo());
      assertFalse(saver0.isBusy());
      assertFalse(saver0.getIgnoreRepaint());
      assertTrue(saver0.getFocusTraversalKeysEnabled());
      assertTrue(saver0.getRelationNameForFilename());
      
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertFalse(textDirectoryLoader0.getDebug());
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertEquals("", textDirectoryLoader0.getCharSet());
      assertNotNull(textDirectoryLoader0);
      
      Instances instances1 = textDirectoryLoader0.getStructure();
      assertNotSame(instances1, instances0);
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertFalse(textDirectoryLoader0.getDebug());
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertEquals("", textDirectoryLoader0.getCharSet());
      assertEquals(1, instances1.classIndex());
      assertEquals(0, instances1.numClasses());
      assertEquals(0, instances1.size());
      assertEquals(0.0, instances1.sumOfWeights(), 0.01);
      assertTrue(instances1.checkForStringAttributes());
      assertEquals(2, instances1.numAttributes());
      assertEquals(0, instances1.numInstances());
      assertEquals("_mnt_gaiagpfs_users_homedirs_apanichella_Evosuite_performance_Dataset_gordon_script_sum_projects_9_weka", instances1.relationName());
      assertFalse(instances1.equals((Object)instances0));
      assertNotNull(instances1);
      
      textDirectoryLoader0.setCharSet(", alpha=");
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertFalse(textDirectoryLoader0.getDebug());
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertEquals(", alpha=", textDirectoryLoader0.getCharSet());
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertFalse(textDirectoryLoader0.getOutputFilename());
      
      MockMinguoDate mockMinguoDate0 = new MockMinguoDate();
      assertNotNull(mockMinguoDate0);
      
      TestSetEvent testSetEvent0 = new TestSetEvent(mockMinguoDate0, instances1, (-1), (-2));
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertFalse(textDirectoryLoader0.getDebug());
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertEquals(", alpha=", textDirectoryLoader0.getCharSet());
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertEquals(1, instances1.classIndex());
      assertEquals(0, instances1.numClasses());
      assertEquals(0, instances1.size());
      assertEquals(0.0, instances1.sumOfWeights(), 0.01);
      assertTrue(instances1.checkForStringAttributes());
      assertEquals(2, instances1.numAttributes());
      assertEquals(0, instances1.numInstances());
      assertEquals("_mnt_gaiagpfs_users_homedirs_apanichella_Evosuite_performance_Dataset_gordon_script_sum_projects_9_weka", instances1.relationName());
      assertEquals(1, testSetEvent0.getRunNumber());
      assertEquals((-2), testSetEvent0.getMaxSetNumber());
      assertEquals(1, testSetEvent0.getMaxRunNumber());
      assertTrue(testSetEvent0.isStructureOnly());
      assertEquals((-1), testSetEvent0.getSetNumber());
      assertFalse(instances1.equals((Object)instances0));
      assertNotNull(testSetEvent0);
      
      filter0.acceptTestSet(testSetEvent0);
      assertNotSame(instances1, instances0);
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertFalse(filter0.isFocusCycleRoot());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertFalse(filter0.getIgnoreRepaint());
      assertFalse(filter0.isBusy());
      assertEquals("AllFilter", filter0.getCustomName());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertFalse(textDirectoryLoader0.getDebug());
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertEquals(", alpha=", textDirectoryLoader0.getCharSet());
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertEquals(1, instances1.classIndex());
      assertEquals(0, instances1.numClasses());
      assertEquals(0, instances1.size());
      assertEquals(0.0, instances1.sumOfWeights(), 0.01);
      assertTrue(instances1.checkForStringAttributes());
      assertEquals(2, instances1.numAttributes());
      assertEquals(0, instances1.numInstances());
      assertEquals("_mnt_gaiagpfs_users_homedirs_apanichella_Evosuite_performance_Dataset_gordon_script_sum_projects_9_weka", instances1.relationName());
      assertEquals(1, testSetEvent0.getRunNumber());
      assertEquals((-2), testSetEvent0.getMaxSetNumber());
      assertEquals(1, testSetEvent0.getMaxRunNumber());
      assertTrue(testSetEvent0.isStructureOnly());
      assertEquals((-1), testSetEvent0.getSetNumber());
      assertFalse(instances1.equals((Object)instances0));
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Filter filter0 = new Filter();
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertFalse(filter0.isBusy());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertFalse(filter0.isFocusCycleRoot());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertFalse(filter0.getIgnoreRepaint());
      assertEquals("AllFilter", filter0.getCustomName());
      assertNotNull(filter0);
      
      boolean boolean0 = filter0.eventGeneratable("configuration");
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertFalse(filter0.isBusy());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertFalse(filter0.isFocusCycleRoot());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertFalse(filter0.getIgnoreRepaint());
      assertEquals("AllFilter", filter0.getCustomName());
      assertTrue(boolean0);
      
      RenderingHints renderingHints0 = new RenderingHints((Map<RenderingHints.Key, ?>) null);
      assertTrue(renderingHints0.isEmpty());
      assertEquals(0, renderingHints0.size());
      assertNotNull(renderingHints0);
      
      AffineTransformOp affineTransformOp0 = null;
      try {
        affineTransformOp0 = new AffineTransformOp((AffineTransform) null, renderingHints0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.image.AffineTransformOp", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Filter filter0 = new Filter();
      assertEquals("AllFilter", filter0.getCustomName());
      assertFalse(filter0.isBusy());
      assertFalse(filter0.getIgnoreRepaint());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      assertFalse(filter0.isFocusCycleRoot());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertNotNull(filter0);
      
      FlowByExpression flowByExpression0 = new FlowByExpression();
      assertFalse(flowByExpression0.isFocusCycleRoot());
      assertEquals("Splits incoming instances (or instance stream) according to the evaluation of a logical expression. The expression can test the values of one or more incoming attributes. The test can involve constants or comparing one attribute's values to another. Inequalities along with string operations such as contains, starts-with, ends-with and regular expressions may be used as operators. \"True\" instances can be sent to one downstream step and \"False\" instances sent to another.", flowByExpression0.globalInfo());
      assertFalse(flowByExpression0.isFocusTraversalPolicySet());
      assertEquals("", flowByExpression0.getFalseStepName());
      assertTrue(flowByExpression0.getFocusTraversalKeysEnabled());
      assertEquals("FlowByExpression", flowByExpression0.getCustomName());
      assertFalse(flowByExpression0.getIgnoreRepaint());
      assertEquals("", flowByExpression0.getExpressionString());
      assertEquals("", flowByExpression0.getTrueStepName());
      assertFalse(flowByExpression0.isBusy());
      assertFalse(flowByExpression0.isFocusTraversalPolicyProvider());
      assertNotNull(flowByExpression0);
      
      filter0.connectionNotification("s&Ivs", flowByExpression0);
      assertEquals("AllFilter", filter0.getCustomName());
      assertFalse(filter0.isBusy());
      assertFalse(filter0.getIgnoreRepaint());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      assertFalse(filter0.isFocusCycleRoot());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertFalse(flowByExpression0.isFocusCycleRoot());
      assertEquals("Splits incoming instances (or instance stream) according to the evaluation of a logical expression. The expression can test the values of one or more incoming attributes. The test can involve constants or comparing one attribute's values to another. Inequalities along with string operations such as contains, starts-with, ends-with and regular expressions may be used as operators. \"True\" instances can be sent to one downstream step and \"False\" instances sent to another.", flowByExpression0.globalInfo());
      assertFalse(flowByExpression0.isFocusTraversalPolicySet());
      assertEquals("", flowByExpression0.getFalseStepName());
      assertTrue(flowByExpression0.getFocusTraversalKeysEnabled());
      assertEquals("FlowByExpression", flowByExpression0.getCustomName());
      assertFalse(flowByExpression0.getIgnoreRepaint());
      assertEquals("", flowByExpression0.getExpressionString());
      assertEquals("", flowByExpression0.getTrueStepName());
      assertFalse(flowByExpression0.isBusy());
      assertFalse(flowByExpression0.isFocusTraversalPolicyProvider());
      
      boolean boolean0 = filter0.eventGeneratable("XeK4voBjdZ1> ([1");
      assertEquals("AllFilter", filter0.getCustomName());
      assertFalse(filter0.isBusy());
      assertFalse(filter0.getIgnoreRepaint());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      assertFalse(filter0.isFocusCycleRoot());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertFalse(boolean0);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "configuration";
      ClassOrder.main(stringArray0);
      Associator associator0 = new Associator();
      assertFalse(associator0.isFocusCycleRoot());
      assertFalse(associator0.isFocusTraversalPolicySet());
      assertFalse(associator0.isBusy());
      assertFalse(associator0.isFocusTraversalPolicyProvider());
      assertEquals("<html><font color=blue>Class implementing an Apriori-type algorithm</font><br><br> Iteratively reduces the minimum support until it finds the required number of rules with the given minimum confidence.<br>The algorithm has an option to mine class association rules.<br>It is adapted as explained in the second reference.<br><br>For more information see:<br><br>R.<br>Agrawal, R.<br>Srikant: Fast Algorithms for Mining Association Rules in Large Databases.<br>In: 20th International Conference on Very Large Data Bases, 478-499, 1994.<br><br>Bing Liu, Wynne Hsu, Yiming Ma: Integrating Classification and Association Rule Mining.<br>In: Fourth International Conference on Knowledge Discovery and Data Mining, 80-86, 1998.<br></html>", associator0.globalInfo());
      assertEquals("Apriori", associator0.getCustomName());
      assertFalse(associator0.getIgnoreRepaint());
      assertTrue(associator0.getFocusTraversalKeysEnabled());
      assertNotNull(associator0);
      
      Loader loader0 = new Loader();
      assertFalse(loader0.isBusy());
      assertFalse(loader0.isFocusTraversalPolicySet());
      assertEquals("ArffLoader", loader0.getCustomName());
      assertEquals("<html><font color=blue>Reads a source that is in arff (attribute relation file format) format</font> <br></html>", loader0.globalInfo());
      assertFalse(loader0.isFocusCycleRoot());
      assertFalse(loader0.isFocusTraversalPolicyProvider());
      assertFalse(loader0.getIgnoreRepaint());
      assertTrue(loader0.getFocusTraversalKeysEnabled());
      assertNotNull(loader0);
      
      CSVLoader cSVLoader0 = new CSVLoader();
      assertEquals("The format to use for parsing date values.", cSVLoader0.dateFormatTipText());
      assertEquals("The characters to use as enclosures for strings. E.g. \",'", cSVLoader0.enclosureCharactersTipText());
      assertEquals("The range of attributes to force to be of type NOMINAL, example ranges: 'first-last', '1,4,7-14,50-last'.", cSVLoader0.nominalAttributesTipText());
      assertEquals("Use relative rather than absolute paths", cSVLoader0.useRelativePathTipText());
      assertEquals(".csv", cSVLoader0.getFileExtension());
      assertEquals("The range of attributes to force to type STRING, example ranges: 'first-last', '1,4,7-14, 50-last'.", cSVLoader0.dateAttributesTipText());
      assertEquals("", cSVLoader0.getDateFormat());
      assertEquals("Reads a source that is in comma separated format (the default). One can also change the column separator from comma to tab or another character. Assumes that the first row in the file determines the number of and names of the attributes.", cSVLoader0.globalInfo());
      assertEquals("The placeholder for missing values, default is '?'.", cSVLoader0.missingValueTipText());
      assertEquals("The character to use as separator for the columns/fields (use '\\t' for TAB).", cSVLoader0.fieldSeparatorTipText());
      assertEquals("The range of attributes to force to be of type STRING, example ranges: 'first-last', '1,4,7-14,50-last'.", cSVLoader0.stringAttributesTipText());
      assertFalse(cSVLoader0.getNoHeaderRowPresent());
      assertEquals("?", cSVLoader0.getMissingValue());
      assertEquals("CSV data files", cSVLoader0.getFileDescription());
      assertEquals("First row of data does not contain attribute names", cSVLoader0.noHeaderRowPresentTipText());
      assertEquals("\",'", cSVLoader0.getEnclosureCharacters());
      assertFalse(cSVLoader0.getUseRelativePath());
      assertNotNull(cSVLoader0);
      
      filter0.useDefaultVisual();
      assertEquals("AllFilter", filter0.getCustomName());
      assertFalse(filter0.isBusy());
      assertFalse(filter0.getIgnoreRepaint());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      assertFalse(filter0.isFocusCycleRoot());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      
      String string0 = filter0.globalInfo();
      assertEquals("AllFilter", filter0.getCustomName());
      assertFalse(filter0.isBusy());
      assertFalse(filter0.getIgnoreRepaint());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      assertFalse(filter0.isFocusCycleRoot());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertNotNull(string0);
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", string0);
      
      ConfigurationListener configurationListener0 = mock(ConfigurationListener.class, new ViolatedAssumptionAnswer());
      filter0.addConfigurationListener(configurationListener0);
      assertEquals("AllFilter", filter0.getCustomName());
      assertFalse(filter0.isBusy());
      assertFalse(filter0.getIgnoreRepaint());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      assertFalse(filter0.isFocusCycleRoot());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      
      AttributeSummarizer attributeSummarizer0 = new AttributeSummarizer();
      assertEquals(100, attributeSummarizer0.getMaxPlots());
      assertEquals("", attributeSummarizer0.getOffscreenYAxis());
      assertEquals("400", attributeSummarizer0.getOffscreenHeight());
      assertFalse(attributeSummarizer0.isFocusCycleRoot());
      assertEquals("", attributeSummarizer0.getOffscreenAdditionalOpts());
      assertFalse(attributeSummarizer0.isFocusTraversalPolicyProvider());
      assertEquals("Plot summary bar charts for incoming data/training/test sets.", attributeSummarizer0.globalInfo());
      assertEquals("Weka Chart Renderer", attributeSummarizer0.getOffscreenRendererName());
      assertEquals(4, attributeSummarizer0.getGridWidth());
      assertEquals("AttributeSummarizer", attributeSummarizer0.getCustomName());
      assertTrue(attributeSummarizer0.getFocusTraversalKeysEnabled());
      assertTrue(attributeSummarizer0.acceptsInstances());
      assertEquals("", attributeSummarizer0.getOffscreenXAxis());
      assertEquals("500", attributeSummarizer0.getOffscreenWidth());
      assertEquals("Attribute summary", attributeSummarizer0.getPerspectiveTitle());
      assertFalse(attributeSummarizer0.isBusy());
      assertFalse(attributeSummarizer0.getIgnoreRepaint());
      assertFalse(attributeSummarizer0.isFocusTraversalPolicySet());
      assertEquals((-1), attributeSummarizer0.getColoringIndex());
      assertEquals("Matrix of attribute summary histograms", attributeSummarizer0.getPerspectiveTipText());
      assertNotNull(attributeSummarizer0);
      
      Enumeration enumeration0 = filter0.enumerateRequests();
      assertEquals("AllFilter", filter0.getCustomName());
      assertFalse(filter0.isBusy());
      assertFalse(filter0.getIgnoreRepaint());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      assertFalse(filter0.isFocusCycleRoot());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertNotNull(enumeration0);
      
      Classifier classifier0 = new Classifier();
      assertFalse(classifier0.getBlockOnLastFold());
      assertFalse(classifier0.getResetIncrementalClassifier());
      assertTrue(classifier0.getUpdateIncrementalClassifier());
      assertFalse(classifier0.isFocusTraversalPolicyProvider());
      assertEquals("ZeroR", classifier0.getCustomName());
      assertEquals(2, classifier0.getExecutionSlots());
      assertFalse(classifier0.isFocusCycleRoot());
      assertTrue(classifier0.getFocusTraversalKeysEnabled());
      assertFalse(classifier0.getIgnoreRepaint());
      assertEquals("", classifier0.getLoadClassifierFileName());
      assertEquals("<html><font color=blue>Class for building and using a 0-R classifier</font><br><br> Predicts the mean (for a numeric class) or the mode (for a nominal class).<br></html>", classifier0.globalInfo());
      assertFalse(classifier0.hasIncomingStreamInstances());
      assertFalse(classifier0.hasIncomingBatchInstances());
      assertFalse(classifier0.isFocusTraversalPolicySet());
      assertNotNull(classifier0);
      
      Associator associator1 = new Associator();
      assertFalse(associator1.isFocusTraversalPolicySet());
      assertFalse(associator1.isFocusCycleRoot());
      assertFalse(associator1.isFocusTraversalPolicyProvider());
      assertFalse(associator1.getIgnoreRepaint());
      assertEquals("<html><font color=blue>Class implementing an Apriori-type algorithm</font><br><br> Iteratively reduces the minimum support until it finds the required number of rules with the given minimum confidence.<br>The algorithm has an option to mine class association rules.<br>It is adapted as explained in the second reference.<br><br>For more information see:<br><br>R.<br>Agrawal, R.<br>Srikant: Fast Algorithms for Mining Association Rules in Large Databases.<br>In: 20th International Conference on Very Large Data Bases, 478-499, 1994.<br><br>Bing Liu, Wynne Hsu, Yiming Ma: Integrating Classification and Association Rule Mining.<br>In: Fourth International Conference on Knowledge Discovery and Data Mining, 80-86, 1998.<br></html>", associator1.globalInfo());
      assertFalse(associator1.isBusy());
      assertEquals("Apriori", associator1.getCustomName());
      assertTrue(associator1.getFocusTraversalKeysEnabled());
      assertFalse(associator1.equals((Object)associator0));
      assertNotNull(associator1);
      
      filter0.acceptInstance((InstanceEvent) null);
      assertEquals("AllFilter", filter0.getCustomName());
      assertFalse(filter0.isBusy());
      assertFalse(filter0.getIgnoreRepaint());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      assertFalse(filter0.isFocusCycleRoot());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      
      Filter filter1 = new Filter();
      assertEquals("AllFilter", filter1.getCustomName());
      assertTrue(filter1.getFocusTraversalKeysEnabled());
      assertFalse(filter1.isFocusTraversalPolicySet());
      assertFalse(filter1.getIgnoreRepaint());
      assertFalse(filter1.isFocusTraversalPolicyProvider());
      assertFalse(filter1.isFocusCycleRoot());
      assertFalse(filter1.isBusy());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter1.globalInfo());
      assertFalse(filter1.equals((Object)filter0));
      assertNotNull(filter1);
      
      Filter filter2 = new Filter();
      assertFalse(filter2.getIgnoreRepaint());
      assertFalse(filter2.isFocusCycleRoot());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter2.globalInfo());
      assertFalse(filter2.isFocusTraversalPolicyProvider());
      assertFalse(filter2.isBusy());
      assertFalse(filter2.isFocusTraversalPolicySet());
      assertEquals("AllFilter", filter2.getCustomName());
      assertTrue(filter2.getFocusTraversalKeysEnabled());
      assertFalse(filter2.equals((Object)filter1));
      assertFalse(filter2.equals((Object)filter0));
      assertNotNull(filter2);
      
      BeanVisual beanVisual0 = filter0.getVisual();
      assertNotSame(filter0, filter1);
      assertNotSame(filter0, filter2);
      assertEquals(3, BeanVisual.WEST_CONNECTOR);
      assertEquals(1, BeanVisual.SOUTH_CONNECTOR);
      assertEquals(0, BeanVisual.NORTH_CONNECTOR);
      assertEquals(2, BeanVisual.EAST_CONNECTOR);
      assertEquals("AllFilter", filter0.getCustomName());
      assertFalse(filter0.isBusy());
      assertFalse(filter0.getIgnoreRepaint());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      assertFalse(filter0.isFocusCycleRoot());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertEquals("AllFilter", beanVisual0.getText());
      assertEquals("weka/gui/beans/icons/DefaultFilter_animated.gif", beanVisual0.getAnimatedIconPath());
      assertFalse(beanVisual0.isFocusCycleRoot());
      assertFalse(beanVisual0.isFocusTraversalPolicyProvider());
      assertFalse(beanVisual0.getIgnoreRepaint());
      assertFalse(beanVisual0.isFocusTraversalPolicySet());
      assertEquals("weka/gui/beans/icons/DefaultFilter.gif", beanVisual0.getIconPath());
      assertTrue(beanVisual0.getFocusTraversalKeysEnabled());
      assertFalse(filter0.equals((Object)filter1));
      assertFalse(filter0.equals((Object)filter2));
      assertNotNull(beanVisual0);
      
      CSVLoader cSVLoader1 = new CSVLoader();
      assertEquals("The character to use as separator for the columns/fields (use '\\t' for TAB).", cSVLoader1.fieldSeparatorTipText());
      assertEquals("The format to use for parsing date values.", cSVLoader1.dateFormatTipText());
      assertEquals("Reads a source that is in comma separated format (the default). One can also change the column separator from comma to tab or another character. Assumes that the first row in the file determines the number of and names of the attributes.", cSVLoader1.globalInfo());
      assertEquals("", cSVLoader1.getDateFormat());
      assertEquals("Use relative rather than absolute paths", cSVLoader1.useRelativePathTipText());
      assertEquals(".csv", cSVLoader1.getFileExtension());
      assertEquals("The range of attributes to force to be of type STRING, example ranges: 'first-last', '1,4,7-14,50-last'.", cSVLoader1.stringAttributesTipText());
      assertEquals("The range of attributes to force to type STRING, example ranges: 'first-last', '1,4,7-14, 50-last'.", cSVLoader1.dateAttributesTipText());
      assertEquals("CSV data files", cSVLoader1.getFileDescription());
      assertEquals("The characters to use as enclosures for strings. E.g. \",'", cSVLoader1.enclosureCharactersTipText());
      assertFalse(cSVLoader1.getNoHeaderRowPresent());
      assertEquals("The range of attributes to force to be of type NOMINAL, example ranges: 'first-last', '1,4,7-14,50-last'.", cSVLoader1.nominalAttributesTipText());
      assertEquals("The placeholder for missing values, default is '?'.", cSVLoader1.missingValueTipText());
      assertEquals("?", cSVLoader1.getMissingValue());
      assertEquals("First row of data does not contain attribute names", cSVLoader1.noHeaderRowPresentTipText());
      assertEquals("\",'", cSVLoader1.getEnclosureCharacters());
      assertFalse(cSVLoader1.getUseRelativePath());
      assertFalse(cSVLoader1.equals((Object)cSVLoader0));
      assertNotNull(cSVLoader1);
      
      CSVLoader cSVLoader2 = new CSVLoader();
      assertEquals("The placeholder for missing values, default is '?'.", cSVLoader2.missingValueTipText());
      assertEquals("The character to use as separator for the columns/fields (use '\\t' for TAB).", cSVLoader2.fieldSeparatorTipText());
      assertEquals(".csv", cSVLoader2.getFileExtension());
      assertEquals("Use relative rather than absolute paths", cSVLoader2.useRelativePathTipText());
      assertEquals("CSV data files", cSVLoader2.getFileDescription());
      assertEquals("The characters to use as enclosures for strings. E.g. \",'", cSVLoader2.enclosureCharactersTipText());
      assertEquals("The format to use for parsing date values.", cSVLoader2.dateFormatTipText());
      assertEquals("The range of attributes to force to type STRING, example ranges: 'first-last', '1,4,7-14, 50-last'.", cSVLoader2.dateAttributesTipText());
      assertEquals("", cSVLoader2.getDateFormat());
      assertEquals("Reads a source that is in comma separated format (the default). One can also change the column separator from comma to tab or another character. Assumes that the first row in the file determines the number of and names of the attributes.", cSVLoader2.globalInfo());
      assertEquals("\",'", cSVLoader2.getEnclosureCharacters());
      assertFalse(cSVLoader2.getUseRelativePath());
      assertEquals("First row of data does not contain attribute names", cSVLoader2.noHeaderRowPresentTipText());
      assertEquals("?", cSVLoader2.getMissingValue());
      assertFalse(cSVLoader2.getNoHeaderRowPresent());
      assertEquals("The range of attributes to force to be of type NOMINAL, example ranges: 'first-last', '1,4,7-14,50-last'.", cSVLoader2.nominalAttributesTipText());
      assertEquals("The range of attributes to force to be of type STRING, example ranges: 'first-last', '1,4,7-14,50-last'.", cSVLoader2.stringAttributesTipText());
      assertFalse(cSVLoader2.equals((Object)cSVLoader0));
      assertFalse(cSVLoader2.equals((Object)cSVLoader1));
      assertNotNull(cSVLoader2);
      
      filter0.notifyInstanceListeners((InstanceEvent) null);
      assertNotSame(filter0, filter1);
      assertNotSame(filter0, filter2);
      assertEquals("AllFilter", filter0.getCustomName());
      assertFalse(filter0.isBusy());
      assertFalse(filter0.getIgnoreRepaint());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      assertFalse(filter0.isFocusCycleRoot());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertFalse(filter0.equals((Object)filter1));
      assertFalse(filter0.equals((Object)filter2));
      
      CSVLoader cSVLoader3 = new CSVLoader();
      assertEquals("\",'", cSVLoader3.getEnclosureCharacters());
      assertEquals("The character to use as separator for the columns/fields (use '\\t' for TAB).", cSVLoader3.fieldSeparatorTipText());
      assertEquals("The range of attributes to force to be of type NOMINAL, example ranges: 'first-last', '1,4,7-14,50-last'.", cSVLoader3.nominalAttributesTipText());
      assertEquals("", cSVLoader3.getDateFormat());
      assertEquals("Reads a source that is in comma separated format (the default). One can also change the column separator from comma to tab or another character. Assumes that the first row in the file determines the number of and names of the attributes.", cSVLoader3.globalInfo());
      assertEquals("The format to use for parsing date values.", cSVLoader3.dateFormatTipText());
      assertEquals("The range of attributes to force to type STRING, example ranges: 'first-last', '1,4,7-14, 50-last'.", cSVLoader3.dateAttributesTipText());
      assertFalse(cSVLoader3.getNoHeaderRowPresent());
      assertEquals("The range of attributes to force to be of type STRING, example ranges: 'first-last', '1,4,7-14,50-last'.", cSVLoader3.stringAttributesTipText());
      assertEquals(".csv", cSVLoader3.getFileExtension());
      assertEquals("?", cSVLoader3.getMissingValue());
      assertFalse(cSVLoader3.getUseRelativePath());
      assertEquals("Use relative rather than absolute paths", cSVLoader3.useRelativePathTipText());
      assertEquals("First row of data does not contain attribute names", cSVLoader3.noHeaderRowPresentTipText());
      assertEquals("The characters to use as enclosures for strings. E.g. \",'", cSVLoader3.enclosureCharactersTipText());
      assertEquals("The placeholder for missing values, default is '?'.", cSVLoader3.missingValueTipText());
      assertEquals("CSV data files", cSVLoader3.getFileDescription());
      assertFalse(cSVLoader3.equals((Object)cSVLoader1));
      assertFalse(cSVLoader3.equals((Object)cSVLoader0));
      assertFalse(cSVLoader3.equals((Object)cSVLoader2));
      assertNotNull(cSVLoader3);
      
      try { 
        cSVLoader3.getStructure();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No source has been specified
         //
         verifyException("weka.core.converters.CSVLoader", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Filter filter0 = new Filter();
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertFalse(filter0.isBusy());
      assertFalse(filter0.isFocusCycleRoot());
      assertFalse(filter0.getIgnoreRepaint());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertEquals("AllFilter", filter0.getCustomName());
      assertNotNull(filter0);
      
      filter0.connectionNotification("io1W8#ZY*!pBieE4&(", "io1W8#ZY*!pBieE4&(");
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertFalse(filter0.isBusy());
      assertFalse(filter0.isFocusCycleRoot());
      assertFalse(filter0.getIgnoreRepaint());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertEquals("AllFilter", filter0.getCustomName());
      
      Filter filter1 = new Filter();
      assertFalse(filter1.isFocusTraversalPolicyProvider());
      assertFalse(filter1.getIgnoreRepaint());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter1.globalInfo());
      assertFalse(filter1.isFocusCycleRoot());
      assertTrue(filter1.getFocusTraversalKeysEnabled());
      assertFalse(filter1.isBusy());
      assertFalse(filter1.isFocusTraversalPolicySet());
      assertEquals("AllFilter", filter1.getCustomName());
      assertFalse(filter1.equals((Object)filter0));
      assertNotNull(filter1);
      
      boolean boolean0 = filter1.eventGeneratable("io1W8#ZY*!pBieE4&(");
      assertNotSame(filter1, filter0);
      assertFalse(filter1.isFocusTraversalPolicyProvider());
      assertFalse(filter1.getIgnoreRepaint());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter1.globalInfo());
      assertFalse(filter1.isFocusCycleRoot());
      assertTrue(filter1.getFocusTraversalKeysEnabled());
      assertFalse(filter1.isBusy());
      assertFalse(filter1.isFocusTraversalPolicySet());
      assertEquals("AllFilter", filter1.getCustomName());
      assertFalse(filter1.equals((Object)filter0));
      assertFalse(boolean0);
      
      filter0.removeDataSourceListener(filter1);
      assertNotSame(filter0, filter1);
      assertNotSame(filter1, filter0);
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertFalse(filter0.isBusy());
      assertFalse(filter0.isFocusCycleRoot());
      assertFalse(filter0.getIgnoreRepaint());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertEquals("AllFilter", filter0.getCustomName());
      assertFalse(filter1.isFocusTraversalPolicyProvider());
      assertFalse(filter1.getIgnoreRepaint());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter1.globalInfo());
      assertFalse(filter1.isFocusCycleRoot());
      assertTrue(filter1.getFocusTraversalKeysEnabled());
      assertFalse(filter1.isBusy());
      assertFalse(filter1.isFocusTraversalPolicySet());
      assertEquals("AllFilter", filter1.getCustomName());
      assertFalse(filter0.equals((Object)filter1));
      assertFalse(filter1.equals((Object)filter0));
      
      SubstringLabeler substringLabeler0 = new SubstringLabeler();
      assertFalse(substringLabeler0.getConsumeNonMatching());
      assertEquals("SubstringLabeler", substringLabeler0.getCustomName());
      assertTrue(substringLabeler0.getFocusTraversalKeysEnabled());
      assertEquals("", substringLabeler0.getMatchDetails());
      assertFalse(substringLabeler0.getNominalBinary());
      assertFalse(substringLabeler0.getIgnoreRepaint());
      assertFalse(substringLabeler0.isBusy());
      assertFalse(substringLabeler0.isFocusCycleRoot());
      assertFalse(substringLabeler0.isFocusTraversalPolicySet());
      assertEquals("Matches substrings in String attributes using either literal or regular expression matches. The value of a new attribute is set to reflect the status of the match. The new attribute can be either binary (in which case values indicate match or no match) or multi-valued nominal, in which case a label must be associated with each distinct matching rule. In the case of labeled matches, the user can opt to have non matching instances output with missing value set for the new attribute or not output at all (i.e. consumed by the step).", substringLabeler0.globalInfo());
      assertFalse(substringLabeler0.isFocusTraversalPolicyProvider());
      assertEquals("Match", substringLabeler0.getMatchAttributeName());
      assertNotNull(substringLabeler0);
      
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertEquals("", textDirectoryLoader0.getCharSet());
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertFalse(textDirectoryLoader0.getDebug());
      assertNotNull(textDirectoryLoader0);
      
      String[] stringArray0 = textDirectoryLoader0.getOptions();
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertEquals("", textDirectoryLoader0.getCharSet());
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertFalse(textDirectoryLoader0.getDebug());
      assertNotNull(stringArray0);
      
      boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      filter0.connectionNotification("io1W8#ZY*!pBieE4&(", textDirectoryLoader0);
      assertNotSame(filter0, filter1);
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertFalse(filter0.isBusy());
      assertFalse(filter0.isFocusCycleRoot());
      assertFalse(filter0.getIgnoreRepaint());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertEquals("AllFilter", filter0.getCustomName());
      assertEquals("The character set to use when reading text files (eg UTF-8) - leave blank to use the default character set.", textDirectoryLoader0.charSetTipText());
      assertEquals("Directories", textDirectoryLoader0.getFileDescription());
      assertEquals("Whether to print additional debug information to the console.", textDirectoryLoader0.debugTipText());
      assertEquals("Whether to store the filename in an additional attribute.", textDirectoryLoader0.outputFilenameTipText());
      assertEquals("Loads all text files in a directory and uses the subdirectory names as class labels. The content of the text files will be stored in a String attribute, the filename can be stored as well.", textDirectoryLoader0.globalInfo());
      assertEquals("", textDirectoryLoader0.getCharSet());
      assertFalse(textDirectoryLoader0.getOutputFilename());
      assertFalse(textDirectoryLoader0.getDebug());
      assertFalse(filter0.equals((Object)filter1));
      
      boolean boolean2 = filter1.eventGeneratable("qf=ax 0::RN.-_");
      assertNotSame(filter1, filter0);
      assertFalse(filter1.isFocusTraversalPolicyProvider());
      assertFalse(filter1.getIgnoreRepaint());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter1.globalInfo());
      assertFalse(filter1.isFocusCycleRoot());
      assertTrue(filter1.getFocusTraversalKeysEnabled());
      assertFalse(filter1.isBusy());
      assertFalse(filter1.isFocusTraversalPolicySet());
      assertEquals("AllFilter", filter1.getCustomName());
      assertFalse(filter1.equals((Object)filter0));
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      ClassOrder classOrder0 = new ClassOrder();
      assertEquals(2, ClassOrder.RANDOM);
      assertEquals(0, ClassOrder.FREQ_ASCEND);
      assertEquals(1, ClassOrder.FREQ_DESCEND);
      assertFalse(classOrder0.mayRemoveInstanceAfterFirstBatchDone());
      assertTrue(classOrder0.isNewBatch());
      assertFalse(classOrder0.isFirstBatchDone());
      assertEquals("Changes the order of the classes so that the class values are no longer of in the order specified in the header. The values will be in the order specified by the user -- it could be either in ascending/descending order by the class frequency or in random order. Note that this filter currently does not change the header, only the class values of the instances, so there is not much point in using it in conjunction with the FilteredClassifier. The value can also be converted back using 'originalValue(double value)' procedure.", classOrder0.globalInfo());
      assertEquals(1L, classOrder0.getSeed());
      assertEquals("Specify the seed of randomization of the class order", classOrder0.seedTipText());
      assertEquals("Specify the class order after the filtering", classOrder0.classOrderTipText());
      assertFalse(classOrder0.isOutputFormatDefined());
      assertEquals(0, classOrder0.getClassOrder());
      assertNotNull(classOrder0);
      
      Associator associator0 = new Associator();
      assertFalse(associator0.isFocusTraversalPolicySet());
      assertFalse(associator0.isBusy());
      assertEquals("Apriori", associator0.getCustomName());
      assertTrue(associator0.getFocusTraversalKeysEnabled());
      assertFalse(associator0.getIgnoreRepaint());
      assertFalse(associator0.isFocusTraversalPolicyProvider());
      assertEquals("<html><font color=blue>Class implementing an Apriori-type algorithm</font><br><br> Iteratively reduces the minimum support until it finds the required number of rules with the given minimum confidence.<br>The algorithm has an option to mine class association rules.<br>It is adapted as explained in the second reference.<br><br>For more information see:<br><br>R.<br>Agrawal, R.<br>Srikant: Fast Algorithms for Mining Association Rules in Large Databases.<br>In: 20th International Conference on Very Large Data Bases, 478-499, 1994.<br><br>Bing Liu, Wynne Hsu, Yiming Ma: Integrating Classification and Association Rule Mining.<br>In: Fourth International Conference on Knowledge Discovery and Data Mining, 80-86, 1998.<br></html>", associator0.globalInfo());
      assertFalse(associator0.isFocusCycleRoot());
      assertNotNull(associator0);
      
      HierarchyBoundsListener[] hierarchyBoundsListenerArray0 = filter1.getHierarchyBoundsListeners();
      assertNotSame(filter1, filter0);
      assertFalse(filter1.isFocusTraversalPolicyProvider());
      assertFalse(filter1.getIgnoreRepaint());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter1.globalInfo());
      assertFalse(filter1.isFocusCycleRoot());
      assertTrue(filter1.getFocusTraversalKeysEnabled());
      assertFalse(filter1.isBusy());
      assertFalse(filter1.isFocusTraversalPolicySet());
      assertEquals("AllFilter", filter1.getCustomName());
      assertFalse(filter1.equals((Object)filter0));
      assertNotNull(hierarchyBoundsListenerArray0);
      
      filter1.addNotify();
      assertNotSame(filter1, filter0);
      assertFalse(filter1.isFocusTraversalPolicyProvider());
      assertFalse(filter1.getIgnoreRepaint());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter1.globalInfo());
      assertFalse(filter1.isFocusCycleRoot());
      assertTrue(filter1.getFocusTraversalKeysEnabled());
      assertFalse(filter1.isBusy());
      assertFalse(filter1.isFocusTraversalPolicySet());
      assertEquals("AllFilter", filter1.getCustomName());
      assertFalse(filter1.equals((Object)filter0));
      
      filter1.useDefaultVisual();
      assertNotSame(filter1, filter0);
      assertFalse(filter1.isFocusTraversalPolicyProvider());
      assertFalse(filter1.getIgnoreRepaint());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter1.globalInfo());
      assertFalse(filter1.isFocusCycleRoot());
      assertTrue(filter1.getFocusTraversalKeysEnabled());
      assertFalse(filter1.isBusy());
      assertFalse(filter1.isFocusTraversalPolicySet());
      assertEquals("AllFilter", filter1.getCustomName());
      assertFalse(filter1.equals((Object)filter0));
      
      Loader loader0 = new Loader();
      assertEquals("<html><font color=blue>Reads a source that is in arff (attribute relation file format) format</font> <br></html>", loader0.globalInfo());
      assertFalse(loader0.isFocusCycleRoot());
      assertTrue(loader0.getFocusTraversalKeysEnabled());
      assertFalse(loader0.isFocusTraversalPolicySet());
      assertFalse(loader0.getIgnoreRepaint());
      assertFalse(loader0.isFocusTraversalPolicyProvider());
      assertFalse(loader0.isBusy());
      assertEquals("ArffLoader", loader0.getCustomName());
      assertNotNull(loader0);
      
      float float0 = filter1.getAlignmentX();
      assertNotSame(filter1, filter0);
      assertFalse(filter1.isFocusTraversalPolicyProvider());
      assertFalse(filter1.getIgnoreRepaint());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter1.globalInfo());
      assertFalse(filter1.isFocusCycleRoot());
      assertTrue(filter1.getFocusTraversalKeysEnabled());
      assertFalse(filter1.isBusy());
      assertFalse(filter1.isFocusTraversalPolicySet());
      assertEquals("AllFilter", filter1.getCustomName());
      assertFalse(filter1.equals((Object)filter0));
      assertEquals(0.5F, float0, 0.01F);
      
      // Undeclared exception!
      try { 
        filter0.performRequest("FM;j<");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // FM;j< not supported (Filter)
         //
         verifyException("weka.gui.beans.Filter", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Filter filter0 = new Filter();
      assertFalse(filter0.isBusy());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertEquals("AllFilter", filter0.getCustomName());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertFalse(filter0.getIgnoreRepaint());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertFalse(filter0.isFocusCycleRoot());
      assertNotNull(filter0);
      
      Component[] componentArray0 = filter0.getComponents();
      assertFalse(filter0.isBusy());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertEquals("AllFilter", filter0.getCustomName());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertFalse(filter0.getIgnoreRepaint());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertFalse(filter0.isFocusCycleRoot());
      assertNotNull(componentArray0);
      
      TrainTestSplitMaker trainTestSplitMaker0 = new TrainTestSplitMaker();
      assertFalse(trainTestSplitMaker0.getIgnoreRepaint());
      assertEquals(66.0, trainTestSplitMaker0.getTrainPercent(), 0.01);
      assertFalse(trainTestSplitMaker0.isFocusTraversalPolicyProvider());
      assertEquals("Split an incoming data set into separate train and test sets.", trainTestSplitMaker0.globalInfo());
      assertEquals("The percentage of data to go into the training set", trainTestSplitMaker0.trainPercentTipText());
      assertEquals("The randomization seed", trainTestSplitMaker0.seedTipText());
      assertEquals("TrainTestSplitMaker", trainTestSplitMaker0.getCustomName());
      assertFalse(trainTestSplitMaker0.isBusy());
      assertFalse(trainTestSplitMaker0.isFocusCycleRoot());
      assertTrue(trainTestSplitMaker0.getFocusTraversalKeysEnabled());
      assertFalse(trainTestSplitMaker0.isFocusTraversalPolicySet());
      assertEquals(1, trainTestSplitMaker0.getSeed());
      assertNotNull(trainTestSplitMaker0);
      
      trainTestSplitMaker0.disconnectionNotification("Done sending data", filter0);
      assertFalse(filter0.isBusy());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertEquals("AllFilter", filter0.getCustomName());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertFalse(filter0.getIgnoreRepaint());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertFalse(filter0.isFocusCycleRoot());
      assertFalse(trainTestSplitMaker0.getIgnoreRepaint());
      assertEquals(66.0, trainTestSplitMaker0.getTrainPercent(), 0.01);
      assertFalse(trainTestSplitMaker0.isFocusTraversalPolicyProvider());
      assertEquals("Split an incoming data set into separate train and test sets.", trainTestSplitMaker0.globalInfo());
      assertEquals("The percentage of data to go into the training set", trainTestSplitMaker0.trainPercentTipText());
      assertEquals("The randomization seed", trainTestSplitMaker0.seedTipText());
      assertEquals("TrainTestSplitMaker", trainTestSplitMaker0.getCustomName());
      assertFalse(trainTestSplitMaker0.isBusy());
      assertFalse(trainTestSplitMaker0.isFocusCycleRoot());
      assertTrue(trainTestSplitMaker0.getFocusTraversalKeysEnabled());
      assertFalse(trainTestSplitMaker0.isFocusTraversalPolicySet());
      assertEquals(1, trainTestSplitMaker0.getSeed());
      
      filter0.removeTrainingSetListener(trainTestSplitMaker0);
      assertFalse(filter0.isBusy());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertEquals("AllFilter", filter0.getCustomName());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertFalse(filter0.getIgnoreRepaint());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertFalse(filter0.isFocusCycleRoot());
      assertFalse(trainTestSplitMaker0.getIgnoreRepaint());
      assertEquals(66.0, trainTestSplitMaker0.getTrainPercent(), 0.01);
      assertFalse(trainTestSplitMaker0.isFocusTraversalPolicyProvider());
      assertEquals("Split an incoming data set into separate train and test sets.", trainTestSplitMaker0.globalInfo());
      assertEquals("The percentage of data to go into the training set", trainTestSplitMaker0.trainPercentTipText());
      assertEquals("The randomization seed", trainTestSplitMaker0.seedTipText());
      assertEquals("TrainTestSplitMaker", trainTestSplitMaker0.getCustomName());
      assertFalse(trainTestSplitMaker0.isBusy());
      assertFalse(trainTestSplitMaker0.isFocusCycleRoot());
      assertTrue(trainTestSplitMaker0.getFocusTraversalKeysEnabled());
      assertFalse(trainTestSplitMaker0.isFocusTraversalPolicySet());
      assertEquals(1, trainTestSplitMaker0.getSeed());
      
      Filter filter1 = new Filter();
      assertFalse(filter1.isFocusCycleRoot());
      assertFalse(filter1.isFocusTraversalPolicyProvider());
      assertFalse(filter1.isBusy());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter1.globalInfo());
      assertTrue(filter1.getFocusTraversalKeysEnabled());
      assertEquals("AllFilter", filter1.getCustomName());
      assertFalse(filter1.getIgnoreRepaint());
      assertFalse(filter1.isFocusTraversalPolicySet());
      assertFalse(filter1.equals((Object)filter0));
      assertNotNull(filter1);
      
      String string0 = filter1.getName();
      assertNotSame(filter1, filter0);
      assertFalse(filter1.isFocusCycleRoot());
      assertFalse(filter1.isFocusTraversalPolicyProvider());
      assertFalse(filter1.isBusy());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter1.globalInfo());
      assertTrue(filter1.getFocusTraversalKeysEnabled());
      assertEquals("AllFilter", filter1.getCustomName());
      assertFalse(filter1.getIgnoreRepaint());
      assertFalse(filter1.isFocusTraversalPolicySet());
      assertFalse(filter1.equals((Object)filter0));
      assertNull(string0);
      
      filter1.removeTestSetListener(trainTestSplitMaker0);
      assertNotSame(filter1, filter0);
      assertFalse(trainTestSplitMaker0.getIgnoreRepaint());
      assertEquals(66.0, trainTestSplitMaker0.getTrainPercent(), 0.01);
      assertFalse(trainTestSplitMaker0.isFocusTraversalPolicyProvider());
      assertEquals("Split an incoming data set into separate train and test sets.", trainTestSplitMaker0.globalInfo());
      assertEquals("The percentage of data to go into the training set", trainTestSplitMaker0.trainPercentTipText());
      assertEquals("The randomization seed", trainTestSplitMaker0.seedTipText());
      assertEquals("TrainTestSplitMaker", trainTestSplitMaker0.getCustomName());
      assertFalse(trainTestSplitMaker0.isBusy());
      assertFalse(trainTestSplitMaker0.isFocusCycleRoot());
      assertTrue(trainTestSplitMaker0.getFocusTraversalKeysEnabled());
      assertFalse(trainTestSplitMaker0.isFocusTraversalPolicySet());
      assertEquals(1, trainTestSplitMaker0.getSeed());
      assertFalse(filter1.isFocusCycleRoot());
      assertFalse(filter1.isFocusTraversalPolicyProvider());
      assertFalse(filter1.isBusy());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter1.globalInfo());
      assertTrue(filter1.getFocusTraversalKeysEnabled());
      assertEquals("AllFilter", filter1.getCustomName());
      assertFalse(filter1.getIgnoreRepaint());
      assertFalse(filter1.isFocusTraversalPolicySet());
      assertFalse(filter1.equals((Object)filter0));
      
      TrainTestSplitMaker trainTestSplitMaker1 = new TrainTestSplitMaker();
      assertEquals(1, trainTestSplitMaker1.getSeed());
      assertEquals(66.0, trainTestSplitMaker1.getTrainPercent(), 0.01);
      assertFalse(trainTestSplitMaker1.isFocusTraversalPolicySet());
      assertTrue(trainTestSplitMaker1.getFocusTraversalKeysEnabled());
      assertEquals("Split an incoming data set into separate train and test sets.", trainTestSplitMaker1.globalInfo());
      assertFalse(trainTestSplitMaker1.getIgnoreRepaint());
      assertEquals("TrainTestSplitMaker", trainTestSplitMaker1.getCustomName());
      assertFalse(trainTestSplitMaker1.isBusy());
      assertFalse(trainTestSplitMaker1.isFocusCycleRoot());
      assertFalse(trainTestSplitMaker1.isFocusTraversalPolicyProvider());
      assertEquals("The percentage of data to go into the training set", trainTestSplitMaker1.trainPercentTipText());
      assertEquals("The randomization seed", trainTestSplitMaker1.seedTipText());
      assertFalse(trainTestSplitMaker1.equals((Object)trainTestSplitMaker0));
      assertNotNull(trainTestSplitMaker1);
      
      filter0.removeTestSetListener(trainTestSplitMaker0);
      assertNotSame(filter0, filter1);
      assertNotSame(trainTestSplitMaker0, trainTestSplitMaker1);
      assertFalse(filter0.isBusy());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertEquals("AllFilter", filter0.getCustomName());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertFalse(filter0.getIgnoreRepaint());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertFalse(filter0.isFocusCycleRoot());
      assertFalse(trainTestSplitMaker0.getIgnoreRepaint());
      assertEquals(66.0, trainTestSplitMaker0.getTrainPercent(), 0.01);
      assertFalse(trainTestSplitMaker0.isFocusTraversalPolicyProvider());
      assertEquals("Split an incoming data set into separate train and test sets.", trainTestSplitMaker0.globalInfo());
      assertEquals("The percentage of data to go into the training set", trainTestSplitMaker0.trainPercentTipText());
      assertEquals("The randomization seed", trainTestSplitMaker0.seedTipText());
      assertEquals("TrainTestSplitMaker", trainTestSplitMaker0.getCustomName());
      assertFalse(trainTestSplitMaker0.isBusy());
      assertFalse(trainTestSplitMaker0.isFocusCycleRoot());
      assertTrue(trainTestSplitMaker0.getFocusTraversalKeysEnabled());
      assertFalse(trainTestSplitMaker0.isFocusTraversalPolicySet());
      assertEquals(1, trainTestSplitMaker0.getSeed());
      assertFalse(filter0.equals((Object)filter1));
      assertFalse(trainTestSplitMaker0.equals((Object)trainTestSplitMaker1));
      
      filter1.addInstanceListener(filter0);
      assertNotSame(filter0, filter1);
      assertNotSame(filter1, filter0);
      assertFalse(filter0.isBusy());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertEquals("AllFilter", filter0.getCustomName());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertFalse(filter0.getIgnoreRepaint());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertFalse(filter0.isFocusCycleRoot());
      assertFalse(filter1.isFocusCycleRoot());
      assertFalse(filter1.isFocusTraversalPolicyProvider());
      assertFalse(filter1.isBusy());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter1.globalInfo());
      assertTrue(filter1.getFocusTraversalKeysEnabled());
      assertEquals("AllFilter", filter1.getCustomName());
      assertFalse(filter1.getIgnoreRepaint());
      assertFalse(filter1.isFocusTraversalPolicySet());
      assertFalse(filter0.equals((Object)filter1));
      assertFalse(filter1.equals((Object)filter0));
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte)2;
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertArrayEquals(new byte[] {(byte)2, (byte)2, (byte)2}, byteArray0);
      assertFalse(boolean0);
      
      filter0.addConfigurationListener((ConfigurationListener) null);
      assertNotSame(filter0, filter1);
      assertFalse(filter0.isBusy());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertEquals("AllFilter", filter0.getCustomName());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertFalse(filter0.getIgnoreRepaint());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertFalse(filter0.isFocusCycleRoot());
      assertFalse(filter0.equals((Object)filter1));
      
      SubstringReplacer substringReplacer0 = new SubstringReplacer();
      assertFalse(substringReplacer0.isFocusCycleRoot());
      assertEquals("SubstringReplacer", substringReplacer0.getCustomName());
      assertEquals("Replaces substrings in String attribute values using either literal match and replace or regular expression matching. The attributesto apply the match and replace rules to can be selected via a range string (e.g 1-5,6,last) or by a comma separated list of attribute names (/first and /last can be used to indicate the first and last attribute respectively)", substringReplacer0.globalInfo());
      assertFalse(substringReplacer0.isFocusTraversalPolicyProvider());
      assertFalse(substringReplacer0.isBusy());
      assertEquals("", substringReplacer0.getMatchReplaceDetails());
      assertFalse(substringReplacer0.getIgnoreRepaint());
      assertFalse(substringReplacer0.isFocusTraversalPolicySet());
      assertTrue(substringReplacer0.getFocusTraversalKeysEnabled());
      assertNotNull(substringReplacer0);
      
      InstanceEvent instanceEvent0 = substringReplacer0.m_ie;
      assertEquals(1, InstanceEvent.INSTANCE_AVAILABLE);
      assertEquals(0, InstanceEvent.FORMAT_AVAILABLE);
      assertEquals(2, InstanceEvent.BATCH_FINISHED);
      assertEquals(0, instanceEvent0.getStatus());
      assertNotNull(instanceEvent0);
      
      filter1.notifyInstanceListeners(instanceEvent0);
      assertNotSame(filter1, filter0);
      assertEquals(1, InstanceEvent.INSTANCE_AVAILABLE);
      assertEquals(0, InstanceEvent.FORMAT_AVAILABLE);
      assertEquals(2, InstanceEvent.BATCH_FINISHED);
      assertFalse(substringReplacer0.isFocusCycleRoot());
      assertEquals("SubstringReplacer", substringReplacer0.getCustomName());
      assertEquals("Replaces substrings in String attribute values using either literal match and replace or regular expression matching. The attributesto apply the match and replace rules to can be selected via a range string (e.g 1-5,6,last) or by a comma separated list of attribute names (/first and /last can be used to indicate the first and last attribute respectively)", substringReplacer0.globalInfo());
      assertFalse(substringReplacer0.isFocusTraversalPolicyProvider());
      assertFalse(substringReplacer0.isBusy());
      assertEquals("", substringReplacer0.getMatchReplaceDetails());
      assertFalse(substringReplacer0.getIgnoreRepaint());
      assertFalse(substringReplacer0.isFocusTraversalPolicySet());
      assertTrue(substringReplacer0.getFocusTraversalKeysEnabled());
      assertEquals(0, instanceEvent0.getStatus());
      assertFalse(filter1.isFocusCycleRoot());
      assertFalse(filter1.isFocusTraversalPolicyProvider());
      assertFalse(filter1.isBusy());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter1.globalInfo());
      assertTrue(filter1.getFocusTraversalKeysEnabled());
      assertEquals("AllFilter", filter1.getCustomName());
      assertFalse(filter1.getIgnoreRepaint());
      assertFalse(filter1.isFocusTraversalPolicySet());
      assertFalse(filter1.equals((Object)filter0));
      
      filter1.removeInstanceListener(substringReplacer0);
      assertNotSame(filter1, filter0);
      assertFalse(substringReplacer0.isFocusCycleRoot());
      assertEquals("SubstringReplacer", substringReplacer0.getCustomName());
      assertEquals("Replaces substrings in String attribute values using either literal match and replace or regular expression matching. The attributesto apply the match and replace rules to can be selected via a range string (e.g 1-5,6,last) or by a comma separated list of attribute names (/first and /last can be used to indicate the first and last attribute respectively)", substringReplacer0.globalInfo());
      assertFalse(substringReplacer0.isFocusTraversalPolicyProvider());
      assertFalse(substringReplacer0.isBusy());
      assertEquals("", substringReplacer0.getMatchReplaceDetails());
      assertFalse(substringReplacer0.getIgnoreRepaint());
      assertFalse(substringReplacer0.isFocusTraversalPolicySet());
      assertTrue(substringReplacer0.getFocusTraversalKeysEnabled());
      assertFalse(filter1.isFocusCycleRoot());
      assertFalse(filter1.isFocusTraversalPolicyProvider());
      assertFalse(filter1.isBusy());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter1.globalInfo());
      assertTrue(filter1.getFocusTraversalKeysEnabled());
      assertEquals("AllFilter", filter1.getCustomName());
      assertFalse(filter1.getIgnoreRepaint());
      assertFalse(filter1.isFocusTraversalPolicySet());
      assertFalse(filter1.equals((Object)filter0));
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Filter filter0 = new Filter();
      assertFalse(filter0.isBusy());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertFalse(filter0.isFocusCycleRoot());
      assertFalse(filter0.getIgnoreRepaint());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertEquals("AllFilter", filter0.getCustomName());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertNotNull(filter0);
      
      boolean boolean0 = filter0.requestFocusInWindow();
      assertFalse(filter0.isBusy());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertFalse(filter0.isFocusCycleRoot());
      assertFalse(filter0.getIgnoreRepaint());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertEquals("AllFilter", filter0.getCustomName());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertFalse(boolean0);
      
      ClassOrder classOrder0 = new ClassOrder();
      assertEquals(1, ClassOrder.FREQ_DESCEND);
      assertEquals(0, ClassOrder.FREQ_ASCEND);
      assertEquals(2, ClassOrder.RANDOM);
      assertEquals(1L, classOrder0.getSeed());
      assertEquals("Changes the order of the classes so that the class values are no longer of in the order specified in the header. The values will be in the order specified by the user -- it could be either in ascending/descending order by the class frequency or in random order. Note that this filter currently does not change the header, only the class values of the instances, so there is not much point in using it in conjunction with the FilteredClassifier. The value can also be converted back using 'originalValue(double value)' procedure.", classOrder0.globalInfo());
      assertEquals(0, classOrder0.getClassOrder());
      assertFalse(classOrder0.mayRemoveInstanceAfterFirstBatchDone());
      assertTrue(classOrder0.isNewBatch());
      assertEquals("Specify the seed of randomization of the class order", classOrder0.seedTipText());
      assertFalse(classOrder0.isFirstBatchDone());
      assertFalse(classOrder0.isOutputFormatDefined());
      assertEquals("Specify the class order after the filtering", classOrder0.classOrderTipText());
      assertNotNull(classOrder0);
      
      Associator associator0 = new Associator();
      assertFalse(associator0.getIgnoreRepaint());
      assertFalse(associator0.isBusy());
      assertFalse(associator0.isFocusCycleRoot());
      assertFalse(associator0.isFocusTraversalPolicyProvider());
      assertEquals("Apriori", associator0.getCustomName());
      assertEquals("<html><font color=blue>Class implementing an Apriori-type algorithm</font><br><br> Iteratively reduces the minimum support until it finds the required number of rules with the given minimum confidence.<br>The algorithm has an option to mine class association rules.<br>It is adapted as explained in the second reference.<br><br>For more information see:<br><br>R.<br>Agrawal, R.<br>Srikant: Fast Algorithms for Mining Association Rules in Large Databases.<br>In: 20th International Conference on Very Large Data Bases, 478-499, 1994.<br><br>Bing Liu, Wynne Hsu, Yiming Ma: Integrating Classification and Association Rule Mining.<br>In: Fourth International Conference on Knowledge Discovery and Data Mining, 80-86, 1998.<br></html>", associator0.globalInfo());
      assertFalse(associator0.isFocusTraversalPolicySet());
      assertTrue(associator0.getFocusTraversalKeysEnabled());
      assertNotNull(associator0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      filter0.addNotify();
      assertFalse(filter0.isBusy());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertFalse(filter0.isFocusCycleRoot());
      assertFalse(filter0.getIgnoreRepaint());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertEquals("AllFilter", filter0.getCustomName());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      
      filter0.useDefaultVisual();
      assertFalse(filter0.isBusy());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertFalse(filter0.isFocusCycleRoot());
      assertFalse(filter0.getIgnoreRepaint());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertEquals("AllFilter", filter0.getCustomName());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      
      Loader loader0 = new Loader();
      assertFalse(loader0.getIgnoreRepaint());
      assertFalse(loader0.isFocusTraversalPolicyProvider());
      assertFalse(loader0.isFocusCycleRoot());
      assertEquals("<html><font color=blue>Reads a source that is in arff (attribute relation file format) format</font> <br></html>", loader0.globalInfo());
      assertEquals("ArffLoader", loader0.getCustomName());
      assertFalse(loader0.isBusy());
      assertFalse(loader0.isFocusTraversalPolicySet());
      assertTrue(loader0.getFocusTraversalKeysEnabled());
      assertNotNull(loader0);
      
      SubstringReplacer substringReplacer0 = new SubstringReplacer();
      assertEquals("", substringReplacer0.getMatchReplaceDetails());
      assertFalse(substringReplacer0.isFocusTraversalPolicyProvider());
      assertEquals("Replaces substrings in String attribute values using either literal match and replace or regular expression matching. The attributesto apply the match and replace rules to can be selected via a range string (e.g 1-5,6,last) or by a comma separated list of attribute names (/first and /last can be used to indicate the first and last attribute respectively)", substringReplacer0.globalInfo());
      assertFalse(substringReplacer0.isBusy());
      assertTrue(substringReplacer0.getFocusTraversalKeysEnabled());
      assertFalse(substringReplacer0.isFocusCycleRoot());
      assertEquals("SubstringReplacer", substringReplacer0.getCustomName());
      assertFalse(substringReplacer0.isFocusTraversalPolicySet());
      assertFalse(substringReplacer0.getIgnoreRepaint());
      assertNotNull(substringReplacer0);
      
      InstanceEvent instanceEvent0 = substringReplacer0.m_ie;
      assertEquals(1, InstanceEvent.INSTANCE_AVAILABLE);
      assertEquals(2, InstanceEvent.BATCH_FINISHED);
      assertEquals(0, InstanceEvent.FORMAT_AVAILABLE);
      assertEquals(0, instanceEvent0.getStatus());
      assertNotNull(instanceEvent0);
      
      Appender appender0 = new Appender();
      assertFalse(appender0.isBusy());
      assertFalse(appender0.isFocusTraversalPolicyProvider());
      assertFalse(appender0.isFocusCycleRoot());
      assertFalse(appender0.isFocusTraversalPolicySet());
      assertFalse(appender0.getIgnoreRepaint());
      assertTrue(appender0.getFocusTraversalKeysEnabled());
      assertEquals("Appender", appender0.getCustomName());
      assertNotNull(appender0);
      
      Logger logger0 = appender0.m_log;
      assertNull(logger0);
      
      SubstringLabeler substringLabeler0 = new SubstringLabeler();
      assertEquals("", substringLabeler0.getMatchDetails());
      assertEquals("SubstringLabeler", substringLabeler0.getCustomName());
      assertFalse(substringLabeler0.getIgnoreRepaint());
      assertFalse(substringLabeler0.isBusy());
      assertTrue(substringLabeler0.getFocusTraversalKeysEnabled());
      assertFalse(substringLabeler0.getNominalBinary());
      assertFalse(substringLabeler0.isFocusTraversalPolicySet());
      assertEquals("Matches substrings in String attributes using either literal or regular expression matches. The value of a new attribute is set to reflect the status of the match. The new attribute can be either binary (in which case values indicate match or no match) or multi-valued nominal, in which case a label must be associated with each distinct matching rule. In the case of labeled matches, the user can opt to have non matching instances output with missing value set for the new attribute or not output at all (i.e. consumed by the step).", substringLabeler0.globalInfo());
      assertFalse(substringLabeler0.isFocusCycleRoot());
      assertFalse(substringLabeler0.isFocusTraversalPolicyProvider());
      assertEquals("Match", substringLabeler0.getMatchAttributeName());
      assertFalse(substringLabeler0.getConsumeNonMatching());
      assertNotNull(substringLabeler0);
      
      MouseWheelListener[] mouseWheelListenerArray0 = filter0.getMouseWheelListeners();
      assertFalse(filter0.isBusy());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertFalse(filter0.isFocusCycleRoot());
      assertFalse(filter0.getIgnoreRepaint());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertEquals("AllFilter", filter0.getCustomName());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertNotNull(mouseWheelListenerArray0);
      
      Filter filter1 = new Filter();
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter1.globalInfo());
      assertFalse(filter1.isFocusTraversalPolicySet());
      assertFalse(filter1.isFocusCycleRoot());
      assertTrue(filter1.getFocusTraversalKeysEnabled());
      assertFalse(filter1.getIgnoreRepaint());
      assertFalse(filter1.isFocusTraversalPolicyProvider());
      assertFalse(filter1.isBusy());
      assertEquals("AllFilter", filter1.getCustomName());
      assertFalse(filter1.equals((Object)filter0));
      assertNotNull(filter1);
      
      Filter filter2 = new Filter();
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter2.globalInfo());
      assertFalse(filter2.isFocusTraversalPolicySet());
      assertEquals("AllFilter", filter2.getCustomName());
      assertTrue(filter2.getFocusTraversalKeysEnabled());
      assertFalse(filter2.getIgnoreRepaint());
      assertFalse(filter2.isBusy());
      assertFalse(filter2.isFocusTraversalPolicyProvider());
      assertFalse(filter2.isFocusCycleRoot());
      assertFalse(filter2.equals((Object)filter1));
      assertFalse(filter2.equals((Object)filter0));
      assertNotNull(filter2);
      
      TextViewer textViewer0 = new TextViewer();
      assertFalse(textViewer0.isFocusTraversalPolicyProvider());
      assertFalse(textViewer0.isFocusTraversalPolicySet());
      assertFalse(textViewer0.getIgnoreRepaint());
      assertTrue(textViewer0.getFocusTraversalKeysEnabled());
      assertFalse(textViewer0.isBusy());
      assertEquals("General purpose text display.", textViewer0.globalInfo());
      assertFalse(textViewer0.isFocusCycleRoot());
      assertNotNull(textViewer0);
      
      filter0.acceptInstance(instanceEvent0);
      assertNotSame(filter0, filter1);
      assertNotSame(filter0, filter2);
      assertEquals(1, InstanceEvent.INSTANCE_AVAILABLE);
      assertEquals(2, InstanceEvent.BATCH_FINISHED);
      assertEquals(0, InstanceEvent.FORMAT_AVAILABLE);
      assertFalse(filter0.isBusy());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertFalse(filter0.isFocusCycleRoot());
      assertFalse(filter0.getIgnoreRepaint());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertEquals("AllFilter", filter0.getCustomName());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertEquals("", substringReplacer0.getMatchReplaceDetails());
      assertFalse(substringReplacer0.isFocusTraversalPolicyProvider());
      assertEquals("Replaces substrings in String attribute values using either literal match and replace or regular expression matching. The attributesto apply the match and replace rules to can be selected via a range string (e.g 1-5,6,last) or by a comma separated list of attribute names (/first and /last can be used to indicate the first and last attribute respectively)", substringReplacer0.globalInfo());
      assertFalse(substringReplacer0.isBusy());
      assertTrue(substringReplacer0.getFocusTraversalKeysEnabled());
      assertFalse(substringReplacer0.isFocusCycleRoot());
      assertEquals("SubstringReplacer", substringReplacer0.getCustomName());
      assertFalse(substringReplacer0.isFocusTraversalPolicySet());
      assertFalse(substringReplacer0.getIgnoreRepaint());
      assertEquals(0, instanceEvent0.getStatus());
      assertFalse(filter0.equals((Object)filter1));
      assertFalse(filter0.equals((Object)filter2));
      
      filter0.setFilter(classOrder0);
      assertNotSame(filter0, filter1);
      assertNotSame(filter0, filter2);
      assertEquals(1, ClassOrder.FREQ_DESCEND);
      assertEquals(0, ClassOrder.FREQ_ASCEND);
      assertEquals(2, ClassOrder.RANDOM);
      assertFalse(filter0.isBusy());
      assertEquals("<html><font color=blue>Changes the order of the classes so that the class values are no longer of in the order specified in the header</font><br><br> The values will be in the order specified by the user -- it could be either in ascending/descending order by the class frequency or in random order.<br>Note that this filter currently does not change the header, only the class values of the instances, so there is not much point in using it in conjunction with the FilteredClassifier.<br>The value can also be converted back using 'originalValue(double value)' procedure.<br></html>", filter0.globalInfo());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertFalse(filter0.isFocusCycleRoot());
      assertFalse(filter0.getIgnoreRepaint());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertEquals("ClassOrder", filter0.getCustomName());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertEquals(1L, classOrder0.getSeed());
      assertEquals("Changes the order of the classes so that the class values are no longer of in the order specified in the header. The values will be in the order specified by the user -- it could be either in ascending/descending order by the class frequency or in random order. Note that this filter currently does not change the header, only the class values of the instances, so there is not much point in using it in conjunction with the FilteredClassifier. The value can also be converted back using 'originalValue(double value)' procedure.", classOrder0.globalInfo());
      assertEquals(0, classOrder0.getClassOrder());
      assertFalse(classOrder0.mayRemoveInstanceAfterFirstBatchDone());
      assertTrue(classOrder0.isNewBatch());
      assertEquals("Specify the seed of randomization of the class order", classOrder0.seedTipText());
      assertFalse(classOrder0.isFirstBatchDone());
      assertFalse(classOrder0.isOutputFormatDefined());
      assertEquals("Specify the class order after the filtering", classOrder0.classOrderTipText());
      assertFalse(filter0.equals((Object)filter1));
      assertFalse(filter0.equals((Object)filter2));
      
      ClassValuePicker classValuePicker0 = new ClassValuePicker();
      assertFalse(classValuePicker0.getIgnoreRepaint());
      assertTrue(classValuePicker0.getFocusTraversalKeysEnabled());
      assertEquals("ClassValuePicker", classValuePicker0.getCustomName());
      assertFalse(classValuePicker0.isFocusTraversalPolicySet());
      assertNull(classValuePicker0.getClassValue());
      assertEquals("Designate which class value is to be considered the \"positive\" class value (useful for ROC style curves).", classValuePicker0.globalInfo());
      assertFalse(classValuePicker0.isFocusCycleRoot());
      assertFalse(classValuePicker0.isBusy());
      assertFalse(classValuePicker0.isFocusTraversalPolicyProvider());
      assertNotNull(classValuePicker0);
      
      MockJapaneseDate mockJapaneseDate0 = new MockJapaneseDate();
      assertNotNull(mockJapaneseDate0);
      
      filter1.connectionNotification("instance", filter0);
      assertNotSame(filter0, filter1);
      assertNotSame(filter0, filter2);
      assertNotSame(filter1, filter0);
      assertNotSame(filter1, filter2);
      assertFalse(filter0.isBusy());
      assertEquals("<html><font color=blue>Changes the order of the classes so that the class values are no longer of in the order specified in the header</font><br><br> The values will be in the order specified by the user -- it could be either in ascending/descending order by the class frequency or in random order.<br>Note that this filter currently does not change the header, only the class values of the instances, so there is not much point in using it in conjunction with the FilteredClassifier.<br>The value can also be converted back using 'originalValue(double value)' procedure.<br></html>", filter0.globalInfo());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertFalse(filter0.isFocusCycleRoot());
      assertFalse(filter0.getIgnoreRepaint());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertEquals("ClassOrder", filter0.getCustomName());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter1.globalInfo());
      assertFalse(filter1.isFocusTraversalPolicySet());
      assertFalse(filter1.isFocusCycleRoot());
      assertTrue(filter1.getFocusTraversalKeysEnabled());
      assertFalse(filter1.getIgnoreRepaint());
      assertFalse(filter1.isFocusTraversalPolicyProvider());
      assertFalse(filter1.isBusy());
      assertEquals("AllFilter", filter1.getCustomName());
      assertFalse(filter0.equals((Object)filter1));
      assertFalse(filter0.equals((Object)filter2));
      assertFalse(filter1.equals((Object)filter0));
      assertFalse(filter1.equals((Object)filter2));
      
      WordTokenizer wordTokenizer0 = new WordTokenizer();
      assertEquals("Set of delimiter characters to use in tokenizing (\\r, \\n and \\t can be used for carriage-return, line-feed and tab)", wordTokenizer0.delimitersTipText());
      assertEquals("A simple tokenizer that is using the java.util.StringTokenizer class to tokenize the strings.", wordTokenizer0.globalInfo());
      assertEquals(" \r\n\t.,;:'\"()?!", wordTokenizer0.getDelimiters());
      assertNotNull(wordTokenizer0);
      
      filter0.removeInstanceListener(substringLabeler0);
      assertNotSame(filter0, filter1);
      assertNotSame(filter0, filter2);
      assertFalse(filter0.isBusy());
      assertEquals("<html><font color=blue>Changes the order of the classes so that the class values are no longer of in the order specified in the header</font><br><br> The values will be in the order specified by the user -- it could be either in ascending/descending order by the class frequency or in random order.<br>Note that this filter currently does not change the header, only the class values of the instances, so there is not much point in using it in conjunction with the FilteredClassifier.<br>The value can also be converted back using 'originalValue(double value)' procedure.<br></html>", filter0.globalInfo());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertFalse(filter0.isFocusCycleRoot());
      assertFalse(filter0.getIgnoreRepaint());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertEquals("ClassOrder", filter0.getCustomName());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertEquals("", substringLabeler0.getMatchDetails());
      assertEquals("SubstringLabeler", substringLabeler0.getCustomName());
      assertFalse(substringLabeler0.getIgnoreRepaint());
      assertFalse(substringLabeler0.isBusy());
      assertTrue(substringLabeler0.getFocusTraversalKeysEnabled());
      assertFalse(substringLabeler0.getNominalBinary());
      assertFalse(substringLabeler0.isFocusTraversalPolicySet());
      assertEquals("Matches substrings in String attributes using either literal or regular expression matches. The value of a new attribute is set to reflect the status of the match. The new attribute can be either binary (in which case values indicate match or no match) or multi-valued nominal, in which case a label must be associated with each distinct matching rule. In the case of labeled matches, the user can opt to have non matching instances output with missing value set for the new attribute or not output at all (i.e. consumed by the step).", substringLabeler0.globalInfo());
      assertFalse(substringLabeler0.isFocusCycleRoot());
      assertFalse(substringLabeler0.isFocusTraversalPolicyProvider());
      assertEquals("Match", substringLabeler0.getMatchAttributeName());
      assertFalse(substringLabeler0.getConsumeNonMatching());
      assertFalse(filter0.equals((Object)filter1));
      assertFalse(filter0.equals((Object)filter2));
      
      filter2.addTrainingSetListener(filter0);
      assertNotSame(filter0, filter1);
      assertNotSame(filter0, filter2);
      assertNotSame(filter2, filter1);
      assertNotSame(filter2, filter0);
      assertFalse(filter0.isBusy());
      assertEquals("<html><font color=blue>Changes the order of the classes so that the class values are no longer of in the order specified in the header</font><br><br> The values will be in the order specified by the user -- it could be either in ascending/descending order by the class frequency or in random order.<br>Note that this filter currently does not change the header, only the class values of the instances, so there is not much point in using it in conjunction with the FilteredClassifier.<br>The value can also be converted back using 'originalValue(double value)' procedure.<br></html>", filter0.globalInfo());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertFalse(filter0.isFocusCycleRoot());
      assertFalse(filter0.getIgnoreRepaint());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertEquals("ClassOrder", filter0.getCustomName());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter2.globalInfo());
      assertFalse(filter2.isFocusTraversalPolicySet());
      assertEquals("AllFilter", filter2.getCustomName());
      assertTrue(filter2.getFocusTraversalKeysEnabled());
      assertFalse(filter2.getIgnoreRepaint());
      assertFalse(filter2.isBusy());
      assertFalse(filter2.isFocusTraversalPolicyProvider());
      assertFalse(filter2.isFocusCycleRoot());
      assertFalse(filter0.equals((Object)filter1));
      assertFalse(filter0.equals((Object)filter2));
      assertFalse(filter2.equals((Object)filter1));
      assertFalse(filter2.equals((Object)filter0));
      
      SubstringReplacer substringReplacer1 = new SubstringReplacer();
      assertFalse(substringReplacer1.isFocusTraversalPolicySet());
      assertFalse(substringReplacer1.isFocusCycleRoot());
      assertFalse(substringReplacer1.isFocusTraversalPolicyProvider());
      assertEquals("Replaces substrings in String attribute values using either literal match and replace or regular expression matching. The attributesto apply the match and replace rules to can be selected via a range string (e.g 1-5,6,last) or by a comma separated list of attribute names (/first and /last can be used to indicate the first and last attribute respectively)", substringReplacer1.globalInfo());
      assertEquals("", substringReplacer1.getMatchReplaceDetails());
      assertFalse(substringReplacer1.isBusy());
      assertEquals("SubstringReplacer", substringReplacer1.getCustomName());
      assertTrue(substringReplacer1.getFocusTraversalKeysEnabled());
      assertFalse(substringReplacer1.getIgnoreRepaint());
      assertFalse(substringReplacer1.equals((Object)substringReplacer0));
      assertNotNull(substringReplacer1);
      
      DataSetEvent dataSetEvent0 = new DataSetEvent(substringReplacer1, (Instances) null);
      assertFalse(substringReplacer1.isFocusTraversalPolicySet());
      assertFalse(substringReplacer1.isFocusCycleRoot());
      assertFalse(substringReplacer1.isFocusTraversalPolicyProvider());
      assertEquals("Replaces substrings in String attribute values using either literal match and replace or regular expression matching. The attributesto apply the match and replace rules to can be selected via a range string (e.g 1-5,6,last) or by a comma separated list of attribute names (/first and /last can be used to indicate the first and last attribute respectively)", substringReplacer1.globalInfo());
      assertEquals("", substringReplacer1.getMatchReplaceDetails());
      assertFalse(substringReplacer1.isBusy());
      assertEquals("SubstringReplacer", substringReplacer1.getCustomName());
      assertTrue(substringReplacer1.getFocusTraversalKeysEnabled());
      assertFalse(substringReplacer1.getIgnoreRepaint());
      assertFalse(dataSetEvent0.isStructureOnly());
      assertFalse(substringReplacer1.equals((Object)substringReplacer0));
      assertNotNull(dataSetEvent0);
      
      filter0.acceptDataSet(dataSetEvent0);
      assertNotSame(filter0, filter1);
      assertNotSame(filter0, filter2);
      assertNotSame(substringReplacer1, substringReplacer0);
      assertFalse(filter0.isBusy());
      assertEquals("<html><font color=blue>Changes the order of the classes so that the class values are no longer of in the order specified in the header</font><br><br> The values will be in the order specified by the user -- it could be either in ascending/descending order by the class frequency or in random order.<br>Note that this filter currently does not change the header, only the class values of the instances, so there is not much point in using it in conjunction with the FilteredClassifier.<br>The value can also be converted back using 'originalValue(double value)' procedure.<br></html>", filter0.globalInfo());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertFalse(filter0.isFocusCycleRoot());
      assertFalse(filter0.getIgnoreRepaint());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertEquals("ClassOrder", filter0.getCustomName());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertFalse(substringReplacer1.isFocusTraversalPolicySet());
      assertFalse(substringReplacer1.isFocusCycleRoot());
      assertFalse(substringReplacer1.isFocusTraversalPolicyProvider());
      assertEquals("Replaces substrings in String attribute values using either literal match and replace or regular expression matching. The attributesto apply the match and replace rules to can be selected via a range string (e.g 1-5,6,last) or by a comma separated list of attribute names (/first and /last can be used to indicate the first and last attribute respectively)", substringReplacer1.globalInfo());
      assertEquals("", substringReplacer1.getMatchReplaceDetails());
      assertFalse(substringReplacer1.isBusy());
      assertEquals("SubstringReplacer", substringReplacer1.getCustomName());
      assertTrue(substringReplacer1.getFocusTraversalKeysEnabled());
      assertFalse(substringReplacer1.getIgnoreRepaint());
      assertFalse(dataSetEvent0.isStructureOnly());
      assertFalse(filter0.equals((Object)filter1));
      assertFalse(filter0.equals((Object)filter2));
      assertFalse(substringReplacer1.equals((Object)substringReplacer0));
      
      filter2.addInstanceListener(filter1);
      assertNotSame(filter1, filter0);
      assertNotSame(filter1, filter2);
      assertNotSame(filter2, filter1);
      assertNotSame(filter2, filter0);
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter1.globalInfo());
      assertFalse(filter1.isFocusTraversalPolicySet());
      assertFalse(filter1.isFocusCycleRoot());
      assertTrue(filter1.getFocusTraversalKeysEnabled());
      assertFalse(filter1.getIgnoreRepaint());
      assertFalse(filter1.isFocusTraversalPolicyProvider());
      assertFalse(filter1.isBusy());
      assertEquals("AllFilter", filter1.getCustomName());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter2.globalInfo());
      assertFalse(filter2.isFocusTraversalPolicySet());
      assertEquals("AllFilter", filter2.getCustomName());
      assertTrue(filter2.getFocusTraversalKeysEnabled());
      assertFalse(filter2.getIgnoreRepaint());
      assertFalse(filter2.isBusy());
      assertFalse(filter2.isFocusTraversalPolicyProvider());
      assertFalse(filter2.isFocusCycleRoot());
      assertFalse(filter1.equals((Object)filter0));
      assertFalse(filter1.equals((Object)filter2));
      assertFalse(filter2.equals((Object)filter1));
      assertFalse(filter2.equals((Object)filter0));
      
      filter0.useDefaultVisual();
      assertNotSame(filter0, filter1);
      assertNotSame(filter0, filter2);
      assertFalse(filter0.isBusy());
      assertEquals("<html><font color=blue>Changes the order of the classes so that the class values are no longer of in the order specified in the header</font><br><br> The values will be in the order specified by the user -- it could be either in ascending/descending order by the class frequency or in random order.<br>Note that this filter currently does not change the header, only the class values of the instances, so there is not much point in using it in conjunction with the FilteredClassifier.<br>The value can also be converted back using 'originalValue(double value)' procedure.<br></html>", filter0.globalInfo());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertFalse(filter0.isFocusCycleRoot());
      assertFalse(filter0.getIgnoreRepaint());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertEquals("ClassOrder", filter0.getCustomName());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertFalse(filter0.equals((Object)filter1));
      assertFalse(filter0.equals((Object)filter2));
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Filter filter0 = new Filter();
      assertEquals("AllFilter", filter0.getCustomName());
      assertFalse(filter0.isBusy());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      assertFalse(filter0.isFocusCycleRoot());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertFalse(filter0.getIgnoreRepaint());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertNotNull(filter0);
      
      String string0 = "io1W8#ZY*!pBieE4&(";
      filter0.connectionNotification("io1W8#ZY*!pBieE4&(", "io1W8#ZY*!pBieE4&(");
      assertEquals("AllFilter", filter0.getCustomName());
      assertFalse(filter0.isBusy());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      assertFalse(filter0.isFocusCycleRoot());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertFalse(filter0.getIgnoreRepaint());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      
      boolean boolean0 = filter0.eventGeneratable("io1W8#ZY*!pBieE4&(");
      assertEquals("AllFilter", filter0.getCustomName());
      assertFalse(filter0.isBusy());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      assertFalse(filter0.isFocusCycleRoot());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertFalse(filter0.getIgnoreRepaint());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertTrue(boolean0);
      
      ClassOrder classOrder0 = new ClassOrder();
      assertEquals(0, ClassOrder.FREQ_ASCEND);
      assertEquals(1, ClassOrder.FREQ_DESCEND);
      assertEquals(2, ClassOrder.RANDOM);
      assertEquals("Changes the order of the classes so that the class values are no longer of in the order specified in the header. The values will be in the order specified by the user -- it could be either in ascending/descending order by the class frequency or in random order. Note that this filter currently does not change the header, only the class values of the instances, so there is not much point in using it in conjunction with the FilteredClassifier. The value can also be converted back using 'originalValue(double value)' procedure.", classOrder0.globalInfo());
      assertEquals(1L, classOrder0.getSeed());
      assertEquals("Specify the seed of randomization of the class order", classOrder0.seedTipText());
      assertFalse(classOrder0.isOutputFormatDefined());
      assertEquals("Specify the class order after the filtering", classOrder0.classOrderTipText());
      assertEquals(0, classOrder0.getClassOrder());
      assertFalse(classOrder0.isFirstBatchDone());
      assertFalse(classOrder0.mayRemoveInstanceAfterFirstBatchDone());
      assertTrue(classOrder0.isNewBatch());
      assertNotNull(classOrder0);
      
      Associator associator0 = new Associator();
      assertFalse(associator0.isFocusCycleRoot());
      assertFalse(associator0.isBusy());
      assertFalse(associator0.isFocusTraversalPolicyProvider());
      assertEquals("<html><font color=blue>Class implementing an Apriori-type algorithm</font><br><br> Iteratively reduces the minimum support until it finds the required number of rules with the given minimum confidence.<br>The algorithm has an option to mine class association rules.<br>It is adapted as explained in the second reference.<br><br>For more information see:<br><br>R.<br>Agrawal, R.<br>Srikant: Fast Algorithms for Mining Association Rules in Large Databases.<br>In: 20th International Conference on Very Large Data Bases, 478-499, 1994.<br><br>Bing Liu, Wynne Hsu, Yiming Ma: Integrating Classification and Association Rule Mining.<br>In: Fourth International Conference on Knowledge Discovery and Data Mining, 80-86, 1998.<br></html>", associator0.globalInfo());
      assertEquals("Apriori", associator0.getCustomName());
      assertFalse(associator0.getIgnoreRepaint());
      assertFalse(associator0.isFocusTraversalPolicySet());
      assertTrue(associator0.getFocusTraversalKeysEnabled());
      assertNotNull(associator0);
      
      filter0.addNotify();
      assertEquals("AllFilter", filter0.getCustomName());
      assertFalse(filter0.isBusy());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      assertFalse(filter0.isFocusCycleRoot());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertFalse(filter0.getIgnoreRepaint());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      
      filter0.useDefaultVisual();
      assertEquals("AllFilter", filter0.getCustomName());
      assertFalse(filter0.isBusy());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      assertFalse(filter0.isFocusCycleRoot());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertFalse(filter0.getIgnoreRepaint());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      
      Loader loader0 = new Loader();
      assertFalse(loader0.isBusy());
      assertFalse(loader0.isFocusTraversalPolicySet());
      assertFalse(loader0.isFocusCycleRoot());
      assertEquals("ArffLoader", loader0.getCustomName());
      assertEquals("<html><font color=blue>Reads a source that is in arff (attribute relation file format) format</font> <br></html>", loader0.globalInfo());
      assertTrue(loader0.getFocusTraversalKeysEnabled());
      assertFalse(loader0.getIgnoreRepaint());
      assertFalse(loader0.isFocusTraversalPolicyProvider());
      assertNotNull(loader0);
      
      Appender appender0 = new Appender();
      assertEquals("Appender", appender0.getCustomName());
      assertFalse(appender0.isFocusTraversalPolicySet());
      assertTrue(appender0.getFocusTraversalKeysEnabled());
      assertFalse(appender0.getIgnoreRepaint());
      assertFalse(appender0.isFocusTraversalPolicyProvider());
      assertFalse(appender0.isFocusCycleRoot());
      assertFalse(appender0.isBusy());
      assertNotNull(appender0);
      
      SubstringReplacer substringReplacer0 = new SubstringReplacer();
      assertFalse(substringReplacer0.isBusy());
      assertEquals("SubstringReplacer", substringReplacer0.getCustomName());
      assertTrue(substringReplacer0.getFocusTraversalKeysEnabled());
      assertEquals("", substringReplacer0.getMatchReplaceDetails());
      assertEquals("Replaces substrings in String attribute values using either literal match and replace or regular expression matching. The attributesto apply the match and replace rules to can be selected via a range string (e.g 1-5,6,last) or by a comma separated list of attribute names (/first and /last can be used to indicate the first and last attribute respectively)", substringReplacer0.globalInfo());
      assertFalse(substringReplacer0.isFocusCycleRoot());
      assertFalse(substringReplacer0.isFocusTraversalPolicyProvider());
      assertFalse(substringReplacer0.isFocusTraversalPolicySet());
      assertFalse(substringReplacer0.getIgnoreRepaint());
      assertNotNull(substringReplacer0);
      
      InstanceEvent instanceEvent0 = substringReplacer0.m_ie;
      assertEquals(1, InstanceEvent.INSTANCE_AVAILABLE);
      assertEquals(0, InstanceEvent.FORMAT_AVAILABLE);
      assertEquals(2, InstanceEvent.BATCH_FINISHED);
      assertEquals(0, instanceEvent0.getStatus());
      assertNotNull(instanceEvent0);
      
      Appender appender1 = new Appender();
      assertTrue(appender1.getFocusTraversalKeysEnabled());
      assertEquals("Appender", appender1.getCustomName());
      assertFalse(appender1.isFocusCycleRoot());
      assertFalse(appender1.isBusy());
      assertFalse(appender1.isFocusTraversalPolicyProvider());
      assertFalse(appender1.getIgnoreRepaint());
      assertFalse(appender1.isFocusTraversalPolicySet());
      assertFalse(appender1.equals((Object)appender0));
      assertNotNull(appender1);
      
      Logger logger0 = appender1.m_log;
      assertNull(logger0);
      
      Enumeration enumeration0 = filter0.enumerateRequests();
      assertEquals("AllFilter", filter0.getCustomName());
      assertFalse(filter0.isBusy());
      assertFalse(filter0.isFocusTraversalPolicyProvider());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter0.globalInfo());
      assertFalse(filter0.isFocusCycleRoot());
      assertFalse(filter0.isFocusTraversalPolicySet());
      assertFalse(filter0.getIgnoreRepaint());
      assertTrue(filter0.getFocusTraversalKeysEnabled());
      assertNotNull(enumeration0);
      
      SubstringLabeler substringLabeler0 = new SubstringLabeler();
      assertEquals("", substringLabeler0.getMatchDetails());
      assertEquals("SubstringLabeler", substringLabeler0.getCustomName());
      assertFalse(substringLabeler0.getIgnoreRepaint());
      assertFalse(substringLabeler0.isBusy());
      assertTrue(substringLabeler0.getFocusTraversalKeysEnabled());
      assertFalse(substringLabeler0.getNominalBinary());
      assertFalse(substringLabeler0.isFocusTraversalPolicySet());
      assertFalse(substringLabeler0.isFocusCycleRoot());
      assertEquals("Matches substrings in String attributes using either literal or regular expression matches. The value of a new attribute is set to reflect the status of the match. The new attribute can be either binary (in which case values indicate match or no match) or multi-valued nominal, in which case a label must be associated with each distinct matching rule. In the case of labeled matches, the user can opt to have non matching instances output with missing value set for the new attribute or not output at all (i.e. consumed by the step).", substringLabeler0.globalInfo());
      assertFalse(substringLabeler0.isFocusTraversalPolicyProvider());
      assertEquals("Match", substringLabeler0.getMatchAttributeName());
      assertFalse(substringLabeler0.getConsumeNonMatching());
      assertNotNull(substringLabeler0);
      
      Filter filter1 = new Filter();
      assertFalse(filter1.getIgnoreRepaint());
      assertEquals("AllFilter", filter1.getCustomName());
      assertTrue(filter1.getFocusTraversalKeysEnabled());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter1.globalInfo());
      assertFalse(filter1.isFocusTraversalPolicySet());
      assertFalse(filter1.isBusy());
      assertFalse(filter1.isFocusTraversalPolicyProvider());
      assertFalse(filter1.isFocusCycleRoot());
      assertFalse(filter1.equals((Object)filter0));
      assertNotNull(filter1);
      
      Filter filter2 = new Filter();
      assertEquals("AllFilter", filter2.getCustomName());
      assertTrue(filter2.getFocusTraversalKeysEnabled());
      assertFalse(filter2.isBusy());
      assertFalse(filter2.isFocusTraversalPolicyProvider());
      assertFalse(filter2.isFocusTraversalPolicySet());
      assertFalse(filter2.getIgnoreRepaint());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter2.globalInfo());
      assertFalse(filter2.isFocusCycleRoot());
      assertFalse(filter2.equals((Object)filter0));
      assertFalse(filter2.equals((Object)filter1));
      assertNotNull(filter2);
      
      TextViewer textViewer0 = new TextViewer();
      assertFalse(textViewer0.getIgnoreRepaint());
      assertFalse(textViewer0.isFocusTraversalPolicyProvider());
      assertFalse(textViewer0.isFocusTraversalPolicySet());
      assertFalse(textViewer0.isFocusCycleRoot());
      assertTrue(textViewer0.getFocusTraversalKeysEnabled());
      assertEquals("General purpose text display.", textViewer0.globalInfo());
      assertFalse(textViewer0.isBusy());
      assertNotNull(textViewer0);
      
      DataSetEvent dataSetEvent0 = new DataSetEvent(textViewer0, (Instances) null);
      assertFalse(textViewer0.getIgnoreRepaint());
      assertFalse(textViewer0.isFocusTraversalPolicyProvider());
      assertFalse(textViewer0.isFocusTraversalPolicySet());
      assertFalse(textViewer0.isFocusCycleRoot());
      assertTrue(textViewer0.getFocusTraversalKeysEnabled());
      assertEquals("General purpose text display.", textViewer0.globalInfo());
      assertFalse(textViewer0.isBusy());
      assertFalse(dataSetEvent0.isStructureOnly());
      assertNotNull(dataSetEvent0);
      
      filter2.acceptDataSet(dataSetEvent0);
      assertNotSame(filter2, filter0);
      assertNotSame(filter2, filter1);
      assertEquals("AllFilter", filter2.getCustomName());
      assertTrue(filter2.getFocusTraversalKeysEnabled());
      assertFalse(filter2.isBusy());
      assertFalse(filter2.isFocusTraversalPolicyProvider());
      assertFalse(filter2.isFocusTraversalPolicySet());
      assertFalse(filter2.getIgnoreRepaint());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter2.globalInfo());
      assertFalse(filter2.isFocusCycleRoot());
      assertFalse(textViewer0.getIgnoreRepaint());
      assertFalse(textViewer0.isFocusTraversalPolicyProvider());
      assertFalse(textViewer0.isFocusTraversalPolicySet());
      assertFalse(textViewer0.isFocusCycleRoot());
      assertTrue(textViewer0.getFocusTraversalKeysEnabled());
      assertEquals("General purpose text display.", textViewer0.globalInfo());
      assertFalse(textViewer0.isBusy());
      assertFalse(dataSetEvent0.isStructureOnly());
      assertFalse(filter2.equals((Object)filter0));
      assertFalse(filter2.equals((Object)filter1));
      
      filter1.acceptInstance(instanceEvent0);
      assertNotSame(filter1, filter0);
      assertNotSame(filter1, filter2);
      assertEquals(1, InstanceEvent.INSTANCE_AVAILABLE);
      assertEquals(0, InstanceEvent.FORMAT_AVAILABLE);
      assertEquals(2, InstanceEvent.BATCH_FINISHED);
      assertFalse(filter1.getIgnoreRepaint());
      assertEquals("AllFilter", filter1.getCustomName());
      assertTrue(filter1.getFocusTraversalKeysEnabled());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter1.globalInfo());
      assertFalse(filter1.isFocusTraversalPolicySet());
      assertFalse(filter1.isBusy());
      assertFalse(filter1.isFocusTraversalPolicyProvider());
      assertFalse(filter1.isFocusCycleRoot());
      assertFalse(substringReplacer0.isBusy());
      assertEquals("SubstringReplacer", substringReplacer0.getCustomName());
      assertTrue(substringReplacer0.getFocusTraversalKeysEnabled());
      assertEquals("", substringReplacer0.getMatchReplaceDetails());
      assertEquals("Replaces substrings in String attribute values using either literal match and replace or regular expression matching. The attributesto apply the match and replace rules to can be selected via a range string (e.g 1-5,6,last) or by a comma separated list of attribute names (/first and /last can be used to indicate the first and last attribute respectively)", substringReplacer0.globalInfo());
      assertFalse(substringReplacer0.isFocusCycleRoot());
      assertFalse(substringReplacer0.isFocusTraversalPolicyProvider());
      assertFalse(substringReplacer0.isFocusTraversalPolicySet());
      assertFalse(substringReplacer0.getIgnoreRepaint());
      assertEquals(0, instanceEvent0.getStatus());
      assertFalse(filter1.equals((Object)filter0));
      assertFalse(filter1.equals((Object)filter2));
      
      filter2.setFilter(classOrder0);
      assertNotSame(filter2, filter0);
      assertNotSame(filter2, filter1);
      assertEquals(0, ClassOrder.FREQ_ASCEND);
      assertEquals(1, ClassOrder.FREQ_DESCEND);
      assertEquals(2, ClassOrder.RANDOM);
      assertTrue(filter2.getFocusTraversalKeysEnabled());
      assertFalse(filter2.isBusy());
      assertEquals("ClassOrder", filter2.getCustomName());
      assertFalse(filter2.isFocusTraversalPolicyProvider());
      assertFalse(filter2.isFocusTraversalPolicySet());
      assertFalse(filter2.getIgnoreRepaint());
      assertEquals("<html><font color=blue>Changes the order of the classes so that the class values are no longer of in the order specified in the header</font><br><br> The values will be in the order specified by the user -- it could be either in ascending/descending order by the class frequency or in random order.<br>Note that this filter currently does not change the header, only the class values of the instances, so there is not much point in using it in conjunction with the FilteredClassifier.<br>The value can also be converted back using 'originalValue(double value)' procedure.<br></html>", filter2.globalInfo());
      assertFalse(filter2.isFocusCycleRoot());
      assertEquals("Changes the order of the classes so that the class values are no longer of in the order specified in the header. The values will be in the order specified by the user -- it could be either in ascending/descending order by the class frequency or in random order. Note that this filter currently does not change the header, only the class values of the instances, so there is not much point in using it in conjunction with the FilteredClassifier. The value can also be converted back using 'originalValue(double value)' procedure.", classOrder0.globalInfo());
      assertEquals(1L, classOrder0.getSeed());
      assertEquals("Specify the seed of randomization of the class order", classOrder0.seedTipText());
      assertFalse(classOrder0.isOutputFormatDefined());
      assertEquals("Specify the class order after the filtering", classOrder0.classOrderTipText());
      assertEquals(0, classOrder0.getClassOrder());
      assertFalse(classOrder0.isFirstBatchDone());
      assertFalse(classOrder0.mayRemoveInstanceAfterFirstBatchDone());
      assertTrue(classOrder0.isNewBatch());
      assertFalse(filter2.equals((Object)filter0));
      assertFalse(filter2.equals((Object)filter1));
      
      SubstringLabeler substringLabeler1 = new SubstringLabeler();
      assertEquals("", substringLabeler1.getMatchDetails());
      assertEquals("SubstringLabeler", substringLabeler1.getCustomName());
      assertFalse(substringLabeler1.getIgnoreRepaint());
      assertFalse(substringLabeler1.getNominalBinary());
      assertFalse(substringLabeler1.getConsumeNonMatching());
      assertTrue(substringLabeler1.getFocusTraversalKeysEnabled());
      assertEquals("Match", substringLabeler1.getMatchAttributeName());
      assertFalse(substringLabeler1.isFocusTraversalPolicySet());
      assertEquals("Matches substrings in String attributes using either literal or regular expression matches. The value of a new attribute is set to reflect the status of the match. The new attribute can be either binary (in which case values indicate match or no match) or multi-valued nominal, in which case a label must be associated with each distinct matching rule. In the case of labeled matches, the user can opt to have non matching instances output with missing value set for the new attribute or not output at all (i.e. consumed by the step).", substringLabeler1.globalInfo());
      assertFalse(substringLabeler1.isFocusCycleRoot());
      assertFalse(substringLabeler1.isFocusTraversalPolicyProvider());
      assertFalse(substringLabeler1.isBusy());
      assertFalse(substringLabeler1.equals((Object)substringLabeler0));
      assertNotNull(substringLabeler1);
      
      Filter filter3 = new Filter();
      assertEquals("AllFilter", filter3.getCustomName());
      assertFalse(filter3.isBusy());
      assertTrue(filter3.getFocusTraversalKeysEnabled());
      assertFalse(filter3.isFocusCycleRoot());
      assertFalse(filter3.isFocusTraversalPolicySet());
      assertFalse(filter3.isFocusTraversalPolicyProvider());
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", filter3.globalInfo());
      assertFalse(filter3.getIgnoreRepaint());
      assertFalse(filter3.equals((Object)filter0));
      assertFalse(filter3.equals((Object)filter1));
      assertFalse(filter3.equals((Object)filter2));
      assertNotNull(filter3);
      
      CrossValidationFoldMaker crossValidationFoldMaker0 = new CrossValidationFoldMaker();
      assertFalse(crossValidationFoldMaker0.isFocusTraversalPolicySet());
      assertEquals("The randomization seed", crossValidationFoldMaker0.seedTipText());
      assertFalse(crossValidationFoldMaker0.isFocusCycleRoot());
      assertEquals(10, crossValidationFoldMaker0.getFolds());
      assertFalse(crossValidationFoldMaker0.getIgnoreRepaint());
      assertEquals("The number of train and test splits to produce", crossValidationFoldMaker0.foldsTipText());
      assertFalse(crossValidationFoldMaker0.isBusy());
      assertEquals("Split an incoming data set into cross validation folds. Separate train and test sets are produced for each of the k folds.", crossValidationFoldMaker0.globalInfo());
      assertFalse(crossValidationFoldMaker0.getPreserveOrder());
      assertTrue(crossValidationFoldMaker0.getFocusTraversalKeysEnabled());
      assertEquals("CrossValidationFoldMaker", crossValidationFoldMaker0.getCustomName());
      assertFalse(crossValidationFoldMaker0.isFocusTraversalPolicyProvider());
      assertEquals(1, crossValidationFoldMaker0.getSeed());
      assertNotNull(crossValidationFoldMaker0);
      
      TextField textField0 = null;
      try {
        textField0 = new TextField(1);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }
}
