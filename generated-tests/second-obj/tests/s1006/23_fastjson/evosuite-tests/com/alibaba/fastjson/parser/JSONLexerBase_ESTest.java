/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 06 20:15:28 GMT 2018
 */

package com.alibaba.fastjson.parser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.alibaba.fastjson.parser.Feature;
import com.alibaba.fastjson.parser.JSONLexerBase;
import com.alibaba.fastjson.parser.JSONReaderScanner;
import com.alibaba.fastjson.parser.JSONScanner;
import com.alibaba.fastjson.parser.SymbolTable;
import java.io.BufferedReader;
import java.io.CharArrayReader;
import java.io.DataInputStream;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.PipedInputStream;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.PushbackInputStream;
import java.io.StringReader;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.nio.charset.Charset;
import java.time.chrono.ChronoLocalDate;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Collection;
import java.util.Date;
import java.util.HashSet;
import java.util.LinkedList;
import java.util.Locale;
import java.util.Set;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import java.util.UUID;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockFileReader;
import org.evosuite.runtime.mock.java.time.chrono.MockHijrahDate;
import org.evosuite.runtime.mock.java.time.chrono.MockJapaneseDate;
import org.evosuite.runtime.mock.java.time.chrono.MockMinguoDate;
import org.evosuite.runtime.mock.java.time.chrono.MockThaiBuddhistDate;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONLexerBase_ESTest extends JSONLexerBase_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("custommapdeserializer");
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      Locale.getISOLanguages();
      jSONReaderScanner0.setLocale(locale0);
      int int0 = jSONReaderScanner0.matchStat();
      assertEquals(0, int0);
      
      String string0 = jSONReaderScanner0.tokenName();
      assertEquals("Unknown", string0);
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("7?| X>x)_m~!9`", 3);
      jSONReaderScanner0.setToken(3);
      assertEquals(3, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("71_Ak");
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('7', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNotNull(jSONReaderScanner0);
      
      boolean boolean0 = jSONReaderScanner0.scanBoolean('8');
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('7', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(boolean0);
      
      int int0 = jSONReaderScanner0.indexOf('[', 84);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.token());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals('7', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals((-1), int0);
      
      int int1 = jSONReaderScanner0.token();
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.token());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals('7', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, int1);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("true");
      jSONReaderScanner0.intValue();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.integerValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.alibaba.fastjson.parser.JSONReaderScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      int int0 = (-4212);
      char[] charArray0 = new char[3];
      charArray0[0] = ')';
      SymbolTable symbolTable0 = new SymbolTable(')');
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 44);
      jSONReaderScanner0.stringVal();
      jSONReaderScanner0.scanDecimal('p');
      Locale locale0 = new Locale("+bkB@/2f*C.", "");
      jSONReaderScanner0.longValue();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFalse();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("");
      jSONReaderScanner0.matchStat = (-1720807251);
      jSONReaderScanner0.nextIdent();
      jSONReaderScanner0.isRef();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFalse();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("71_Ak");
      jSONReaderScanner0.resetStringPosition();
      jSONReaderScanner0.info();
      jSONReaderScanner0.nextIdent();
      int int0 = jSONReaderScanner0.getFeatures();
      assertEquals('_', jSONReaderScanner0.getCurrent());
      assertEquals(989, int0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("gU[K@=i5");
      jSONReaderScanner0.scanFieldUUID(charArray0);
      jSONReaderScanner0.nextToken();
      jSONReaderScanner0.scanString('g');
      assertEquals(1, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[1] = 'l';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 2770, 'l');
      Locale locale0 = Locale.TAIWAN;
      locale0.getDisplayScript((Locale) null);
      jSONReaderScanner0.scanDecimal('r');
      // Undeclared exception!
      try { 
        jSONReaderScanner0.integerValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.alibaba.fastjson.parser.JSONReaderScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = '-';
      charArray0[1] = '0';
      charArray0[2] = 'c';
      charArray0[3] = '{';
      charArray0[4] = '~';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 1139, 1139);
      Locale locale0 = Locale.TAIWAN;
      jSONReaderScanner0.locale = locale0;
      locale0.getDisplayScript(jSONReaderScanner0.locale);
      jSONReaderScanner0.pos = 2767;
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanDecimal('c');
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = '\u0084';
      charArray0[1] = '\u0084';
      charArray0[2] = '\u0084';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 1139, 2716);
      Locale locale0 = Locale.TAIWAN;
      Locale locale1 = Locale.US;
      locale0.getDisplayScript(locale1);
      jSONReaderScanner0.scanDecimal('`');
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanNullOrNew();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse null or new
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("71_Ak");
      Locale locale0 = new Locale("71_Ak", "71_Ak");
      Locale.forLanguageTag("9x");
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanDecimal('%');
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("71_Ak");
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.token());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('7', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNotNull(jSONReaderScanner0);
      
      char[] charArray0 = new char[0];
      boolean boolean0 = jSONReaderScanner0.matchField(charArray0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals('_', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(2, jSONReaderScanner0.token());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertTrue(boolean0);
      assertArrayEquals(new char[] {}, charArray0);
      
      jSONReaderScanner0.sp = 360;
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals('_', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(2, jSONReaderScanner0.token());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      
      boolean boolean1 = jSONReaderScanner0.scanBoolean('8');
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals('_', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(2, jSONReaderScanner0.token());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      jSONReaderScanner0.close();
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals('_', jSONReaderScanner0.getCurrent());
      assertEquals(2, jSONReaderScanner0.token());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("71_Ak");
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('7', jSONReaderScanner0.getCurrent());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertNotNull(jSONReaderScanner0);
      
      char[] charArray0 = new char[0];
      jSONReaderScanner0.sp = 360;
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('7', jSONReaderScanner0.getCurrent());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      
      boolean boolean0 = jSONReaderScanner0.scanBoolean('8');
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('7', jSONReaderScanner0.getCurrent());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertFalse(boolean0);
      
      jSONReaderScanner0.close();
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('7', jSONReaderScanner0.getCurrent());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals((-1), jSONReaderScanner0.matchStat());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("com.alibaba.fastjson.parser.DefaultJSONParser", 58);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('c', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(58, jSONReaderScanner0.getFeatures());
      assertNotNull(jSONReaderScanner0);
      
      jSONReaderScanner0.scanIdent();
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(18, jSONReaderScanner0.token());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('.', jSONReaderScanner0.getCurrent());
      assertEquals(58, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      char[] charArray0 = new char[7];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("scan null error");
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals('s', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertNotNull(jSONReaderScanner0);
      
      JSONScanner jSONScanner0 = new JSONScanner("scan null error");
      assertEquals(0, jSONScanner0.matchStat);
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.token());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals('s', jSONScanner0.getCurrent());
      assertNull(jSONScanner0.stringDefaultValue());
      assertNotNull(jSONScanner0);
      
      float[][] floatArray0 = jSONScanner0.scanFieldFloatArray2(charArray0);
      assertEquals((-2), jSONScanner0.matchStat);
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.token());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals((-2), jSONScanner0.matchStat());
      assertEquals('s', jSONScanner0.getCurrent());
      assertNull(jSONScanner0.stringDefaultValue());
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNull(floatArray0);
      
      int[] intArray0 = jSONScanner0.scanFieldIntArray(charArray0);
      assertEquals((-2), jSONScanner0.matchStat);
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.token());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals((-2), jSONScanner0.matchStat());
      assertEquals('s', jSONScanner0.getCurrent());
      assertNull(jSONScanner0.stringDefaultValue());
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNull(intArray0);
      
      // Undeclared exception!
      try { 
        JSONLexerBase.readString(charArray0, 240);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = 'I';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 'I');
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals('I', jSONReaderScanner0.getCurrent());
      assertArrayEquals(new char[] {'I', '\u0000', '\u0000'}, charArray0);
      assertNotNull(jSONReaderScanner0);
      
      int[] intArray0 = jSONReaderScanner0.scanFieldIntArray(charArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('I', jSONReaderScanner0.getCurrent());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertArrayEquals(new char[] {'I', '\u0000', '\u0000'}, charArray0);
      assertNull(intArray0);
      
      float float0 = jSONReaderScanner0.scanFieldFloat(charArray0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals('I', jSONReaderScanner0.getCurrent());
      assertEquals(0.0F, float0, 0.01F);
      assertArrayEquals(new char[] {'I', '\u0000', '\u0000'}, charArray0);
      
      boolean boolean0 = jSONReaderScanner0.scanFieldBoolean(charArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('I', jSONReaderScanner0.getCurrent());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertFalse(boolean0);
      assertArrayEquals(new char[] {'I', '\u0000', '\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("c1_A");
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('c', jSONReaderScanner0.getCurrent());
      assertNotNull(jSONReaderScanner0);
      
      char[] charArray0 = new char[0];
      SymbolTable symbolTable0 = new SymbolTable(116);
      assertNotNull(symbolTable0);
      
      String string0 = jSONReaderScanner0.stringVal();
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('c', jSONReaderScanner0.getCurrent());
      assertEquals("", string0);
      assertNotNull(string0);
      
      TimeZone timeZone0 = TimeZone.getDefault();
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      jSONReaderScanner0.timeZone = timeZone0;
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('c', jSONReaderScanner0.getCurrent());
      assertEquals("GMT", timeZone0.getID());
      assertEquals("GMT", jSONReaderScanner0.timeZone.getID());
      assertEquals(0, jSONReaderScanner0.timeZone.getDSTSavings());
      assertFalse(jSONReaderScanner0.timeZone.useDaylightTime());
      assertEquals(0, jSONReaderScanner0.timeZone.getRawOffset());
      
      float float0 = jSONReaderScanner0.scanFieldFloat(charArray0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('c', jSONReaderScanner0.getCurrent());
      assertEquals(0.0F, float0, 0.01F);
      assertArrayEquals(new char[] {}, charArray0);
      
      MockDate mockDate0 = new MockDate();
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertNotNull(mockDate0);
      
      jSONReaderScanner0.nextIdent();
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('_', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(18, jSONReaderScanner0.token());
      
      long long0 = jSONReaderScanner0.longValue();
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('_', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(18, jSONReaderScanner0.token());
      assertEquals(511L, long0);
      
      PipedReader pipedReader0 = null;
      try {
        pipedReader0 = new PipedReader((PipedWriter) null, 116);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Locale locale0 = Locale.TAIWAN;
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertNotNull(locale0);
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("VZ3fDK'1D%^A0/jfEWL");
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('V', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNotNull(jSONReaderScanner0);
      
      SymbolTable symbolTable0 = new SymbolTable(470);
      assertNotNull(symbolTable0);
      
      String string0 = jSONReaderScanner0.scanSymbolUnQuoted(symbolTable0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals('\'', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(18, jSONReaderScanner0.token());
      assertEquals("VZ3fDK", string0);
      assertNotNull(string0);
      
      Class<MockJapaneseDate> class0 = MockJapaneseDate.class;
      // Undeclared exception!
      try { 
        jSONReaderScanner0.newCollectionByType(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.time.chrono.MockJapaneseDate cannot be cast to java.util.Collection
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("TODO");
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('T', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertNotNull(jSONReaderScanner0);
      
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanNullOrNew();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse null or new
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("71_Ak");
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('7', jSONReaderScanner0.getCurrent());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertNotNull(jSONReaderScanner0);
      
      char[] charArray0 = new char[5];
      charArray0[1] = 'A';
      charArray0[2] = 'h';
      charArray0[3] = '*';
      charArray0[4] = '*';
      boolean boolean0 = jSONReaderScanner0.matchField(charArray0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('7', jSONReaderScanner0.getCurrent());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertFalse(boolean0);
      assertArrayEquals(new char[] {'\u0000', 'A', 'h', '*', '*'}, charArray0);
      
      boolean boolean1 = jSONReaderScanner0.scanBoolean('|');
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('7', jSONReaderScanner0.getCurrent());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      jSONReaderScanner0.close();
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('7', jSONReaderScanner0.getCurrent());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextTokenWithChar('*');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match * - 7, info : 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("TnlwjtprsU$WAlpO");
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(0, jSONScanner0.matchStat());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals('T', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.token());
      assertEquals(989, jSONScanner0.getFeatures());
      assertFalse(jSONScanner0.isEOF());
      assertNotNull(jSONScanner0);
      
      char[] charArray0 = new char[1];
      float float0 = jSONScanner0.scanFieldFloat(charArray0);
      assertEquals((-2), jSONScanner0.matchStat);
      assertEquals((-2), jSONScanner0.matchStat());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals('T', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.token());
      assertEquals(989, jSONScanner0.getFeatures());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0.0F, float0, 0.01F);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      
      int int0 = jSONScanner0.intValue();
      assertEquals((-2), jSONScanner0.matchStat);
      assertEquals((-2), jSONScanner0.matchStat());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals('T', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.token());
      assertEquals(989, jSONScanner0.getFeatures());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, int0);
      
      int int1 = jSONScanner0.scanType("TnlwjtprsU$WAlpO");
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(0, jSONScanner0.matchStat());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals('T', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.token());
      assertEquals(989, jSONScanner0.getFeatures());
      assertFalse(jSONScanner0.isEOF());
      assertEquals((-2), int1);
      assertFalse(int1 == int0);
      
      jSONScanner0.nextIdent();
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(0, jSONScanner0.matchStat());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(18, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertEquals('$', jSONScanner0.getCurrent());
      assertEquals(989, jSONScanner0.getFeatures());
      assertFalse(jSONScanner0.isEOF());
      
      byte[] byteArray0 = jSONScanner0.bytesValue();
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(0, jSONScanner0.matchStat());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(18, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertEquals('$', jSONScanner0.getCurrent());
      assertEquals(989, jSONScanner0.getFeatures());
      assertFalse(jSONScanner0.isEOF());
      assertArrayEquals(new byte[] {(byte)78, (byte)121, (byte)112, (byte) (-114), (byte) (-38), (byte)107, (byte) (-79)}, byteArray0);
      assertNotNull(byteArray0);
      
      // Undeclared exception!
      try { 
        JSONLexerBase.readString(charArray0, 95);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("new");
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals('n', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertNotNull(jSONReaderScanner0);
      
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      Locale locale1 = Locale.forLanguageTag("new");
      assertEquals("", locale1.getCountry());
      assertEquals("new", locale1.toString());
      assertEquals("new", locale1.getLanguage());
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.getISO3Country());
      assertEquals("new", locale1.getISO3Language());
      assertFalse(locale1.equals((Object)locale0));
      assertNotSame(locale1, locale0);
      assertNotNull(locale1);
      
      String string0 = locale0.getDisplayScript(locale1);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale1.getCountry());
      assertEquals("new", locale1.toString());
      assertEquals("new", locale1.getLanguage());
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.getISO3Country());
      assertEquals("new", locale1.getISO3Language());
      assertEquals("", string0);
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(locale1.equals((Object)locale0));
      assertNotSame(locale0, locale1);
      assertNotSame(locale1, locale0);
      assertNotNull(string0);
      
      BigDecimal bigDecimal0 = jSONReaderScanner0.scanDecimal('%');
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals('n', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertNull(bigDecimal0);
      
      boolean boolean0 = jSONReaderScanner0.isEOF();
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals('n', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanTrue();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse true
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(", ");
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(',', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertNotNull(jSONReaderScanner0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      double double0 = jSONReaderScanner0.scanDouble('\u0081');
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(',', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0.0, double0, 0.01);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      SymbolTable symbolTable0 = new SymbolTable('\u0081');
      assertNotNull(symbolTable0);
      
      String string0 = jSONReaderScanner0.scanSymbol(symbolTable0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(16, jSONReaderScanner0.token());
      assertEquals(' ', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertNull(string0);
      
      int int0 = jSONReaderScanner0.scanInt('X');
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(16, jSONReaderScanner0.token());
      assertEquals(' ', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, int0);
      
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanTrue();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse true
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("hR", 447);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('h', jSONReaderScanner0.getCurrent());
      assertEquals(447, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertNotNull(jSONReaderScanner0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'e';
      charArray0[1] = 'm';
      charArray0[2] = 'd';
      charArray0[3] = '1';
      charArray0[5] = '4';
      charArray0[6] = 'E';
      charArray0[7] = 'n';
      // Undeclared exception!
      try { 
        jSONReaderScanner0.matchField2(charArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("71_A");
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals('7', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertNotNull(jSONReaderScanner0);
      
      float float0 = jSONReaderScanner0.scanFloat('(');
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals('7', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(71.0F, float0, 0.01F);
      
      boolean boolean0 = jSONReaderScanner0.scanBoolean('L');
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals('7', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[6] = 'V';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("error parse new");
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals('e', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertNotNull(jSONReaderScanner0);
      
      float float0 = jSONReaderScanner0.scanFloat('V');
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals('e', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(0.0F, float0, 0.01F);
      
      boolean boolean0 = jSONReaderScanner0.scanBoolean('E');
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals('e', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertFalse(boolean0);
      
      BigDecimal bigDecimal0 = new BigDecimal((int) 'E');
      assertEquals((short)69, bigDecimal0.shortValue());
      assertEquals((byte)69, bigDecimal0.byteValue());
      assertNotNull(bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("(\"cvw");
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals('(', jSONReaderScanner0.getCurrent());
      assertNotNull(jSONReaderScanner0);
      
      Locale locale0 = new Locale("(\"cvw", "(\"cvw");
      assertEquals("", locale0.getVariant());
      assertEquals("(\"CVW", locale0.getCountry());
      assertEquals("(\"cvw_(\"CVW", locale0.toString());
      assertEquals("(\"cvw", locale0.getLanguage());
      assertNotNull(locale0);
      
      jSONReaderScanner0.nextIdent();
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(10, jSONReaderScanner0.token());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('\"', jSONReaderScanner0.getCurrent());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.matchStat());
      
      String string0 = "_@EtQBDXZ.tVCij";
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("_@EtQBDXZ.tVCij");
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertEquals('_', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.pos());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertFalse(jSONReaderScanner1.isEOF());
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertNotNull(jSONReaderScanner1);
      
      // Undeclared exception!
      try { 
        jSONReaderScanner1.floatValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.alibaba.fastjson.parser.JSONReaderScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("unclosed.str.lit", 1139);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(1139, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals('u', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertNotNull(jSONReaderScanner0);
      
      TimeZone timeZone0 = jSONReaderScanner0.getTimeZone();
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(1139, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals('u', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      jSONReaderScanner0.nextToken(1139);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(1139, jSONReaderScanner0.getFeatures());
      assertEquals('.', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(18, jSONReaderScanner0.token());
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'c';
      charArray0[1] = 'c';
      BigInteger bigInteger0 = jSONReaderScanner0.scanFieldBigInteger(charArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(1139, jSONReaderScanner0.getFeatures());
      assertEquals('.', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(18, jSONReaderScanner0.token());
      assertArrayEquals(new char[] {'c', 'c'}, charArray0);
      assertNull(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("TnbwjtprsU$WAlpO");
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(0, jSONScanner0.token());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.pos());
      assertFalse(jSONScanner0.isEOF());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals('T', jSONScanner0.getCurrent());
      assertNotNull(jSONScanner0);
      
      char[] charArray0 = new char[0];
      int int0 = jSONScanner0.intValue();
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(0, jSONScanner0.token());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.pos());
      assertFalse(jSONScanner0.isEOF());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals('T', jSONScanner0.getCurrent());
      assertEquals(0, int0);
      
      int int1 = jSONScanner0.scanType("TnbwjtprsU$WAlpO");
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(0, jSONScanner0.token());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.pos());
      assertFalse(jSONScanner0.isEOF());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals('T', jSONScanner0.getCurrent());
      assertEquals((-2), int1);
      assertFalse(int1 == int0);
      
      boolean boolean0 = jSONScanner0.matchField(charArray0);
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(18, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertFalse(jSONScanner0.isEOF());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals('$', jSONScanner0.getCurrent());
      assertTrue(boolean0);
      assertArrayEquals(new char[] {}, charArray0);
      
      // Undeclared exception!
      try { 
        jSONScanner0.nextIdent();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("TnbwjtprsU$WAlpO");
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.pos());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals('T', jSONScanner0.getCurrent());
      assertEquals(989, jSONScanner0.getFeatures());
      assertFalse(jSONScanner0.isEOF());
      assertNotNull(jSONScanner0);
      
      jSONScanner0.skipWhitespace();
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.pos());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals('T', jSONScanner0.getCurrent());
      assertEquals(989, jSONScanner0.getFeatures());
      assertFalse(jSONScanner0.isEOF());
      
      char char0 = 'a';
      jSONScanner0.nextToken();
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.pos());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals('$', jSONScanner0.getCurrent());
      assertEquals(989, jSONScanner0.getFeatures());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(18, jSONScanner0.token());
      
      SymbolTable symbolTable0 = new SymbolTable(12);
      assertNotNull(symbolTable0);
      
      // Undeclared exception!
      try { 
        jSONScanner0.decimalValue(true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      char[] charArray0 = new char[16];
      charArray0[0] = '-';
      charArray0[1] = '-';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 47);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals('-', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertNotNull(jSONReaderScanner0);
      
      jSONReaderScanner0.resetStringPosition();
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals('-', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      
      int[] intArray0 = jSONReaderScanner0.scanFieldIntArray(charArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals('-', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      String string0 = "71A\\k";
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("71Ak");
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.token());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('7', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNotNull(jSONReaderScanner0);
      
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed string : \u001A
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = '*';
      charArray0[1] = '{';
      charArray0[2] = '{';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 102);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals('*', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertArrayEquals(new char[] {'*', '{', '{'}, charArray0);
      assertNotNull(jSONReaderScanner0);
      
      UUID uUID0 = jSONReaderScanner0.scanUUID('*');
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals('*', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertArrayEquals(new char[] {'*', '{', '{'}, charArray0);
      assertNull(uUID0);
      
      jSONReaderScanner0.hasSpecial = true;
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals('*', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      
      float float0 = jSONReaderScanner0.scanFloat('#');
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals('*', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0.0F, float0, 0.01F);
      assertArrayEquals(new char[] {'*', '{', '{'}, charArray0);
      
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextTokenWithColon(2010);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - *, info : 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("p", 7877);
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals('p', jSONScanner0.getCurrent());
      assertEquals("", jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(7877, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.token());
      assertNotNull(jSONScanner0);
      
      char[] charArray0 = new char[9];
      charArray0[0] = '8';
      charArray0[2] = '8';
      charArray0[3] = '8';
      charArray0[4] = '8';
      charArray0[5] = '8';
      charArray0[6] = '8';
      charArray0[7] = '8';
      charArray0[8] = '8';
      float[][] floatArray0 = jSONScanner0.scanFieldFloatArray2(charArray0);
      assertEquals((-2), jSONScanner0.matchStat);
      assertEquals('p', jSONScanner0.getCurrent());
      assertEquals("", jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(7877, jSONScanner0.getFeatures());
      assertEquals((-2), jSONScanner0.matchStat());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.token());
      assertArrayEquals(new char[] {'8', '\u0000', '8', '8', '8', '8', '8', '8', '8'}, charArray0);
      assertNull(floatArray0);
      
      Locale locale0 = jSONScanner0.getLocale();
      assertEquals((-2), jSONScanner0.matchStat);
      assertEquals('p', jSONScanner0.getCurrent());
      assertEquals("", jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(7877, jSONScanner0.getFeatures());
      assertEquals((-2), jSONScanner0.matchStat());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.token());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertNotNull(locale0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      char[] charArray0 = new char[7];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("error parse new");
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('e', jSONReaderScanner0.getCurrent());
      assertNotNull(jSONReaderScanner0);
      
      jSONReaderScanner0.stringDefaultValue = "p";
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals("p", jSONReaderScanner0.stringDefaultValue());
      assertEquals('e', jSONReaderScanner0.getCurrent());
      
      String string0 = JSONLexerBase.readString(charArray0, 0);
      assertEquals("", string0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Locale locale0 = Locale.ITALY;
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("it_IT", locale0.toString());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("IT", locale0.getCountry());
      assertNotNull(locale0);
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("hy", (-2));
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals("", jSONReaderScanner0.stringDefaultValue());
      assertEquals('h', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals((-2), jSONReaderScanner0.getFeatures());
      assertNotNull(jSONReaderScanner0);
      
      jSONReaderScanner0.matchStat = 1480;
      assertEquals(1480, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals("", jSONReaderScanner0.stringDefaultValue());
      assertEquals('h', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-2), jSONReaderScanner0.getFeatures());
      
      double double0 = jSONReaderScanner0.scanDouble('l');
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals("", jSONReaderScanner0.stringDefaultValue());
      assertEquals('h', jSONReaderScanner0.getCurrent());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-2), jSONReaderScanner0.getFeatures());
      assertEquals(0.0, double0, 0.01);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      SymbolTable symbolTable0 = null;
      try {
        symbolTable0 = new SymbolTable((-2));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.SymbolTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("50hwh<");
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals('5', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      assertFalse(jSONReaderScanner0.isEOF());
      assertNotNull(jSONReaderScanner0);
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("trim");
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertEquals(0, jSONReaderScanner1.token());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertEquals(0, jSONReaderScanner1.pos());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals('t', jSONReaderScanner1.getCurrent());
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertNotNull(jSONReaderScanner1);
      
      Locale locale0 = Locale.JAPAN;
      assertEquals("JP", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("ja_JP", locale0.toString());
      assertNotNull(locale0);
      
      jSONReaderScanner1.putChar('9');
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertEquals(0, jSONReaderScanner1.token());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertEquals(0, jSONReaderScanner1.pos());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals('t', jSONReaderScanner1.getCurrent());
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      
      double double0 = jSONReaderScanner0.scanDouble('Y');
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals('5', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(50.0, double0, 0.01);
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner1));
      assertNotSame(jSONReaderScanner0, jSONReaderScanner1);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      SymbolTable symbolTable0 = null;
      try {
        symbolTable0 = new SymbolTable((-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.SymbolTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("71_Ak");
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals('7', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertNotNull(jSONReaderScanner0);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("71_Ak", 0);
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertEquals('7', jSONReaderScanner1.getCurrent());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals(0, jSONReaderScanner1.getFeatures());
      assertEquals(0, jSONReaderScanner1.token());
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertNotNull(jSONReaderScanner1);
      
      Feature feature0 = Feature.InternFieldNames;
      jSONReaderScanner0.config(feature0, false);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals('7', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(973, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner1));
      assertNotSame(jSONReaderScanner0, jSONReaderScanner1);
      
      TimeZone timeZone0 = jSONReaderScanner1.getTimeZone();
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertEquals('7', jSONReaderScanner1.getCurrent());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals(0, jSONReaderScanner1.getFeatures());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals("GMT", timeZone0.getID());
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertNotNull(timeZone0);
      
      // Undeclared exception!
      try { 
        jSONReaderScanner1.doubleValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.alibaba.fastjson.parser.JSONReaderScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      char[] charArray0 = new char[7];
      int int0 = 3;
      JSONScanner jSONScanner0 = new JSONScanner("WriteNullNumberAsZero");
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(0, jSONScanner0.token());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals('W', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.pos());
      assertNull(jSONScanner0.stringDefaultValue());
      assertNotNull(jSONScanner0);
      
      jSONScanner0.nextToken(3);
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(1, jSONScanner0.token());
      assertEquals('r', jSONScanner0.getCurrent());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.pos());
      assertNull(jSONScanner0.stringDefaultValue());
      
      // Undeclared exception!
      try { 
        jSONScanner0.doubleValue();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      char[] charArray0 = new char[0];
      StringReader stringReader0 = new StringReader("44Tk");
      assertNotNull(stringReader0);
      
      stringReader0.reset();
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('4', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertNotNull(jSONReaderScanner0);
      
      boolean boolean1 = jSONReaderScanner0.scanFieldBoolean(charArray0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('4', jSONReaderScanner0.getCurrent());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new char[] {}, charArray0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = '5';
      charArray0[1] = 'c';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 1139, 1139);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals('5', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(1139, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      assertArrayEquals(new char[] {'5', 'c'}, charArray0);
      assertNotNull(jSONReaderScanner0);
      
      Locale locale0 = Locale.CANADA_FRENCH;
      assertEquals("CA", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("fr_CA", locale0.toString());
      assertNotNull(locale0);
      
      boolean boolean0 = jSONReaderScanner0.scanFieldBoolean(charArray0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals('5', jSONReaderScanner0.getCurrent());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(1139, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      assertFalse(boolean0);
      assertArrayEquals(new char[] {'5', 'c'}, charArray0);
      
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      Locale.setDefault(locale_Category0, locale0);
      assertEquals("CA", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("fr_CA", locale0.toString());
      
      boolean boolean1 = jSONReaderScanner0.scanBoolean('c');
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals('5', jSONReaderScanner0.getCurrent());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(1139, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new char[] {'5', 'c'}, charArray0);
      
      jSONReaderScanner0.nextToken();
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals(2, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals('\u001A', jSONReaderScanner0.getCurrent());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(1139, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertArrayEquals(new char[] {'5', 'c'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      char[] charArray0 = new char[16];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertTrue(jSONReaderScanner0.isEOF());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertNotNull(jSONReaderScanner0);
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(charArray0, 0, 0);
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertTrue(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals(0, jSONReaderScanner1.pos());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals('\u0000', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.getFeatures());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertNotNull(jSONReaderScanner1);
      
      Locale locale0 = Locale.CANADA_FRENCH;
      assertEquals("fr_CA", locale0.toString());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("CA", locale0.getCountry());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      int int0 = jSONReaderScanner1.indexOf('5', 0);
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertTrue(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals(0, jSONReaderScanner1.pos());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals('\u0000', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.getFeatures());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertEquals((-1), int0);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      
      Class<String> class0 = String.class;
      Collection<String> collection0 = jSONReaderScanner0.scanFieldStringArray(charArray0, class0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertTrue(jSONReaderScanner0.isEOF());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner1));
      assertNotSame(jSONReaderScanner0, jSONReaderScanner1);
      assertNull(collection0);
      
      double double0 = jSONReaderScanner1.scanDouble('A');
      assertEquals((-1), jSONReaderScanner1.matchStat);
      assertTrue(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals(0, jSONReaderScanner1.pos());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals('\u0000', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.getFeatures());
      assertEquals((-1), jSONReaderScanner1.matchStat());
      assertEquals(0.0, double0, 0.01);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      
      // Undeclared exception!
      try { 
        jSONReaderScanner0.sub_chars('A', (-1));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -1
         //
         verifyException("com.alibaba.fastjson.parser.JSONReaderScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = '~';
      charArray0[1] = '~';
      charArray0[2] = '~';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 1139, 1139);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals('~', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(1139, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertArrayEquals(new char[] {'~', '~', '~'}, charArray0);
      assertNotNull(jSONReaderScanner0);
      
      Locale locale0 = Locale.CANADA_FRENCH;
      assertEquals("CA", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("fra", locale0.getISO3Language());
      assertNotNull(locale0);
      
      boolean boolean0 = jSONReaderScanner0.isRef();
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals('~', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(1139, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(boolean0);
      assertArrayEquals(new char[] {'~', '~', '~'}, charArray0);
      
      String string0 = jSONReaderScanner0.stringVal();
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals('~', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(1139, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals("", string0);
      assertArrayEquals(new char[] {'~', '~', '~'}, charArray0);
      assertNotNull(string0);
      
      boolean boolean1 = jSONReaderScanner0.scanFieldBoolean(charArray0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals('~', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(1139, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new char[] {'~', '~', '~'}, charArray0);
      
      long long0 = jSONReaderScanner0.scanFieldSymbol(charArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals('~', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(1139, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0L, long0);
      assertArrayEquals(new char[] {'~', '~', '~'}, charArray0);
      
      boolean boolean2 = jSONReaderScanner0.scanBoolean('~');
      assertEquals(3, jSONReaderScanner0.matchStat);
      assertEquals('\u001A', jSONReaderScanner0.getCurrent());
      assertEquals(3, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.token());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(1139, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertTrue(jSONReaderScanner0.isEOF());
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertArrayEquals(new char[] {'~', '~', '~'}, charArray0);
      
      jSONReaderScanner0.nextToken();
      assertEquals(3, jSONReaderScanner0.matchStat);
      assertEquals('\u001A', jSONReaderScanner0.getCurrent());
      assertEquals(3, jSONReaderScanner0.matchStat());
      assertEquals(20, jSONReaderScanner0.token());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(1139, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertTrue(jSONReaderScanner0.isEOF());
      assertArrayEquals(new char[] {'~', '~', '~'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      char[] charArray0 = new char[7];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("7LFrn|!GR\"q@P~T=kQ+");
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('7', jSONReaderScanner0.getCurrent());
      assertNotNull(jSONReaderScanner0);
      
      double double0 = jSONReaderScanner0.scanFieldDouble(charArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('7', jSONReaderScanner0.getCurrent());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("7LFrn|!GR\"q@P~T=kQ+");
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals('7', jSONReaderScanner1.getCurrent());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.token());
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertNotNull(jSONReaderScanner1);
      
      Locale locale0 = Locale.CANADA_FRENCH;
      assertEquals("fr", locale0.getLanguage());
      assertEquals("CA", locale0.getCountry());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr_CA", locale0.toString());
      assertNotNull(locale0);
      
      boolean boolean0 = jSONReaderScanner0.scanFieldBoolean(charArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('7', jSONReaderScanner0.getCurrent());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertFalse(boolean0);
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner1));
      assertNotSame(jSONReaderScanner0, jSONReaderScanner1);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      String string0 = jSONReaderScanner0.stringVal();
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('7', jSONReaderScanner0.getCurrent());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertEquals("", string0);
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner1));
      assertNotSame(jSONReaderScanner0, jSONReaderScanner1);
      assertNotNull(string0);
      
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      Locale.setDefault(locale_Category0, locale0);
      assertEquals("fr", locale0.getLanguage());
      assertEquals("CA", locale0.getCountry());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr_CA", locale0.toString());
      
      boolean boolean1 = jSONReaderScanner0.scanBoolean('A');
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('7', jSONReaderScanner0.getCurrent());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertFalse(boolean1);
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner1));
      assertTrue(boolean1 == boolean0);
      assertNotSame(jSONReaderScanner0, jSONReaderScanner1);
      
      jSONReaderScanner1.nextToken();
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals('F', jSONReaderScanner1.getCurrent());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertEquals(2, jSONReaderScanner1.token());
      assertFalse(jSONReaderScanner1.isEOF());
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Locale locale0 = new Locale("new", "new");
      assertEquals("", locale0.getVariant());
      assertEquals("NEW", locale0.getCountry());
      assertEquals("new", locale0.getISO3Language());
      assertEquals("new", locale0.getLanguage());
      assertEquals("new_NEW", locale0.toString());
      assertNotNull(locale0);
      
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("YGVg2'=UZ");
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals('Y', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertNotNull(jSONReaderScanner0);
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("new", 1139);
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertEquals('n', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals(1139, jSONReaderScanner1.getFeatures());
      assertEquals(0, jSONReaderScanner1.pos());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertNotNull(jSONReaderScanner1);
      
      TimeZone timeZone0 = jSONReaderScanner0.getTimeZone();
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals('Y', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals("GMT", timeZone0.getID());
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner1));
      assertNotSame(jSONReaderScanner0, jSONReaderScanner1);
      assertNotNull(timeZone0);
      
      jSONReaderScanner1.nextToken(73);
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertEquals(9, jSONReaderScanner1.token());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertEquals('\u001A', jSONReaderScanner1.getCurrent());
      assertTrue(jSONReaderScanner1.isEOF());
      assertEquals(1139, jSONReaderScanner1.getFeatures());
      assertEquals(0, jSONReaderScanner1.pos());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      
      int int0 = jSONReaderScanner1.scanInt('3');
      assertEquals((-1), jSONReaderScanner1.matchStat);
      assertEquals((-1), jSONReaderScanner1.matchStat());
      assertEquals(9, jSONReaderScanner1.token());
      assertEquals('\u001A', jSONReaderScanner1.getCurrent());
      assertTrue(jSONReaderScanner1.isEOF());
      assertEquals(1139, jSONReaderScanner1.getFeatures());
      assertEquals(0, jSONReaderScanner1.pos());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(0, int0);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      
      // Undeclared exception!
      try { 
        jSONReaderScanner1.scanTrue();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse true
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      char[] charArray0 = new char[7];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("7LFrn|!GR\"q@P~T=kQ+");
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals('7', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertNotNull(jSONReaderScanner0);
      
      double double0 = jSONReaderScanner0.scanFieldDouble(charArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertEquals('7', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      JSONScanner jSONScanner0 = new JSONScanner("7LFrn|!GR\"q@P~T=kQ+");
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals('7', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.token());
      assertEquals(989, jSONScanner0.getFeatures());
      assertFalse(jSONScanner0.isEOF());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.matchStat());
      assertNotNull(jSONScanner0);
      
      boolean boolean0 = jSONScanner0.charArrayCompare(charArray0);
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals('7', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.token());
      assertEquals(989, jSONScanner0.getFeatures());
      assertFalse(jSONScanner0.isEOF());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.matchStat());
      assertFalse(boolean0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      UUID uUID0 = jSONReaderScanner0.scanFieldUUID(charArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertEquals('7', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNull(uUID0);
      
      boolean boolean1 = jSONReaderScanner0.isEOF();
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertEquals('7', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextTokenWithColon();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - 7, info : 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = '@';
      charArray0[1] = 'g';
      charArray0[2] = 'A';
      charArray0[3] = 'v';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("0`u0~E");
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('0', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertNotNull(jSONReaderScanner0);
      
      boolean boolean0 = jSONReaderScanner0.scanBoolean('@');
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('0', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(boolean0);
      
      String string0 = jSONReaderScanner0.stringVal();
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('0', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals("", string0);
      assertNotNull(string0);
      
      char char0 = jSONReaderScanner0.next();
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('`', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals('`', char0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("illega str");
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals('i', jSONScanner0.getCurrent());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat());
      assertNull(jSONScanner0.stringDefaultValue());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertNotNull(jSONScanner0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = '9';
      charArray0[1] = 'D';
      charArray0[2] = '!';
      charArray0[3] = 'V';
      float[] floatArray0 = jSONScanner0.scanFieldFloatArray(charArray0);
      assertEquals((-2), jSONScanner0.matchStat);
      assertEquals('i', jSONScanner0.getCurrent());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals((-2), jSONScanner0.matchStat());
      assertNull(jSONScanner0.stringDefaultValue());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertArrayEquals(new char[] {'9', 'D', '!', 'V'}, charArray0);
      assertNull(floatArray0);
      
      // Undeclared exception!
      try { 
        jSONScanner0.scanTrue();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse true
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'I';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 'I');
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals('I', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertArrayEquals(new char[] {'I'}, charArray0);
      assertNotNull(jSONReaderScanner0);
      
      int[] intArray0 = jSONReaderScanner0.scanFieldIntArray(charArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals('I', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertArrayEquals(new char[] {'I'}, charArray0);
      assertNull(intArray0);
      
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertFalse(boolean0);
      
      long long0 = jSONReaderScanner0.scanFieldLong(charArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals('I', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals(0L, long0);
      assertArrayEquals(new char[] {'I'}, charArray0);
      
      int int0 = jSONReaderScanner0.intValue();
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals('I', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals(0, int0);
      assertArrayEquals(new char[] {'I'}, charArray0);
      
      float[] floatArray0 = jSONReaderScanner0.scanFieldFloatArray(charArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals('I', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertTrue(jSONReaderScanner0.isEOF());
      assertArrayEquals(new char[] {'I'}, charArray0);
      assertNull(floatArray0);
      
      // Undeclared exception!
      try { 
        jSONReaderScanner0.indexOf('}', (-3259));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -3259
         //
         verifyException("com.alibaba.fastjson.parser.JSONReaderScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      char[] charArray0 = new char[16];
      charArray0[1] = '0';
      charArray0[2] = '\u0000';
      charArray0[3] = '5';
      charArray0[4] = '\u0000';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 1139, 1139);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals(1139, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertNotNull(jSONReaderScanner0);
      
      Locale locale0 = Locale.CANADA_FRENCH;
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("CA", locale0.getCountry());
      assertNotNull(locale0);
      
      BigInteger bigInteger0 = jSONReaderScanner0.scanFieldBigInteger(charArray0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals(1139, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertNull(bigInteger0);
      
      SymbolTable symbolTable0 = new SymbolTable(1250);
      assertNotNull(symbolTable0);
      
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanHex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal state. \u0000
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("7s", (-4212));
      assertEquals(0, jSONScanner0.matchStat);
      assertNull(jSONScanner0.stringDefaultValue());
      assertFalse(jSONScanner0.isEOF());
      assertEquals('7', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.pos());
      assertEquals((-4212), jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.token());
      assertNotNull(jSONScanner0);
      
      boolean boolean0 = jSONScanner0.isBlankInput();
      assertEquals(0, jSONScanner0.matchStat);
      assertNull(jSONScanner0.stringDefaultValue());
      assertFalse(jSONScanner0.isEOF());
      assertEquals('7', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.pos());
      assertEquals((-4212), jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.token());
      assertFalse(boolean0);
      
      Class<InputStream> class0 = InputStream.class;
      char[] charArray0 = new char[4];
      charArray0[0] = 'v';
      charArray0[1] = 'y';
      charArray0[2] = 'v';
      charArray0[3] = ')';
      Collection<String> collection0 = jSONScanner0.scanFieldStringArray(charArray0, class0);
      assertEquals((-2), jSONScanner0.matchStat);
      assertNull(jSONScanner0.stringDefaultValue());
      assertFalse(jSONScanner0.isEOF());
      assertEquals('7', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.pos());
      assertEquals((-2), jSONScanner0.matchStat());
      assertEquals((-4212), jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.token());
      assertArrayEquals(new char[] {'v', 'y', 'v', ')'}, charArray0);
      assertNull(collection0);
      
      jSONScanner0.scanStringArray((Collection<String>) null, '\'');
      assertEquals((-1), jSONScanner0.matchStat);
      assertNull(jSONScanner0.stringDefaultValue());
      assertFalse(jSONScanner0.isEOF());
      assertEquals('7', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.pos());
      assertEquals((-4212), jSONScanner0.getFeatures());
      assertEquals((-1), jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.token());
      
      // Undeclared exception!
      try { 
        jSONScanner0.nextTokenWithColon();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - 7, info : pos 0, json : 7s
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("71_Ak");
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals('7', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertNotNull(jSONReaderScanner0);
      
      char[] charArray0 = new char[0];
      boolean boolean0 = jSONReaderScanner0.matchField(charArray0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals('_', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(2, jSONReaderScanner0.token());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertTrue(boolean0);
      assertArrayEquals(new char[] {}, charArray0);
      
      jSONReaderScanner0.nextIdent();
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals('\u001A', jSONReaderScanner0.getCurrent());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(18, jSONReaderScanner0.token());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertTrue(jSONReaderScanner0.isEOF());
      
      int int0 = jSONReaderScanner0.getFeatures();
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals('\u001A', jSONReaderScanner0.getCurrent());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(18, jSONReaderScanner0.token());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals(989, int0);
      
      double double0 = jSONReaderScanner0.scanFieldDouble(charArray0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals('\u001A', jSONReaderScanner0.getCurrent());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(18, jSONReaderScanner0.token());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new char[] {}, charArray0);
      
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner(charArray0, 360, 360);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("true");
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals('t', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.pos());
      assertNull(jSONScanner0.stringDefaultValue());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.token());
      assertNotNull(jSONScanner0);
      
      jSONScanner0.nextIdent();
      assertEquals(0, jSONScanner0.matchStat);
      assertTrue(jSONScanner0.isEOF());
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(6, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertNull(jSONScanner0.stringDefaultValue());
      
      char[] charArray0 = new char[6];
      charArray0[0] = '-';
      charArray0[1] = '-';
      boolean boolean0 = jSONScanner0.isBlankInput();
      assertEquals(0, jSONScanner0.matchStat);
      assertTrue(jSONScanner0.isEOF());
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(6, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertNull(jSONScanner0.stringDefaultValue());
      assertFalse(boolean0);
      
      Class<InputStream> class0 = InputStream.class;
      Collection<String> collection0 = jSONScanner0.scanFieldStringArray(charArray0, class0);
      assertEquals((-2), jSONScanner0.matchStat);
      assertEquals((-2), jSONScanner0.matchStat());
      assertTrue(jSONScanner0.isEOF());
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(6, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertNull(jSONScanner0.stringDefaultValue());
      assertArrayEquals(new char[] {'-', '-', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNull(collection0);
      
      jSONScanner0.scanStringArray((Collection<String>) null, 'm');
      assertEquals((-1), jSONScanner0.matchStat);
      assertTrue(jSONScanner0.isEOF());
      assertEquals((-1), jSONScanner0.matchStat());
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(6, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertNull(jSONScanner0.stringDefaultValue());
      
      // Undeclared exception!
      try { 
        jSONScanner0.nextTokenWithColon();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - \u001A, info : pos 4, json : true
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("QH\"Z^%=T=#+G", (-103));
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals((-103), jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.pos());
      assertEquals("", jSONScanner0.stringDefaultValue());
      assertEquals('Q', jSONScanner0.getCurrent());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.matchStat());
      assertNotNull(jSONScanner0);
      
      char[] charArray0 = new char[0];
      int int0 = 3458;
      // Undeclared exception!
      try { 
        jSONScanner0.nextTokenWithColon((-103));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - Q, info : pos 0, json : QH\"Z^%=T=#+G
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(",fa%J)cEBu");
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(',', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNotNull(jSONReaderScanner0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = '*';
      jSONReaderScanner0.nextIdent();
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals('f', jSONReaderScanner0.getCurrent());
      assertEquals(16, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      
      Locale locale0 = jSONReaderScanner0.getLocale();
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals('f', jSONReaderScanner0.getCurrent());
      assertEquals(16, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertNotNull(locale0);
      
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed string : \u001A
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = '~';
      charArray0[1] = '~';
      charArray0[2] = '~';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 1139, 1139);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(1139, jSONReaderScanner0.getFeatures());
      assertEquals('~', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertArrayEquals(new char[] {'~', '~', '~', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(jSONReaderScanner0);
      
      Locale locale0 = Locale.CANADA_FRENCH;
      assertEquals("fr_CA", locale0.toString());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("CA", locale0.getCountry());
      assertEquals("fra", locale0.getISO3Language());
      assertNotNull(locale0);
      
      boolean boolean0 = jSONReaderScanner0.isRef();
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(1139, jSONReaderScanner0.getFeatures());
      assertEquals('~', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertFalse(boolean0);
      assertArrayEquals(new char[] {'~', '~', '~', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      String string0 = jSONReaderScanner0.stringVal();
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(1139, jSONReaderScanner0.getFeatures());
      assertEquals('~', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals("", string0);
      assertArrayEquals(new char[] {'~', '~', '~', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(string0);
      
      boolean boolean1 = jSONReaderScanner0.scanFieldBoolean(charArray0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(1139, jSONReaderScanner0.getFeatures());
      assertEquals('~', jSONReaderScanner0.getCurrent());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new char[] {'~', '~', '~', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      long long0 = jSONReaderScanner0.scanFieldSymbol(charArray0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(1139, jSONReaderScanner0.getFeatures());
      assertEquals('~', jSONReaderScanner0.getCurrent());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0L, long0);
      assertArrayEquals(new char[] {'~', '~', '~', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      boolean boolean2 = jSONReaderScanner0.scanBoolean('~');
      assertEquals(3, jSONReaderScanner0.matchStat);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(1139, jSONReaderScanner0.getFeatures());
      assertEquals(3, jSONReaderScanner0.matchStat());
      assertEquals('~', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertArrayEquals(new char[] {'~', '~', '~', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      jSONReaderScanner0.nextToken();
      assertEquals(3, jSONReaderScanner0.matchStat);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(1139, jSONReaderScanner0.getFeatures());
      assertEquals(3, jSONReaderScanner0.matchStat());
      assertEquals('~', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(1, jSONReaderScanner0.pos());
      assertEquals(1, jSONReaderScanner0.token());
      assertArrayEquals(new char[] {'~', '~', '~', '\u0000', '\u0000', '\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("syntax error");
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals('s', jSONReaderScanner0.getCurrent());
      assertNotNull(jSONReaderScanner0);
      
      int int0 = jSONReaderScanner0.scanInt('^');
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals('s', jSONReaderScanner0.getCurrent());
      assertEquals(0, int0);
      
      jSONReaderScanner0.pos = 32;
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(32, jSONReaderScanner0.pos());
      assertEquals('s', jSONReaderScanner0.getCurrent());
      
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanTrue();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse true
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = '\u0084';
      charArray0[0] = '\u0084';
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      SymbolTable symbolTable0 = new SymbolTable(98);
      assertNotNull(symbolTable0);
      
      JSONScanner jSONScanner0 = new JSONScanner("_k|qYj9=.G3!EM&D");
      assertEquals(0, jSONScanner0.matchStat);
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals('_', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.token());
      assertEquals(989, jSONScanner0.getFeatures());
      assertFalse(jSONScanner0.isEOF());
      assertNotNull(jSONScanner0);
      
      Feature feature0 = Feature.InitStringFieldAsEmpty;
      jSONScanner0.config(feature0, true);
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals("", jSONScanner0.stringDefaultValue());
      assertEquals('_', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.token());
      assertEquals(5085, jSONScanner0.getFeatures());
      assertFalse(jSONScanner0.isEOF());
      
      boolean boolean1 = jSONScanner0.scanFieldBoolean(charArray0);
      assertEquals((-2), jSONScanner0.matchStat);
      assertEquals("", jSONScanner0.stringDefaultValue());
      assertEquals('_', jSONScanner0.getCurrent());
      assertEquals((-2), jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.token());
      assertEquals(5085, jSONScanner0.getFeatures());
      assertFalse(jSONScanner0.isEOF());
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new char[] {'\u0084', '\u0000', '\u0000'}, charArray0);
      
      String string0 = jSONScanner0.stringVal();
      assertEquals((-2), jSONScanner0.matchStat);
      assertEquals("", jSONScanner0.stringDefaultValue());
      assertEquals('_', jSONScanner0.getCurrent());
      assertEquals((-2), jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.token());
      assertEquals(5085, jSONScanner0.getFeatures());
      assertFalse(jSONScanner0.isEOF());
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      char char0 = '~';
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("java.util.OptionalDoube", 123);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals('j', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(123, jSONReaderScanner0.getFeatures());
      assertNotNull(jSONReaderScanner0);
      
      SymbolTable symbolTable0 = new SymbolTable(98);
      assertNotNull(symbolTable0);
      
      String string0 = jSONReaderScanner0.scanSymbolUnQuoted(symbolTable0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(18, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('.', jSONReaderScanner0.getCurrent());
      assertEquals(123, jSONReaderScanner0.getFeatures());
      assertEquals("java", string0);
      assertNotNull(string0);
      
      boolean boolean1 = jSONReaderScanner0.isRef();
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(18, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('.', jSONReaderScanner0.getCurrent());
      assertEquals(123, jSONReaderScanner0.getFeatures());
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFalse();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      assertFalse(boolean0);
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("71Ak");
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.token());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('7', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNotNull(jSONReaderScanner0);
      
      int int0 = jSONReaderScanner0.intValue();
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.token());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('7', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, int0);
      
      SymbolTable symbolTable0 = new SymbolTable(33);
      assertNotNull(symbolTable0);
      
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanSymbolUnQuoted(symbolTable0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal identifier : 7
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "<d6,A>:8nXj9");
      assertFalse(boolean0);
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("syntax error");
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('s', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNotNull(jSONReaderScanner0);
      
      SymbolTable symbolTable0 = new SymbolTable(2401);
      assertNotNull(symbolTable0);
      
      String string0 = jSONReaderScanner0.scanSymbol(symbolTable0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(' ', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(18, jSONReaderScanner0.token());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals("syntax", string0);
      assertNotNull(string0);
      
      int int0 = jSONReaderScanner0.scanInt('^');
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(' ', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(18, jSONReaderScanner0.token());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, int0);
      
      jSONReaderScanner0.pos = 32;
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(' ', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(18, jSONReaderScanner0.token());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(32, jSONReaderScanner0.pos());
      
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanTrue();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse true
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "illega str");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("\", Z=<%%8X]`ZsD01");
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('\"', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertNotNull(jSONReaderScanner0);
      
      char char0 = '^';
      SymbolTable symbolTable0 = new SymbolTable(125);
      assertNotNull(symbolTable0);
      
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanSymbol(symbolTable0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed.str
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("71_Ak");
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('7', jSONReaderScanner0.getCurrent());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertNotNull(jSONReaderScanner0);
      
      char[] charArray0 = new char[0];
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      JSONScanner jSONScanner0 = new JSONScanner("71_Ak", 123);
      assertEquals(0, jSONScanner0.matchStat);
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(123, jSONScanner0.getFeatures());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertEquals('7', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      assertNotNull(jSONScanner0);
      
      float float0 = jSONScanner0.scanFieldFloat(charArray0);
      assertEquals((-1), jSONScanner0.matchStat);
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(123, jSONScanner0.getFeatures());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertEquals('7', jSONScanner0.getCurrent());
      assertEquals((-1), jSONScanner0.matchStat());
      assertEquals(0.0F, float0, 0.01F);
      assertArrayEquals(new char[] {}, charArray0);
      
      TimeZone timeZone0 = jSONScanner0.getTimeZone();
      assertEquals((-1), jSONScanner0.matchStat);
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(123, jSONScanner0.getFeatures());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertEquals('7', jSONScanner0.getCurrent());
      assertEquals((-1), jSONScanner0.matchStat());
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      jSONScanner0.timeZone = timeZone0;
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(123, jSONScanner0.getFeatures());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertEquals('7', jSONScanner0.getCurrent());
      assertEquals((-1), jSONScanner0.matchStat());
      assertEquals("GMT", timeZone0.getID());
      assertEquals(0, jSONScanner0.timeZone.getDSTSavings());
      assertFalse(jSONScanner0.timeZone.useDaylightTime());
      assertEquals(0, jSONScanner0.timeZone.getRawOffset());
      assertEquals("GMT", jSONScanner0.timeZone.getID());
      
      int int0 = jSONScanner0.intValue();
      assertEquals((-1), jSONScanner0.matchStat);
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(123, jSONScanner0.getFeatures());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertEquals('7', jSONScanner0.getCurrent());
      assertEquals((-1), jSONScanner0.matchStat());
      assertEquals(0, int0);
      
      int int1 = jSONScanner0.scanType("71_Ak");
      assertEquals(0, jSONScanner0.matchStat);
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(123, jSONScanner0.getFeatures());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertEquals('7', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals((-2), int1);
      assertFalse(int1 == int0);
      
      boolean boolean1 = jSONScanner0.matchField(charArray0);
      assertEquals(0, jSONScanner0.matchStat);
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals('_', jSONScanner0.getCurrent());
      assertEquals(123, jSONScanner0.getFeatures());
      assertEquals(2, jSONScanner0.token());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.matchStat());
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new char[] {}, charArray0);
      
      Locale locale0 = Locale.CANADA_FRENCH;
      assertEquals("fr_CA", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("CA", locale0.getCountry());
      assertNotNull(locale0);
      
      String string0 = jSONScanner0.info();
      assertEquals(0, jSONScanner0.matchStat);
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals('_', jSONScanner0.getCurrent());
      assertEquals(123, jSONScanner0.getFeatures());
      assertEquals(2, jSONScanner0.token());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals("pos 2, json : 71_Ak", string0);
      assertNotNull(string0);
      
      String string1 = jSONScanner0.stringDefaultValue();
      assertEquals(0, jSONScanner0.matchStat);
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals('_', jSONScanner0.getCurrent());
      assertEquals(123, jSONScanner0.getFeatures());
      assertEquals(2, jSONScanner0.token());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.matchStat());
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("71_Ak");
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals('7', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      assertNotNull(jSONReaderScanner0);
      
      char[] charArray0 = new char[0];
      boolean boolean0 = jSONReaderScanner0.matchField(charArray0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(2, jSONReaderScanner0.token());
      assertFalse(jSONReaderScanner0.isEOF());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('_', jSONReaderScanner0.getCurrent());
      assertTrue(boolean0);
      assertArrayEquals(new char[] {}, charArray0);
      
      float[][] floatArray0 = jSONReaderScanner0.scanFieldFloatArray2(charArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(2, jSONReaderScanner0.token());
      assertFalse(jSONReaderScanner0.isEOF());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('_', jSONReaderScanner0.getCurrent());
      assertArrayEquals(new char[] {}, charArray0);
      assertNull(floatArray0);
      
      jSONReaderScanner0.nextIdent();
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(18, jSONReaderScanner0.token());
      assertEquals('\u001A', jSONReaderScanner0.getCurrent());
      assertTrue(jSONReaderScanner0.isEOF());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      
      int int0 = jSONReaderScanner0.getFeatures();
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(18, jSONReaderScanner0.token());
      assertEquals('\u001A', jSONReaderScanner0.getCurrent());
      assertTrue(jSONReaderScanner0.isEOF());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(989, int0);
      
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner(charArray0, 360, 360);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = '7';
      StringReader stringReader0 = new StringReader("tt");
      assertNotNull(stringReader0);
      
      boolean boolean0 = stringReader0.markSupported();
      assertTrue(boolean0);
      
      stringReader0.reset();
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("tt");
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals('t', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertNotNull(jSONReaderScanner0);
      
      JSONScanner jSONScanner0 = new JSONScanner("tt");
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.token());
      assertEquals('t', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.pos());
      assertNull(jSONScanner0.stringDefaultValue());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.matchStat());
      assertNotNull(jSONScanner0);
      
      boolean boolean1 = jSONReaderScanner0.scanBoolean('7');
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals('t', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      // Undeclared exception!
      try { 
        jSONScanner0.copyTo((-1), (-1), charArray0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = '&';
      Locale locale0 = Locale.JAPANESE;
      assertEquals("", locale0.getISO3Country());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertNotNull(locale0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("true");
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('t', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.token());
      assertNotNull(jSONReaderScanner0);
      
      Locale locale1 = Locale.KOREAN;
      assertEquals("ko", locale1.getLanguage());
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.getCountry());
      assertEquals("ko", locale1.toString());
      assertEquals("", locale1.getISO3Country());
      assertEquals("kor", locale1.getISO3Language());
      assertFalse(locale1.equals((Object)locale0));
      assertNotSame(locale1, locale0);
      assertNotNull(locale1);
      
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      Locale.setDefault(locale_Category0, locale0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertFalse(locale0.equals((Object)locale1));
      assertNotSame(locale0, locale1);
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("IgnoreNonFieldGetter");
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(0, jSONReaderScanner1.token());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertEquals('I', jSONReaderScanner1.getCurrent());
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertNotNull(jSONReaderScanner1);
      
      jSONReaderScanner0.nextToken();
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertTrue(jSONReaderScanner0.isEOF());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(6, jSONReaderScanner0.token());
      assertEquals('\u001A', jSONReaderScanner0.getCurrent());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner1));
      assertNotSame(jSONReaderScanner0, jSONReaderScanner1);
      
      String string0 = jSONReaderScanner1.tokenName();
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(0, jSONReaderScanner1.token());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertEquals('I', jSONReaderScanner1.getCurrent());
      assertEquals("Unknown", string0);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("7/_Ak");
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('7', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertNotNull(jSONReaderScanner0);
      
      char[] charArray0 = new char[7];
      charArray0[0] = '7';
      StringReader stringReader0 = new StringReader("tt");
      assertNotNull(stringReader0);
      
      stringReader0.reset();
      boolean boolean0 = stringReader0.markSupported();
      assertTrue(boolean0);
      
      float float0 = jSONReaderScanner0.scanFloat('7');
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('7', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(7.0F, float0, 0.01F);
      
      stringReader0.reset();
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(stringReader0, 15);
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals('t', jSONReaderScanner1.getCurrent());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(15, jSONReaderScanner1.getFeatures());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertNotNull(jSONReaderScanner1);
      
      boolean boolean1 = jSONReaderScanner0.scanFieldBoolean(charArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('7', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertFalse(boolean1);
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner1));
      assertFalse(boolean1 == boolean0);
      assertNotSame(jSONReaderScanner0, jSONReaderScanner1);
      assertArrayEquals(new char[] {'7', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      Locale locale0 = Locale.JAPAN;
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("JP", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("JPN", locale0.getISO3Country());
      assertNotNull(locale0);
      
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      Locale locale1 = Locale.TRADITIONAL_CHINESE;
      assertEquals("zh_TW", locale1.toString());
      assertEquals("zh", locale1.getLanguage());
      assertEquals("", locale1.getVariant());
      assertEquals("TWN", locale1.getISO3Country());
      assertEquals("zho", locale1.getISO3Language());
      assertEquals("TW", locale1.getCountry());
      assertFalse(locale1.equals((Object)locale0));
      assertNotSame(locale1, locale0);
      assertNotNull(locale1);
      
      Locale.setDefault(locale_Category0, locale1);
      assertEquals("zh_TW", locale1.toString());
      assertEquals("zh", locale1.getLanguage());
      assertEquals("", locale1.getVariant());
      assertEquals("TWN", locale1.getISO3Country());
      assertEquals("zho", locale1.getISO3Language());
      assertEquals("TW", locale1.getCountry());
      assertFalse(locale1.equals((Object)locale0));
      assertNotSame(locale1, locale0);
      
      // Undeclared exception!
      try { 
        jSONReaderScanner1.nextToken();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse true
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("invalid comment");
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('i', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertNotNull(jSONReaderScanner0);
      
      TimeZone timeZone0 = TimeZone.getDefault();
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      jSONReaderScanner0.timeZone = timeZone0;
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('i', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals("GMT", timeZone0.getID());
      assertEquals(0, jSONReaderScanner0.timeZone.getDSTSavings());
      assertEquals("GMT", jSONReaderScanner0.timeZone.getID());
      assertFalse(jSONReaderScanner0.timeZone.useDaylightTime());
      assertEquals(0, jSONReaderScanner0.timeZone.getRawOffset());
      
      char[] charArray0 = new char[3];
      jSONReaderScanner0.scanIdent();
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(18, jSONReaderScanner0.token());
      assertEquals(' ', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      
      int int0 = Calendar.MILLISECOND;
      assertEquals(14, int0);
      
      String string0 = jSONReaderScanner0.scanFieldString(charArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(18, jSONReaderScanner0.token());
      assertEquals(' ', jSONReaderScanner0.getCurrent());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000'}, charArray0);
      assertNull(string0);
      
      // Undeclared exception!
      try { 
        jSONReaderScanner0.decimalValue(false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // For input string: \"invalid\", 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("71_Ak");
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals('7', jSONReaderScanner0.getCurrent());
      assertNotNull(jSONReaderScanner0);
      
      long long0 = jSONReaderScanner0.scanLong('=');
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals('7', jSONReaderScanner0.getCurrent());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(71L, long0);
      
      char[] charArray0 = new char[0];
      boolean boolean0 = jSONReaderScanner0.matchField(charArray0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('_', jSONReaderScanner0.getCurrent());
      assertEquals(2, jSONReaderScanner0.token());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertTrue(boolean0);
      assertArrayEquals(new char[] {}, charArray0);
      
      JSONReaderScanner jSONReaderScanner1 = null;
      try {
        jSONReaderScanner1 = new JSONReaderScanner(charArray0, (-1), 2708);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.CharArrayReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ", ");
      assertFalse(boolean0);
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(", ");
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(',', jSONReaderScanner0.getCurrent());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertNotNull(jSONReaderScanner0);
      
      char[] charArray0 = new char[0];
      Locale locale0 = Locale.CANADA_FRENCH;
      assertEquals("CA", locale0.getCountry());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("fra", locale0.getISO3Language());
      assertNotNull(locale0);
      
      String string0 = jSONReaderScanner0.stringVal();
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(',', jSONReaderScanner0.getCurrent());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean1 = jSONReaderScanner0.scanFieldBoolean(charArray0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(',', jSONReaderScanner0.getCurrent());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new char[] {}, charArray0);
      
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      Locale.setDefault(locale_Category0, locale0);
      assertEquals("CA", locale0.getCountry());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("fra", locale0.getISO3Language());
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("true");
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals('t', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.pos());
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertNotNull(jSONReaderScanner1);
      
      boolean boolean2 = jSONReaderScanner1.scanBoolean('?');
      assertEquals((-1), jSONReaderScanner1.matchStat);
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals('t', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals((-1), jSONReaderScanner1.matchStat());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.pos());
      assertTrue(boolean2);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      
      jSONReaderScanner0.nextToken();
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(16, jSONReaderScanner0.token());
      assertEquals(' ', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner1));
      assertNotSame(jSONReaderScanner0, jSONReaderScanner1);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = 'f';
      charArray0[1] = 'f';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 22, 22);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(22, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals('f', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertArrayEquals(new char[] {'f', 'f'}, charArray0);
      assertNotNull(jSONReaderScanner0);
      
      Locale locale0 = Locale.CANADA_FRENCH;
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("CA", locale0.getCountry());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("CAN", locale0.getISO3Country());
      assertNotNull(locale0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      Locale.setDefault(locale_Category0, locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("CA", locale0.getCountry());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("CAN", locale0.getISO3Country());
      
      boolean boolean1 = jSONReaderScanner0.scanBoolean('f');
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals(22, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals('f', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new char[] {'f', 'f'}, charArray0);
      
      // Undeclared exception!
      try { 
        jSONReaderScanner0.copyTo('f', 'f', charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("71_Ak");
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals('7', jSONReaderScanner0.getCurrent());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertNotNull(jSONReaderScanner0);
      
      char[] charArray0 = new char[7];
      charArray0[0] = '7';
      boolean boolean0 = jSONReaderScanner0.scanFieldBoolean(charArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertEquals('7', jSONReaderScanner0.getCurrent());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.token());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertFalse(boolean0);
      assertArrayEquals(new char[] {'7', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      Locale locale0 = Locale.JAPAN;
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("JP", locale0.getCountry());
      assertEquals("ja_JP", locale0.toString());
      assertNotNull(locale0);
      
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      Locale locale1 = Locale.KOREAN;
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getCountry());
      assertEquals("kor", locale1.getISO3Language());
      assertEquals("ko", locale1.toString());
      assertEquals("ko", locale1.getLanguage());
      assertFalse(locale1.equals((Object)locale0));
      assertNotSame(locale1, locale0);
      assertNotNull(locale1);
      
      String[] stringArray0 = Locale.getISOLanguages();
      assertNotNull(stringArray0);
      
      Locale.setDefault(locale_Category0, locale1);
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getCountry());
      assertEquals("kor", locale1.getISO3Language());
      assertEquals("ko", locale1.toString());
      assertEquals("ko", locale1.getLanguage());
      assertFalse(locale1.equals((Object)locale0));
      assertNotSame(locale1, locale0);
      
      int int0 = jSONReaderScanner0.pos();
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertEquals('7', jSONReaderScanner0.getCurrent());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.token());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, int0);
      
      int int1 = jSONReaderScanner0.scanFieldInt(charArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertEquals('7', jSONReaderScanner0.getCurrent());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.token());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      assertArrayEquals(new char[] {'7', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      char[] charArray0 = new char[16];
      charArray0[0] = '-';
      charArray0[1] = '0';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 360, 360);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals('-', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(360, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.token());
      assertNotNull(jSONReaderScanner0);
      
      float[][] floatArray0 = jSONReaderScanner0.scanFieldFloatArray2(charArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertEquals('-', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(360, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.token());
      assertNull(floatArray0);
      
      jSONReaderScanner0.nextIdent();
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(2, jSONReaderScanner0.token());
      assertEquals(360, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      
      int int0 = jSONReaderScanner0.getFeatures();
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(2, jSONReaderScanner0.token());
      assertEquals(360, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals(360, int0);
      
      double double0 = jSONReaderScanner0.scanFieldDouble(charArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(2, jSONReaderScanner0.token());
      assertEquals(360, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals(0.0, double0, 0.01);
      
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner(charArray0, (-2), 31);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      char[] charArray0 = new char[16];
      charArray0[0] = '-';
      charArray0[1] = '0';
      charArray0[2] = 'S';
      charArray0[3] = '5';
      charArray0[4] = 'S';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 1139, 1139);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(1139, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('-', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertNotNull(jSONReaderScanner0);
      
      Locale locale0 = Locale.CANADA_FRENCH;
      assertEquals("CA", locale0.getCountry());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("fra", locale0.getISO3Language());
      assertNotNull(locale0);
      
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      Locale.setDefault(locale_Category0, locale0);
      assertEquals("CA", locale0.getCountry());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("fra", locale0.getISO3Language());
      
      boolean boolean0 = jSONReaderScanner0.scanBoolean('u');
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals(1139, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('-', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertFalse(boolean0);
      
      jSONReaderScanner0.nextToken();
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals(1139, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(2, jSONReaderScanner0.token());
      assertEquals('5', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      
      SymbolTable symbolTable0 = new SymbolTable(21);
      assertNotNull(symbolTable0);
      
      String string0 = jSONReaderScanner0.addSymbol(115, 70, 70, symbolTable0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals(1139, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(2, jSONReaderScanner0.token());
      assertEquals('5', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string0);
      assertNotNull(string0);
      
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanHex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal state. 5
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(",fa%J)cEBu");
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(',', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertNotNull(jSONReaderScanner0);
      
      char[] charArray0 = new char[5];
      jSONReaderScanner0.nextIdent();
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals('f', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(16, jSONReaderScanner0.token());
      assertFalse(jSONReaderScanner0.isEOF());
      
      Locale locale0 = jSONReaderScanner0.getLocale();
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals('f', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(16, jSONReaderScanner0.token());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertNotNull(locale0);
      
      boolean boolean0 = jSONReaderScanner0.isRef();
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals('f', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(16, jSONReaderScanner0.token());
      assertFalse(jSONReaderScanner0.isEOF());
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFalse();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Locale locale0 = Locale.JAPANESE;
      assertEquals("", locale0.getCountry());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.toString());
      assertNotNull(locale0);
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("false");
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals('f', jSONReaderScanner0.getCurrent());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertNotNull(jSONReaderScanner0);
      
      Locale locale1 = Locale.KOREAN;
      assertEquals("", locale1.getCountry());
      assertEquals("", locale1.getVariant());
      assertEquals("kor", locale1.getISO3Language());
      assertEquals("ko", locale1.toString());
      assertEquals("", locale1.getISO3Country());
      assertEquals("ko", locale1.getLanguage());
      assertFalse(locale1.equals((Object)locale0));
      assertNotSame(locale1, locale0);
      assertNotNull(locale1);
      
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      Locale.setDefault(locale_Category0, locale0);
      assertEquals("", locale0.getCountry());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.toString());
      assertFalse(locale0.equals((Object)locale1));
      assertNotSame(locale0, locale1);
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("false", 75);
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals(0, jSONReaderScanner1.pos());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals('f', jSONReaderScanner1.getCurrent());
      assertEquals(75, jSONReaderScanner1.getFeatures());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertNotNull(jSONReaderScanner1);
      
      long long0 = jSONReaderScanner1.longValue();
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals(0, jSONReaderScanner1.pos());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals('f', jSONReaderScanner1.getCurrent());
      assertEquals(75, jSONReaderScanner1.getFeatures());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertEquals(0L, long0);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      
      jSONReaderScanner1.setLocale(locale0);
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertEquals("", locale0.getCountry());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.toString());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals(0, jSONReaderScanner1.pos());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals('f', jSONReaderScanner1.getCurrent());
      assertEquals(75, jSONReaderScanner1.getFeatures());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertNotSame(locale0, locale1);
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      
      boolean boolean0 = jSONReaderScanner1.scanBoolean('X');
      assertEquals((-1), jSONReaderScanner1.matchStat);
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals(0, jSONReaderScanner1.pos());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals((-1), jSONReaderScanner1.matchStat());
      assertEquals('f', jSONReaderScanner1.getCurrent());
      assertEquals(75, jSONReaderScanner1.getFeatures());
      assertFalse(boolean0);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      
      // Undeclared exception!
      try { 
        jSONReaderScanner1.nextToken();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      String string0 = "cZ/}As;9tT";
      JSONScanner jSONScanner0 = new JSONScanner("cZ/}As;9tT");
      assertEquals(0, jSONScanner0.matchStat);
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertEquals('c', jSONScanner0.getCurrent());
      assertNull(jSONScanner0.stringDefaultValue());
      assertNotNull(jSONScanner0);
      
      jSONScanner0.nextIdent();
      assertEquals(0, jSONScanner0.matchStat);
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals('/', jSONScanner0.getCurrent());
      assertEquals(18, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertNull(jSONScanner0.stringDefaultValue());
      
      // Undeclared exception!
      try { 
        jSONScanner0.nextIdent();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid comment
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "<d6,A>:8nXj9");
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "<d6,A>:8nXj9");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("syntax error");
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('s', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertNotNull(jSONReaderScanner0);
      
      SymbolTable symbolTable0 = new SymbolTable(2401);
      assertNotNull(symbolTable0);
      
      String string0 = jSONReaderScanner0.scanSymbol(symbolTable0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(' ', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(18, jSONReaderScanner0.token());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals("syntax", string0);
      assertNotNull(string0);
      
      int int0 = jSONReaderScanner0.scanInt('^');
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals(' ', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(18, jSONReaderScanner0.token());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, int0);
      
      boolean boolean2 = jSONReaderScanner0.scanBoolean('I');
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals(' ', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(18, jSONReaderScanner0.token());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      jSONReaderScanner0.nextToken();
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(1, jSONReaderScanner0.token());
      assertEquals('r', jSONReaderScanner0.getCurrent());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(7, jSONReaderScanner0.pos());
      
      JSONScanner jSONScanner0 = new JSONScanner("lq${|{P6\"mr", 0);
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.getFeatures());
      assertEquals('l', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.pos());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.token());
      assertNull(jSONScanner0.stringDefaultValue());
      assertNotNull(jSONScanner0);
      
      BigDecimal bigDecimal0 = jSONReaderScanner0.scanDecimal('\"');
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(1, jSONReaderScanner0.token());
      assertEquals('r', jSONReaderScanner0.getCurrent());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(7, jSONReaderScanner0.pos());
      assertNull(bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("71_Ak");
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('7', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertNotNull(jSONReaderScanner0);
      
      char[] charArray0 = new char[0];
      Locale locale0 = Locale.JAPAN;
      assertEquals("ja", locale0.getLanguage());
      assertEquals("JP", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("JPN", locale0.getISO3Country());
      assertNotNull(locale0);
      
      jSONReaderScanner0.setLocale(locale0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('7', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("JP", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("JPN", locale0.getISO3Country());
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("71_Ak");
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(0, jSONReaderScanner1.token());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals('7', jSONReaderScanner1.getCurrent());
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertNotNull(jSONReaderScanner1);
      
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 0);
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(0, jSONScanner0.pos());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(989, jSONScanner0.getFeatures());
      assertTrue(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.token());
      assertArrayEquals(new char[] {}, charArray0);
      assertNotNull(jSONScanner0);
      
      boolean boolean0 = jSONScanner0.isEOF();
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(0, jSONScanner0.pos());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(989, jSONScanner0.getFeatures());
      assertTrue(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.token());
      assertTrue(boolean0);
      assertArrayEquals(new char[] {}, charArray0);
      
      Class<Feature> class0 = Feature.class;
      SymbolTable symbolTable0 = new SymbolTable(120);
      assertNotNull(symbolTable0);
      
      char char0 = 'l';
      Enum<?> enum0 = jSONScanner0.scanEnum(class0, symbolTable0, 'l');
      assertEquals((-1), jSONScanner0.matchStat);
      assertEquals(0, jSONScanner0.pos());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertEquals((-1), jSONScanner0.matchStat());
      assertEquals(989, jSONScanner0.getFeatures());
      assertTrue(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.token());
      assertArrayEquals(new char[] {}, charArray0);
      assertNull(enum0);
      
      Locale locale1 = Locale.JAPANESE;
      assertEquals("", locale1.getISO3Country());
      assertEquals("ja", locale1.getLanguage());
      assertEquals("jpn", locale1.getISO3Language());
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.getCountry());
      assertEquals("ja", locale1.toString());
      assertFalse(locale1.equals((Object)locale0));
      assertNotSame(locale1, locale0);
      assertNotNull(locale1);
      
      Set<Character> set0 = locale0.getExtensionKeys();
      assertEquals("ja", locale0.getLanguage());
      assertEquals("JP", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("JPN", locale0.getISO3Country());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertFalse(locale0.equals((Object)locale1));
      assertNotSame(locale0, locale1);
      assertNotNull(set0);
      
      Locale locale2 = Locale.FRANCE;
      assertEquals("FRA", locale2.getISO3Country());
      assertEquals("", locale2.getVariant());
      assertEquals("fra", locale2.getISO3Language());
      assertEquals("FR", locale2.getCountry());
      assertEquals("fr_FR", locale2.toString());
      assertEquals("fr", locale2.getLanguage());
      assertFalse(locale2.equals((Object)locale1));
      assertFalse(locale2.equals((Object)locale0));
      assertNotSame(locale2, locale1);
      assertNotSame(locale2, locale0);
      assertNotNull(locale2);
      
      Set<String> set1 = locale2.getUnicodeLocaleAttributes();
      assertEquals("FRA", locale2.getISO3Country());
      assertEquals("", locale2.getVariant());
      assertEquals("fra", locale2.getISO3Language());
      assertEquals("FR", locale2.getCountry());
      assertEquals("fr_FR", locale2.toString());
      assertEquals("fr", locale2.getLanguage());
      assertTrue(set1.isEmpty());
      assertEquals(0, set1.size());
      assertFalse(locale2.equals((Object)locale1));
      assertFalse(locale2.equals((Object)locale0));
      assertNotSame(locale2, locale1);
      assertNotSame(locale2, locale0);
      assertNotNull(set1);
      
      jSONScanner0.setLocale(locale1);
      assertEquals((-1), jSONScanner0.matchStat);
      assertEquals(0, jSONScanner0.pos());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertEquals((-1), jSONScanner0.matchStat());
      assertEquals(989, jSONScanner0.getFeatures());
      assertTrue(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.token());
      assertEquals("", locale1.getISO3Country());
      assertEquals("ja", locale1.getLanguage());
      assertEquals("jpn", locale1.getISO3Language());
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.getCountry());
      assertEquals("ja", locale1.toString());
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(locale1.equals((Object)locale2));
      assertNotSame(locale1, locale0);
      assertNotSame(locale1, locale2);
      assertArrayEquals(new char[] {}, charArray0);
      
      boolean boolean1 = jSONScanner0.isBlankInput();
      assertEquals((-1), jSONScanner0.matchStat);
      assertEquals(0, jSONScanner0.pos());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertEquals((-1), jSONScanner0.matchStat());
      assertEquals(20, jSONScanner0.token());
      assertEquals(989, jSONScanner0.getFeatures());
      assertTrue(jSONScanner0.isEOF());
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new char[] {}, charArray0);
      
      char char1 = jSONScanner0.next();
      assertEquals((-1), jSONScanner0.matchStat);
      assertEquals(0, jSONScanner0.pos());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertEquals((-1), jSONScanner0.matchStat());
      assertEquals(20, jSONScanner0.token());
      assertEquals(989, jSONScanner0.getFeatures());
      assertFalse(jSONScanner0.isEOF());
      assertEquals('\u001A', char1);
      assertFalse(char1 == char0);
      assertArrayEquals(new char[] {}, charArray0);
      
      boolean boolean2 = jSONReaderScanner0.isEOF();
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('7', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertFalse(boolean2);
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner1));
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertNotSame(jSONReaderScanner0, jSONReaderScanner1);
      
      long long0 = jSONReaderScanner1.scanLong('\u001A');
      assertEquals((-1), jSONReaderScanner1.matchStat);
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals((-1), jSONReaderScanner1.matchStat());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals('7', jSONReaderScanner1.getCurrent());
      assertEquals(71L, long0);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextTokenWithColon();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - 7, info : 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ", ");
      assertFalse(boolean0);
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("I.m72_e");
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('I', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertNotNull(jSONReaderScanner0);
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("TreeSet");
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals('T', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.pos());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertNotNull(jSONReaderScanner1);
      
      float float0 = jSONReaderScanner1.scanFloat('@');
      assertEquals((-1), jSONReaderScanner1.matchStat);
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals((-1), jSONReaderScanner1.matchStat());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals('T', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.pos());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertEquals(0.0F, float0, 0.01F);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      
      jSONReaderScanner0.putChar('d');
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('I', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner1));
      assertNotSame(jSONReaderScanner0, jSONReaderScanner1);
      
      boolean boolean1 = jSONReaderScanner0.scanBoolean('Q');
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals('I', jSONReaderScanner0.getCurrent());
      assertFalse(boolean1);
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner1));
      assertTrue(boolean1 == boolean0);
      assertNotSame(jSONReaderScanner0, jSONReaderScanner1);
      
      JSONReaderScanner jSONReaderScanner2 = new JSONReaderScanner("TreeSet");
      assertEquals(0, jSONReaderScanner2.matchStat);
      assertEquals(0, jSONReaderScanner2.pos());
      assertEquals('T', jSONReaderScanner2.getCurrent());
      assertEquals(989, jSONReaderScanner2.getFeatures());
      assertEquals(0, jSONReaderScanner2.token());
      assertEquals(0, jSONReaderScanner2.matchStat());
      assertFalse(jSONReaderScanner2.isEOF());
      assertNull(jSONReaderScanner2.stringDefaultValue());
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner0));
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner1));
      assertNotNull(jSONReaderScanner2);
      
      Locale locale0 = Locale.KOREAN;
      assertEquals("", locale0.getCountry());
      assertEquals("ko", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ko", locale0.getLanguage());
      assertNotNull(locale0);
      
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      Locale.setDefault(locale_Category0, locale0);
      assertEquals("", locale0.getCountry());
      assertEquals("ko", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ko", locale0.getLanguage());
      
      boolean boolean2 = jSONReaderScanner0.scanBoolean(']');
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals('I', jSONReaderScanner0.getCurrent());
      assertFalse(boolean2);
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner1));
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner2));
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertNotSame(jSONReaderScanner0, jSONReaderScanner1);
      assertNotSame(jSONReaderScanner0, jSONReaderScanner2);
      
      jSONReaderScanner2.nextToken();
      assertEquals(0, jSONReaderScanner2.matchStat);
      assertTrue(jSONReaderScanner2.isEOF());
      assertEquals(0, jSONReaderScanner2.pos());
      assertEquals(989, jSONReaderScanner2.getFeatures());
      assertEquals(0, jSONReaderScanner2.matchStat());
      assertEquals(22, jSONReaderScanner2.token());
      assertEquals('\u001A', jSONReaderScanner2.getCurrent());
      assertNull(jSONReaderScanner2.stringDefaultValue());
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner0));
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner1));
      assertNotSame(jSONReaderScanner2, jSONReaderScanner0);
      assertNotSame(jSONReaderScanner2, jSONReaderScanner1);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("new");
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('n', jSONReaderScanner0.getCurrent());
      assertNotNull(jSONReaderScanner0);
      
      Locale locale0 = Locale.CHINA;
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertNotNull(locale0);
      
      Locale locale1 = Locale.forLanguageTag("new");
      assertEquals("new", locale1.getISO3Language());
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.getCountry());
      assertEquals("", locale1.getISO3Country());
      assertEquals("new", locale1.toString());
      assertEquals("new", locale1.getLanguage());
      assertFalse(locale1.equals((Object)locale0));
      assertNotSame(locale1, locale0);
      assertNotNull(locale1);
      
      JSONScanner jSONScanner0 = new JSONScanner("new", (-265));
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals("", jSONScanner0.stringDefaultValue());
      assertEquals('n', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.token());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.pos());
      assertEquals((-265), jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat());
      assertNotNull(jSONScanner0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      jSONScanner0.nextToken(0);
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals("", jSONScanner0.stringDefaultValue());
      assertTrue(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.pos());
      assertEquals((-265), jSONScanner0.getFeatures());
      assertEquals(9, jSONScanner0.token());
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      
      JSONScanner jSONScanner1 = new JSONScanner("TreeSet", 242);
      assertEquals(0, jSONScanner1.matchStat);
      assertEquals(0, jSONScanner1.pos());
      assertEquals('T', jSONScanner1.getCurrent());
      assertEquals(0, jSONScanner1.matchStat());
      assertEquals(242, jSONScanner1.getFeatures());
      assertNull(jSONScanner1.stringDefaultValue());
      assertEquals(0, jSONScanner1.token());
      assertFalse(jSONScanner1.isEOF());
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      assertNotNull(jSONScanner1);
      
      jSONScanner1.nextToken((-1439154596));
      assertEquals(0, jSONScanner1.matchStat);
      assertEquals(0, jSONScanner1.pos());
      assertTrue(jSONScanner1.isEOF());
      assertEquals(22, jSONScanner1.token());
      assertEquals('\u001A', jSONScanner1.getCurrent());
      assertEquals(0, jSONScanner1.matchStat());
      assertEquals(242, jSONScanner1.getFeatures());
      assertNull(jSONScanner1.stringDefaultValue());
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      assertNotSame(jSONScanner1, jSONScanner0);
      
      String string0 = locale1.getDisplayLanguage();
      assertEquals("new", locale1.getISO3Language());
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.getCountry());
      assertEquals("", locale1.getISO3Country());
      assertEquals("new", locale1.toString());
      assertEquals("new", locale1.getLanguage());
      assertEquals("Nepal Bhasa", string0);
      assertFalse(locale1.equals((Object)locale0));
      assertNotSame(locale1, locale0);
      assertNotNull(string0);
      
      long long0 = jSONScanner1.longValue();
      assertEquals(0, jSONScanner1.matchStat);
      assertEquals(0, jSONScanner1.pos());
      assertTrue(jSONScanner1.isEOF());
      assertEquals(22, jSONScanner1.token());
      assertEquals('\u001A', jSONScanner1.getCurrent());
      assertEquals(0, jSONScanner1.matchStat());
      assertEquals(242, jSONScanner1.getFeatures());
      assertNull(jSONScanner1.stringDefaultValue());
      assertEquals(43183L, long0);
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      assertNotSame(jSONScanner1, jSONScanner0);
      
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      double double0 = jSONReaderScanner0.scanDouble('f');
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('n', jSONReaderScanner0.getCurrent());
      assertEquals(0.0, double0, 0.01);
      
      Set<String> set0 = Calendar.getAvailableCalendarTypes();
      assertEquals(3, set0.size());
      assertFalse(set0.isEmpty());
      assertNotNull(set0);
      
      SymbolTable symbolTable0 = new SymbolTable(57);
      assertNotNull(symbolTable0);
      
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanSymbol(symbolTable0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("");
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertNotNull(jSONReaderScanner0);
      
      char[] charArray0 = new char[0];
      UUID uUID0 = jSONReaderScanner0.scanFieldUUID(charArray0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertArrayEquals(new char[] {}, charArray0);
      assertNull(uUID0);
      
      TimeZone timeZone0 = jSONReaderScanner0.getTimeZone();
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      jSONReaderScanner0.nextToken(3996);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(20, jSONReaderScanner0.token());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      Locale locale0 = Locale.JAPANESE;
      assertEquals("", locale0.getVariant());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("ja", locale0.toString());
      assertNotNull(locale0);
      
      Locale.setDefault(locale_Category0, locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("ja", locale0.toString());
      
      char char0 = jSONReaderScanner0.charAt(92);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(20, jSONReaderScanner0.token());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals('\u001A', char0);
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(", property ");
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(0, jSONReaderScanner1.pos());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals(',', jSONReaderScanner1.getCurrent());
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertNotNull(jSONReaderScanner1);
      
      boolean boolean0 = jSONReaderScanner0.scanBoolean('\u001A');
      assertEquals(3, jSONReaderScanner0.matchStat);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(3, jSONReaderScanner0.matchStat());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(20, jSONReaderScanner0.token());
      assertEquals('\u001A', jSONReaderScanner0.getCurrent());
      assertFalse(boolean0);
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner1));
      assertNotSame(jSONReaderScanner0, jSONReaderScanner1);
      
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextToken();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // EOF error
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("71_Ak");
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('7', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertNotNull(jSONReaderScanner0);
      
      String string0 = "tt";
      StringReader stringReader0 = new StringReader("tt");
      assertNotNull(stringReader0);
      
      char[] charArray0 = new char[0];
      long long0 = jSONReaderScanner0.scanFieldLong(charArray0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('7', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0L, long0);
      assertArrayEquals(new char[] {}, charArray0);
      
      Locale locale0 = Locale.KOREAN;
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("ko", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      float float0 = jSONReaderScanner0.scanFieldFloat(charArray0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('7', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0.0F, float0, 0.01F);
      assertArrayEquals(new char[] {}, charArray0);
      
      jSONReaderScanner0.nextToken(1462);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(2, jSONReaderScanner0.token());
      assertEquals('_', jSONReaderScanner0.getCurrent());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      
      double double0 = jSONReaderScanner0.scanFieldDouble(charArray0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(2, jSONReaderScanner0.token());
      assertEquals('_', jSONReaderScanner0.getCurrent());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new char[] {}, charArray0);
      
      SymbolTable symbolTable0 = new SymbolTable(1325);
      assertNotNull(symbolTable0);
      
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFieldStringArray(charArray0, 1325, symbolTable0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = 'l';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 'l');
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals('l', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertArrayEquals(new char[] {'l', '\u0000', '\u0000'}, charArray0);
      assertNotNull(jSONReaderScanner0);
      
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(2619, "y0");
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id=y0,offset=2619,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(2619, simpleTimeZone0.getRawOffset());
      assertEquals("y0", simpleTimeZone0.getID());
      assertNotNull(simpleTimeZone0);
      
      jSONReaderScanner0.timeZone = (TimeZone) simpleTimeZone0;
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals('l', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id=y0,offset=2619,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(2619, simpleTimeZone0.getRawOffset());
      assertEquals("y0", simpleTimeZone0.getID());
      assertFalse(jSONReaderScanner0.timeZone.useDaylightTime());
      assertEquals(2619, jSONReaderScanner0.timeZone.getRawOffset());
      assertEquals("y0", jSONReaderScanner0.timeZone.getID());
      assertEquals(0, jSONReaderScanner0.timeZone.getDSTSavings());
      
      SymbolTable symbolTable0 = new SymbolTable(3);
      assertNotNull(symbolTable0);
      
      String string0 = jSONReaderScanner0.stringVal();
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals('l', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals("", string0);
      assertArrayEquals(new char[] {'l', '\u0000', '\u0000'}, charArray0);
      assertNotNull(string0);
      
      long long0 = jSONReaderScanner0.scanFieldLong(charArray0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals('l', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0L, long0);
      assertArrayEquals(new char[] {'l', '\u0000', '\u0000'}, charArray0);
      
      JSONScanner jSONScanner0 = new JSONScanner(" parse null", (-2973));
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(' ', jSONScanner0.getCurrent());
      assertEquals("", jSONScanner0.stringDefaultValue());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertEquals((-2973), jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat());
      assertNotNull(jSONScanner0);
      
      char char0 = jSONScanner0.next();
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals('p', jSONScanner0.getCurrent());
      assertEquals("", jSONScanner0.stringDefaultValue());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertEquals((-2973), jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals('p', char0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("1_Ak");
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('1', jSONReaderScanner0.getCurrent());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertNotNull(jSONReaderScanner0);
      
      char[] charArray0 = new char[0];
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      assertFalse(boolean0);
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(charArray0, 0);
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals('\u0000', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertTrue(jSONReaderScanner1.isEOF());
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertArrayEquals(new char[] {}, charArray0);
      assertNotNull(jSONReaderScanner1);
      
      long long0 = jSONReaderScanner0.scanFieldLong(charArray0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('1', jSONReaderScanner0.getCurrent());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(0L, long0);
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner1));
      assertNotSame(jSONReaderScanner0, jSONReaderScanner1);
      assertArrayEquals(new char[] {}, charArray0);
      
      String string0 = jSONReaderScanner0.scanFieldString(charArray0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('1', jSONReaderScanner0.getCurrent());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner1));
      assertNotSame(jSONReaderScanner0, jSONReaderScanner1);
      assertArrayEquals(new char[] {}, charArray0);
      assertNull(string0);
      
      String string1 = jSONReaderScanner1.stringVal();
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals('\u0000', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertTrue(jSONReaderScanner1.isEOF());
      assertEquals("", string1);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertArrayEquals(new char[] {}, charArray0);
      assertNotNull(string1);
      
      char char0 = jSONReaderScanner0.next();
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals('_', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals('_', char0);
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner1));
      assertNotSame(jSONReaderScanner0, jSONReaderScanner1);
      
      jSONReaderScanner1.scanNumber();
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertEquals('\u0000', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals(2, jSONReaderScanner1.token());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertTrue(jSONReaderScanner1.isEOF());
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertArrayEquals(new char[] {}, charArray0);
      
      UUID uUID0 = jSONReaderScanner0.scanUUID('~');
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals('_', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner1));
      assertNotSame(jSONReaderScanner0, jSONReaderScanner1);
      assertNull(uUID0);
      
      int int0 = jSONReaderScanner1.intValue();
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertEquals('\u0000', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals(2, jSONReaderScanner1.token());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertTrue(jSONReaderScanner1.isEOF());
      assertEquals(0, int0);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertArrayEquals(new char[] {}, charArray0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      char[] charArray0 = new char[6];
      charArray0[1] = 'c';
      charArray0[2] = '5';
      charArray0[3] = '5';
      charArray0[4] = '5';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 1139, 43);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals(43, jSONReaderScanner0.getFeatures());
      assertArrayEquals(new char[] {'\u0000', 'c', '5', '5', '5', '\u0000'}, charArray0);
      assertNotNull(jSONReaderScanner0);
      
      Locale locale0 = Locale.CANADA_FRENCH;
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("CA", locale0.getCountry());
      assertNotNull(locale0);
      
      String string0 = jSONReaderScanner0.stringVal();
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals(43, jSONReaderScanner0.getFeatures());
      assertEquals("", string0);
      assertArrayEquals(new char[] {'\u0000', 'c', '5', '5', '5', '\u0000'}, charArray0);
      assertNotNull(string0);
      
      boolean boolean0 = jSONReaderScanner0.scanFieldBoolean(charArray0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals(43, jSONReaderScanner0.getFeatures());
      assertFalse(boolean0);
      assertArrayEquals(new char[] {'\u0000', 'c', '5', '5', '5', '\u0000'}, charArray0);
      
      boolean boolean1 = jSONReaderScanner0.scanBoolean('5');
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals(43, jSONReaderScanner0.getFeatures());
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new char[] {'\u0000', 'c', '5', '5', '5', '\u0000'}, charArray0);
      
      jSONReaderScanner0.nextToken();
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals(1, jSONReaderScanner0.token());
      assertEquals('5', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(1, jSONReaderScanner0.pos());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(43, jSONReaderScanner0.getFeatures());
      assertArrayEquals(new char[] {'\u0000', 'c', '5', '5', '5', '\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = ')';
      charArray0[1] = 'm';
      charArray0[2] = 'v';
      SymbolTable symbolTable0 = new SymbolTable(1016);
      assertNotNull(symbolTable0);
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 1016, 64);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(')', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(64, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertArrayEquals(new char[] {')', 'm', 'v', '\u0000', '\u0000'}, charArray0);
      assertNotNull(jSONReaderScanner0);
      
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanSymbol(symbolTable0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'I';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 'I');
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals('I', jSONReaderScanner0.getCurrent());
      assertArrayEquals(new char[] {'I'}, charArray0);
      assertNotNull(jSONReaderScanner0);
      
      int[] intArray0 = jSONReaderScanner0.scanFieldIntArray(charArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals('I', jSONReaderScanner0.getCurrent());
      assertArrayEquals(new char[] {'I'}, charArray0);
      assertNull(intArray0);
      
      UUID uUID0 = jSONReaderScanner0.scanUUID('I');
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals('I', jSONReaderScanner0.getCurrent());
      assertArrayEquals(new char[] {'I'}, charArray0);
      assertNull(uUID0);
      
      jSONReaderScanner0.nextToken(1462);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals(20, jSONReaderScanner0.token());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals('I', jSONReaderScanner0.getCurrent());
      assertArrayEquals(new char[] {'I'}, charArray0);
      
      int int0 = (-2252);
      double double0 = jSONReaderScanner0.scanFieldDouble(charArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertEquals(20, jSONReaderScanner0.token());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertEquals('I', jSONReaderScanner0.getCurrent());
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new char[] {'I'}, charArray0);
      
      SymbolTable symbolTable0 = null;
      try {
        symbolTable0 = new SymbolTable((-2252));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.SymbolTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("71_Ak");
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('7', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertNotNull(jSONReaderScanner0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("java.util.OptionalDoube", 57);
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals(0, jSONReaderScanner1.pos());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertEquals('j', jSONReaderScanner1.getCurrent());
      assertEquals(57, jSONReaderScanner1.getFeatures());
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertNotNull(jSONReaderScanner1);
      
      SymbolTable symbolTable0 = new SymbolTable(123);
      assertNotNull(symbolTable0);
      
      int int0 = jSONReaderScanner0.intValue();
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('7', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, int0);
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner1));
      assertNotSame(jSONReaderScanner0, jSONReaderScanner1);
      
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner2 = new JSONReaderScanner(charArray0, 0, 39);
      assertEquals(0, jSONReaderScanner2.matchStat);
      assertNull(jSONReaderScanner2.stringDefaultValue());
      assertTrue(jSONReaderScanner2.isEOF());
      assertEquals(0, jSONReaderScanner2.pos());
      assertEquals(0, jSONReaderScanner2.token());
      assertEquals(0, jSONReaderScanner2.matchStat());
      assertEquals('\u0000', jSONReaderScanner2.getCurrent());
      assertEquals(39, jSONReaderScanner2.getFeatures());
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner1));
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner0));
      assertArrayEquals(new char[] {}, charArray0);
      assertNotNull(jSONReaderScanner2);
      
      float[] floatArray0 = jSONReaderScanner2.scanFieldFloatArray(charArray0);
      assertEquals((-2), jSONReaderScanner2.matchStat);
      assertNull(jSONReaderScanner2.stringDefaultValue());
      assertTrue(jSONReaderScanner2.isEOF());
      assertEquals(0, jSONReaderScanner2.pos());
      assertEquals((-2), jSONReaderScanner2.matchStat());
      assertEquals(0, jSONReaderScanner2.token());
      assertEquals('\u0000', jSONReaderScanner2.getCurrent());
      assertEquals(39, jSONReaderScanner2.getFeatures());
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner1));
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner0));
      assertNotSame(jSONReaderScanner2, jSONReaderScanner1);
      assertNotSame(jSONReaderScanner2, jSONReaderScanner0);
      assertArrayEquals(new char[] {}, charArray0);
      assertNull(floatArray0);
      
      int int1 = jSONReaderScanner0.indexOf('=', 93);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('7', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals((-1), int1);
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner1));
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner2));
      assertFalse(int1 == int0);
      assertNotSame(jSONReaderScanner0, jSONReaderScanner1);
      assertNotSame(jSONReaderScanner0, jSONReaderScanner2);
      
      boolean boolean1 = jSONReaderScanner0.isEnabled(0, 102);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('7', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertTrue(boolean1);
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner1));
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner2));
      assertTrue(boolean1 == boolean0);
      assertNotSame(jSONReaderScanner0, jSONReaderScanner1);
      assertNotSame(jSONReaderScanner0, jSONReaderScanner2);
      
      jSONReaderScanner1.close();
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals(0, jSONReaderScanner1.pos());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertEquals('j', jSONReaderScanner1.getCurrent());
      assertEquals(57, jSONReaderScanner1.getFeatures());
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner2));
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertNotSame(jSONReaderScanner1, jSONReaderScanner2);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = '~';
      charArray0[2] = '~';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("]Eo@~$B>z%H", 1820);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(1820, jSONReaderScanner0.getFeatures());
      assertEquals(']', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertNotNull(jSONReaderScanner0);
      
      TimeZone timeZone0 = jSONReaderScanner0.getTimeZone();
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(1820, jSONReaderScanner0.getFeatures());
      assertEquals(']', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      jSONReaderScanner0.nextToken(1139);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals('E', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(15, jSONReaderScanner0.token());
      assertEquals(1820, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      
      BigInteger bigInteger0 = jSONReaderScanner0.scanFieldBigInteger(charArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertEquals('E', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(15, jSONReaderScanner0.token());
      assertEquals(1820, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertArrayEquals(new char[] {'~', '\u0000', '~'}, charArray0);
      assertNull(bigInteger0);
      
      // Undeclared exception!
      try { 
        JSONLexerBase.readString(charArray0, (-2));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      String string0 = "71_A\\k";
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("71_Ak");
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals('7', jSONReaderScanner0.getCurrent());
      assertNotNull(jSONReaderScanner0);
      
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("undefined");
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals('u', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertFalse(jSONReaderScanner1.isEOF());
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertNotNull(jSONReaderScanner1);
      
      double double0 = jSONReaderScanner0.scanFieldDouble(charArray0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals('7', jSONReaderScanner0.getCurrent());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(0.0, double0, 0.01);
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner1));
      assertNotSame(jSONReaderScanner0, jSONReaderScanner1);
      assertArrayEquals(new char[] {}, charArray0);
      
      SymbolTable symbolTable0 = null;
      try {
        symbolTable0 = new SymbolTable(0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1185263
         //
         verifyException("com.alibaba.fastjson.parser.SymbolTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("1_Ak");
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals('1', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertNotNull(jSONReaderScanner0);
      
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("1_Ak");
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals('1', jSONReaderScanner1.getCurrent());
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertNotNull(jSONReaderScanner1);
      
      byte[] byteArray0 = new byte[10];
      byteArray0[0] = (byte)72;
      byteArray0[1] = (byte)72;
      boolean boolean0 = jSONReaderScanner1.scanBoolean('*');
      assertEquals((-1), jSONReaderScanner1.matchStat);
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals((-1), jSONReaderScanner1.matchStat());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals('1', jSONReaderScanner1.getCurrent());
      assertTrue(boolean0);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      
      jSONReaderScanner0.nextToken();
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(2, jSONReaderScanner0.token());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals('_', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner1));
      assertNotSame(jSONReaderScanner0, jSONReaderScanner1);
      
      Feature feature0 = Feature.UseObjectArray;
      jSONReaderScanner1.config(feature0, true);
      assertEquals((-1), jSONReaderScanner1.matchStat);
      assertEquals(66525, jSONReaderScanner1.getFeatures());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals((-1), jSONReaderScanner1.matchStat());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals('1', jSONReaderScanner1.getCurrent());
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("error parse new");
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('e', jSONReaderScanner0.getCurrent());
      assertNotNull(jSONReaderScanner0);
      
      JSONScanner jSONScanner0 = new JSONScanner("_%");
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.token());
      assertEquals(989, jSONScanner0.getFeatures());
      assertNull(jSONScanner0.stringDefaultValue());
      assertFalse(jSONScanner0.isEOF());
      assertEquals('_', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      assertNotNull(jSONScanner0);
      
      Locale locale0 = Locale.JAPAN;
      assertEquals("ja", locale0.getLanguage());
      assertEquals("JP", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("JPN", locale0.getISO3Country());
      assertNotNull(locale0);
      
      jSONReaderScanner0.putChar('9');
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('e', jSONReaderScanner0.getCurrent());
      
      char[] charArray0 = new char[6];
      charArray0[0] = '9';
      charArray0[1] = '9';
      charArray0[2] = '9';
      charArray0[3] = '9';
      charArray0[4] = '9';
      charArray0[5] = '9';
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(charArray0, 1726, 0);
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals(0, jSONReaderScanner1.getFeatures());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertEquals('9', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.token());
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertArrayEquals(new char[] {'9', '9', '9', '9', '9', '9'}, charArray0);
      assertNotNull(jSONReaderScanner1);
      
      jSONReaderScanner1.scanIdent();
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(0, jSONReaderScanner1.pos());
      assertTrue(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.getFeatures());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertEquals(18, jSONReaderScanner1.token());
      assertEquals('\u001A', jSONReaderScanner1.getCurrent());
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertArrayEquals(new char[] {'9', '9', '9', '9', '9', '9'}, charArray0);
      
      String string0 = jSONReaderScanner1.stringVal();
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(0, jSONReaderScanner1.pos());
      assertTrue(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.getFeatures());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertEquals(18, jSONReaderScanner1.token());
      assertEquals('\u001A', jSONReaderScanner1.getCurrent());
      assertEquals("999999", string0);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertArrayEquals(new char[] {'9', '9', '9', '9', '9', '9'}, charArray0);
      assertNotNull(string0);
      
      BigDecimal bigDecimal0 = jSONReaderScanner1.scanFieldDecimal(charArray0);
      assertEquals((-2), jSONReaderScanner1.matchStat);
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(0, jSONReaderScanner1.pos());
      assertTrue(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.getFeatures());
      assertEquals((-2), jSONReaderScanner1.matchStat());
      assertEquals(18, jSONReaderScanner1.token());
      assertEquals('\u001A', jSONReaderScanner1.getCurrent());
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertArrayEquals(new char[] {'9', '9', '9', '9', '9', '9'}, charArray0);
      assertNull(bigDecimal0);
      
      long long0 = jSONReaderScanner0.longValue();
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('e', jSONReaderScanner0.getCurrent());
      assertEquals(53L, long0);
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner1));
      assertNotSame(jSONReaderScanner0, jSONReaderScanner1);
      
      TimeZone timeZone0 = jSONReaderScanner1.getTimeZone();
      assertEquals((-2), jSONReaderScanner1.matchStat);
      assertEquals("GMT", timeZone0.getID());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(0, jSONReaderScanner1.pos());
      assertTrue(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.getFeatures());
      assertEquals((-2), jSONReaderScanner1.matchStat());
      assertEquals(18, jSONReaderScanner1.token());
      assertEquals('\u001A', jSONReaderScanner1.getCurrent());
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertArrayEquals(new char[] {'9', '9', '9', '9', '9', '9'}, charArray0);
      assertNotNull(timeZone0);
      
      Number number0 = jSONReaderScanner1.integerValue();
      assertEquals((-2), jSONReaderScanner1.matchStat);
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(0, jSONReaderScanner1.pos());
      assertTrue(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.getFeatures());
      assertEquals((-2), jSONReaderScanner1.matchStat());
      assertEquals(18, jSONReaderScanner1.token());
      assertEquals('\u001A', jSONReaderScanner1.getCurrent());
      assertEquals(999999, number0);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertArrayEquals(new char[] {'9', '9', '9', '9', '9', '9'}, charArray0);
      assertNotNull(number0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("");
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertNotNull(jSONReaderScanner0);
      
      char[] charArray0 = new char[0];
      UUID uUID0 = jSONReaderScanner0.scanFieldUUID(charArray0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertArrayEquals(new char[] {}, charArray0);
      assertNull(uUID0);
      
      int int0 = 3996;
      jSONReaderScanner0.nextToken(3996);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.pos());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(20, jSONReaderScanner0.token());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(", property ");
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertEquals(',', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals(0, jSONReaderScanner1.pos());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertNotNull(jSONReaderScanner1);
      
      double double0 = jSONReaderScanner1.scanFieldDouble(charArray0);
      assertEquals((-1), jSONReaderScanner1.matchStat);
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals((-1), jSONReaderScanner1.matchStat());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertEquals(',', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals(0, jSONReaderScanner1.pos());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(0.0, double0, 0.01);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertArrayEquals(new char[] {}, charArray0);
      
      SymbolTable symbolTable0 = null;
      try {
        symbolTable0 = new SymbolTable((-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.SymbolTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      String string0 = "TnbwjtprsU$WAlpO";
      JSONScanner jSONScanner0 = new JSONScanner("TnbwjtprsU$WAlpO", 22);
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(22, jSONScanner0.getFeatures());
      assertEquals('T', jSONScanner0.getCurrent());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.token());
      assertFalse(jSONScanner0.isEOF());
      assertNotNull(jSONScanner0);
      
      char[] charArray0 = new char[3];
      char char0 = 'R';
      charArray0[0] = 'R';
      jSONScanner0.scanIdent();
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(22, jSONScanner0.getFeatures());
      assertEquals('$', jSONScanner0.getCurrent());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(18, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertFalse(jSONScanner0.isEOF());
      
      // Undeclared exception!
      try { 
        jSONScanner0.intValue();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // TnbwjtprsU
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("\", Z=<Y%%8X]`ZsD01");
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('\"', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertNotNull(jSONReaderScanner0);
      
      char char0 = 'p';
      BigDecimal bigDecimal0 = jSONReaderScanner0.scanDecimal('p');
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('\"', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertNull(bigDecimal0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      assertFalse(fileSystemHandling1.equals((Object)fileSystemHandling0));
      assertNotNull(fileSystemHandling1);
      
      boolean boolean2 = jSONReaderScanner0.isBlankInput();
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('\"', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      SymbolTable symbolTable0 = new SymbolTable(151);
      assertNotNull(symbolTable0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = '\\';
      // Undeclared exception!
      try { 
        symbolTable0.addSymbol(charArray0, 151, (-1));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("\"4vw");
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals('\"', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertNotNull(jSONReaderScanner0);
      
      Locale locale0 = new Locale("\"4vw", "\"4vw");
      assertEquals("\"4vw", locale0.getLanguage());
      assertEquals("\"4VW", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("\"4vw_\"4VW", locale0.toString());
      assertNotNull(locale0);
      
      Locale locale1 = Locale.forLanguageTag("QaQ+TtJ{SWm");
      assertEquals("", locale1.getLanguage());
      assertEquals("", locale1.getISO3Language());
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.toString());
      assertEquals("", locale1.getCountry());
      assertFalse(locale1.equals((Object)locale0));
      assertNotSame(locale1, locale0);
      assertNotNull(locale1);
      
      String string0 = locale1.getDisplayScript(locale0);
      assertEquals("\"4vw", locale0.getLanguage());
      assertEquals("\"4VW", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("\"4vw_\"4VW", locale0.toString());
      assertEquals("", locale1.getLanguage());
      assertEquals("", locale1.getISO3Language());
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.toString());
      assertEquals("", locale1.getCountry());
      assertEquals("", string0);
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(locale1.equals((Object)locale0));
      assertNotSame(locale0, locale1);
      assertNotSame(locale1, locale0);
      assertNotNull(string0);
      
      BigDecimal bigDecimal0 = jSONReaderScanner0.scanDecimal('n');
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals('\"', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertNull(bigDecimal0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      TimeZone timeZone0 = TimeZone.getTimeZone("wcX>gi;,!*1pT[@>`");
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextIdent();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed string : \u001A
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      assertEquals("TW", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_TW", locale0.toString());
      assertNotNull(locale0);
      
      String string0 = "YGVg2'=UZ";
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("YGVg2'=UZ");
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals('Y', jSONReaderScanner0.getCurrent());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.token());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertNotNull(jSONReaderScanner0);
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("@ 'Q,9!xFG@]@");
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals('@', jSONReaderScanner1.getCurrent());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertNotNull(jSONReaderScanner1);
      
      float float0 = jSONReaderScanner1.scanFloat('@');
      assertEquals((-1), jSONReaderScanner1.matchStat);
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals('@', jSONReaderScanner1.getCurrent());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertEquals((-1), jSONReaderScanner1.matchStat());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(0.0F, float0, 0.01F);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      
      jSONReaderScanner1.putChar('w');
      assertEquals((-1), jSONReaderScanner1.matchStat);
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals('@', jSONReaderScanner1.getCurrent());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertEquals((-1), jSONReaderScanner1.matchStat());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      
      Locale locale1 = Locale.KOREAN;
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.getCountry());
      assertEquals("kor", locale1.getISO3Language());
      assertEquals("", locale1.getISO3Country());
      assertEquals("ko", locale1.toString());
      assertEquals("ko", locale1.getLanguage());
      assertFalse(locale1.equals((Object)locale0));
      assertNotSame(locale1, locale0);
      assertNotNull(locale1);
      
      Locale locale2 = Locale.SIMPLIFIED_CHINESE;
      assertEquals("CN", locale2.getCountry());
      assertEquals("zh_CN", locale2.toString());
      assertEquals("zh", locale2.getLanguage());
      assertEquals("", locale2.getVariant());
      assertEquals("CHN", locale2.getISO3Country());
      assertEquals("zho", locale2.getISO3Language());
      assertFalse(locale2.equals((Object)locale1));
      assertFalse(locale2.equals((Object)locale0));
      assertNotSame(locale2, locale1);
      assertNotSame(locale2, locale0);
      assertNotNull(locale2);
      
      String string1 = jSONReaderScanner1.scanString('w');
      assertEquals((-1), jSONReaderScanner1.matchStat);
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals('@', jSONReaderScanner1.getCurrent());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertEquals((-1), jSONReaderScanner1.matchStat());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertNull(string1);
      
      String string2 = locale1.getDisplayLanguage(locale2);
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.getCountry());
      assertEquals("kor", locale1.getISO3Language());
      assertEquals("", locale1.getISO3Country());
      assertEquals("ko", locale1.toString());
      assertEquals("ko", locale1.getLanguage());
      assertEquals("CN", locale2.getCountry());
      assertEquals("zh_CN", locale2.toString());
      assertEquals("zh", locale2.getLanguage());
      assertEquals("", locale2.getVariant());
      assertEquals("CHN", locale2.getISO3Country());
      assertEquals("zho", locale2.getISO3Language());
      assertEquals("\u671D\u9C9C\u6587", string2);
      assertFalse(locale1.equals((Object)locale2));
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(locale2.equals((Object)locale1));
      assertFalse(locale2.equals((Object)locale0));
      assertFalse(string2.equals((Object)string0));
      assertNotSame(locale1, locale2);
      assertNotSame(locale1, locale0);
      assertNotSame(locale2, locale1);
      assertNotSame(locale2, locale0);
      assertNotNull(string2);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      jSONReaderScanner0.nextToken();
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(1, jSONReaderScanner0.token());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('G', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner1));
      assertNotSame(jSONReaderScanner0, jSONReaderScanner1);
      
      char[] charArray0 = new char[1];
      Date date0 = jSONReaderScanner0.scanDate('w');
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(1, jSONReaderScanner0.token());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('G', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner1));
      assertNotSame(jSONReaderScanner0, jSONReaderScanner1);
      assertNull(date0);
      
      charArray0[0] = '@';
      // Undeclared exception!
      try { 
        jSONReaderScanner1.matchField(charArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed single-quote string
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("7[1_Ak");
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals('7', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      assertFalse(jSONReaderScanner0.isEOF());
      assertNotNull(jSONReaderScanner0);
      
      Locale locale0 = new Locale("7[1_Ak", "7[1_Ak");
      assertEquals("", locale0.getVariant());
      assertEquals("7[1_ak", locale0.getLanguage());
      assertEquals("7[1_ak_7[1_AK", locale0.toString());
      assertEquals("7[1_AK", locale0.getCountry());
      assertNotNull(locale0);
      
      long long0 = jSONReaderScanner0.scanLong('P');
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals('7', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(7L, long0);
      
      float float0 = jSONReaderScanner0.scanFloat('p');
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals('7', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(7.0F, float0, 0.01F);
      
      jSONReaderScanner0.scanIdent();
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals('[', jSONReaderScanner0.getCurrent());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(18, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertFalse(jSONReaderScanner0.isEOF());
      
      int int0 = jSONReaderScanner0.scanInt('p');
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals('[', jSONReaderScanner0.getCurrent());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(18, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, int0);
      
      char[] charArray0 = new char[0];
      String string0 = jSONReaderScanner0.scanFieldString(charArray0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals('[', jSONReaderScanner0.getCurrent());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(18, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertFalse(jSONReaderScanner0.isEOF());
      assertArrayEquals(new char[] {}, charArray0);
      assertNull(string0);
      
      jSONReaderScanner0.putChar('P');
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals('[', jSONReaderScanner0.getCurrent());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(18, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertFalse(jSONReaderScanner0.isEOF());
      
      float float1 = jSONReaderScanner0.scanFieldFloat(charArray0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals('[', jSONReaderScanner0.getCurrent());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(18, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0.0F, float1, 0.01F);
      assertNotEquals(float1, float0, 0.01F);
      assertArrayEquals(new char[] {}, charArray0);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Date date0 = jSONReaderScanner0.scanDate('P');
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals('[', jSONReaderScanner0.getCurrent());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(18, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertFalse(jSONReaderScanner0.isEOF());
      assertNull(date0);
      
      jSONReaderScanner0.nextToken(0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(1, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(14, jSONReaderScanner0.token());
      assertEquals('1', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      
      StringReader stringReader0 = new StringReader("scan new error");
      assertNotNull(stringReader0);
      
      Locale locale1 = Locale.CANADA_FRENCH;
      assertEquals("CAN", locale1.getISO3Country());
      assertEquals("fr_CA", locale1.toString());
      assertEquals("fr", locale1.getLanguage());
      assertEquals("CA", locale1.getCountry());
      assertEquals("", locale1.getVariant());
      assertEquals("fra", locale1.getISO3Language());
      assertFalse(locale1.equals((Object)locale0));
      assertNotSame(locale1, locale0);
      assertNotNull(locale1);
      
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      Locale locale2 = Locale.ITALIAN;
      assertEquals("", locale2.getISO3Country());
      assertEquals("it", locale2.getLanguage());
      assertEquals("", locale2.getVariant());
      assertEquals("it", locale2.toString());
      assertEquals("", locale2.getCountry());
      assertEquals("ita", locale2.getISO3Language());
      assertFalse(locale2.equals((Object)locale1));
      assertFalse(locale2.equals((Object)locale0));
      assertNotSame(locale2, locale1);
      assertNotSame(locale2, locale0);
      assertNotNull(locale2);
      
      String string1 = locale1.getDisplayScript(locale2);
      assertEquals("", locale2.getISO3Country());
      assertEquals("it", locale2.getLanguage());
      assertEquals("", locale2.getVariant());
      assertEquals("it", locale2.toString());
      assertEquals("", locale2.getCountry());
      assertEquals("ita", locale2.getISO3Language());
      assertEquals("CAN", locale1.getISO3Country());
      assertEquals("fr_CA", locale1.toString());
      assertEquals("fr", locale1.getLanguage());
      assertEquals("CA", locale1.getCountry());
      assertEquals("", locale1.getVariant());
      assertEquals("fra", locale1.getISO3Language());
      assertEquals("", string1);
      assertFalse(locale2.equals((Object)locale1));
      assertFalse(locale2.equals((Object)locale0));
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(locale1.equals((Object)locale2));
      assertNotSame(locale2, locale1);
      assertNotSame(locale2, locale0);
      assertNotSame(locale1, locale0);
      assertNotSame(locale1, locale2);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("\", Z=<%%8X]`ZsD01");
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('\"', jSONReaderScanner0.getCurrent());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertNotNull(jSONReaderScanner0);
      
      int int0 = jSONReaderScanner0.scanInt('^');
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('\"', jSONReaderScanner0.getCurrent());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, int0);
      
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanTrue();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse true
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("(\"cvw");
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals('(', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertNotNull(jSONReaderScanner0);
      
      Locale locale0 = new Locale("(\"cvw", "(\"cvw");
      assertEquals("(\"cvw", locale0.getLanguage());
      assertEquals("(\"cvw_(\"CVW", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("(\"CVW", locale0.getCountry());
      assertNotNull(locale0);
      
      jSONReaderScanner0.nextIdent();
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals('\"', jSONReaderScanner0.getCurrent());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(10, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.matchStat());
      
      String string0 = "_@EtQBDXZ.tVCij";
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("_@EtQBDXZ.tVCij");
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertEquals(0, jSONReaderScanner1.pos());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertEquals('_', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.token());
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertNotNull(jSONReaderScanner1);
      
      float float0 = jSONReaderScanner0.scanFloat('#');
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals('\"', jSONReaderScanner0.getCurrent());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(10, jSONReaderScanner0.token());
      assertEquals(0.0F, float0, 0.01F);
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner1));
      assertNotSame(jSONReaderScanner0, jSONReaderScanner1);
      
      // Undeclared exception!
      try { 
        jSONReaderScanner1.floatValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.alibaba.fastjson.parser.JSONReaderScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ", ");
      assertFalse(boolean0);
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(", ");
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(',', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertNotNull(jSONReaderScanner0);
      
      char[] charArray0 = new char[1];
      Locale locale0 = Locale.CANADA_FRENCH;
      assertEquals("CA", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("fr_CA", locale0.toString());
      assertNotNull(locale0);
      
      String string0 = jSONReaderScanner0.stringVal();
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(',', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean1 = jSONReaderScanner0.scanFieldBoolean(charArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertEquals(',', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      Locale.setDefault(locale_Category0, locale0);
      assertEquals("CA", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("fr_CA", locale0.toString());
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("true");
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals('t', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.pos());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertNotNull(jSONReaderScanner1);
      
      boolean boolean2 = jSONReaderScanner1.scanBoolean('?');
      assertEquals((-1), jSONReaderScanner1.matchStat);
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals('t', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.pos());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals((-1), jSONReaderScanner1.matchStat());
      assertTrue(boolean2);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      
      jSONReaderScanner0.nextToken();
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(' ', jSONReaderScanner0.getCurrent());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(16, jSONReaderScanner0.token());
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner1));
      assertNotSame(jSONReaderScanner0, jSONReaderScanner1);
      
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextTokenWithColon();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - \u001A, info : 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Tnb");
      assertFalse(boolean0);
      
      char[] charArray0 = new char[5];
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      char char0 = '-';
      charArray0[0] = '-';
      char char1 = '0';
      charArray0[1] = '0';
      charArray0[2] = '-';
      charArray0[4] = 'l';
      int int0 = 57;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 57);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('-', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertArrayEquals(new char[] {'-', '0', '-', '\u0000', 'l'}, charArray0);
      assertNotNull(jSONReaderScanner0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      String string0 = jSONReaderScanner0.stringVal();
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('-', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals("", string0);
      assertArrayEquals(new char[] {'-', '0', '-', '\u0000', 'l'}, charArray0);
      assertNotNull(string0);
      
      float float0 = jSONReaderScanner0.scanFloat('l');
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('-', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(-0.0F, float0, 0.01F);
      assertArrayEquals(new char[] {'-', '0', '-', '\u0000', 'l'}, charArray0);
      
      jSONReaderScanner0.nextIdent();
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(2, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('-', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertArrayEquals(new char[] {'-', '0', '-', '\u0000', 'l'}, charArray0);
      
      int int1 = jSONReaderScanner0.scanInt('j');
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(2, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('-', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      assertArrayEquals(new char[] {'-', '0', '-', '\u0000', 'l'}, charArray0);
      
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextTokenWithColon();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - -, info : 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("nonstringkeyasstring", 4206);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(4206, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('n', jSONReaderScanner0.getCurrent());
      assertEquals("", jSONReaderScanner0.stringDefaultValue());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertNotNull(jSONReaderScanner0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'n';
      charArray0[1] = '1';
      charArray0[2] = '$';
      charArray0[3] = 'O';
      charArray0[4] = '$';
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFieldStringArray(charArray0, 4206, (SymbolTable) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("(\"cvw");
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('(', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertNotNull(jSONReaderScanner0);
      
      jSONReaderScanner0.scanString();
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(4, jSONReaderScanner0.token());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('c', jSONReaderScanner0.getCurrent());
      
      Locale locale0 = new Locale("(\"cvw", "(\"cvw");
      assertEquals("(\"cvw", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("(\"cvw_(\"CVW", locale0.toString());
      assertEquals("(\"CVW", locale0.getCountry());
      assertNotNull(locale0);
      
      jSONReaderScanner0.nextIdent();
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.pos());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals('\u001A', jSONReaderScanner0.getCurrent());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(18, jSONReaderScanner0.token());
      
      SymbolTable symbolTable0 = null;
      try {
        symbolTable0 = new SymbolTable(0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1185263
         //
         verifyException("com.alibaba.fastjson.parser.SymbolTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = 't';
      charArray0[1] = 't';
      charArray0[2] = 'l';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 284);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('t', jSONReaderScanner0.getCurrent());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertArrayEquals(new char[] {'t', 't', 'l'}, charArray0);
      assertNotNull(jSONReaderScanner0);
      
      Class<Feature> class0 = Feature.class;
      SymbolTable symbolTable0 = new SymbolTable(2105);
      assertNotNull(symbolTable0);
      
      Enum<?> enum0 = jSONReaderScanner0.scanEnum(class0, symbolTable0, 'x');
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('t', jSONReaderScanner0.getCurrent());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertArrayEquals(new char[] {'t', 't', 'l'}, charArray0);
      assertNull(enum0);
      
      boolean boolean0 = jSONReaderScanner0.isEnabled((-3010), 36);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('t', jSONReaderScanner0.getCurrent());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertTrue(boolean0);
      assertArrayEquals(new char[] {'t', 't', 'l'}, charArray0);
      
      int int0 = jSONReaderScanner0.scanType("7:s:)UyU{t4");
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('t', jSONReaderScanner0.getCurrent());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals((-2), int0);
      assertArrayEquals(new char[] {'t', 't', 'l'}, charArray0);
      
      int int1 = jSONReaderScanner0.scanFieldInt(charArray0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('t', jSONReaderScanner0.getCurrent());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      assertArrayEquals(new char[] {'t', 't', 'l'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("1_Ak");
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('1', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertNotNull(jSONReaderScanner0);
      
      char[] charArray0 = new char[0];
      StringReader stringReader0 = new StringReader("1_Ak");
      assertNotNull(stringReader0);
      
      stringReader0.reset();
      StringReader stringReader1 = new StringReader("");
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotNull(stringReader1);
      
      stringReader1.reset();
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotSame(stringReader1, stringReader0);
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(stringReader0, 0);
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals('1', jSONReaderScanner1.getCurrent());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(0, jSONReaderScanner1.getFeatures());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertFalse(jSONReaderScanner1.isEOF());
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertNotNull(jSONReaderScanner1);
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      assertFalse(boolean0);
      
      Locale locale0 = Locale.KOREAN;
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko", locale0.toString());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertNotNull(locale0);
      
      int int0 = jSONReaderScanner1.scanFieldInt(charArray0);
      assertEquals((-1), jSONReaderScanner1.matchStat);
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals('1', jSONReaderScanner1.getCurrent());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(0, jSONReaderScanner1.getFeatures());
      assertEquals((-1), jSONReaderScanner1.matchStat());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(0, int0);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertArrayEquals(new char[] {}, charArray0);
      
      Class<Feature> class0 = Feature.class;
      // Undeclared exception!
      try { 
        jSONReaderScanner1.scanFieldStringArray(charArray0, class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // com.alibaba.fastjson.parser.Feature
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("unclosed.str.lit", 1139);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(1139, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals('u', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.token());
      assertNotNull(jSONReaderScanner0);
      
      TimeZone timeZone0 = jSONReaderScanner0.getTimeZone();
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(1139, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals('u', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      jSONReaderScanner0.nextToken(1139);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals('.', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(1139, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(18, jSONReaderScanner0.token());
      assertFalse(jSONReaderScanner0.isEOF());
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'c';
      boolean boolean0 = jSONReaderScanner0.scanBoolean('o');
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals('.', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(1139, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(18, jSONReaderScanner0.token());
      assertFalse(jSONReaderScanner0.isEOF());
      assertFalse(boolean0);
      
      jSONReaderScanner0.nextToken();
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals(8, jSONReaderScanner0.pos());
      assertEquals(25, jSONReaderScanner0.token());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(1139, jSONReaderScanner0.getFeatures());
      assertEquals('s', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      
      boolean boolean1 = jSONReaderScanner0.matchField(charArray0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals(8, jSONReaderScanner0.pos());
      assertEquals(25, jSONReaderScanner0.token());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(1139, jSONReaderScanner0.getFeatures());
      assertEquals('s', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new char[] {'c', '\u0000'}, charArray0);
      
      jSONReaderScanner0.token = 1139;
      assertEquals(8, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(1139, jSONReaderScanner0.getFeatures());
      assertEquals(1139, jSONReaderScanner0.token());
      assertEquals('s', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      
      char char0 = jSONReaderScanner0.getCurrent();
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals(8, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(1139, jSONReaderScanner0.getFeatures());
      assertEquals(1139, jSONReaderScanner0.token());
      assertEquals('s', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals('s', char0);
      
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextTokenWithColon(1139);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - s, info : 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "<d6,A>:8nXj9");
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "<d6,A>:8nXj9");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("\":\"");
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals('\"', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertNotNull(jSONReaderScanner0);
      
      TimeZone timeZone0 = jSONReaderScanner0.getTimeZone();
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals('\"', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'S';
      charArray0[1] = '8';
      charArray0[2] = '~';
      charArray0[3] = 'b';
      BigDecimal bigDecimal0 = jSONReaderScanner0.scanFieldDecimal(charArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertEquals('\"', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertArrayEquals(new char[] {'S', '8', '~', 'b'}, charArray0);
      assertNull(bigDecimal0);
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("null");
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals('n', jSONReaderScanner1.getCurrent());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals(0, jSONReaderScanner1.pos());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertNotNull(jSONReaderScanner1);
      
      Locale locale0 = Locale.KOREAN;
      assertEquals("ko", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertNotNull(locale0);
      
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      Locale.setDefault(locale_Category0, locale0);
      assertEquals("ko", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      
      boolean boolean2 = jSONReaderScanner1.matchField(charArray0);
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals('n', jSONReaderScanner1.getCurrent());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals(0, jSONReaderScanner1.pos());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertFalse(boolean2);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertArrayEquals(new char[] {'S', '8', '~', 'b'}, charArray0);
      
      boolean boolean3 = JSONScanner.checkDate('', 'p', '~', 'p', 'I', 'S', 5324, 108);
      assertFalse(boolean3);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      
      String string0 = jSONReaderScanner0.scanString('(');
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals('\"', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(":", string0);
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner1));
      assertNotSame(jSONReaderScanner0, jSONReaderScanner1);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = '-';
      charArray0[1] = '0';
      charArray0[2] = 'c';
      charArray0[3] = '{';
      charArray0[4] = '~';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 1139, 1139);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals('-', jSONReaderScanner0.getCurrent());
      assertEquals(1139, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertArrayEquals(new char[] {'-', '0', 'c', '{', '~'}, charArray0);
      assertNotNull(jSONReaderScanner0);
      
      Locale locale0 = Locale.TAIWAN;
      assertEquals("TW", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_TW", locale0.toString());
      assertNotNull(locale0);
      
      int int0 = jSONReaderScanner0.scanInt('c');
      assertEquals(3, jSONReaderScanner0.matchStat);
      assertEquals(3, jSONReaderScanner0.matchStat());
      assertEquals(1139, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals('{', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(16, jSONReaderScanner0.token());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, int0);
      assertArrayEquals(new char[] {'-', '0', 'c', '{', '~'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("IgnoreNonFieldGetter", (-4212));
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals('I', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.matchStat());
      assertFalse(jSONScanner0.isEOF());
      assertEquals((-4212), jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.pos());
      assertNull(jSONScanner0.stringDefaultValue());
      assertNotNull(jSONScanner0);
      
      char[] charArray0 = new char[5];
      boolean boolean0 = jSONScanner0.isBlankInput();
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals('I', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.matchStat());
      assertFalse(jSONScanner0.isEOF());
      assertEquals((-4212), jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.pos());
      assertNull(jSONScanner0.stringDefaultValue());
      assertFalse(boolean0);
      
      charArray0[0] = ')';
      charArray0[1] = '}';
      charArray0[0] = ')';
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "q>dV0");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 9, 215);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(')', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(215, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertArrayEquals(new char[] {')', '}', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(jSONReaderScanner0);
      
      boolean boolean2 = jSONReaderScanner0.scanBoolean('H');
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(')', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(215, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertArrayEquals(new char[] {')', '}', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      jSONReaderScanner0.nextToken();
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(11, jSONReaderScanner0.token());
      assertEquals(215, jSONReaderScanner0.getFeatures());
      assertEquals('}', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertArrayEquals(new char[] {')', '}', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextTokenWithColon();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - }, info : 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("71_Ak");
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.token());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('7', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNotNull(jSONReaderScanner0);
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("71_Ak", 0);
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals(0, jSONReaderScanner1.token());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals('7', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.getFeatures());
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertNotNull(jSONReaderScanner1);
      
      TimeZone timeZone0 = jSONReaderScanner1.getTimeZone();
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals(0, jSONReaderScanner1.token());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals('7', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.getFeatures());
      assertEquals("GMT", timeZone0.getID());
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertNotNull(timeZone0);
      
      jSONReaderScanner1.nextToken(0);
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals(2, jSONReaderScanner1.token());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals('_', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(0, jSONReaderScanner1.getFeatures());
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      
      char[] charArray0 = new char[0];
      BigInteger bigInteger0 = jSONReaderScanner1.scanFieldBigInteger(charArray0);
      assertEquals((-1), jSONReaderScanner1.matchStat);
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals(2, jSONReaderScanner1.token());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals('_', jSONReaderScanner1.getCurrent());
      assertEquals((-1), jSONReaderScanner1.matchStat());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(0, jSONReaderScanner1.getFeatures());
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertArrayEquals(new char[] {}, charArray0);
      assertNull(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = '4';
      charArray0[4] = 'c';
      charArray0[3] = '4';
      charArray0[3] = 'c';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 1139, '4');
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals('4', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(52, jSONReaderScanner0.getFeatures());
      assertArrayEquals(new char[] {'4', '\u0000', '\u0000', 'c', 'c'}, charArray0);
      assertNotNull(jSONReaderScanner0);
      
      double double0 = jSONReaderScanner0.scanDouble('4');
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals('4', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(52, jSONReaderScanner0.getFeatures());
      assertEquals(4.0, double0, 0.01);
      assertArrayEquals(new char[] {'4', '\u0000', '\u0000', 'c', 'c'}, charArray0);
      
      JSONReaderScanner jSONReaderScanner1 = null;
      try {
        jSONReaderScanner1 = new JSONReaderScanner(charArray0, (-1), (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.CharArrayReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ",fa8RJ)cEBu");
      assertFalse(boolean0);
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(",fa8RJ)cEBu");
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(',', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertNotNull(jSONReaderScanner0);
      
      float float0 = jSONReaderScanner0.scanFloat('8');
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals(',', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0.0F, float0, 0.01F);
      
      jSONReaderScanner0.putChar('\"');
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals(',', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      
      jSONReaderScanner0.nextToken(49);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(16, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals('f', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      
      boolean boolean1 = jSONReaderScanner0.scanBoolean('\"');
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(16, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals('f', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(",fa8RJ)cEBu");
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertEquals(',', jSONReaderScanner1.getCurrent());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.token());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(0, jSONReaderScanner1.pos());
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertNotNull(jSONReaderScanner1);
      
      Locale locale0 = Locale.KOREAN;
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko", locale0.toString());
      assertNotNull(locale0);
      
      boolean boolean2 = jSONReaderScanner0.scanBoolean('\"');
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(16, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals('f', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertFalse(boolean2);
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner1));
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertNotSame(jSONReaderScanner0, jSONReaderScanner1);
      
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextToken();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Locale locale0 = new Locale("K>wGAwR", "K>wGAwR");
      assertEquals("k>wgawr", locale0.getLanguage());
      assertEquals("K>WGAWR", locale0.getCountry());
      assertEquals("k>wgawr_K>WGAWR", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("null");
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('n', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertNotNull(jSONReaderScanner0);
      
      String string0 = "Yoy[Uv&jFoV\"TM";
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("Yoy[Uv&jFoV\"TM", 'p');
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertEquals('Y', jSONReaderScanner1.getCurrent());
      assertEquals(112, jSONReaderScanner1.getFeatures());
      assertEquals(0, jSONReaderScanner1.pos());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(0, jSONReaderScanner1.token());
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertNotNull(jSONReaderScanner1);
      
      char[] charArray0 = new char[0];
      int int0 = 64;
      JSONReaderScanner jSONReaderScanner2 = new JSONReaderScanner(charArray0, 64, 64);
      assertEquals(0, jSONReaderScanner2.matchStat);
      assertNull(jSONReaderScanner2.stringDefaultValue());
      assertEquals(64, jSONReaderScanner2.getFeatures());
      assertEquals(0, jSONReaderScanner2.matchStat());
      assertEquals(0, jSONReaderScanner2.pos());
      assertTrue(jSONReaderScanner2.isEOF());
      assertEquals(0, jSONReaderScanner2.token());
      assertEquals('\u0000', jSONReaderScanner2.getCurrent());
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner1));
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner0));
      assertArrayEquals(new char[] {}, charArray0);
      assertNotNull(jSONReaderScanner2);
      
      int int1 = jSONReaderScanner0.scanInt('%');
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('n', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, int1);
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner2));
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner1));
      assertFalse(int1 == int0);
      assertNotSame(jSONReaderScanner0, jSONReaderScanner2);
      assertNotSame(jSONReaderScanner0, jSONReaderScanner1);
      
      // Undeclared exception!
      try { 
        jSONReaderScanner0.charAt((-1474491267));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1474491267
         //
         verifyException("com.alibaba.fastjson.parser.JSONReaderScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      char[] charArray0 = new char[0];
      StringReader stringReader0 = new StringReader("44nk");
      assertNotNull(stringReader0);
      
      stringReader0.reset();
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("nw");
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('n', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertNotNull(jSONReaderScanner0);
      
      BigInteger bigInteger0 = jSONReaderScanner0.scanFieldBigInteger(charArray0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('n', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertArrayEquals(new char[] {}, charArray0);
      assertNull(bigInteger0);
      
      boolean boolean2 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      String string0 = jSONReaderScanner0.stringVal();
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('n', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals("", string0);
      assertNotNull(string0);
      
      char char0 = 'l';
      int int0 = jSONReaderScanner0.scanInt('l');
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('n', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, int0);
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("g\"z4X", 3868);
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertEquals(0, jSONReaderScanner1.pos());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals(3868, jSONReaderScanner1.getFeatures());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertEquals('g', jSONReaderScanner1.getCurrent());
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertNotNull(jSONReaderScanner1);
      
      jSONReaderScanner0.stringDefaultValue = "";
      assertEquals("", jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('n', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      
      boolean boolean3 = jSONReaderScanner1.isRef();
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertEquals(0, jSONReaderScanner1.pos());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals(3868, jSONReaderScanner1.getFeatures());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertEquals('g', jSONReaderScanner1.getCurrent());
      assertFalse(boolean3);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      
      boolean boolean4 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean4);
      assertTrue(boolean4 == boolean2);
      assertTrue(boolean4 == boolean1);
      assertTrue(boolean4 == boolean3);
      assertFalse(boolean4 == boolean0);
      
      float float0 = jSONReaderScanner0.scanFieldFloat(charArray0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals("", jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('n', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0.0F, float0, 0.01F);
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner1));
      assertNotSame(jSONReaderScanner0, jSONReaderScanner1);
      assertArrayEquals(new char[] {}, charArray0);
      
      int[] intArray0 = jSONReaderScanner1.scanFieldIntArray(charArray0);
      assertEquals((-2), jSONReaderScanner1.matchStat);
      assertEquals(0, jSONReaderScanner1.pos());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals(3868, jSONReaderScanner1.getFeatures());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals((-2), jSONReaderScanner1.matchStat());
      assertEquals('g', jSONReaderScanner1.getCurrent());
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertArrayEquals(new char[] {}, charArray0);
      assertNull(intArray0);
      
      boolean boolean5 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean5);
      assertTrue(boolean5 == boolean2);
      assertTrue(boolean5 == boolean1);
      assertFalse(boolean5 == boolean0);
      assertTrue(boolean5 == boolean3);
      assertTrue(boolean5 == boolean4);
      
      char[] charArray1 = null;
      int int1 = 41;
      SymbolTable symbolTable0 = new SymbolTable(66);
      assertNotNull(symbolTable0);
      
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner((char[]) null, 0, (-1));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("(\"cvw");
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals('(', jSONReaderScanner0.getCurrent());
      assertNotNull(jSONReaderScanner0);
      
      Locale locale0 = new Locale("(\"cvw", "(\"cvw");
      assertEquals("(\"cvw_(\"CVW", locale0.toString());
      assertEquals("(\"CVW", locale0.getCountry());
      assertEquals("(\"cvw", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(charArray0, 2786, 2786);
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals('\u0000', jSONReaderScanner1.getCurrent());
      assertTrue(jSONReaderScanner1.isEOF());
      assertEquals(2786, jSONReaderScanner1.getFeatures());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals(0, jSONReaderScanner1.token());
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertArrayEquals(new char[] {}, charArray0);
      assertNotNull(jSONReaderScanner1);
      
      JSONScanner jSONScanner0 = new JSONScanner(":B%V(ReLy9pS");
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(0, jSONScanner0.token());
      assertEquals('', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(989, jSONScanner0.getFeatures());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertNotNull(jSONScanner0);
      
      jSONScanner0.nextIdent();
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals('B', jSONScanner0.getCurrent());
      assertEquals(17, jSONScanner0.token());
      assertEquals(0, jSONScanner0.matchStat());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(1, jSONScanner0.pos());
      assertNull(jSONScanner0.stringDefaultValue());
      
      byte[] byteArray0 = jSONScanner0.bytesValue();
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals('B', jSONScanner0.getCurrent());
      assertEquals(17, jSONScanner0.token());
      assertEquals(0, jSONScanner0.matchStat());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(1, jSONScanner0.pos());
      assertNull(jSONScanner0.stringDefaultValue());
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNotNull(byteArray0);
      
      Locale locale1 = Locale.KOREAN;
      assertEquals("", locale1.getVariant());
      assertEquals("ko", locale1.getLanguage());
      assertEquals("", locale1.getCountry());
      assertEquals("", locale1.getISO3Country());
      assertEquals("ko", locale1.toString());
      assertEquals("kor", locale1.getISO3Language());
      assertFalse(locale1.equals((Object)locale0));
      assertNotSame(locale1, locale0);
      assertNotNull(locale1);
      
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      Locale.setDefault(locale_Category0, locale0);
      assertEquals("(\"cvw_(\"CVW", locale0.toString());
      assertEquals("(\"CVW", locale0.getCountry());
      assertEquals("(\"cvw", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertFalse(locale0.equals((Object)locale1));
      assertNotSame(locale0, locale1);
      
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextTokenWithColon();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - (, info : 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TW", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertNotNull(locale0);
      
      Locale locale1 = Locale.forLanguageTag("new");
      assertEquals("new", locale1.getLanguage());
      assertEquals("", locale1.getVariant());
      assertEquals("new", locale1.getISO3Language());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getCountry());
      assertEquals("new", locale1.toString());
      assertFalse(locale1.equals((Object)locale0));
      assertNotSame(locale1, locale0);
      assertNotNull(locale1);
      
      String string0 = locale0.getDisplayScript(locale1);
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TW", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("new", locale1.getLanguage());
      assertEquals("", locale1.getVariant());
      assertEquals("new", locale1.getISO3Language());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getCountry());
      assertEquals("new", locale1.toString());
      assertEquals("", string0);
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(locale1.equals((Object)locale0));
      assertNotSame(locale0, locale1);
      assertNotSame(locale1, locale0);
      assertNotNull(string0);
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("undpefined");
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals('u', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      assertFalse(jSONReaderScanner0.isEOF());
      assertNotNull(jSONReaderScanner0);
      
      Locale locale2 = Locale.JAPAN;
      assertEquals("JP", locale2.getCountry());
      assertEquals("ja", locale2.getLanguage());
      assertEquals("jpn", locale2.getISO3Language());
      assertEquals("JPN", locale2.getISO3Country());
      assertEquals("", locale2.getVariant());
      assertEquals("ja_JP", locale2.toString());
      assertFalse(locale2.equals((Object)locale0));
      assertFalse(locale2.equals((Object)locale1));
      assertNotSame(locale2, locale0);
      assertNotSame(locale2, locale1);
      assertNotNull(locale2);
      
      Locale locale3 = Locale.forLanguageTag("new");
      assertEquals("new", locale3.toString());
      assertEquals("", locale3.getVariant());
      assertEquals("", locale3.getISO3Country());
      assertEquals("", locale3.getCountry());
      assertEquals("new", locale3.getISO3Language());
      assertEquals("new", locale3.getLanguage());
      assertFalse(locale3.equals((Object)locale2));
      assertFalse(locale3.equals((Object)locale0));
      assertNotSame(locale3, locale2);
      assertSame(locale3, locale1);
      assertNotSame(locale3, locale0);
      assertNotNull(locale3);
      
      jSONReaderScanner0.putChar('9');
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals('u', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      assertFalse(jSONReaderScanner0.isEOF());
      
      boolean boolean0 = jSONReaderScanner0.scanBoolean('9');
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals('u', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      assertFalse(jSONReaderScanner0.isEOF());
      assertFalse(boolean0);
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("false");
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals('f', jSONReaderScanner1.getCurrent());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.token());
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertNotNull(jSONReaderScanner1);
      
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      Locale.setDefault(locale_Category0, locale0);
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TW", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(locale0.equals((Object)locale2));
      assertFalse(locale0.equals((Object)locale3));
      assertNotSame(locale0, locale1);
      assertNotSame(locale0, locale2);
      assertNotSame(locale0, locale3);
      
      char char0 = 't';
      jSONReaderScanner1.nextToken();
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertTrue(jSONReaderScanner1.isEOF());
      assertEquals(7, jSONReaderScanner1.token());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertEquals('\u001A', jSONReaderScanner1.getCurrent());
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      
      char[] charArray0 = null;
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner((char[]) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      Locale locale1 = Locale.forLanguageTag("new");
      assertEquals("", locale1.getVariant());
      assertEquals("new", locale1.getLanguage());
      assertEquals("", locale1.getCountry());
      assertEquals("new", locale1.toString());
      assertEquals("", locale1.getISO3Country());
      assertEquals("new", locale1.getISO3Language());
      assertFalse(locale1.equals((Object)locale0));
      assertNotSame(locale1, locale0);
      assertNotNull(locale1);
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("new");
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('n', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertNotNull(jSONReaderScanner0);
      
      char char0 = 'F';
      UUID uUID0 = jSONReaderScanner0.scanUUID(' ');
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('n', jSONReaderScanner0.getCurrent());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertNull(uUID0);
      
      jSONReaderScanner0.nextIdent();
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.pos());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(9, jSONReaderScanner0.token());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals('\u001A', jSONReaderScanner0.getCurrent());
      
      String string0 = "_@EtQBDXZ.tVCij";
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("_@EtQBDXZ.tVCij");
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals(0, jSONReaderScanner1.pos());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertEquals('_', jSONReaderScanner1.getCurrent());
      assertFalse(jSONReaderScanner1.isEOF());
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertNotNull(jSONReaderScanner1);
      
      // Undeclared exception!
      try { 
        jSONReaderScanner0.floatValue();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      char[] charArray0 = new char[16];
      charArray0[0] = '-';
      charArray0[1] = '-';
      charArray0[2] = 'c';
      charArray0[3] = '5';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("{", 116);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals('{', jSONReaderScanner0.getCurrent());
      assertEquals(116, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertNotNull(jSONReaderScanner0);
      
      TimeZone timeZone0 = jSONReaderScanner0.getTimeZone();
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals('{', jSONReaderScanner0.getCurrent());
      assertEquals(116, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      jSONReaderScanner0.nextToken(116);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.pos());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals(12, jSONReaderScanner0.token());
      assertEquals(116, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals('\u001A', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      
      boolean boolean0 = jSONReaderScanner0.isBlankInput();
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.pos());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals(12, jSONReaderScanner0.token());
      assertEquals(116, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals('\u001A', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertFalse(boolean0);
      
      BigInteger bigInteger0 = jSONReaderScanner0.scanFieldBigInteger(charArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.pos());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertEquals(12, jSONReaderScanner0.token());
      assertEquals(116, jSONReaderScanner0.getFeatures());
      assertEquals('\u001A', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertNull(bigInteger0);
      
      // Undeclared exception!
      try { 
        JSONLexerBase.readString(charArray0, (-2));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("71_Ak");
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('7', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertNotNull(jSONReaderScanner0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      int int0 = 123;
      JSONScanner jSONScanner0 = new JSONScanner("71_Ak", 123);
      assertEquals(0, jSONScanner0.matchStat);
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(123, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals('7', jSONScanner0.getCurrent());
      assertNotNull(jSONScanner0);
      
      char char0 = '`';
      char char1 = '^';
      int int1 = jSONReaderScanner0.scanInt('^');
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('7', jSONReaderScanner0.getCurrent());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(71, int1);
      assertFalse(int1 == int0);
      
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanTrue();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse true
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      char[] charArray0 = new char[3];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 284);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(jSONReaderScanner0);
      
      Class<Feature> class0 = Feature.class;
      SymbolTable symbolTable0 = new SymbolTable(284);
      assertNotNull(symbolTable0);
      
      Enum<?> enum0 = jSONReaderScanner0.scanEnum(class0, symbolTable0, 'x');
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000'}, charArray0);
      assertNull(enum0);
      
      boolean boolean0 = jSONReaderScanner0.isEnabled((-3010), 36);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertTrue(boolean0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000'}, charArray0);
      
      int int0 = jSONReaderScanner0.scanType("7:s:)UyU{t4");
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals((-2), int0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000'}, charArray0);
      
      Date date0 = jSONReaderScanner0.scanDate('u');
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000'}, charArray0);
      assertNull(date0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("TnbwjtprsU$WAlpO");
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.pos());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.token());
      assertEquals('T', jSONScanner0.getCurrent());
      assertNull(jSONScanner0.stringDefaultValue());
      assertNotNull(jSONScanner0);
      
      char[] charArray0 = new char[3];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("pHy;8`K0m{Q R-k&2f.");
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('p', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertNotNull(jSONReaderScanner0);
      
      float float0 = jSONReaderScanner0.scanFloat('8');
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('p', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0.0F, float0, 0.01F);
      
      jSONReaderScanner0.putChar('8');
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('p', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      
      jSONReaderScanner0.nextToken((-1));
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals('H', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(1, jSONReaderScanner0.token());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      
      jSONReaderScanner0.scanIdent();
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(';', jSONReaderScanner0.getCurrent());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(18, jSONReaderScanner0.token());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      
      boolean boolean0 = jSONReaderScanner0.scanBoolean('8');
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(';', jSONReaderScanner0.getCurrent());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(18, jSONReaderScanner0.token());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertFalse(boolean0);
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("TnbwjtprsU$WAlpO");
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertEquals('T', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals(0, jSONReaderScanner1.token());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertNotNull(jSONReaderScanner1);
      
      Locale locale0 = Locale.KOREAN;
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertNotNull(locale0);
      
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      Locale.setDefault(locale_Category0, locale0);
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      
      boolean boolean1 = jSONReaderScanner0.scanBoolean('\"');
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(';', jSONReaderScanner0.getCurrent());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(18, jSONReaderScanner0.token());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertFalse(boolean1);
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner1));
      assertTrue(boolean1 == boolean0);
      assertNotSame(jSONReaderScanner0, jSONReaderScanner1);
      
      jSONReaderScanner1.nextToken();
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertEquals('$', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals(18, jSONReaderScanner1.token());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      
      boolean boolean2 = jSONReaderScanner1.scanBoolean('8');
      assertEquals((-1), jSONReaderScanner1.matchStat);
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertEquals('$', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals(18, jSONReaderScanner1.token());
      assertEquals((-1), jSONReaderScanner1.matchStat());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertFalse(boolean2);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      
      jSONReaderScanner0.nextToken();
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals(3, jSONReaderScanner0.pos());
      assertEquals('8', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(24, jSONReaderScanner0.token());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner1));
      assertNotSame(jSONReaderScanner0, jSONReaderScanner1);
      
      boolean boolean3 = jSONReaderScanner1.matchField(charArray0);
      assertEquals((-1), jSONReaderScanner1.matchStat);
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertEquals('$', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals(18, jSONReaderScanner1.token());
      assertEquals((-1), jSONReaderScanner1.matchStat());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertFalse(boolean3);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000'}, charArray0);
      
      String string0 = jSONReaderScanner1.stringVal();
      assertEquals((-1), jSONReaderScanner1.matchStat);
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertEquals('$', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals(18, jSONReaderScanner1.token());
      assertEquals((-1), jSONReaderScanner1.matchStat());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals("TnbwjtprsU", string0);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertNotNull(string0);
      
      BigDecimal bigDecimal0 = jSONReaderScanner1.scanFieldDecimal(charArray0);
      assertEquals((-2), jSONReaderScanner1.matchStat);
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertEquals('$', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals(18, jSONReaderScanner1.token());
      assertEquals((-2), jSONReaderScanner1.matchStat());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000'}, charArray0);
      assertNull(bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("error parse new");
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('e', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertNotNull(jSONReaderScanner0);
      
      int int0 = 68;
      jSONReaderScanner0.features = 68;
      assertEquals(68, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('e', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.matchStat());
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("error parse new");
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals('e', jSONReaderScanner1.getCurrent());
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertNotNull(jSONReaderScanner1);
      
      JSONReaderScanner jSONReaderScanner2 = new JSONReaderScanner("z&vN%&1Tlt*Gx?N;m");
      assertEquals(0, jSONReaderScanner2.matchStat);
      assertEquals(0, jSONReaderScanner2.pos());
      assertEquals(0, jSONReaderScanner2.token());
      assertEquals(989, jSONReaderScanner2.getFeatures());
      assertNull(jSONReaderScanner2.stringDefaultValue());
      assertEquals(0, jSONReaderScanner2.matchStat());
      assertEquals('z', jSONReaderScanner2.getCurrent());
      assertFalse(jSONReaderScanner2.isEOF());
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner0));
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner1));
      assertNotNull(jSONReaderScanner2);
      
      JSONReaderScanner jSONReaderScanner3 = new JSONReaderScanner("error parse new");
      assertEquals(0, jSONReaderScanner3.matchStat);
      assertEquals(0, jSONReaderScanner3.pos());
      assertNull(jSONReaderScanner3.stringDefaultValue());
      assertEquals('e', jSONReaderScanner3.getCurrent());
      assertEquals(0, jSONReaderScanner3.matchStat());
      assertFalse(jSONReaderScanner3.isEOF());
      assertEquals(989, jSONReaderScanner3.getFeatures());
      assertEquals(0, jSONReaderScanner3.token());
      assertFalse(jSONReaderScanner3.equals((Object)jSONReaderScanner0));
      assertFalse(jSONReaderScanner3.equals((Object)jSONReaderScanner2));
      assertFalse(jSONReaderScanner3.equals((Object)jSONReaderScanner1));
      assertNotNull(jSONReaderScanner3);
      
      int int1 = jSONReaderScanner3.scanInt('?');
      assertEquals((-1), jSONReaderScanner3.matchStat);
      assertEquals(0, jSONReaderScanner3.pos());
      assertNull(jSONReaderScanner3.stringDefaultValue());
      assertEquals('e', jSONReaderScanner3.getCurrent());
      assertEquals((-1), jSONReaderScanner3.matchStat());
      assertFalse(jSONReaderScanner3.isEOF());
      assertEquals(989, jSONReaderScanner3.getFeatures());
      assertEquals(0, jSONReaderScanner3.token());
      assertEquals(0, int1);
      assertFalse(jSONReaderScanner3.equals((Object)jSONReaderScanner0));
      assertFalse(jSONReaderScanner3.equals((Object)jSONReaderScanner2));
      assertFalse(jSONReaderScanner3.equals((Object)jSONReaderScanner1));
      assertFalse(int1 == int0);
      assertNotSame(jSONReaderScanner3, jSONReaderScanner0);
      assertNotSame(jSONReaderScanner3, jSONReaderScanner2);
      assertNotSame(jSONReaderScanner3, jSONReaderScanner1);
      
      char[] charArray0 = new char[1];
      charArray0[0] = '?';
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertFalse(boolean0);
      
      TimeZone timeZone0 = jSONReaderScanner1.getTimeZone();
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals('e', jSONReaderScanner1.getCurrent());
      assertEquals("GMT", timeZone0.getID());
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner2));
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner3));
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertNotSame(jSONReaderScanner1, jSONReaderScanner2);
      assertNotSame(jSONReaderScanner1, jSONReaderScanner3);
      assertNotNull(timeZone0);
      
      jSONReaderScanner1.nextToken(10);
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals(1, jSONReaderScanner1.token());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertEquals('r', jSONReaderScanner1.getCurrent());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner2));
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner3));
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertNotSame(jSONReaderScanner1, jSONReaderScanner2);
      assertNotSame(jSONReaderScanner1, jSONReaderScanner3);
      
      JSONReaderScanner jSONReaderScanner4 = null;
      try {
        jSONReaderScanner4 = new JSONReaderScanner(charArray0, (-354));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.CharArrayReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-24);
      byteArray0[1] = (byte)76;
      byteArray0[2] = (byte)83;
      byteArray0[3] = (byte)83;
      byteArray0[4] = (byte)83;
      byteArray0[5] = (byte) (-24);
      byteArray0[6] = (byte) (-24);
      byteArray0[7] = (byte)5;
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte) (-24), (byte)76, (byte)83, (byte)83, (byte)83, (byte) (-24), (byte) (-24), (byte)5}, byteArray0);
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(", property ");
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(',', jSONReaderScanner0.getCurrent());
      assertNotNull(jSONReaderScanner0);
      
      SymbolTable symbolTable0 = new SymbolTable((byte)76);
      assertNotNull(symbolTable0);
      
      int int0 = jSONReaderScanner0.scanInt('\\');
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(',', jSONReaderScanner0.getCurrent());
      assertEquals(0, int0);
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("(#-m( ");
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertEquals('(', jSONReaderScanner1.getCurrent());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals(0, jSONReaderScanner1.pos());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertNotNull(jSONReaderScanner1);
      
      jSONReaderScanner0.nextToken();
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(16, jSONReaderScanner0.token());
      assertEquals(' ', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner1));
      assertNotSame(jSONReaderScanner0, jSONReaderScanner1);
      
      String string0 = jSONReaderScanner0.scanSymbol(symbolTable0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(18, jSONReaderScanner0.token());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(' ', jSONReaderScanner0.getCurrent());
      assertEquals("property", string0);
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner1));
      assertNotSame(jSONReaderScanner0, jSONReaderScanner1);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("AllowArbitraryCommas");
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('A', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertNotNull(jSONReaderScanner0);
      
      String string0 = jSONReaderScanner0.stringVal();
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('A', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals("", string0);
      assertNotNull(string0);
      
      Date date0 = jSONReaderScanner0.scanDate('j');
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('A', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertNull(date0);
      
      TimeZone timeZone0 = jSONReaderScanner0.getTimeZone();
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('A', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      jSONReaderScanner0.setTimeZone(timeZone0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('A', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals("GMT", timeZone0.getID());
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("we?t");
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertEquals('w', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertFalse(jSONReaderScanner1.isEOF());
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertNotNull(jSONReaderScanner1);
      
      double double0 = jSONReaderScanner0.scanDouble('M');
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('A', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0.0, double0, 0.01);
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner1));
      assertNotSame(jSONReaderScanner0, jSONReaderScanner1);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("Yoy[Uv&jFoV\"TM");
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals('Y', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNotNull(jSONReaderScanner0);
      
      Locale locale0 = Locale.KOREAN;
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("ko", locale0.toString());
      assertNotNull(locale0);
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      assertFalse(boolean0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(".PT!R^<A>C9", 0);
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals(0, jSONReaderScanner1.token());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(0, jSONReaderScanner1.getFeatures());
      assertEquals('.', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertFalse(jSONReaderScanner1.isEOF());
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertNotNull(jSONReaderScanner1);
      
      jSONReaderScanner0.setLocale(locale0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals('Y', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("ko", locale0.toString());
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner1));
      assertNotSame(jSONReaderScanner0, jSONReaderScanner1);
      
      jSONReaderScanner1.resetStringPosition();
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals(0, jSONReaderScanner1.token());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(0, jSONReaderScanner1.getFeatures());
      assertEquals('.', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertFalse(jSONReaderScanner1.isEOF());
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      
      jSONReaderScanner0.nextToken();
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(1, jSONReaderScanner0.token());
      assertEquals('o', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner1));
      assertNotSame(jSONReaderScanner0, jSONReaderScanner1);
      
      JSONScanner jSONScanner0 = new JSONScanner("Yoy[Uv&jFoV\"TM", (-5806));
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals((-5806), jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals('Y', jSONScanner0.getCurrent());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.token());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertNotNull(jSONScanner0);
      
      boolean boolean1 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      jSONScanner0.np = 0;
      assertEquals((-5806), jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals('Y', jSONScanner0.getCurrent());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.token());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      
      jSONReaderScanner1.scanNumber();
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals(3, jSONReaderScanner1.token());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(0, jSONReaderScanner1.getFeatures());
      assertEquals('P', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertFalse(jSONReaderScanner1.isEOF());
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextTokenWithColon((-5806));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - o, info : 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("error parse null", 78);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(78, jSONReaderScanner0.getFeatures());
      assertEquals('e', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      assertNotNull(jSONReaderScanner0);
      
      TimeZone timeZone0 = jSONReaderScanner0.getTimeZone();
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(78, jSONReaderScanner0.getFeatures());
      assertEquals('e', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      jSONReaderScanner0.scanNumber();
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(78, jSONReaderScanner0.getFeatures());
      assertEquals('r', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(3, jSONReaderScanner0.token());
      
      char[] charArray0 = new char[0];
      BigInteger bigInteger0 = jSONReaderScanner0.scanFieldBigInteger(charArray0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(78, jSONReaderScanner0.getFeatures());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals('r', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(3, jSONReaderScanner0.token());
      assertArrayEquals(new char[] {}, charArray0);
      assertNull(bigInteger0);
      
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFieldBoolean((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONReaderScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      char[] charArray0 = new char[3];
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("utUywDl~&0", (-3311));
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals('u', jSONReaderScanner0.getCurrent());
      assertEquals("", jSONReaderScanner0.stringDefaultValue());
      assertEquals((-3311), jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertNotNull(jSONReaderScanner0);
      
      TimeZone timeZone0 = jSONReaderScanner0.getTimeZone();
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals('u', jSONReaderScanner0.getCurrent());
      assertEquals("", jSONReaderScanner0.stringDefaultValue());
      assertEquals((-3311), jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)4;
      byteArray0[1] = (byte)72;
      byteArray0[2] = (byte) (-38);
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte)4, (byte)72, (byte) (-38)}, byteArray0);
      
      jSONReaderScanner0.nextToken(8);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals("", jSONReaderScanner0.stringDefaultValue());
      assertEquals(18, jSONReaderScanner0.token());
      assertEquals((-3311), jSONReaderScanner0.getFeatures());
      assertEquals('~', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      
      BigInteger bigInteger0 = jSONReaderScanner0.scanFieldBigInteger(charArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals("", jSONReaderScanner0.stringDefaultValue());
      assertEquals(18, jSONReaderScanner0.token());
      assertEquals((-3311), jSONReaderScanner0.getFeatures());
      assertEquals('~', jSONReaderScanner0.getCurrent());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000'}, charArray0);
      assertNull(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      char[] charArray0 = new char[1];
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      assertFalse(boolean0);
      
      char char0 = 'I';
      charArray0[0] = 'I';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 'I');
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals('I', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertArrayEquals(new char[] {'I'}, charArray0);
      assertNotNull(jSONReaderScanner0);
      
      int[] intArray0 = jSONReaderScanner0.scanFieldIntArray(charArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('I', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertArrayEquals(new char[] {'I'}, charArray0);
      assertNull(intArray0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("DisableCheckSpecialChar", 151);
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals('D', jSONReaderScanner1.getCurrent());
      assertEquals(151, jSONReaderScanner1.getFeatures());
      assertEquals(0, jSONReaderScanner1.pos());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertNotNull(jSONReaderScanner1);
      
      jSONReaderScanner0.sp = 602;
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('I', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      
      // Undeclared exception!
      try { 
        jSONReaderScanner0.intValue();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // \u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Locale locale0 = new Locale("7[1_Ak", "7[1_Ak");
      assertEquals("7[1_AK", locale0.getCountry());
      assertEquals("7[1_ak_7[1_AK", locale0.toString());
      assertEquals("7[1_ak", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("null");
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals('n', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertNotNull(jSONReaderScanner0);
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("Yoy[Uv&jFoV\"TM");
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertEquals('Y', jSONReaderScanner1.getCurrent());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertNotNull(jSONReaderScanner1);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      String string0 = jSONReaderScanner1.stringVal();
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertEquals('Y', jSONReaderScanner1.getCurrent());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertEquals("", string0);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertNotNull(string0);
      
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ">");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'p';
      jSONReaderScanner1.matchStat = 0;
      assertEquals('Y', jSONReaderScanner1.getCurrent());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(0, jSONReaderScanner1.matchStat());
      
      charArray0[1] = 'P';
      int int0 = jSONReaderScanner1.scanInt('r');
      assertEquals((-1), jSONReaderScanner1.matchStat);
      assertEquals((-1), jSONReaderScanner1.matchStat());
      assertEquals('Y', jSONReaderScanner1.getCurrent());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(0, int0);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      
      boolean boolean2 = jSONReaderScanner1.scanFieldBoolean(charArray0);
      assertEquals((-2), jSONReaderScanner1.matchStat);
      assertEquals('Y', jSONReaderScanner1.getCurrent());
      assertEquals((-2), jSONReaderScanner1.matchStat());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertFalse(boolean2);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertArrayEquals(new char[] {'p', 'P'}, charArray0);
      
      boolean boolean3 = jSONReaderScanner0.scanBoolean('+');
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals('n', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertFalse(boolean3);
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner1));
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertNotSame(jSONReaderScanner0, jSONReaderScanner1);
      
      jSONReaderScanner1.nextToken();
      assertEquals((-2), jSONReaderScanner1.matchStat);
      assertEquals((-2), jSONReaderScanner1.matchStat());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals(1, jSONReaderScanner1.token());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals('o', jSONReaderScanner1.getCurrent());
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      
      JSONScanner jSONScanner0 = new JSONScanner("7[1_Ak");
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(989, jSONScanner0.getFeatures());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.matchStat());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals('7', jSONScanner0.getCurrent());
      assertNotNull(jSONScanner0);
      
      BigDecimal bigDecimal0 = jSONReaderScanner0.scanDecimal('P');
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals('n', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner1));
      assertNotSame(jSONReaderScanner0, jSONReaderScanner1);
      assertNull(bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("7[1_Ak");
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals('7', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertNotNull(jSONReaderScanner0);
      
      Locale locale0 = new Locale("7[1_Ak", "7[1_Ak");
      assertEquals("7[1_AK", locale0.getCountry());
      assertEquals("7[1_ak_7[1_AK", locale0.toString());
      assertEquals("7[1_ak", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      long long0 = jSONReaderScanner0.scanLong('P');
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals('7', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(7L, long0);
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("null");
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals(0, jSONReaderScanner1.token());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertEquals('n', jSONReaderScanner1.getCurrent());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertNotNull(jSONReaderScanner1);
      
      float float0 = jSONReaderScanner1.scanFloat('p');
      assertEquals((-1), jSONReaderScanner1.matchStat);
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals((-1), jSONReaderScanner1.matchStat());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals('n', jSONReaderScanner1.getCurrent());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(0.0F, float0, 0.01F);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      
      jSONReaderScanner0.putChar('d');
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals('7', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner1));
      assertNotSame(jSONReaderScanner0, jSONReaderScanner1);
      
      boolean boolean0 = jSONReaderScanner1.scanBoolean('Q');
      assertEquals((-1), jSONReaderScanner1.matchStat);
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals((-1), jSONReaderScanner1.matchStat());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals('n', jSONReaderScanner1.getCurrent());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertFalse(boolean0);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      
      JSONReaderScanner jSONReaderScanner2 = new JSONReaderScanner("Yoy[Uv&jFoV\"TM");
      assertEquals(0, jSONReaderScanner2.matchStat);
      assertNull(jSONReaderScanner2.stringDefaultValue());
      assertEquals(989, jSONReaderScanner2.getFeatures());
      assertEquals(0, jSONReaderScanner2.token());
      assertEquals(0, jSONReaderScanner2.pos());
      assertFalse(jSONReaderScanner2.isEOF());
      assertEquals(0, jSONReaderScanner2.matchStat());
      assertEquals('Y', jSONReaderScanner2.getCurrent());
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner0));
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner1));
      assertNotNull(jSONReaderScanner2);
      
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string0 = jSONReaderScanner2.stringVal();
      assertEquals(0, jSONReaderScanner2.matchStat);
      assertNull(jSONReaderScanner2.stringDefaultValue());
      assertEquals(989, jSONReaderScanner2.getFeatures());
      assertEquals(0, jSONReaderScanner2.token());
      assertEquals(0, jSONReaderScanner2.pos());
      assertFalse(jSONReaderScanner2.isEOF());
      assertEquals(0, jSONReaderScanner2.matchStat());
      assertEquals('Y', jSONReaderScanner2.getCurrent());
      assertEquals("", string0);
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner0));
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner1));
      assertNotSame(jSONReaderScanner2, jSONReaderScanner0);
      assertNotSame(jSONReaderScanner2, jSONReaderScanner1);
      assertNotNull(string0);
      
      boolean boolean2 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ">");
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'p';
      charArray0[1] = 'P';
      boolean boolean3 = jSONReaderScanner2.scanFieldBoolean(charArray0);
      assertEquals((-2), jSONReaderScanner2.matchStat);
      assertNull(jSONReaderScanner2.stringDefaultValue());
      assertEquals(989, jSONReaderScanner2.getFeatures());
      assertEquals(0, jSONReaderScanner2.token());
      assertEquals(0, jSONReaderScanner2.pos());
      assertFalse(jSONReaderScanner2.isEOF());
      assertEquals('Y', jSONReaderScanner2.getCurrent());
      assertEquals((-2), jSONReaderScanner2.matchStat());
      assertFalse(boolean3);
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner0));
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner1));
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertNotSame(jSONReaderScanner2, jSONReaderScanner0);
      assertNotSame(jSONReaderScanner2, jSONReaderScanner1);
      assertArrayEquals(new char[] {'p', 'P'}, charArray0);
      
      float float1 = jSONReaderScanner0.scanFieldFloat(charArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals('7', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0.0F, float1, 0.01F);
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner1));
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner2));
      assertEquals(float1, float0, 0.01F);
      assertNotSame(jSONReaderScanner0, jSONReaderScanner1);
      assertNotSame(jSONReaderScanner0, jSONReaderScanner2);
      assertArrayEquals(new char[] {'p', 'P'}, charArray0);
      
      boolean boolean4 = jSONReaderScanner1.scanBoolean('+');
      assertEquals((-1), jSONReaderScanner1.matchStat);
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals((-1), jSONReaderScanner1.matchStat());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals('n', jSONReaderScanner1.getCurrent());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertFalse(boolean4);
      assertTrue(boolean4 == boolean2);
      assertTrue(boolean4 == boolean3);
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4 == boolean1);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner2));
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertNotSame(jSONReaderScanner1, jSONReaderScanner2);
      
      jSONReaderScanner2.nextToken();
      assertEquals((-2), jSONReaderScanner2.matchStat);
      assertNull(jSONReaderScanner2.stringDefaultValue());
      assertEquals(989, jSONReaderScanner2.getFeatures());
      assertEquals('o', jSONReaderScanner2.getCurrent());
      assertEquals(0, jSONReaderScanner2.pos());
      assertEquals(1, jSONReaderScanner2.token());
      assertFalse(jSONReaderScanner2.isEOF());
      assertEquals((-2), jSONReaderScanner2.matchStat());
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner0));
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner1));
      assertNotSame(jSONReaderScanner2, jSONReaderScanner0);
      assertNotSame(jSONReaderScanner2, jSONReaderScanner1);
      
      JSONScanner jSONScanner0 = new JSONScanner("hr", 12);
      assertEquals(0, jSONScanner0.matchStat);
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals('h', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.token());
      assertEquals(12, jSONScanner0.getFeatures());
      assertFalse(jSONScanner0.isEOF());
      assertNotNull(jSONScanner0);
      
      BigDecimal bigDecimal0 = jSONReaderScanner1.scanDecimal('P');
      assertEquals((-1), jSONReaderScanner1.matchStat);
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals((-1), jSONReaderScanner1.matchStat());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals('n', jSONReaderScanner1.getCurrent());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner2));
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertNotSame(jSONReaderScanner1, jSONReaderScanner2);
      assertNull(bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("1_Ak");
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals('1', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      assertNotNull(jSONReaderScanner0);
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("1_Ak", 0);
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals('1', jSONReaderScanner1.getCurrent());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertEquals(0, jSONReaderScanner1.pos());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(0, jSONReaderScanner1.getFeatures());
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertNotNull(jSONReaderScanner1);
      
      TimeZone timeZone0 = jSONReaderScanner1.getTimeZone();
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals('1', jSONReaderScanner1.getCurrent());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertEquals(0, jSONReaderScanner1.pos());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(0, jSONReaderScanner1.getFeatures());
      assertEquals("GMT", timeZone0.getID());
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertNotNull(timeZone0);
      
      char[] charArray0 = new char[0];
      BigInteger bigInteger0 = jSONReaderScanner0.scanFieldBigInteger(charArray0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals('1', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner1));
      assertNotSame(jSONReaderScanner0, jSONReaderScanner1);
      assertArrayEquals(new char[] {}, charArray0);
      assertNull(bigInteger0);
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "1_Ak");
      assertFalse(boolean0);
      
      jSONReaderScanner1.nextToken(539);
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertEquals('_', jSONReaderScanner1.getCurrent());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals(2, jSONReaderScanner1.token());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(0, jSONReaderScanner1.getFeatures());
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      
      Class<Object> class0 = Object.class;
      SymbolTable symbolTable0 = new SymbolTable(553);
      assertNotNull(symbolTable0);
      
      Enum<?> enum0 = jSONReaderScanner0.scanEnum(class0, symbolTable0, 'g');
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals('1', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner1));
      assertNotSame(jSONReaderScanner0, jSONReaderScanner1);
      assertNull(enum0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("50hwh<");
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals('5', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertNotNull(jSONReaderScanner0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte) (-42);
      String string0 = jSONReaderScanner0.stringVal();
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals('5', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals("", string0);
      assertNotNull(string0);
      
      byteArray0[2] = (byte)31;
      boolean boolean2 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-42), (byte)31}, byteArray0);
      
      char[] charArray0 = new char[3];
      boolean boolean3 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean3);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-42), (byte)31}, byteArray0);
      
      jSONReaderScanner0.nextToken((int) (byte)31);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(2, jSONReaderScanner0.token());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals('h', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      
      BigInteger bigInteger0 = jSONReaderScanner0.scanFieldBigInteger(charArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(2, jSONReaderScanner0.token());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertEquals('h', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000'}, charArray0);
      assertNull(bigInteger0);
      
      BigDecimal bigDecimal0 = jSONReaderScanner0.decimalValue();
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(2, jSONReaderScanner0.token());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertEquals('h', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((short)50, bigDecimal0.shortValue());
      assertEquals((byte)50, bigDecimal0.byteValue());
      assertNotNull(bigDecimal0);
      
      Number number0 = jSONReaderScanner0.integerValue();
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(2, jSONReaderScanner0.token());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertEquals('h', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(50, number0);
      assertNotNull(number0);
      
      char char0 = jSONReaderScanner0.next();
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(2, jSONReaderScanner0.token());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals('w', jSONReaderScanner0.getCurrent());
      assertEquals('w', char0);
      
      BigDecimal bigDecimal1 = jSONReaderScanner0.decimalValue();
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(2, jSONReaderScanner0.token());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals('w', jSONReaderScanner0.getCurrent());
      assertEquals((byte)50, bigDecimal1.byteValue());
      assertEquals((short)50, bigDecimal1.shortValue());
      assertTrue(bigDecimal1.equals((Object)bigDecimal0));
      assertNotSame(bigDecimal1, bigDecimal0);
      assertNotNull(bigDecimal1);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("50hwh<");
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('5', jSONReaderScanner0.getCurrent());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertNotNull(jSONReaderScanner0);
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("50hwh<");
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals('5', jSONReaderScanner1.getCurrent());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(0, jSONReaderScanner1.pos());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertNotNull(jSONReaderScanner1);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Locale locale0 = Locale.KOREAN;
      assertEquals("ko", locale0.toString());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("ko", locale0.getLanguage());
      assertNotNull(locale0);
      
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      Locale.setDefault(locale_Category0, locale0);
      assertEquals("ko", locale0.toString());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("ko", locale0.getLanguage());
      
      String string0 = locale0.getDisplayLanguage(locale0);
      assertEquals("ko", locale0.toString());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("\uD55C\uAD6D\uC5B4", string0);
      assertNotNull(string0);
      
      Locale.setDefault(locale_Category0, locale0);
      assertEquals("ko", locale0.toString());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("ko", locale0.getLanguage());
      
      Date date0 = jSONReaderScanner0.scanDate('w');
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('5', jSONReaderScanner0.getCurrent());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner1));
      assertNotSame(jSONReaderScanner0, jSONReaderScanner1);
      assertNull(date0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = '[';
      String string1 = locale0.getDisplayScript(locale0);
      assertEquals("ko", locale0.toString());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      // Undeclared exception!
      try { 
        jSONReaderScanner1.scanNullOrNew();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse null or new
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = '-';
      charArray0[1] = '0';
      charArray0[2] = 'c';
      charArray0[4] = '~';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 1139, 1139);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals('-', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(1139, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertArrayEquals(new char[] {'-', '0', 'c', '\u0000', '~'}, charArray0);
      assertNotNull(jSONReaderScanner0);
      
      Locale locale0 = Locale.TAIWAN;
      assertEquals("", locale0.getVariant());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertNotNull(locale0);
      
      Date date0 = jSONReaderScanner0.scanDate('c');
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals('-', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(1139, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertArrayEquals(new char[] {'-', '0', 'c', '\u0000', '~'}, charArray0);
      assertNull(date0);
      
      boolean boolean0 = jSONReaderScanner0.matchField(charArray0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals('\u001A', jSONReaderScanner0.getCurrent());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals(1139, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(20, jSONReaderScanner0.token());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertTrue(boolean0);
      assertArrayEquals(new char[] {'-', '0', 'c', '\u0000', '~'}, charArray0);
      
      BigInteger bigInteger0 = jSONReaderScanner0.scanFieldBigInteger(charArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertEquals('\u001A', jSONReaderScanner0.getCurrent());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals(1139, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(20, jSONReaderScanner0.token());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertArrayEquals(new char[] {'-', '0', 'c', '\u0000', '~'}, charArray0);
      assertNull(bigInteger0);
      
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFalse();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("pyr//|=j.hazE\"");
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('p', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertNotNull(jSONReaderScanner0);
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("Sp<ISO8601DateFormat");
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals('S', jSONReaderScanner1.getCurrent());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertNotNull(jSONReaderScanner1);
      
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      assertFalse(boolean0);
      
      jSONReaderScanner0.nextToken((int) (byte)4);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(1, jSONReaderScanner0.token());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('y', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner1));
      assertNotSame(jSONReaderScanner0, jSONReaderScanner1);
      
      JSONReaderScanner jSONReaderScanner2 = new JSONReaderScanner("illegal identifier : ");
      assertEquals(0, jSONReaderScanner2.matchStat);
      assertFalse(jSONReaderScanner2.isEOF());
      assertEquals('i', jSONReaderScanner2.getCurrent());
      assertEquals(989, jSONReaderScanner2.getFeatures());
      assertEquals(0, jSONReaderScanner2.matchStat());
      assertNull(jSONReaderScanner2.stringDefaultValue());
      assertEquals(0, jSONReaderScanner2.token());
      assertEquals(0, jSONReaderScanner2.pos());
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner1));
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner0));
      assertNotNull(jSONReaderScanner2);
      
      String string0 = jSONReaderScanner2.subString((byte)4, 0);
      assertEquals(0, jSONReaderScanner2.matchStat);
      assertFalse(jSONReaderScanner2.isEOF());
      assertEquals('i', jSONReaderScanner2.getCurrent());
      assertEquals(989, jSONReaderScanner2.getFeatures());
      assertEquals(0, jSONReaderScanner2.matchStat());
      assertNull(jSONReaderScanner2.stringDefaultValue());
      assertEquals(0, jSONReaderScanner2.token());
      assertEquals(0, jSONReaderScanner2.pos());
      assertEquals("", string0);
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner1));
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner0));
      assertNotSame(jSONReaderScanner2, jSONReaderScanner1);
      assertNotSame(jSONReaderScanner2, jSONReaderScanner0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("");
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertNotNull(jSONReaderScanner0);
      
      char[] charArray0 = new char[9];
      charArray0[0] = '+';
      charArray0[1] = ';';
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)4;
      byteArray0[1] = (byte)4;
      byteArray0[2] = (byte)4;
      byteArray0[3] = (byte)4;
      byteArray0[4] = (byte)4;
      byteArray0[5] = (byte)72;
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte)4, (byte)4, (byte)4, (byte)4, (byte)4, (byte)72}, byteArray0);
      
      jSONReaderScanner0.nextToken((int) (byte)4);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(20, jSONReaderScanner0.token());
      
      BigInteger bigInteger0 = jSONReaderScanner0.scanFieldBigInteger(charArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(20, jSONReaderScanner0.token());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertArrayEquals(new char[] {'+', ';', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNull(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("7[1_Ak");
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals('7', jSONReaderScanner0.getCurrent());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.token());
      assertNotNull(jSONReaderScanner0);
      
      Locale locale0 = new Locale("7[1_Ak", "7[1_Ak");
      assertEquals("7[1_ak_7[1_AK", locale0.toString());
      assertEquals("7[1_AK", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("7[1_ak", locale0.getLanguage());
      assertNotNull(locale0);
      
      char char0 = 'P';
      long long0 = JSONLexerBase.MULTMIN_RADIX_TEN;
      assertEquals((-922337203685477580L), long0);
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("null");
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertEquals(0, jSONReaderScanner1.pos());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals('n', jSONReaderScanner1.getCurrent());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertNotNull(jSONReaderScanner1);
      
      float float0 = jSONReaderScanner1.scanFloat('p');
      assertEquals((-1), jSONReaderScanner1.matchStat);
      assertEquals(0, jSONReaderScanner1.pos());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals('n', jSONReaderScanner1.getCurrent());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals((-1), jSONReaderScanner1.matchStat());
      assertEquals(0.0F, float0, 0.01F);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      
      Date date0 = jSONReaderScanner1.scanDate('D');
      assertEquals((-1), jSONReaderScanner1.matchStat);
      assertEquals(0, jSONReaderScanner1.pos());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals('n', jSONReaderScanner1.getCurrent());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals((-1), jSONReaderScanner1.matchStat());
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertNull(date0);
      
      jSONReaderScanner1.setLocale(locale0);
      assertEquals((-1), jSONReaderScanner1.matchStat);
      assertEquals("7[1_ak_7[1_AK", locale0.toString());
      assertEquals("7[1_AK", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("7[1_ak", locale0.getLanguage());
      assertEquals(0, jSONReaderScanner1.pos());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals('n', jSONReaderScanner1.getCurrent());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals((-1), jSONReaderScanner1.matchStat());
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      
      char[] charArray0 = null;
      JSONReaderScanner jSONReaderScanner2 = null;
      try {
        jSONReaderScanner2 = new JSONReaderScanner((char[]) null, (-1), 28);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.CharArrayReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Locale locale0 = Locale.KOREAN;
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ko", locale0.toString());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertNotNull(locale0);
      
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      Locale.setDefault(locale_Category0, locale0);
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ko", locale0.toString());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("vrrr", (-4302));
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals('v', jSONReaderScanner0.getCurrent());
      assertEquals((-4302), jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertNotNull(jSONReaderScanner0);
      
      jSONReaderScanner0.matchStat = (-1692);
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals('v', jSONReaderScanner0.getCurrent());
      assertEquals((-4302), jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals((-1692), jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.token());
      
      boolean boolean1 = jSONReaderScanner0.scanBoolean('Y');
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals('v', jSONReaderScanner0.getCurrent());
      assertEquals((-4302), jSONReaderScanner0.getFeatures());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      boolean boolean2 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      long long0 = jSONReaderScanner0.scanLong('L');
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals('v', jSONReaderScanner0.getCurrent());
      assertEquals((-4302), jSONReaderScanner0.getFeatures());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0L, long0);
      
      // Undeclared exception!
      try { 
        jSONReaderScanner0.skipComment();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid comment
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = ')';
      charArray0[1] = 'm';
      SymbolTable symbolTable0 = new SymbolTable(')');
      assertNotNull(symbolTable0);
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 45);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(')', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertArrayEquals(new char[] {')', 'm', '\u0000'}, charArray0);
      assertNotNull(jSONReaderScanner0);
      
      String string0 = jSONReaderScanner0.stringVal();
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(')', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals("", string0);
      assertArrayEquals(new char[] {')', 'm', '\u0000'}, charArray0);
      assertNotNull(string0);
      
      long long0 = jSONReaderScanner0.scanLong('|');
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(')', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0L, long0);
      assertArrayEquals(new char[] {')', 'm', '\u0000'}, charArray0);
      
      SymbolTable symbolTable1 = null;
      try {
        symbolTable1 = new SymbolTable((-2617));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.SymbolTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("1_Ak");
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals('1', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertNotNull(jSONReaderScanner0);
      
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("\":\"", 0);
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertEquals(0, jSONReaderScanner1.getFeatures());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertEquals(0, jSONReaderScanner1.pos());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals('\"', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.token());
      assertFalse(jSONReaderScanner1.isEOF());
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertNotNull(jSONReaderScanner1);
      
      TimeZone timeZone0 = jSONReaderScanner1.getTimeZone();
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertEquals(0, jSONReaderScanner1.getFeatures());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertEquals(0, jSONReaderScanner1.pos());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals('\"', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.token());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals("GMT", timeZone0.getID());
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertNotNull(timeZone0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)72;
      byteArray0[1] = (byte)72;
      byteArray0[2] = (byte) (-68);
      byteArray0[3] = (byte)72;
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "\":\"");
      assertFalse(boolean0);
      
      boolean boolean1 = jSONReaderScanner0.scanFieldBoolean(charArray0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals('1', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertFalse(boolean1);
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner1));
      assertTrue(boolean1 == boolean0);
      assertNotSame(jSONReaderScanner0, jSONReaderScanner1);
      assertArrayEquals(new char[] {}, charArray0);
      
      float float0 = jSONReaderScanner1.scanFieldFloat(charArray0);
      assertEquals((-1), jSONReaderScanner1.matchStat);
      assertEquals(0, jSONReaderScanner1.getFeatures());
      assertEquals((-1), jSONReaderScanner1.matchStat());
      assertEquals(0, jSONReaderScanner1.pos());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals('\"', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.token());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(0.0F, float0, 0.01F);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertArrayEquals(new char[] {}, charArray0);
      
      boolean boolean2 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertArrayEquals(new byte[] {(byte)72, (byte)72, (byte) (-68), (byte)72, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      jSONReaderScanner1.nextToken(539);
      assertEquals((-1), jSONReaderScanner1.matchStat);
      assertEquals(0, jSONReaderScanner1.getFeatures());
      assertEquals('\u001A', jSONReaderScanner1.getCurrent());
      assertEquals((-1), jSONReaderScanner1.matchStat());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals(4, jSONReaderScanner1.token());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertTrue(jSONReaderScanner1.isEOF());
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      
      BigInteger bigInteger0 = jSONReaderScanner1.scanFieldBigInteger(charArray0);
      assertEquals((-1), jSONReaderScanner1.matchStat);
      assertEquals(0, jSONReaderScanner1.getFeatures());
      assertEquals('\u001A', jSONReaderScanner1.getCurrent());
      assertEquals((-1), jSONReaderScanner1.matchStat());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals(4, jSONReaderScanner1.token());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertTrue(jSONReaderScanner1.isEOF());
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertArrayEquals(new char[] {}, charArray0);
      assertNull(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("not match ");
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('n', jSONReaderScanner0.getCurrent());
      assertNotNull(jSONReaderScanner0);
      
      Locale locale0 = Locale.KOREAN;
      assertEquals("ko", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("ko", locale0.getLanguage());
      assertNotNull(locale0);
      
      JSONScanner jSONScanner0 = new JSONScanner("not match ", (-4936));
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals('n', jSONScanner0.getCurrent());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.pos());
      assertFalse(jSONScanner0.isEOF());
      assertEquals((-4936), jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.token());
      assertNotNull(jSONScanner0);
      
      BigDecimal bigDecimal0 = jSONScanner0.scanFieldDecimal(charArray0);
      assertEquals((-1), jSONScanner0.matchStat);
      assertEquals('n', jSONScanner0.getCurrent());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals((-1), jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.pos());
      assertFalse(jSONScanner0.isEOF());
      assertEquals((-4936), jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.token());
      assertArrayEquals(new char[] {}, charArray0);
      assertNull(bigDecimal0);
      
      String string0 = jSONScanner0.scanFieldString(charArray0);
      assertEquals((-1), jSONScanner0.matchStat);
      assertEquals('n', jSONScanner0.getCurrent());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals((-1), jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.pos());
      assertFalse(jSONScanner0.isEOF());
      assertEquals((-4936), jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.token());
      assertArrayEquals(new char[] {}, charArray0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("71_Ak");
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals('7', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      assertFalse(jSONReaderScanner0.isEOF());
      assertNotNull(jSONReaderScanner0);
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("71_Ak");
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals(0, jSONReaderScanner1.pos());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertEquals('7', jSONReaderScanner1.getCurrent());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertNotNull(jSONReaderScanner1);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)72;
      byteArray0[1] = (byte)4;
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte)72, (byte)4}, byteArray0);
      
      jSONReaderScanner1.nextToken(0);
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertEquals(0, jSONReaderScanner1.pos());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals('_', jSONReaderScanner1.getCurrent());
      assertEquals(2, jSONReaderScanner1.token());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner2 = new JSONReaderScanner("71_Ak");
      assertEquals(0, jSONReaderScanner2.matchStat);
      assertEquals('7', jSONReaderScanner2.getCurrent());
      assertEquals(989, jSONReaderScanner2.getFeatures());
      assertEquals(0, jSONReaderScanner2.token());
      assertEquals(0, jSONReaderScanner2.matchStat());
      assertFalse(jSONReaderScanner2.isEOF());
      assertEquals(0, jSONReaderScanner2.pos());
      assertNull(jSONReaderScanner2.stringDefaultValue());
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner0));
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner1));
      assertNotNull(jSONReaderScanner2);
      
      // Undeclared exception!
      try { 
        jSONReaderScanner2.scanFieldDecimal(charArray0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("1_Ak");
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('1', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertNotNull(jSONReaderScanner0);
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("\":\"", 0);
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals('\"', jSONReaderScanner1.getCurrent());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(0, jSONReaderScanner1.getFeatures());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertFalse(jSONReaderScanner1.isEOF());
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertNotNull(jSONReaderScanner1);
      
      double double0 = jSONReaderScanner1.scanDouble('I');
      assertEquals((-1), jSONReaderScanner1.matchStat);
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals((-1), jSONReaderScanner1.matchStat());
      assertEquals('\"', jSONReaderScanner1.getCurrent());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(0, jSONReaderScanner1.getFeatures());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(0.0, double0, 0.01);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      
      TimeZone timeZone0 = jSONReaderScanner1.getTimeZone();
      assertEquals((-1), jSONReaderScanner1.matchStat);
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals((-1), jSONReaderScanner1.matchStat());
      assertEquals('\"', jSONReaderScanner1.getCurrent());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(0, jSONReaderScanner1.getFeatures());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals("GMT", timeZone0.getID());
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertNotNull(timeZone0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)72;
      byteArray0[1] = (byte)72;
      byteArray0[2] = (byte) (-68);
      byteArray0[3] = (byte)72;
      byteArray0[4] = (byte)8;
      byteArray0[4] = (byte)126;
      byteArray0[6] = (byte)72;
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte)72, (byte)72, (byte) (-68), (byte)72, (byte)126, (byte)0, (byte)72}, byteArray0);
      
      SymbolTable symbolTable0 = null;
      try {
        symbolTable0 = new SymbolTable((-2110));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.SymbolTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("true");
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals('t', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertNull(jSONScanner0.stringDefaultValue());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(989, jSONScanner0.getFeatures());
      assertNotNull(jSONScanner0);
      
      Locale locale0 = Locale.CHINESE;
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("zh", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zho", locale0.getISO3Language());
      assertNotNull(locale0);
      
      Locale locale1 = Locale.ROOT;
      assertEquals("", locale1.toString());
      assertEquals("", locale1.getLanguage());
      assertEquals("", locale1.getCountry());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getISO3Language());
      assertEquals("", locale1.getVariant());
      assertFalse(locale1.equals((Object)locale0));
      assertNotSame(locale1, locale0);
      assertNotNull(locale1);
      
      String string0 = locale0.getDisplayScript(locale1);
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("zh", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale1.toString());
      assertEquals("", locale1.getLanguage());
      assertEquals("", locale1.getCountry());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getISO3Language());
      assertEquals("", locale1.getVariant());
      assertEquals("", string0);
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(locale1.equals((Object)locale0));
      assertNotSame(locale0, locale1);
      assertNotSame(locale1, locale0);
      assertNotNull(string0);
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("''nL");
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('\'', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertNotNull(jSONReaderScanner0);
      
      Locale locale2 = Locale.JAPAN;
      assertEquals("JPN", locale2.getISO3Country());
      assertEquals("jpn", locale2.getISO3Language());
      assertEquals("JP", locale2.getCountry());
      assertEquals("ja_JP", locale2.toString());
      assertEquals("ja", locale2.getLanguage());
      assertEquals("", locale2.getVariant());
      assertFalse(locale2.equals((Object)locale1));
      assertFalse(locale2.equals((Object)locale0));
      assertNotSame(locale2, locale1);
      assertNotSame(locale2, locale0);
      assertNotNull(locale2);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[1] = (byte)8;
      byteArray0[3] = (byte)57;
      byteArray0[5] = (byte)8;
      jSONReaderScanner0.nextToken((int) (byte)57);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(4, jSONReaderScanner0.token());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals('n', jSONReaderScanner0.getCurrent());
      
      char[] charArray0 = new char[3];
      charArray0[1] = '7';
      BigInteger bigInteger0 = jSONReaderScanner0.scanFieldBigInteger(charArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertEquals(4, jSONReaderScanner0.token());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals('n', jSONReaderScanner0.getCurrent());
      assertArrayEquals(new char[] {'\u0000', '7', '\u0000'}, charArray0);
      assertNull(bigInteger0);
      
      JSONScanner jSONScanner1 = null;
      try {
        jSONScanner1 = new JSONScanner(charArray0, (-506), (-2419));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      String string0 = "null";
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "null");
      assertFalse(boolean0);
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("null");
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('n', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertNotNull(jSONReaderScanner0);
      
      char char0 = '8';
      float float0 = jSONReaderScanner0.scanFloat('8');
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('n', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0.0F, float0, 0.01F);
      
      jSONReaderScanner0.putChar('8');
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('n', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextToken(1538);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse null
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("7[1_Ak");
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals('7', jSONReaderScanner0.getCurrent());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNotNull(jSONReaderScanner0);
      
      Locale locale0 = new Locale("7[1_Ak", "7[1_Ak");
      assertEquals("", locale0.getVariant());
      assertEquals("7[1_AK", locale0.getCountry());
      assertEquals("7[1_ak_7[1_AK", locale0.toString());
      assertEquals("7[1_ak", locale0.getLanguage());
      assertNotNull(locale0);
      
      long long0 = jSONReaderScanner0.scanLong('P');
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals('7', jSONReaderScanner0.getCurrent());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(7L, long0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("null");
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertEquals('n', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertNotNull(jSONReaderScanner1);
      
      TimeZone timeZone0 = jSONReaderScanner1.getTimeZone();
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertEquals('n', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals("GMT", timeZone0.getID());
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertNotNull(timeZone0);
      
      byte[] byteArray0 = new byte[0];
      boolean boolean1 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      jSONReaderScanner1.nextToken(76);
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertEquals(8, jSONReaderScanner1.token());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertEquals('\u001A', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertTrue(jSONReaderScanner1.isEOF());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'P';
      charArray0[1] = 'P';
      charArray0[3] = 'P';
      charArray0[4] = 'P';
      charArray0[5] = 'P';
      charArray0[6] = '{';
      charArray0[7] = 'P';
      BigInteger bigInteger0 = jSONReaderScanner0.scanFieldBigInteger(charArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals('7', jSONReaderScanner0.getCurrent());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner1));
      assertNotSame(jSONReaderScanner0, jSONReaderScanner1);
      assertArrayEquals(new char[] {'P', 'P', '\u0000', 'P', 'P', 'P', '{', 'P'}, charArray0);
      assertNull(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("7[1_Ak");
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals('7', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNotNull(jSONReaderScanner0);
      
      Locale locale0 = new Locale("7[1_Ak", "7[1_Ak");
      assertEquals("7[1_ak", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("7[1_AK", locale0.getCountry());
      assertEquals("7[1_ak_7[1_AK", locale0.toString());
      assertNotNull(locale0);
      
      long long0 = jSONReaderScanner0.scanLong('Z');
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals('7', jSONReaderScanner0.getCurrent());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(7L, long0);
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("null");
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals('n', jSONReaderScanner1.getCurrent());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertNotNull(jSONReaderScanner1);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      float float0 = jSONReaderScanner1.scanFloat('p');
      assertEquals((-1), jSONReaderScanner1.matchStat);
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals('n', jSONReaderScanner1.getCurrent());
      assertEquals((-1), jSONReaderScanner1.matchStat());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertEquals(0.0F, float0, 0.01F);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      
      jSONReaderScanner0.putChar('d');
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals('7', jSONReaderScanner0.getCurrent());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner1));
      assertNotSame(jSONReaderScanner0, jSONReaderScanner1);
      
      JSONReaderScanner jSONReaderScanner2 = new JSONReaderScanner("7[1_Ak", 512);
      assertEquals(0, jSONReaderScanner2.matchStat);
      assertEquals(0, jSONReaderScanner2.pos());
      assertEquals('7', jSONReaderScanner2.getCurrent());
      assertEquals(0, jSONReaderScanner2.token());
      assertEquals(0, jSONReaderScanner2.matchStat());
      assertFalse(jSONReaderScanner2.isEOF());
      assertNull(jSONReaderScanner2.stringDefaultValue());
      assertEquals(512, jSONReaderScanner2.getFeatures());
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner0));
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner1));
      assertNotNull(jSONReaderScanner2);
      
      jSONReaderScanner2.nextToken(13);
      assertEquals(0, jSONReaderScanner2.matchStat);
      assertEquals(0, jSONReaderScanner2.pos());
      assertEquals(2, jSONReaderScanner2.token());
      assertEquals(0, jSONReaderScanner2.matchStat());
      assertEquals('[', jSONReaderScanner2.getCurrent());
      assertFalse(jSONReaderScanner2.isEOF());
      assertNull(jSONReaderScanner2.stringDefaultValue());
      assertEquals(512, jSONReaderScanner2.getFeatures());
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner0));
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner1));
      assertNotSame(jSONReaderScanner2, jSONReaderScanner0);
      assertNotSame(jSONReaderScanner2, jSONReaderScanner1);
      
      jSONReaderScanner0.scanIdent();
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('[', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(18, jSONReaderScanner0.token());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner1));
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner2));
      assertNotSame(jSONReaderScanner0, jSONReaderScanner1);
      assertNotSame(jSONReaderScanner0, jSONReaderScanner2);
      
      SymbolTable symbolTable0 = null;
      try {
        symbolTable0 = new SymbolTable((-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.SymbolTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      boolean boolean0 = JSONLexerBase.isWhitespace('8');
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "?%A@O|x1topa_nbQ!");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      JSONScanner jSONScanner0 = new JSONScanner("?%A@O|x1topa_nbQ!", 7);
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(7, jSONScanner0.getFeatures());
      assertFalse(jSONScanner0.isEOF());
      assertEquals('?', jSONScanner0.getCurrent());
      assertNull(jSONScanner0.stringDefaultValue());
      assertNotNull(jSONScanner0);
      
      jSONScanner0.nextToken(7);
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(0, jSONScanner0.pos());
      assertEquals(1, jSONScanner0.token());
      assertEquals('%', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(7, jSONScanner0.getFeatures());
      assertFalse(jSONScanner0.isEOF());
      assertNull(jSONScanner0.stringDefaultValue());
      
      char[] charArray0 = new char[3];
      charArray0[0] = '8';
      charArray0[1] = '8';
      charArray0[2] = ';';
      // Undeclared exception!
      try { 
        jSONScanner0.copyTo(7, 7, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = '4';
      charArray0[4] = 'c';
      charArray0[3] = '4';
      charArray0[3] = 'c';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 1139, (-2));
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals('4', jSONReaderScanner0.getCurrent());
      assertEquals((-2), jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals("", jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertArrayEquals(new char[] {'4', '\u0000', '\u0000', 'c', 'c'}, charArray0);
      assertNotNull(jSONReaderScanner0);
      
      double double0 = jSONReaderScanner0.scanDouble('4');
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals('4', jSONReaderScanner0.getCurrent());
      assertEquals((-2), jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals("", jSONReaderScanner0.stringDefaultValue());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(4.0, double0, 0.01);
      assertArrayEquals(new char[] {'4', '\u0000', '\u0000', 'c', 'c'}, charArray0);
      
      Locale locale0 = Locale.CANADA_FRENCH;
      assertEquals("CA", locale0.getCountry());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("CAN", locale0.getISO3Country());
      assertNotNull(locale0);
      
      String[] stringArray0 = Locale.getISOCountries();
      assertNotNull(stringArray0);
      
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      Locale.setDefault(locale_Category0, locale0);
      assertEquals("CA", locale0.getCountry());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("CAN", locale0.getISO3Country());
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("03FHuMMTh", (-2));
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals('0', jSONReaderScanner1.getCurrent());
      assertEquals((-2), jSONReaderScanner1.getFeatures());
      assertEquals("", jSONReaderScanner1.stringDefaultValue());
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertNotNull(jSONReaderScanner1);
      
      String string0 = jSONReaderScanner1.stringVal();
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals('0', jSONReaderScanner1.getCurrent());
      assertEquals((-2), jSONReaderScanner1.getFeatures());
      assertEquals("", jSONReaderScanner1.stringDefaultValue());
      assertEquals("", string0);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertNotNull(string0);
      
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanDecimal('M');
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("error parse new");
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals('e', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertNotNull(jSONReaderScanner0);
      
      JSONScanner jSONScanner0 = new JSONScanner("_%");
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals('_', jSONScanner0.getCurrent());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(989, jSONScanner0.getFeatures());
      assertFalse(jSONScanner0.isEOF());
      assertNotNull(jSONScanner0);
      
      jSONReaderScanner0.scanIdent();
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(' ', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(18, jSONReaderScanner0.token());
      
      JSONScanner jSONScanner1 = new JSONScanner(" - ", 44);
      assertEquals(0, jSONScanner1.matchStat);
      assertEquals(' ', jSONScanner1.getCurrent());
      assertEquals(0, jSONScanner1.token());
      assertEquals(0, jSONScanner1.matchStat());
      assertFalse(jSONScanner1.isEOF());
      assertEquals(44, jSONScanner1.getFeatures());
      assertEquals(0, jSONScanner1.pos());
      assertNull(jSONScanner1.stringDefaultValue());
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      assertNotNull(jSONScanner1);
      
      char[] charArray0 = new char[0];
      jSONReaderScanner0.putChar('p');
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(' ', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(18, jSONReaderScanner0.token());
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "!tAs{*C5<<urJdE2CA8");
      assertFalse(boolean0);
      
      boolean boolean1 = jSONReaderScanner0.scanBoolean('Q');
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(' ', jSONReaderScanner0.getCurrent());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(18, jSONReaderScanner0.token());
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)125;
      byteArray0[1] = (byte)89;
      boolean boolean2 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertArrayEquals(new byte[] {(byte)125, (byte)89}, byteArray0);
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("_%");
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.token());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals('_', jSONReaderScanner1.getCurrent());
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertNotNull(jSONReaderScanner1);
      
      jSONReaderScanner0.nextToken(1720);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(6, jSONReaderScanner0.pos());
      assertEquals(1, jSONReaderScanner0.token());
      assertEquals('a', jSONReaderScanner0.getCurrent());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner1));
      assertNotSame(jSONReaderScanner0, jSONReaderScanner1);
      
      BigInteger bigInteger0 = jSONReaderScanner1.scanFieldBigInteger(charArray0);
      assertEquals((-1), jSONReaderScanner1.matchStat);
      assertEquals((-1), jSONReaderScanner1.matchStat());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertEquals(0, jSONReaderScanner1.pos());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.token());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals('_', jSONReaderScanner1.getCurrent());
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertArrayEquals(new char[] {}, charArray0);
      assertNull(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = '-';
      charArray0[1] = '0';
      charArray0[2] = '0';
      charArray0[4] = '0';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 1139, 1139);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals('-', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(1139, jSONReaderScanner0.getFeatures());
      assertArrayEquals(new char[] {'-', '0', '0', '\u0000', '0'}, charArray0);
      assertNotNull(jSONReaderScanner0);
      
      Locale locale0 = Locale.TAIWAN;
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("TWN", locale0.getISO3Country());
      assertNotNull(locale0);
      
      Date date0 = jSONReaderScanner0.scanDate('0');
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals('-', jSONReaderScanner0.getCurrent());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(1139, jSONReaderScanner0.getFeatures());
      assertArrayEquals(new char[] {'-', '0', '0', '\u0000', '0'}, charArray0);
      assertNull(date0);
      
      SymbolTable symbolTable0 = new SymbolTable('0');
      assertNotNull(symbolTable0);
      
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanSymbol(symbolTable0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("error parse new");
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals('e', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertNotNull(jSONReaderScanner0);
      
      JSONScanner jSONScanner0 = new JSONScanner("error parse new", 0);
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.matchStat());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.pos());
      assertEquals('e', jSONScanner0.getCurrent());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.getFeatures());
      assertNotNull(jSONScanner0);
      
      jSONReaderScanner0.scanIdent();
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(18, jSONReaderScanner0.token());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(' ', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      
      int int0 = jSONReaderScanner0.scanInt('X');
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(18, jSONReaderScanner0.token());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(' ', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, int0);
      
      char[] charArray0 = new char[3];
      charArray0[2] = 'm';
      String string0 = jSONReaderScanner0.scanFieldString(charArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(18, jSONReaderScanner0.token());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(' ', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertArrayEquals(new char[] {'\u0000', '\u0000', 'm'}, charArray0);
      assertNull(string0);
      
      jSONReaderScanner0.putChar('\u0000');
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(18, jSONReaderScanner0.token());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(' ', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      
      float float0 = jSONReaderScanner0.scanFieldFloat(charArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(18, jSONReaderScanner0.token());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(' ', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0.0F, float0, 0.01F);
      assertArrayEquals(new char[] {'\u0000', '\u0000', 'm'}, charArray0);
      
      Date date0 = jSONReaderScanner0.scanDate('m');
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(18, jSONReaderScanner0.token());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(' ', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertNull(date0);
      
      String string1 = jSONReaderScanner0.stringVal();
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(18, jSONReaderScanner0.token());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(' ', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals("error ", string1);
      assertNotNull(string1);
      
      try { 
        jSONReaderScanner0.longValue();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // error 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("7[1_Ak");
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals('7', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertNotNull(jSONReaderScanner0);
      
      Locale locale0 = new Locale("7[1_Ak", "7[1_Ak");
      assertEquals("7[1_ak", locale0.getLanguage());
      assertEquals("7[1_ak_7[1_AK", locale0.toString());
      assertEquals("7[1_AK", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      long long0 = jSONReaderScanner0.scanLong('P');
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals('7', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(7L, long0);
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("null");
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(0, jSONReaderScanner1.pos());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals('n', jSONReaderScanner1.getCurrent());
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertNotNull(jSONReaderScanner1);
      
      float float0 = jSONReaderScanner1.scanFloat('p');
      assertEquals((-1), jSONReaderScanner1.matchStat);
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals((-1), jSONReaderScanner1.matchStat());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals('n', jSONReaderScanner1.getCurrent());
      assertEquals(0.0F, float0, 0.01F);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      
      jSONReaderScanner0.putChar('d');
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals('7', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner1));
      assertNotSame(jSONReaderScanner0, jSONReaderScanner1);
      
      boolean boolean0 = jSONReaderScanner1.scanBoolean('Q');
      assertEquals((-1), jSONReaderScanner1.matchStat);
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals((-1), jSONReaderScanner1.matchStat());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals('n', jSONReaderScanner1.getCurrent());
      assertFalse(boolean0);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      
      JSONReaderScanner jSONReaderScanner2 = new JSONReaderScanner("Yoy[Uv&jFoV\"TM", 'd');
      assertEquals(0, jSONReaderScanner2.matchStat);
      assertNull(jSONReaderScanner2.stringDefaultValue());
      assertEquals(0, jSONReaderScanner2.pos());
      assertEquals(0, jSONReaderScanner2.token());
      assertEquals(0, jSONReaderScanner2.matchStat());
      assertEquals('Y', jSONReaderScanner2.getCurrent());
      assertFalse(jSONReaderScanner2.isEOF());
      assertEquals(100, jSONReaderScanner2.getFeatures());
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner1));
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner0));
      assertNotNull(jSONReaderScanner2);
      
      Locale locale1 = Locale.KOREAN;
      assertEquals("kor", locale1.getISO3Language());
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.getISO3Country());
      assertEquals("ko", locale1.toString());
      assertEquals("ko", locale1.getLanguage());
      assertEquals("", locale1.getCountry());
      assertFalse(locale1.equals((Object)locale0));
      assertNotSame(locale1, locale0);
      assertNotNull(locale1);
      
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      Locale.setDefault(locale_Category0, locale0);
      assertEquals("7[1_ak", locale0.getLanguage());
      assertEquals("7[1_ak_7[1_AK", locale0.toString());
      assertEquals("7[1_AK", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertFalse(locale0.equals((Object)locale1));
      assertNotSame(locale0, locale1);
      
      char[] charArray0 = new char[9];
      charArray0[0] = 'p';
      charArray0[1] = '(';
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      charArray0[2] = 'Q';
      charArray0[3] = 'P';
      charArray0[4] = 'd';
      boolean boolean2 = jSONReaderScanner2.matchField(charArray0);
      assertEquals(0, jSONReaderScanner2.matchStat);
      assertNull(jSONReaderScanner2.stringDefaultValue());
      assertEquals(0, jSONReaderScanner2.pos());
      assertEquals(0, jSONReaderScanner2.token());
      assertEquals(0, jSONReaderScanner2.matchStat());
      assertEquals('Y', jSONReaderScanner2.getCurrent());
      assertFalse(jSONReaderScanner2.isEOF());
      assertEquals(100, jSONReaderScanner2.getFeatures());
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner1));
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner0));
      assertNotSame(jSONReaderScanner2, jSONReaderScanner1);
      assertNotSame(jSONReaderScanner2, jSONReaderScanner0);
      assertArrayEquals(new char[] {'p', '(', 'Q', 'P', 'd', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      charArray0[5] = 'Q';
      int int0 = jSONReaderScanner1.scanInt('D');
      assertEquals((-1), jSONReaderScanner1.matchStat);
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals((-1), jSONReaderScanner1.matchStat());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals('n', jSONReaderScanner1.getCurrent());
      assertEquals(0, int0);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner2));
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertNotSame(jSONReaderScanner1, jSONReaderScanner2);
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      
      charArray0[6] = 'p';
      charArray0[7] = 'P';
      jSONReaderScanner2.hasSpecial = false;
      assertNull(jSONReaderScanner2.stringDefaultValue());
      assertEquals(0, jSONReaderScanner2.pos());
      assertEquals(0, jSONReaderScanner2.token());
      assertEquals(0, jSONReaderScanner2.matchStat());
      assertEquals('Y', jSONReaderScanner2.getCurrent());
      assertFalse(jSONReaderScanner2.isEOF());
      assertEquals(100, jSONReaderScanner2.getFeatures());
      
      charArray0[8] = 'Q';
      boolean boolean3 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean3);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      
      boolean boolean4 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertFalse(boolean4);
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4 == boolean1);
      assertTrue(boolean4 == boolean2);
      assertTrue(boolean4 == boolean3);
      
      Class<MockMinguoDate> class0 = MockMinguoDate.class;
      Collection<String> collection0 = jSONReaderScanner1.scanFieldStringArray(charArray0, class0);
      assertEquals((-2), jSONReaderScanner1.matchStat);
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(0, jSONReaderScanner1.pos());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertEquals((-2), jSONReaderScanner1.matchStat());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals('n', jSONReaderScanner1.getCurrent());
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner2));
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertNotSame(jSONReaderScanner1, jSONReaderScanner2);
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertArrayEquals(new char[] {'p', '(', 'Q', 'P', 'd', 'Q', 'p', 'P', 'Q'}, charArray0);
      assertNull(collection0);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      char[] charArray0 = new char[7];
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("\":\"", 3);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(3, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('\"', jSONReaderScanner0.getCurrent());
      assertNotNull(jSONReaderScanner0);
      
      TimeZone timeZone0 = jSONReaderScanner0.getTimeZone();
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(3, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('\"', jSONReaderScanner0.getCurrent());
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "RJnBSXE5:/N6p");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      SymbolTable symbolTable0 = new SymbolTable(12);
      assertNotNull(symbolTable0);
      
      String string0 = jSONReaderScanner0.scanSymbol(symbolTable0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.pos());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals('\u001A', jSONReaderScanner0.getCurrent());
      assertEquals(3, jSONReaderScanner0.getFeatures());
      assertEquals(4, jSONReaderScanner0.token());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(":", string0);
      assertNotNull(string0);
      
      boolean boolean2 = jSONReaderScanner0.scanFieldBoolean(charArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.pos());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertEquals('\u001A', jSONReaderScanner0.getCurrent());
      assertEquals(3, jSONReaderScanner0.getFeatures());
      assertEquals(4, jSONReaderScanner0.token());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      float float0 = jSONReaderScanner0.scanFieldFloat(charArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.pos());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertEquals('\u001A', jSONReaderScanner0.getCurrent());
      assertEquals(3, jSONReaderScanner0.getFeatures());
      assertEquals(4, jSONReaderScanner0.token());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0.0F, float0, 0.01F);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      BigInteger bigInteger0 = jSONReaderScanner0.scanFieldBigInteger(charArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.pos());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertEquals('\u001A', jSONReaderScanner0.getCurrent());
      assertEquals(3, jSONReaderScanner0.getFeatures());
      assertEquals(4, jSONReaderScanner0.token());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNull(bigInteger0);
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(charArray0, 3629);
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals('\u0000', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.pos());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(jSONReaderScanner1);
      
      String string1 = jSONReaderScanner0.info();
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.pos());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertEquals('\u001A', jSONReaderScanner0.getCurrent());
      assertEquals(3, jSONReaderScanner0.getFeatures());
      assertEquals(4, jSONReaderScanner0.token());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals("", string1);
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(jSONReaderScanner0, jSONReaderScanner1);
      assertNotNull(string1);
      
      Date date0 = jSONReaderScanner1.scanFieldDate(charArray0);
      assertEquals((-1), jSONReaderScanner1.matchStat);
      assertEquals((-1), jSONReaderScanner1.matchStat());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertEquals(0, jSONReaderScanner1.token());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals('\u0000', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.pos());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNull(date0);
      
      // Undeclared exception!
      try { 
        jSONReaderScanner0.doubleValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.alibaba.fastjson.parser.JSONReaderScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("new");
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals('n', jSONReaderScanner0.getCurrent());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertNotNull(jSONReaderScanner0);
      
      BigInteger bigInteger0 = jSONReaderScanner0.scanFieldBigInteger(charArray0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertFalse(jSONReaderScanner0.isEOF());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals('n', jSONReaderScanner0.getCurrent());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertArrayEquals(new char[] {}, charArray0);
      assertNull(bigInteger0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      int int0 = 84;
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("new");
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.pos());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals('n', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.token());
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertNotNull(jSONReaderScanner1);
      
      // Undeclared exception!
      try { 
        jSONReaderScanner1.scanString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed string : \u001A
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("50hwh<");
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals('5', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertNotNull(jSONReaderScanner0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)125;
      byteArray0[1] = (byte) (-105);
      byteArray0[2] = (byte)31;
      jSONReaderScanner0.nextToken();
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(2, jSONReaderScanner0.token());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals('h', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.matchStat());
      
      JSONScanner jSONScanner0 = new JSONScanner("TreeSet", (byte) (-105));
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(0, jSONScanner0.pos());
      assertEquals('T', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals("", jSONScanner0.stringDefaultValue());
      assertFalse(jSONScanner0.isEOF());
      assertEquals((-105), jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.token());
      assertNotNull(jSONScanner0);
      
      String string0 = jSONScanner0.tokenName();
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(0, jSONScanner0.pos());
      assertEquals('T', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals("", jSONScanner0.stringDefaultValue());
      assertFalse(jSONScanner0.isEOF());
      assertEquals((-105), jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.token());
      assertEquals("Unknown", string0);
      assertNotNull(string0);
      
      boolean boolean2 = jSONReaderScanner0.isEnabled(4096, 4096);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(2, jSONReaderScanner0.token());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals('h', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      int int0 = Calendar.DATE;
      assertEquals(5, int0);
      
      char[] charArray0 = new char[0];
      int int1 = jSONReaderScanner0.scanFieldInt(charArray0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(2, jSONReaderScanner0.token());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals('h', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      assertArrayEquals(new char[] {}, charArray0);
      
      TimeZone timeZone0 = jSONReaderScanner0.getTimeZone();
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(2, jSONReaderScanner0.token());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals('h', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      Class<MockThaiBuddhistDate> class0 = MockThaiBuddhistDate.class;
      // Undeclared exception!
      try { 
        jSONScanner0.scanFieldStringArray(charArray0, class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.time.chrono.MockThaiBuddhistDate cannot be cast to java.util.Collection
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = '-';
      charArray0[1] = '0';
      charArray0[2] = 'c';
      charArray0[3] = '{';
      charArray0[4] = '~';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 1139, 1139);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.token());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(1139, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals('-', jSONReaderScanner0.getCurrent());
      assertArrayEquals(new char[] {'-', '0', 'c', '{', '~'}, charArray0);
      assertNotNull(jSONReaderScanner0);
      
      String string0 = jSONReaderScanner0.stringVal();
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.token());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(1139, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals('-', jSONReaderScanner0.getCurrent());
      assertEquals("", string0);
      assertArrayEquals(new char[] {'-', '0', 'c', '{', '~'}, charArray0);
      assertNotNull(string0);
      
      BigDecimal bigDecimal0 = jSONReaderScanner0.scanFieldDecimal(charArray0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.token());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(1139, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals('-', jSONReaderScanner0.getCurrent());
      assertArrayEquals(new char[] {'-', '0', 'c', '{', '~'}, charArray0);
      assertNull(bigDecimal0);
      
      // Undeclared exception!
      try { 
        jSONReaderScanner0.longValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.alibaba.fastjson.parser.JSONReaderScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      char[] charArray0 = new char[0];
      StringReader stringReader0 = new StringReader("e_Ak");
      assertNotNull(stringReader0);
      
      stringReader0.reset();
      boolean boolean1 = stringReader0.markSupported();
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      Locale locale0 = Locale.forLanguageTag("e_Ak");
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertNotNull(locale0);
      
      Locale locale1 = Locale.CHINESE;
      assertEquals("zho", locale1.getISO3Language());
      assertEquals("zh", locale1.toString());
      assertEquals("", locale1.getCountry());
      assertEquals("zh", locale1.getLanguage());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertFalse(locale1.equals((Object)locale0));
      assertNotSame(locale1, locale0);
      assertNotNull(locale1);
      
      String string0 = locale0.getDisplayLanguage(locale1);
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("zho", locale1.getISO3Language());
      assertEquals("zh", locale1.toString());
      assertEquals("", locale1.getCountry());
      assertEquals("zh", locale1.getLanguage());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertEquals("", string0);
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(locale1.equals((Object)locale0));
      assertNotSame(locale0, locale1);
      assertNotSame(locale1, locale0);
      assertNotNull(string0);
      
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      Locale.setDefault(locale_Category0, locale0);
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertFalse(locale0.equals((Object)locale1));
      assertNotSame(locale0, locale1);
      
      JSONScanner jSONScanner0 = new JSONScanner("DpW\".l?$");
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.token());
      assertEquals('D', jSONScanner0.getCurrent());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.pos());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.matchStat());
      assertNotNull(jSONScanner0);
      
      long long0 = jSONScanner0.scanFieldSymbol(charArray0);
      assertEquals((-1), jSONScanner0.matchStat);
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals((-1), jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.token());
      assertEquals('D', jSONScanner0.getCurrent());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.pos());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0L, long0);
      assertArrayEquals(new char[] {}, charArray0);
      
      String string1 = jSONScanner0.stringDefaultValue();
      assertEquals((-1), jSONScanner0.matchStat);
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals((-1), jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.token());
      assertEquals('D', jSONScanner0.getCurrent());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.pos());
      assertNull(jSONScanner0.stringDefaultValue());
      assertNull(string1);
      
      BigDecimal bigDecimal0 = jSONScanner0.scanFieldDecimal(charArray0);
      assertEquals((-1), jSONScanner0.matchStat);
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals((-1), jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.token());
      assertEquals('D', jSONScanner0.getCurrent());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.pos());
      assertNull(jSONScanner0.stringDefaultValue());
      assertArrayEquals(new char[] {}, charArray0);
      assertNull(bigDecimal0);
      
      long long1 = jSONScanner0.scanLong('t');
      assertEquals((-1), jSONScanner0.matchStat);
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals((-1), jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.token());
      assertEquals('D', jSONScanner0.getCurrent());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.pos());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0L, long1);
      assertTrue(long1 == long0);
      
      // Undeclared exception!
      try { 
        jSONScanner0.decimalValue();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      char[] charArray0 = new char[0];
      StringReader stringReader0 = new StringReader("44nk");
      assertNotNull(stringReader0);
      
      stringReader0.reset();
      boolean boolean1 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "44nk");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("nw");
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals('n', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertNotNull(jSONReaderScanner0);
      
      BigInteger bigInteger0 = jSONReaderScanner0.scanFieldBigInteger(charArray0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals('n', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertArrayEquals(new char[] {}, charArray0);
      assertNull(bigInteger0);
      
      boolean boolean3 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean3);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      
      String string0 = jSONReaderScanner0.stringVal();
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals('n', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals("", string0);
      assertNotNull(string0);
      
      jSONReaderScanner0.stringDefaultValue = "";
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals('n', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals("", jSONReaderScanner0.stringDefaultValue());
      
      boolean boolean4 = jSONReaderScanner0.isRef();
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals('n', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals("", jSONReaderScanner0.stringDefaultValue());
      assertFalse(boolean4);
      assertTrue(boolean4 == boolean1);
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4 == boolean3);
      assertFalse(boolean4 == boolean2);
      
      boolean boolean5 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean5);
      assertFalse(boolean5 == boolean2);
      assertTrue(boolean5 == boolean3);
      assertTrue(boolean5 == boolean1);
      assertTrue(boolean5 == boolean0);
      assertTrue(boolean5 == boolean4);
      
      float float0 = jSONReaderScanner0.scanFieldFloat(charArray0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals('n', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals("", jSONReaderScanner0.stringDefaultValue());
      assertEquals(0.0F, float0, 0.01F);
      assertArrayEquals(new char[] {}, charArray0);
      
      float[][] floatArray0 = jSONReaderScanner0.scanFieldFloatArray2(charArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals('n', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals("", jSONReaderScanner0.stringDefaultValue());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertArrayEquals(new char[] {}, charArray0);
      assertNull(floatArray0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextToken();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse new
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("error parse new");
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals('e', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertNotNull(jSONReaderScanner0);
      
      jSONReaderScanner0.scanIdent();
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(18, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(' ', jSONReaderScanner0.getCurrent());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      
      JSONScanner jSONScanner0 = new JSONScanner("_%");
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.matchStat());
      assertFalse(jSONScanner0.isEOF());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals('_', jSONScanner0.getCurrent());
      assertNotNull(jSONScanner0);
      
      jSONReaderScanner0.scanIdent();
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(18, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(' ', jSONReaderScanner0.getCurrent());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      
      JSONScanner jSONScanner1 = new JSONScanner(" - ", 44);
      assertEquals(0, jSONScanner1.matchStat);
      assertFalse(jSONScanner1.isEOF());
      assertEquals(' ', jSONScanner1.getCurrent());
      assertEquals(0, jSONScanner1.matchStat());
      assertEquals(44, jSONScanner1.getFeatures());
      assertEquals(0, jSONScanner1.token());
      assertNull(jSONScanner1.stringDefaultValue());
      assertEquals(0, jSONScanner1.pos());
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      assertNotNull(jSONScanner1);
      
      char char0 = '^';
      char[] charArray0 = new char[9];
      charArray0[0] = 'm';
      charArray0[1] = 'm';
      charArray0[2] = '^';
      charArray0[3] = 'm';
      TimeZone timeZone0 = jSONReaderScanner0.getTimeZone();
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(18, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(' ', jSONReaderScanner0.getCurrent());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      try { 
        jSONReaderScanner0.integerValue();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"r \"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("_k|qYj9=.G3!EM&D", '\u0084');
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals('_', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(132, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertNotNull(jSONReaderScanner0);
      
      SymbolTable symbolTable0 = new SymbolTable(103);
      assertNotNull(symbolTable0);
      
      char[] charArray0 = jSONReaderScanner0.sub_chars(91, 0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals('_', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(132, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertArrayEquals(new char[] {}, charArray0);
      assertNotNull(charArray0);
      
      boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string0 = jSONReaderScanner0.scanSymbolUnQuoted(symbolTable0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals('|', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(132, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(18, jSONReaderScanner0.token());
      assertEquals("_k", string0);
      assertNotNull(string0);
      
      boolean boolean2 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "_k");
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      boolean boolean3 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      assertFalse(boolean3);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      
      jSONReaderScanner0.nextToken();
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(132, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(1, jSONReaderScanner0.token());
      assertEquals(2, jSONReaderScanner0.pos());
      assertEquals('q', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      
      JSONScanner jSONScanner0 = new JSONScanner("_k", 103);
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.token());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals('_', jSONScanner0.getCurrent());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(103, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat());
      assertNotNull(jSONScanner0);
      
      boolean boolean4 = jSONReaderScanner0.isEnabled((-21), 32);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(132, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(1, jSONReaderScanner0.token());
      assertEquals(2, jSONReaderScanner0.pos());
      assertEquals('q', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertTrue(boolean4);
      assertFalse(boolean4 == boolean1);
      assertTrue(boolean4 == boolean0);
      assertFalse(boolean4 == boolean2);
      assertFalse(boolean4 == boolean3);
      
      int int0 = jSONReaderScanner0.scanType("_k|qYj9=.G3!EM&D");
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(132, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(1, jSONReaderScanner0.token());
      assertEquals(2, jSONReaderScanner0.pos());
      assertEquals('q', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals((-2), int0);
      
      TimeZone timeZone0 = jSONReaderScanner0.getTimeZone();
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(132, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(1, jSONReaderScanner0.token());
      assertEquals(2, jSONReaderScanner0.pos());
      assertEquals('q', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      jSONScanner0.scanIdent();
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(18, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertTrue(jSONScanner0.isEOF());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertEquals(103, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat());
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = '\u0084';
      charArray0[1] = '\u0084';
      charArray0[2] = '\u0084';
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("_k|qYj9=.G3!EM&D", '\u0084');
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(132, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('_', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertNotNull(jSONReaderScanner0);
      
      SymbolTable symbolTable0 = new SymbolTable(98);
      assertNotNull(symbolTable0);
      
      boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string0 = jSONReaderScanner0.scanSymbolUnQuoted(symbolTable0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals('|', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(132, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(18, jSONReaderScanner0.token());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals("_k", string0);
      assertNotNull(string0);
      
      boolean boolean2 = jSONReaderScanner0.scanFieldBoolean(charArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertEquals('|', jSONReaderScanner0.getCurrent());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(132, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(18, jSONReaderScanner0.token());
      assertFalse(jSONReaderScanner0.isEOF());
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertArrayEquals(new char[] {'\u0084', '\u0084', '\u0084'}, charArray0);
      
      float float0 = jSONReaderScanner0.scanFieldFloat(charArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertEquals('|', jSONReaderScanner0.getCurrent());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(132, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(18, jSONReaderScanner0.token());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0.0F, float0, 0.01F);
      assertArrayEquals(new char[] {'\u0084', '\u0084', '\u0084'}, charArray0);
      
      boolean boolean3 = jSONReaderScanner0.scanBoolean('\u0084');
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals('|', jSONReaderScanner0.getCurrent());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(132, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(18, jSONReaderScanner0.token());
      assertFalse(jSONReaderScanner0.isEOF());
      assertFalse(boolean3);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      
      jSONReaderScanner0.nextToken();
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(2, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(132, jSONReaderScanner0.getFeatures());
      assertEquals('q', jSONReaderScanner0.getCurrent());
      assertEquals(1, jSONReaderScanner0.token());
      assertFalse(jSONReaderScanner0.isEOF());
      
      JSONScanner jSONScanner0 = new JSONScanner("V", 98);
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertEquals('V', jSONScanner0.getCurrent());
      assertNull(jSONScanner0.stringDefaultValue());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(98, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat());
      assertNotNull(jSONScanner0);
      
      boolean boolean4 = jSONReaderScanner0.isEnabled(8, 32);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(2, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(132, jSONReaderScanner0.getFeatures());
      assertEquals('q', jSONReaderScanner0.getCurrent());
      assertEquals(1, jSONReaderScanner0.token());
      assertFalse(jSONReaderScanner0.isEOF());
      assertFalse(boolean4);
      assertTrue(boolean4 == boolean1);
      assertTrue(boolean4 == boolean3);
      assertFalse(boolean4 == boolean0);
      assertTrue(boolean4 == boolean2);
      
      int int0 = jSONReaderScanner0.scanType("_k|qYj9=.G3!EM&D");
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(2, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(132, jSONReaderScanner0.getFeatures());
      assertEquals('q', jSONReaderScanner0.getCurrent());
      assertEquals(1, jSONReaderScanner0.token());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-2), int0);
      
      int int1 = jSONReaderScanner0.scanFieldInt(charArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertEquals(2, jSONReaderScanner0.pos());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(132, jSONReaderScanner0.getFeatures());
      assertEquals('q', jSONReaderScanner0.getCurrent());
      assertEquals(1, jSONReaderScanner0.token());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      assertArrayEquals(new char[] {'\u0084', '\u0084', '\u0084'}, charArray0);
      
      TimeZone timeZone0 = jSONReaderScanner0.getTimeZone();
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertEquals("GMT", timeZone0.getID());
      assertEquals(2, jSONReaderScanner0.pos());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(132, jSONReaderScanner0.getFeatures());
      assertEquals('q', jSONReaderScanner0.getCurrent());
      assertEquals(1, jSONReaderScanner0.token());
      assertFalse(jSONReaderScanner0.isEOF());
      assertNotNull(timeZone0);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      String string0 = " is not a primitive type";
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(" is not a primitive type");
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(' ', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertNotNull(jSONReaderScanner0);
      
      jSONReaderScanner0.nextIdent();
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(18, jSONReaderScanner0.token());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(' ', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      
      int int0 = 1222;
      char char0 = jSONReaderScanner0.charAt(1222);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(18, jSONReaderScanner0.token());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals(' ', jSONReaderScanner0.getCurrent());
      assertEquals('\u001A', char0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = ',';
      charArray0[1] = '\u001A';
      charArray0[2] = '\u001A';
      charArray0[3] = '\u001A';
      charArray0[4] = '\u001A';
      float float0 = jSONReaderScanner0.scanFieldFloat(charArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(18, jSONReaderScanner0.token());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals(' ', jSONReaderScanner0.getCurrent());
      assertEquals(0.0F, float0, 0.01F);
      assertArrayEquals(new char[] {',', '\u001A', '\u001A', '\u001A', '\u001A'}, charArray0);
      
      // Undeclared exception!
      try { 
        jSONReaderScanner0.doubleValue();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("71_Ak");
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals('7', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertNotNull(jSONReaderScanner0);
      
      StringReader stringReader0 = new StringReader("tt");
      assertNotNull(stringReader0);
      
      char[] charArray0 = new char[0];
      long long0 = jSONReaderScanner0.scanFieldLong(charArray0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals('7', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0L, long0);
      assertArrayEquals(new char[] {}, charArray0);
      
      Locale locale0 = Locale.KOREAN;
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertNotNull(locale0);
      
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      Locale.setDefault(locale_Category0, locale0);
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      
      Locale locale1 = Locale.ROOT;
      assertEquals("", locale1.toString());
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getLanguage());
      assertEquals("", locale1.getISO3Language());
      assertEquals("", locale1.getCountry());
      assertFalse(locale1.equals((Object)locale0));
      assertNotSame(locale1, locale0);
      assertNotNull(locale1);
      
      String string0 = locale1.getDisplayLanguage(locale0);
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale1.toString());
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getLanguage());
      assertEquals("", locale1.getISO3Language());
      assertEquals("", locale1.getCountry());
      assertEquals("", string0);
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(locale1.equals((Object)locale0));
      assertNotSame(locale0, locale1);
      assertNotSame(locale1, locale0);
      assertNotNull(string0);
      
      Locale.Category locale_Category1 = Locale.Category.DISPLAY;
      Locale.setDefault(locale_Category1, locale0);
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertFalse(locale0.equals((Object)locale1));
      assertNotSame(locale0, locale1);
      assertSame(locale_Category1, locale_Category0);
      
      char char0 = jSONReaderScanner0.next();
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals('1', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('1', char0);
      
      jSONReaderScanner0.nextToken();
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(1, jSONReaderScanner0.pos());
      assertEquals(2, jSONReaderScanner0.token());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('_', jSONReaderScanner0.getCurrent());
      
      Date date0 = jSONReaderScanner0.scanFieldDate(charArray0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(1, jSONReaderScanner0.pos());
      assertEquals(2, jSONReaderScanner0.token());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('_', jSONReaderScanner0.getCurrent());
      assertArrayEquals(new char[] {}, charArray0);
      assertNull(date0);
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("tt");
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals('t', jSONReaderScanner1.getCurrent());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertNotNull(jSONReaderScanner1);
      
      MockFileInputStream mockFileInputStream0 = null;
      try {
        mockFileInputStream0 = new MockFileInputStream((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Tnb");
      assertFalse(boolean0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = '-';
      charArray0[1] = '0';
      charArray0[2] = '-';
      charArray0[4] = 'l';
      int int0 = (-135);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 57);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('-', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertArrayEquals(new char[] {'-', '0', '-', '\u0000', 'l'}, charArray0);
      assertNotNull(jSONReaderScanner0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      String string0 = jSONReaderScanner0.stringVal();
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('-', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals("", string0);
      assertArrayEquals(new char[] {'-', '0', '-', '\u0000', 'l'}, charArray0);
      assertNotNull(string0);
      
      Locale locale0 = new Locale("float overflow : ", "*u6h}Xmhl#S&$|j#");
      assertEquals("float overflow : _*U6H}XMHL#S&$|J#", locale0.toString());
      assertEquals("*U6H}XMHL#S&$|J#", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("float overflow : ", locale0.getLanguage());
      assertNotNull(locale0);
      
      jSONReaderScanner0.locale = locale0;
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('-', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals("float overflow : _*U6H}XMHL#S&$|J#", locale0.toString());
      assertEquals("*U6H}XMHL#S&$|J#", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("float overflow : ", locale0.getLanguage());
      assertEquals("float overflow : ", jSONReaderScanner0.locale.getLanguage());
      assertEquals("float overflow : _*U6H}XMHL#S&$|J#", jSONReaderScanner0.locale.toString());
      assertEquals("", jSONReaderScanner0.locale.getVariant());
      assertEquals("*U6H}XMHL#S&$|J#", jSONReaderScanner0.locale.getCountry());
      
      float float0 = jSONReaderScanner0.scanFieldFloat(charArray0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('-', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0.0F, float0, 0.01F);
      assertArrayEquals(new char[] {'-', '0', '-', '\u0000', 'l'}, charArray0);
      
      boolean boolean1 = jSONReaderScanner0.isBlankInput();
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('-', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new char[] {'-', '0', '-', '\u0000', 'l'}, charArray0);
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("K)df?`T", (-135));
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals('K', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertEquals("", jSONReaderScanner1.stringDefaultValue());
      assertEquals((-135), jSONReaderScanner1.getFeatures());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals(0, jSONReaderScanner1.token());
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertNotNull(jSONReaderScanner1);
      
      String string1 = jSONReaderScanner0.tokenName();
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('-', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals("Unknown", string1);
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(jSONReaderScanner0, jSONReaderScanner1);
      assertArrayEquals(new char[] {'-', '0', '-', '\u0000', 'l'}, charArray0);
      assertNotNull(string1);
      
      long long0 = jSONReaderScanner0.scanLong('Z');
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('-', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0L, long0);
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner1));
      assertNotSame(jSONReaderScanner0, jSONReaderScanner1);
      assertArrayEquals(new char[] {'-', '0', '-', '\u0000', 'l'}, charArray0);
      
      SymbolTable symbolTable0 = null;
      try {
        symbolTable0 = new SymbolTable((-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.SymbolTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("", 4);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.token());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(4, jSONReaderScanner0.getFeatures());
      assertNotNull(jSONReaderScanner0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = '*';
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "not close json text, token : ");
      assertFalse(boolean0);
      
      charArray0[1] = 'D';
      charArray0[2] = 'M';
      charArray0[3] = 'W';
      charArray0[4] = 'r';
      Date date0 = jSONReaderScanner0.scanFieldDate(charArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.token());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(4, jSONReaderScanner0.getFeatures());
      assertArrayEquals(new char[] {'*', 'D', 'M', 'W', 'r'}, charArray0);
      assertNull(date0);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("rror =prse ew");
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('r', jSONReaderScanner0.getCurrent());
      assertNotNull(jSONReaderScanner0);
      
      JSONScanner jSONScanner0 = new JSONScanner("_%");
      assertEquals(0, jSONScanner0.matchStat);
      assertFalse(jSONScanner0.isEOF());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals('_', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.token());
      assertNotNull(jSONScanner0);
      
      jSONReaderScanner0.scanIdent();
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(' ', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(18, jSONReaderScanner0.token());
      
      char[] charArray0 = new char[0];
      String string0 = jSONReaderScanner0.scanFieldString(charArray0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals(' ', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(18, jSONReaderScanner0.token());
      assertArrayEquals(new char[] {}, charArray0);
      assertNull(string0);
      
      JSONScanner jSONScanner1 = new JSONScanner("iV", 44);
      assertEquals(0, jSONScanner1.matchStat);
      assertEquals(0, jSONScanner1.token());
      assertEquals(0, jSONScanner1.pos());
      assertNull(jSONScanner1.stringDefaultValue());
      assertEquals('i', jSONScanner1.getCurrent());
      assertEquals(0, jSONScanner1.matchStat());
      assertFalse(jSONScanner1.isEOF());
      assertEquals(44, jSONScanner1.getFeatures());
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      assertNotNull(jSONScanner1);
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("8D3AZL");
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals(0, jSONReaderScanner1.pos());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertEquals('8', jSONReaderScanner1.getCurrent());
      assertFalse(jSONReaderScanner1.isEOF());
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertNotNull(jSONReaderScanner1);
      
      long long0 = jSONReaderScanner1.scanFieldSymbol(charArray0);
      assertEquals((-1), jSONReaderScanner1.matchStat);
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals(0, jSONReaderScanner1.pos());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertEquals((-1), jSONReaderScanner1.matchStat());
      assertEquals('8', jSONReaderScanner1.getCurrent());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(0L, long0);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertArrayEquals(new char[] {}, charArray0);
      
      char char0 = '\u0087';
      String string1 = jSONReaderScanner0.scanString('\u0087');
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals(' ', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(18, jSONReaderScanner0.token());
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner1));
      assertNotSame(jSONReaderScanner0, jSONReaderScanner1);
      assertNull(string1);
      
      // Undeclared exception!
      try { 
        jSONReaderScanner1.nextTokenWithColon((-473));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - 8, info : 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = '\u0084';
      charArray0[1] = '\u0084';
      charArray0[2] = '\u0084';
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("_k|qYj9=.G3!EM&D");
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals('_', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertNotNull(jSONReaderScanner0);
      
      UUID uUID0 = jSONReaderScanner0.scanUUID('\u0084');
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals('_', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertNull(uUID0);
      
      SymbolTable symbolTable0 = new SymbolTable(98);
      assertNotNull(symbolTable0);
      
      boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string0 = jSONReaderScanner0.scanSymbolUnQuoted(symbolTable0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals('|', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(18, jSONReaderScanner0.token());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals("_k", string0);
      assertNotNull(string0);
      
      boolean boolean2 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      float float0 = jSONReaderScanner0.scanFieldFloat(charArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals('|', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(18, jSONReaderScanner0.token());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0.0F, float0, 0.01F);
      assertArrayEquals(new char[] {'\u0084', '\u0084', '\u0084'}, charArray0);
      
      boolean boolean3 = jSONReaderScanner0.scanBoolean('\u0084');
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals('|', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(18, jSONReaderScanner0.token());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertFalse(boolean3);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      
      jSONReaderScanner0.nextToken();
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(1, jSONReaderScanner0.token());
      assertEquals('q', jSONReaderScanner0.getCurrent());
      assertEquals(2, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      
      boolean boolean4 = jSONReaderScanner0.isEnabled(8, 32);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(1, jSONReaderScanner0.token());
      assertEquals('q', jSONReaderScanner0.getCurrent());
      assertEquals(2, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertFalse(boolean4);
      assertTrue(boolean4 == boolean3);
      assertFalse(boolean4 == boolean0);
      assertTrue(boolean4 == boolean1);
      assertTrue(boolean4 == boolean2);
      
      jSONReaderScanner0.nextToken(11);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals(3, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals('Y', jSONReaderScanner0.getCurrent());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(1, jSONReaderScanner0.token());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      
      int int0 = Calendar.DATE;
      assertEquals(5, int0);
      
      int int1 = jSONReaderScanner0.scanFieldInt(charArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertEquals(3, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertEquals('Y', jSONReaderScanner0.getCurrent());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(1, jSONReaderScanner0.token());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      assertArrayEquals(new char[] {'\u0084', '\u0084', '\u0084'}, charArray0);
      
      TimeZone timeZone0 = jSONReaderScanner0.getTimeZone();
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertEquals("GMT", timeZone0.getID());
      assertEquals(3, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertEquals('Y', jSONReaderScanner0.getCurrent());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(1, jSONReaderScanner0.token());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertNotNull(timeZone0);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = '-';
      charArray0[1] = '0';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("@ 'Q,9!xFG@]@");
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals('@', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertNotNull(jSONReaderScanner0);
      
      float float0 = jSONReaderScanner0.scanFloat('0');
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals('@', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0.0F, float0, 0.01F);
      
      jSONReaderScanner0.putChar(';');
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals('@', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      
      Locale locale0 = Locale.KOREAN;
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("ko", locale0.toString());
      assertNotNull(locale0);
      
      Locale locale1 = Locale.SIMPLIFIED_CHINESE;
      assertEquals("CHN", locale1.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertEquals("zh_CN", locale1.toString());
      assertEquals("CN", locale1.getCountry());
      assertEquals("zh", locale1.getLanguage());
      assertEquals("zho", locale1.getISO3Language());
      assertFalse(locale1.equals((Object)locale0));
      assertNotSame(locale1, locale0);
      assertNotNull(locale1);
      
      String string0 = jSONReaderScanner0.scanString('-');
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals('@', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertNull(string0);
      
      String string1 = locale0.getDisplayLanguage(locale1);
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("ko", locale0.toString());
      assertEquals("CHN", locale1.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertEquals("zh_CN", locale1.toString());
      assertEquals("CN", locale1.getCountry());
      assertEquals("zh", locale1.getLanguage());
      assertEquals("zho", locale1.getISO3Language());
      assertEquals("\u671D\u9C9C\u6587", string1);
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(locale1.equals((Object)locale0));
      assertNotSame(locale0, locale1);
      assertNotSame(locale1, locale0);
      assertNotNull(string1);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      jSONReaderScanner0.nextToken();
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(1, jSONReaderScanner0.token());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(' ', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      
      Date date0 = jSONReaderScanner0.scanDate('4');
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(1, jSONReaderScanner0.token());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(' ', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertNull(date0);
      
      boolean boolean1 = jSONReaderScanner0.matchField(charArray0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals('\'', jSONReaderScanner0.getCurrent());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(1, jSONReaderScanner0.token());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new char[] {'-', '0', '\u0000', '\u0000'}, charArray0);
      
      JSONReaderScanner jSONReaderScanner1 = null;
      try {
        jSONReaderScanner1 = new JSONReaderScanner((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("1_Ak");
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('1', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertNotNull(jSONReaderScanner0);
      
      char[] charArray0 = new char[0];
      JSONScanner jSONScanner0 = new JSONScanner("unclosed single-quote string");
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(0, jSONScanner0.pos());
      assertEquals('u', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.token());
      assertEquals(989, jSONScanner0.getFeatures());
      assertFalse(jSONScanner0.isEOF());
      assertNotNull(jSONScanner0);
      
      SymbolTable symbolTable0 = new SymbolTable(120);
      assertNotNull(symbolTable0);
      
      String string0 = jSONReaderScanner0.addSymbol(0, 85, 85, symbolTable0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('1', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals("1_Ak\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string0);
      assertNotNull(string0);
      
      jSONReaderScanner0.putChar('G');
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('1', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      
      double double0 = jSONReaderScanner0.scanDouble('_');
      assertEquals(3, jSONReaderScanner0.matchStat);
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('A', jSONReaderScanner0.getCurrent());
      assertEquals(3, jSONReaderScanner0.matchStat());
      assertEquals(16, jSONReaderScanner0.token());
      assertEquals(1.0, double0, 0.01);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      SymbolTable symbolTable1 = new SymbolTable(66);
      assertFalse(symbolTable1.equals((Object)symbolTable0));
      assertNotNull(symbolTable1);
      
      float float0 = jSONReaderScanner0.scanFieldFloat(charArray0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('A', jSONReaderScanner0.getCurrent());
      assertEquals(16, jSONReaderScanner0.token());
      assertEquals(0.0F, float0, 0.01F);
      assertArrayEquals(new char[] {}, charArray0);
      
      boolean boolean1 = jSONReaderScanner0.isEOF();
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('A', jSONReaderScanner0.getCurrent());
      assertEquals(16, jSONReaderScanner0.token());
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextTokenWithColon();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - A, info : 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("xe*CZ7}n7:@2IW", 516);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(516, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('x', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertNotNull(jSONReaderScanner0);
      
      jSONReaderScanner0.close();
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(516, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('x', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      
      JSONScanner jSONScanner0 = new JSONScanner("new");
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals('n', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertFalse(jSONScanner0.isEOF());
      assertNull(jSONScanner0.stringDefaultValue());
      assertNotNull(jSONScanner0);
      
      double double0 = jSONScanner0.scanDouble('S');
      assertEquals((-1), jSONScanner0.matchStat);
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals((-1), jSONScanner0.matchStat());
      assertEquals('n', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertFalse(jSONScanner0.isEOF());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0.0, double0, 0.01);
      
      Calendar calendar0 = jSONReaderScanner0.getCalendar();
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(516, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('x', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertNull(calendar0);
      
      double double1 = jSONScanner0.scanDouble('S');
      assertEquals((-1), jSONScanner0.matchStat);
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals((-1), jSONScanner0.matchStat());
      assertEquals('n', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertFalse(jSONScanner0.isEOF());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0.0, double1, 0.01);
      assertEquals(double1, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("50hwh<");
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.token());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('5', jSONReaderScanner0.getCurrent());
      assertNotNull(jSONReaderScanner0);
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("trim");
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertEquals('t', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.token());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertEquals(0, jSONReaderScanner1.pos());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertNotNull(jSONReaderScanner1);
      
      Locale locale0 = Locale.JAPAN;
      assertEquals("", locale0.getVariant());
      assertEquals("JP", locale0.getCountry());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("jpn", locale0.getISO3Language());
      assertNotNull(locale0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'K';
      String string0 = jSONReaderScanner1.scanFieldString(charArray0);
      assertEquals((-2), jSONReaderScanner1.matchStat);
      assertEquals('t', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.token());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals((-2), jSONReaderScanner1.matchStat());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertEquals(0, jSONReaderScanner1.pos());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertArrayEquals(new char[] {'K'}, charArray0);
      assertNull(string0);
      
      JSONReaderScanner jSONReaderScanner2 = new JSONReaderScanner(charArray0, 992);
      assertEquals(0, jSONReaderScanner2.matchStat);
      assertNull(jSONReaderScanner2.stringDefaultValue());
      assertEquals('K', jSONReaderScanner2.getCurrent());
      assertEquals(0, jSONReaderScanner2.token());
      assertEquals(0, jSONReaderScanner2.pos());
      assertFalse(jSONReaderScanner2.isEOF());
      assertEquals(989, jSONReaderScanner2.getFeatures());
      assertEquals(0, jSONReaderScanner2.matchStat());
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner1));
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner0));
      assertArrayEquals(new char[] {'K'}, charArray0);
      assertNotNull(jSONReaderScanner2);
      
      jSONReaderScanner0.scanNumber();
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(2, jSONReaderScanner0.token());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('h', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner1));
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner2));
      assertNotSame(jSONReaderScanner0, jSONReaderScanner1);
      assertNotSame(jSONReaderScanner0, jSONReaderScanner2);
      
      JSONReaderScanner jSONReaderScanner3 = new JSONReaderScanner("trim", 123);
      assertEquals(0, jSONReaderScanner3.matchStat);
      assertFalse(jSONReaderScanner3.isEOF());
      assertEquals(123, jSONReaderScanner3.getFeatures());
      assertEquals(0, jSONReaderScanner3.pos());
      assertEquals(0, jSONReaderScanner3.token());
      assertEquals('t', jSONReaderScanner3.getCurrent());
      assertNull(jSONReaderScanner3.stringDefaultValue());
      assertEquals(0, jSONReaderScanner3.matchStat());
      assertFalse(jSONReaderScanner3.equals((Object)jSONReaderScanner0));
      assertFalse(jSONReaderScanner3.equals((Object)jSONReaderScanner1));
      assertFalse(jSONReaderScanner3.equals((Object)jSONReaderScanner2));
      assertNotNull(jSONReaderScanner3);
      
      long long0 = jSONReaderScanner0.scanLong('K');
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(2, jSONReaderScanner0.token());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('h', jSONReaderScanner0.getCurrent());
      assertEquals(0L, long0);
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner1));
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner2));
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner3));
      assertNotSame(jSONReaderScanner0, jSONReaderScanner1);
      assertNotSame(jSONReaderScanner0, jSONReaderScanner2);
      assertNotSame(jSONReaderScanner0, jSONReaderScanner3);
      
      // Undeclared exception!
      try { 
        jSONReaderScanner3.nextToken();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse true
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("new");
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('n', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNotNull(jSONReaderScanner0);
      
      StringReader stringReader0 = new StringReader("S&OJ^g");
      assertNotNull(stringReader0);
      
      stringReader0.reset();
      boolean boolean0 = stringReader0.markSupported();
      assertTrue(boolean0);
      
      float float0 = jSONReaderScanner0.scanFloat('G');
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('n', jSONReaderScanner0.getCurrent());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0.0F, float0, 0.01F);
      
      boolean boolean1 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "TreeSet");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      StringReader stringReader1 = new StringReader("4 ");
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotNull(stringReader1);
      
      boolean boolean2 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "new");
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      stringReader1.reset();
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotSame(stringReader1, stringReader0);
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(stringReader0, (-1));
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertEquals((-1), jSONReaderScanner1.getFeatures());
      assertEquals("", jSONReaderScanner1.stringDefaultValue());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals('S', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.pos());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertNotNull(jSONReaderScanner1);
      
      Locale locale1 = Locale.JAPAN;
      assertEquals("JP", locale1.getCountry());
      assertEquals("jpn", locale1.getISO3Language());
      assertEquals("JPN", locale1.getISO3Country());
      assertEquals("ja", locale1.getLanguage());
      assertEquals("", locale1.getVariant());
      assertEquals("ja_JP", locale1.toString());
      assertFalse(locale1.equals((Object)locale0));
      assertNotSame(locale1, locale0);
      assertNotNull(locale1);
      
      Locale locale2 = Locale.KOREAN;
      assertEquals("kor", locale2.getISO3Language());
      assertEquals("", locale2.getCountry());
      assertEquals("", locale2.getISO3Country());
      assertEquals("ko", locale2.getLanguage());
      assertEquals("", locale2.getVariant());
      assertEquals("ko", locale2.toString());
      assertFalse(locale2.equals((Object)locale1));
      assertFalse(locale2.equals((Object)locale0));
      assertNotSame(locale2, locale1);
      assertNotSame(locale2, locale0);
      assertNotNull(locale2);
      
      char[] charArray0 = null;
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFieldInt((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONReaderScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("50hwh<");
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals('5', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertNotNull(jSONReaderScanner0);
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("trim");
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals('t', jSONReaderScanner1.getCurrent());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(0, jSONReaderScanner1.token());
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertNotNull(jSONReaderScanner1);
      
      StringReader stringReader0 = new StringReader("trim");
      assertNotNull(stringReader0);
      
      boolean boolean0 = stringReader0.markSupported();
      assertTrue(boolean0);
      
      char[] charArray0 = new char[6];
      charArray0[1] = '9';
      charArray0[2] = '9';
      charArray0[3] = '!';
      charArray0[4] = '9';
      charArray0[5] = '9';
      JSONReaderScanner jSONReaderScanner2 = new JSONReaderScanner("50hwh<", 0);
      assertEquals(0, jSONReaderScanner2.matchStat);
      assertEquals(0, jSONReaderScanner2.getFeatures());
      assertFalse(jSONReaderScanner2.isEOF());
      assertEquals(0, jSONReaderScanner2.matchStat());
      assertEquals(0, jSONReaderScanner2.pos());
      assertEquals(0, jSONReaderScanner2.token());
      assertEquals('5', jSONReaderScanner2.getCurrent());
      assertNull(jSONReaderScanner2.stringDefaultValue());
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner1));
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner0));
      assertNotNull(jSONReaderScanner2);
      
      boolean boolean1 = jSONReaderScanner1.scanFieldBoolean(charArray0);
      assertEquals((-2), jSONReaderScanner1.matchStat);
      assertEquals((-2), jSONReaderScanner1.matchStat());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals('t', jSONReaderScanner1.getCurrent());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(0, jSONReaderScanner1.token());
      assertFalse(boolean1);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner2));
      assertFalse(boolean1 == boolean0);
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertNotSame(jSONReaderScanner1, jSONReaderScanner2);
      assertArrayEquals(new char[] {'\u0000', '9', '9', '!', '9', '9'}, charArray0);
      
      float float0 = jSONReaderScanner2.scanFieldFloat(charArray0);
      assertEquals((-2), jSONReaderScanner2.matchStat);
      assertEquals(0, jSONReaderScanner2.getFeatures());
      assertEquals((-2), jSONReaderScanner2.matchStat());
      assertFalse(jSONReaderScanner2.isEOF());
      assertEquals(0, jSONReaderScanner2.pos());
      assertEquals(0, jSONReaderScanner2.token());
      assertEquals('5', jSONReaderScanner2.getCurrent());
      assertNull(jSONReaderScanner2.stringDefaultValue());
      assertEquals(0.0F, float0, 0.01F);
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner1));
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner0));
      assertNotSame(jSONReaderScanner2, jSONReaderScanner1);
      assertNotSame(jSONReaderScanner2, jSONReaderScanner0);
      assertArrayEquals(new char[] {'\u0000', '9', '9', '!', '9', '9'}, charArray0);
      
      boolean boolean2 = jSONReaderScanner1.scanBoolean('!');
      assertEquals((-1), jSONReaderScanner1.matchStat);
      assertEquals((-1), jSONReaderScanner1.matchStat());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals('t', jSONReaderScanner1.getCurrent());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(0, jSONReaderScanner1.token());
      assertFalse(boolean2);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner2));
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertNotSame(jSONReaderScanner1, jSONReaderScanner2);
      
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanDecimal('9');
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("50hwh<");
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('5', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertNotNull(jSONReaderScanner0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      boolean boolean1 = jSONReaderScanner0.scanBoolean('~');
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('5', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("Feature.AllowSingleQuotes is false", 47);
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertEquals('F', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals(0, jSONReaderScanner1.pos());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(47, jSONReaderScanner1.getFeatures());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertFalse(jSONReaderScanner1.isEOF());
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertNotNull(jSONReaderScanner1);
      
      SymbolTable symbolTable0 = new SymbolTable(57);
      assertNotNull(symbolTable0);
      
      int int0 = Calendar.HOUR_OF_DAY;
      assertEquals(11, int0);
      
      char[] charArray0 = new char[14];
      charArray0[0] = '~';
      charArray0[0] = '=';
      BigInteger bigInteger0 = jSONReaderScanner1.scanFieldBigInteger(charArray0);
      assertEquals((-2), jSONReaderScanner1.matchStat);
      assertEquals('F', jSONReaderScanner1.getCurrent());
      assertEquals((-2), jSONReaderScanner1.matchStat());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals(0, jSONReaderScanner1.pos());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(47, jSONReaderScanner1.getFeatures());
      assertFalse(jSONReaderScanner1.isEOF());
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertNull(bigInteger0);
      
      char[] charArray1 = new char[3];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = '~';
      charArray1[1] = '~';
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      boolean boolean2 = jSONReaderScanner1.scanBoolean('\\');
      assertEquals((-1), jSONReaderScanner1.matchStat);
      assertEquals('F', jSONReaderScanner1.getCurrent());
      assertEquals((-1), jSONReaderScanner1.matchStat());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals(0, jSONReaderScanner1.pos());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(47, jSONReaderScanner1.getFeatures());
      assertFalse(jSONReaderScanner1.isEOF());
      assertFalse(boolean2);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      
      jSONReaderScanner1.nextToken();
      assertEquals((-1), jSONReaderScanner1.matchStat);
      assertEquals((-1), jSONReaderScanner1.matchStat());
      assertEquals(1, jSONReaderScanner1.token());
      assertEquals('e', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.pos());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(47, jSONReaderScanner1.getFeatures());
      assertFalse(jSONReaderScanner1.isEOF());
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      
      char[] charArray2 = new char[0];
      assertFalse(charArray2.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray1));
      
      boolean boolean3 = jSONReaderScanner1.matchField(charArray2);
      assertEquals((-1), jSONReaderScanner1.matchStat);
      assertEquals(1, jSONReaderScanner1.pos());
      assertEquals((-1), jSONReaderScanner1.matchStat());
      assertEquals(1, jSONReaderScanner1.token());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(47, jSONReaderScanner1.getFeatures());
      assertEquals('a', jSONReaderScanner1.getCurrent());
      assertFalse(jSONReaderScanner1.isEOF());
      assertTrue(boolean3);
      assertFalse(charArray2.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray1));
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertNotSame(charArray2, charArray0);
      assertNotSame(charArray2, charArray1);
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertArrayEquals(new char[] {}, charArray2);
      
      jSONReaderScanner0.nextToken();
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(2, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals('h', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner1));
      assertNotSame(jSONReaderScanner0, jSONReaderScanner1);
      
      String string0 = jSONReaderScanner1.subString(8064, 47);
      assertEquals((-1), jSONReaderScanner1.matchStat);
      assertEquals(1, jSONReaderScanner1.pos());
      assertEquals((-1), jSONReaderScanner1.matchStat());
      assertEquals(1, jSONReaderScanner1.token());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(47, jSONReaderScanner1.getFeatures());
      assertEquals('a', jSONReaderScanner1.getCurrent());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string0);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertNotNull(string0);
      
      String string1 = jSONReaderScanner1.scanSymbol(symbolTable0);
      assertEquals((-1), jSONReaderScanner1.matchStat);
      assertEquals(1, jSONReaderScanner1.pos());
      assertEquals(18, jSONReaderScanner1.token());
      assertEquals((-1), jSONReaderScanner1.matchStat());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(47, jSONReaderScanner1.getFeatures());
      assertEquals('.', jSONReaderScanner1.getCurrent());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals("ature", string1);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertNotNull(string1);
      
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed string : \u001A
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("1_Ak");
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('1', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNotNull(jSONReaderScanner0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("\":\"");
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertFalse(jSONReaderScanner1.isEOF());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals('\"', jSONReaderScanner1.getCurrent());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertNotNull(jSONReaderScanner1);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)72;
      byteArray0[1] = (byte)72;
      byteArray0[2] = (byte) (-81);
      byteArray0[3] = (byte)72;
      SymbolTable symbolTable0 = new SymbolTable((byte)72);
      assertNotNull(symbolTable0);
      
      JSONReaderScanner jSONReaderScanner2 = new JSONReaderScanner("\":\"", (byte) (-81));
      assertEquals(0, jSONReaderScanner2.matchStat);
      assertEquals(0, jSONReaderScanner2.matchStat());
      assertEquals((-81), jSONReaderScanner2.getFeatures());
      assertFalse(jSONReaderScanner2.isEOF());
      assertEquals('\"', jSONReaderScanner2.getCurrent());
      assertEquals(0, jSONReaderScanner2.token());
      assertEquals(0, jSONReaderScanner2.pos());
      assertEquals("", jSONReaderScanner2.stringDefaultValue());
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner1));
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner0));
      assertNotNull(jSONReaderScanner2);
      
      jSONReaderScanner2.scanNumber();
      assertEquals(0, jSONReaderScanner2.matchStat);
      assertEquals(0, jSONReaderScanner2.matchStat());
      assertEquals((-81), jSONReaderScanner2.getFeatures());
      assertFalse(jSONReaderScanner2.isEOF());
      assertEquals('\"', jSONReaderScanner2.getCurrent());
      assertEquals(0, jSONReaderScanner2.pos());
      assertEquals(2, jSONReaderScanner2.token());
      assertEquals("", jSONReaderScanner2.stringDefaultValue());
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner1));
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner0));
      assertNotSame(jSONReaderScanner2, jSONReaderScanner1);
      assertNotSame(jSONReaderScanner2, jSONReaderScanner0);
      
      JSONReaderScanner jSONReaderScanner3 = new JSONReaderScanner("wrfF9J[H9C#");
      assertEquals(0, jSONReaderScanner3.matchStat);
      assertNull(jSONReaderScanner3.stringDefaultValue());
      assertEquals(0, jSONReaderScanner3.matchStat());
      assertEquals('w', jSONReaderScanner3.getCurrent());
      assertEquals(0, jSONReaderScanner3.pos());
      assertFalse(jSONReaderScanner3.isEOF());
      assertEquals(989, jSONReaderScanner3.getFeatures());
      assertEquals(0, jSONReaderScanner3.token());
      assertFalse(jSONReaderScanner3.equals((Object)jSONReaderScanner1));
      assertFalse(jSONReaderScanner3.equals((Object)jSONReaderScanner2));
      assertFalse(jSONReaderScanner3.equals((Object)jSONReaderScanner0));
      assertNotNull(jSONReaderScanner3);
      
      long long0 = jSONReaderScanner2.scanLong('-');
      assertEquals((-1), jSONReaderScanner2.matchStat);
      assertEquals((-81), jSONReaderScanner2.getFeatures());
      assertEquals((-1), jSONReaderScanner2.matchStat());
      assertFalse(jSONReaderScanner2.isEOF());
      assertEquals('\"', jSONReaderScanner2.getCurrent());
      assertEquals(0, jSONReaderScanner2.pos());
      assertEquals(2, jSONReaderScanner2.token());
      assertEquals("", jSONReaderScanner2.stringDefaultValue());
      assertEquals(0L, long0);
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner3));
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner1));
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner0));
      assertNotSame(jSONReaderScanner2, jSONReaderScanner3);
      assertNotSame(jSONReaderScanner2, jSONReaderScanner1);
      assertNotSame(jSONReaderScanner2, jSONReaderScanner0);
      
      jSONReaderScanner2.nextToken();
      assertEquals((-1), jSONReaderScanner2.matchStat);
      assertEquals('\u001A', jSONReaderScanner2.getCurrent());
      assertEquals((-81), jSONReaderScanner2.getFeatures());
      assertEquals((-1), jSONReaderScanner2.matchStat());
      assertTrue(jSONReaderScanner2.isEOF());
      assertEquals(0, jSONReaderScanner2.pos());
      assertEquals("", jSONReaderScanner2.stringDefaultValue());
      assertEquals(4, jSONReaderScanner2.token());
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner3));
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner1));
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner0));
      assertNotSame(jSONReaderScanner2, jSONReaderScanner3);
      assertNotSame(jSONReaderScanner2, jSONReaderScanner1);
      assertNotSame(jSONReaderScanner2, jSONReaderScanner0);
      
      jSONReaderScanner2.resetStringPosition();
      assertEquals((-1), jSONReaderScanner2.matchStat);
      assertEquals('\u001A', jSONReaderScanner2.getCurrent());
      assertEquals((-81), jSONReaderScanner2.getFeatures());
      assertEquals((-1), jSONReaderScanner2.matchStat());
      assertTrue(jSONReaderScanner2.isEOF());
      assertEquals(0, jSONReaderScanner2.pos());
      assertEquals("", jSONReaderScanner2.stringDefaultValue());
      assertEquals(4, jSONReaderScanner2.token());
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner3));
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner1));
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner0));
      assertNotSame(jSONReaderScanner2, jSONReaderScanner3);
      assertNotSame(jSONReaderScanner2, jSONReaderScanner1);
      assertNotSame(jSONReaderScanner2, jSONReaderScanner0);
      
      JSONScanner jSONScanner0 = new JSONScanner("1_Ak");
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals('1', jSONScanner0.getCurrent());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.token());
      assertNotNull(jSONScanner0);
      
      char char0 = jSONScanner0.charAt(0);
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals('1', jSONScanner0.getCurrent());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.token());
      assertEquals('1', char0);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Locale locale0 = Locale.JAPAN;
      assertEquals("JP", locale0.getCountry());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("jpn", locale0.getISO3Language());
      assertNotNull(locale0);
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Ck6V4u1?RkDN");
      assertFalse(boolean0);
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("Set");
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals('S', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertNotNull(jSONReaderScanner0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'f';
      charArray0[1] = 'f';
      charArray0[2] = 'f';
      jSONReaderScanner0.nextToken();
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals('\u001A', jSONReaderScanner0.getCurrent());
      assertEquals(21, jSONReaderScanner0.token());
      
      StringReader stringReader0 = new StringReader("error parse false");
      assertNotNull(stringReader0);
      
      JSONScanner jSONScanner0 = new JSONScanner("unclosed.str.lit", (-1160));
      assertEquals(0, jSONScanner0.matchStat);
      assertFalse(jSONScanner0.isEOF());
      assertEquals("", jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.token());
      assertEquals('u', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.pos());
      assertEquals((-1160), jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat());
      assertNotNull(jSONScanner0);
      
      // Undeclared exception!
      try { 
        jSONScanner0.nextTokenWithColon((-395));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - u, info : pos 0, json : unclosed.str.lit
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("error parse null", 7);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('e', jSONReaderScanner0.getCurrent());
      assertEquals(7, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertNotNull(jSONReaderScanner0);
      
      TimeZone timeZone0 = jSONReaderScanner0.getTimeZone();
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('e', jSONReaderScanner0.getCurrent());
      assertEquals(7, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      jSONReaderScanner0.scanNumber();
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('r', jSONReaderScanner0.getCurrent());
      assertEquals(3, jSONReaderScanner0.token());
      assertEquals(7, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("error parse null", 45);
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertEquals(45, jSONReaderScanner1.getFeatures());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals('e', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.token());
      assertFalse(jSONReaderScanner1.isEOF());
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertNotNull(jSONReaderScanner1);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      JSONReaderScanner jSONReaderScanner2 = new JSONReaderScanner("7[", 0);
      assertEquals(0, jSONReaderScanner2.matchStat);
      assertFalse(jSONReaderScanner2.isEOF());
      assertEquals('7', jSONReaderScanner2.getCurrent());
      assertEquals(0, jSONReaderScanner2.pos());
      assertEquals(0, jSONReaderScanner2.getFeatures());
      assertEquals(0, jSONReaderScanner2.matchStat());
      assertNull(jSONReaderScanner2.stringDefaultValue());
      assertEquals(0, jSONReaderScanner2.token());
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner1));
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner0));
      assertNotNull(jSONReaderScanner2);
      
      String string0 = jSONReaderScanner2.stringVal();
      assertEquals(0, jSONReaderScanner2.matchStat);
      assertFalse(jSONReaderScanner2.isEOF());
      assertEquals('7', jSONReaderScanner2.getCurrent());
      assertEquals(0, jSONReaderScanner2.pos());
      assertEquals(0, jSONReaderScanner2.getFeatures());
      assertEquals(0, jSONReaderScanner2.matchStat());
      assertNull(jSONReaderScanner2.stringDefaultValue());
      assertEquals(0, jSONReaderScanner2.token());
      assertEquals("", string0);
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner1));
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner0));
      assertNotSame(jSONReaderScanner2, jSONReaderScanner1);
      assertNotSame(jSONReaderScanner2, jSONReaderScanner0);
      assertNotNull(string0);
      
      JSONReaderScanner jSONReaderScanner3 = new JSONReaderScanner("7[", 0);
      assertEquals(0, jSONReaderScanner3.matchStat);
      assertEquals('7', jSONReaderScanner3.getCurrent());
      assertEquals(0, jSONReaderScanner3.token());
      assertFalse(jSONReaderScanner3.isEOF());
      assertEquals(0, jSONReaderScanner3.matchStat());
      assertEquals(0, jSONReaderScanner3.getFeatures());
      assertEquals(0, jSONReaderScanner3.pos());
      assertNull(jSONReaderScanner3.stringDefaultValue());
      assertFalse(jSONReaderScanner3.equals((Object)jSONReaderScanner2));
      assertFalse(jSONReaderScanner3.equals((Object)jSONReaderScanner1));
      assertFalse(jSONReaderScanner3.equals((Object)jSONReaderScanner0));
      assertNotNull(jSONReaderScanner3);
      
      JSONReaderScanner jSONReaderScanner4 = new JSONReaderScanner("t");
      assertEquals(0, jSONReaderScanner4.matchStat);
      assertNull(jSONReaderScanner4.stringDefaultValue());
      assertEquals(0, jSONReaderScanner4.token());
      assertFalse(jSONReaderScanner4.isEOF());
      assertEquals(0, jSONReaderScanner4.matchStat());
      assertEquals(989, jSONReaderScanner4.getFeatures());
      assertEquals('t', jSONReaderScanner4.getCurrent());
      assertEquals(0, jSONReaderScanner4.pos());
      assertFalse(jSONReaderScanner4.equals((Object)jSONReaderScanner0));
      assertFalse(jSONReaderScanner4.equals((Object)jSONReaderScanner3));
      assertFalse(jSONReaderScanner4.equals((Object)jSONReaderScanner1));
      assertFalse(jSONReaderScanner4.equals((Object)jSONReaderScanner2));
      assertNotNull(jSONReaderScanner4);
      
      char[] charArray0 = new char[0];
      boolean boolean1 = jSONReaderScanner4.scanFieldBoolean(charArray0);
      assertEquals((-1), jSONReaderScanner4.matchStat);
      assertNull(jSONReaderScanner4.stringDefaultValue());
      assertEquals(0, jSONReaderScanner4.token());
      assertFalse(jSONReaderScanner4.isEOF());
      assertEquals((-1), jSONReaderScanner4.matchStat());
      assertEquals(989, jSONReaderScanner4.getFeatures());
      assertEquals('t', jSONReaderScanner4.getCurrent());
      assertEquals(0, jSONReaderScanner4.pos());
      assertFalse(boolean1);
      assertFalse(jSONReaderScanner4.equals((Object)jSONReaderScanner0));
      assertFalse(jSONReaderScanner4.equals((Object)jSONReaderScanner3));
      assertFalse(jSONReaderScanner4.equals((Object)jSONReaderScanner1));
      assertFalse(jSONReaderScanner4.equals((Object)jSONReaderScanner2));
      assertFalse(boolean1 == boolean0);
      assertNotSame(jSONReaderScanner4, jSONReaderScanner0);
      assertNotSame(jSONReaderScanner4, jSONReaderScanner3);
      assertNotSame(jSONReaderScanner4, jSONReaderScanner1);
      assertNotSame(jSONReaderScanner4, jSONReaderScanner2);
      assertArrayEquals(new char[] {}, charArray0);
      
      JSONScanner jSONScanner0 = new JSONScanner("t", 45);
      assertEquals(0, jSONScanner0.matchStat);
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals('t', jSONScanner0.getCurrent());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(45, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat());
      assertNotNull(jSONScanner0);
      
      JSONScanner jSONScanner1 = new JSONScanner("AtbMDsg|b");
      assertEquals(0, jSONScanner1.matchStat);
      assertNull(jSONScanner1.stringDefaultValue());
      assertEquals('A', jSONScanner1.getCurrent());
      assertEquals(0, jSONScanner1.matchStat());
      assertEquals(989, jSONScanner1.getFeatures());
      assertEquals(0, jSONScanner1.token());
      assertFalse(jSONScanner1.isEOF());
      assertEquals(0, jSONScanner1.pos());
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      assertNotNull(jSONScanner1);
      
      String string1 = jSONScanner0.info();
      assertEquals(0, jSONScanner0.matchStat);
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals('t', jSONScanner0.getCurrent());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(45, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals("pos 0, json : t", string1);
      assertFalse(jSONScanner0.equals((Object)jSONScanner1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(jSONScanner0, jSONScanner1);
      assertNotNull(string1);
      
      MockDate mockDate0 = new MockDate(0, 0, 0);
      assertEquals("Sun Dec 31 00:00:00 GMT 1899", mockDate0.toString());
      assertNotNull(mockDate0);
      
      // Undeclared exception!
      try { 
        jSONReaderScanner0.doubleValue();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = '-';
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      charArray0[1] = '0';
      charArray0[2] = 'c';
      charArray0[4] = '~';
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-135), "unclosed.str.lit");
      assertEquals("unclosed.str.lit", simpleTimeZone0.getID());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals((-135), simpleTimeZone0.getRawOffset());
      assertEquals("java.util.SimpleTimeZone[id=unclosed.str.lit,offset=-135,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertNotNull(simpleTimeZone0);
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, '-');
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('-', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertArrayEquals(new char[] {'-', '0', 'c', '\u0000', '~'}, charArray0);
      assertNotNull(jSONReaderScanner0);
      
      jSONReaderScanner0.setTimeZone(simpleTimeZone0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals("unclosed.str.lit", simpleTimeZone0.getID());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals((-135), simpleTimeZone0.getRawOffset());
      assertEquals("java.util.SimpleTimeZone[id=unclosed.str.lit,offset=-135,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('-', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertArrayEquals(new char[] {'-', '0', 'c', '\u0000', '~'}, charArray0);
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("EOF error", 93);
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals('E', jSONReaderScanner1.getCurrent());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(93, jSONReaderScanner1.getFeatures());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals(0, jSONReaderScanner1.token());
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertNotNull(jSONReaderScanner1);
      
      JSONReaderScanner jSONReaderScanner2 = new JSONReaderScanner("unclosed.str.lit");
      assertEquals(0, jSONReaderScanner2.matchStat);
      assertEquals(0, jSONReaderScanner2.token());
      assertEquals('u', jSONReaderScanner2.getCurrent());
      assertFalse(jSONReaderScanner2.isEOF());
      assertEquals(0, jSONReaderScanner2.matchStat());
      assertNull(jSONReaderScanner2.stringDefaultValue());
      assertEquals(989, jSONReaderScanner2.getFeatures());
      assertEquals(0, jSONReaderScanner2.pos());
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner1));
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner0));
      assertNotNull(jSONReaderScanner2);
      
      MockDate mockDate0 = new MockDate(93, 55232, 42, 3247, 1303, (-2884));
      assertEquals("Thu Feb 25 03:54:56 GMT 6596", mockDate0.toString());
      assertNotNull(mockDate0);
      
      JSONReaderScanner jSONReaderScanner3 = new JSONReaderScanner(charArray0, 19);
      assertEquals(0, jSONReaderScanner3.matchStat);
      assertEquals(0, jSONReaderScanner3.pos());
      assertNull(jSONReaderScanner3.stringDefaultValue());
      assertEquals(0, jSONReaderScanner3.matchStat());
      assertEquals('-', jSONReaderScanner3.getCurrent());
      assertFalse(jSONReaderScanner3.isEOF());
      assertEquals(989, jSONReaderScanner3.getFeatures());
      assertEquals(0, jSONReaderScanner3.token());
      assertFalse(jSONReaderScanner3.equals((Object)jSONReaderScanner2));
      assertFalse(jSONReaderScanner3.equals((Object)jSONReaderScanner1));
      assertFalse(jSONReaderScanner3.equals((Object)jSONReaderScanner0));
      assertArrayEquals(new char[] {'-', '0', 'c', '\u0000', '~'}, charArray0);
      assertNotNull(jSONReaderScanner3);
      
      double double0 = jSONReaderScanner3.scanDouble('0');
      assertEquals((-1), jSONReaderScanner3.matchStat);
      assertEquals(0, jSONReaderScanner3.pos());
      assertNull(jSONReaderScanner3.stringDefaultValue());
      assertEquals((-1), jSONReaderScanner3.matchStat());
      assertEquals('-', jSONReaderScanner3.getCurrent());
      assertFalse(jSONReaderScanner3.isEOF());
      assertEquals(989, jSONReaderScanner3.getFeatures());
      assertEquals(0, jSONReaderScanner3.token());
      assertEquals(-0.0, double0, 0.01);
      assertFalse(jSONReaderScanner3.equals((Object)jSONReaderScanner2));
      assertFalse(jSONReaderScanner3.equals((Object)jSONReaderScanner1));
      assertFalse(jSONReaderScanner3.equals((Object)jSONReaderScanner0));
      assertNotSame(jSONReaderScanner3, jSONReaderScanner2);
      assertNotSame(jSONReaderScanner3, jSONReaderScanner1);
      assertNotSame(jSONReaderScanner3, jSONReaderScanner0);
      assertArrayEquals(new char[] {'-', '0', 'c', '\u0000', '~'}, charArray0);
      
      // Undeclared exception!
      try { 
        jSONReaderScanner3.nextTokenWithColon();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - -, info : 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("rror =prse ew");
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals('r', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertNotNull(jSONReaderScanner0);
      
      jSONReaderScanner0.setToken((-2143));
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals((-2143), jSONReaderScanner0.token());
      assertEquals('r', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      
      JSONScanner jSONScanner0 = new JSONScanner("shV<y(qj_vuBQ");
      assertEquals(0, jSONScanner0.matchStat);
      assertNull(jSONScanner0.stringDefaultValue());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals('s', jSONScanner0.getCurrent());
      assertNotNull(jSONScanner0);
      
      jSONReaderScanner0.scanIdent();
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(' ', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(18, jSONReaderScanner0.token());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      
      char[] charArray0 = new char[1];
      String string0 = jSONReaderScanner0.scanFieldString(charArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertEquals(' ', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(18, jSONReaderScanner0.token());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertNull(string0);
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("8D3AZL", (-2));
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertEquals('8', jSONReaderScanner1.getCurrent());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals((-2), jSONReaderScanner1.getFeatures());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals("", jSONReaderScanner1.stringDefaultValue());
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertNotNull(jSONReaderScanner1);
      
      long long0 = jSONReaderScanner1.scanFieldSymbol(charArray0);
      assertEquals((-2), jSONReaderScanner1.matchStat);
      assertEquals((-2), jSONReaderScanner1.matchStat());
      assertEquals('8', jSONReaderScanner1.getCurrent());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals((-2), jSONReaderScanner1.getFeatures());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals("", jSONReaderScanner1.stringDefaultValue());
      assertEquals(0L, long0);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      
      jSONReaderScanner1.nextToken(0);
      assertEquals((-2), jSONReaderScanner1.matchStat);
      assertEquals((-2), jSONReaderScanner1.matchStat());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals('3', jSONReaderScanner1.getCurrent());
      assertEquals(3, jSONReaderScanner1.token());
      assertEquals((-2), jSONReaderScanner1.getFeatures());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals("", jSONReaderScanner1.stringDefaultValue());
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      
      int int0 = Calendar.AM;
      assertEquals(0, int0);
      
      JSONReaderScanner jSONReaderScanner2 = null;
      try {
        jSONReaderScanner2 = new JSONReaderScanner(charArray0, (-600), (-2143));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.CharArrayReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(" parse null", (-4212));
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertEquals((-4212), jSONScanner0.getFeatures());
      assertNull(jSONScanner0.stringDefaultValue());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(' ', jSONScanner0.getCurrent());
      assertNotNull(jSONScanner0);
      
      char[] charArray0 = new char[3];
      boolean boolean0 = jSONScanner0.isBlankInput();
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertEquals((-4212), jSONScanner0.getFeatures());
      assertNull(jSONScanner0.stringDefaultValue());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(' ', jSONScanner0.getCurrent());
      assertFalse(boolean0);
      
      charArray0[0] = ')';
      charArray0[1] = 'm';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 101);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(')', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertArrayEquals(new char[] {')', 'm', '\u0000'}, charArray0);
      assertNotNull(jSONReaderScanner0);
      
      float[] floatArray0 = jSONReaderScanner0.scanFieldFloatArray(charArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(')', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertArrayEquals(new char[] {')', 'm', '\u0000'}, charArray0);
      assertNull(floatArray0);
      
      Locale locale0 = Locale.JAPAN;
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("JP", locale0.getCountry());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("ja_JP", locale0.toString());
      assertNotNull(locale0);
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(charArray0, 78);
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertEquals(')', jSONReaderScanner1.getCurrent());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertEquals(0, jSONReaderScanner1.token());
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertArrayEquals(new char[] {')', 'm', '\u0000'}, charArray0);
      assertNotNull(jSONReaderScanner1);
      
      UUID uUID0 = jSONReaderScanner1.scanUUID('U');
      assertEquals((-1), jSONReaderScanner1.matchStat);
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals((-1), jSONReaderScanner1.matchStat());
      assertEquals(')', jSONReaderScanner1.getCurrent());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertEquals(0, jSONReaderScanner1.token());
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertArrayEquals(new char[] {')', 'm', '\u0000'}, charArray0);
      assertNull(uUID0);
      
      jSONReaderScanner0.putChar(')');
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(')', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner1));
      assertNotSame(jSONReaderScanner0, jSONReaderScanner1);
      assertArrayEquals(new char[] {')', 'm', '\u0000'}, charArray0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      JSONReaderScanner jSONReaderScanner2 = new JSONReaderScanner("false");
      assertEquals(0, jSONReaderScanner2.matchStat);
      assertNull(jSONReaderScanner2.stringDefaultValue());
      assertEquals(0, jSONReaderScanner2.token());
      assertEquals('f', jSONReaderScanner2.getCurrent());
      assertEquals(0, jSONReaderScanner2.pos());
      assertFalse(jSONReaderScanner2.isEOF());
      assertEquals(989, jSONReaderScanner2.getFeatures());
      assertEquals(0, jSONReaderScanner2.matchStat());
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner1));
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner0));
      assertNotNull(jSONReaderScanner2);
      
      Locale locale1 = Locale.ITALY;
      assertEquals("it_IT", locale1.toString());
      assertEquals("", locale1.getVariant());
      assertEquals("it", locale1.getLanguage());
      assertEquals("ita", locale1.getISO3Language());
      assertEquals("ITA", locale1.getISO3Country());
      assertEquals("IT", locale1.getCountry());
      assertFalse(locale1.equals((Object)locale0));
      assertNotSame(locale1, locale0);
      assertNotNull(locale1);
      
      String string0 = locale0.getDisplayScript(locale1);
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("JP", locale0.getCountry());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("it_IT", locale1.toString());
      assertEquals("", locale1.getVariant());
      assertEquals("it", locale1.getLanguage());
      assertEquals("ita", locale1.getISO3Language());
      assertEquals("ITA", locale1.getISO3Country());
      assertEquals("IT", locale1.getCountry());
      assertEquals("", string0);
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(locale1.equals((Object)locale0));
      assertNotSame(locale0, locale1);
      assertNotSame(locale1, locale0);
      assertNotNull(string0);
      
      BigDecimal bigDecimal0 = jSONReaderScanner1.scanDecimal('Z');
      assertEquals((-1), jSONReaderScanner1.matchStat);
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals((-1), jSONReaderScanner1.matchStat());
      assertEquals(')', jSONReaderScanner1.getCurrent());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertEquals(0, jSONReaderScanner1.token());
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner2));
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertNotSame(jSONReaderScanner1, jSONReaderScanner2);
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertArrayEquals(new char[] {')', 'm', '\u0000'}, charArray0);
      assertNull(bigDecimal0);
      
      // Undeclared exception!
      try { 
        jSONReaderScanner1.scanNullOrNew();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse null or new
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      char[] charArray0 = new char[5];
      char char0 = '-';
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "+z]");
      assertFalse(boolean0);
      
      charArray0[0] = '-';
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      char char1 = '0';
      charArray0[1] = '0';
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      int int0 = 151;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 151);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('-', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertArrayEquals(new char[] {'-', '0', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(jSONReaderScanner0);
      
      Class<Object> class0 = Object.class;
      Collection<String> collection0 = jSONReaderScanner0.newCollectionByType(class0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('-', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertArrayEquals(new char[] {'-', '0', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(collection0);
      
      boolean boolean2 = jSONReaderScanner0.isBlankInput();
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('-', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertArrayEquals(new char[] {'-', '0', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      int int1 = 4742;
      SymbolTable symbolTable0 = new SymbolTable(4742);
      assertNotNull(symbolTable0);
      
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanSymbol(symbolTable0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal identifier : -
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      Locale locale0 = new Locale("K>wGAwR", "K>wGAwR");
      assertEquals("", locale0.getVariant());
      assertEquals("k>wgawr", locale0.getLanguage());
      assertEquals("k>wgawr_K>WGAWR", locale0.toString());
      assertEquals("K>WGAWR", locale0.getCountry());
      assertNotNull(locale0);
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("null");
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals('n', jSONReaderScanner0.getCurrent());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertNotNull(jSONReaderScanner0);
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("Yoy[Uv&jFoV\"TM", 'p');
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertEquals(0, jSONReaderScanner1.token());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(112, jSONReaderScanner1.getFeatures());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertEquals('Y', jSONReaderScanner1.getCurrent());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(0, jSONReaderScanner1.pos());
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertNotNull(jSONReaderScanner1);
      
      String string0 = jSONReaderScanner1.stringVal();
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertEquals(0, jSONReaderScanner1.token());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(112, jSONReaderScanner1.getFeatures());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertEquals('Y', jSONReaderScanner1.getCurrent());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals("", string0);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertNotNull(string0);
      
      UUID uUID0 = jSONReaderScanner0.scanUUID('p');
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals('n', jSONReaderScanner0.getCurrent());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner1));
      assertNotSame(jSONReaderScanner0, jSONReaderScanner1);
      assertNull(uUID0);
      
      jSONReaderScanner1.putChar('N');
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertEquals(0, jSONReaderScanner1.token());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(112, jSONReaderScanner1.getFeatures());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertEquals('Y', jSONReaderScanner1.getCurrent());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(0, jSONReaderScanner1.pos());
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      JSONReaderScanner jSONReaderScanner2 = new JSONReaderScanner("");
      assertEquals(0, jSONReaderScanner2.matchStat);
      assertEquals(0, jSONReaderScanner2.matchStat());
      assertEquals(0, jSONReaderScanner2.token());
      assertTrue(jSONReaderScanner2.isEOF());
      assertNull(jSONReaderScanner2.stringDefaultValue());
      assertEquals('\u0000', jSONReaderScanner2.getCurrent());
      assertEquals(989, jSONReaderScanner2.getFeatures());
      assertEquals(0, jSONReaderScanner2.pos());
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner0));
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner1));
      assertNotNull(jSONReaderScanner2);
      
      Locale locale1 = Locale.KOREAN;
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getCountry());
      assertEquals("", locale1.getVariant());
      assertEquals("kor", locale1.getISO3Language());
      assertEquals("ko", locale1.toString());
      assertEquals("ko", locale1.getLanguage());
      assertFalse(locale1.equals((Object)locale0));
      assertNotSame(locale1, locale0);
      assertNotNull(locale1);
      
      Date date0 = jSONReaderScanner1.scanDate('0');
      assertEquals((-1), jSONReaderScanner1.matchStat);
      assertEquals(0, jSONReaderScanner1.token());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(112, jSONReaderScanner1.getFeatures());
      assertEquals((-1), jSONReaderScanner1.matchStat());
      assertEquals('Y', jSONReaderScanner1.getCurrent());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(0, jSONReaderScanner1.pos());
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner2));
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertNotSame(jSONReaderScanner1, jSONReaderScanner2);
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertNull(date0);
      
      char[] charArray0 = null;
      // Undeclared exception!
      try { 
        jSONReaderScanner2.matchField((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONReaderScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("true");
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(0, jSONScanner0.token());
      assertEquals('t', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.matchStat());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(989, jSONScanner0.getFeatures());
      assertFalse(jSONScanner0.isEOF());
      assertNotNull(jSONScanner0);
      
      jSONScanner0.nextIdent();
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(0, jSONScanner0.pos());
      assertTrue(jSONScanner0.isEOF());
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(6, jSONScanner0.token());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(989, jSONScanner0.getFeatures());
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("true");
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('t', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertNotNull(jSONReaderScanner0);
      
      String string0 = jSONReaderScanner0.stringVal();
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('t', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals("", string0);
      assertNotNull(string0);
      
      double double0 = jSONReaderScanner0.scanDouble('J');
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('t', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0.0, double0, 0.01);
      
      SymbolTable symbolTable0 = new SymbolTable(18);
      assertNotNull(symbolTable0);
      
      String string1 = jSONScanner0.scanSymbol(symbolTable0);
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(0, jSONScanner0.pos());
      assertTrue(jSONScanner0.isEOF());
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(20, jSONScanner0.token());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(989, jSONScanner0.getFeatures());
      assertNull(string1);
      
      TimeZone timeZone0 = jSONReaderScanner0.getTimeZone();
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('t', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      JSONScanner jSONScanner1 = new JSONScanner("");
      assertEquals(0, jSONScanner1.matchStat);
      assertEquals(0, jSONScanner1.token());
      assertEquals(0, jSONScanner1.pos());
      assertTrue(jSONScanner1.isEOF());
      assertNull(jSONScanner1.stringDefaultValue());
      assertEquals('\u001A', jSONScanner1.getCurrent());
      assertEquals(0, jSONScanner1.matchStat());
      assertEquals(989, jSONScanner1.getFeatures());
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      assertNotNull(jSONScanner1);
      
      JSONScanner jSONScanner2 = new JSONScanner("true", 41);
      assertEquals(0, jSONScanner2.matchStat);
      assertEquals(0, jSONScanner2.matchStat());
      assertEquals(0, jSONScanner2.pos());
      assertNull(jSONScanner2.stringDefaultValue());
      assertEquals('t', jSONScanner2.getCurrent());
      assertEquals(41, jSONScanner2.getFeatures());
      assertFalse(jSONScanner2.isEOF());
      assertEquals(0, jSONScanner2.token());
      assertFalse(jSONScanner2.equals((Object)jSONScanner0));
      assertFalse(jSONScanner2.equals((Object)jSONScanner1));
      assertNotNull(jSONScanner2);
      
      Locale locale0 = Locale.FRANCE;
      assertEquals("fr_FR", locale0.toString());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("FR", locale0.getCountry());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      assertEquals("fr_FR", locale0.toString());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("FR", locale0.getCountry());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertNotNull(set0);
      
      jSONScanner2.scanStringArray(set0, 't');
      assertEquals((-1), jSONScanner2.matchStat);
      assertEquals((-1), jSONScanner2.matchStat());
      assertEquals(0, jSONScanner2.pos());
      assertNull(jSONScanner2.stringDefaultValue());
      assertEquals('t', jSONScanner2.getCurrent());
      assertEquals(41, jSONScanner2.getFeatures());
      assertFalse(jSONScanner2.isEOF());
      assertEquals(0, jSONScanner2.token());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("FR", locale0.getCountry());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertFalse(jSONScanner2.equals((Object)jSONScanner0));
      assertFalse(jSONScanner2.equals((Object)jSONScanner1));
      assertNotSame(jSONScanner2, jSONScanner0);
      assertNotSame(jSONScanner2, jSONScanner1);
      
      System.setCurrentTimeMillis(0);
      // Undeclared exception!
      try { 
        jSONScanner0.numberString();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("1_Ak");
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('1', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNotNull(jSONReaderScanner0);
      
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("\":\"", 0);
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals('\"', jSONReaderScanner1.getCurrent());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(0, jSONReaderScanner1.getFeatures());
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertNotNull(jSONReaderScanner1);
      
      TimeZone timeZone0 = jSONReaderScanner1.getTimeZone();
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals('\"', jSONReaderScanner1.getCurrent());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(0, jSONReaderScanner1.getFeatures());
      assertEquals("GMT", timeZone0.getID());
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertNotNull(timeZone0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)72;
      byteArray0[1] = (byte)72;
      BigDecimal bigDecimal0 = jSONReaderScanner1.scanFieldDecimal(charArray0);
      assertEquals((-1), jSONReaderScanner1.matchStat);
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals((-1), jSONReaderScanner1.matchStat());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals('\"', jSONReaderScanner1.getCurrent());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(0, jSONReaderScanner1.getFeatures());
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertArrayEquals(new char[] {}, charArray0);
      assertNull(bigDecimal0);
      
      byteArray0[2] = (byte)72;
      byteArray0[3] = (byte)72;
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "\":\"");
      assertFalse(boolean0);
      
      boolean boolean1 = jSONReaderScanner0.scanFieldBoolean(charArray0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('1', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(boolean1);
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner1));
      assertTrue(boolean1 == boolean0);
      assertNotSame(jSONReaderScanner0, jSONReaderScanner1);
      assertArrayEquals(new char[] {}, charArray0);
      
      float float0 = jSONReaderScanner1.scanFieldFloat(charArray0);
      assertEquals((-1), jSONReaderScanner1.matchStat);
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals((-1), jSONReaderScanner1.matchStat());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals('\"', jSONReaderScanner1.getCurrent());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(0, jSONReaderScanner1.getFeatures());
      assertEquals(0.0F, float0, 0.01F);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertArrayEquals(new char[] {}, charArray0);
      
      boolean boolean2 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertArrayEquals(new byte[] {(byte)72, (byte)72, (byte)72, (byte)72, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      jSONReaderScanner1.nextToken(539);
      assertEquals((-1), jSONReaderScanner1.matchStat);
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals((-1), jSONReaderScanner1.matchStat());
      assertEquals('\u001A', jSONReaderScanner1.getCurrent());
      assertTrue(jSONReaderScanner1.isEOF());
      assertEquals(4, jSONReaderScanner1.token());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(0, jSONReaderScanner1.getFeatures());
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      
      BigInteger bigInteger0 = jSONReaderScanner1.scanFieldBigInteger(charArray0);
      assertEquals((-1), jSONReaderScanner1.matchStat);
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals((-1), jSONReaderScanner1.matchStat());
      assertEquals('\u001A', jSONReaderScanner1.getCurrent());
      assertTrue(jSONReaderScanner1.isEOF());
      assertEquals(4, jSONReaderScanner1.token());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(0, jSONReaderScanner1.getFeatures());
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertArrayEquals(new char[] {}, charArray0);
      assertNull(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      char[] charArray0 = new char[10];
      charArray0[0] = 'w';
      charArray0[1] = '(';
      charArray0[2] = 'L';
      charArray0[4] = 't';
      charArray0[5] = '^';
      charArray0[6] = 'w';
      char[] charArray1 = new char[1];
      assertFalse(charArray1.equals((Object)charArray0));
      
      Locale locale0 = Locale.CANADA_FRENCH;
      assertEquals("CA", locale0.getCountry());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("fra", locale0.getISO3Language());
      assertNotNull(locale0);
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("null");
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('n', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertNotNull(jSONReaderScanner0);
      
      JSONScanner jSONScanner0 = new JSONScanner("TreSet");
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals('T', jSONScanner0.getCurrent());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.token());
      assertEquals(989, jSONScanner0.getFeatures());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.matchStat());
      assertNotNull(jSONScanner0);
      
      boolean boolean0 = jSONScanner0.isEOF();
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals('T', jSONScanner0.getCurrent());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.token());
      assertEquals(989, jSONScanner0.getFeatures());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.matchStat());
      assertFalse(boolean0);
      
      jSONReaderScanner0.scanIdent();
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals(8, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals('\u001A', jSONReaderScanner0.getCurrent());
      
      char char0 = '+';
      String string0 = jSONScanner0.tokenName();
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals('T', jSONScanner0.getCurrent());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.token());
      assertEquals(989, jSONScanner0.getFeatures());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals("Unknown", string0);
      assertNotNull(string0);
      
      // Undeclared exception!
      try { 
        jSONScanner0.scanFieldIntArray((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("c1_A");
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals('c', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertNotNull(jSONReaderScanner0);
      
      JSONScanner jSONScanner0 = new JSONScanner("unclosed single-quote string");
      assertEquals(0, jSONScanner0.matchStat);
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals('u', jSONScanner0.getCurrent());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertNotNull(jSONScanner0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      SymbolTable symbolTable0 = new SymbolTable(116);
      assertNotNull(symbolTable0);
      
      String string0 = jSONReaderScanner0.stringVal();
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals('c', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals("", string0);
      assertNotNull(string0);
      
      Locale locale0 = new Locale("unclosed single-quote string", "");
      assertEquals("unclosed single-quote string", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("unclosed single-quote string", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertNotNull(locale0);
      
      MockDate mockDate0 = new MockDate();
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertNotNull(mockDate0);
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "k");
      assertFalse(boolean0);
      
      SymbolTable symbolTable1 = new SymbolTable(116);
      assertFalse(symbolTable1.equals((Object)symbolTable0));
      assertNotNull(symbolTable1);
      
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanSymbol((SymbolTable) null);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("new");
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('n', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertNotNull(jSONReaderScanner0);
      
      BigInteger bigInteger0 = jSONReaderScanner0.scanFieldBigInteger(charArray0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('n', jSONReaderScanner0.getCurrent());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertArrayEquals(new char[] {}, charArray0);
      assertNull(bigInteger0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      String string0 = jSONReaderScanner0.stringVal();
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('n', jSONReaderScanner0.getCurrent());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals("", string0);
      assertNotNull(string0);
      
      JSONScanner jSONScanner0 = new JSONScanner("", 84);
      assertEquals(0, jSONScanner0.matchStat);
      assertTrue(jSONScanner0.isEOF());
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(84, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertNull(jSONScanner0.stringDefaultValue());
      assertNotNull(jSONScanner0);
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("new");
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals('n', jSONReaderScanner1.getCurrent());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals(0, jSONReaderScanner1.pos());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertNotNull(jSONReaderScanner1);
      
      long long0 = jSONReaderScanner0.scanLong('0');
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('n', jSONReaderScanner0.getCurrent());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0L, long0);
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner1));
      assertNotSame(jSONReaderScanner0, jSONReaderScanner1);
      
      // Undeclared exception!
      try { 
        jSONReaderScanner1.scanString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed string : \u001A
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("null");
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals('n', jSONReaderScanner0.getCurrent());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertNotNull(jSONReaderScanner0);
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("Yoy[Uv&jFoV\"TM", 'p');
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertEquals(112, jSONReaderScanner1.getFeatures());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertEquals('Y', jSONReaderScanner1.getCurrent());
      assertFalse(jSONReaderScanner1.isEOF());
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertNotNull(jSONReaderScanner1);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      String string0 = jSONReaderScanner1.stringVal();
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertEquals(112, jSONReaderScanner1.getFeatures());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertEquals('Y', jSONReaderScanner1.getCurrent());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals("", string0);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertNotNull(string0);
      
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ">");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'p';
      jSONReaderScanner1.matchStat = 0;
      assertEquals(112, jSONReaderScanner1.getFeatures());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertEquals('Y', jSONReaderScanner1.getCurrent());
      assertFalse(jSONReaderScanner1.isEOF());
      
      JSONReaderScanner jSONReaderScanner2 = new JSONReaderScanner("H[9", (-1948));
      assertEquals(0, jSONReaderScanner2.matchStat);
      assertEquals(0, jSONReaderScanner2.matchStat());
      assertFalse(jSONReaderScanner2.isEOF());
      assertEquals(0, jSONReaderScanner2.token());
      assertEquals(0, jSONReaderScanner2.pos());
      assertEquals("", jSONReaderScanner2.stringDefaultValue());
      assertEquals((-1948), jSONReaderScanner2.getFeatures());
      assertEquals('H', jSONReaderScanner2.getCurrent());
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner0));
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner1));
      assertNotNull(jSONReaderScanner2);
      
      long long0 = jSONReaderScanner0.scanLong('+');
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals('n', jSONReaderScanner0.getCurrent());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0L, long0);
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner2));
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner1));
      assertNotSame(jSONReaderScanner0, jSONReaderScanner2);
      assertNotSame(jSONReaderScanner0, jSONReaderScanner1);
      
      jSONReaderScanner1.nextToken();
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertEquals('o', jSONReaderScanner1.getCurrent());
      assertEquals(112, jSONReaderScanner1.getFeatures());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals(1, jSONReaderScanner1.token());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertFalse(jSONReaderScanner1.isEOF());
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner2));
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertNotSame(jSONReaderScanner1, jSONReaderScanner2);
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      
      int int0 = 3;
      SymbolTable symbolTable0 = null;
      try {
        symbolTable0 = new SymbolTable((-1400));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.SymbolTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("true");
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.pos());
      assertFalse(jSONScanner0.isEOF());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals('t', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.token());
      assertNotNull(jSONScanner0);
      
      jSONScanner0.nextIdent();
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(6, jSONScanner0.token());
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.pos());
      assertNull(jSONScanner0.stringDefaultValue());
      assertTrue(jSONScanner0.isEOF());
      
      char[] charArray0 = new char[1];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 454, 93);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(93, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertNotNull(jSONReaderScanner0);
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("true");
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals('t', jSONReaderScanner1.getCurrent());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertEquals(0, jSONReaderScanner1.pos());
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertNotNull(jSONReaderScanner1);
      
      boolean boolean0 = jSONReaderScanner1.charArrayCompare(charArray0);
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals('t', jSONReaderScanner1.getCurrent());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertEquals(0, jSONReaderScanner1.pos());
      assertFalse(boolean0);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      
      String string0 = jSONReaderScanner1.stringVal();
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals('t', jSONReaderScanner1.getCurrent());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals("", string0);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertNotNull(string0);
      
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      double double0 = jSONReaderScanner0.scanFieldDouble(charArray0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(93, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(0.0, double0, 0.01);
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner1));
      assertNotSame(jSONReaderScanner0, jSONReaderScanner1);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      
      boolean boolean2 = jSONReaderScanner1.scanBoolean(']');
      assertEquals((-1), jSONReaderScanner1.matchStat);
      assertEquals((-1), jSONReaderScanner1.matchStat());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals('t', jSONReaderScanner1.getCurrent());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertEquals(0, jSONReaderScanner1.pos());
      assertTrue(boolean2);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      
      // Undeclared exception!
      try { 
        jSONReaderScanner1.nextToken();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse true
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      char[] charArray0 = new char[9];
      charArray0[0] = 'H';
      charArray0[1] = '(';
      charArray0[2] = 'c';
      charArray0[3] = '#';
      charArray0[4] = ':';
      charArray0[5] = '!';
      charArray0[6] = 'M';
      charArray0[7] = '}';
      charArray0[8] = '#';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 1772);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals('H', jSONReaderScanner0.getCurrent());
      assertArrayEquals(new char[] {'H', '(', 'c', '#', ':', '!', 'M', '}', '#'}, charArray0);
      assertNotNull(jSONReaderScanner0);
      
      Class<Object> class0 = Object.class;
      Collection<String> collection0 = jSONReaderScanner0.scanFieldStringArray(charArray0, class0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals('H', jSONReaderScanner0.getCurrent());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertArrayEquals(new char[] {'H', '(', 'c', '#', ':', '!', 'M', '}', '#'}, charArray0);
      assertNull(collection0);
      
      jSONReaderScanner0.setToken(1772);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals(1772, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals('H', jSONReaderScanner0.getCurrent());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertArrayEquals(new char[] {'H', '(', 'c', '#', ':', '!', 'M', '}', '#'}, charArray0);
      
      jSONReaderScanner0.scanStringArray((Collection<String>) null, 'n');
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals(1772, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals('H', jSONReaderScanner0.getCurrent());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertArrayEquals(new char[] {'H', '(', 'c', '#', ':', '!', 'M', '}', '#'}, charArray0);
      
      int int0 = jSONReaderScanner0.indexOf('y', 1772);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals(1772, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals('H', jSONReaderScanner0.getCurrent());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals((-1), int0);
      assertArrayEquals(new char[] {'H', '(', 'c', '#', ':', '!', 'M', '}', '#'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = '*';
      charArray0[1] = '0';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("wd\"F x.$");
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.token());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('w', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertNotNull(jSONReaderScanner0);
      
      boolean boolean0 = jSONReaderScanner0.scanFieldBoolean(charArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.token());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('w', jSONReaderScanner0.getCurrent());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertFalse(boolean0);
      assertArrayEquals(new char[] {'*', '0', '\u0000', '\u0000'}, charArray0);
      
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      Locale locale0 = new Locale("2h3eXd]Y:0;4zT~]q_");
      assertEquals("", locale0.getVariant());
      assertEquals("2h3exd]y:0;4zt~]q_", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("2h3exd]y:0;4zt~]q_", locale0.getLanguage());
      assertNotNull(locale0);
      
      String string0 = locale0.getDisplayName();
      assertEquals("", locale0.getVariant());
      assertEquals("2h3exd]y:0;4zt~]q_", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("2h3exd]y:0;4zt~]q_", locale0.getLanguage());
      assertEquals("2h3exd]y:0;4zt~]q_", string0);
      assertNotNull(string0);
      
      Locale.setDefault(locale_Category0, locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("2h3exd]y:0;4zt~]q_", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("2h3exd]y:0;4zt~]q_", locale0.getLanguage());
      
      jSONReaderScanner0.skipWhitespace();
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.token());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('w', jSONReaderScanner0.getCurrent());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(charArray0, 92);
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertEquals('*', jSONReaderScanner1.getCurrent());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.token());
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertArrayEquals(new char[] {'*', '0', '\u0000', '\u0000'}, charArray0);
      assertNotNull(jSONReaderScanner1);
      
      float float0 = jSONReaderScanner1.scanFloat(',');
      assertEquals((-1), jSONReaderScanner1.matchStat);
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals('*', jSONReaderScanner1.getCurrent());
      assertEquals((-1), jSONReaderScanner1.matchStat());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals(0.0F, float0, 0.01F);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertArrayEquals(new char[] {'*', '0', '\u0000', '\u0000'}, charArray0);
      
      jSONReaderScanner1.nextIdent();
      assertEquals((-1), jSONReaderScanner1.matchStat);
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals((-1), jSONReaderScanner1.matchStat());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(1, jSONReaderScanner1.token());
      assertEquals('0', jSONReaderScanner1.getCurrent());
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertArrayEquals(new char[] {'*', '0', '\u0000', '\u0000'}, charArray0);
      
      int int0 = jSONReaderScanner1.scanInt('\u0000');
      assertEquals(3, jSONReaderScanner1.matchStat);
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(3, jSONReaderScanner1.matchStat());
      assertEquals(16, jSONReaderScanner1.token());
      assertEquals('\u0000', jSONReaderScanner1.getCurrent());
      assertEquals(0, int0);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertArrayEquals(new char[] {'*', '0', '\u0000', '\u0000'}, charArray0);
      
      Feature feature0 = Feature.OrderedField;
      boolean boolean1 = jSONReaderScanner1.isEnabled(feature0);
      assertEquals(3, jSONReaderScanner1.matchStat);
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(3, jSONReaderScanner1.matchStat());
      assertEquals(16, jSONReaderScanner1.token());
      assertEquals('\u0000', jSONReaderScanner1.getCurrent());
      assertFalse(boolean1);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertTrue(boolean1 == boolean0);
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertArrayEquals(new char[] {'*', '0', '\u0000', '\u0000'}, charArray0);
      
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 3, 2139);
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(2139, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertNull(jSONScanner0.stringDefaultValue());
      assertFalse(jSONScanner0.isEOF());
      assertEquals('*', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      assertArrayEquals(new char[] {'*', '0', '\u0000', '\u0000'}, charArray0);
      assertNotNull(jSONScanner0);
      
      // Undeclared exception!
      try { 
        jSONReaderScanner0.decimalValue(true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.alibaba.fastjson.parser.JSONReaderScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = '6';
      charArray0[1] = '0';
      char char0 = 'c';
      charArray0[2] = 'c';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(", ");
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(',', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertNotNull(jSONReaderScanner0);
      
      Locale locale0 = new Locale(", ");
      assertEquals(", ", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals(", ", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      Locale.setDefault(locale_Category0, locale0);
      assertEquals(", ", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals(", ", locale0.toString());
      assertEquals("", locale0.getVariant());
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("2h3eXd]Y:0;4zT~]q_");
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals('2', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.pos());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertNotNull(jSONReaderScanner1);
      
      JSONReaderScanner jSONReaderScanner2 = new JSONReaderScanner(charArray0, 0);
      assertEquals(0, jSONReaderScanner2.matchStat);
      assertEquals(0, jSONReaderScanner2.matchStat());
      assertEquals('\u0000', jSONReaderScanner2.getCurrent());
      assertEquals(0, jSONReaderScanner2.pos());
      assertEquals(0, jSONReaderScanner2.token());
      assertEquals(989, jSONReaderScanner2.getFeatures());
      assertNull(jSONReaderScanner2.stringDefaultValue());
      assertTrue(jSONReaderScanner2.isEOF());
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner1));
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner0));
      assertArrayEquals(new char[] {'6', '0', 'c', '\u0000'}, charArray0);
      assertNotNull(jSONReaderScanner2);
      
      float float0 = jSONReaderScanner1.scanFloat('h');
      assertEquals(3, jSONReaderScanner1.matchStat);
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertEquals(16, jSONReaderScanner1.token());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(3, jSONReaderScanner1.matchStat());
      assertEquals('3', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.pos());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(2.0F, float0, 0.01F);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner2));
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertNotSame(jSONReaderScanner1, jSONReaderScanner2);
      
      int int0 = jSONReaderScanner1.scanInt('6');
      assertEquals((-1), jSONReaderScanner1.matchStat);
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertEquals((-1), jSONReaderScanner1.matchStat());
      assertEquals(16, jSONReaderScanner1.token());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals('3', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.pos());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(3, int0);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner2));
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertNotSame(jSONReaderScanner1, jSONReaderScanner2);
      
      JSONScanner jSONScanner0 = new JSONScanner("error", 58);
      assertEquals(0, jSONScanner0.matchStat);
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(58, jSONScanner0.getFeatures());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.pos());
      assertEquals('e', jSONScanner0.getCurrent());
      assertNotNull(jSONScanner0);
      
      long long0 = jSONScanner0.scanFieldLong(charArray0);
      assertEquals((-2), jSONScanner0.matchStat);
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(58, jSONScanner0.getFeatures());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertEquals('e', jSONScanner0.getCurrent());
      assertEquals((-2), jSONScanner0.matchStat());
      assertEquals(0L, long0);
      assertArrayEquals(new char[] {'6', '0', 'c', '\u0000'}, charArray0);
      
      // Undeclared exception!
      try { 
        jSONReaderScanner1.decimalValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.alibaba.fastjson.parser.JSONReaderScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("+*rF<y^@7f60K/km");
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals('+', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.token());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.pos());
      assertNotNull(jSONScanner0);
      
      jSONScanner0.nextIdent();
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals('*', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      assertFalse(jSONScanner0.isEOF());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(2, jSONScanner0.token());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.pos());
      
      char[] charArray0 = new char[1];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 454, 93);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(93, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertNotNull(jSONReaderScanner0);
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("+*rF<y^@7f60K/km");
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertEquals('+', jSONReaderScanner1.getCurrent());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.pos());
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertNotNull(jSONReaderScanner1);
      
      String string0 = jSONReaderScanner1.stringVal();
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertEquals('+', jSONReaderScanner1.getCurrent());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals("", string0);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertNotNull(string0);
      
      jSONReaderScanner0.features = 41;
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(41, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      
      JSONReaderScanner jSONReaderScanner2 = new JSONReaderScanner("AllowComment", (-1));
      assertEquals(0, jSONReaderScanner2.matchStat);
      assertEquals(0, jSONReaderScanner2.token());
      assertFalse(jSONReaderScanner2.isEOF());
      assertEquals(0, jSONReaderScanner2.matchStat());
      assertEquals('A', jSONReaderScanner2.getCurrent());
      assertEquals((-1), jSONReaderScanner2.getFeatures());
      assertEquals(0, jSONReaderScanner2.pos());
      assertEquals("", jSONReaderScanner2.stringDefaultValue());
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner1));
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner0));
      assertNotNull(jSONReaderScanner2);
      
      long long0 = jSONReaderScanner0.scanLong('\u0015');
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(41, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals(0L, long0);
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner1));
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner2));
      assertNotSame(jSONReaderScanner0, jSONReaderScanner1);
      assertNotSame(jSONReaderScanner0, jSONReaderScanner2);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      
      jSONReaderScanner1.nextToken();
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(2, jSONReaderScanner1.token());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertEquals('*', jSONReaderScanner1.getCurrent());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.pos());
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner2));
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertNotSame(jSONReaderScanner1, jSONReaderScanner2);
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      
      char[] charArray1 = new char[8];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = '\u0015';
      charArray1[2] = '-';
      SymbolTable symbolTable0 = new SymbolTable(93);
      assertNotNull(symbolTable0);
      
      JSONScanner jSONScanner1 = new JSONScanner(charArray1, 0, 0);
      assertEquals(0, jSONScanner1.matchStat);
      assertNull(jSONScanner1.stringDefaultValue());
      assertEquals(0, jSONScanner1.pos());
      assertEquals(0, jSONScanner1.getFeatures());
      assertTrue(jSONScanner1.isEOF());
      assertEquals('\u001A', jSONScanner1.getCurrent());
      assertEquals(0, jSONScanner1.matchStat());
      assertEquals(0, jSONScanner1.token());
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      assertArrayEquals(new char[] {'\u0015', '\u0000', '-', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray1);
      assertNotNull(jSONScanner1);
      
      jSONReaderScanner1.close();
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(2, jSONReaderScanner1.token());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertEquals('*', jSONReaderScanner1.getCurrent());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertEquals(0, jSONReaderScanner1.pos());
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner2));
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertNotSame(jSONReaderScanner1, jSONReaderScanner2);
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("50hwh<");
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals('5', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertNotNull(jSONReaderScanner0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte) (-42);
      String string0 = jSONReaderScanner0.stringVal();
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals('5', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals("", string0);
      assertNotNull(string0);
      
      byteArray0[2] = (byte)31;
      boolean boolean2 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-42), (byte)31}, byteArray0);
      
      char[] charArray0 = new char[3];
      boolean boolean3 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean3);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-42), (byte)31}, byteArray0);
      
      jSONReaderScanner0.nextToken((int) (byte)31);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(2, jSONReaderScanner0.token());
      assertEquals('h', jSONReaderScanner0.getCurrent());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      
      BigInteger bigInteger0 = jSONReaderScanner0.scanFieldBigInteger(charArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(2, jSONReaderScanner0.token());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertEquals('h', jSONReaderScanner0.getCurrent());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000'}, charArray0);
      assertNull(bigInteger0);
      
      BigDecimal bigDecimal0 = jSONReaderScanner0.decimalValue();
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(2, jSONReaderScanner0.token());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertEquals('h', jSONReaderScanner0.getCurrent());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals((byte)50, bigDecimal0.byteValue());
      assertEquals((short)50, bigDecimal0.shortValue());
      assertNotNull(bigDecimal0);
      
      Integer integer0 = new Integer((byte)31);
      assertEquals(31, (int)integer0);
      assertNotNull(integer0);
      
      char char0 = jSONReaderScanner0.next();
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(2, jSONReaderScanner0.token());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertEquals('w', jSONReaderScanner0.getCurrent());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('w', char0);
      
      HashSet<String> hashSet0 = new HashSet<String>();
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertNotNull(hashSet0);
      
      boolean boolean4 = hashSet0.add("_ak");
      assertFalse(hashSet0.isEmpty());
      assertEquals(1, hashSet0.size());
      assertTrue(boolean4);
      assertFalse(boolean4 == boolean2);
      assertTrue(boolean4 == boolean0);
      assertFalse(boolean4 == boolean1);
      assertFalse(boolean4 == boolean3);
      
      JSONScanner jSONScanner0 = new JSONScanner("new");
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals('n', jSONScanner0.getCurrent());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.token());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.matchStat());
      assertNotNull(jSONScanner0);
      
      jSONScanner0.scanStringArray(hashSet0, 'w');
      assertEquals((-1), jSONScanner0.matchStat);
      assertEquals('n', jSONScanner0.getCurrent());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.token());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.pos());
      assertEquals((-1), jSONScanner0.matchStat());
      assertFalse(hashSet0.isEmpty());
      assertEquals(1, hashSet0.size());
      
      System.setCurrentTimeMillis(938L);
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = '-';
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "com.alibaba.fastjson.util.IOUtils");
      assertFalse(boolean0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      char[] charArray1 = new char[5];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = '0';
      charArray1[1] = '-';
      charArray1[2] = '0';
      charArray1[3] = '0';
      charArray1[4] = '-';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 674, 674);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals('-', jSONReaderScanner0.getCurrent());
      assertEquals(674, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertFalse(charArray0.equals((Object)charArray1));
      assertArrayEquals(new char[] {'-', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(jSONReaderScanner0);
      
      boolean boolean1 = jSONReaderScanner0.scanBoolean('I');
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals('-', jSONReaderScanner0.getCurrent());
      assertEquals(674, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertFalse(boolean1);
      assertFalse(charArray0.equals((Object)charArray1));
      assertTrue(boolean1 == boolean0);
      assertNotSame(charArray0, charArray1);
      assertArrayEquals(new char[] {'-', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      Date date0 = jSONReaderScanner0.scanDate('\\');
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals('-', jSONReaderScanner0.getCurrent());
      assertEquals(674, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertFalse(charArray0.equals((Object)charArray1));
      assertNotSame(charArray0, charArray1);
      assertArrayEquals(new char[] {'-', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNull(date0);
      
      long long0 = jSONReaderScanner0.scanLong('&');
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals('-', jSONReaderScanner0.getCurrent());
      assertEquals(674, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0L, long0);
      assertFalse(charArray0.equals((Object)charArray1));
      assertNotSame(charArray0, charArray1);
      assertArrayEquals(new char[] {'-', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      jSONReaderScanner0.putChar('I');
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals('-', jSONReaderScanner0.getCurrent());
      assertEquals(674, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertFalse(charArray0.equals((Object)charArray1));
      assertNotSame(charArray0, charArray1);
      assertArrayEquals(new char[] {'-', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = '-';
      charArray0[1] = '0';
      char char0 = 'c';
      charArray0[2] = 'c';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 311, (-214748364));
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals("", jSONReaderScanner0.stringDefaultValue());
      assertEquals('-', jSONReaderScanner0.getCurrent());
      assertEquals((-214748364), jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertArrayEquals(new char[] {'-', '0', 'c', '\u0000', '\u0000'}, charArray0);
      assertNotNull(jSONReaderScanner0);
      
      int int0 = jSONReaderScanner0.scanInt('~');
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals("", jSONReaderScanner0.stringDefaultValue());
      assertEquals('-', jSONReaderScanner0.getCurrent());
      assertEquals((-214748364), jSONReaderScanner0.getFeatures());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(0, int0);
      assertArrayEquals(new char[] {'-', '0', 'c', '\u0000', '\u0000'}, charArray0);
      
      String string0 = jSONReaderScanner0.scanFieldString(charArray0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals("", jSONReaderScanner0.stringDefaultValue());
      assertEquals('-', jSONReaderScanner0.getCurrent());
      assertEquals((-214748364), jSONReaderScanner0.getFeatures());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals("", string0);
      assertArrayEquals(new char[] {'-', '0', 'c', '\u0000', '\u0000'}, charArray0);
      assertNotNull(string0);
      
      jSONReaderScanner0.putChar('L');
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals("", jSONReaderScanner0.stringDefaultValue());
      assertEquals('-', jSONReaderScanner0.getCurrent());
      assertEquals((-214748364), jSONReaderScanner0.getFeatures());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertArrayEquals(new char[] {'-', '0', 'c', '\u0000', '\u0000'}, charArray0);
      
      jSONReaderScanner0.putChar('E');
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals("", jSONReaderScanner0.stringDefaultValue());
      assertEquals('-', jSONReaderScanner0.getCurrent());
      assertEquals((-214748364), jSONReaderScanner0.getFeatures());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertArrayEquals(new char[] {'-', '0', 'c', '\u0000', '\u0000'}, charArray0);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      boolean boolean1 = jSONReaderScanner0.scanBoolean('l');
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals("", jSONReaderScanner0.stringDefaultValue());
      assertEquals('-', jSONReaderScanner0.getCurrent());
      assertEquals((-214748364), jSONReaderScanner0.getFeatures());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new char[] {'-', '0', 'c', '\u0000', '\u0000'}, charArray0);
      
      long long0 = jSONReaderScanner0.longValue();
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals("", jSONReaderScanner0.stringDefaultValue());
      assertEquals('-', jSONReaderScanner0.getCurrent());
      assertEquals((-214748364), jSONReaderScanner0.getFeatures());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(0L, long0);
      assertArrayEquals(new char[] {'-', '0', 'c', '\u0000', '\u0000'}, charArray0);
      
      jSONReaderScanner0.nextToken();
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals('c', jSONReaderScanner0.getCurrent());
      assertEquals(2, jSONReaderScanner0.token());
      assertEquals("", jSONReaderScanner0.stringDefaultValue());
      assertEquals((-214748364), jSONReaderScanner0.getFeatures());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertArrayEquals(new char[] {'-', '0', 'c', '\u0000', '\u0000'}, charArray0);
      
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextTokenWithColon();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - c, info : 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      char[] charArray0 = new char[0];
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("undefined");
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals('u', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertNotNull(jSONReaderScanner0);
      
      SymbolTable symbolTable0 = new SymbolTable(3996);
      assertNotNull(symbolTable0);
      
      String string0 = jSONReaderScanner0.scanString('E');
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals('u', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertNull(string0);
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(charArray0, 91);
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertEquals('\u0000', jSONReaderScanner1.getCurrent());
      assertTrue(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.pos());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertArrayEquals(new char[] {}, charArray0);
      assertNotNull(jSONReaderScanner1);
      
      jSONReaderScanner0.nextToken((-4045));
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(23, jSONReaderScanner0.token());
      assertEquals('\u001A', jSONReaderScanner0.getCurrent());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner1));
      assertNotSame(jSONReaderScanner0, jSONReaderScanner1);
      
      JSONReaderScanner jSONReaderScanner2 = new JSONReaderScanner("NX4", 3996);
      assertEquals(0, jSONReaderScanner2.matchStat);
      assertEquals('N', jSONReaderScanner2.getCurrent());
      assertEquals(0, jSONReaderScanner2.pos());
      assertNull(jSONReaderScanner2.stringDefaultValue());
      assertEquals(0, jSONReaderScanner2.token());
      assertFalse(jSONReaderScanner2.isEOF());
      assertEquals(3996, jSONReaderScanner2.getFeatures());
      assertEquals(0, jSONReaderScanner2.matchStat());
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner0));
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner1));
      assertNotNull(jSONReaderScanner2);
      
      jSONReaderScanner1.close();
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertEquals('\u0000', jSONReaderScanner1.getCurrent());
      assertTrue(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.pos());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner2));
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertNotSame(jSONReaderScanner1, jSONReaderScanner2);
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertArrayEquals(new char[] {}, charArray0);
      
      JSONScanner jSONScanner0 = new JSONScanner("invalid", 857);
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(0, jSONScanner0.token());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals('i', jSONScanner0.getCurrent());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(857, jSONScanner0.getFeatures());
      assertNotNull(jSONScanner0);
      
      char char0 = jSONScanner0.next();
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(0, jSONScanner0.token());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.matchStat());
      assertFalse(jSONScanner0.isEOF());
      assertEquals('n', jSONScanner0.getCurrent());
      assertEquals(857, jSONScanner0.getFeatures());
      assertEquals('n', char0);
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("e_Ak");
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals('e', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertNotNull(jSONReaderScanner0);
      
      StringReader stringReader0 = new StringReader("e_Ak");
      assertNotNull(stringReader0);
      
      boolean boolean0 = stringReader0.markSupported();
      assertTrue(boolean0);
      
      TimeZone timeZone0 = jSONReaderScanner0.getTimeZone();
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals('e', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      jSONReaderScanner0.nextToken(13);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals('_', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(1, jSONReaderScanner0.token());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      
      Locale locale0 = Locale.forLanguageTag("e_Ak");
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertNotNull(locale0);
      
      String string0 = locale0.getExtension('x');
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertNull(string0);
      
      Locale locale1 = Locale.CHINESE;
      assertEquals("zho", locale1.getISO3Language());
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.getISO3Country());
      assertEquals("zh", locale1.getLanguage());
      assertEquals("", locale1.getCountry());
      assertEquals("zh", locale1.toString());
      assertFalse(locale1.equals((Object)locale0));
      assertNotSame(locale1, locale0);
      assertNotNull(locale1);
      
      String string1 = locale1.getDisplayLanguage(locale0);
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("zho", locale1.getISO3Language());
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.getISO3Country());
      assertEquals("zh", locale1.getLanguage());
      assertEquals("", locale1.getCountry());
      assertEquals("zh", locale1.toString());
      assertEquals("Chinese", string1);
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(locale1.equals((Object)locale0));
      assertNotSame(locale0, locale1);
      assertNotSame(locale1, locale0);
      assertNotNull(string1);
      
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      Locale.setDefault(locale_Category0, locale0);
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertFalse(locale0.equals((Object)locale1));
      assertNotSame(locale0, locale1);
      
      char char0 = jSONReaderScanner0.next();
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(1, jSONReaderScanner0.token());
      assertEquals('A', jSONReaderScanner0.getCurrent());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals('A', char0);
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("@");
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals('@', jSONReaderScanner1.getCurrent());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertEquals(0, jSONReaderScanner1.pos());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertNotNull(jSONReaderScanner1);
      
      boolean boolean1 = jSONReaderScanner1.scanBoolean('S');
      assertEquals((-1), jSONReaderScanner1.matchStat);
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals('@', jSONReaderScanner1.getCurrent());
      assertEquals((-1), jSONReaderScanner1.matchStat());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertEquals(0, jSONReaderScanner1.pos());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertFalse(boolean1);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertFalse(boolean1 == boolean0);
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      
      JSONScanner jSONScanner0 = new JSONScanner("illegal.char");
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals('i', jSONScanner0.getCurrent());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.pos());
      assertNull(jSONScanner0.stringDefaultValue());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.token());
      assertNotNull(jSONScanner0);
      
      char char1 = jSONReaderScanner0.next();
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(1, jSONReaderScanner0.token());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals('k', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals('k', char1);
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner1));
      assertFalse(char1 == char0);
      assertNotSame(jSONReaderScanner0, jSONReaderScanner1);
      
      String string2 = jSONScanner0.stringDefaultValue();
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals('i', jSONScanner0.getCurrent());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.pos());
      assertNull(jSONScanner0.stringDefaultValue());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.token());
      assertNull(string2);
      
      JSONReaderScanner jSONReaderScanner2 = new JSONReaderScanner("illegal.char");
      assertEquals(0, jSONReaderScanner2.matchStat);
      assertEquals(0, jSONReaderScanner2.token());
      assertEquals(0, jSONReaderScanner2.matchStat());
      assertEquals('i', jSONReaderScanner2.getCurrent());
      assertFalse(jSONReaderScanner2.isEOF());
      assertEquals(989, jSONReaderScanner2.getFeatures());
      assertEquals(0, jSONReaderScanner2.pos());
      assertNull(jSONReaderScanner2.stringDefaultValue());
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner0));
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner1));
      assertNotNull(jSONReaderScanner2);
      
      jSONReaderScanner2.nextToken();
      assertEquals(0, jSONReaderScanner2.matchStat);
      assertEquals(1, jSONReaderScanner2.token());
      assertEquals(0, jSONReaderScanner2.matchStat());
      assertEquals('l', jSONReaderScanner2.getCurrent());
      assertFalse(jSONReaderScanner2.isEOF());
      assertEquals(989, jSONReaderScanner2.getFeatures());
      assertEquals(0, jSONReaderScanner2.pos());
      assertNull(jSONReaderScanner2.stringDefaultValue());
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner0));
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner1));
      assertNotSame(jSONReaderScanner2, jSONReaderScanner0);
      assertNotSame(jSONReaderScanner2, jSONReaderScanner1);
      
      double double0 = Locale.LanguageRange.MIN_WEIGHT;
      assertEquals(0.0, double0, 0.01);
      
      String string3 = jSONReaderScanner0.subString(2538, 1694);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(1, jSONReaderScanner0.token());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals('k', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner2));
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner1));
      assertFalse(string3.equals((Object)string1));
      assertNotSame(jSONReaderScanner0, jSONReaderScanner2);
      assertNotSame(jSONReaderScanner0, jSONReaderScanner1);
      assertNotNull(string3);
      
      boolean boolean2 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      SymbolTable symbolTable0 = new SymbolTable(69);
      assertNotNull(symbolTable0);
      
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanSymbol(symbolTable0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("e_Ak");
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals('e', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertNotNull(jSONReaderScanner0);
      
      char[] charArray0 = new char[0];
      StringReader stringReader0 = new StringReader("e_Ak");
      assertNotNull(stringReader0);
      
      stringReader0.reset();
      boolean boolean1 = stringReader0.markSupported();
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      UUID uUID0 = jSONReaderScanner0.scanFieldUUID(charArray0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals('e', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertArrayEquals(new char[] {}, charArray0);
      assertNull(uUID0);
      
      TimeZone timeZone0 = jSONReaderScanner0.getTimeZone();
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals('e', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      jSONReaderScanner0.nextToken((-1));
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals(1, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals('_', jSONReaderScanner0.getCurrent());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("e_Ak");
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals('e', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.pos());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertNotNull(jSONReaderScanner1);
      
      BigInteger bigInteger0 = jSONReaderScanner1.scanFieldBigInteger(charArray0);
      assertEquals((-1), jSONReaderScanner1.matchStat);
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals('e', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.pos());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals((-1), jSONReaderScanner1.matchStat());
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertArrayEquals(new char[] {}, charArray0);
      assertNull(bigInteger0);
      
      boolean boolean2 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      String string0 = jSONReaderScanner1.stringVal();
      assertEquals((-1), jSONReaderScanner1.matchStat);
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals('e', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.pos());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals((-1), jSONReaderScanner1.matchStat());
      assertEquals("", string0);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertNotNull(string0);
      
      JSONScanner jSONScanner0 = new JSONScanner("", 84);
      assertEquals(0, jSONScanner0.matchStat);
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.token());
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      assertTrue(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(84, jSONScanner0.getFeatures());
      assertNotNull(jSONScanner0);
      
      float[] floatArray0 = jSONScanner0.scanFieldFloatArray(charArray0);
      assertEquals((-2), jSONScanner0.matchStat);
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.token());
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertTrue(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(84, jSONScanner0.getFeatures());
      assertEquals((-2), jSONScanner0.matchStat());
      assertArrayEquals(new char[] {}, charArray0);
      assertNull(floatArray0);
      
      boolean boolean3 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "D9J~~=xk2:@");
      assertFalse(boolean3);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
      
      JSONReaderScanner jSONReaderScanner2 = new JSONReaderScanner("e_Ak");
      assertEquals(0, jSONReaderScanner2.matchStat);
      assertEquals(0, jSONReaderScanner2.token());
      assertFalse(jSONReaderScanner2.isEOF());
      assertEquals(989, jSONReaderScanner2.getFeatures());
      assertEquals(0, jSONReaderScanner2.matchStat());
      assertEquals(0, jSONReaderScanner2.pos());
      assertNull(jSONReaderScanner2.stringDefaultValue());
      assertEquals('e', jSONReaderScanner2.getCurrent());
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner1));
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner0));
      assertNotNull(jSONReaderScanner2);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      boolean boolean4 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean4);
      assertTrue(boolean4 == boolean3);
      assertFalse(boolean4 == boolean2);
      assertFalse(boolean4 == boolean1);
      assertTrue(boolean4 == boolean0);
      
      jSONReaderScanner2.nextToken();
      assertEquals(0, jSONReaderScanner2.matchStat);
      assertEquals(1, jSONReaderScanner2.token());
      assertEquals('_', jSONReaderScanner2.getCurrent());
      assertFalse(jSONReaderScanner2.isEOF());
      assertEquals(989, jSONReaderScanner2.getFeatures());
      assertEquals(0, jSONReaderScanner2.matchStat());
      assertEquals(0, jSONReaderScanner2.pos());
      assertNull(jSONReaderScanner2.stringDefaultValue());
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner1));
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner0));
      assertNotSame(jSONReaderScanner2, jSONReaderScanner1);
      assertNotSame(jSONReaderScanner2, jSONReaderScanner0);
      
      boolean boolean5 = jSONReaderScanner0.matchField(charArray0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals(1, jSONReaderScanner0.token());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(1, jSONReaderScanner0.pos());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals('A', jSONReaderScanner0.getCurrent());
      assertTrue(boolean5);
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner1));
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner2));
      assertTrue(boolean5 == boolean2);
      assertFalse(boolean5 == boolean0);
      assertFalse(boolean5 == boolean4);
      assertTrue(boolean5 == boolean1);
      assertFalse(boolean5 == boolean3);
      assertNotSame(jSONReaderScanner0, jSONReaderScanner1);
      assertNotSame(jSONReaderScanner0, jSONReaderScanner2);
      assertArrayEquals(new char[] {}, charArray0);
      
      jSONReaderScanner1.nextToken();
      assertEquals((-1), jSONReaderScanner1.matchStat);
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertEquals('_', jSONReaderScanner1.getCurrent());
      assertEquals(1, jSONReaderScanner1.token());
      assertEquals(0, jSONReaderScanner1.pos());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals((-1), jSONReaderScanner1.matchStat());
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner2));
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertNotSame(jSONReaderScanner1, jSONReaderScanner2);
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      
      double double0 = Locale.LanguageRange.MIN_WEIGHT;
      assertEquals(0.0, double0, 0.01);
      
      String string1 = jSONReaderScanner1.subString(84, 962);
      assertEquals((-1), jSONReaderScanner1.matchStat);
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertEquals('_', jSONReaderScanner1.getCurrent());
      assertEquals(1, jSONReaderScanner1.token());
      assertEquals(0, jSONReaderScanner1.pos());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals((-1), jSONReaderScanner1.matchStat());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner2));
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertNotSame(jSONReaderScanner1, jSONReaderScanner2);
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertNotNull(string1);
      
      SymbolTable symbolTable0 = new SymbolTable(8056);
      assertNotNull(symbolTable0);
      
      // Undeclared exception!
      try { 
        jSONReaderScanner1.scanSymbol(symbolTable0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      char[] charArray0 = new char[0];
      StringReader stringReader0 = new StringReader("44Tk");
      assertNotNull(stringReader0);
      
      stringReader0.reset();
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      int int0 = 805;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("44Tk");
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('4', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertNotNull(jSONReaderScanner0);
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("44Tk", 12);
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals('4', jSONReaderScanner1.getCurrent());
      assertEquals(12, jSONReaderScanner1.getFeatures());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertNotNull(jSONReaderScanner1);
      
      int int1 = Calendar.LONG;
      assertEquals(2, int1);
      assertFalse(int1 == int0);
      
      long long0 = jSONReaderScanner1.scanFieldSymbol(charArray0);
      assertEquals((-1), jSONReaderScanner1.matchStat);
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals('4', jSONReaderScanner1.getCurrent());
      assertEquals(12, jSONReaderScanner1.getFeatures());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals((-1), jSONReaderScanner1.matchStat());
      assertEquals(0L, long0);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertArrayEquals(new char[] {}, charArray0);
      
      jSONReaderScanner0.nextToken(12);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(2, jSONReaderScanner0.token());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('T', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner1));
      assertNotSame(jSONReaderScanner0, jSONReaderScanner1);
      
      BigInteger bigInteger0 = jSONReaderScanner1.scanFieldBigInteger(charArray0);
      assertEquals((-1), jSONReaderScanner1.matchStat);
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals('4', jSONReaderScanner1.getCurrent());
      assertEquals(12, jSONReaderScanner1.getFeatures());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals((-1), jSONReaderScanner1.matchStat());
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertArrayEquals(new char[] {}, charArray0);
      assertNull(bigInteger0);
      
      int int2 = Calendar.AM;
      assertEquals(0, int2);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      
      JSONReaderScanner jSONReaderScanner2 = new JSONReaderScanner("44Tk");
      assertEquals(0, jSONReaderScanner2.matchStat);
      assertNull(jSONReaderScanner2.stringDefaultValue());
      assertEquals(0, jSONReaderScanner2.matchStat());
      assertFalse(jSONReaderScanner2.isEOF());
      assertEquals(989, jSONReaderScanner2.getFeatures());
      assertEquals('4', jSONReaderScanner2.getCurrent());
      assertEquals(0, jSONReaderScanner2.pos());
      assertEquals(0, jSONReaderScanner2.token());
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner1));
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner0));
      assertNotNull(jSONReaderScanner2);
      
      float float0 = jSONReaderScanner2.scanFloat('r');
      assertEquals((-1), jSONReaderScanner2.matchStat);
      assertNull(jSONReaderScanner2.stringDefaultValue());
      assertFalse(jSONReaderScanner2.isEOF());
      assertEquals(989, jSONReaderScanner2.getFeatures());
      assertEquals((-1), jSONReaderScanner2.matchStat());
      assertEquals('4', jSONReaderScanner2.getCurrent());
      assertEquals(0, jSONReaderScanner2.pos());
      assertEquals(0, jSONReaderScanner2.token());
      assertEquals(44.0F, float0, 0.01F);
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner1));
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner0));
      assertNotSame(jSONReaderScanner2, jSONReaderScanner1);
      assertNotSame(jSONReaderScanner2, jSONReaderScanner0);
      
      boolean boolean2 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      String string0 = jSONReaderScanner0.stringVal();
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(2, jSONReaderScanner0.token());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('T', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals("4T", string0);
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner1));
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner2));
      assertNotSame(jSONReaderScanner0, jSONReaderScanner1);
      assertNotSame(jSONReaderScanner0, jSONReaderScanner2);
      assertNotNull(string0);
      
      boolean boolean3 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean3);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      
      int int3 = 9;
      SymbolTable symbolTable0 = new SymbolTable(9);
      assertNotNull(symbolTable0);
      
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner(charArray0, 65);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = '-';
      charArray0[1] = '0';
      String string0 = "cvw";
      JSONScanner jSONScanner0 = new JSONScanner("cvw");
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals('c', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(989, jSONScanner0.getFeatures());
      assertFalse(jSONScanner0.isEOF());
      assertNotNull(jSONScanner0);
      
      jSONScanner0.skipWhitespace();
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals('c', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(989, jSONScanner0.getFeatures());
      assertFalse(jSONScanner0.isEOF());
      
      JSONScanner jSONScanner1 = new JSONScanner("}uKev=$gqtTy98", 0);
      assertEquals(0, jSONScanner1.matchStat);
      assertEquals(0, jSONScanner1.pos());
      assertEquals(0, jSONScanner1.getFeatures());
      assertEquals(0, jSONScanner1.matchStat());
      assertEquals('}', jSONScanner1.getCurrent());
      assertNull(jSONScanner1.stringDefaultValue());
      assertFalse(jSONScanner1.isEOF());
      assertEquals(0, jSONScanner1.token());
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      assertNotNull(jSONScanner1);
      
      jSONScanner1.nextToken();
      assertEquals(0, jSONScanner1.matchStat);
      assertEquals('u', jSONScanner1.getCurrent());
      assertEquals(0, jSONScanner1.pos());
      assertEquals(0, jSONScanner1.getFeatures());
      assertEquals(0, jSONScanner1.matchStat());
      assertEquals(13, jSONScanner1.token());
      assertNull(jSONScanner1.stringDefaultValue());
      assertFalse(jSONScanner1.isEOF());
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      assertNotSame(jSONScanner1, jSONScanner0);
      
      SymbolTable symbolTable0 = null;
      try {
        symbolTable0 = new SymbolTable(0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1185263
         //
         verifyException("com.alibaba.fastjson.parser.SymbolTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("pyr//|=j.hazE\"");
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('p', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNotNull(jSONReaderScanner0);
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("Sp<ISO8601DateFormat");
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertEquals('S', jSONReaderScanner1.getCurrent());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(0, jSONReaderScanner1.token());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertEquals(0, jSONReaderScanner1.pos());
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertNotNull(jSONReaderScanner1);
      
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      assertFalse(boolean0);
      
      jSONReaderScanner0.nextToken((int) (byte)4);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(1, jSONReaderScanner0.token());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals('y', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner1));
      assertNotSame(jSONReaderScanner0, jSONReaderScanner1);
      
      JSONReaderScanner jSONReaderScanner2 = new JSONReaderScanner("illegal identifier : ");
      assertEquals(0, jSONReaderScanner2.matchStat);
      assertEquals(0, jSONReaderScanner2.pos());
      assertEquals(0, jSONReaderScanner2.token());
      assertEquals(989, jSONReaderScanner2.getFeatures());
      assertNull(jSONReaderScanner2.stringDefaultValue());
      assertFalse(jSONReaderScanner2.isEOF());
      assertEquals('i', jSONReaderScanner2.getCurrent());
      assertEquals(0, jSONReaderScanner2.matchStat());
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner1));
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner0));
      assertNotNull(jSONReaderScanner2);
      
      jSONReaderScanner1.nextToken(1474);
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(18, jSONReaderScanner1.token());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals('<', jSONReaderScanner1.getCurrent());
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner2));
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertNotSame(jSONReaderScanner1, jSONReaderScanner2);
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      
      char[] charArray0 = new char[4];
      charArray0[1] = 'N';
      charArray0[2] = '_';
      charArray0[3] = ')';
      JSONReaderScanner jSONReaderScanner3 = new JSONReaderScanner(charArray0, 1474, 12);
      assertEquals(0, jSONReaderScanner3.matchStat);
      assertEquals(0, jSONReaderScanner3.token());
      assertEquals('\u0000', jSONReaderScanner3.getCurrent());
      assertFalse(jSONReaderScanner3.isEOF());
      assertEquals(0, jSONReaderScanner3.matchStat());
      assertEquals(12, jSONReaderScanner3.getFeatures());
      assertNull(jSONReaderScanner3.stringDefaultValue());
      assertEquals(0, jSONReaderScanner3.pos());
      assertFalse(jSONReaderScanner3.equals((Object)jSONReaderScanner0));
      assertFalse(jSONReaderScanner3.equals((Object)jSONReaderScanner2));
      assertFalse(jSONReaderScanner3.equals((Object)jSONReaderScanner1));
      assertArrayEquals(new char[] {'\u0000', 'N', '_', ')'}, charArray0);
      assertNotNull(jSONReaderScanner3);
      
      boolean boolean1 = jSONReaderScanner2.scanBoolean('N');
      assertEquals((-1), jSONReaderScanner2.matchStat);
      assertEquals(0, jSONReaderScanner2.pos());
      assertEquals(0, jSONReaderScanner2.token());
      assertEquals(989, jSONReaderScanner2.getFeatures());
      assertNull(jSONReaderScanner2.stringDefaultValue());
      assertFalse(jSONReaderScanner2.isEOF());
      assertEquals((-1), jSONReaderScanner2.matchStat());
      assertEquals('i', jSONReaderScanner2.getCurrent());
      assertFalse(boolean1);
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner1));
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner3));
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner0));
      assertTrue(boolean1 == boolean0);
      assertNotSame(jSONReaderScanner2, jSONReaderScanner1);
      assertNotSame(jSONReaderScanner2, jSONReaderScanner3);
      assertNotSame(jSONReaderScanner2, jSONReaderScanner0);
      
      boolean boolean2 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "%|");
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      JSONReaderScanner jSONReaderScanner4 = new JSONReaderScanner("-~)}^|)ypmxl0#|}0Q", (-67));
      assertEquals(0, jSONReaderScanner4.matchStat);
      assertEquals(0, jSONReaderScanner4.token());
      assertEquals("", jSONReaderScanner4.stringDefaultValue());
      assertEquals((-67), jSONReaderScanner4.getFeatures());
      assertEquals(0, jSONReaderScanner4.pos());
      assertEquals('-', jSONReaderScanner4.getCurrent());
      assertEquals(0, jSONReaderScanner4.matchStat());
      assertFalse(jSONReaderScanner4.isEOF());
      assertFalse(jSONReaderScanner4.equals((Object)jSONReaderScanner1));
      assertFalse(jSONReaderScanner4.equals((Object)jSONReaderScanner3));
      assertFalse(jSONReaderScanner4.equals((Object)jSONReaderScanner2));
      assertFalse(jSONReaderScanner4.equals((Object)jSONReaderScanner0));
      assertNotNull(jSONReaderScanner4);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      jSONReaderScanner3.scanNumber();
      assertEquals(0, jSONReaderScanner3.matchStat);
      assertEquals('\u0000', jSONReaderScanner3.getCurrent());
      assertFalse(jSONReaderScanner3.isEOF());
      assertEquals(0, jSONReaderScanner3.matchStat());
      assertEquals(12, jSONReaderScanner3.getFeatures());
      assertEquals(2, jSONReaderScanner3.token());
      assertNull(jSONReaderScanner3.stringDefaultValue());
      assertEquals(0, jSONReaderScanner3.pos());
      assertFalse(jSONReaderScanner3.equals((Object)jSONReaderScanner0));
      assertFalse(jSONReaderScanner3.equals((Object)jSONReaderScanner4));
      assertFalse(jSONReaderScanner3.equals((Object)jSONReaderScanner2));
      assertFalse(jSONReaderScanner3.equals((Object)jSONReaderScanner1));
      assertNotSame(jSONReaderScanner3, jSONReaderScanner0);
      assertNotSame(jSONReaderScanner3, jSONReaderScanner4);
      assertNotSame(jSONReaderScanner3, jSONReaderScanner2);
      assertNotSame(jSONReaderScanner3, jSONReaderScanner1);
      assertArrayEquals(new char[] {'\u0000', 'N', '_', ')'}, charArray0);
      
      double double0 = jSONReaderScanner4.scanDouble('N');
      assertEquals((-1), jSONReaderScanner4.matchStat);
      assertEquals(0, jSONReaderScanner4.token());
      assertEquals("", jSONReaderScanner4.stringDefaultValue());
      assertEquals((-67), jSONReaderScanner4.getFeatures());
      assertEquals(0, jSONReaderScanner4.pos());
      assertEquals('-', jSONReaderScanner4.getCurrent());
      assertEquals((-1), jSONReaderScanner4.matchStat());
      assertFalse(jSONReaderScanner4.isEOF());
      assertEquals(0.0, double0, 0.01);
      assertFalse(jSONReaderScanner4.equals((Object)jSONReaderScanner1));
      assertFalse(jSONReaderScanner4.equals((Object)jSONReaderScanner3));
      assertFalse(jSONReaderScanner4.equals((Object)jSONReaderScanner2));
      assertFalse(jSONReaderScanner4.equals((Object)jSONReaderScanner0));
      assertNotSame(jSONReaderScanner4, jSONReaderScanner1);
      assertNotSame(jSONReaderScanner4, jSONReaderScanner3);
      assertNotSame(jSONReaderScanner4, jSONReaderScanner2);
      assertNotSame(jSONReaderScanner4, jSONReaderScanner0);
      
      jSONReaderScanner4.resetStringPosition();
      assertEquals((-1), jSONReaderScanner4.matchStat);
      assertEquals(0, jSONReaderScanner4.token());
      assertEquals("", jSONReaderScanner4.stringDefaultValue());
      assertEquals((-67), jSONReaderScanner4.getFeatures());
      assertEquals(0, jSONReaderScanner4.pos());
      assertEquals('-', jSONReaderScanner4.getCurrent());
      assertEquals((-1), jSONReaderScanner4.matchStat());
      assertFalse(jSONReaderScanner4.isEOF());
      assertFalse(jSONReaderScanner4.equals((Object)jSONReaderScanner1));
      assertFalse(jSONReaderScanner4.equals((Object)jSONReaderScanner3));
      assertFalse(jSONReaderScanner4.equals((Object)jSONReaderScanner2));
      assertFalse(jSONReaderScanner4.equals((Object)jSONReaderScanner0));
      assertNotSame(jSONReaderScanner4, jSONReaderScanner1);
      assertNotSame(jSONReaderScanner4, jSONReaderScanner3);
      assertNotSame(jSONReaderScanner4, jSONReaderScanner2);
      assertNotSame(jSONReaderScanner4, jSONReaderScanner0);
      
      jSONReaderScanner3.nextToken();
      assertEquals(0, jSONReaderScanner3.matchStat);
      assertEquals('_', jSONReaderScanner3.getCurrent());
      assertFalse(jSONReaderScanner3.isEOF());
      assertEquals(0, jSONReaderScanner3.matchStat());
      assertEquals(12, jSONReaderScanner3.getFeatures());
      assertEquals(18, jSONReaderScanner3.token());
      assertEquals(1, jSONReaderScanner3.pos());
      assertNull(jSONReaderScanner3.stringDefaultValue());
      assertFalse(jSONReaderScanner3.equals((Object)jSONReaderScanner0));
      assertFalse(jSONReaderScanner3.equals((Object)jSONReaderScanner4));
      assertFalse(jSONReaderScanner3.equals((Object)jSONReaderScanner2));
      assertFalse(jSONReaderScanner3.equals((Object)jSONReaderScanner1));
      assertNotSame(jSONReaderScanner3, jSONReaderScanner0);
      assertNotSame(jSONReaderScanner3, jSONReaderScanner4);
      assertNotSame(jSONReaderScanner3, jSONReaderScanner2);
      assertNotSame(jSONReaderScanner3, jSONReaderScanner1);
      assertArrayEquals(new char[] {'\u0000', 'N', '_', ')'}, charArray0);
      
      Calendar calendar0 = jSONReaderScanner4.getCalendar();
      assertEquals((-1), jSONReaderScanner4.matchStat);
      assertEquals(0, jSONReaderScanner4.token());
      assertEquals("", jSONReaderScanner4.stringDefaultValue());
      assertEquals((-67), jSONReaderScanner4.getFeatures());
      assertEquals(0, jSONReaderScanner4.pos());
      assertEquals('-', jSONReaderScanner4.getCurrent());
      assertEquals((-1), jSONReaderScanner4.matchStat());
      assertFalse(jSONReaderScanner4.isEOF());
      assertFalse(jSONReaderScanner4.equals((Object)jSONReaderScanner1));
      assertFalse(jSONReaderScanner4.equals((Object)jSONReaderScanner3));
      assertFalse(jSONReaderScanner4.equals((Object)jSONReaderScanner2));
      assertFalse(jSONReaderScanner4.equals((Object)jSONReaderScanner0));
      assertNotSame(jSONReaderScanner4, jSONReaderScanner1);
      assertNotSame(jSONReaderScanner4, jSONReaderScanner3);
      assertNotSame(jSONReaderScanner4, jSONReaderScanner2);
      assertNotSame(jSONReaderScanner4, jSONReaderScanner0);
      assertNull(calendar0);
      
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextTokenWithColon((int) (byte)4);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - y, info : 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("44Tk");
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('4', jSONReaderScanner0.getCurrent());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertNotNull(jSONReaderScanner0);
      
      char[] charArray0 = new char[0];
      StringReader stringReader0 = new StringReader("44Tk");
      assertNotNull(stringReader0);
      
      jSONReaderScanner0.nextToken((int) (byte)4);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('T', jSONReaderScanner0.getCurrent());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(2, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      
      char char0 = 'b';
      float[][] floatArray0 = jSONReaderScanner0.scanFieldFloatArray2(charArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('T', jSONReaderScanner0.getCurrent());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(2, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertArrayEquals(new char[] {}, charArray0);
      assertNull(floatArray0);
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("illegal identifier : ");
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertEquals('i', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertEquals(0, jSONReaderScanner1.token());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(0, jSONReaderScanner1.pos());
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertNotNull(jSONReaderScanner1);
      
      int int0 = 2332;
      SymbolTable symbolTable0 = null;
      try {
        symbolTable0 = new SymbolTable(0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1185263
         //
         verifyException("com.alibaba.fastjson.parser.SymbolTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("pyr//|=j.hazE\"");
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('p', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertNotNull(jSONReaderScanner0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      char[] charArray0 = new char[2];
      jSONReaderScanner0.matchStat = (int) 'U';
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(85, jSONReaderScanner0.matchStat());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('p', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      
      charArray0[1] = 'B';
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(charArray0, 15);
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals('\u0000', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.pos());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertEquals(0, jSONReaderScanner1.token());
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertArrayEquals(new char[] {'\u0000', 'B'}, charArray0);
      assertNotNull(jSONReaderScanner1);
      
      JSONReaderScanner jSONReaderScanner2 = new JSONReaderScanner("fastjson.serializerFeatures.MapSortField", (-1357));
      assertEquals(0, jSONReaderScanner2.matchStat);
      assertEquals(0, jSONReaderScanner2.matchStat());
      assertEquals(0, jSONReaderScanner2.pos());
      assertEquals('f', jSONReaderScanner2.getCurrent());
      assertEquals("", jSONReaderScanner2.stringDefaultValue());
      assertEquals(0, jSONReaderScanner2.token());
      assertEquals((-1357), jSONReaderScanner2.getFeatures());
      assertFalse(jSONReaderScanner2.isEOF());
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner0));
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner1));
      assertNotNull(jSONReaderScanner2);
      
      float[] floatArray0 = jSONReaderScanner0.scanFieldFloatArray(charArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('p', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner2));
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner1));
      assertNotSame(jSONReaderScanner0, jSONReaderScanner2);
      assertNotSame(jSONReaderScanner0, jSONReaderScanner1);
      assertArrayEquals(new char[] {'\u0000', 'B'}, charArray0);
      assertNull(floatArray0);
      
      Locale locale0 = Locale.JAPAN;
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("JP", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("ja_JP", locale0.toString());
      assertNotNull(locale0);
      
      JSONReaderScanner jSONReaderScanner3 = new JSONReaderScanner(charArray0, 8192);
      assertEquals(0, jSONReaderScanner3.matchStat);
      assertNull(jSONReaderScanner3.stringDefaultValue());
      assertEquals(0, jSONReaderScanner3.matchStat());
      assertEquals(989, jSONReaderScanner3.getFeatures());
      assertEquals(0, jSONReaderScanner3.pos());
      assertFalse(jSONReaderScanner3.isEOF());
      assertEquals(0, jSONReaderScanner3.token());
      assertEquals('\u0000', jSONReaderScanner3.getCurrent());
      assertFalse(jSONReaderScanner3.equals((Object)jSONReaderScanner1));
      assertFalse(jSONReaderScanner3.equals((Object)jSONReaderScanner2));
      assertFalse(jSONReaderScanner3.equals((Object)jSONReaderScanner0));
      assertArrayEquals(new char[] {'\u0000', 'B'}, charArray0);
      assertNotNull(jSONReaderScanner3);
      
      boolean boolean1 = jSONReaderScanner0.isBlankInput();
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('p', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertFalse(boolean1);
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner3));
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner2));
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner1));
      assertFalse(boolean1 == boolean0);
      assertNotSame(jSONReaderScanner0, jSONReaderScanner3);
      assertNotSame(jSONReaderScanner0, jSONReaderScanner2);
      assertNotSame(jSONReaderScanner0, jSONReaderScanner1);
      
      boolean boolean2 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      JSONReaderScanner jSONReaderScanner4 = new JSONReaderScanner("fals^e");
      assertEquals(0, jSONReaderScanner4.matchStat);
      assertEquals(0, jSONReaderScanner4.matchStat());
      assertEquals(989, jSONReaderScanner4.getFeatures());
      assertEquals('f', jSONReaderScanner4.getCurrent());
      assertEquals(0, jSONReaderScanner4.pos());
      assertNull(jSONReaderScanner4.stringDefaultValue());
      assertEquals(0, jSONReaderScanner4.token());
      assertFalse(jSONReaderScanner4.isEOF());
      assertFalse(jSONReaderScanner4.equals((Object)jSONReaderScanner0));
      assertFalse(jSONReaderScanner4.equals((Object)jSONReaderScanner3));
      assertFalse(jSONReaderScanner4.equals((Object)jSONReaderScanner1));
      assertFalse(jSONReaderScanner4.equals((Object)jSONReaderScanner2));
      assertNotNull(jSONReaderScanner4);
      
      long long0 = jSONReaderScanner4.longValue();
      assertEquals(0, jSONReaderScanner4.matchStat);
      assertEquals(0, jSONReaderScanner4.matchStat());
      assertEquals(989, jSONReaderScanner4.getFeatures());
      assertEquals('f', jSONReaderScanner4.getCurrent());
      assertEquals(0, jSONReaderScanner4.pos());
      assertNull(jSONReaderScanner4.stringDefaultValue());
      assertEquals(0, jSONReaderScanner4.token());
      assertFalse(jSONReaderScanner4.isEOF());
      assertEquals(0L, long0);
      assertFalse(jSONReaderScanner4.equals((Object)jSONReaderScanner0));
      assertFalse(jSONReaderScanner4.equals((Object)jSONReaderScanner3));
      assertFalse(jSONReaderScanner4.equals((Object)jSONReaderScanner1));
      assertFalse(jSONReaderScanner4.equals((Object)jSONReaderScanner2));
      assertNotSame(jSONReaderScanner4, jSONReaderScanner0);
      assertNotSame(jSONReaderScanner4, jSONReaderScanner3);
      assertNotSame(jSONReaderScanner4, jSONReaderScanner1);
      assertNotSame(jSONReaderScanner4, jSONReaderScanner2);
      
      boolean boolean3 = jSONReaderScanner4.scanBoolean('m');
      assertEquals((-1), jSONReaderScanner4.matchStat);
      assertEquals((-1), jSONReaderScanner4.matchStat());
      assertEquals(989, jSONReaderScanner4.getFeatures());
      assertEquals('f', jSONReaderScanner4.getCurrent());
      assertEquals(0, jSONReaderScanner4.pos());
      assertNull(jSONReaderScanner4.stringDefaultValue());
      assertEquals(0, jSONReaderScanner4.token());
      assertFalse(jSONReaderScanner4.isEOF());
      assertFalse(boolean3);
      assertFalse(jSONReaderScanner4.equals((Object)jSONReaderScanner0));
      assertFalse(jSONReaderScanner4.equals((Object)jSONReaderScanner3));
      assertFalse(jSONReaderScanner4.equals((Object)jSONReaderScanner1));
      assertFalse(jSONReaderScanner4.equals((Object)jSONReaderScanner2));
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertNotSame(jSONReaderScanner4, jSONReaderScanner0);
      assertNotSame(jSONReaderScanner4, jSONReaderScanner3);
      assertNotSame(jSONReaderScanner4, jSONReaderScanner1);
      assertNotSame(jSONReaderScanner4, jSONReaderScanner2);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      jSONReaderScanner0.nextToken();
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals('y', jSONReaderScanner0.getCurrent());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(1, jSONReaderScanner0.token());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner4));
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner3));
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner2));
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner1));
      assertNotSame(jSONReaderScanner0, jSONReaderScanner4);
      assertNotSame(jSONReaderScanner0, jSONReaderScanner3);
      assertNotSame(jSONReaderScanner0, jSONReaderScanner2);
      assertNotSame(jSONReaderScanner0, jSONReaderScanner1);
      
      String string0 = jSONReaderScanner4.tokenName();
      assertEquals((-1), jSONReaderScanner4.matchStat);
      assertEquals((-1), jSONReaderScanner4.matchStat());
      assertEquals(989, jSONReaderScanner4.getFeatures());
      assertEquals('f', jSONReaderScanner4.getCurrent());
      assertEquals(0, jSONReaderScanner4.pos());
      assertNull(jSONReaderScanner4.stringDefaultValue());
      assertEquals(0, jSONReaderScanner4.token());
      assertFalse(jSONReaderScanner4.isEOF());
      assertEquals("Unknown", string0);
      assertFalse(jSONReaderScanner4.equals((Object)jSONReaderScanner0));
      assertFalse(jSONReaderScanner4.equals((Object)jSONReaderScanner3));
      assertFalse(jSONReaderScanner4.equals((Object)jSONReaderScanner1));
      assertFalse(jSONReaderScanner4.equals((Object)jSONReaderScanner2));
      assertNotSame(jSONReaderScanner4, jSONReaderScanner0);
      assertNotSame(jSONReaderScanner4, jSONReaderScanner3);
      assertNotSame(jSONReaderScanner4, jSONReaderScanner1);
      assertNotSame(jSONReaderScanner4, jSONReaderScanner2);
      assertNotNull(string0);
      
      boolean boolean4 = true;
      SymbolTable symbolTable0 = null;
      try {
        symbolTable0 = new SymbolTable((-107));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.SymbolTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("pyr//|=j.hazE\"");
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals('p', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertNotNull(jSONReaderScanner0);
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("Sp<ISO8601DateFormat", 0);
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals('S', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.token());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals(0, jSONReaderScanner1.getFeatures());
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertNotNull(jSONReaderScanner1);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      jSONReaderScanner0.eofPos = 0;
      assertEquals('p', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      
      jSONReaderScanner0.matchStat = (int) '`';
      assertEquals('p', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(96, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      
      JSONReaderScanner jSONReaderScanner2 = new JSONReaderScanner("fastjson.serializerFeatures.MapSortField", (-1354));
      assertEquals(0, jSONReaderScanner2.matchStat);
      assertEquals('f', jSONReaderScanner2.getCurrent());
      assertEquals(0, jSONReaderScanner2.token());
      assertEquals(0, jSONReaderScanner2.matchStat());
      assertFalse(jSONReaderScanner2.isEOF());
      assertEquals((-1354), jSONReaderScanner2.getFeatures());
      assertEquals(0, jSONReaderScanner2.pos());
      assertEquals("", jSONReaderScanner2.stringDefaultValue());
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner0));
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner1));
      assertNotNull(jSONReaderScanner2);
      
      Locale locale0 = Locale.JAPAN;
      assertEquals("ja_JP", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("JP", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertNotNull(locale0);
      
      boolean boolean1 = jSONReaderScanner1.isBlankInput();
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals('S', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.token());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals(0, jSONReaderScanner1.getFeatures());
      assertFalse(boolean1);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner2));
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertFalse(boolean1 == boolean0);
      assertNotSame(jSONReaderScanner1, jSONReaderScanner2);
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      
      boolean boolean2 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      JSONReaderScanner jSONReaderScanner3 = new JSONReaderScanner("pyr//|=j.hazE\"");
      assertEquals(0, jSONReaderScanner3.matchStat);
      assertEquals(0, jSONReaderScanner3.pos());
      assertFalse(jSONReaderScanner3.isEOF());
      assertEquals(0, jSONReaderScanner3.matchStat());
      assertNull(jSONReaderScanner3.stringDefaultValue());
      assertEquals('p', jSONReaderScanner3.getCurrent());
      assertEquals(0, jSONReaderScanner3.token());
      assertEquals(989, jSONReaderScanner3.getFeatures());
      assertFalse(jSONReaderScanner3.equals((Object)jSONReaderScanner1));
      assertFalse(jSONReaderScanner3.equals((Object)jSONReaderScanner2));
      assertFalse(jSONReaderScanner3.equals((Object)jSONReaderScanner0));
      assertNotNull(jSONReaderScanner3);
      
      long long0 = jSONReaderScanner3.longValue();
      assertEquals(0, jSONReaderScanner3.matchStat);
      assertEquals(0, jSONReaderScanner3.pos());
      assertFalse(jSONReaderScanner3.isEOF());
      assertEquals(0, jSONReaderScanner3.matchStat());
      assertNull(jSONReaderScanner3.stringDefaultValue());
      assertEquals('p', jSONReaderScanner3.getCurrent());
      assertEquals(0, jSONReaderScanner3.token());
      assertEquals(989, jSONReaderScanner3.getFeatures());
      assertEquals(0L, long0);
      assertFalse(jSONReaderScanner3.equals((Object)jSONReaderScanner1));
      assertFalse(jSONReaderScanner3.equals((Object)jSONReaderScanner2));
      assertFalse(jSONReaderScanner3.equals((Object)jSONReaderScanner0));
      assertNotSame(jSONReaderScanner3, jSONReaderScanner1);
      assertNotSame(jSONReaderScanner3, jSONReaderScanner2);
      assertNotSame(jSONReaderScanner3, jSONReaderScanner0);
      
      boolean boolean3 = jSONReaderScanner3.scanBoolean('m');
      assertEquals((-1), jSONReaderScanner3.matchStat);
      assertEquals(0, jSONReaderScanner3.pos());
      assertEquals((-1), jSONReaderScanner3.matchStat());
      assertFalse(jSONReaderScanner3.isEOF());
      assertNull(jSONReaderScanner3.stringDefaultValue());
      assertEquals('p', jSONReaderScanner3.getCurrent());
      assertEquals(0, jSONReaderScanner3.token());
      assertEquals(989, jSONReaderScanner3.getFeatures());
      assertFalse(boolean3);
      assertFalse(jSONReaderScanner3.equals((Object)jSONReaderScanner1));
      assertFalse(jSONReaderScanner3.equals((Object)jSONReaderScanner2));
      assertFalse(jSONReaderScanner3.equals((Object)jSONReaderScanner0));
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertNotSame(jSONReaderScanner3, jSONReaderScanner1);
      assertNotSame(jSONReaderScanner3, jSONReaderScanner2);
      assertNotSame(jSONReaderScanner3, jSONReaderScanner0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      jSONReaderScanner1.nextToken();
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals('<', jSONReaderScanner1.getCurrent());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertEquals(18, jSONReaderScanner1.token());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals(0, jSONReaderScanner1.getFeatures());
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner3));
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner2));
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertNotSame(jSONReaderScanner1, jSONReaderScanner3);
      assertNotSame(jSONReaderScanner1, jSONReaderScanner2);
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      
      // Undeclared exception!
      try { 
        jSONReaderScanner2.nextToken(5);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      char[] charArray0 = new char[0];
      StringReader stringReader0 = new StringReader("44Tk");
      assertNotNull(stringReader0);
      
      stringReader0.reset();
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      boolean boolean2 = stringReader0.markSupported();
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("44Tk");
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('4', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.token());
      assertNotNull(jSONReaderScanner0);
      
      BigInteger bigInteger0 = jSONReaderScanner0.scanFieldBigInteger(charArray0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('4', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.token());
      assertArrayEquals(new char[] {}, charArray0);
      assertNull(bigInteger0);
      
      boolean boolean3 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean3);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
      
      String string0 = jSONReaderScanner0.stringVal();
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('4', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = jSONReaderScanner0.scanInt('l');
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('4', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(44, int0);
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("g\"z4X", 3868);
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals('g', jSONReaderScanner1.getCurrent());
      assertEquals(3868, jSONReaderScanner1.getFeatures());
      assertEquals(0, jSONReaderScanner1.token());
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertNotNull(jSONReaderScanner1);
      
      jSONReaderScanner0.stringDefaultValue = "";
      assertEquals("", jSONReaderScanner0.stringDefaultValue());
      assertEquals('4', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.token());
      
      boolean boolean4 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean4);
      assertTrue(boolean4 == boolean3);
      assertFalse(boolean4 == boolean1);
      assertTrue(boolean4 == boolean0);
      assertFalse(boolean4 == boolean2);
      
      float float0 = jSONReaderScanner0.scanFieldFloat(charArray0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals("", jSONReaderScanner0.stringDefaultValue());
      assertEquals('4', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0.0F, float0, 0.01F);
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner1));
      assertNotSame(jSONReaderScanner0, jSONReaderScanner1);
      assertArrayEquals(new char[] {}, charArray0);
      
      char char0 = 'Y';
      PipedInputStream pipedInputStream0 = new PipedInputStream(3868);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pushbackInputStream0);
      
      JSONScanner jSONScanner0 = new JSONScanner("g\"z4X");
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(0, jSONScanner0.matchStat());
      assertFalse(jSONScanner0.isEOF());
      assertEquals('g', jSONScanner0.getCurrent());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.token());
      assertNotNull(jSONScanner0);
      
      UUID uUID0 = jSONScanner0.scanUUID('Y');
      assertEquals((-1), jSONScanner0.matchStat);
      assertFalse(jSONScanner0.isEOF());
      assertEquals('g', jSONScanner0.getCurrent());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals((-1), jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.token());
      assertNull(uUID0);
      
      boolean boolean5 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean5);
      assertFalse(boolean5 == boolean1);
      assertFalse(boolean5 == boolean2);
      assertTrue(boolean5 == boolean0);
      assertTrue(boolean5 == boolean4);
      assertTrue(boolean5 == boolean3);
      
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextTokenWithColon(110);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - 4, info : 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      char[] charArray0 = new char[5];
      charArray0[0] = '-';
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "com.alibaba.fastjson.util.IOUtils");
      assertFalse(boolean0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      String string0 = ".PT!.^<A>C9";
      int int0 = (-2830);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("x~2Q4v*, H]:+o4", (-2830));
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals("", jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('x', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals((-2830), jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNotNull(jSONReaderScanner0);
      
      boolean boolean1 = jSONReaderScanner0.scanFieldBoolean(charArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertEquals("", jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertEquals('x', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-2830), jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new char[] {'-', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      jSONReaderScanner0.resetStringPosition();
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertEquals("", jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertEquals('x', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-2830), jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      
      char[] charArray1 = new char[5];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = '0';
      charArray1[1] = '-';
      charArray1[2] = '0';
      jSONReaderScanner0.matchStat = 674;
      assertEquals("", jSONReaderScanner0.stringDefaultValue());
      assertEquals(674, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('x', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-2830), jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      
      charArray1[3] = '0';
      charArray1[4] = '-';
      float float0 = jSONReaderScanner0.scanFieldFloat(charArray1);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertEquals("", jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertEquals('x', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-2830), jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0.0F, float0, 0.01F);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'0', '-', '0', '0', '-'}, charArray1);
      
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextToken();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal state. ~
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("AllowArbitraryCommas", 7);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals('A', jSONReaderScanner0.getCurrent());
      assertEquals(7, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertNotNull(jSONReaderScanner0);
      
      TimeZone timeZone0 = jSONReaderScanner0.getTimeZone();
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals('A', jSONReaderScanner0.getCurrent());
      assertEquals(7, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      jSONReaderScanner0.scanNumber();
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals('A', jSONReaderScanner0.getCurrent());
      assertEquals(7, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(2, jSONReaderScanner0.token());
      
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(charArray0, 0);
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertTrue(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals('\u0000', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.pos());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertArrayEquals(new char[] {}, charArray0);
      assertNotNull(jSONReaderScanner1);
      
      JSONReaderScanner jSONReaderScanner2 = new JSONReaderScanner("not match ");
      assertEquals(0, jSONReaderScanner2.matchStat);
      assertEquals(0, jSONReaderScanner2.token());
      assertEquals(0, jSONReaderScanner2.pos());
      assertNull(jSONReaderScanner2.stringDefaultValue());
      assertFalse(jSONReaderScanner2.isEOF());
      assertEquals(989, jSONReaderScanner2.getFeatures());
      assertEquals(0, jSONReaderScanner2.matchStat());
      assertEquals('n', jSONReaderScanner2.getCurrent());
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner0));
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner1));
      assertNotNull(jSONReaderScanner2);
      
      float float0 = jSONReaderScanner1.scanFloat('h');
      assertEquals((-1), jSONReaderScanner1.matchStat);
      assertTrue(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals('\u0000', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.pos());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertEquals((-1), jSONReaderScanner1.matchStat());
      assertEquals(0.0F, float0, 0.01F);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner2));
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertNotSame(jSONReaderScanner1, jSONReaderScanner2);
      assertArrayEquals(new char[] {}, charArray0);
      
      jSONReaderScanner2.putChar('h');
      assertEquals(0, jSONReaderScanner2.matchStat);
      assertEquals(0, jSONReaderScanner2.token());
      assertEquals(0, jSONReaderScanner2.pos());
      assertNull(jSONReaderScanner2.stringDefaultValue());
      assertFalse(jSONReaderScanner2.isEOF());
      assertEquals(989, jSONReaderScanner2.getFeatures());
      assertEquals(0, jSONReaderScanner2.matchStat());
      assertEquals('n', jSONReaderScanner2.getCurrent());
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner0));
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner1));
      assertNotSame(jSONReaderScanner2, jSONReaderScanner0);
      assertNotSame(jSONReaderScanner2, jSONReaderScanner1);
      
      Locale locale0 = Locale.KOREAN;
      assertEquals("ko", locale0.toString());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertNotNull(locale0);
      
      Locale locale1 = Locale.SIMPLIFIED_CHINESE;
      assertEquals("zho", locale1.getISO3Language());
      assertEquals("zh", locale1.getLanguage());
      assertEquals("CN", locale1.getCountry());
      assertEquals("zh_CN", locale1.toString());
      assertEquals("", locale1.getVariant());
      assertEquals("CHN", locale1.getISO3Country());
      assertFalse(locale1.equals((Object)locale0));
      assertNotSame(locale1, locale0);
      assertNotNull(locale1);
      
      String string0 = jSONReaderScanner2.scanString('h');
      assertEquals((-1), jSONReaderScanner2.matchStat);
      assertEquals(0, jSONReaderScanner2.token());
      assertEquals(0, jSONReaderScanner2.pos());
      assertNull(jSONReaderScanner2.stringDefaultValue());
      assertEquals((-1), jSONReaderScanner2.matchStat());
      assertFalse(jSONReaderScanner2.isEOF());
      assertEquals(989, jSONReaderScanner2.getFeatures());
      assertEquals('n', jSONReaderScanner2.getCurrent());
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner0));
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner1));
      assertNotSame(jSONReaderScanner2, jSONReaderScanner0);
      assertNotSame(jSONReaderScanner2, jSONReaderScanner1);
      assertNull(string0);
      
      String string1 = locale0.getDisplayLanguage(locale1);
      assertEquals("ko", locale0.toString());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("zho", locale1.getISO3Language());
      assertEquals("zh", locale1.getLanguage());
      assertEquals("CN", locale1.getCountry());
      assertEquals("zh_CN", locale1.toString());
      assertEquals("", locale1.getVariant());
      assertEquals("CHN", locale1.getISO3Country());
      assertEquals("\u671D\u9C9C\u6587", string1);
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(locale1.equals((Object)locale0));
      assertNotSame(locale0, locale1);
      assertNotSame(locale1, locale0);
      assertNotNull(string1);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      jSONReaderScanner1.nextToken();
      assertEquals((-1), jSONReaderScanner1.matchStat);
      assertTrue(jSONReaderScanner1.isEOF());
      assertEquals('\u0000', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.pos());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(20, jSONReaderScanner1.token());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertEquals((-1), jSONReaderScanner1.matchStat());
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner2));
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertNotSame(jSONReaderScanner1, jSONReaderScanner2);
      assertArrayEquals(new char[] {}, charArray0);
      
      Date date0 = jSONReaderScanner2.scanDate('<');
      assertEquals((-1), jSONReaderScanner2.matchStat);
      assertEquals(0, jSONReaderScanner2.token());
      assertEquals(0, jSONReaderScanner2.pos());
      assertNull(jSONReaderScanner2.stringDefaultValue());
      assertEquals((-1), jSONReaderScanner2.matchStat());
      assertFalse(jSONReaderScanner2.isEOF());
      assertEquals(989, jSONReaderScanner2.getFeatures());
      assertEquals('n', jSONReaderScanner2.getCurrent());
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner0));
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner1));
      assertNotSame(jSONReaderScanner2, jSONReaderScanner0);
      assertNotSame(jSONReaderScanner2, jSONReaderScanner1);
      assertNull(date0);
      
      boolean boolean1 = jSONReaderScanner0.matchField(charArray0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals('l', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(7, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(1, jSONReaderScanner0.token());
      assertTrue(boolean1);
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner2));
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner1));
      assertTrue(boolean1 == boolean0);
      assertNotSame(jSONReaderScanner0, jSONReaderScanner2);
      assertNotSame(jSONReaderScanner0, jSONReaderScanner1);
      assertArrayEquals(new char[] {}, charArray0);
      
      JSONReaderScanner jSONReaderScanner3 = null;
      try {
        jSONReaderScanner3 = new JSONReaderScanner((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      char[] charArray0 = new char[0];
      StringReader stringReader0 = new StringReader("44nk");
      assertNotNull(stringReader0);
      
      stringReader0.reset();
      Locale locale0 = Locale.CHINA;
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertNotNull(locale0);
      
      Locale locale1 = Locale.ROOT;
      assertEquals("", locale1.getISO3Language());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.toString());
      assertEquals("", locale1.getCountry());
      assertEquals("", locale1.getLanguage());
      assertFalse(locale1.equals((Object)locale0));
      assertNotSame(locale1, locale0);
      assertNotNull(locale1);
      
      String string0 = locale1.getDisplayScript(locale0);
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale1.getISO3Language());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.toString());
      assertEquals("", locale1.getCountry());
      assertEquals("", locale1.getLanguage());
      assertEquals("", string0);
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(locale1.equals((Object)locale0));
      assertNotSame(locale0, locale1);
      assertNotSame(locale1, locale0);
      assertNotNull(string0);
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("44nk");
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('4', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertNotNull(jSONReaderScanner0);
      
      Locale locale2 = Locale.JAPAN;
      assertEquals("ja_JP", locale2.toString());
      assertEquals("JPN", locale2.getISO3Country());
      assertEquals("ja", locale2.getLanguage());
      assertEquals("jpn", locale2.getISO3Language());
      assertEquals("", locale2.getVariant());
      assertEquals("JP", locale2.getCountry());
      assertFalse(locale2.equals((Object)locale1));
      assertFalse(locale2.equals((Object)locale0));
      assertNotSame(locale2, locale1);
      assertNotSame(locale2, locale0);
      assertNotNull(locale2);
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(stringReader0);
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals('4', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.pos());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertFalse(jSONReaderScanner1.isEOF());
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertNotNull(jSONReaderScanner1);
      
      jSONReaderScanner1.nextToken((int) (byte)9);
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertEquals(2, jSONReaderScanner1.token());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertEquals(0, jSONReaderScanner1.pos());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals('n', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertFalse(jSONReaderScanner1.isEOF());
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      
      JSONReaderScanner jSONReaderScanner2 = null;
      try {
        jSONReaderScanner2 = new JSONReaderScanner((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("8D3A#ZL");
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals('8', jSONReaderScanner0.getCurrent());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertNotNull(jSONReaderScanner0);
      
      long long0 = jSONReaderScanner0.scanFieldSymbol(charArray0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals('8', jSONReaderScanner0.getCurrent());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0L, long0);
      assertArrayEquals(new char[] {}, charArray0);
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("read string from reader error");
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals('r', jSONReaderScanner1.getCurrent());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertFalse(jSONReaderScanner1.isEOF());
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertNotNull(jSONReaderScanner1);
      
      jSONReaderScanner0.nextToken(44);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals('3', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(3, jSONReaderScanner0.token());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner1));
      assertNotSame(jSONReaderScanner0, jSONReaderScanner1);
      
      JSONReaderScanner jSONReaderScanner2 = new JSONReaderScanner(charArray0, 85);
      assertEquals(0, jSONReaderScanner2.matchStat);
      assertTrue(jSONReaderScanner2.isEOF());
      assertEquals(0, jSONReaderScanner2.pos());
      assertEquals(0, jSONReaderScanner2.matchStat());
      assertNull(jSONReaderScanner2.stringDefaultValue());
      assertEquals(989, jSONReaderScanner2.getFeatures());
      assertEquals(0, jSONReaderScanner2.token());
      assertEquals('\u0000', jSONReaderScanner2.getCurrent());
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner1));
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner0));
      assertArrayEquals(new char[] {}, charArray0);
      assertNotNull(jSONReaderScanner2);
      
      BigDecimal bigDecimal0 = jSONReaderScanner0.scanDecimal('\'');
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals('3', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(3, jSONReaderScanner0.token());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner1));
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner2));
      assertNotSame(jSONReaderScanner0, jSONReaderScanner1);
      assertNotSame(jSONReaderScanner0, jSONReaderScanner2);
      assertNull(bigDecimal0);
      
      char[] charArray1 = new char[7];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = '/';
      charArray1[1] = '/';
      charArray1[2] = '/';
      charArray1[3] = '/';
      charArray1[4] = '/';
      charArray1[5] = '/';
      charArray1[6] = ',';
      JSONScanner jSONScanner0 = new JSONScanner(charArray1, 0);
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      assertTrue(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.pos());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.token());
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'/', '/', '/', '/', '/', '/', ','}, charArray1);
      assertNotNull(jSONScanner0);
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = 'I';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 'I');
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('I', jSONReaderScanner0.getCurrent());
      assertArrayEquals(new char[] {'I', '\u0000', '\u0000'}, charArray0);
      assertNotNull(jSONReaderScanner0);
      
      int[] intArray0 = jSONReaderScanner0.scanFieldIntArray(charArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertEquals('I', jSONReaderScanner0.getCurrent());
      assertArrayEquals(new char[] {'I', '\u0000', '\u0000'}, charArray0);
      assertNull(intArray0);
      
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertFalse(boolean0);
      
      float float0 = jSONReaderScanner0.scanFieldFloat(charArray0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals('I', jSONReaderScanner0.getCurrent());
      assertEquals(0.0F, float0, 0.01F);
      assertArrayEquals(new char[] {'I', '\u0000', '\u0000'}, charArray0);
      
      String string0 = jSONReaderScanner0.stringVal();
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals('I', jSONReaderScanner0.getCurrent());
      assertEquals("", string0);
      assertArrayEquals(new char[] {'I', '\u0000', '\u0000'}, charArray0);
      assertNotNull(string0);
      
      char[] charArray1 = new char[1];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = 'I';
      long long0 = jSONReaderScanner0.scanFieldSymbol(charArray1);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertEquals('I', jSONReaderScanner0.getCurrent());
      assertEquals(0L, long0);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'I', '\u0000', '\u0000'}, charArray0);
      assertArrayEquals(new char[] {'I'}, charArray1);
      
      String string1 = jSONReaderScanner0.stringVal();
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertEquals('I', jSONReaderScanner0.getCurrent());
      assertEquals("", string1);
      assertFalse(charArray0.equals((Object)charArray1));
      assertTrue(string1.equals((Object)string0));
      assertNotSame(charArray0, charArray1);
      assertArrayEquals(new char[] {'I', '\u0000', '\u0000'}, charArray0);
      assertNotNull(string1);
      
      jSONReaderScanner0.nextToken(6);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertEquals(20, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertEquals('I', jSONReaderScanner0.getCurrent());
      assertFalse(charArray0.equals((Object)charArray1));
      assertNotSame(charArray0, charArray1);
      assertArrayEquals(new char[] {'I', '\u0000', '\u0000'}, charArray0);
      
      int int0 = jSONReaderScanner0.scanInt('Y');
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals(20, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals('I', jSONReaderScanner0.getCurrent());
      assertEquals(0, int0);
      assertFalse(charArray0.equals((Object)charArray1));
      assertNotSame(charArray0, charArray1);
      assertArrayEquals(new char[] {'I', '\u0000', '\u0000'}, charArray0);
      
      float float1 = jSONReaderScanner0.scanFloat('%');
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals(20, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals('I', jSONReaderScanner0.getCurrent());
      assertEquals(0.0F, float1, 0.01F);
      assertFalse(charArray0.equals((Object)charArray1));
      assertEquals(float1, float0, 0.01F);
      assertNotSame(charArray0, charArray1);
      assertArrayEquals(new char[] {'I', '\u0000', '\u0000'}, charArray0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(charArray0, 17, 2333);
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals('I', jSONReaderScanner1.getCurrent());
      assertEquals(2333, jSONReaderScanner1.getFeatures());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.pos());
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertArrayEquals(new char[] {'I', '\u0000', '\u0000'}, charArray0);
      assertNotNull(jSONReaderScanner1);
      
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanHex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal state. I
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      String string0 = "e_Ak";
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("e_Ak");
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('e', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertNotNull(jSONReaderScanner0);
      
      char[] charArray0 = new char[0];
      TimeZone timeZone0 = jSONReaderScanner0.getTimeZone();
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('e', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      int int0 = 58;
      jSONReaderScanner0.setToken(58);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals('e', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(58, jSONReaderScanner0.token());
      assertFalse(jSONReaderScanner0.isEOF());
      
      long long0 = jSONReaderScanner0.scanFieldLong(charArray0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals('e', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(58, jSONReaderScanner0.token());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0L, long0);
      assertArrayEquals(new char[] {}, charArray0);
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(charArray0, 58);
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals('\u0000', jSONReaderScanner1.getCurrent());
      assertTrue(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.pos());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertArrayEquals(new char[] {}, charArray0);
      assertNotNull(jSONReaderScanner1);
      
      jSONReaderScanner1.scanIdent();
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertEquals(18, jSONReaderScanner1.token());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertEquals('\u0000', jSONReaderScanner1.getCurrent());
      assertTrue(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.pos());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertArrayEquals(new char[] {}, charArray0);
      
      String string1 = jSONReaderScanner1.scanFieldString(charArray0);
      assertEquals((-1), jSONReaderScanner1.matchStat);
      assertEquals(18, jSONReaderScanner1.token());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertEquals('\u0000', jSONReaderScanner1.getCurrent());
      assertTrue(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.pos());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals((-1), jSONReaderScanner1.matchStat());
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertArrayEquals(new char[] {}, charArray0);
      assertNull(string1);
      
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      char[] charArray0 = new char[0];
      StringReader stringReader0 = new StringReader("44nk");
      assertNotNull(stringReader0);
      
      stringReader0.reset();
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "44nk");
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("nw");
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('n', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertNotNull(jSONReaderScanner0);
      
      BigInteger bigInteger0 = jSONReaderScanner0.scanFieldBigInteger(charArray0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('n', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertArrayEquals(new char[] {}, charArray0);
      assertNull(bigInteger0);
      
      boolean boolean2 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      String string0 = jSONReaderScanner0.stringVal();
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('n', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals("", string0);
      assertNotNull(string0);
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("g\"z4X", 3868);
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertEquals('g', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals(3868, jSONReaderScanner1.getFeatures());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertNotNull(jSONReaderScanner1);
      
      jSONReaderScanner0.stringDefaultValue = "";
      assertEquals("", jSONReaderScanner0.stringDefaultValue());
      assertEquals('n', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      
      boolean boolean3 = jSONReaderScanner1.isRef();
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertEquals('g', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals(3868, jSONReaderScanner1.getFeatures());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertFalse(boolean3);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      
      boolean boolean4 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean4);
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4 == boolean2);
      assertFalse(boolean4 == boolean1);
      assertTrue(boolean4 == boolean3);
      
      float float0 = jSONReaderScanner0.scanFieldFloat(charArray0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals("", jSONReaderScanner0.stringDefaultValue());
      assertEquals('n', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0.0F, float0, 0.01F);
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner1));
      assertNotSame(jSONReaderScanner0, jSONReaderScanner1);
      assertArrayEquals(new char[] {}, charArray0);
      
      UUID uUID0 = jSONReaderScanner1.scanUUID('5');
      assertEquals((-1), jSONReaderScanner1.matchStat);
      assertEquals('g', jSONReaderScanner1.getCurrent());
      assertEquals((-1), jSONReaderScanner1.matchStat());
      assertEquals(0, jSONReaderScanner1.pos());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals(3868, jSONReaderScanner1.getFeatures());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertNull(uUID0);
      
      float[][] floatArray0 = jSONReaderScanner1.scanFieldFloatArray2(charArray0);
      assertEquals((-2), jSONReaderScanner1.matchStat);
      assertEquals((-2), jSONReaderScanner1.matchStat());
      assertEquals('g', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.pos());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals(3868, jSONReaderScanner1.getFeatures());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertArrayEquals(new char[] {}, charArray0);
      assertNull(floatArray0);
      
      JSONReaderScanner jSONReaderScanner2 = new JSONReaderScanner("sp");
      assertEquals(0, jSONReaderScanner2.matchStat);
      assertEquals('s', jSONReaderScanner2.getCurrent());
      assertEquals(0, jSONReaderScanner2.token());
      assertNull(jSONReaderScanner2.stringDefaultValue());
      assertEquals(989, jSONReaderScanner2.getFeatures());
      assertEquals(0, jSONReaderScanner2.pos());
      assertEquals(0, jSONReaderScanner2.matchStat());
      assertFalse(jSONReaderScanner2.isEOF());
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner0));
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner1));
      assertNotNull(jSONReaderScanner2);
      
      boolean boolean5 = jSONReaderScanner0.isBlankInput();
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals("", jSONReaderScanner0.stringDefaultValue());
      assertEquals('n', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertFalse(boolean5);
      assertTrue(boolean5 == boolean4);
      assertTrue(boolean5 == boolean2);
      assertTrue(boolean5 == boolean0);
      assertTrue(boolean5 == boolean3);
      assertFalse(boolean5 == boolean1);
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner1));
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner2));
      assertNotSame(jSONReaderScanner0, jSONReaderScanner1);
      assertNotSame(jSONReaderScanner0, jSONReaderScanner2);
      
      Class<PipedInputStream> class0 = PipedInputStream.class;
      SymbolTable symbolTable0 = new SymbolTable(4348);
      assertNotNull(symbolTable0);
      
      Enum<?> enum0 = jSONReaderScanner0.scanEnum(class0, symbolTable0, ')');
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals("", jSONReaderScanner0.stringDefaultValue());
      assertEquals('n', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner1));
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner2));
      assertNotSame(jSONReaderScanner0, jSONReaderScanner1);
      assertNotSame(jSONReaderScanner0, jSONReaderScanner2);
      assertNull(enum0);
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      char[] charArray0 = new char[0];
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("nw");
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals('n', jSONReaderScanner0.getCurrent());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertNotNull(jSONReaderScanner0);
      
      BigInteger bigInteger0 = jSONReaderScanner0.scanFieldBigInteger(charArray0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals('n', jSONReaderScanner0.getCurrent());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertArrayEquals(new char[] {}, charArray0);
      assertNull(bigInteger0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string0 = jSONReaderScanner0.stringVal();
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals('n', jSONReaderScanner0.getCurrent());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals("", string0);
      assertNotNull(string0);
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("g\"z4X", 3868);
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(3868, jSONReaderScanner1.getFeatures());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals(0, jSONReaderScanner1.pos());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertEquals('g', jSONReaderScanner1.getCurrent());
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertNotNull(jSONReaderScanner1);
      
      jSONReaderScanner0.stringDefaultValue = "";
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals("", jSONReaderScanner0.stringDefaultValue());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals('n', jSONReaderScanner0.getCurrent());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      
      boolean boolean2 = jSONReaderScanner1.isRef();
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(3868, jSONReaderScanner1.getFeatures());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals(0, jSONReaderScanner1.pos());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertEquals('g', jSONReaderScanner1.getCurrent());
      assertFalse(boolean2);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      
      boolean boolean3 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean3);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      
      float float0 = jSONReaderScanner0.scanFieldFloat(charArray0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals("", jSONReaderScanner0.stringDefaultValue());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals('n', jSONReaderScanner0.getCurrent());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0.0F, float0, 0.01F);
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner1));
      assertNotSame(jSONReaderScanner0, jSONReaderScanner1);
      assertArrayEquals(new char[] {}, charArray0);
      
      UUID uUID0 = jSONReaderScanner1.scanUUID('5');
      assertEquals((-1), jSONReaderScanner1.matchStat);
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(3868, jSONReaderScanner1.getFeatures());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals((-1), jSONReaderScanner1.matchStat());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals('g', jSONReaderScanner1.getCurrent());
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertNull(uUID0);
      
      float[][] floatArray0 = jSONReaderScanner1.scanFieldFloatArray2(charArray0);
      assertEquals((-2), jSONReaderScanner1.matchStat);
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(3868, jSONReaderScanner1.getFeatures());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals(0, jSONReaderScanner1.pos());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals('g', jSONReaderScanner1.getCurrent());
      assertEquals((-2), jSONReaderScanner1.matchStat());
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertArrayEquals(new char[] {}, charArray0);
      assertNull(floatArray0);
      
      JSONReaderScanner jSONReaderScanner2 = new JSONReaderScanner("44nk", 3868);
      assertEquals(0, jSONReaderScanner2.matchStat);
      assertEquals(0, jSONReaderScanner2.pos());
      assertEquals(0, jSONReaderScanner2.token());
      assertEquals('4', jSONReaderScanner2.getCurrent());
      assertFalse(jSONReaderScanner2.isEOF());
      assertEquals(0, jSONReaderScanner2.matchStat());
      assertEquals(3868, jSONReaderScanner2.getFeatures());
      assertNull(jSONReaderScanner2.stringDefaultValue());
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner1));
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner0));
      assertNotNull(jSONReaderScanner2);
      
      boolean boolean4 = jSONReaderScanner0.isBlankInput();
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals("", jSONReaderScanner0.stringDefaultValue());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals('n', jSONReaderScanner0.getCurrent());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertFalse(boolean4);
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner2));
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner1));
      assertFalse(boolean4 == boolean0);
      assertTrue(boolean4 == boolean1);
      assertTrue(boolean4 == boolean2);
      assertTrue(boolean4 == boolean3);
      assertNotSame(jSONReaderScanner0, jSONReaderScanner2);
      assertNotSame(jSONReaderScanner0, jSONReaderScanner1);
      
      JSONReaderScanner jSONReaderScanner3 = new JSONReaderScanner("");
      assertEquals(0, jSONReaderScanner3.matchStat);
      assertEquals(989, jSONReaderScanner3.getFeatures());
      assertEquals(0, jSONReaderScanner3.matchStat());
      assertEquals(0, jSONReaderScanner3.token());
      assertEquals('\u0000', jSONReaderScanner3.getCurrent());
      assertTrue(jSONReaderScanner3.isEOF());
      assertEquals(0, jSONReaderScanner3.pos());
      assertNull(jSONReaderScanner3.stringDefaultValue());
      assertFalse(jSONReaderScanner3.equals((Object)jSONReaderScanner0));
      assertFalse(jSONReaderScanner3.equals((Object)jSONReaderScanner1));
      assertFalse(jSONReaderScanner3.equals((Object)jSONReaderScanner2));
      assertNotNull(jSONReaderScanner3);
      
      UUID uUID1 = jSONReaderScanner0.scanFieldUUID(charArray0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals("", jSONReaderScanner0.stringDefaultValue());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals('n', jSONReaderScanner0.getCurrent());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner3));
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner2));
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner1));
      assertNotSame(jSONReaderScanner0, jSONReaderScanner3);
      assertNotSame(jSONReaderScanner0, jSONReaderScanner2);
      assertNotSame(jSONReaderScanner0, jSONReaderScanner1);
      assertArrayEquals(new char[] {}, charArray0);
      assertNull(uUID1);
      
      jSONReaderScanner2.nextToken(0);
      assertEquals(0, jSONReaderScanner2.matchStat);
      assertEquals(0, jSONReaderScanner2.pos());
      assertFalse(jSONReaderScanner2.isEOF());
      assertEquals(0, jSONReaderScanner2.matchStat());
      assertEquals('n', jSONReaderScanner2.getCurrent());
      assertEquals(3868, jSONReaderScanner2.getFeatures());
      assertNull(jSONReaderScanner2.stringDefaultValue());
      assertEquals(2, jSONReaderScanner2.token());
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner1));
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner0));
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner3));
      assertNotSame(jSONReaderScanner2, jSONReaderScanner1);
      assertNotSame(jSONReaderScanner2, jSONReaderScanner0);
      assertNotSame(jSONReaderScanner2, jSONReaderScanner3);
      
      String string1 = jSONReaderScanner3.stringDefaultValue();
      assertEquals(0, jSONReaderScanner3.matchStat);
      assertEquals(989, jSONReaderScanner3.getFeatures());
      assertEquals(0, jSONReaderScanner3.matchStat());
      assertEquals(0, jSONReaderScanner3.token());
      assertEquals('\u0000', jSONReaderScanner3.getCurrent());
      assertTrue(jSONReaderScanner3.isEOF());
      assertEquals(0, jSONReaderScanner3.pos());
      assertNull(jSONReaderScanner3.stringDefaultValue());
      assertFalse(jSONReaderScanner3.equals((Object)jSONReaderScanner0));
      assertFalse(jSONReaderScanner3.equals((Object)jSONReaderScanner1));
      assertFalse(jSONReaderScanner3.equals((Object)jSONReaderScanner2));
      assertNotSame(jSONReaderScanner3, jSONReaderScanner0);
      assertNotSame(jSONReaderScanner3, jSONReaderScanner1);
      assertNotSame(jSONReaderScanner3, jSONReaderScanner2);
      assertNull(string1);
      
      jSONReaderScanner1.nextToken(3868);
      assertEquals((-2), jSONReaderScanner1.matchStat);
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(3868, jSONReaderScanner1.getFeatures());
      assertEquals('\"', jSONReaderScanner1.getCurrent());
      assertEquals(1, jSONReaderScanner1.token());
      assertEquals(0, jSONReaderScanner1.pos());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals((-2), jSONReaderScanner1.matchStat());
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner3));
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner2));
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertNotSame(jSONReaderScanner1, jSONReaderScanner3);
      assertNotSame(jSONReaderScanner1, jSONReaderScanner2);
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = '-';
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      JSONScanner jSONScanner0 = new JSONScanner("fJfcO-D8hu;R", '-');
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(45, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals('f', jSONScanner0.getCurrent());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.token());
      assertFalse(jSONScanner0.isEOF());
      assertNotNull(jSONScanner0);
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 8192);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals('-', jSONReaderScanner0.getCurrent());
      assertArrayEquals(new char[] {'-', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(jSONReaderScanner0);
      
      boolean boolean2 = jSONReaderScanner0.isBlankInput();
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals('-', jSONReaderScanner0.getCurrent());
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertArrayEquals(new char[] {'-', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      SymbolTable symbolTable0 = new SymbolTable(72);
      assertNotNull(symbolTable0);
      
      String string0 = jSONScanner0.scanSymbol(symbolTable0);
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(45, jSONScanner0.getFeatures());
      assertEquals(18, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.matchStat());
      assertNull(jSONScanner0.stringDefaultValue());
      assertFalse(jSONScanner0.isEOF());
      assertEquals('-', jSONScanner0.getCurrent());
      assertEquals("fJfcO", string0);
      assertNotNull(string0);
      
      JSONScanner jSONScanner1 = new JSONScanner("fJfcO-D8hu;R");
      assertEquals(0, jSONScanner1.matchStat);
      assertEquals(989, jSONScanner1.getFeatures());
      assertEquals(0, jSONScanner1.matchStat());
      assertFalse(jSONScanner1.isEOF());
      assertEquals('f', jSONScanner1.getCurrent());
      assertEquals(0, jSONScanner1.pos());
      assertNull(jSONScanner1.stringDefaultValue());
      assertEquals(0, jSONScanner1.token());
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      assertNotNull(jSONScanner1);
      
      jSONReaderScanner0.scanStringArray((Collection<String>) null, '-');
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals('-', jSONReaderScanner0.getCurrent());
      assertArrayEquals(new char[] {'-', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      JSONScanner jSONScanner2 = new JSONScanner("null", 8192);
      assertEquals(0, jSONScanner2.matchStat);
      assertNull(jSONScanner2.stringDefaultValue());
      assertEquals(8192, jSONScanner2.getFeatures());
      assertEquals(0, jSONScanner2.pos());
      assertEquals(0, jSONScanner2.matchStat());
      assertFalse(jSONScanner2.isEOF());
      assertEquals(0, jSONScanner2.token());
      assertEquals('n', jSONScanner2.getCurrent());
      assertFalse(jSONScanner2.equals((Object)jSONScanner1));
      assertFalse(jSONScanner2.equals((Object)jSONScanner0));
      assertNotNull(jSONScanner2);
      
      int[] intArray0 = jSONScanner2.scanFieldIntArray(charArray0);
      assertEquals((-2), jSONScanner2.matchStat);
      assertNull(jSONScanner2.stringDefaultValue());
      assertEquals(8192, jSONScanner2.getFeatures());
      assertEquals(0, jSONScanner2.pos());
      assertEquals((-2), jSONScanner2.matchStat());
      assertFalse(jSONScanner2.isEOF());
      assertEquals(0, jSONScanner2.token());
      assertEquals('n', jSONScanner2.getCurrent());
      assertFalse(jSONScanner2.equals((Object)jSONScanner1));
      assertFalse(jSONScanner2.equals((Object)jSONScanner0));
      assertNotSame(jSONScanner2, jSONScanner1);
      assertNotSame(jSONScanner2, jSONScanner0);
      assertArrayEquals(new char[] {'-', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNull(intArray0);
      
      Locale locale0 = Locale.FRANCE;
      assertEquals("FR", locale0.getCountry());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertNotNull(locale0);
      
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      assertEquals("FR", locale0.getCountry());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertNotNull(set0);
      
      jSONScanner2.scanStringArray(set0, '-');
      assertEquals((-1), jSONScanner2.matchStat);
      assertNull(jSONScanner2.stringDefaultValue());
      assertEquals(8192, jSONScanner2.getFeatures());
      assertEquals(0, jSONScanner2.pos());
      assertEquals((-1), jSONScanner2.matchStat());
      assertFalse(jSONScanner2.isEOF());
      assertEquals(0, jSONScanner2.token());
      assertEquals('n', jSONScanner2.getCurrent());
      assertEquals("FR", locale0.getCountry());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertFalse(jSONScanner2.equals((Object)jSONScanner1));
      assertFalse(jSONScanner2.equals((Object)jSONScanner0));
      assertNotSame(jSONScanner2, jSONScanner1);
      assertNotSame(jSONScanner2, jSONScanner0);
      
      Class<MockJapaneseDate> class0 = MockJapaneseDate.class;
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFieldStringArray(charArray0, class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.time.chrono.MockJapaneseDate cannot be cast to java.util.Collection
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      char[] charArray0 = new char[0];
      StringReader stringReader0 = new StringReader("44nk");
      assertNotNull(stringReader0);
      
      stringReader0.reset();
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      JSONScanner jSONScanner0 = new JSONScanner("HAjKk,uP</Lf\"5`Zrf", 102);
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals('H', jSONScanner0.getCurrent());
      assertEquals(102, jSONScanner0.getFeatures());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.token());
      assertFalse(jSONScanner0.isEOF());
      assertNotNull(jSONScanner0);
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("44nk", 102);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals('4', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(102, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      assertNotNull(jSONReaderScanner0);
      
      String string0 = jSONReaderScanner0.stringVal();
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals('4', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(102, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = Calendar.LONG;
      assertEquals(2, int0);
      
      long long0 = jSONReaderScanner0.scanFieldSymbol(charArray0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals('4', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(102, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0L, long0);
      assertArrayEquals(new char[] {}, charArray0);
      
      jSONReaderScanner0.nextToken(2);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(2, jSONReaderScanner0.token());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(102, jSONReaderScanner0.getFeatures());
      assertEquals('n', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      
      BigInteger bigInteger0 = jSONReaderScanner0.scanFieldBigInteger(charArray0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(2, jSONReaderScanner0.token());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(102, jSONReaderScanner0.getFeatures());
      assertEquals('n', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertArrayEquals(new char[] {}, charArray0);
      assertNull(bigInteger0);
      
      int int1 = Calendar.AM;
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      
      float float0 = jSONReaderScanner0.scanFloat('}');
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(2, jSONReaderScanner0.token());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(102, jSONReaderScanner0.getFeatures());
      assertEquals('n', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0.0F, float0, 0.01F);
      
      boolean boolean2 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      String string1 = jSONReaderScanner0.stringVal();
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(2, jSONReaderScanner0.token());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(102, jSONReaderScanner0.getFeatures());
      assertEquals('n', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals("4n", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean3 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean3);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
      
      boolean boolean4 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean4);
      assertTrue(boolean4 == boolean2);
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4 == boolean3);
      assertFalse(boolean4 == boolean1);
      
      jSONReaderScanner0.close();
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(2, jSONReaderScanner0.token());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(102, jSONReaderScanner0.getFeatures());
      assertEquals('n', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      
      // Undeclared exception!
      try { 
        jSONReaderScanner0.bytesValue();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      char[] charArray0 = new char[0];
      Locale locale0 = Locale.JAPAN;
      assertEquals("JP", locale0.getCountry());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("zKfv7M%!!Z!mXj&u");
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals('z', jSONReaderScanner0.getCurrent());
      assertNotNull(jSONReaderScanner0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)17;
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte)17}, byteArray0);
      
      jSONReaderScanner0.nextToken((int) (byte)17);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(1, jSONReaderScanner0.token());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('K', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat());
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("zKfv7M%!!Z!mXj&u");
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertEquals(0, jSONReaderScanner1.token());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertEquals('z', jSONReaderScanner1.getCurrent());
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertNotNull(jSONReaderScanner1);
      
      BigDecimal bigDecimal0 = jSONReaderScanner1.scanFieldDecimal(charArray0);
      assertEquals((-1), jSONReaderScanner1.matchStat);
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertEquals(0, jSONReaderScanner1.token());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals((-1), jSONReaderScanner1.matchStat());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals('z', jSONReaderScanner1.getCurrent());
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertArrayEquals(new char[] {}, charArray0);
      assertNull(bigDecimal0);
      
      Locale locale1 = Locale.UK;
      assertEquals("", locale1.getVariant());
      assertEquals("GBR", locale1.getISO3Country());
      assertEquals("en_GB", locale1.toString());
      assertEquals("GB", locale1.getCountry());
      assertEquals("eng", locale1.getISO3Language());
      assertEquals("en", locale1.getLanguage());
      assertFalse(locale1.equals((Object)locale0));
      assertNotSame(locale1, locale0);
      assertNotNull(locale1);
      
      Set<Character> set0 = locale1.getExtensionKeys();
      assertEquals("", locale1.getVariant());
      assertEquals("GBR", locale1.getISO3Country());
      assertEquals("en_GB", locale1.toString());
      assertEquals("GB", locale1.getCountry());
      assertEquals("eng", locale1.getISO3Language());
      assertEquals("en", locale1.getLanguage());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertFalse(locale1.equals((Object)locale0));
      assertNotSame(locale1, locale0);
      assertNotNull(set0);
      
      double double0 = jSONReaderScanner0.scanFieldDouble(charArray0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(1, jSONReaderScanner0.token());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('K', jSONReaderScanner0.getCurrent());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(0.0, double0, 0.01);
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner1));
      assertNotSame(jSONReaderScanner0, jSONReaderScanner1);
      assertArrayEquals(new char[] {}, charArray0);
      
      Locale locale2 = Locale.SIMPLIFIED_CHINESE;
      assertEquals("", locale2.getVariant());
      assertEquals("CHN", locale2.getISO3Country());
      assertEquals("zh", locale2.getLanguage());
      assertEquals("zh_CN", locale2.toString());
      assertEquals("CN", locale2.getCountry());
      assertEquals("zho", locale2.getISO3Language());
      assertFalse(locale2.equals((Object)locale1));
      assertFalse(locale2.equals((Object)locale0));
      assertNotSame(locale2, locale1);
      assertNotSame(locale2, locale0);
      assertNotNull(locale2);
      
      String string0 = locale1.getDisplayVariant(locale0);
      assertEquals("JP", locale0.getCountry());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale1.getVariant());
      assertEquals("GBR", locale1.getISO3Country());
      assertEquals("en_GB", locale1.toString());
      assertEquals("GB", locale1.getCountry());
      assertEquals("eng", locale1.getISO3Language());
      assertEquals("en", locale1.getLanguage());
      assertEquals("", string0);
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(locale0.equals((Object)locale2));
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(locale1.equals((Object)locale2));
      assertNotSame(locale0, locale1);
      assertNotSame(locale0, locale2);
      assertNotSame(locale1, locale0);
      assertNotSame(locale1, locale2);
      assertNotNull(string0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      // Undeclared exception!
      try { 
        jSONReaderScanner1.scanTrue();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse true
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Tnb");
      assertFalse(boolean0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = '-';
      charArray0[1] = '0';
      charArray0[2] = '-';
      charArray0[4] = 't';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 57);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('-', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertArrayEquals(new char[] {'-', '0', '-', '\u0000', 't'}, charArray0);
      assertNotNull(jSONReaderScanner0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      String string0 = jSONReaderScanner0.stringVal();
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('-', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals("", string0);
      assertArrayEquals(new char[] {'-', '0', '-', '\u0000', 't'}, charArray0);
      assertNotNull(string0);
      
      int int0 = jSONReaderScanner0.scanInt('-');
      assertEquals(3, jSONReaderScanner0.matchStat);
      assertEquals(16, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(3, jSONReaderScanner0.matchStat());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, int0);
      assertArrayEquals(new char[] {'-', '0', '-', '\u0000', 't'}, charArray0);
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(charArray0, 0, 3);
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertTrue(jSONReaderScanner1.isEOF());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals(3, jSONReaderScanner1.getFeatures());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals('\u0000', jSONReaderScanner1.getCurrent());
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertArrayEquals(new char[] {'-', '0', '-', '\u0000', 't'}, charArray0);
      assertNotNull(jSONReaderScanner1);
      
      JSONReaderScanner jSONReaderScanner2 = new JSONReaderScanner("");
      assertEquals(0, jSONReaderScanner2.matchStat);
      assertEquals(989, jSONReaderScanner2.getFeatures());
      assertEquals(0, jSONReaderScanner2.matchStat());
      assertEquals('\u0000', jSONReaderScanner2.getCurrent());
      assertEquals(0, jSONReaderScanner2.token());
      assertTrue(jSONReaderScanner2.isEOF());
      assertEquals(0, jSONReaderScanner2.pos());
      assertNull(jSONReaderScanner2.stringDefaultValue());
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner1));
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner0));
      assertNotNull(jSONReaderScanner2);
      
      byte[] byteArray0 = new byte[0];
      boolean boolean1 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      Locale locale0 = Locale.CANADA;
      assertEquals("", locale0.getVariant());
      assertEquals("CA", locale0.getCountry());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en_CA", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertNotNull(locale0);
      
      Locale locale1 = locale0.stripExtensions();
      assertEquals("", locale0.getVariant());
      assertEquals("CA", locale0.getCountry());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en_CA", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_CA", locale1.toString());
      assertEquals("CA", locale1.getCountry());
      assertEquals("en", locale1.getLanguage());
      assertEquals("", locale1.getVariant());
      assertEquals("CAN", locale1.getISO3Country());
      assertEquals("eng", locale1.getISO3Language());
      assertSame(locale0, locale1);
      assertSame(locale1, locale0);
      assertNotNull(locale1);
      
      String string1 = locale0.getDisplayScript(locale1);
      assertEquals("", locale0.getVariant());
      assertEquals("CA", locale0.getCountry());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en_CA", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_CA", locale1.toString());
      assertEquals("CA", locale1.getCountry());
      assertEquals("en", locale1.getLanguage());
      assertEquals("", locale1.getVariant());
      assertEquals("CAN", locale1.getISO3Country());
      assertEquals("eng", locale1.getISO3Language());
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      assertSame(locale0, locale1);
      assertSame(locale1, locale0);
      assertNotNull(string1);
      
      BigDecimal bigDecimal0 = jSONReaderScanner2.scanDecimal('@');
      assertEquals((-1), jSONReaderScanner2.matchStat);
      assertEquals(989, jSONReaderScanner2.getFeatures());
      assertEquals((-1), jSONReaderScanner2.matchStat());
      assertEquals('\u0000', jSONReaderScanner2.getCurrent());
      assertEquals(0, jSONReaderScanner2.token());
      assertTrue(jSONReaderScanner2.isEOF());
      assertEquals(0, jSONReaderScanner2.pos());
      assertNull(jSONReaderScanner2.stringDefaultValue());
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner1));
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner0));
      assertNotSame(jSONReaderScanner2, jSONReaderScanner1);
      assertNotSame(jSONReaderScanner2, jSONReaderScanner0);
      assertNull(bigDecimal0);
      
      boolean boolean2 = jSONReaderScanner0.isBlankInput();
      assertEquals(3, jSONReaderScanner0.matchStat);
      assertEquals(16, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(3, jSONReaderScanner0.matchStat());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner1));
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner2));
      assertNotSame(jSONReaderScanner0, jSONReaderScanner1);
      assertNotSame(jSONReaderScanner0, jSONReaderScanner2);
      assertArrayEquals(new char[] {'-', '0', '-', '\u0000', 't'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("AllowArbitraryCommas");
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals('A', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertNotNull(jSONReaderScanner0);
      
      TimeZone timeZone0 = jSONReaderScanner0.getTimeZone();
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals('A', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      jSONReaderScanner0.scanNumber();
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals('A', jSONReaderScanner0.getCurrent());
      assertEquals(2, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ", info : ");
      assertFalse(boolean0);
      
      JSONScanner jSONScanner0 = new JSONScanner("1");
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals('1', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertFalse(jSONScanner0.isEOF());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(989, jSONScanner0.getFeatures());
      assertNotNull(jSONScanner0);
      
      jSONScanner0.close();
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals('1', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertFalse(jSONScanner0.isEOF());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(989, jSONScanner0.getFeatures());
      
      char[] charArray0 = new char[0];
      float float0 = jSONScanner0.scanFieldFloat(charArray0);
      assertEquals((-1), jSONScanner0.matchStat);
      assertEquals('1', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertFalse(jSONScanner0.isEOF());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals((-1), jSONScanner0.matchStat());
      assertEquals(0.0F, float0, 0.01F);
      assertArrayEquals(new char[] {}, charArray0);
      
      jSONReaderScanner0.scanIdent();
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals('\u001A', jSONReaderScanner0.getCurrent());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals(18, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      
      int int0 = Calendar.MILLISECOND;
      assertEquals(14, int0);
      
      String string0 = jSONReaderScanner0.scanFieldString(charArray0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals('\u001A', jSONReaderScanner0.getCurrent());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals(18, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertArrayEquals(new char[] {}, charArray0);
      assertNull(string0);
      
      BigDecimal bigDecimal0 = new BigDecimal(14);
      assertEquals((short)14, bigDecimal0.shortValue());
      assertEquals((byte)14, bigDecimal0.byteValue());
      assertNotNull(bigDecimal0);
      
      // Undeclared exception!
      try { 
        jSONReaderScanner0.intValue();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // AllowArbitraryCommas
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = '-';
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      int int0 = 72;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 72, 72);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('-', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(72, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertArrayEquals(new char[] {'-', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(jSONReaderScanner0);
      
      int int1 = jSONReaderScanner0.scanFieldInt(charArray0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('-', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(72, jSONReaderScanner0.getFeatures());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      assertArrayEquals(new char[] {'-', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      int int2 = jSONReaderScanner0.token();
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('-', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(72, jSONReaderScanner0.getFeatures());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(0, int2);
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      assertArrayEquals(new char[] {'-', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      JSONScanner jSONScanner0 = new JSONScanner("fJfcO-D8hu;R", '-');
      assertEquals(0, jSONScanner0.matchStat);
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals('f', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.token());
      assertEquals(45, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.pos());
      assertNull(jSONScanner0.stringDefaultValue());
      assertNotNull(jSONScanner0);
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(charArray0, 8192);
      assertEquals(0, jSONReaderScanner1.matchStat);
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals(0, jSONReaderScanner1.token());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertEquals('-', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertArrayEquals(new char[] {'-', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(jSONReaderScanner1);
      
      JSONReaderScanner jSONReaderScanner2 = new JSONReaderScanner("fJfcO-D8hu;R", 14);
      assertEquals(0, jSONReaderScanner2.matchStat);
      assertNull(jSONReaderScanner2.stringDefaultValue());
      assertEquals(14, jSONReaderScanner2.getFeatures());
      assertEquals(0, jSONReaderScanner2.token());
      assertEquals(0, jSONReaderScanner2.pos());
      assertEquals('f', jSONReaderScanner2.getCurrent());
      assertEquals(0, jSONReaderScanner2.matchStat());
      assertFalse(jSONReaderScanner2.isEOF());
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner0));
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner1));
      assertNotNull(jSONReaderScanner2);
      
      JSONReaderScanner jSONReaderScanner3 = new JSONReaderScanner("EMPTY", 72);
      assertEquals(0, jSONReaderScanner3.matchStat);
      assertNull(jSONReaderScanner3.stringDefaultValue());
      assertEquals(0, jSONReaderScanner3.pos());
      assertEquals(0, jSONReaderScanner3.token());
      assertEquals(72, jSONReaderScanner3.getFeatures());
      assertEquals('E', jSONReaderScanner3.getCurrent());
      assertEquals(0, jSONReaderScanner3.matchStat());
      assertFalse(jSONReaderScanner3.isEOF());
      assertFalse(jSONReaderScanner3.equals((Object)jSONReaderScanner1));
      assertFalse(jSONReaderScanner3.equals((Object)jSONReaderScanner0));
      assertFalse(jSONReaderScanner3.equals((Object)jSONReaderScanner2));
      assertNotNull(jSONReaderScanner3);
      
      long long0 = jSONReaderScanner3.scanFieldSymbol(charArray0);
      assertEquals((-2), jSONReaderScanner3.matchStat);
      assertNull(jSONReaderScanner3.stringDefaultValue());
      assertEquals(0, jSONReaderScanner3.pos());
      assertEquals(0, jSONReaderScanner3.token());
      assertEquals(72, jSONReaderScanner3.getFeatures());
      assertEquals('E', jSONReaderScanner3.getCurrent());
      assertEquals((-2), jSONReaderScanner3.matchStat());
      assertFalse(jSONReaderScanner3.isEOF());
      assertEquals(0L, long0);
      assertFalse(jSONReaderScanner3.equals((Object)jSONReaderScanner1));
      assertFalse(jSONReaderScanner3.equals((Object)jSONReaderScanner0));
      assertFalse(jSONReaderScanner3.equals((Object)jSONReaderScanner2));
      assertNotSame(jSONReaderScanner3, jSONReaderScanner1);
      assertNotSame(jSONReaderScanner3, jSONReaderScanner0);
      assertNotSame(jSONReaderScanner3, jSONReaderScanner2);
      assertArrayEquals(new char[] {'-', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      int int3 = 2233;
      // Undeclared exception!
      try { 
        jSONReaderScanner2.nextToken(2233);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }
}
