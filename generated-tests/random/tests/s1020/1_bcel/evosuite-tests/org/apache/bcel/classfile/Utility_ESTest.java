/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 24 13:00:15 GMT 2019
 */

package org.apache.bcel.classfile;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.DataInput;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.EOFException;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectInputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.PushbackInputStream;
import java.io.UnsupportedEncodingException;
import java.net.URI;
import java.util.Locale;
import java.util.zip.ZipException;
import org.apache.bcel.classfile.Attribute;
import org.apache.bcel.classfile.Code;
import org.apache.bcel.classfile.Constant;
import org.apache.bcel.classfile.ConstantClass;
import org.apache.bcel.classfile.ConstantDouble;
import org.apache.bcel.classfile.ConstantFieldref;
import org.apache.bcel.classfile.ConstantFloat;
import org.apache.bcel.classfile.ConstantInteger;
import org.apache.bcel.classfile.ConstantInterfaceMethodref;
import org.apache.bcel.classfile.ConstantInvokeDynamic;
import org.apache.bcel.classfile.ConstantLong;
import org.apache.bcel.classfile.ConstantMethodHandle;
import org.apache.bcel.classfile.ConstantMethodType;
import org.apache.bcel.classfile.ConstantMethodref;
import org.apache.bcel.classfile.ConstantNameAndType;
import org.apache.bcel.classfile.ConstantPool;
import org.apache.bcel.classfile.ConstantString;
import org.apache.bcel.classfile.ConstantUtf8;
import org.apache.bcel.classfile.EmptyVisitor;
import org.apache.bcel.classfile.LocalVariable;
import org.apache.bcel.classfile.LocalVariableTable;
import org.apache.bcel.classfile.Method;
import org.apache.bcel.classfile.PMGClass;
import org.apache.bcel.classfile.Utility;
import org.apache.bcel.util.ByteSequence;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.io.MockRandomAccessFile;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Utility_ESTest extends Utility_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)38;
      byteArray0[1] = (byte)126;
      byteArray0[2] = (byte)46;
      byteArray0[3] = (byte) (-80);
      byteArray0[4] = (byte)29;
      byteArray0[5] = (byte) (-58);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 95, (-227));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)99;
      byteArray0[1] = (byte)50;
      byteArray0[2] = (byte)6;
      byteArray0[3] = (byte)4;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-40);
      byteArray0[6] = (byte)118;
      byteArray0[7] = (byte) (-85);
      byteArray0[8] = (byte)59;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)6, (int) (byte) (-85));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 6:    fneg
         // 7:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Utility.methodSignatureReturnType("Invalid constant pool reference: ", true);
      Utility.methodSignatureReturnType("Invalid constant pool reference: ", true);
      Utility.convertString("Invalid constant pool reference: ");
      Utility.classOrInterface(11);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)101;
      byteArray0[1] = (byte)57;
      byteArray0[2] = (byte)8;
      byteArray0[3] = (byte)79;
      byteArray0[4] = (byte)61;
      byteArray0[5] = (byte) (-98);
      byteArray0[6] = (byte) (-128);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)101, 11);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Utility.clearBit(1766, 79);
      String string0 = Utility.format(1766, 1766, true, 'L');
      try { 
        Utility.typeOfSignature(string0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Utility.accessToString((-1248));
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-65);
      byteArray0[1] = (byte) (-123);
      byteArray0[2] = (byte) (-64);
      byteArray0[3] = (byte)69;
      byteArray0[4] = (byte) (-35);
      byteArray0[5] = (byte)82;
      byteArray0[6] = (byte) (-55);
      byteArray0[7] = (byte)9;
      byteArray0[8] = (byte)47;
      Constant[] constantArray0 = new Constant[3];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantString constantString0 = new ConstantString(byteSequence0);
      ConstantString constantString1 = new ConstantString(constantString0);
      constantArray0[0] = (Constant) constantString1;
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic(byteSequence0);
      ConstantInvokeDynamic constantInvokeDynamic1 = new ConstantInvokeDynamic(constantInvokeDynamic0);
      constantArray0[1] = (Constant) constantInvokeDynamic1;
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle((-377), (-411));
      constantArray0[2] = (Constant) constantMethodHandle0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      try { 
        Utility.codeToString(byteSequence0, constantPool0, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = true;
      Utility.encode(byteArray0, true);
      int int0 = 52;
      Utility.accessToString(52);
      Utility.classOrInterface(52);
      String[] stringArray0 = new String[0];
      Utility.methodTypeToSignature("protected final synchronized", stringArray0);
      Utility.methodSignatureToString("()Lprotected;", "V", "protected final synchronized", true);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[5];
      ConstantMethodHandle constantMethodHandle0 = null;
      try {
        constantMethodHandle0 = new ConstantMethodHandle(byteSequence0);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("short", false);
      Constant[] constantArray0 = new Constant[7];
      ConstantMethodType constantMethodType0 = new ConstantMethodType(508);
      constantArray0[0] = (Constant) constantMethodType0;
      ConstantMethodType constantMethodType1 = new ConstantMethodType(constantMethodType0);
      constantArray0[1] = (Constant) constantMethodType1;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantMethodType constantMethodType2 = new ConstantMethodType(byteSequence0);
      constantArray0[2] = (Constant) constantMethodType2;
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getCachedInstance("short");
      constantArray0[3] = (Constant) constantUtf8_0;
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(byteSequence0);
      ConstantMethodHandle constantMethodHandle1 = new ConstantMethodHandle(constantMethodHandle0);
      constantArray0[4] = (Constant) constantMethodHandle1;
      ConstantMethodref constantMethodref0 = new ConstantMethodref(508, 508);
      constantArray0[5] = (Constant) constantMethodref0;
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(508, 508);
      ConstantNameAndType constantNameAndType1 = new ConstantNameAndType(constantNameAndType0);
      constantArray0[6] = (Constant) constantNameAndType1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 508, 508);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      String string0 = "!+fnQ@<<-sIi$";
      String string1 = null;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      boolean boolean0 = true;
      try { 
        Utility.decode("!+fnQ@<<-sIi$", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-102);
      byteArray0[1] = (byte) (-52);
      byteArray0[2] = (byte) (-16);
      byteArray0[3] = (byte)111;
      byteArray0[4] = (byte)83;
      byteArray0[5] = (byte)4;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("ifne\t\t#-13072", string0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)92;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "7[{@:9'O1B");
      byteArray0[1] = (byte) (-90);
      byteArray0[2] = (byte)81;
      byteArray0[3] = (byte) (-66);
      Utility.equals(byteArray0, byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 557, (int) (byte) (-90));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Utility.decode("|h%.cej$)h5A&", false);
      try { 
        Utility.methodSignatureReturnType("|h%.cej$)h5A&");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `h5A&'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)97;
      byteArray0[1] = (byte)104;
      byteArray0[2] = (byte)126;
      byteArray0[3] = (byte)86;
      byteArray0[4] = (byte) (-60);
      ConstantPool constantPool0 = null;
      Utility.codeToString(byteArray0, (ConstantPool) null, 5, 166);
      boolean boolean0 = true;
      Utility.format(63, (byte)86, true, '#');
      Utility.clearBit(60, (byte)86);
      String string0 = "Q]G.Z!Lt";
      String string1 = "Bsj,E";
      int int0 = (-4070);
      int int1 = (-197);
      URI uRI0 = MockURI.aFTPURI;
      URI uRI1 = MockURI.resolve(uRI0, "");
      MockFile mockFile0 = null;
      try {
        mockFile0 = new MockFile(uRI1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // URI scheme is not \"file\"
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      String string0 = "/";
      try { 
        Utility.typeOfSignature("/");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: /
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)58;
      byteArray0[1] = (byte)35;
      byteArray0[2] = (byte)45;
      byteArray0[3] = (byte)34;
      byteArray0[4] = (byte) (-128);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, 144, (int) (byte) (-128), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Utility.typeOfSignature("ZiH(f2");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)4;
      byteArray0[1] = (byte)4;
      byteArray0[2] = (byte)4;
      byteArray0[3] = (byte)4;
      byteArray0[4] = (byte)4;
      byteArray0[5] = (byte)4;
      byteArray0[6] = (byte)4;
      Utility.toHexString(byteArray0);
      String string0 = "org.apache.commons.io.filefilter.AgeFileFilter";
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString((String) null, "<=", "org.apache.commons.io.filefilter.AgeFileFilter", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Utility.fillup("0;?hq", 59, true, '.');
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)81;
      byteArray0[1] = (byte)42;
      byteArray0[2] = (byte)115;
      byteArray0[3] = (byte) (-17);
      byteArray0[4] = (byte) (-53);
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-17), (int) (byte)42);
      try { 
        Utility.methodSignatureReturnType("0;?hq......................................................");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `0;?hq......................................................'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)91;
      byteArray0[1] = (byte)79;
      byteArray0[2] = (byte)112;
      byteArray0[3] = (byte)12;
      byteArray0[4] = (byte)79;
      byteArray0[5] = (byte) (-108);
      byteArray0[6] = (byte) (-27);
      byteArray0[7] = (byte)34;
      byteArray0[8] = (byte)67;
      Constant[] constantArray0 = new Constant[6];
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref((-2591), 79);
      constantArray0[0] = (Constant) constantInterfaceMethodref0;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantString constantString0 = new ConstantString(byteSequence0);
      ConstantString constantString1 = new ConstantString(constantString0);
      constantArray0[1] = (Constant) constantString1;
      ConstantDouble constantDouble0 = new ConstantDouble((byte)67);
      constantArray0[2] = (Constant) constantDouble0;
      ConstantFieldref constantFieldref0 = new ConstantFieldref(byteSequence0);
      constantArray0[3] = (Constant) constantFieldref0;
      ConstantLong constantLong0 = new ConstantLong((byte)79);
      constantArray0[4] = (Constant) constantLong0;
      ConstantFieldref constantFieldref1 = new ConstantFieldref(2433, (-3694));
      constantArray0[5] = (Constant) constantFieldref1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, 53, 146, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      byte[] byteArray0 = new byte[19];
      byteArray0[0] = (byte) (-85);
      byteArray0[2] = (byte)27;
      byteArray0[3] = (byte)62;
      byteArray0[4] = (byte) (-59);
      byteArray0[6] = (byte) (-19);
      byteArray0[7] = (byte) (-13);
      Constant[] constantArray0 = new Constant[7];
      ConstantInteger constantInteger0 = new ConstantInteger((-1964));
      constantArray0[2] = (Constant) constantInteger0;
      ConstantDouble constantDouble0 = new ConstantDouble(563.11);
      constantArray0[3] = (Constant) constantDouble0;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref(byteSequence0);
      constantArray0[4] = (Constant) constantInterfaceMethodref0;
      ConstantMethodType constantMethodType0 = new ConstantMethodType((byte)27);
      constantArray0[5] = (Constant) constantMethodType0;
      ConstantMethodType constantMethodType1 = new ConstantMethodType(constantMethodType0);
      constantArray0[6] = (Constant) constantMethodType1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      int int0 = 65;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, 65, (-2429), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byte byte0 = (byte) (-72);
      byteArray0[2] = (byte)60;
      byteArray0[3] = (byte)28;
      byteArray0[4] = (byte)52;
      byteArray0[5] = (byte)53;
      byte byte1 = (byte)65;
      ConstantPool constantPool0 = null;
      Utility.codeToString(byteArray0, (ConstantPool) null, (-1374), (-1579));
      String[] stringArray0 = new String[4];
      stringArray0[0] = "Yr$<g<mdQQ^o5vCe/";
      stringArray0[1] = "if_icmpne";
      stringArray0[2] = "0:    nop\n1:    nop\n2:    istore_1\n3:    iload_2\n4:    caload\n5:    saload\n6:    nop\n";
      stringArray0[3] = "0:    nop\n1:    nop\n2:    istore_1\n3:    iload_2\n4:    caload\n5:    saload\n6:    nop\n";
      Utility.methodTypeToSignature("0:    nop\n1:    nop\n2:    istore_1\n3:    iload_2\n4:    caload\n5:    saload\n6:    nop\n", stringArray0);
      Utility.getSignature("Yr$<g<mdQQ^o5vCe/");
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-72), (int) (byte)28);
      Utility.isJavaIdentifierPart('?');
      boolean boolean0 = false;
      Utility.fillup("0:    nop\n1:    nop\n2:    istore_1\n3:    iload_2\n4:    caload\n5:    saload\n6:    nop\n", (byte)60, false, 'i');
      // Undeclared exception!
      try { 
        Utility.signatureToString("  >Z38Z]~2]g");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `  >Z38Z]~2]g'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-19);
      byteArray0[1] = (byte) (-118);
      byteArray0[2] = (byte) (-83);
      byteArray0[3] = (byte)38;
      byteArray0[4] = (byte)122;
      byteArray0[5] = (byte)76;
      byteArray0[6] = (byte) (-16);
      byteArray0[7] = (byte)75;
      boolean boolean0 = true;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      boolean boolean1 = true;
      Utility.codeToString(byteArray0, (ConstantPool) null, 4, (-1451), true);
      String string0 = "@*";
      Utility.compactClassName("@*", true);
      String string1 = "*8llo_1";
      Method method0 = null;
      try {
        method0 = new Method((DataInput) null, (ConstantPool) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.FieldOrMethod", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Utility.format(14, 1646, false, 'G');
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)71;
      byteArray0[1] = (byte) (-100);
      byteArray0[2] = (byte)11;
      byteArray0[3] = (byte)102;
      byteArray0[4] = (byte)49;
      byteArray0[5] = (byte)107;
      byteArray0[6] = (byte)32;
      byteArray0[7] = (byte)11;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)102, 14);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      Object object5 = new Object();
      objectArray0[5] = object5;
      Object object6 = new Object();
      objectArray0[6] = object6;
      boolean boolean0 = false;
      Utility.printArray(objectArray0, false);
      String string0 = "4'2jX.c-\"~h2i'`,7xM";
      try { 
        Utility.typeOfSignature("4'2jX.c-\"~h2i'`,7xM");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 4'2jX.c-\"~h2i'`,7xM
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      int int0 = 48;
      Utility.isSet(48, 48);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-76);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      int int0 = Utility.clearBit((-557), (-4165));
      assertEquals((-134218285), int0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-93);
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte)24;
      byteArray0[3] = (byte) (-80);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("if_icmpgt\t\t#536", string0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      Utility.printArray(objectArray0, true, true);
      Utility.compactClassName("'", "instanceof", true);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)95;
      byteArray0[1] = (byte)85;
      byteArray0[2] = (byte) (-3);
      byteArray0[3] = (byte) (-119);
      byteArray0[4] = (byte)44;
      byteArray0[5] = (byte) (-45);
      byteArray0[6] = (byte)102;
      byteArray0[7] = (byte)54;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      String string0 = Utility.codeToString(byteSequence0, constantPool1);
      assertEquals("swap", string0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      Utility.isSet((-1625), 1862);
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = "6pWag705 j6CR.D/nCI";
      try { 
        Utility.typeOfSignature("6pWag705 j6CR.D/nCI");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 6pWag705 j6CR.D/nCI
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Utility.isSet(3940, 3940);
      Utility.printArray((Object[]) null, false, false);
      Utility.classOrInterface(3940);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)93;
      byteArray0[1] = (byte)70;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)69;
      byteArray0[4] = (byte) (-58);
      byteArray0[5] = (byte)88;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byteArray0[6] = (byte) (-82);
      byteArray0[7] = (byte) (-124);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0);
      assertEquals("dup2_x1", string0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      try { 
        Utility.typeOfSignature("P,N6X7sKG!Z#qw");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: P,N6X7sKG!Z#qw
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)73;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)73, (int) (byte)73);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byte byte0 = (byte) (-72);
      byteArray0[1] = (byte) (-77);
      byte byte1 = (byte)60;
      byteArray0[2] = (byte)60;
      byteArray0[3] = (byte)28;
      byteArray0[4] = (byte)52;
      byteArray0[5] = (byte)53;
      byteArray0[6] = (byte)65;
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (-1374), (-1579));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      try { 
        Utility.typeOfSignature("3U3p~|1Gb=HR&Ci");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 3U3p~|1Gb=HR&Ci
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      String string0 = "'";
      try { 
        Utility.typeOfSignature("'");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: '
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)97;
      byteArray0[1] = (byte)87;
      byteArray0[2] = (byte) (-97);
      byteArray0[3] = (byte) (-24);
      byteArray0[4] = (byte)39;
      byteArray0[5] = (byte)59;
      byteArray0[6] = (byte)82;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, 223, 1336);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      int int0 = Utility.clearBit(93, 93);
      assertEquals(93, int0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)62;
      byteArray0[1] = (byte)123;
      byteArray0[2] = (byte)26;
      byteArray0[3] = (byte)71;
      byteArray0[4] = (byte)4;
      byteArray0[5] = (byte)59;
      byteArray0[6] = (byte) (-45);
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte)82;
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (-5406), 93);
      assertEquals("0:    istore_3\n1:    lshr\n2:    iload_0\n3:    dstore_0\n4:    iconst_1\n5:    istore_0\n6:    <illegal opcode>\n7:    nop\n8:    dastore\n", string0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Utility.classOrInterface(6);
      Utility.classOrInterface(75);
      Utility.replace("8XQ", "8XQ", "H=(p");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "BHu");
      Utility.compactClassName("class", "&6 K1y<Rj!", false);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "class";
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) "H=(p";
      objectArray0[3] = (Object) "&6 K1y<Rj!";
      objectArray0[4] = (Object) "BHu";
      objectArray0[5] = (Object) "class";
      objectArray0[6] = (Object) "BHu";
      objectArray0[7] = (Object) "&6 K1y<Rj!";
      Utility.printArray(objectArray0, true, false);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)68;
      byteArray0[1] = (byte)89;
      byteArray0[2] = (byte) (-4);
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte)72;
      byteArray0[5] = (byte)98;
      byteArray0[6] = (byte)8;
      byteArray0[7] = (byte) (-98);
      byteArray0[8] = (byte) (-56);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 1116, (-1754), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Utility.compactClassName("pLwN5y|)x", true);
      Utility.compactClassName("AFz'x}@=o4");
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-4);
      byteArray0[1] = (byte) (-14);
      byteArray0[2] = (byte) (-28);
      Utility.toHexString(byteArray0);
      Utility.searchOpcode("pLwN5y|)x");
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-14), (-2166));
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) "pLwN5y|)x";
      objectArray0[1] = (Object) "fc f2 e4";
      objectArray0[2] = (Object) (byte) (-14);
      objectArray0[3] = (Object) "fc f2 e4";
      objectArray0[4] = (Object) "fc f2 e4";
      Utility.printArray(objectArray0);
      Utility.convertString("0:    <illegal opcode>\n1:    <illegal opcode>\n2:    <illegal opcode>\n");
      try { 
        Utility.methodSignatureReturnType("7$.ZBOp(^R]@`k!", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `7$.ZBOp(^R]@`k!'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      String string0 = "+b_";
      try { 
        Utility.typeOfSignature("+b_");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: b_
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      String string0 = ")";
      try { 
        Utility.typeOfSignature(")");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: )
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String string0 = "YhU*:6T7vh^";
      try { 
        Utility.typeOfSignature("YhU*:6T7vh^");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: YhU*:6T7vh^
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      String string0 = "!";
      try { 
        Utility.typeOfSignature("!");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-124);
      byteArray0[1] = (byte) (-124);
      byteArray0[2] = (byte)41;
      byteArray0[3] = (byte)91;
      byteArray0[4] = (byte) (-115);
      byteArray0[5] = (byte) (-83);
      byteArray0[6] = (byte) (-101);
      byteArray0[7] = (byte)41;
      byteArray0[8] = (byte) (-103);
      Constant[] constantArray0 = new Constant[1];
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getCachedInstance(":9*U]Skn{O4i=W");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ConstantUtf8 constantUtf8_1 = new ConstantUtf8(constantUtf8_0);
      constantUtf8_1.copy();
      ConstantUtf8.getInstance(":9*U]Skn{O4i=W");
      constantArray0[0] = (Constant) constantUtf8_1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-115), (int) (byte) (-115));
      assertEquals("0:    iinc\t\t%132\t41\n3:    dup_x2\n4:    f2d\n5:    lreturn\n6:    iflt\t\t#10655\n", string0);
      
      String string1 = Utility.classOrInterface((byte)41);
      assertEquals("class", string1);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[2] = (byte)14;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)14;
      byteArray0[3] = (byte) (-73);
      byteArray0[4] = (byte) (-127);
      byteArray0[5] = (byte) (-4);
      byteArray0[6] = (byte)63;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-1), 64, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-85);
      byteArray0[2] = (byte)27;
      byteArray0[3] = (byte)62;
      byteArray0[4] = (byte) (-59);
      byteArray0[6] = (byte) (-19);
      byteArray0[7] = (byte) (-13);
      Constant[] constantArray0 = new Constant[7];
      ConstantInteger constantInteger0 = new ConstantInteger((-1964));
      constantArray0[2] = (Constant) constantInteger0;
      ConstantDouble constantDouble0 = new ConstantDouble(563.11);
      constantArray0[3] = (Constant) constantDouble0;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref(byteSequence0);
      constantArray0[4] = (Constant) constantInterfaceMethodref0;
      ConstantMethodType constantMethodType0 = new ConstantMethodType((byte)27);
      constantArray0[5] = (Constant) constantMethodType0;
      ConstantMethodType constantMethodType1 = new ConstantMethodType(constantMethodType0);
      constantArray0[6] = (Constant) constantMethodType1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      int int0 = 65;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, 65, (-2429), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-120);
      byteArray0[1] = (byte)22;
      byteArray0[2] = (byte)10;
      byteArray0[3] = (byte) (-68);
      byteArray0[4] = (byte)90;
      byteArray0[5] = (byte)65;
      byteArray0[6] = (byte) (-39);
      byteArray0[7] = (byte)4;
      byteArray0[8] = (byte) (-23);
      Utility.toHexString(byteArray0);
      Constant[] constantArray0 = new Constant[1];
      ConstantDouble constantDouble0 = new ConstantDouble(4093.1627);
      ConstantDouble constantDouble1 = new ConstantDouble(constantDouble0);
      constantArray0[0] = (Constant) constantDouble1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, (int) (byte)10, (-311));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byte byte0 = (byte) (-72);
      byteArray0[0] = (byte) (-72);
      byteArray0[1] = (byte) (-77);
      byte byte1 = (byte)60;
      byteArray0[2] = (byte)60;
      byteArray0[3] = (byte)28;
      byteArray0[4] = (byte)52;
      byteArray0[5] = (byte)53;
      byteArray0[6] = (byte)65;
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (-1374), (-1579));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-29);
      byteArray0[1] = (byte)67;
      byteArray0[2] = (byte)40;
      byteArray0[3] = (byte)35;
      Constant[] constantArray0 = new Constant[1];
      ConstantFloat constantFloat0 = new ConstantFloat((byte)67);
      ConstantFloat constantFloat1 = new ConstantFloat(constantFloat0);
      constantArray0[0] = (Constant) constantFloat1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      String string0 = Utility.codeToString(byteArray0, constantPool1, (-3035), (int) (byte)35);
      assertEquals("0:    <illegal opcode>\n1:    fstore_0\n2:    dload_2\n3:    fload_1\n", string0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byte byte0 = (byte)70;
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "\")");
      byteArray0[0] = (byte)70;
      byteArray0[1] = (byte) (-119);
      byteArray0[2] = (byte)96;
      byte byte1 = (byte)81;
      byteArray0[3] = (byte)81;
      byteArray0[4] = (byte) (-87);
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-87), (-411), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    fstore_3
         // 1:    l2f
         // 2:    iadd
         // 3:    fastore
         // 4:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      Object object5 = new Object();
      objectArray0[5] = object5;
      Object object6 = new Object();
      objectArray0[6] = object6;
      Object object7 = new Object();
      objectArray0[7] = object7;
      Object object8 = new Object();
      objectArray0[8] = object8;
      String string0 = Utility.printArray(objectArray0, false);
      String string1 = Utility.printArray(objectArray0);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      Utility.compactClassName("java.lang.Object@3705cef7, java.lang.Object@3ead2fde, java.lang.Object@52175580, java.lang.Object@54f0494, java.lang.Object@1c2410bc, java.lang.Object@4b200f39, java.lang.Object@23f3e888, java.lang.Object@5e6523c6, java.lang.Object@62786946", true);
      String string2 = Utility.compactClassName("float", "rbDr", true);
      assertEquals("float", string2);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      String string0 = "(89=ay!";
      try { 
        Utility.typeOfMethodSignature("(89=ay!");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: (89=ay!
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-2);
      byteArray0[1] = (byte)71;
      byteArray0[2] = (byte) (-74);
      byteArray0[3] = (byte) (-97);
      byteArray0[4] = (byte) (-74);
      byteArray0[5] = (byte)81;
      byteArray0[6] = (byte) (-115);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[4];
      ConstantMethodType constantMethodType0 = new ConstantMethodType(byteSequence0);
      constantArray0[0] = (Constant) constantMethodType0;
      ConstantMethodType constantMethodType1 = new ConstantMethodType(161);
      constantArray0[1] = (Constant) constantMethodType1;
      ConstantLong constantLong0 = new ConstantLong(0L);
      constantArray0[2] = (Constant) constantLong0;
      ConstantMethodType constantMethodType2 = new ConstantMethodType(982);
      constantArray0[3] = (Constant) constantMethodType2;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, constantPool1, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 40886. Constant pool size is: 4
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      String string0 = "A>&H&qR,t_){";
      try { 
        Utility.typeOfSignature("A>&H&qR,t_){");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: A>&H&qR,t_){
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      short short0 = Utility.searchOpcode("Unreachable default case reached!");
      assertEquals((short) (-1), short0);
      
      String string0 = Utility.accessToString(82, false);
      assertEquals("private final volatile", string0);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "private final volatile";
      String string1 = Utility.printArray(objectArray0, false, true);
      assertNotNull(string1);
      assertEquals("\"private final volatile\"", string1);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "\"private final volatile\"";
      Utility.methodTypeToSignature("\"private final volatile\"", stringArray0);
      String string2 = Utility.format(88, 282, false, ')');
      assertEquals("))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))88", string2);
      
      Utility.methodSignatureArgumentTypes("(L\"private;)L\"private;");
      String string3 = Utility.getSignature("Unreachable default case reached!");
      assertEquals("LUnreachable;", string3);
      
      int int0 = Utility.clearBit((short) (-1), 78);
      assertEquals((-16385), int0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte) (-22);
      byteArray0[2] = (byte)65;
      byteArray0[3] = (byte)112;
      byteArray0[4] = (byte)65;
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-22), 77, false);
      assertEquals("0:    aconst_null\n1:    <illegal opcode>\n2:    lstore_2\n3:    irem\n4:    lstore_2\n", string0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Utility.setBit(467, 467);
      byte[] byteArray0 = new byte[7];
      byte byte0 = (byte)32;
      byteArray0[0] = (byte)32;
      byteArray0[1] = (byte)22;
      byteArray0[2] = (byte)54;
      byteArray0[3] = (byte)6;
      byteArray0[4] = (byte)10;
      byteArray0[5] = (byte)76;
      byteArray0[6] = (byte) (-54);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)32, (int) (byte) (-54), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)64;
      byteArray0[1] = (byte) (-82);
      byteArray0[2] = (byte) (-94);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-82), 166, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    lstore_1
         // 1:    freturn
         // 2:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Utility.format(14, 1646, false, 'G');
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)71;
      byteArray0[1] = (byte) (-100);
      byteArray0[2] = (byte)11;
      byteArray0[3] = (byte)102;
      byteArray0[4] = (byte)46;
      byteArray0[5] = (byte) (-127);
      byteArray0[6] = (byte)32;
      byteArray0[7] = (byte)11;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)102, 14);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      String string0 = "$c_1s<VoCj";
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.decode("$c_1s<VoCj", false);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"c_\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Utility.accessToString((-1248));
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-65);
      byteArray0[1] = (byte) (-123);
      byteArray0[2] = (byte) (-64);
      byteArray0[3] = (byte)69;
      byteArray0[4] = (byte) (-35);
      byteArray0[5] = (byte)82;
      byteArray0[6] = (byte) (-55);
      byteArray0[7] = (byte)9;
      byteArray0[8] = (byte)47;
      Constant[] constantArray0 = new Constant[3];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantString constantString0 = new ConstantString(byteSequence0);
      ConstantString constantString1 = new ConstantString(constantString0);
      constantArray0[0] = (Constant) constantString1;
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic(byteSequence0);
      ConstantInvokeDynamic constantInvokeDynamic1 = new ConstantInvokeDynamic(constantInvokeDynamic0);
      constantArray0[1] = (Constant) constantInvokeDynamic1;
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle((-377), (-411));
      constantArray0[2] = (Constant) constantMethodHandle0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 183, 427, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 17885. Constant pool size is: 3
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      int int0 = Utility.setBit((-1620), (-870));
      assertEquals((-1620), int0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-7);
      byteArray0[1] = (byte)91;
      byteArray0[2] = (byte) (-66);
      byteArray0[3] = (byte) (-14);
      byteArray0[4] = (byte)81;
      byteArray0[5] = (byte) (-42);
      Constant[] constantArray0 = new Constant[1];
      ConstantMethodref constantMethodref0 = new ConstantMethodref(132, (-2334));
      constantArray0[0] = (Constant) constantMethodref0;
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      constantMethodref0.accept(emptyVisitor0);
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteArray0, constantPool0, (-1233), 52, false);
      assertEquals("0:    <illegal opcode>\n1:    dup_x2\n2:    arraylength\n3:    <illegal opcode>\n4:    fastore\n5:    <illegal opcode>\n", string0);
      
      String string1 = Utility.replace("wide", "wide", "wide");
      assertEquals("wide", string1);
      
      String string2 = Utility.replace("zXr", "0:    <illegal opcode>\n1:    dup_x2\n2:    arraylength\n3:    <illegal opcode>\n4:    fastore\n5:    <illegal opcode>\n", "wide");
      assertEquals("zXr", string2);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "iinc");
      Utility.isJavaIdentifierPart('9');
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)70;
      Constant[] constantArray0 = new Constant[1];
      ConstantMethodType constantMethodType0 = new ConstantMethodType(3260);
      ConstantMethodType constantMethodType1 = new ConstantMethodType(constantMethodType0);
      constantArray0[0] = (Constant) constantMethodType1;
      constantMethodType1.clone();
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Utility.codeToString(byteArray0, constantPool0, (-1675), 85, true);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      Utility.replace("iinc", "7kMMLdZ", "8l7{!8Y");
      String string0 = Utility.accessToString(99, true);
      Utility.printArray((Object[]) constantArray0, false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      String string1 = Utility.codeToString(byteSequence0, constantPool1, false);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-32);
      byteArray0[1] = (byte)68;
      Constant[] constantArray0 = new Constant[2];
      ConstantClass constantClass0 = new ConstantClass((-1661));
      constantArray0[0] = (Constant) constantClass0;
      ConstantMethodref constantMethodref0 = new ConstantMethodref((-510), (-510));
      ConstantMethodref constantMethodref1 = new ConstantMethodref(constantMethodref0);
      constantArray0[1] = (Constant) constantMethodref1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      String string0 = Utility.codeToString(byteArray0, constantPool1, (int) (byte) (-32), (int) (byte)68, false);
      assertEquals("0:    <illegal opcode>\n1:    fstore_1\n", string0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      int int0 = Utility.setBit((-1620), (-870));
      assertEquals((-1620), int0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-7);
      byteArray0[1] = (byte)85;
      byteArray0[2] = (byte) (-66);
      byteArray0[3] = (byte) (-14);
      byteArray0[4] = (byte)74;
      byteArray0[5] = (byte) (-42);
      Constant[] constantArray0 = new Constant[1];
      ConstantMethodref constantMethodref0 = new ConstantMethodref(132, (-2334));
      constantArray0[0] = (Constant) constantMethodref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteArray0, constantPool0, (-1233), 52, false);
      assertEquals("0:    <illegal opcode>\n1:    castore\n2:    arraylength\n3:    <illegal opcode>\n4:    dstore_3\n5:    <illegal opcode>\n", string0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Utility.searchOpcode("Y@W`>St_n=/");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-128);
      byteArray0[1] = (byte) (-94);
      byteArray0[2] = (byte) (-105);
      byteArray0[3] = (byte) (-66);
      byteArray0[4] = (byte)3;
      byteArray0[5] = (byte) (-52);
      byteArray0[6] = (byte)33;
      byteArray0[7] = (byte)77;
      byteArray0[8] = (byte) (-103);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals("ior", string0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte)44;
      byteArray0[0] = (byte)44;
      ConstantPool constantPool0 = null;
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)44, (int) (byte)44, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)103;
      byteArray0[1] = (byte)75;
      byteArray0[2] = (byte)78;
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte) (-5);
      byteArray0[5] = (byte) (-86);
      byteArray0[6] = (byte)22;
      byteArray0[7] = (byte)58;
      byteArray0[8] = (byte) (-66);
      Constant[] constantArray0 = new Constant[2];
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle((byte) (-66), (-1729));
      constantArray0[0] = (Constant) constantMethodHandle0;
      ConstantString constantString0 = new ConstantString((byte)75);
      constantArray0[1] = (Constant) constantString0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (-1843), (int) (byte)103, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    dsub
         // 1:    astore_0
         // 2:    astore_3
         // 3:    impdep2
         // 4:    <illegal opcode>
         // 5:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte) (-50);
      byteArray0[2] = (byte) (-49);
      byteArray0[3] = (byte)91;
      byteArray0[6] = (byte) (-1);
      byte byte0 = (byte) (-64);
      byteArray0[5] = (byte) (-64);
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte) (-2);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.toString();
      ConstantPool constantPool1 = constantPool0.copy();
      boolean boolean0 = false;
      // Undeclared exception!
      Utility.codeToString(byteArray0, constantPool1, (int) (byte)0, (int) (byte)0, false);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      int int0 = Utility.setBit(387, 387);
      assertEquals(395, int0);
      
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "[]");
      byte byte0 = Utility.typeOfSignature("[]");
      assertEquals((byte)13, byte0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      MockFile mockFile0 = new MockFile(".$+U", ".$+U");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      PrintWriter printWriter0 = mockPrintWriter0.append('\\');
      Object[] objectArray0 = new Object[4];
      mockFile0.deleteOnExit();
      mockPrintWriter0.print("short");
      objectArray0[0] = (Object) printWriter0;
      objectArray0[1] = (Object) mockPrintWriter0;
      objectArray0[2] = (Object) ".$+U";
      objectArray0[3] = (Object) mockFile0;
      Utility.printArray(printWriter0, objectArray0);
      String string0 = Utility.fillup("short", (-309), false, 'j');
      assertEquals("short", string0);
      
      String string1 = Utility.replace("f2l", ".$+U", "422#4Y;E");
      assertEquals("f2l", string1);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Utility.getSignature("iSRSBFwv:>cKz Pmkq");
      Utility.classOrInterface(69);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)37;
      byteArray0[1] = (byte) (-33);
      byteArray0[2] = (byte)124;
      byteArray0[3] = (byte) (-60);
      byteArray0[4] = (byte)46;
      byteArray0[5] = (byte) (-27);
      byteArray0[6] = (byte)21;
      byteArray0[7] = (byte)71;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[2];
      ConstantMethodref constantMethodref0 = new ConstantMethodref((byte) (-60), (-853));
      ConstantMethodref constantMethodref1 = new ConstantMethodref(constantMethodref0);
      constantArray0[0] = (Constant) constantMethodref1;
      ConstantDouble constantDouble0 = new ConstantDouble(0.0);
      ConstantDouble constantDouble1 = new ConstantDouble(constantDouble0);
      constantArray0[1] = (Constant) constantDouble1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(pipedOutputStream0);
      constantPool0.dump(dataOutputStream0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("fload_3", string0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-55);
      byteArray0[1] = (byte)19;
      byteArray0[2] = (byte) (-62);
      byteArray0[3] = (byte)106;
      byteArray0[4] = (byte)9;
      byteArray0[5] = (byte)7;
      byteArray0[6] = (byte)4;
      byteArray0[7] = (byte)3;
      byteArray0[8] = (byte) (-9);
      Utility.equals(byteArray0, byteArray0);
      String string0 = "UEAQb^o*>";
      try { 
        Utility.typeOfSignature("UEAQb^o*>");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: UEAQb^o*>
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-124);
      byteArray0[1] = (byte)84;
      byteArray0[2] = (byte)41;
      byteArray0[3] = (byte)55;
      byteArray0[4] = (byte) (-115);
      byteArray0[5] = (byte) (-83);
      byteArray0[6] = (byte) (-101);
      byteArray0[7] = (byte)64;
      byteArray0[8] = (byte) (-103);
      Constant[] constantArray0 = new Constant[1];
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getCachedInstance(":9*U]Skn{O4i=W");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ConstantUtf8 constantUtf8_1 = new ConstantUtf8(constantUtf8_0);
      constantUtf8_1.copy();
      ConstantUtf8.getInstance(":9*U]Skn{O4i=W");
      constantArray0[0] = (Constant) constantUtf8_1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-115), (int) (byte) (-115));
      assertEquals("0:    iinc\t\t%84\t41\n3:    lstore\t\t%141\n5:    lreturn\n6:    iflt\t\t#16543\n", string0);
      
      String string1 = Utility.classOrInterface((byte)41);
      assertEquals("class", string1);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Utility.isSet(4530, 695);
      Utility.compactClassName("%(j4~'DJX|nc(u6");
      Utility.isJavaIdentifierPart('}');
      try { 
        Utility.typeOfSignature("%(j4~'DJX|nc(u6");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: %(j4~'DJX|nc(u6
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Utility.printArray(objectArray0);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-79);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      byte byte0 = (byte)0;
      byteArray0[1] = (byte)0;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      File file0 = MockFile.createTempFile("vGaDW<iv)#`'$dD\"$;", "impdep1");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0, true);
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockFileOutputStream0);
      constantPool1.dump(dataOutputStream0);
      int int0 = 1027;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, 1027, (-69));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Utility.isSet((-327), (-327));
      byte[] byteArray0 = new byte[0];
      Utility.encode(byteArray0, true);
      try { 
        Utility.decode("$l$8b$I$A$A$A$A$A$A$A", true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // Unexpected end of ZLIB input stream
         //
         verifyException("java.util.zip.InflaterInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "impdep2");
      byteArray0[0] = (byte) (-71);
      Constant[] constantArray0 = new Constant[5];
      ConstantMethodType constantMethodType0 = new ConstantMethodType(5);
      ConstantMethodType constantMethodType1 = new ConstantMethodType(constantMethodType0);
      constantArray0[0] = (Constant) constantMethodType1;
      String string0 = "KznqzX#3";
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getCachedInstance("KznqzX#3");
      constantArray0[1] = (Constant) constantUtf8_0;
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref(189, 189);
      constantArray0[2] = (Constant) constantInterfaceMethodref0;
      ConstantFloat constantFloat0 = new ConstantFloat(5);
      ConstantUtf8.getCachedInstance("KznqzX#3");
      ConstantFloat constantFloat1 = new ConstantFloat(constantFloat0);
      constantInterfaceMethodref0.clone();
      constantArray0[3] = (Constant) constantFloat1;
      ConstantUtf8 constantUtf8_1 = new ConstantUtf8(constantUtf8_0);
      constantMethodType1.clone();
      constantArray0[4] = (Constant) constantUtf8_1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 189, (int) (byte) (-71));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)17;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)17, (int) (byte)17, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)31;
      byteArray0[1] = (byte)90;
      byteArray0[2] = (byte) (-70);
      byteArray0[3] = (byte)20;
      byteArray0[4] = (byte)63;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (-2037), (-1437843445));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Utility.clearBit((-2768), (-2768));
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      Utility.getSignature("OZ");
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "LOZ;";
      objectArray0[1] = (Object) "";
      objectArray0[2] = (Object) null;
      objectArray0[3] = (Object) null;
      objectArray0[4] = (Object) null;
      objectArray0[5] = (Object) "LOZ;";
      Utility.printArray(objectArray0, false, false);
      Utility.compactClassName("OZ");
      Utility.convertString("OZ");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-15);
      byteArray0[1] = (byte) (-99);
      byteArray0[2] = (byte)3;
      byteArray0[3] = (byte) (-2);
      byteArray0[4] = (byte)108;
      byteArray0[5] = (byte)104;
      byteArray0[6] = (byte)30;
      byteArray0[7] = (byte) (-61);
      byteArray0[8] = (byte)34;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 196, 191, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-40);
      byteArray0[1] = (byte) (-121);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-40), (int) (byte) (-121));
      assertEquals("0:    <illegal opcode>\n1:    i2d\n", string0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      String string0 = "void";
      String[] stringArray0 = new String[2];
      stringArray0[0] = "void";
      stringArray0[1] = "void";
      try { 
        Utility.methodTypeToSignature("void", stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid type: void
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      Utility.toHexString(byteArray0);
      Object[] objectArray0 = null;
      Utility.printArray((Object[]) null, false);
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte) (-61);
      byteArray1[1] = (byte)52;
      byteArray1[2] = (byte) (-12);
      byteArray1[3] = (byte)11;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      byteArray1[4] = (byte)125;
      byteArray1[5] = (byte) (-10);
      byteArray1[6] = (byte)54;
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      URI uRI0 = MockURI.aHttpURI;
      MockFile mockFile0 = null;
      try {
        mockFile0 = new MockFile(uRI0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // URI scheme is not \"file\"
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Utility.classOrInterface(1565);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "interface";
      objectArray0[1] = (Object) "interface";
      Utility.printArray(objectArray0, true, false);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)77;
      byteArray0[1] = (byte)60;
      byteArray0[2] = (byte) (-56);
      byteArray0[3] = (byte)5;
      byteArray0[4] = (byte)82;
      byteArray0[5] = (byte) (-121);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 2336, (-5558));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)14;
      byteArray0[1] = (byte)35;
      byteArray0[2] = (byte) (-62);
      byteArray0[3] = (byte) (-60);
      byteArray0[4] = (byte)97;
      byteArray0[5] = (byte)32;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 876, (-447), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      String string0 = "Gm9u+F,T-^3";
      try { 
        Utility.typeOfSignature("Gm9u+F,T-^3");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Gm9u+F,T-^3
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)51;
      Constant[] constantArray0 = new Constant[1];
      ConstantInteger constantInteger0 = new ConstantInteger(7);
      ConstantInteger constantInteger1 = new ConstantInteger(constantInteger0);
      constantArray0[0] = (Constant) constantInteger1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      constantPool0.toString();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)51, (int) (byte)51, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      String string0 = Utility.format(89, 89, false, '6');
      assertEquals("66666666666666666666666666666666666666666666666666666666666666666666666666666666666666689", string0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-52);
      byteArray0[1] = (byte)12;
      byteArray0[2] = (byte)76;
      byteArray0[3] = (byte) (-4);
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte) (-110);
      byteArray0[6] = (byte) (-52);
      String string1 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-4), (int) (byte)12, false);
      assertEquals("0:    <illegal opcode>\n1:    fconst_1\n2:    astore_1\n3:    <illegal opcode>\n4:    impdep2\n5:    i2c\n6:    <illegal opcode>\n", string1);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      String string0 = Utility.compactClassName("4bDP", "C*TX p%8H", false);
      assertEquals("4bDP", string0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-26);
      byteArray0[1] = (byte)36;
      byteArray0[2] = (byte)89;
      byteArray0[3] = (byte)105;
      byteArray0[4] = (byte)42;
      byteArray0[5] = (byte)83;
      byteArray0[6] = (byte)88;
      byteArray0[7] = (byte) (-81);
      byteArray0[8] = (byte)103;
      Utility.equals(byteArray0, byteArray0);
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean0);
      
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string1 = Utility.codeToString(byteArray0, constantPool0, 1, (-3095), true);
      assertEquals("1:    fload_2\n2:    dup\n3:    lmul\n4:    aload_0\n5:    aastore\n6:    pop2\n7:    dreturn\n8:    dsub\n", string1);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-66);
      byteArray0[1] = (byte) (-50);
      byteArray0[2] = (byte) (-49);
      byteArray0[3] = (byte)91;
      byteArray0[4] = (byte) (-1);
      byte byte0 = (byte) (-64);
      byteArray0[5] = (byte) (-64);
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte) (-2);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.toString();
      ConstantPool constantPool1 = constantPool0.copy();
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, (int) (byte) (-1), (int) (byte) (-66), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 254. Constant pool size is: 0
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)46;
      byteArray0[1] = (byte)92;
      byte byte0 = (byte)72;
      byteArray0[2] = (byte)72;
      boolean boolean0 = false;
      Utility.encode(byteArray0, false);
      Utility.classOrInterface((byte)92);
      Object[] objectArray0 = new Object[0];
      Utility.printArray(objectArray0);
      String string0 = "XkV=3eSP-";
      String[] stringArray0 = new String[2];
      stringArray0[0] = "$$$5cH";
      stringArray0[1] = "XkV=3eSP-";
      Utility.methodTypeToSignature("XkV=3eSP-", stringArray0);
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)92, 108);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      String string0 = "? super ";
      try { 
        Utility.typeOfSignature("? super ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ? super 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      String string0 = "7U'<A[*;a";
      Utility.convertString("7U'<A[*;a");
      boolean boolean0 = false;
      Utility.accessToString(1073, false);
      try { 
        Utility.typeOfSignature("7U'<A[*;a");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 7U'<A[*;a
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Utility.isJavaIdentifierPart('#');
      String string0 = "SAME";
      Utility.methodSignatureReturnType("SAME");
      try { 
        Utility.typeOfSignature("O*Y5#.3m+?)en78R_");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: O*Y5#.3m+?)en78R_
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      int int0 = 84;
      Utility.format(84, (-2240), true, ',');
      Utility.isSet((-2240), 84);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "84";
      Object object0 = new Object();
      objectArray0[1] = object0;
      Utility.printArray(objectArray0, true);
      Utility.fillup("{84, java.lang.Object@292966cd}", 72, false, 'W');
      Utility.clearBit((-2240), (-2240));
      try { 
        Utility.typeOfSignature("R[=:GCZN6~}1@A");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: R[=:GCZN6~}1@A
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      boolean boolean0 = true;
      Utility.accessToString(58, true);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)35;
      byteArray0[1] = (byte)13;
      byteArray0[2] = (byte)50;
      byteArray0[3] = (byte)53;
      byteArray0[4] = (byte)76;
      byteArray0[5] = (byte)20;
      byteArray0[6] = (byte) (-6);
      byteArray0[7] = (byte)67;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 3155, (int) (byte)50);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte) (-83);
      byteArray0[0] = (byte) (-83);
      ConstantPool constantPool0 = null;
      boolean boolean0 = true;
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-83), (-194), true);
      try { 
        Utility.typeOfSignature("0:    lreturn\n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 0:    lreturn
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Utility.clearBit(39, 39);
      String string0 = "lL=/&doX$";
      Utility.replace("lL=/&doX$", "lL=/&doX$", "lL=/&doX$");
      try { 
        Utility.typeOfSignature("9WP7YHa");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 9WP7YHa
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "[!SLtlS?X6{_vu2GKO";
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature("[!SLtlS?X6{_vu2GKO", stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal type: [!SLtlS?X6{_vu2GKO
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      String string0 = ">\t";
      try { 
        Utility.typeOfSignature(">\t");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: >\t
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      String string0 = "@M'p";
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      Utility.compactClassName("@M'p", "@M'p", false);
      try { 
        Utility.typeOfSignature("@M'p");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: @M'p
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      try { 
        Utility.typeOfSignature("#>`:");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: #>`:
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      String string0 = ", code_length = ";
      try { 
        Utility.typeOfSignature(", code_length = ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: , code_length = 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte)55;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      byteArray0[0] = (byte)55;
      byteArray0[1] = (byte)71;
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)71, (int) (byte)55);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)62;
      byteArray0[1] = (byte)112;
      byteArray0[2] = (byte) (-85);
      byteArray0[3] = (byte)26;
      byteArray0[4] = (byte)74;
      byteArray0[5] = (byte)87;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      byteArray0[6] = (byte) (-40);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)62, 1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      String string0 = "GCN2Gm'xcfP ";
      try { 
        Utility.methodSignatureReturnType("GCN2Gm'xcfP ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `GCN2Gm'xcfP '
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      String string0 = "multianewarray";
      byte[] byteArray0 = Utility.decode("multianewarray", false);
      Utility.getSignature("=kQV3'V");
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 36, 36);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Utility.isJavaIdentifierPart('S');
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ":EpA\"4]i|gZbf6[~");
      Utility.accessToString(53);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-27);
      byteArray0[1] = (byte)19;
      byteArray0[2] = (byte)5;
      byteArray0[3] = (byte) (-5);
      byteArray0[4] = (byte) (-99);
      byteArray0[5] = (byte)14;
      byteArray0[6] = (byte) (-66);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 118, (-610));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-47);
      byteArray0[1] = (byte) (-113);
      byteArray0[2] = (byte)102;
      byteArray0[3] = (byte) (-20);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 49, (int) (byte) (-113));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = Utility.replace("6ChmwRY.p2", "char", "char");
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)110;
      byteArray0[1] = (byte)112;
      byteArray0[2] = (byte)83;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string1 = Utility.codeToString(byteSequence0, constantPool0);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-85);
      byteArray0[1] = (byte)51;
      byteArray0[2] = (byte)27;
      byteArray0[3] = (byte)62;
      byteArray0[4] = (byte) (-59);
      byteArray0[5] = (byte)103;
      byteArray0[6] = (byte) (-19);
      byteArray0[7] = (byte) (-13);
      Constant[] constantArray0 = new Constant[7];
      ConstantClass constantClass0 = new ConstantClass(2402);
      ConstantClass constantClass1 = new ConstantClass(constantClass0);
      constantArray0[0] = (Constant) constantClass1;
      ConstantClass constantClass2 = new ConstantClass(constantClass1);
      constantArray0[1] = (Constant) constantClass2;
      ConstantInteger constantInteger0 = new ConstantInteger((-1964));
      constantArray0[2] = (Constant) constantInteger0;
      ConstantDouble constantDouble0 = new ConstantDouble(563.11);
      constantArray0[3] = (Constant) constantDouble0;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref(byteSequence0);
      constantArray0[4] = (Constant) constantInterfaceMethodref0;
      ConstantMethodType constantMethodType0 = new ConstantMethodType((byte)27);
      constantArray0[5] = (Constant) constantMethodType0;
      ConstantMethodType constantMethodType1 = new ConstantMethodType(constantMethodType0);
      constantArray0[6] = (Constant) constantMethodType1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, 65, (-2429), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)4;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-38);
      byteArray0[3] = (byte) (-87);
      byteArray0[4] = (byte)108;
      byteArray0[5] = (byte) (-40);
      byteArray0[6] = (byte)25;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, (int) (byte) (-38), 2315, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    iconst_1
         // 1:    impdep2
         // 2:    <illegal opcode>
         // 3:    ret\t\t%108
         // 5:    <illegal opcode>
         // 6:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      String string0 = "Nu1w";
      boolean boolean0 = true;
      try { 
        Utility.methodSignatureReturnType("Nu1w", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Nu1w'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)7;
      byteArray0[1] = (byte) (-48);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)7;
      byteArray0[4] = (byte)31;
      byteArray0[5] = (byte)105;
      byteArray0[6] = (byte)4;
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (-1540), 142, false);
      Utility.decode("0:    iconst_4\n1:    <illegal opcode>\n2:    nop\n3:    iconst_4\n4:    lload_1\n5:    lmul\n6:    iconst_1\n", false);
      String string1 = Utility.encode(byteArray0, false);
      assertEquals("$H$d0$A$H$li$E", string1);
      
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) null;
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) (byte)4;
      objectArray0[3] = (Object) null;
      Utility.printArray(objectArray0, false, false);
      String string2 = Utility.compactClassName("0:    iconst_4\n1:    <illegal opcode>\n2:    nop\n3:    iconst_4\n4:    lload_1\n5:    lmul\n6:    iconst_1\n");
      assertTrue(string2.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)88;
      byteArray0[1] = (byte) (-34);
      byteArray0[2] = (byte) (-117);
      byteArray0[3] = (byte)36;
      byteArray0[4] = (byte)62;
      byteArray0[5] = (byte)24;
      byteArray0[6] = (byte) (-3);
      byteArray0[7] = (byte) (-67);
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean0);
      
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "qiMGEi&|6>g5^~");
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      Utility.printArray((Object[]) null, true, true);
      String string0 = Utility.getSignature("java.lang.2b] <|&e=y");
      assertEquals("Ljava/lang/2b];", string0);
      
      byte[] byteArray1 = Utility.decode("java.lang.2b] <|&e=y", false);
      assertEquals(20, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)14;
      byteArray0[1] = (byte)35;
      byteArray0[2] = (byte) (-62);
      byteArray0[3] = (byte) (-47);
      byteArray0[4] = (byte)97;
      byteArray0[5] = (byte)32;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 876, (-447), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Utility.printArray(objectArray0);
      Utility.fillup("K&N^*[~!4.;n;", 2236, false, 'f');
      try { 
        Utility.typeOfSignature("=ES#v|hkZ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: =ES#v|hkZ
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Utility.setBit(56, 56);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-67);
      byteArray0[1] = (byte) (-116);
      Constant[] constantArray0 = new Constant[1];
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic(65535, 65535);
      constantArray0[0] = (Constant) constantInvokeDynamic0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-116), 56, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "L:8`2T|;V");
      Utility.isJavaIdentifierPart('t');
      Utility.convertString("L:8`2T|;V");
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)74;
      byteArray0[2] = (byte)49;
      byteArray0[3] = (byte) (-58);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (-2616), (int) (byte)74);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    nop
         // 1:    dstore_3
         // 2:    daload
         // 3:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      try { 
        Utility.typeOfSignature("\"(UV<8R@~Z");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: \"(UV<8R@~Z
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)13;
      byteArray0[1] = (byte)60;
      byteArray0[2] = (byte)0;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      byteArray0[3] = (byte)18;
      byteArray0[4] = (byte) (-77);
      byteArray0[5] = (byte)66;
      byteArray0[6] = (byte)67;
      byteArray0[7] = (byte)67;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readUnsignedByte();
      byteSequence0.readInt();
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      boolean boolean0 = false;
      Utility.fillup("oU$Br", (-988), false, ',');
      String string0 = null;
      // Undeclared exception!
      try { 
        Utility.compactClassName("UNKNOWN (", (String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-64);
      byteArray0[1] = (byte)91;
      byteArray0[2] = (byte)85;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = null;
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)3;
      byteArray0[1] = (byte)69;
      Constant[] constantArray0 = new Constant[1];
      ConstantFieldref constantFieldref0 = new ConstantFieldref((byte)3, (byte)69);
      constantArray0[0] = (Constant) constantFieldref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)3, 252);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "Jds<H";
      stringArray0[1] = "Jds<H";
      stringArray0[2] = "Jds<H";
      stringArray0[3] = "Jds<H";
      stringArray0[4] = "Jds<H";
      stringArray0[5] = "Jds<H";
      Utility.methodTypeToSignature("Jds<H", stringArray0);
      boolean boolean0 = true;
      Utility.methodSignatureReturnType("Jds<H", true);
      int int0 = 1894;
      Utility.accessToString(1894);
      byte[] byteArray0 = new byte[0];
      Constant[] constantArray0 = new Constant[6];
      File file0 = MockFile.createTempFile("jq", "Jds<H");
      MockRandomAccessFile mockRandomAccessFile0 = null;
      try {
        mockRandomAccessFile0 = new MockRandomAccessFile(file0, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      try { 
        Utility.typeOfSignature("H7f9+h1*q}8");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: H7f9+h1*q}8
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)48;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)48, (int) (byte)48);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      MockPrintStream mockPrintStream0 = new MockPrintStream("BFp9%ztFh");
      Object[] objectArray0 = new Object[0];
      Utility.printArray((PrintStream) mockPrintStream0, objectArray0);
      String string0 = Utility.classOrInterface((-1724775755));
      assertEquals("interface", string0);
      
      String string1 = Utility.methodSignatureReturnType("B");
      assertEquals("byte", string1);
      
      int int0 = Utility.setBit(40, (-1724775755));
      assertEquals(2097192, int0);
      
      String string2 = Utility.printArray(objectArray0, false);
      assertNotNull(string2);
      assertEquals("", string2);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      Object object5 = new Object();
      objectArray0[5] = object5;
      Utility.printArray(objectArray0);
      Utility.format((-293), 2906, true, '@');
      Utility.printArray(objectArray0, true);
      Utility.methodTypeToSignature("{java.lang.Object@1848e1e4, java.lang.Object@67143919, java.lang.Object@7e4d22f, java.lang.Object@61a948bc, java.lang.Object@3e31d2ac, java.lang.Object@782bf882}", (String[]) null);
      try { 
        Utility.typeOfSignature("()L{java/lang/Object@1848e1e4,;");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ()L{java/lang/Object@1848e1e4,;
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)47;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      String string0 = "&^rRLfc";
      Utility.replace("&^rRLfc", "&^rRLfc", "&^rRLfc");
      try { 
        Utility.typeOfSignature("&^rRLfc");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: &^rRLfc
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)58;
      byteArray0[1] = (byte) (-77);
      byteArray0[2] = (byte)85;
      Utility.toHexString(byteArray0);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      try { 
        Utility.methodSignatureReturnType("3a b3 55", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `3a b3 55'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      String string0 = ".-";
      try { 
        Utility.typeOfSignature(".-");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: .-
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-19);
      byteArray0[1] = (byte) (-118);
      byteArray0[2] = (byte) (-83);
      byteArray0[3] = (byte)32;
      byteArray0[4] = (byte)122;
      byteArray0[5] = (byte)76;
      byteArray0[6] = (byte) (-16);
      byteArray0[7] = (byte)75;
      boolean boolean0 = true;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      boolean boolean1 = true;
      Utility.codeToString(byteArray0, (ConstantPool) null, 4, (-1451), true);
      String string0 = "@*";
      Utility.compactClassName("@*", true);
      String string1 = "*8llo_1";
      Method method0 = null;
      try {
        method0 = new Method((DataInput) null, (ConstantPool) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.FieldOrMethod", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)7;
      byteArray0[1] = (byte) (-48);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-88);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      byteArray0[4] = (byte)31;
      byteArray0[5] = (byte)105;
      byteArray0[6] = (byte)4;
      Utility.codeToString(byteArray0, (ConstantPool) null, (-1540), 142, false);
      Utility.decode("0:    iconst_4\n1:    <illegal opcode>\n2:    nop\n3:    jsr\t\t#8044\n6:    iconst_1\n", false);
      String string0 = Utility.encode(byteArray0, false);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) null;
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) (byte)4;
      objectArray0[3] = (Object) null;
      String string1 = Utility.printArray(objectArray0, false, false);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "M~D957h]=//re_ufspd");
      objectArray0[4] = object4;
      Utility.printArray(objectArray0, true, false);
      Utility.classOrInterface(74);
      Utility.compactClassName("class");
      Utility.replace("_ay~&e8\u0007", "{java.lang.Object@7b751bed, java.lang.Object@1d979bf4, java.lang.Object@12801946, java.lang.Object@5b6c9bf9, java.lang.Object@895490a}", "impdep1");
      Utility.format(74, 74, false, 'K');
      try { 
        Utility.typeOfSignature("KKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKK74");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: KKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKK74
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Utility.printArray(objectArray0, false, false);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)41;
      byteArray0[1] = (byte)7;
      byteArray0[2] = (byte) (-60);
      byteArray0[3] = (byte)100;
      byteArray0[4] = (byte)53;
      byteArray0[5] = (byte)110;
      byteArray0[6] = (byte) (-58);
      byteArray0[7] = (byte) (-22);
      byteArray0[8] = (byte)81;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[4];
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref(2039, 85);
      constantArray0[0] = (Constant) constantInterfaceMethodref0;
      ConstantFieldref constantFieldref0 = new ConstantFieldref(3541, (-22));
      ConstantFieldref constantFieldref1 = new ConstantFieldref(constantFieldref0);
      constantArray0[1] = (Constant) constantFieldref1;
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getCachedInstance("java.lang.Object@27a2c2d9, java.lang.Object@3a47101d");
      constantArray0[2] = (Constant) constantUtf8_0;
      ConstantString constantString0 = new ConstantString((byte) (-22));
      constantArray0[3] = (Constant) constantString0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      String string0 = Utility.codeToString(byteSequence0, constantPool1, true);
      assertEquals("dload_3", string0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = ")TrF9`[r6h&u,5lvT]m";
      stringArray0[1] = ")TrF9`[r6h&u,5lvT]m";
      stringArray0[2] = ")TrF9`[r6h&u,5lvT]m";
      stringArray0[3] = ")TrF9`[r6h&u,5lvT]m";
      Utility.methodTypeToSignature(")TrF9`[r6h&u,5lvT]m", stringArray0);
      String string0 = "monitorenter";
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString(")TrF9`[r6h&u,5lvT]m", "monitorenter", ")TrF9`[r6h&u,5lvT]m", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: )TrF9`[r6h&u,5lvT]m
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Utility.accessToString(79, true);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "public private protected static volatile";
      stringArray0[1] = "invokevirtual";
      stringArray0[2] = "invokevirtual";
      stringArray0[3] = "invokevirtual";
      stringArray0[4] = "invokevirtual";
      stringArray0[5] = "invokevirtual";
      stringArray0[6] = "invokevirtual";
      Utility.methodTypeToSignature("invokevirtual", stringArray0);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-106);
      byteArray0[1] = (byte)117;
      byteArray0[2] = (byte)20;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 80, (-832), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "<unknown object>");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "<unknown object>");
      int int0 = 252;
      Utility.accessToString(252);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "protected static final synchronized volatile transient";
      stringArray0[1] = "% d1e$T(?T`1<m7Fb}?";
      stringArray0[2] = "<unknown object>";
      stringArray0[3] = "protected static final synchronized volatile transient";
      stringArray0[4] = "<unknown object>";
      stringArray0[5] = "% d1e$T(?T`1<m7Fb}?";
      stringArray0[6] = "% d1e$T(?T`1<m7Fb}?";
      Utility.methodTypeToSignature("% d1e$T(?T`1<m7Fb}?", stringArray0);
      try { 
        Utility.methodSignatureArgumentTypes("(Lprotected;L%;L<unknown;Lprotected;L<unknown;L%;L%;)L%;");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: Lprotected;L%;L<unknown;Lprotected;L<unknown;L%;L%;)L%;
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      String string0 = "5)t.p[G.#3(2";
      Utility.compactClassName("5)t.p[G.#3(2");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-78);
      byteArray0[2] = (byte) (-100);
      byteArray0[3] = (byte)61;
      byteArray0[4] = (byte) (-127);
      byteArray0[5] = (byte) (-50);
      byteArray0[6] = (byte) (-6);
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte)13;
      Utility.toHexString(byteArray0);
      try { 
        Utility.typeOfSignature("5)t.p[G.#3(2");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 5)t.p[G.#3(2
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Utility.accessToString(97);
      Utility.accessToString(836);
      Utility.classOrInterface(175);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)23;
      byteArray0[1] = (byte)43;
      byteArray0[2] = (byte) (-91);
      byteArray0[3] = (byte)88;
      byteArray0[4] = (byte) (-7);
      byteArray0[5] = (byte) (-59);
      byteArray0[6] = (byte)48;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, 2122, (int) (byte)88, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)76;
      byteArray0[1] = (byte) (-119);
      byteArray0[2] = (byte)60;
      byteArray0[3] = (byte)74;
      byteArray0[4] = (byte) (-62);
      byteArray0[5] = (byte) (-19);
      byteArray0[6] = (byte)62;
      byteArray0[7] = (byte) (-50);
      byteArray0[8] = (byte)76;
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (-2040), 12, false);
      assertEquals("0:    astore_1\n1:    l2f\n2:    istore_1\n3:    dstore_3\n4:    monitorenter\n5:    <illegal opcode>\n6:    istore_3\n7:    <illegal opcode>\n8:    astore_1\n", string0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Utility.replace("org.apache.bcel.classfile.EmptyVisitor", "ka{#J5TJw#vo<M|4", "->@tP\"`<qN7OA3@|");
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-111);
      byteArray0[1] = (byte)76;
      byteArray0[2] = (byte) (-111);
      byteArray0[3] = (byte)30;
      byteArray0[4] = (byte)11;
      byteArray0[5] = (byte)21;
      Constant[] constantArray0 = new Constant[1];
      ConstantFloat constantFloat0 = new ConstantFloat((byte)30);
      constantArray0[0] = (Constant) constantFloat0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-111), (int) (byte)76);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    i2b
         // 1:    astore_1
         // 2:    i2b
         // 3:    lload_0
         // 4:    fconst_0
         // 5:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-125);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 86, (int) (byte) (-125), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("UoP5>7qv3YJ*HDHJ", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `UoP5>7qv3YJ*HDHJ'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte byte0 = Utility.typeOfSignature("V");
      assertEquals((byte)12, byte0);
      
      String string0 = Utility.methodSignatureReturnType("V");
      assertEquals("void", string0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)12;
      byteArray0[1] = (byte)12;
      byteArray0[2] = (byte)12;
      byteArray0[3] = (byte)12;
      byteArray0[4] = (byte)12;
      byteArray0[5] = (byte)12;
      String string1 = Utility.encode(byteArray0, false);
      assertEquals("$M$M$M$M$M$M", string1);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Utility.compactClassName(")8w", true);
      String string0 = "2b] <|&e=y";
      Utility.compactClassName("2b] <|&e=y");
      Utility.format(7, 91, true, '8');
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "\tdefault = ");
      Utility.isJavaIdentifierPart('3');
      String string1 = "Fk=R!(>";
      Utility.typeOfSignature("Fk=R!(>");
      PrintStream printStream0 = null;
      Object[] objectArray0 = new Object[0];
      // Undeclared exception!
      try { 
        Utility.printArray((PrintStream) null, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Utility.compactClassName(">KjhR2mElHs+0Qz", false);
      Utility.methodTypeToSignature(">KjhR2mElHs+0Qz", (String[]) null);
      try { 
        Utility.methodSignatureReturnType("YAb-4GH%l&tjq[Llt", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `YAb-4GH%l&tjq[Llt'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Utility.replace("7=2^!QOb\u0002", "YF", "class");
      byte[] byteArray0 = new byte[0];
      Utility.equals(byteArray0, byteArray0);
      String string0 = "KQ}^";
      // Undeclared exception!
      try { 
        Utility.signatureToString("KQ}^");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `KQ}^'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      Utility.isSet((-3031), (-3031));
      String string0 = "2}s]{N}yIvy1FqZOw";
      try { 
        Utility.typeOfSignature("2}s]{N}yIvy1FqZOw");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 2}s]{N}yIvy1FqZOw
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      String string0 = Utility.classOrInterface(125);
      assertEquals("class", string0);
      
      String string1 = Utility.getSignature("\"0%LqgM*H]b*");
      assertEquals("L\"0%LqgM*H]b*;", string1);
      
      String string2 = Utility.fillup("#r1nn_2ULP", 125, false, 'D');
      assertEquals("DDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD#r1nn_2ULP", string2);
      
      Utility.format(2474, 2474, false, 'D');
      Utility.replace(";", "*]O&c>Lsm<B>vz6P)", "ra1I,>k8FOyzUM8,");
      String string3 = Utility.accessToString(125);
      assertEquals("public protected static final synchronized volatile", string3);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-57);
      byteArray0[1] = (byte)5;
      byteArray0[2] = (byte)97;
      String string4 = Utility.encode(byteArray0, true);
      assertEquals("$l$8b$I$A$A$A$A$A$A$A", string4);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string5 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals("ifnonnull\t\t#1377", string5);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      String string0 = "JWmnczl";
      Utility.typeOfSignature("JWmnczl");
      Utility.isSet((byte)11, (-1449688555));
      String string1 = null;
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("JWmnczl", (String) null, "JWmnczl", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: JWmnczl
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-104);
      byteArray0[1] = (byte)92;
      byteArray0[2] = (byte)75;
      byteArray0[3] = (byte)42;
      byteArray0[4] = (byte) (-86);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("dcmpg", string0);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)114;
      byteArray0[3] = (byte)39;
      byteArray0[4] = (byte) (-105);
      byteArray0[5] = (byte)4;
      byteArray0[6] = (byte)26;
      Utility.codeToString(byteArray0, (ConstantPool) null, (-1456), 1453);
      Utility.clearBit((byte)20, (byte)0);
      Utility.compactClassName("0:    frem\n1:    nop\n2:    nop\n3:    dload_1\n4:    dcmpl\n5:    iconst_1\n6:    iload_0\n");
      String[] stringArray0 = new String[2];
      stringArray0[0] = null;
      stringArray0[1] = "0:    frem\n1:    nop\n2:    nop\n3:    dload_1\n4:    dcmpl\n5:    iconst_1\n6:    iload_0\n";
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature((String) null, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "%$ncL5nD";
      stringArray0[1] = "%$ncL5nD";
      stringArray0[2] = "%$ncL5nD";
      stringArray0[3] = "%$ncL5nD";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "%$ncL5nD");
      Utility.methodTypeToSignature("%$ncL5nD", stringArray0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "%$ncL5nD");
      byte[] byteArray0 = new byte[0];
      Utility.encode(byteArray0, false);
      Utility.equals(byteArray0, byteArray0);
      Utility.equals(byteArray0, byteArray0);
      String string0 = "lrem";
      Utility.compactClassName("lrem", true);
      // Undeclared exception!
      try { 
        Utility.signatureToString("PU|*oPe438");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `PU|*oPe438'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      String string0 = "C";
      Utility.typeOfSignature("C");
      String string1 = "~VT7HbPAt/h4SkGe 5";
      boolean boolean0 = false;
      try { 
        Utility.methodSignatureReturnType("~VT7HbPAt/h4SkGe 5", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `~VT7HbPAt/h4SkGe 5'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)14;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-62);
      byteArray0[3] = (byte) (-91);
      byteArray0[4] = (byte) (-127);
      byteArray0[5] = (byte) (-4);
      byteArray0[6] = (byte)63;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string0 = Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-1), 42);
      assertEquals("0:    dconst_0\n1:    impdep2\n2:    monitorenter\n3:    if_acmpeq\t\t#-32257\n6:    lstore_0\n", string0);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)40;
      byteArray0[1] = (byte)43;
      byteArray0[2] = (byte)34;
      byteArray0[3] = (byte) (-98);
      byteArray0[4] = (byte)3;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 121, 640, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)86;
      byteArray0[3] = (byte)66;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool(byteSequence0);
      Utility.codeToString(byteSequence0, constantPool0);
      String string0 = "wide";
      boolean boolean0 = false;
      Code code0 = null;
      try {
        code0 = new Code(77, 250, byteSequence0, constantPool0);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      try { 
        Utility.typeOfSignature("XQ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: XQ
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)30;
      byteArray0[1] = (byte)30;
      byteArray0[2] = (byte) (-75);
      byteArray0[3] = (byte) (-19);
      byteArray0[4] = (byte)123;
      byteArray0[5] = (byte)24;
      byteArray0[6] = (byte) (-50);
      Constant[] constantArray0 = null;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-19), 1185);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String string0 = "org.apache.bcel.classfile.Utility$1";
      try { 
        Utility.decode("org.apache.bcel.classfile.Utility$1", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byte byte0 = (byte) (-108);
      byteArray0[0] = (byte) (-108);
      byteArray0[1] = (byte)37;
      byteArray0[2] = (byte) (-61);
      byteArray0[3] = (byte)26;
      byte byte1 = (byte) (-83);
      byteArray0[4] = (byte) (-83);
      byteArray0[5] = (byte)86;
      byteArray0[6] = (byte)109;
      Utility.toHexString(byteArray0);
      Utility.fillup("!9M", (byte) (-83), false, '1');
      Utility.typeOfSignature("Dont call getValueShort() on a non SHORT ElementValue");
      Utility.fillup("sbj,U", (byte)109, false, '1');
      Utility.decode("Dont call getValueShort() on a non SHORT ElementValue", false);
      boolean boolean0 = false;
      Utility.accessToString((int) (byte)37, false);
      ByteSequence byteSequence0 = null;
      Constant[] constantArray0 = new Constant[8];
      ObjectInputStream objectInputStream0 = null;
      try {
        objectInputStream0 = new ObjectInputStream((InputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      Object object5 = new Object();
      objectArray0[5] = object5;
      Object object6 = new Object();
      objectArray0[6] = object6;
      Object object7 = new Object();
      objectArray0[7] = object7;
      Object object8 = new Object();
      objectArray0[8] = object8;
      Utility.printArray(objectArray0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)63;
      byteArray0[1] = (byte)59;
      byteArray0[2] = (byte) (-119);
      byteArray0[3] = (byte)90;
      byteArray0[4] = (byte)49;
      byteArray0[5] = (byte)105;
      byteArray0[6] = (byte)13;
      byteArray0[7] = (byte)99;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)105, 199);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      boolean boolean0 = false;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      String string0 = "Rc";
      // Undeclared exception!
      try { 
        Utility.signatureToString("Rc", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Rc'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)114;
      byte byte0 = (byte)20;
      byteArray0[1] = (byte)20;
      byteArray0[2] = (byte) (-83);
      byteArray0[3] = (byte)39;
      byteArray0[4] = (byte) (-105);
      byteArray0[5] = (byte)4;
      byteArray0[6] = (byte) (-121);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (-1456), 1453);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      String string0 = "M~jM)|u5l)c90;sv";
      try { 
        Utility.typeOfSignature("M~jM)|u5l)c90;sv");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: M~jM)|u5l)c90;sv
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      boolean boolean0 = true;
      boolean boolean1 = true;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      String string0 = "Illegal type: ";
      Utility.methodSignatureReturnType("Illegal type: ");
      Utility.typeOfSignature("Illegal type: ");
      // Undeclared exception!
      try { 
        Utility.signatureToString("int");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `int'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)113;
      byteArray0[1] = (byte)32;
      byteArray0[2] = (byte) (-91);
      byteArray0[3] = (byte)63;
      byteArray0[4] = (byte)76;
      byteArray0[5] = (byte) (-116);
      byteArray0[6] = (byte) (-122);
      byteArray0[7] = (byte) (-91);
      byteArray0[8] = (byte)18;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-122), (int) (byte) (-122), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    lrem
         // 1:    lload_2
         // 2:    if_acmpeq\t\t#16206
         // 5:    f2l
         // 6:    i2f
         // 7:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      objectArray0[0] = object0;
      String string0 = Utility.printArray(objectArray0, true);
      assertNotNull(string0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-92);
      byteArray0[1] = (byte)61;
      byteArray0[2] = (byte)58;
      byteArray0[3] = (byte) (-57);
      byteArray0[4] = (byte)122;
      byteArray0[5] = (byte) (-10);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("if_icmple\t\t#15674", string1);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Utility.convertString("S.");
      Utility.methodSignatureReturnType("S.", false);
      int int0 = 939;
      Utility.accessToString(939, false);
      int int1 = (-1706);
      int int2 = 941;
      Utility.clearBit((-1706), 941);
      String string0 = "w";
      // Undeclared exception!
      try { 
        Utility.signatureToString("w", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `w'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      EvoSuiteFile evoSuiteFile1 = null;
      String string0 = ">";
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ">");
      Utility.format((-1237), (-191), true, 'A');
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.fillup("-1237", (-191), true, '>');
      try { 
        Utility.typeOfSignature("-1237");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: -1237
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Utility.convertString("7x\"2]s3");
      Utility.signatureToString("LD0n$'=&KE0;V");
      byte[] byteArray0 = new byte[0];
      Utility.equals(byteArray0, byteArray0);
      // Undeclared exception!
      try { 
        Utility.methodSignatureReturnType((String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)79;
      byteArray0[1] = (byte)32;
      byteArray0[2] = (byte) (-3);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[3];
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref(77, 125);
      constantArray0[0] = (Constant) constantInterfaceMethodref0;
      ConstantFloat constantFloat0 = new ConstantFloat(125);
      constantArray0[1] = (Constant) constantFloat0;
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(58, 30);
      constantArray0[2] = (Constant) constantMethodHandle0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0);
      assertEquals("iastore", string0);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte)88;
      byteArray0[0] = (byte)88;
      byteArray0[1] = (byte)56;
      Utility.encode(byteArray0, false);
      Utility.accessToString((int) (byte)56);
      String string0 = "Lmx`H9\"g<A<Goiyr;V";
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("Lmx`H9\"g<A<Goiyr;V", "X8", "static final synchronized", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Lmx`H9\"g<A<Goiyr;V
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)127;
      byteArray0[1] = (byte) (-98);
      byteArray0[2] = (byte) (-122);
      byteArray0[3] = (byte) (-126);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals("land", string0);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      Utility.typeOfSignature("Sv");
      Utility.isSet((byte)9, (byte)9);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "<-\"";
      stringArray0[1] = "Sv";
      stringArray0[2] = "iload_3";
      stringArray0[3] = "Sv";
      stringArray0[4] = "Sv";
      stringArray0[5] = "Sv";
      stringArray0[6] = "Sv";
      Utility.methodTypeToSignature("Sv", stringArray0);
      Utility.classOrInterface((byte)9);
      Utility.compactClassName("Sv", "Rg7VOhYe6fw(uRA", true);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)119;
      byteArray0[1] = (byte)9;
      byteArray0[2] = (byte)9;
      byteArray0[3] = (byte)9;
      byteArray0[4] = (byte)9;
      byteArray0[5] = (byte)9;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[8];
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle((-2666), 2512);
      ConstantMethodHandle constantMethodHandle1 = new ConstantMethodHandle(constantMethodHandle0);
      constantArray0[0] = (Constant) constantMethodHandle1;
      ConstantClass constantClass0 = null;
      try {
        constantClass0 = new ConstantClass((ConstantClass) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)30;
      byteArray0[1] = (byte)4;
      byteArray0[2] = (byte) (-65);
      byteArray0[3] = (byte) (-19);
      byteArray0[4] = (byte)123;
      byteArray0[5] = (byte)24;
      byteArray0[6] = (byte) (-50);
      Constant[] constantArray0 = null;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-19), 1185);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
      ConstantFieldref constantFieldref0 = null;
      try {
        constantFieldref0 = new ConstantFieldref(dataInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-104);
      byteArray0[1] = (byte)77;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Utility.compactClassName("YWM");
      Utility.isJavaIdentifierPart('u');
      int int0 = 1778;
      String string0 = Utility.fillup("short", 1778, true, 'E');
      String[] stringArray0 = new String[8];
      stringArray0[0] = string0;
      stringArray0[1] = string0;
      stringArray0[2] = "IHZF_{,3/E:d[";
      stringArray0[3] = "YWM";
      stringArray0[4] = string0;
      stringArray0[5] = "YWM";
      stringArray0[6] = "short";
      stringArray0[7] = "XxzI";
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature("org.apache.bcel.classfile.LocalVariableTable", stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegally nested brackets:[
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      String string0 = "N";
      try { 
        Utility.typeOfSignature("N");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: N
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      Object object5 = new Object();
      objectArray0[5] = object5;
      Object object6 = new Object();
      objectArray0[6] = object6;
      Utility.printArray(objectArray0, true);
      Utility.accessToString(115, true);
      byte[] byteArray0 = null;
      // Undeclared exception!
      try { 
        Utility.encode((byte[]) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)56;
      byteArray0[1] = (byte)127;
      Utility.encode(byteArray0, true);
      Utility.clearBit((byte)56, 12);
      Utility.convertString("$l$8b$I$A$A$A$A$A$A$A");
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      Utility.codeToString(byteSequence0, constantPool1, true);
      LocalVariable[] localVariableArray0 = new LocalVariable[1];
      LocalVariable localVariable0 = new LocalVariable(76, 90, (byte)56, 93, (-1241), constantPool0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      LocalVariable localVariable1 = new LocalVariable(localVariable0);
      localVariable0.setLength(12);
      localVariableArray0[0] = localVariable1;
      LocalVariableTable localVariableTable0 = new LocalVariableTable(93, 50, localVariableArray0, constantPool1);
      LocalVariableTable localVariableTable1 = new LocalVariableTable(localVariableTable0);
      try { 
        Utility.methodSignatureToString("k/l'*=RPA", "k/l'*=RPA", "$l$8b$I$A$A$A$A$A$A$A", true, localVariableTable1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: k/l'*=RPA
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "p#[<l>[x9vx";
      stringArray0[1] = "p#[<l>[x9vx";
      stringArray0[2] = "p#[<l>[x9vx";
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature("p#[<l>[x9vx", stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegally nested brackets:[<l>[x9vx
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      int int0 = 90;
      Utility.accessToString(90, true);
      Utility.typeOfSignature("B 8_3");
      int int1 = (-3888);
      Utility.clearBit((-3888), (byte)8);
      byte[] byteArray0 = null;
      // Undeclared exception!
      try { 
        Utility.equals((byte[]) null, (byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-19);
      byteArray0[1] = (byte) (-118);
      byteArray0[2] = (byte) (-63);
      byteArray0[3] = (byte)32;
      byteArray0[4] = (byte)122;
      byteArray0[5] = (byte)76;
      byteArray0[6] = (byte) (-16);
      byteArray0[7] = (byte)75;
      ConstantPool constantPool0 = null;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 4, (-1451), true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("sipush", false);
      Utility.getSignature(" ;%DZ4:Vn");
      Locale locale0 = Locale.KOREAN;
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) locale0;
      objectArray0[2] = (Object) locale0;
      objectArray0[3] = (Object) "jsr_w";
      Utility.printArray(objectArray0, false);
      Utility.typeOfSignature("The wildcard must not be null");
      Utility.toHexString(byteArray0);
      Utility.toHexString(byteArray0);
      Utility.compactClassName("ko, null, ko, jsr_w");
      Utility.replace("L;%DZ4:Vn;", "sipush", "l-n4_eS");
      try { 
        Utility.methodSignatureArgumentTypes("B0;(Xq", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: B0;(Xq
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "<;ebm";
      stringArray0[1] = "<;ebm";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "java.lang.short");
      stringArray0[2] = "java.lang.short";
      stringArray0[3] = "<;ebm";
      stringArray0[4] = "<;ebm";
      stringArray0[5] = "<;ebm";
      Utility.methodTypeToSignature("<;ebm", stringArray0);
      try { 
        Utility.methodSignatureArgumentTypes("(:1v-M?JN/Cal,9");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `:1v-M?JN/Cal,9'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      Utility.accessToString((-1), false);
      try { 
        Utility.typeOfSignature("*8yvp9");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 8yvp9
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      try { 
        Utility.typeOfSignature(":A08srn2dv@@TM");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: :A08srn2dv@@TM
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      String string0 = Utility.methodSignatureReturnType("C{ 6ipr", false);
      assertEquals("char", string0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-90);
      byteArray0[1] = (byte)24;
      byteArray0[2] = (byte) (-102);
      byteArray0[3] = (byte)93;
      byteArray0[4] = (byte)109;
      byteArray0[5] = (byte) (-63);
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean0);
      
      int int0 = Utility.setBit(11, 184);
      assertEquals(16777227, int0);
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      String string0 = "D0n$'=&KE05I.`n";
      Utility.methodSignatureReturnType("D0n$'=&KE05I.`n");
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "double");
      Utility.compactClassName("D0n$'=&KE05I.`n");
      Utility.methodSignatureReturnType("D0n$'=&KE05I.`n");
      try { 
        Utility.typeOfMethodSignature("double");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: double
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "*");
      Utility.methodTypeToSignature("AhIL2iu|;CezuC", (String[]) null);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)39;
      byteArray0[1] = (byte)4;
      byteArray0[2] = (byte) (-7);
      byteArray0[3] = (byte) (-22);
      byteArray0[4] = (byte) (-40);
      // Undeclared exception!
      try { 
        Utility.equals(byteArray0, (byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-45);
      byteArray0[1] = (byte) (-94);
      byteArray0[2] = (byte)57;
      byteArray0[3] = (byte)124;
      byteArray0[4] = (byte)5;
      byteArray0[5] = (byte)20;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byteArray0[6] = (byte)75;
      byte byte0 = (byte)79;
      byteArray0[7] = (byte)79;
      ConstantPool constantPool0 = null;
      boolean boolean0 = true;
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 32, (-394), true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      Utility.convertString("'");
      Utility.classOrInterface(16384);
      // Undeclared exception!
      try { 
        Utility.signatureToString("'", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `''
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      Utility.compactClassName("byte", "short", false);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)63;
      byteArray0[1] = (byte)10;
      byteArray0[2] = (byte)123;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte)12;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      Utility.toHexString(byteArray0);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) byteSequence0;
      objectArray0[3] = (Object) (byte)12;
      objectArray0[4] = (Object) null;
      objectArray0[5] = (Object) null;
      Utility.printArray(objectArray0, false, false);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      Utility.printArray(objectArray0, false, false);
      String[] stringArray0 = new String[2];
      byteSequence0.readShort();
      stringArray0[0] = "byte";
      stringArray0[1] = "null, null, org.apache.bcel.util.ByteSequence@71d35c1f, 12, null, null";
      Utility.methodTypeToSignature("null, null, org.apache.bcel.util.ByteSequence@71d35c1f, 12, null, null", stringArray0);
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      String string0 = "freturn";
      boolean boolean0 = false;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Utility.compactClassName("freturn", false);
      byte[] byteArray0 = new byte[3];
      byte byte0 = (byte) (-95);
      byteArray0[0] = (byte) (-95);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)55;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 89, (int) (byte) (-95));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      Utility.isJavaIdentifierPart('/');
      Utility.replace("0{v4LC;\"|<I", "0{v4LC;\"|<I", "0{v4LC;\"|<I");
      Utility.getSignature("0{v4LC;\"|<I");
      Utility.typeOfSignature("L0{v4LC;\"|<I;");
      Utility.replace("0{v4LC;\"|<I", "s5", "INSENSITIVE");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)14;
      byteArray0[1] = (byte)14;
      byteArray0[2] = (byte)27;
      byteArray0[3] = (byte)14;
      byteArray0[4] = (byte)14;
      byteArray0[5] = (byte)14;
      byteArray0[6] = (byte)14;
      byteArray0[7] = (byte)14;
      byte byte0 = (byte)3;
      byteArray0[8] = (byte)3;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0);
      DataInputStream dataInputStream0 = new DataInputStream(pushbackInputStream0);
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool(dataInputStream0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid byte tag in constant pool: 27
         //
         verifyException("org.apache.bcel.classfile.Constant", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("zPlg8qP;dQ)Hh9s");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Hh9s'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      String string0 = "W*5";
      try { 
        Utility.typeOfSignature("W*5");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: W*5
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      try { 
        Utility.methodSignatureReturnType("W<h-Y?5\"}e]a", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `W<h-Y?5\"}e]a'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      String string0 = "]@^7$LEZq]{";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "]@^7$LEZq]{");
      try { 
        Utility.typeOfSignature("Expected class `");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Expected class `
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      Utility.signatureToString("Invalid me");
      String string0 = "*89~e";
      try { 
        Utility.methodSignatureArgumentTypes("*89~e");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: *89~e
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      Utility.replace("(", "(", "(");
      boolean boolean0 = false;
      try { 
        Utility.methodSignatureArgumentTypes("(", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: (
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      String string0 = Utility.compactClassName("char", "char", true);
      assertEquals("", string0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-94);
      byteArray0[1] = (byte)13;
      byteArray0[2] = (byte) (-66);
      byteArray0[3] = (byte)95;
      byteArray0[4] = (byte)95;
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      String string0 = "ZK72.T RHJkrbw;\"";
      boolean boolean0 = false;
      Utility.methodSignatureReturnType("ZK72.T RHJkrbw;\"", false);
      String string1 = " (";
      MockFileInputStream mockFileInputStream0 = null;
      try {
        mockFileInputStream0 = new MockFileInputStream("ZK72.T RHJkrbw;\"");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("Ov{3/-n1LOv{3.-n1L", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Ov{3/-n1LOv{3.-n1L'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)44;
      byteArray0[1] = (byte)104;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byteArray0[2] = (byte)28;
      byteArray0[3] = (byte) (-41);
      byteArray0[4] = (byte)57;
      byteArray0[5] = (byte) (-48);
      byteArray0[6] = (byte)5;
      Utility.encode(byteArray0, true);
      Utility.isSet(178, 40);
      Utility.replace("$l$8b$I$A$A$A$A$A$A$A", "$l$8b$I$A$A$A$A$A$A$A", "$l$8b$I$A$A$A$A$A$A$A");
      Utility.classOrInterface((byte)104);
      Utility.setBit(162, 40);
      try { 
        Utility.typeOfSignature("$l$8b$I$A$A$A$A$A$A$A");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: $l$8b$I$A$A$A$A$A$A$A
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      Utility.printArray((Object[]) null, true);
      // Undeclared exception!
      try { 
        Utility.encode((byte[]) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      String string0 = "+.m0)4P~D";
      String[] stringArray0 = new String[5];
      FileSystemHandling.shouldAllThrowIOExceptions();
      stringArray0[0] = "+.m0)4P~D";
      stringArray0[1] = "+.m0)4P~D";
      stringArray0[2] = "+.m0)4P~D";
      stringArray0[3] = "+.m0)4P~D";
      stringArray0[4] = "+.m0)4P~D";
      Utility.methodTypeToSignature("+.m0)4P~D", stringArray0);
      Utility.clearBit(74, 74);
      try { 
        Utility.typeOfSignature("<ajFdw}s.`");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: <ajFdw}s.`
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String string0 = "TmHiy=tVK'kq(gqGz*";
      try { 
        Utility.methodSignatureReturnType("TmHiy=tVK'kq(gqGz*");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: TmHiy=tVK'kq(gqGz*
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Utility.setBit(56, 56);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)120;
      byteArray0[1] = (byte) (-116);
      Constant[] constantArray0 = new Constant[1];
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic(65535, 65535);
      constantArray0[0] = (Constant) constantInvokeDynamic0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 1316, 56, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)83;
      byteArray0[1] = (byte)48;
      byteArray0[2] = (byte) (-102);
      byteArray0[3] = (byte) (-54);
      byteArray0[4] = (byte) (-73);
      byteArray0[5] = (byte) (-52);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte)3;
      byteArray1[1] = (byte) (-48);
      byteArray1[2] = (byte) (-23);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray1);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.compactClassName("`(sE'8", "Sx?`,sj;", false);
      Utility.signatureToString("FW&qZ:s0R,f-o", true);
      Utility.isSet(80, (byte) (-102));
      try { 
        Utility.typeOfSignature("`(sE'8");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: `(sE'8
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-87);
      byteArray0[1] = (byte)92;
      byteArray0[2] = (byte)13;
      byteArray0[3] = (byte) (-51);
      byteArray0[4] = (byte) (-126);
      byteArray0[5] = (byte) (-54);
      byteArray0[6] = (byte) (-66);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Utility.format(382, 382, false, '_');
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "___________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________382";
      objectArray0[1] = (Object) "___________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________382";
      objectArray0[2] = (Object) "___________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________382";
      objectArray0[3] = (Object) "___________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________382";
      String string0 = Utility.printArray(objectArray0, false, true);
      Utility.format(97, 1133, false, '_');
      Utility.isJavaIdentifierPart('s');
      String string1 = Utility.printArray(objectArray0, true);
      Utility.decode("dload", false);
      Utility.isJavaIdentifierPart('_');
      String[] stringArray0 = new String[5];
      stringArray0[0] = string1;
      stringArray0[1] = string0;
      stringArray0[2] = "dload";
      stringArray0[3] = "___________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________382";
      stringArray0[4] = "Type of ConstValue invalid: ";
      String string2 = Utility.methodTypeToSignature("Type of ConstValue invalid: ", stringArray0);
      assertFalse(string2.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-18);
      byteArray0[1] = (byte) (-55);
      byte[] byteArray1 = new byte[0];
      boolean boolean0 = Utility.equals(byteArray0, byteArray1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "Ia}/B5*";
      Utility.methodTypeToSignature("Ia}/B5*", stringArray0);
      int int0 = 9;
      Utility.clearBit(9, 9);
      boolean boolean0 = true;
      char char0 = '~';
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      Utility.format(9, 9, true, '~');
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "9~~~~~~~~";
      Utility.printArray(objectArray0, true, true);
      Utility.printArray(objectArray0);
      Utility.methodSignatureToString("(LIa}/B5*;)LIa}/B5*;", "Ia}/B5*", "{2U0");
      String string0 = "KOjOHL";
      Utility.convertString("KOjOHL");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      // Undeclared exception!
      try { 
        Utility.signatureToString("if_icmpne", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `if_icmpne'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      String string0 = "3Lt\\o$%";
      Utility.convertString("3Lto$%");
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) "3Lto$%";
      objectArray0[1] = (Object) "3Lto$%";
      objectArray0[2] = (Object) "3Lto$%";
      objectArray0[3] = (Object) "3Lt\\o$%";
      objectArray0[4] = (Object) "3Lt\\o$%";
      objectArray0[5] = (Object) "3Lt\\o$%";
      objectArray0[6] = (Object) "3Lt\\o$%";
      objectArray0[7] = (Object) "3Lt\\o$%";
      objectArray0[3] = (Object) "3Lt\\o$%";
      boolean boolean0 = true;
      Utility.printArray(objectArray0, true);
      try { 
        Utility.typeOfMethodSignature("{3Lto$%, 3Lto$%, 3Lto$%, 3Lt\\o$%, 3Lt\\o$%, 3Lt\\o$%, 3Lt\\o$%, 3Lt\\o$%, null}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: {3Lto$%, 3Lto$%, 3Lto$%, 3Lt\\o$%, 3Lt\\o$%, 3Lt\\o$%, 3Lt\\o$%, 3Lt\\o$%, null}
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      int int0 = 78;
      Utility.format(78, 78, true, '<');
      String string0 = "xPm>";
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.replace("xPm>", ":", "78<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<");
      Utility.isJavaIdentifierPart('<');
      try { 
        Utility.methodSignatureReturnType("Ljava/lang/Object", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: Ljava/lang/Object
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      Utility.compactClassName("41f2=Wc):pV^HXOUS}", true);
      Utility.accessToString(180, true);
      Utility.fillup("protected final transient", 180, true, '<');
      Utility.isJavaIdentifierPart('<');
      try { 
        Utility.methodSignatureReturnType("protected final transient");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `protected final transient'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      try { 
        Utility.methodSignatureReturnType("[wZf", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `wZf'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)40;
      byteArray0[1] = (byte)43;
      byteArray0[2] = (byte)42;
      byteArray0[3] = (byte) (-98);
      byteArray0[4] = (byte)3;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 121, 640, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      String string0 = "Qi$c6FI";
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      // Undeclared exception!
      try { 
        Utility.signatureToString("Qi$c6FI", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Qi$c6FI'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      String string0 = Utility.compactClassName("f2d", false);
      assertEquals("f2d", string0);
      
      String string1 = Utility.accessToString(18, false);
      assertEquals("private final", string1);
      
      String string2 = Utility.classOrInterface(18);
      assertEquals("class", string2);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-103);
      byteArray0[1] = (byte) (-37);
      byteArray0[2] = (byte)123;
      byteArray0[3] = (byte)2;
      byteArray0[4] = (byte) (-99);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string3 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals("ifeq\t\t#-9349", string3);
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      Utility.convertString("3Lto$%");
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) "3Lto$%";
      objectArray0[1] = (Object) "3Lto$%";
      objectArray0[2] = (Object) "3Lto$%";
      objectArray0[3] = (Object) "3Lto$%";
      objectArray0[4] = (Object) "3Lt\\o$%";
      objectArray0[5] = (Object) "3Lt\\o$%";
      objectArray0[6] = (Object) "3Lt\\o$%";
      objectArray0[7] = (Object) "3Lt\\o$%";
      objectArray0[8] = (Object) "3Lt\\o$%";
      boolean boolean0 = true;
      Utility.printArray(objectArray0, true);
      try { 
        Utility.typeOfMethodSignature("{3Lto$%, 3Lto$%, 3Lto$%, 3Lto$%, 3Lt\\o$%, 3Lt\\o$%, 3Lt\\o$%, 3Lt\\o$%, 3Lt\\o$%}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: {3Lto$%, 3Lto$%, 3Lto$%, 3Lto$%, 3Lt\\o$%, 3Lt\\o$%, 3Lt\\o$%, 3Lt\\o$%, 3Lt\\o$%}
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      Utility.convertString(";)E__");
      Utility.printArray((Object[]) null, true);
      try { 
        Utility.methodSignatureReturnType(";)E__");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `E__'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)21;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.copy();
      String string0 = Utility.accessToString(15, true);
      assertEquals("public private protected static", string0);
      
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      String string1 = Utility.codeToString(byteSequence1, constantPool0);
      assertEquals("iload\t\t%0", string1);
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      String string0 = Utility.compactClassName("iT\"0]T;g", false);
      assertEquals("iT\"0]T;g", string0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)88;
      String string1 = Utility.encode(byteArray0, true);
      assertEquals("$l$8b$I$A$A$A$A$A$A$A", string1);
      
      String string2 = Utility.accessToString(92, false);
      assertEquals("protected static final volatile", string2);
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      String string0 = Utility.accessToString((-2495), true);
      assertEquals("public volatile abstract synthetic annotation enum", string0);
      
      String string1 = Utility.classOrInterface(9);
      assertEquals("class", string1);
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      String string0 = "W$ZqY[JLTn]xo7N{A";
      try { 
        Utility.decode("W$ZqY[JLTn]xo7N{A", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      short short0 = Utility.searchOpcode("ifle");
      assertEquals((short)158, short0);
      
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) "ifle";
      objectArray0[1] = (Object) "ifle";
      objectArray0[2] = (Object) "ifle";
      Object object0 = new Object();
      objectArray0[3] = object0;
      objectArray0[4] = (Object) "ifle";
      objectArray0[5] = (Object) "ifle";
      objectArray0[6] = (Object) "ifle";
      objectArray0[7] = (Object) "ifle";
      objectArray0[8] = (Object) "ifle";
      Utility.printArray(objectArray0, true, true);
      String string0 = Utility.compactClassName("1d", false);
      assertEquals("1d", string0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)83;
      byteArray0[1] = (byte) (-52);
      byteArray0[2] = (byte) (-84);
      byteArray0[3] = (byte)43;
      byteArray0[4] = (byte) (-18);
      byteArray0[5] = (byte) (-52);
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      String string0 = "M;3%/g7|D<4O&*W";
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.signatureToString("M;3%/g7|D<4O&*W", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `M;3%/g7|D<4O&*W'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      try { 
        Utility.methodSignatureArgumentTypes("o k;HJQT%Kck9MX^&");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: o k;HJQT%Kck9MX^&
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      String string0 = "M2V\\ptqE$s";
      try { 
        Utility.decode("M2VptqE$s", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      try { 
        Utility.decode("j", true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "RuntimeInvisibleParameterAnnotations");
      Utility.getSignature("short");
      MockPrintStream mockPrintStream0 = new MockPrintStream("S");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      PrintWriter printWriter0 = mockPrintWriter0.append(')');
      mockPrintStream0.println();
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) printWriter0;
      objectArray0[1] = (Object) mockPrintStream0;
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[3] = (Object) mockPrintStream0;
      Utility.printArray(printWriter0, objectArray0);
      Utility.replace("NgD\"@sZh|? ", "NgD\"@sZh|? ", "SEf");
      Utility.clearBit(172, 172);
      Utility.format(629, 629, true, ')');
      Utility.isJavaIdentifierPart('W');
      // Undeclared exception!
      try { 
        Utility.signatureToString(";", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `;'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Utility.printArray(objectArray0, true, true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("{\"java.lang.Object@5f57934a\"}", true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      mockPrintWriter0.printf("}?ckZjb:o^6San=Ui", objectArray0);
      Locale locale0 = Locale.forLanguageTag("}?ckZjb:o^6San=Ui");
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "}?ckZjb:o^6San=Ui", objectArray0);
      Utility.printArray(printWriter0, objectArray0);
      try { 
        Utility.typeOfSignature("if_acmpeq");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: if_acmpeq
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      Utility.getSignature("invokedynamic");
      int int0 = (-1786);
      Utility.accessToString((-1786), true);
      Utility.getSignature("invokedynamic");
      String[] stringArray0 = new String[9];
      stringArray0[0] = "TR Z.09d2L8iho~";
      stringArray0[1] = "TR Z.09d2L8iho~";
      stringArray0[2] = "Linvokedynamic;";
      stringArray0[3] = "private protected native strictfp synthetic annotation enum";
      stringArray0[4] = "Linvokedynamic;";
      stringArray0[5] = "private protected native strictfp synthetic annotation enum";
      stringArray0[6] = "TR Z.09d2L8iho~";
      stringArray0[7] = "Linvokedynamic;";
      stringArray0[8] = "Linvokedynamic;";
      Utility.methodTypeToSignature("TR Z.09d2L8iho~", stringArray0);
      int int1 = 81;
      Utility.setBit(81, 84);
      // Undeclared exception!
      try { 
        Utility.methodSignatureReturnType((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(723);
      byteArrayOutputStream0.close();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0, false);
      Object[] objectArray0 = new Object[8];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) byteArrayOutputStream0;
      objectArray0[2] = (Object) byteArrayOutputStream0;
      byteArrayOutputStream0.reset();
      objectArray0[3] = (Object) mockPrintWriter0;
      objectArray0[4] = (Object) byteArrayOutputStream0;
      byteArrayOutputStream0.flush();
      objectArray0[5] = (Object) mockPrintWriter0;
      mockPrintWriter0.flush();
      mockPrintWriter0.println((-1L));
      objectArray0[6] = (Object) byteArrayOutputStream0;
      objectArray0[7] = (Object) mockPrintWriter0;
      Utility.printArray((PrintWriter) mockPrintWriter0, objectArray0);
      String string0 = "\t\t%";
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Utility.getSignature("\t\t%");
      Utility.format(723, 723, false, 'S');
      Utility.convertString("\t\t%");
      ByteSequence byteSequence0 = null;
      Constant[] constantArray0 = new Constant[1];
      ConstantMethodType constantMethodType0 = new ConstantMethodType(723);
      ConstantMethodType constantMethodType1 = new ConstantMethodType(constantMethodType0);
      constantArray0[0] = (Constant) constantMethodType1;
      // Undeclared exception!
      try { 
        Constant.readConstant((DataInput) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Constant", e);
      }
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.accessToString(29);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)93;
      byteArray0[1] = (byte) (-127);
      Utility.toHexString(byteArray0);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("public protected static final", "uBV7 lW|", ">=");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: public protected static final
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      String string0 = "short";
      // Undeclared exception!
      Utility.replace("irem", "", "short");
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      Utility.printArray(objectArray0, false, false);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      Utility.equals(byteArray0, byteArray0);
      Constant[] constantArray0 = new Constant[2];
      PipedOutputStream pipedOutputStream0 = null;
      try {
        pipedOutputStream0 = new PipedOutputStream((PipedInputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      Utility.setBit(1575, 1575);
      String string0 = "XhrVxu4;i/.33";
      try { 
        Utility.methodSignatureReturnType("XhrVxu4;i/.33");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `XhrVxu4;i/.33'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      String string0 = "i2l";
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("i2l");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "i2l";
      Object object0 = new Object();
      objectArray0[1] = object0;
      Object object1 = new Object();
      objectArray0[2] = object1;
      objectArray0[3] = (Object) mockPrintStream0;
      Utility.printArray((PrintStream) mockPrintStream0, objectArray0);
      String string1 = null;
      boolean boolean0 = false;
      int int0 = 3502;
      int int1 = (-1827);
      ByteSequence byteSequence0 = null;
      try {
        byteSequence0 = new ByteSequence((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      try { 
        Utility.typeOfMethodSignature("geJ6=Opp;N^Z?IlHp'u");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: geJ6=Opp;N^Z?IlHp'u
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)91;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)2;
      byteArray0[5] = (byte)16;
      byteArray0[6] = (byte)71;
      Utility.toHexString(byteArray0);
      Constant[] constantArray0 = new Constant[2];
      ConstantString constantString0 = new ConstantString(255);
      constantArray0[0] = (Constant) constantString0;
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("5b 00 00 00 02 10 47");
      constantArray0[1] = (Constant) constantUtf8_0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, 47, (-1548));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = ".m!OOr";
      stringArray0[1] = "B";
      stringArray0[2] = ".m!OOr";
      Utility.methodTypeToSignature(".m!OOr", stringArray0);
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString(".m!OOr", "", ".m!OOr", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: .m!OOr
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      int int0 = (-1673);
      Utility.format((-1673), (-1673), true, 'U');
      Utility.setBit((-1673), (-1673));
      Utility.printArray((Object[]) null, true, false);
      String string0 = null;
      String string1 = "z_9:O+\"";
      boolean boolean0 = true;
      int int1 = (-2511);
      Attribute[] attributeArray0 = new Attribute[7];
      int int2 = 403;
      ConstantPool constantPool0 = null;
      PMGClass pMGClass0 = new PMGClass((-1673), 403, (-2511), 266, (ConstantPool) null);
      attributeArray0[0] = (Attribute) pMGClass0;
      int int3 = 65;
      File file0 = MockFile.createTempFile("z_9:O+\"", ".L=Fze;");
      MockFile mockFile0 = new MockFile(file0, "Clone Not Supported");
      MockRandomAccessFile mockRandomAccessFile0 = null;
      try {
        mockRandomAccessFile0 = new MockRandomAccessFile(mockFile0, "ez5|");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal mode \"ez5|\" must be one of \"r\", \"rw\", \"rws\", or \"rwd\"
         //
         verifyException("java.io.RandomAccessFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      int int0 = 2585;
      Utility.classOrInterface(2585);
      String string0 = "iyb";
      // Undeclared exception!
      try { 
        Utility.signatureToString("iyb");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `iyb'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      String string0 = ".zip";
      Utility.compactClassName(".zip", false);
      String string1 = "gdA6`{(c,R~;c@>f";
      try { 
        Utility.methodSignatureArgumentTypes("gdA6`{(c,R~;c@>f", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: gdA6`{(c,R~;c@>f
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      Utility.isSet(0, 11);
      Utility.accessToString(0, false);
      String string0 = "EM}u";
      Utility.fillup("EM}u", 0, false, 'r');
      Utility.compactClassName("EM}u", false);
      Utility.isSet(1711, 0);
      // Undeclared exception!
      try { 
        Utility.signatureToString("lload_3", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `lload_3'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Utility.printArray(objectArray0);
      boolean boolean0 = false;
      Utility.accessToString(145, false);
      Utility.classOrInterface(0);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)3;
      byte byte0 = (byte)11;
      byteArray0[1] = (byte)11;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ObjectInputStream objectInputStream0 = null;
      try {
        objectInputStream0 = new ObjectInputStream(byteSequence0);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ObjectInputStream$PeekInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      int int0 = 57;
      Utility.format(57, 57, true, 'D');
      Utility.convertString("57DDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD");
      Utility.convertString("");
      int int1 = 0;
      Utility.fillup("z2[P;>", 0, false, 'D');
      byte[] byteArray0 = new byte[0];
      Utility.toHexString(byteArray0);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("VF2lwarhy>sfYVSUd-", "z2[P;>", "57DDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: VF2lwarhy>sfYVSUd-
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      Utility.format(592, (-459), true, '<');
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      Object[] objectArray0 = new Object[0];
      Utility.printArray(objectArray0, true);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "\"");
      Utility.clearBit((-851), (-2501));
      try { 
        Utility.typeOfSignature("\"");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: \"
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)57;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      boolean boolean0 = false;
      try { 
        Utility.methodSignatureReturnType("<illegal opcode>", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `<illegal opcode>'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-28);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "n*cmGMM");
      byteArray0[1] = (byte)97;
      byteArray0[2] = (byte)87;
      byteArray0[3] = (byte)16;
      byteArray0[4] = (byte)82;
      byteArray0[5] = (byte) (-42);
      byteArray0[6] = (byte)62;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      String string0 = "IvKGVWq";
      Utility.searchOpcode("IvKGVWq");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      byte[] byteArray1 = Utility.decode("IvKGVWq", false);
      Utility.compactClassName("float");
      Utility.equals(byteArray0, byteArray1);
      String string1 = "qw<";
      try { 
        Utility.typeOfMethodSignature("qw<");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: qw<
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      Utility.accessToString(109, false);
      Object[] objectArray0 = new Object[5];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) "public protected static synchronized volatile";
      objectArray0[2] = (Object) "public protected static synchronized volatile";
      objectArray0[3] = (Object) "public protected static synchronized volatile";
      objectArray0[4] = (Object) "public protected static synchronized volatile";
      Utility.printArray(objectArray0, false);
      Utility.accessToString(109, false);
      Utility.convertString("H~c+");
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)92;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-117);
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-117), 34);
      Utility.getSignature("0:    dup2\n1:    nop\n2:    f2i\n");
      Utility.compactClassName("public protected static synchronized volatile", "0:    dup2\n1:    nop\n2:    f2i\n", false);
      MockFile mockFile0 = new MockFile((File) null, "java.lang.Object@437e2218, public protected static synchronized volatile, public protected static synchronized volatile, public protected static synchronized volatile, public protected static synchronized volatile");
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream(mockFile0, "public protected static synchronized volatile");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // public protected static synchronized volatile
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-73);
      MockRandomAccessFile mockRandomAccessFile0 = null;
      try {
        mockRandomAccessFile0 = new MockRandomAccessFile("]K,1V8#^D2U", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      String string0 = Utility.compactClassName("Illegally nested brackets:", "Illegally nested brackets:", false);
      assertEquals("Illegally nested brackets:", string0);
      
      short short0 = Utility.searchOpcode("Illegally nested brackets:");
      assertEquals((short) (-1), short0);
      
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      String string1 = Utility.format((short) (-1), (short) (-1), false, '~');
      assertEquals("-1", string1);
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      Utility.convertString("static");
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-80);
      byteArray0[1] = (byte) (-127);
      byteArray0[2] = (byte)25;
      byteArray0[3] = (byte) (-57);
      byteArray0[4] = (byte)49;
      byteArray0[5] = (byte) (-89);
      Utility.encode(byteArray0, false);
      Object[] objectArray0 = new Object[0];
      Utility.printArray(objectArray0);
      Utility.compactClassName("{}", false);
      Utility.toHexString(byteArray0);
      Utility.replace("static", "i2b", "invokeStatic");
      Utility.printArray(objectArray0, false, false);
      Utility.fillup("~z~:", (byte) (-127), false, '');
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, 102, (-1356));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }
}
