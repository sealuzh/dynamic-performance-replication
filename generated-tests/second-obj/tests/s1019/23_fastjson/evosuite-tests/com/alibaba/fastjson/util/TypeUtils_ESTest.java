/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 06:34:05 GMT 2018
 */

package com.alibaba.fastjson.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.PropertyNamingStrategy;
import com.alibaba.fastjson.TypeReference;
import com.alibaba.fastjson.annotation.JSONType;
import com.alibaba.fastjson.parser.ParserConfig;
import com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory;
import com.alibaba.fastjson.parser.deserializer.EnumDeserializer;
import com.alibaba.fastjson.parser.deserializer.JSONPDeserializer;
import com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer;
import com.alibaba.fastjson.parser.deserializer.JavaObjectDeserializer;
import com.alibaba.fastjson.parser.deserializer.Jdk8DateCodec;
import com.alibaba.fastjson.parser.deserializer.MapDeserializer;
import com.alibaba.fastjson.parser.deserializer.NumberDeserializer;
import com.alibaba.fastjson.parser.deserializer.OptionalCodec;
import com.alibaba.fastjson.parser.deserializer.PropertyProcessable;
import com.alibaba.fastjson.parser.deserializer.PropertyProcessableDeserializer;
import com.alibaba.fastjson.parser.deserializer.SqlDateDeserializer;
import com.alibaba.fastjson.parser.deserializer.StackTraceElementDeserializer;
import com.alibaba.fastjson.parser.deserializer.ThrowableDeserializer;
import com.alibaba.fastjson.parser.deserializer.TimeDeserializer;
import com.alibaba.fastjson.serializer.BeanContext;
import com.alibaba.fastjson.serializer.JavaBeanSerializer;
import com.alibaba.fastjson.serializer.PascalNameFilter;
import com.alibaba.fastjson.serializer.SerializeBeanInfo;
import com.alibaba.fastjson.serializer.SimplePropertyPreFilter;
import com.alibaba.fastjson.util.ASMClassLoader;
import com.alibaba.fastjson.util.FieldInfo;
import com.alibaba.fastjson.util.JavaBeanInfo;
import com.alibaba.fastjson.util.ParameterizedTypeImpl;
import com.alibaba.fastjson.util.TypeUtils;
import java.awt.BufferCapabilities;
import java.awt.Dimension;
import java.awt.GridBagConstraints;
import java.awt.ImageCapabilities;
import java.awt.Insets;
import java.awt.Point;
import java.awt.Rectangle;
import java.awt.RenderingHints;
import java.io.PrintStream;
import java.lang.annotation.Annotation;
import java.lang.reflect.Array;
import java.lang.reflect.Constructor;
import java.lang.reflect.Field;
import java.lang.reflect.GenericArrayType;
import java.lang.reflect.Method;
import java.lang.reflect.ParameterizedType;
import java.lang.reflect.Type;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.net.HttpCookie;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.Date;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLWarning;
import java.sql.Time;
import java.sql.Timestamp;
import java.text.Collator;
import java.text.DateFormatSymbols;
import java.text.DecimalFormatSymbols;
import java.text.MessageFormat;
import java.text.NumberFormat;
import java.text.RuleBasedCollator;
import java.text.SimpleDateFormat;
import java.text.StringCharacterIterator;
import java.time.LocalDate;
import java.time.LocalTime;
import java.time.ZoneId;
import java.time.chrono.ChronoLocalDate;
import java.util.ArrayList;
import java.util.BitSet;
import java.util.Collection;
import java.util.HashMap;
import java.util.Hashtable;
import java.util.LinkedHashMap;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Properties;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import java.util.TreeMap;
import java.util.UUID;
import java.util.WeakHashMap;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.atomic.AtomicInteger;
import java.util.concurrent.atomic.AtomicLong;
import java.util.function.BiFunction;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.lang.MockException;
import org.evosuite.runtime.mock.java.lang.MockIllegalAccessException;
import org.evosuite.runtime.mock.java.lang.MockIllegalStateException;
import org.evosuite.runtime.mock.java.lang.MockThread;
import org.evosuite.runtime.mock.java.text.MockDateFormat;
import org.evosuite.runtime.mock.java.text.MockSimpleDateFormat;
import org.evosuite.runtime.mock.java.time.MockLocalTime;
import org.evosuite.runtime.mock.java.time.chrono.MockHijrahDate;
import org.evosuite.runtime.mock.java.time.chrono.MockJapaneseDate;
import org.evosuite.runtime.mock.java.time.chrono.MockMinguoDate;
import org.evosuite.runtime.mock.java.time.chrono.MockThaiBuddhistDate;
import org.evosuite.runtime.mock.java.util.MockCalendar;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TypeUtils_ESTest extends TypeUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Class<String> class0 = String.class;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      boolean boolean0 = TypeUtils.isKotlin(class0);
      assertFalse(boolean0);
      
      long long0 = TypeUtils.fnv1a_64_lower("97aq{^h`k'EXu-#r45Y");
      assertEquals(4533227267717815481L, long0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Class<MockHijrahDate> class0 = MockHijrahDate.class;
      TypeUtils.getParserFeatures(class0);
      SqlDateDeserializer sqlDateDeserializer0 = new SqlDateDeserializer(false);
      // Undeclared exception!
      try { 
        TypeUtils.castToBigDecimal(sqlDateDeserializer0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      TypeUtils.fnv1a_64_lower("IJbz~z%]2^|hB");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-32);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigInteger bigInteger1 = new BigInteger(byteArray0);
      bigInteger0.gcd(bigInteger1);
      TypeUtils.castToBigDecimal(bigInteger0);
      Class<Boolean> class0 = Boolean.class;
      Class<Annotation> class1 = Annotation.class;
      TypeUtils.getAnnotation((Class<?>) class0, class1);
      Class<StackTraceElementDeserializer> class2 = StackTraceElementDeserializer.class;
      EnumDeserializer enumDeserializer0 = null;
      try {
        enumDeserializer0 = new EnumDeserializer(class2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.deserializer.EnumDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Class<SimpleDateFormat> class0 = SimpleDateFormat.class;
      Field[] fieldArray0 = new Field[0];
      Field field0 = TypeUtils.getField(class0, "string", fieldArray0);
      assertNull(field0);
      
      TypeUtils.castToString((Object) null);
      Locale locale0 = TypeUtils.toLocale("Ljava.awt.Font");
      assertEquals("ljava.awt.font", locale0.toString());
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      String string0 = "IJbz~z%]2^|hB";
      TypeUtils.fnv1a_64_lower("IJbz~z%]2^|hB");
      Class<NegativeArraySizeException> class0 = NegativeArraySizeException.class;
      TypeUtils.getParserFeatures(class0);
      NumberFormatException numberFormatException0 = new NumberFormatException();
      NumberFormatException numberFormatException1 = new NumberFormatException("IJbz~z%]2^|hB");
      // Undeclared exception!
      try { 
        TypeUtils.castToShort(numberFormatException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to short, value : java.lang.NumberFormatException
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Class<UUID> class0 = UUID.class;
      TypeUtils.isProxy(class0);
      // Undeclared exception!
      try { 
        TypeUtils.castToDouble(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to double, value : class java.util.UUID
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Class<SQLWarning> class0 = SQLWarning.class;
      boolean boolean0 = TypeUtils.compatibleWithJavaBean;
      // Undeclared exception!
      try { 
        TypeUtils.castToInt(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : class java.sql.SQLWarning
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Class<Rectangle> class0 = Rectangle.class;
      TimeZone.getDefault();
      TypeUtils.decapitalize("jjlo^");
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      TypeUtils.getRawClass(class0);
      MockMinguoDate mockMinguoDate0 = new MockMinguoDate();
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlDate(mockMinguoDate0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : org.evosuite.runtime.mock.java.time.chrono.MockMinguoDate@4c6e3771
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Class<Byte> class0 = Byte.TYPE;
      TypeUtils.fnv1a_64("y1t");
      MockThaiBuddhistDate mockThaiBuddhistDate0 = new MockThaiBuddhistDate();
      // Undeclared exception!
      try { 
        TypeUtils.castToTimestamp(mockThaiBuddhistDate0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : org.evosuite.runtime.mock.java.time.chrono.MockThaiBuddhistDate@4a172ddc
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Class<Float> class0 = Float.TYPE;
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(genericArrayType0).getGenericComponentType();
      Type type0 = TypeUtils.checkPrimitiveArray(genericArrayType0);
      TypeUtils.getCollectionItemClass(type0);
      Class<MockMinguoDate> class1 = MockMinguoDate.class;
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class1, hashtable0);
      Boolean boolean0 = new Boolean("EMPTY_THROWABLE_ARRAY");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      ClassLoader.getSystemClassLoader();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      Class<Time> class0 = Time.class;
      SerializeBeanInfo serializeBeanInfo0 = TypeUtils.buildBeanInfo(class0, (Map<String, String>) null, propertyNamingStrategy0, true);
      assertNotNull(serializeBeanInfo0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Class<Byte> class0 = Byte.TYPE;
      Type type0 = TypeUtils.getCollectionItemType(class0);
      Class<?> class1 = TypeUtils.getRawClass(type0);
      TypeUtils.isGenericParamType(class1);
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      SerializeBeanInfo serializeBeanInfo0 = TypeUtils.buildBeanInfo((Class<?>) class0, (Map<String, String>) linkedHashMap0, propertyNamingStrategy0, true);
      assertNotNull(serializeBeanInfo0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      Class<SqlDateDeserializer> class0 = SqlDateDeserializer.class;
      TypeUtils.getKoltinConstructorParameters(class0);
      ClassLoader.getSystemClassLoader();
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      ArrayList<NoClassDefFoundError> arrayList0 = new ArrayList<NoClassDefFoundError>();
      TypeUtils.castToLong((Object) null);
      ParserConfig parserConfig0 = ParserConfig.global;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "fastjson.parser.autoTypeSupport");
      TypeUtils.castToShort((Object) null);
      TypeUtils.getRawClass(class0);
      // Undeclared exception!
      try { 
        Date.valueOf("gettoString");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.sql.Date", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      TypeUtils.loadClass("iterator", classLoader0, false);
      Class<?> class0 = TypeUtils.getCollectionItemClass((Type) null);
      assertFalse(class0.isEnum());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn((Type) null, (Type) null).when(genericArrayType0).getGenericComponentType();
      Type type0 = TypeUtils.checkPrimitiveArray(genericArrayType0);
      GenericArrayType genericArrayType1 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn("e2oSa*").when(genericArrayType1).toString();
      doReturn(type0).when(genericArrayType1).getGenericComponentType();
      Type type1 = TypeUtils.checkPrimitiveArray(genericArrayType1);
      TypeUtils.getCollectionItemClass(type1);
      Class<?> class0 = TypeUtils.loadClass("Lorg.springframework.util.LinkedMultiValueMap", (ClassLoader) null);
      assertNull(class0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn((Type) null).when(genericArrayType0).getGenericComponentType();
      Type type0 = TypeUtils.checkPrimitiveArray(genericArrayType0);
      // Undeclared exception!
      try { 
        TypeUtils.createCollection(type0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TODO
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      String string0 = ">[% /Velb";
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      Properties properties0 = new Properties();
      ParserConfig parserConfig0 = new ParserConfig();
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) properties0, (Type) parameterizedTypeImpl0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // exepct '[', but {, pos 1, json : {}
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(genericArrayType0).toString();
      doReturn((Type) null).when(genericArrayType0).getGenericComponentType();
      Type type0 = TypeUtils.checkPrimitiveArray(genericArrayType0);
      TypeUtils.getCollectionItemClass(type0);
      TypeUtils.loadClass(">[% /Velb", (ClassLoader) null);
      Properties properties0 = new Properties();
      ParserConfig parserConfig0 = new ParserConfig();
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) properties0, type0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : null
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Class<MapDeserializer> class0 = MapDeserializer.class;
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      hashtable0.put("vkp1l", ",>xn B#wNU~HD=2aS");
      hashtable0.put("#;0)F:5AEoa>", "lineNumber");
      TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) hashtable0);
      assertEquals(2, hashtable0.size());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      TypeUtils.clearClassMapping();
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn((Type) null).when(genericArrayType0).getGenericComponentType();
      TypeUtils.checkPrimitiveArray(genericArrayType0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("matchField");
      FileSystemHandling.shouldAllThrowIOExceptions();
      sQLNonTransientConnectionException0.spliterator();
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlDate(sQLNonTransientConnectionException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : java.sql.SQLNonTransientConnectionException: matchField
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      sQLSyntaxErrorException0.getSuppressed();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("ei]-, `2entRf?", "kotlin.reflect.KParameter", sQLSyntaxErrorException0);
      sQLSyntaxErrorException0.printStackTrace();
      SQLTimeoutException sQLTimeoutException1 = new SQLTimeoutException();
      sQLTimeoutException1.printStackTrace();
      SQLTimeoutException sQLTimeoutException2 = new SQLTimeoutException();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      Class<SqlDateDeserializer> class0 = SqlDateDeserializer.class;
      SerializeBeanInfo serializeBeanInfo0 = TypeUtils.buildBeanInfo(class0, (Map<String, String>) null, propertyNamingStrategy0, false);
      assertNotNull(serializeBeanInfo0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      treeMap0.descendingMap();
      Class<Dimension> class0 = Dimension.class;
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0, treeMap0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      javaBeanSerializer0.getType();
      PascalNameFilter pascalNameFilter0 = new PascalNameFilter();
      javaBeanSerializer0.addFilter(pascalNameFilter0);
      ParserConfig parserConfig0 = new ParserConfig();
      Boolean boolean0 = new Boolean("fastjson.parser.deny");
      // Undeclared exception!
      try { 
        TypeUtils.castToDate(boolean0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : false
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Class<PropertyProcessable> class0 = PropertyProcessable.class;
      PropertyProcessableDeserializer propertyProcessableDeserializer0 = new PropertyProcessableDeserializer(class0);
      Byte.compare((byte)122, (byte)122);
      HashMap<String, Field> hashMap0 = new HashMap<String, Field>();
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      classLoader0.clearAssertionStatus();
      TypeUtils.loadClass("d_#1@oJN*hylQ@", classLoader0, false);
      TypeUtils.loadClass("javax.xml.datatype.XMLGregorianCalendar");
      TypeUtils.getGenericParamType(class0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("\":\"");
      MockIllegalAccessException mockIllegalAccessException0 = new MockIllegalAccessException();
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlDate("i");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : i
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Type type0 = TypeUtils.getCollectionItemType((Type) null);
      Type type1 = TypeUtils.getGenericParamType(type0);
      assertNull(type1);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Class<SQLWarning> class0 = SQLWarning.class;
      TypeUtils.decapitalize("<JZ,eVe-pn;'ol&t7}@");
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("HCVe?X/~o;G1\"");
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      TypeUtils.getRawClass(class0);
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlDate("jjlo^");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : jjlo^
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Class<NegativeArraySizeException> class0 = NegativeArraySizeException.class;
      TypeUtils.decapitalize("IJbz~z%]2^|hB");
      TypeUtils.isTransient((Method) null);
      Class<Boolean> class1 = Boolean.TYPE;
      Type[] typeArray0 = new Type[8];
      typeArray0[0] = (Type) class1;
      typeArray0[1] = (Type) class1;
      typeArray0[2] = (Type) class0;
      Class<Integer> class2 = Integer.TYPE;
      typeArray0[3] = (Type) class2;
      typeArray0[4] = (Type) class0;
      typeArray0[5] = (Type) class1;
      typeArray0[6] = (Type) class0;
      typeArray0[7] = (Type) class0;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, typeArray0[6], typeArray0[5]);
      Insets insets0 = new Insets(97, 59, 97, 1933);
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      ImageCapabilities imageCapabilities0 = new ImageCapabilities(false);
      TypeUtils.castToString(imageCapabilities0);
      TypeUtils.toLocale("com.alibaba.fastjson.parser.deserializer.ObjectDeserializer");
      OptionalCodec optionalCodec0 = OptionalCodec.instance;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      // Undeclared exception!
      try { 
        TypeUtils.castToBigDecimal(classLoader0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Class<Throwable> class0 = Throwable.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      WeakHashMap<String, Field> weakHashMap0 = new WeakHashMap<String, Field>(333);
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      TypeUtils.computeGetters((Class<?>) class0, jSONType0, (Map<String, String>) null, (Map<String, Field>) weakHashMap0, false, propertyNamingStrategy0);
      ParserConfig.getFieldFromCache("!9!2(9_[UQp`-K", weakHashMap0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      LocalTime localTime0 = MockLocalTime.ofNanoOfDay(38);
      Time.valueOf(localTime0);
      MockThread.currentThread();
      IllegalAccessError illegalAccessError0 = new IllegalAccessError("!9!2(9_[UQp`-K");
      assertEquals("!9!2(9_[UQp`-K", illegalAccessError0.getMessage());
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Class<MockJapaneseDate> class0 = MockJapaneseDate.class;
      TypeUtils.getKoltinConstructorParameters(class0);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      Locale.getISOLanguages();
      TypeUtils.getRawClass(class0);
      TypeUtils typeUtils0 = new TypeUtils();
      Locale locale0 = Locale.FRANCE;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
      // Undeclared exception!
      try { 
        TypeUtils.castToByte(mockGregorianCalendar0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to byte, value : org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Field[] fieldArray0 = new Field[0];
      Class<MockSimpleDateFormat> class0 = MockSimpleDateFormat.class;
      TypeUtils.getField(class0, "XuyhkaLl#.)N.8Dd", fieldArray0);
      NumberFormat.getIntegerInstance();
      Class<NoClassDefFoundError> class1 = NoClassDefFoundError.class;
      TypeUtils.isProxy(class1);
      long long0 = Byte.toUnsignedLong((byte) (-22));
      assertEquals(234L, long0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Class<InterruptedException> class0 = InterruptedException.class;
      TypeUtils.getSerializeFeatures(class0);
      NoSuchFieldError noSuchFieldError0 = new NoSuchFieldError("java.lang.NoClassDefFoundError");
      // Undeclared exception!
      try { 
        TypeUtils.castToTimestamp(noSuchFieldError0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : java.lang.NoSuchFieldError: java.lang.NoClassDefFoundError
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Class<SQLWarning> class0 = SQLWarning.class;
      ThreadGroup threadGroup0 = new ThreadGroup("m3&7/801g)");
      String string0 = ParserConfig.AUTOTYPE_SUPPORT_PROPERTY;
      Class<Double> class1 = Double.class;
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class1);
      javaBeanSerializer0.getType();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      GridBagConstraints gridBagConstraints0 = new GridBagConstraints();
      ParserConfig parserConfig0 = new ParserConfig();
      Constructor<JavaObjectDeserializer>[] constructorArray0 = (Constructor<JavaObjectDeserializer>[]) Array.newInstance(Constructor.class, 0);
      TypeUtils.getKoltinConstructor(constructorArray0);
      Double.isFinite(1496.046692003);
      LinkedHashMap<String, ClientInfoStatus> linkedHashMap0 = new LinkedHashMap<String, ClientInfoStatus>();
      String string1 = "S,-Q7.";
      NoSuchFieldException noSuchFieldException0 = new NoSuchFieldException("getEra");
      ParserConfig parserConfig1 = ParserConfig.global;
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) linkedHashMap0, (Type) null, parserConfig1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : null
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Class<Field> class0 = Field.class;
      Class<Annotation> class1 = Annotation.class;
      TypeUtils.getAnnotation((Class<?>) class0, class1);
      boolean boolean0 = TypeUtils.isHibernateInitialized((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-1));
      Byte.toUnsignedLong((byte)14);
      Class<Point> class0 = Point.class;
      Byte.compare((byte)19, (byte)19);
      Byte.toUnsignedInt((byte)14);
      Byte.toUnsignedLong((byte) (-1));
      ParserConfig parserConfig0 = new ParserConfig(true);
      // Undeclared exception!
      try { 
        TypeUtils.castToEnum((Object) byte0, class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.awt.Point
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Class<UUID> class0 = UUID.class;
      // Undeclared exception!
      try { 
        TypeUtils.castToBigInteger(class0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"java.lan\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      TypeUtils typeUtils0 = new TypeUtils();
      // Undeclared exception!
      try { 
        TypeUtils.castToDouble(typeUtils0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to double, value : com.alibaba.fastjson.util.TypeUtils@1
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      Class<Jdk8DateCodec> class0 = Jdk8DateCodec.class;
      TypeUtils.castToJavaBean((Object) null, class0);
      LinkedHashMap<IllegalStateException, SQLTimeoutException> linkedHashMap0 = new LinkedHashMap<IllegalStateException, SQLTimeoutException>();
      classLoader0.setClassAssertionStatus("to", false);
      // Undeclared exception!
      try { 
        TypeUtils.castToTimestamp("cl");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : cl
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      // Undeclared exception!
      try { 
        TypeUtils.castToLong(linkedHashSet0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to long, value : []
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      String string0 = "\\ !%Wa0&3YmRJPc3w";
      Field[] fieldArray0 = new Field[0];
      Boolean boolean0 = new Boolean(" !%Wa0&3YmRJPc3w");
      // Undeclared exception!
      try { 
        TypeUtils.castToLong(" !%Wa0&3YmRJPc3w");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to long, value :  !%Wa0&3YmRJPc3w
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      TypeUtils.toLocale("hy=,");
      LinkedHashMap<IllegalStateException, SQLTimeoutException> linkedHashMap0 = new LinkedHashMap<IllegalStateException, SQLTimeoutException>();
      Class<JSONPDeserializer> class0 = JSONPDeserializer.class;
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0, (Map<String, String>) null);
      // Undeclared exception!
      try { 
        TypeUtils.castToShort("v&\"-.!zz^Y1[p3hN");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"v&\"-.!zz^Y1[p3hN\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Class<Properties> class0 = Properties.class;
      TypeUtils.isPath(class0);
      NumberFormatException numberFormatException0 = new NumberFormatException();
      Class<Jdk8DateCodec> class1 = Jdk8DateCodec.class;
      // Undeclared exception!
      try { 
        TypeUtils.castToJavaBean((Object) class0, class1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : com.alibaba.fastjson.parser.deserializer.Jdk8DateCodec
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Class<SQLWarning> class0 = SQLWarning.class;
      boolean boolean0 = TypeUtils.compatibleWithJavaBean;
      Class<Jdk8DateCodec> class1 = Jdk8DateCodec.class;
      // Undeclared exception!
      try { 
        TypeUtils.castToJavaBean((Object) "y1t", class1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : com.alibaba.fastjson.parser.deserializer.Jdk8DateCodec
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      InstantiationError instantiationError0 = new InstantiationError("kotlin.ranges.IntRange");
      instantiationError0.getLocalizedMessage();
      // Undeclared exception!
      try { 
        TypeUtils.castToFloat(instantiationError0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to float, value : java.lang.InstantiationError: kotlin.ranges.IntRange
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Class<Integer> class0 = Integer.TYPE;
      TypeUtils.getClass((Type) class0);
      Class<ParameterizedTypeImpl> class1 = ParameterizedTypeImpl.class;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      SerializeBeanInfo serializeBeanInfo0 = TypeUtils.buildBeanInfo(class1, (Map<String, String>) null, propertyNamingStrategy0, true);
      assertNotNull(serializeBeanInfo0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Class<MessageFormat> class0 = MessageFormat.class;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      LinkedHashMap<String, ClientInfoStatus> linkedHashMap0 = new LinkedHashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException((String) null, linkedHashMap0);
      MockThread mockThread0 = new MockThread();
      MockThread mockThread1 = new MockThread(mockThread0, "string");
      ClassLoader classLoader0 = mockThread1.getContextClassLoader();
      classLoader0.getParent();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      TypeUtils.cast((Object) null, (Type) class0, parserConfig0);
      Class class1 = (Class)TypeUtils.unwrapOptional(class0);
      assertFalse(class1.isPrimitive());
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      Byte.toUnsignedLong((byte)96);
      LinkedHashMap<IllegalStateException, SQLTimeoutException> linkedHashMap0 = new LinkedHashMap<IllegalStateException, SQLTimeoutException>();
      IllegalAccessError illegalAccessError0 = new IllegalAccessError();
      MockIllegalStateException mockIllegalStateException0 = new MockIllegalStateException("T\"", illegalAccessError0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("Ljava.awt.Rectangle", "T\"", 4044);
      linkedHashMap0.replace((IllegalStateException) mockIllegalStateException0, sQLTimeoutException0);
      Class<Collator> class0 = Collator.class;
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0);
      boolean boolean0 = TypeUtils.isGenericParamType(class0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Class<Rectangle> class0 = Rectangle.class;
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      treeMap0.descendingMap();
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      Class<DecimalFormatSymbols> class1 = DecimalFormatSymbols.class;
      TypeUtils.castToJavaBean((Object) treeMap0, class1);
      TypeUtils.getRawClass(class0);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoader classLoader1 = classLoader0.getParent();
      classLoader1.getParent();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      classLoader0.setClassAssertionStatus("fastjson.parser.deny", false);
      ClassLoader classLoader2 = ClassLoader.getSystemClassLoader();
      parserConfig0.setDefaultClassLoader(classLoader2);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Class<ClassLoader> class2 = ClassLoader.class;
      JavaBeanDeserializer javaBeanDeserializer0 = new JavaBeanDeserializer(parserConfig0, class2);
      MockThread mockThread0 = new MockThread();
      mockThread0.getContextClassLoader();
      ParserConfig parserConfig1 = new ParserConfig(classLoader0);
      Float float0 = new Float((-1380.892978));
      Class<MessageFormat> class3 = MessageFormat.class;
      // Undeclared exception!
      try { 
        TypeUtils.castToEnum((Object) javaBeanDeserializer0, class3, parserConfig1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.text.MessageFormat
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      TypeUtils.toLocale("hy=,");
      LinkedHashMap<IllegalStateException, SQLTimeoutException> linkedHashMap0 = new LinkedHashMap<IllegalStateException, SQLTimeoutException>();
      MockIllegalStateException mockIllegalStateException0 = new MockIllegalStateException("hy=,", (Throwable) null);
      BiFunction<RuntimeException, Object, SQLTimeoutException> biFunction0 = (BiFunction<RuntimeException, Object, SQLTimeoutException>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      Class<Dimension> class0 = Dimension.class;
      List<FieldInfo> list0 = TypeUtils.computeGetters(class0, (Map<String, String>) null, false);
      assertEquals(3, list0.size());
      
      boolean boolean0 = TypeUtils.isGenericParamType(class0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      classLoader0.setClassAssertionStatus("<X4\"T2E#((:rxF", true);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      ClassLoader classLoader1 = aSMClassLoader0.getParent();
      classLoader1.setDefaultAssertionStatus(true);
      TypeUtils.loadClass((String) null, classLoader1, false);
      TypeUtils.decapitalize("language");
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl((Type[]) null, (Type) null, (Type) null);
      ParserConfig parserConfig0 = new ParserConfig(true);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) null, (ParameterizedType) parameterizedTypeImpl0, parserConfig0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Thread thread0 = MockThread.currentThread();
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      MockThread mockThread0 = new MockThread(thread0);
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      TypeUtils.loadClass("i5UN", classLoader0, true);
      // Undeclared exception!
      try { 
        TypeUtils.castToShort("i5UN");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"i5UN\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Class<MockJapaneseDate> class0 = MockJapaneseDate.class;
      TypeUtils.getKoltinConstructorParameters(class0);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      // Undeclared exception!
      try { 
        TypeUtils.castToDate(batchUpdateException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : java.sql.BatchUpdateException
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Class<Float> class0 = Float.TYPE;
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(genericArrayType0).getGenericComponentType();
      Type type0 = TypeUtils.checkPrimitiveArray(genericArrayType0);
      TypeUtils.getCollectionItemClass(type0);
      Class<?> class1 = TypeUtils.loadClass("X|ge#DHGoUZWV", (ClassLoader) null);
      assertNull(class1);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      NumberFormatException numberFormatException0 = new NumberFormatException();
      Class<Jdk8DateCodec> class0 = Jdk8DateCodec.class;
      TypeUtils.castToJavaBean((Object) null, class0);
      int int0 = TypeUtils.getParserFeatures(class0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Class<Boolean> class0 = Boolean.TYPE;
      // Undeclared exception!
      try { 
        TypeUtils.createCollection(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create instance error, class boolean
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Hashtable<String, Object> hashtable0 = new Hashtable<String, Object>();
      Class<JavaObjectDeserializer> class0 = JavaObjectDeserializer.class;
      hashtable0.put("o", "o");
      ParserConfig parserConfig0 = ParserConfig.global;
      parserConfig0.getDeserializer((Type) class0);
      JavaObjectDeserializer javaObjectDeserializer0 = TypeUtils.castToJavaBean((Map<String, Object>) hashtable0, class0, parserConfig0);
      assertEquals(12, javaObjectDeserializer0.getFastMatchToken());
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      TypeUtils.toLocale("hy=,");
      LinkedHashMap<IllegalStateException, SQLTimeoutException> linkedHashMap0 = new LinkedHashMap<IllegalStateException, SQLTimeoutException>();
      Class<JSONPDeserializer> class0 = JSONPDeserializer.class;
      Boolean boolean0 = new Boolean("hy=,");
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn(class0).when(genericArrayType0).getGenericComponentType();
      TypeUtils.checkPrimitiveArray(genericArrayType0);
      Short short0 = TypeUtils.castToShort((Object) null);
      assertNull(short0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      TypeUtils typeUtils0 = new TypeUtils();
      Class<TimeUnit> class0 = TimeUnit.class;
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-32);
      byteArray0[1] = (byte) (-32);
      byteArray0[2] = (byte) (-32);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigInteger bigInteger1 = bigInteger0.not();
      BigInteger bigInteger2 = new BigInteger(byteArray0);
      bigInteger2.gcd(bigInteger1);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      BigDecimal bigDecimal0 = new BigDecimal((int) (byte) (-32));
      TypeUtils.castToBigDecimal(bigDecimal0);
      Class<Annotation> class1 = Annotation.class;
      TypeUtils.getAnnotation((Class<?>) class0, class1);
      Class<NumberDeserializer> class2 = NumberDeserializer.class;
      EnumDeserializer enumDeserializer0 = null;
      try {
        enumDeserializer0 = new EnumDeserializer(class2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.deserializer.EnumDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "A4v?mr;DnQ17L!\"I2j");
      TypeUtils.fnv1a_64(";Ljavalang/Object;)Z");
      MockThread.reset();
      LinkedHashMap<IllegalStateException, SQLTimeoutException> linkedHashMap0 = new LinkedHashMap<IllegalStateException, SQLTimeoutException>();
      Class<ThrowableDeserializer> class0 = ThrowableDeserializer.class;
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0, (Map<String, String>) null);
      javaBeanSerializer0.getBeforeFilters();
      javaBeanSerializer0.getType();
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "getMtClass");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Class<SQLWarning> class0 = SQLWarning.class;
      TypeUtils.isPath(class0);
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      weakHashMap0.put("mDh-NPraBKo", "mDh-NPraBKo");
      weakHashMap0.put("=lJp\"`H {n:iPA.1", "=lJp\"`H {n:iPA.1");
      NumberFormatException numberFormatException0 = new NumberFormatException();
      numberFormatException0.fillInStackTrace();
      weakHashMap0.containsKey(numberFormatException0);
      weakHashMap0.put("y1t", "=lJp\"`H {n:iPA.1");
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      boolean boolean0 = TypeUtils.isGenericParamType(parameterizedTypeImpl0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Class<Properties> class0 = Properties.class;
      MockIllegalStateException mockIllegalStateException0 = new MockIllegalStateException();
      InstantiationError instantiationError0 = new InstantiationError();
      TypeUtils.getClass((Type) class0);
      // Undeclared exception!
      try { 
        TypeUtils.castToInt("DF");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"DF\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      sQLSyntaxErrorException0.getSuppressed();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("kotlin.reflect.KParameter");
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      sQLTimeoutException0.forEach(consumer0);
      sQLSyntaxErrorException0.printStackTrace();
      sQLTimeoutException0.printStackTrace();
      SQLTimeoutException sQLTimeoutException1 = new SQLTimeoutException();
      TypeUtils.loadClass("[B", (ClassLoader) null, false);
      TypeUtils.loadClass("Ljava.util.concurrent.ConcurrentSkipListSet");
      TypeUtils.getGenericParamType((Type) null);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("i");
      MockIllegalAccessException mockIllegalAccessException0 = new MockIllegalAccessException();
      Class<EnumDeserializer> class0 = EnumDeserializer.class;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoader classLoader1 = classLoader0.getParent();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader1);
      ASMDeserializerFactory aSMDeserializerFactory1 = new ASMDeserializerFactory(classLoader1);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory1);
      InstantiationError instantiationError0 = new InstantiationError("fastjson.parser.autoTypeSupport");
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) instantiationError0, class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : com.alibaba.fastjson.parser.deserializer.EnumDeserializer
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Class<Long> class0 = Long.TYPE;
      TypeUtils.isGenericParamType(class0);
      TypeUtils typeUtils0 = new TypeUtils();
      Class<SqlDateDeserializer> class1 = SqlDateDeserializer.class;
      TypeUtils.isKotlin(class1);
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn(class1).when(genericArrayType0).getGenericComponentType();
      TypeUtils.checkPrimitiveArray(genericArrayType0);
      Type type0 = TypeUtils.unwrapOptional(class1);
      Class<MockGregorianCalendar> class2 = MockGregorianCalendar.class;
      FieldInfo fieldInfo0 = new FieldInfo("", class2, class0, type0, (Field) null, (-1984853738), 436, 436);
      Class<SimpleTimeZone> class3 = SimpleTimeZone.class;
      BeanContext beanContext0 = new BeanContext(class3, fieldInfo0);
      Class<MockMinguoDate> class4 = MockMinguoDate.class;
      BeanContext beanContext1 = new BeanContext(class4, fieldInfo0);
      beanContext1.getMethod();
      TypeUtils.decapitalize("L");
      TypeUtils.getCollectionItemType(class0);
      TypeUtils.isNumber("");
      System.setCurrentTimeMillis((-8109300701639721088L));
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-1));
      Byte.compare((byte)14, (byte) (-1));
      Byte.compare((byte)19, (byte)19);
      TypeUtils.castToBigInteger((Object) null);
      Float float0 = TypeUtils.castToFloat(byte0);
      assertEquals((-1.0F), (float)float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Class<ParameterizedTypeImpl> class0 = ParameterizedTypeImpl.class;
      TypeUtils.isPath(class0);
      Class class1 = (Class)TypeUtils.getCollectionItemType(class0);
      assertEquals("class java.lang.Object", class1.toString());
      assertNotNull(class1);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Integer integer0 = Integer.valueOf(435);
      Time time0 = TypeUtils.castToSqlTime(integer0);
      assertEquals("00:00:00", time0.toString());
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Integer.valueOf(47);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("Lorg.springframework.util.LinkedMultiValueMap", "string");
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlTime(sQLNonTransientException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : java.sql.SQLNonTransientException: Lorg.springframework.util.LinkedMultiValueMap
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      WeakHashMap<PropertyProcessableDeserializer, InternalError> weakHashMap0 = new WeakHashMap<PropertyProcessableDeserializer, InternalError>();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      TypeUtils.loadClass("", classLoader0);
      WeakHashMap<String, Field> weakHashMap1 = new WeakHashMap<String, Field>();
      ParserConfig.getFieldFromCache("J:A", weakHashMap1);
      Dimension dimension0 = new Dimension();
      // Undeclared exception!
      try { 
        TypeUtils.castToDouble(dimension0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to double, value : java.awt.Dimension[width=0,height=0]
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Class<Float> class0 = Float.TYPE;
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(genericArrayType0).getGenericComponentType();
      Type type0 = TypeUtils.checkPrimitiveArray(genericArrayType0);
      Type[] typeArray0 = new Type[0];
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, type0, class0);
      // Undeclared exception!
      try { 
        TypeUtils.getCollectionItemClass(parameterizedTypeImpl0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      Byte.toUnsignedLong((byte)15);
      Byte.compare((byte)48, (byte)69);
      Byte.compare((byte)15, (byte)20);
      Byte.toUnsignedInt((byte) (-17));
      Boolean boolean0 = Boolean.FALSE;
      TypeUtils.castToFloat((Object) null);
      // Undeclared exception!
      try { 
        TypeUtils.castToChar(boolean0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to char, value : false
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      TypeUtils.castToDouble((Object) null);
      Byte byte0 = TypeUtils.castToByte((Object) null);
      assertNull(byte0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Integer integer0 = new Integer(2034);
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      weakHashMap0.put("N`i", "EsRqf72O<");
      ThreadGroup threadGroup0 = new ThreadGroup("mDh-NPraBKo");
      MockThread mockThread0 = new MockThread();
      TypeUtils.decapitalize((String) null);
      ParserConfig parserConfig0 = new ParserConfig(true);
      JavaObjectDeserializer javaObjectDeserializer0 = new JavaObjectDeserializer();
      Class<AtomicInteger> class0 = AtomicInteger.class;
      boolean boolean0 = TypeUtils.isProxy(class0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Class<Method> class0 = Method.class;
      TypeUtils.getKoltinConstructorParameters(class0);
      System.setCurrentTimeMillis(2105L);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      PropertyNamingStrategy propertyNamingStrategy0 = parserConfig0.propertyNamingStrategy;
      Date date0 = TypeUtils.castToSqlDate((Object) null);
      assertNull(date0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Byte.toUnsignedLong((byte)14);
      Byte.compare((byte)14, (byte) (-1));
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("Lorg.springframework.util.LinkedMultiValueMap", "Lorg.springframework.util.LinkedMultiValueMap");
      Time time0 = TypeUtils.castToSqlTime((Object) null);
      assertNull(time0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Class<SQLWarning> class0 = SQLWarning.class;
      boolean boolean0 = TypeUtils.compatibleWithJavaBean;
      TypeUtils.fnv1a_64("~mwuOE(U%PTq*");
      TypeUtils typeUtils0 = new TypeUtils();
      TypeUtils.unwrapOptional(class0);
      TypeUtils.toLocale("~mwuOE(U%PTq*");
      TypeUtils.castToTimestamp((Object) null);
      Class<Annotation> class1 = Annotation.class;
      Annotation annotation0 = TypeUtils.getAnnotation((Class<?>) class0, class1);
      assertNull(annotation0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      weakHashMap0.put("javax.xml.datatype.XMLGregorianCalendar", "javax.xml.datatype.XMLGregorianCalendar");
      ThreadGroup threadGroup0 = new ThreadGroup("mDh-NPraBo");
      TypeUtils.decapitalize("mDh-NPraBo");
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      Class<RenderingHints> class0 = RenderingHints.class;
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0, weakHashMap0);
      NoSuchMethodError noSuchMethodError0 = new NoSuchMethodError("Lorg.springframework.util.LinkedMultiValueMap");
      // Undeclared exception!
      try { 
        TypeUtils.castToShort(noSuchMethodError0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to short, value : java.lang.NoSuchMethodError: Lorg.springframework.util.LinkedMultiValueMap
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      TypeUtils.loadClass("iterat%or", classLoader0, false);
      Class<?> class0 = TypeUtils.getCollectionItemClass((Type) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      TypeUtils.castToDate((Object) null);
      Collection collection0 = TypeUtils.createCollection(class0);
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Class<SQLWarning> class0 = SQLWarning.class;
      TypeUtils.isPath(class0);
      NumberFormatException numberFormatException0 = new NumberFormatException();
      numberFormatException0.fillInStackTrace();
      MockPrintStream mockPrintStream0 = new MockPrintStream("IgnoreNotMatch");
      NoSuchMethodException noSuchMethodException0 = new NoSuchMethodException();
      noSuchMethodException0.printStackTrace((PrintStream) mockPrintStream0);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)27;
      byteArray0[1] = (byte)32;
      byteArray0[2] = (byte)82;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      TypeUtils.castToTimestamp(bigInteger0);
      // Undeclared exception!
      try { 
        TypeUtils.castToDouble(mockPrintStream0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to double, value : org.evosuite.runtime.mock.java.io.MockPrintStream@66cfa2f
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      LinkedHashMap<IllegalStateException, SQLTimeoutException> linkedHashMap0 = new LinkedHashMap<IllegalStateException, SQLTimeoutException>();
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException();
      MockIllegalStateException mockIllegalStateException0 = new MockIllegalStateException("gethashCode", sQLNonTransientException0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("getSQLState");
      linkedHashMap0.put(mockIllegalStateException0, sQLTimeoutException0);
      SQLTimeoutException sQLTimeoutException1 = new SQLTimeoutException();
      Dimension dimension0 = new Dimension();
      TypeUtils.isHibernateInitialized(dimension0);
      classLoader0.setClassAssertionStatus("to", false);
      sQLTimeoutException1.getSuppressed();
      TypeUtils.castToTimestamp("3");
      // Undeclared exception!
      try { 
        TypeUtils.castToLong(linkedHashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to long, value : {org.evosuite.runtime.mock.java.lang.MockThrowable: gethashCode=java.sql.SQLTimeoutException: getSQLState}
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Class<Byte> class0 = Byte.TYPE;
      Type type0 = TypeUtils.getCollectionItemType(class0);
      TypeUtils.getRawClass(type0);
      TimeDeserializer timeDeserializer0 = new TimeDeserializer();
      // Undeclared exception!
      try { 
        TypeUtils.castToBytes(timeDeserializer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : com.alibaba.fastjson.parser.deserializer.TimeDeserializer@1
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Integer integer0 = new Integer(2034);
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>(104, 2034);
      weakHashMap0.put("=lJp\"`H {n:iPA.1", "[XC+L!v ");
      ThreadGroup threadGroup0 = new ThreadGroup("getclone");
      MockThread mockThread0 = new MockThread();
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      classLoader0.getParent();
      TypeUtils.loadClass("WriteTabAsSpecial", classLoader0, true);
      TypeUtils.decapitalize("com.alibaba.fastjson.JSONPObject");
      TypeUtils.getGenericParamType((Type) null);
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl((Type[]) null, (Type) null, (Type) null);
      parameterizedTypeImpl0.getTypeName();
      parameterizedTypeImpl0.getTypeName();
      ParserConfig parserConfig0 = new ParserConfig(false);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) "com.alibaba.fastjson.JSONPObject", (ParameterizedType) parameterizedTypeImpl0, parserConfig0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      sQLSyntaxErrorException0.getSuppressed();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("kotlin.reflect.KParameter");
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      sQLTimeoutException0.forEach(consumer0);
      sQLSyntaxErrorException0.printStackTrace();
      sQLTimeoutException0.printStackTrace();
      Byte.compare((byte)107, (byte) (-80));
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        TypeUtils.castToBoolean("^`J n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to boolean, value : ^`J n
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Class<Boolean> class0 = Boolean.TYPE;
      TypeUtils.getCollectionItemType(class0);
      TypeUtils.decapitalize("#:\"Q_HF|%]iE*M?#\"\"^");
      LinkedHashMap<IllegalStateException, SQLTimeoutException> linkedHashMap0 = new LinkedHashMap<IllegalStateException, SQLTimeoutException>();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("s");
      linkedHashMap0.replace((IllegalStateException) null, sQLTimeoutException0);
      Class<ChronoLocalDate> class1 = ChronoLocalDate.class;
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class1);
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Class<SQLWarning> class0 = SQLWarning.class;
      TypeUtils.isPath(class0);
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      weakHashMap0.put("=lJp\"`H {n:iPA.1", "mDh-NPraBKo");
      ThreadGroup threadGroup0 = new ThreadGroup("mDh-NPraBKo");
      MockThread mockThread0 = new MockThread();
      MockThread mockThread1 = new MockThread(threadGroup0, mockThread0, "o", 1L);
      MockThread.dumpStack();
      ClassLoader classLoader0 = mockThread1.getContextClassLoader();
      MockThread.reset();
      ClassLoader classLoader1 = classLoader0.getParent();
      ClassLoader.getSystemClassLoader();
      MockThread.interrupted();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader1);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      aSMClassLoader0.setDefaultAssertionStatus(true);
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn((Type) null).when(genericArrayType0).getGenericComponentType();
      TypeUtils.checkPrimitiveArray(genericArrayType0);
      TypeUtils.unwrapOptional(class0);
      TypeUtils.getClassFromMapping("mDh-NPraBKo");
      // Undeclared exception!
      try { 
        TypeUtils.isPath((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.Class", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      TypeUtils.fnv1a_64_lower("IJbz~z%]2^|hB");
      TypeUtils.decapitalize("fastjson.compatibleWithFieldName");
      ConcurrentHashMap<String, Field> concurrentHashMap0 = new ConcurrentHashMap<String, Field>();
      ParserConfig.getFieldFromCache("IJbz~z%]2^|hB", concurrentHashMap0);
      NumberFormat.getIntegerInstance();
      Class<BufferCapabilities> class0 = BufferCapabilities.class;
      TypeUtils.getRawClass(class0);
      TypeUtils.castToString(")/");
      Class<ChronoLocalDate> class1 = ChronoLocalDate.class;
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>(linkedHashMap0);
      TypeUtils.computeGetters((Class<?>) class1, (Map<String, String>) identityHashMap0);
      java.util.IdentityHashMap<String, ClientInfoStatus> identityHashMap1 = new java.util.IdentityHashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(identityHashMap1);
      // Undeclared exception!
      try { 
        TypeUtils.castToBigDecimal(sQLClientInfoException0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Class<TimeZone> class0 = TimeZone.class;
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) treeMap0);
      String string0 = ",;uAW-6uDiQ";
      Field[] fieldArray0 = new Field[4];
      Map<String, Field> map0 = null;
      // Undeclared exception!
      try { 
        ParserConfig.getFieldFromCache(",;uAW-6uDiQ", (Map<String, Field>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.ParserConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-1));
      long long0 = new Byte((byte)14);
      Byte.compare((byte)14, (byte) (-1));
      Byte.compare((byte)19, (byte)19);
      Byte.toUnsignedInt((byte)14);
      Byte.toUnsignedLong((byte) (-1));
      ParserConfig parserConfig0 = new ParserConfig(true);
      StackOverflowError stackOverflowError0 = new StackOverflowError();
      Byte byte1 = TypeUtils.castToByte(byte0);
      assertEquals((byte) (-1), (byte)byte1);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Byte byte0 = new Byte((byte)1);
      Byte.toUnsignedLong((byte)14);
      Byte.compare((byte)14, (byte)1);
      Class<Point> class0 = Point.class;
      MockPrintStream mockPrintStream0 = new MockPrintStream("9.la[X|");
      NoSuchMethodException noSuchMethodException0 = new NoSuchMethodException();
      noSuchMethodException0.printStackTrace((PrintStream) mockPrintStream0);
      TypeUtils.castToTimestamp((Object) null);
      TypeUtils.isKotlin(class0);
      TypeUtils.isNumber("9.la[X|");
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Object object0 = new Object();
      Boolean boolean0 = TypeUtils.castToBoolean((Object) null);
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      TypeUtils.getClassFromMapping(")YOvcegk#0p-3c(D");
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      TypeUtils.loadClass(")YOvcegk#0p-3c(D", classLoader0);
      WeakHashMap<String, Field> weakHashMap0 = new WeakHashMap<String, Field>();
      ParserConfig.getFieldFromCache("sKD=-", weakHashMap0);
      TypeUtils.castToDouble((Object) null);
      TypeUtils.getKoltinConstructorParameters((Class) null);
      Class<Point> class0 = Point.class;
      MockIllegalAccessException mockIllegalAccessException0 = new MockIllegalAccessException(")YOvcegk#0p-3c(D");
      TypeUtils.castToJavaBean((Object) null, class0);
      TypeUtils.isHibernateInitialized((Object) null);
      TypeUtils.getCollectionItemType((Type) null);
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlTime("sKD=-");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : sKD=-
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(false);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      parserConfig0.setDefaultClassLoader(classLoader0);
      Properties properties0 = new Properties();
      WeakHashMap<String, Field> weakHashMap0 = new WeakHashMap<String, Field>();
      ParserConfig.getFieldFromCache("T?4]VrgGF", weakHashMap0);
      // Undeclared exception!
      try { 
        TypeUtils.castToDouble("sKD=-");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Class<SimpleDateFormat> class0 = SimpleDateFormat.class;
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) hashMap0);
      // Undeclared exception!
      try { 
        TypeUtils.castToShort(hashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to short, value : {}
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      sQLSyntaxErrorException0.getSuppressed();
      sQLSyntaxErrorException0.printStackTrace();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      Consumer<Throwable> consumer0 = (Consumer<Throwable>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      sQLTimeoutException0.getSuppressed();
      sQLTimeoutException0.forEach(consumer0);
      sQLTimeoutException0.printStackTrace();
      SQLTimeoutException sQLTimeoutException1 = new SQLTimeoutException();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      byte[] byteArray0 = new byte[1];
      classLoader0.clearAssertionStatus();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      TypeUtils.loadClass("^`J", classLoader0, false);
      Byte.compare((byte)107, (byte) (-114));
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      HttpCookie httpCookie0 = new HttpCookie("W1", "DS(1!H`3-c\bd;TZi)6");
      // Undeclared exception!
      try { 
        TypeUtils.castToByte("^`J");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"^`J\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Class<Float> class0 = Float.TYPE;
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(genericArrayType0).getGenericComponentType();
      TypeUtils.checkPrimitiveArray(genericArrayType0);
      NumberFormatException numberFormatException0 = new NumberFormatException();
      NumberFormatException numberFormatException1 = new NumberFormatException("=lJp\"`H {n:iPA.1");
      Locale locale0 = Locale.US;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
      TypeUtils.castToSqlTime(mockGregorianCalendar0);
      TypeUtils.castToShort((Object) null);
      HttpCookie httpCookie0 = new HttpCookie("Ty[PVDHZUVddANhbG1", (String) null);
      // Undeclared exception!
      try { 
        TypeUtils.castToByte(httpCookie0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to byte, value : Ty[PVDHZUVddANhbG1=\"null\"
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Class<Jdk8DateCodec> class0 = Jdk8DateCodec.class;
      Class<Jdk8DateCodec> class1 = null;
      // Undeclared exception!
      try { 
        TypeUtils.castToJavaBean((Object) "y1t", (Class<Jdk8DateCodec>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // clazz is null
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      TypeUtils.fnv1a_64_lower("IJbz~z%]2^|hB");
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory((ClassLoader) null);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      classLoader0.setPackageAssertionStatus("IJbz~z%]2^|hB", false);
      classLoader0.clearAssertionStatus();
      ASMClassLoader aSMClassLoader1 = aSMDeserializerFactory0.classLoader;
      classLoader0.getParent();
      aSMClassLoader0.setDefaultAssertionStatus(true);
      Class<Byte> class0 = Byte.class;
      TimeDeserializer timeDeserializer0 = new TimeDeserializer();
      Class<PropertyNamingStrategy> class1 = PropertyNamingStrategy.class;
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class1);
      Class<?> class2 = javaBeanSerializer0.getType();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      GridBagConstraints gridBagConstraints0 = new GridBagConstraints();
      ParserConfig parserConfig0 = new ParserConfig();
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) class0, (Type) class2, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : com.alibaba.fastjson.PropertyNamingStrategy
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Class<Method> class0 = Method.class;
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) linkedHashMap0, true);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Class<SQLWarning> class0 = SQLWarning.class;
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      weakHashMap0.put("=lJp\"`H {n:iPA.1", "mDh-NPraBKo");
      ThreadGroup threadGroup0 = new ThreadGroup("mDh-NPraBKo");
      MockThread mockThread0 = new MockThread(threadGroup0, (Runnable) null, "jjlo^");
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      ASMClassLoader aSMClassLoader1 = aSMDeserializerFactory0.classLoader;
      aSMDeserializerFactory0.classLoader.getParent();
      TypeUtils.loadClass("mDh-NPraBKo", classLoader0, true);
      TypeUtils.decapitalize("<JZ,eVe-pn;'olt7}@");
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0, weakHashMap0);
      TypeUtils.loadClass("<JZ,eVe-pn;'olt7}@", classLoader0, true);
      Locale locale0 = JSON.defaultLocale;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
      Timestamp timestamp0 = TypeUtils.castToTimestamp(mockGregorianCalendar0);
      assertEquals(320000000, timestamp0.getNanos());
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      TypeUtils.getClassFromMapping(")YOvcegk#0p-3c(D");
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      ThreadGroup threadGroup0 = new ThreadGroup((String) null);
      String string0 = "U6Q";
      MockThread mockThread0 = new MockThread((ThreadGroup) null, (Runnable) null, "U6Q");
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      ASMClassLoader aSMClassLoader1 = aSMDeserializerFactory0.classLoader;
      classLoader0.getParent();
      TypeUtils.loadClass("cl.000000000", (ClassLoader) aSMClassLoader1, true);
      TypeUtils.decapitalize("");
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("=lJp\"`H {n:iPA.1");
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      Class<StringCharacterIterator> class0 = StringCharacterIterator.class;
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0, map0);
      JavaBeanSerializer javaBeanSerializer1 = null;
      try {
        javaBeanSerializer1 = new JavaBeanSerializer((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      MockDateFormat mockDateFormat0 = new MockDateFormat();
      // Undeclared exception!
      try { 
        TypeUtils.castToChar("y1t");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to char, value : y1t
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Field[] fieldArray0 = new Field[1];
      Class<MessageFormat> class0 = MessageFormat.class;
      MockThread mockThread0 = new MockThread();
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      // Undeclared exception!
      try { 
        TypeUtils.castToEnum((Object) "string", class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.text.MessageFormat
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      TypeUtils.castToDate((Object) null);
      Class<MockCalendar> class0 = MockCalendar.class;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      LinkedHashMap<String, ClientInfoStatus> linkedHashMap0 = new LinkedHashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("", linkedHashMap0);
      MockThread mockThread0 = new MockThread();
      MockThread mockThread1 = new MockThread(mockThread0, "0>>@T(Ta2b");
      ClassLoader classLoader0 = mockThread1.getContextClassLoader();
      ClassLoader classLoader1 = classLoader0.getParent();
      ParserConfig parserConfig0 = new ParserConfig(classLoader1);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) "0>>@T(Ta2b", (Type) class0, parserConfig0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"0>>@T(Ta2b\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Class<Byte> class0 = Byte.TYPE;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      TypeUtils.castToChar((Object) null);
      boolean boolean0 = TypeUtils.isHibernateInitialized(class0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-1));
      Byte.toUnsignedLong((byte)14);
      Byte.compare((byte)14, (byte) (-1));
      Byte.compare((byte)19, (byte)19);
      Byte.toUnsignedInt((byte)14);
      Byte.toUnsignedLong((byte) (-1));
      ParserConfig parserConfig0 = new ParserConfig(true);
      ConcurrentHashMap<Byte, SQLNonTransientConnectionException> concurrentHashMap0 = new ConcurrentHashMap<Byte, SQLNonTransientConnectionException>();
      TypeUtils.getClassFromMapping("fastjson.parser.deny");
      BigDecimal bigDecimal0 = TypeUtils.castToBigDecimal((Object) null);
      assertNull(bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Class<NoClassDefFoundError> class0 = NoClassDefFoundError.class;
      byte[] byteArray0 = new byte[6];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      TypeUtils.fnv1a_64_lower("UTF-8");
      TypeUtils.castToInt((Object) null);
      WeakHashMap<String, Field> weakHashMap0 = new WeakHashMap<String, Field>();
      ParserConfig.getFieldFromCache("RhGaxZ", weakHashMap0);
      TypeUtils.castToDouble((Object) null);
      TypeUtils.getKoltinConstructorParameters(class0);
      Class<Point> class1 = Point.class;
      Double.isFinite(0.0);
      MockIllegalAccessException mockIllegalAccessException0 = new MockIllegalAccessException("org.springframework.remoting.support.RemoteInvocation");
      LinkedHashMap<RuleBasedCollator, LinkageError> linkedHashMap0 = new LinkedHashMap<RuleBasedCollator, LinkageError>();
      // Undeclared exception!
      try { 
        TypeUtils.castToJavaBean((Object) linkedHashMap0, class1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not get javaBeanDeserializer. java.awt.Point
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      TypeUtils.decapitalize((String) null);
      Class<Boolean> class0 = Boolean.TYPE;
      Class<?> class1 = TypeUtils.getRawClass(class0);
      TypeUtils.getClassFromMapping("2");
      TypeUtils.castToByte((Object) null);
      StackTraceElementDeserializer stackTraceElementDeserializer0 = new StackTraceElementDeserializer();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) stackTraceElementDeserializer0, (Type) class1, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to boolean, value : com.alibaba.fastjson.parser.deserializer.StackTraceElementDeserializer@1
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      sQLSyntaxErrorException0.getSuppressed();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("ei]-, `2entRf?", "getMaxY", sQLSyntaxErrorException0);
      sQLSyntaxErrorException0.printStackTrace();
      SQLTimeoutException sQLTimeoutException1 = new SQLTimeoutException();
      sQLTimeoutException1.printStackTrace();
      SQLTimeoutException sQLTimeoutException2 = new SQLTimeoutException();
      TypeUtils.decapitalize("0t=");
      SQLTimeoutException sQLTimeoutException3 = new SQLTimeoutException("getMaxY");
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      Class<Byte> class0 = Byte.class;
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0, map0);
      Class<SqlDateDeserializer> class1 = SqlDateDeserializer.class;
      JavaBeanSerializer javaBeanSerializer1 = new JavaBeanSerializer(class1, map0);
      Class<?> class2 = javaBeanSerializer1.getType();
      TypeUtils.isGenericParamType(class1);
      FileSystemHandling.shouldAllThrowIOExceptions();
      TypeUtils.fnv1a_64("E]/>9FyqAY^o0.| 1&`");
      ParserConfig parserConfig0 = new ParserConfig();
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) class2, (Type) class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to byte, value : class com.alibaba.fastjson.parser.deserializer.SqlDateDeserializer
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Class<MockHijrahDate> class0 = MockHijrahDate.class;
      TypeUtils.getKoltinConstructorParameters(class0);
      ThreadGroup threadGroup0 = new ThreadGroup("PZ`tZJWAz");
      Thread thread0 = MockThread.currentThread();
      MockThread mockThread0 = new MockThread(thread0, "o");
      MockThread mockThread1 = new MockThread(threadGroup0, mockThread0, "o", 329L);
      ClassLoader classLoader0 = mockThread1.getContextClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      TypeUtils.loadClass((String) null, (ClassLoader) aSMClassLoader0, true);
      Type[] typeArray0 = new Type[3];
      typeArray0[0] = (Type) class0;
      typeArray0[1] = (Type) null;
      typeArray0[2] = (Type) null;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, typeArray0[1], (Type) null);
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) mockThread1, (ParameterizedType) parameterizedTypeImpl0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : com.alibaba.fastjson.util.ParameterizedTypeImpl@92c4fc87
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      sQLSyntaxErrorException0.getSuppressed();
      sQLSyntaxErrorException0.printStackTrace();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      Consumer<Throwable> consumer0 = (Consumer<Throwable>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)60;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      String string0 = "Ndj+l\"Pl&AvgZ9@Bz0";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Ndj+l\"Pl&AvgZ9@Bz0");
      Class<StringCharacterIterator> class0 = StringCharacterIterator.class;
      String[] stringArray0 = new String[1];
      stringArray0[0] = "Ndj+l\"Pl&AvgZ9@Bz0";
      SimplePropertyPreFilter simplePropertyPreFilter0 = new SimplePropertyPreFilter(class0, stringArray0);
      simplePropertyPreFilter0.setMaxLevel((byte)60);
      Class<?> class1 = simplePropertyPreFilter0.getClazz();
      TypeUtils.getGenericParamType(class1);
      Type[] typeArray0 = new Type[3];
      typeArray0[0] = (Type) class1;
      typeArray0[1] = (Type) class1;
      typeArray0[2] = (Type) class1;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, typeArray0[1], typeArray0[1]);
      ParserConfig parserConfig0 = null;
      ParameterizedTypeImpl parameterizedTypeImpl1 = new ParameterizedTypeImpl(typeArray0, parameterizedTypeImpl0, typeArray0[2]);
      Type[] typeArray1 = new Type[0];
      ParameterizedTypeImpl parameterizedTypeImpl2 = new ParameterizedTypeImpl(typeArray1, typeArray0[0], class0);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) consumer0, (ParameterizedType) parameterizedTypeImpl2, (ParserConfig) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // default constructor not found. class java.text.StringCharacterIterator
         //
         verifyException("com.alibaba.fastjson.util.JavaBeanInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("ei]-, `2e}tRf?", "kotlin.reflect.KParameter", sQLSyntaxErrorException0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      sQLTimeoutException0.forEach(consumer0);
      sQLSyntaxErrorException0.printStackTrace();
      sQLTimeoutException0.printStackTrace();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Class<ClassLoader> class0 = ClassLoader.class;
      ParserConfig parserConfig0 = ParserConfig.global;
      JavaBeanDeserializer javaBeanDeserializer0 = new JavaBeanDeserializer(parserConfig0, class0);
      NoSuchFieldError noSuchFieldError0 = new NoSuchFieldError();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "o");
      SQLDataException sQLDataException0 = new SQLDataException("kotlin.reflect.KParameter", "ei]-, `2e}tRf?");
      NoSuchFieldError noSuchFieldError1 = new NoSuchFieldError(";VZ75P");
      noSuchFieldError1.initCause(sQLSyntaxErrorException0);
      noSuchFieldError1.addSuppressed(sQLSyntaxErrorException0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      TypeUtils.fnv1a_64_lower("");
      Class<Annotation> class1 = Annotation.class;
      Class<Annotation> class2 = Annotation.class;
      TypeUtils.getAnnotation((Class<?>) class1, class2);
      Short short0 = new Short((short)49);
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      String string0 = ParserConfig.AUTOTYPE_SUPPORT_PROPERTY;
      TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) concurrentHashMap0, false);
      // Undeclared exception!
      try { 
        TypeUtils.castToFloat("ei]-, `2e}tRf?");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Class<Rectangle> class0 = Rectangle.class;
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      treeMap0.descendingMap();
      java.util.IdentityHashMap<MockSimpleDateFormat, Jdk8DateCodec> identityHashMap0 = new java.util.IdentityHashMap<MockSimpleDateFormat, Jdk8DateCodec>();
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      Class<DecimalFormatSymbols> class1 = DecimalFormatSymbols.class;
      TypeUtils.castToJavaBean((Object) treeMap0, class1);
      TypeUtils.getRawClass(class0);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoader classLoader1 = classLoader0.getParent();
      classLoader1.getParent();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      ThrowableDeserializer throwableDeserializer0 = new ThrowableDeserializer(parserConfig0, class0);
      String string0 = "\"?r";
      String string1 = "notifyAll";
      NoSuchFieldError noSuchFieldError0 = new NoSuchFieldError();
      SQLWarning sQLWarning0 = new SQLWarning("\"?r", "notifyAll", noSuchFieldError0);
      // Undeclared exception!
      try { 
        TypeUtils.castToBytes(sQLWarning0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : java.sql.SQLWarning: \"?r
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      WeakHashMap<PropertyProcessableDeserializer, InternalError> weakHashMap0 = new WeakHashMap<PropertyProcessableDeserializer, InternalError>();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "[short");
      Class<PropertyProcessable> class0 = PropertyProcessable.class;
      PropertyProcessableDeserializer propertyProcessableDeserializer0 = new PropertyProcessableDeserializer(class0);
      TypeUtils.castToBigDecimal(weakHashMap0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      WeakHashMap<PropertyProcessableDeserializer, InternalError> weakHashMap0 = new WeakHashMap<PropertyProcessableDeserializer, InternalError>();
      NoClassDefFoundError noClassDefFoundError0 = new NoClassDefFoundError("AllowArbitraryCommas");
      SQLDataException sQLDataException0 = new SQLDataException((String) null, "AllowArbitraryCommas", noClassDefFoundError0);
      MockException mockException0 = new MockException((String) null, sQLDataException0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException((String) null, mockException0);
      InternalError internalError0 = new InternalError(sQLRecoverableException0);
      weakHashMap0.put((PropertyProcessableDeserializer) null, internalError0);
      // Undeclared exception!
      try { 
        TypeUtils.castToBigDecimal(weakHashMap0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      TypeUtils.fnv1a_64_lower("IJbz~z%]2^|hB");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "^`j");
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      classLoader0.getParent();
      classLoader0.clearAssertionStatus();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory((ClassLoader) null);
      classLoader0.setDefaultAssertionStatus(true);
      classLoader0.setPackageAssertionStatus("IJbz~z%]2^|hB", false);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      classLoader0.getParent();
      aSMDeserializerFactory0.classLoader.setDefaultAssertionStatus(true);
      TypeUtils.loadClass("LocalizedMessage", (ClassLoader) aSMDeserializerFactory0.classLoader, true);
      TypeUtils.decapitalize("fastjson.compatibleWithFieldName");
      Byte.compare((byte)19, (byte)0);
      Byte.toUnsignedLong((byte)0);
      ParserConfig parserConfig0 = new ParserConfig(true);
      Class<Point> class0 = Point.class;
      TypeUtils.getGenericParamType(class0);
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      Class<Integer> class1 = Integer.class;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      TypeUtils.buildBeanInfo((Class<?>) class1, (Map<String, String>) weakHashMap0, propertyNamingStrategy0);
      System.setCurrentTimeMillis((-3034L));
      // Undeclared exception!
      try { 
        TypeUtils.loadClass("[");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Class<SimpleTimeZone> class0 = SimpleTimeZone.class;
      Field[] fieldArray0 = new Field[0];
      TypeUtils.getField(class0, "!z`(>j", fieldArray0);
      TypeUtils.decapitalize("!z`(>j");
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      treeMap0.ceilingEntry("islongValue");
      TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) treeMap0);
      Class<Insets> class1 = Insets.class;
      TypeUtils.getSerializeFeatures(class1);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Type type0 = TypeUtils.unwrapOptional(class0);
      TypeUtils.toLocale("islongValue");
      java.util.IdentityHashMap<String, Field> identityHashMap0 = new java.util.IdentityHashMap<String, Field>();
      identityHashMap0.put("", (Field) null);
      ParserConfig.getFieldFromCache("Ljava.lang.AutoCloseable", identityHashMap0);
      TypeUtils.castToLong((Object) null);
      Type[] typeArray0 = new Type[7];
      typeArray0[0] = (Type) class1;
      Type type1 = TypeUtils.unwrapOptional(typeArray0[0]);
      typeArray0[1] = type1;
      typeArray0[2] = type0;
      typeArray0[3] = type0;
      typeArray0[4] = (Type) class1;
      typeArray0[5] = (Type) class0;
      typeArray0[6] = (Type) class0;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, typeArray0[0], typeArray0[5]);
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) identityHashMap0, (ParameterizedType) parameterizedTypeImpl0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // default constructor not found. class java.util.SimpleTimeZone
         //
         verifyException("com.alibaba.fastjson.util.JavaBeanInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Class<MockJapaneseDate> class0 = MockJapaneseDate.class;
      TypeUtils.getKoltinConstructorParameters(class0);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      Class<BufferCapabilities> class1 = BufferCapabilities.class;
      TypeUtils.getKoltinConstructorParameters(class1);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Class<Float> class0 = Float.TYPE;
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      sQLSyntaxErrorException0.getSuppressed();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("ei]-, `2entRf?", "(I)Ljava/lang/reflect/Type;", sQLSyntaxErrorException0);
      Consumer<Throwable> consumer0 = (Consumer<Throwable>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      sQLTimeoutException0.forEach(consumer0);
      sQLSyntaxErrorException0.printStackTrace();
      sQLTimeoutException0.printStackTrace();
      SQLTimeoutException sQLTimeoutException1 = new SQLTimeoutException();
      ClassLoader.getSystemClassLoader();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-80);
      byteArray0[1] = (byte)107;
      byteArray0[2] = (byte) (-80);
      byteArray0[3] = (byte) (-80);
      byteArray0[4] = (byte) (-80);
      byteArray0[5] = (byte) (-80);
      byteArray0[6] = (byte) (-80);
      byteArray0[7] = (byte)107;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      ThreadGroup threadGroup0 = new ThreadGroup("kotlin.reflect.KParameter");
      ThreadGroup threadGroup1 = new ThreadGroup(threadGroup0, "");
      MockThread mockThread0 = new MockThread(threadGroup1, "lineNumber");
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      TypeUtils.loadClass("ei]-, `2entRf?", classLoader0, false);
      Byte.compare((byte) (-80), (byte) (-80));
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      Object object0 = new Object();
      TypeUtils.castToBoolean("");
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Class<AtomicLong> class0 = AtomicLong.class;
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Type type0 = TypeUtils.getCollectionItemType(class0);
      TypeUtils.getKoltinConstructorParameters(class0);
      DecimalFormatSymbols.getInstance();
      Class<?> class1 = TypeUtils.getRawClass(type0);
      Type[] typeArray0 = new Type[3];
      typeArray0[0] = (Type) class0;
      typeArray0[1] = (Type) class0;
      typeArray0[2] = (Type) class1;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, type0, typeArray0[0]);
      ParameterizedTypeImpl parameterizedTypeImpl1 = new ParameterizedTypeImpl(typeArray0, typeArray0[2], type0);
      parameterizedTypeImpl1.getTypeName();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      ASMDeserializerFactory aSMDeserializerFactory1 = new ASMDeserializerFactory(aSMClassLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      StringIndexOutOfBoundsException stringIndexOutOfBoundsException0 = new StringIndexOutOfBoundsException(50);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) stringIndexOutOfBoundsException0, (ParameterizedType) parameterizedTypeImpl0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // parseLong error, field : null
         //
         verifyException("com.alibaba.fastjson.serializer.LongCodec", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("*h#NuVzp14gg/~`6", "kotlin.reflect.KParameter", sQLSyntaxErrorException0);
      sQLSyntaxErrorException0.printStackTrace();
      SQLTimeoutException sQLTimeoutException1 = new SQLTimeoutException();
      Consumer<Throwable> consumer0 = (Consumer<Throwable>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      sQLTimeoutException1.forEach(consumer0);
      sQLTimeoutException1.printStackTrace();
      SQLTimeoutException sQLTimeoutException2 = new SQLTimeoutException();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      byte[] byteArray0 = new byte[1];
      classLoader0.clearAssertionStatus();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      TypeUtils.loadClass("^`J", classLoader0, false);
      Class<Boolean> class0 = Boolean.class;
      TypeUtils.isPath(class0);
      TimeDeserializer timeDeserializer0 = new TimeDeserializer();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      LinkedHashMap<String, ClientInfoStatus> linkedHashMap0 = new LinkedHashMap<String, ClientInfoStatus>();
      TreeMap<String, ClientInfoStatus> treeMap0 = new TreeMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("^`J", treeMap0);
      StringIndexOutOfBoundsException stringIndexOutOfBoundsException0 = new StringIndexOutOfBoundsException("><cSDzHQr<o!vV5dy");
      ParserConfig parserConfig0 = new ParserConfig(false);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) sQLClientInfoException0, (Type) class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to boolean, value : java.sql.SQLClientInfoException: ^`J
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Constructor<EnumDeserializer>[] constructorArray0 = (Constructor<EnumDeserializer>[]) Array.newInstance(Constructor.class, 1);
      // Undeclared exception!
      try { 
        TypeUtils.getKoltinConstructor(constructorArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      LinkedHashMap<IllegalStateException, SQLTimeoutException> linkedHashMap0 = new LinkedHashMap<IllegalStateException, SQLTimeoutException>();
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException();
      sQLNonTransientException0.getStackTrace();
      Consumer<Throwable> consumer0 = (Consumer<Throwable>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      sQLNonTransientException0.forEach(consumer0);
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      identityHashMap0.put("([C)Z", "([C)Z");
      TypeUtils.loadClass("LocalizedMessage", classLoader0, true);
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      aSMDeserializerFactory0.classLoader.clearAssertionStatus();
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      ClassLoader.getSystemClassLoader();
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Class<VerifyError> class0 = VerifyError.class;
      JavaBeanInfo javaBeanInfo0 = JavaBeanInfo.build((Class<?>) class0, (Type) class0, (PropertyNamingStrategy) null, true, true);
      aSMDeserializerFactory0.createJavaBeanDeserializer(parserConfig0, javaBeanInfo0);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      TypeUtils.loadClass("fastjson.parser.autoTypeAccept", (ClassLoader) aSMClassLoader0, true);
      Class<MapDeserializer> class1 = MapDeserializer.class;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      TypeUtils.computeGettersWithFieldBase(class1, identityHashMap0, true, propertyNamingStrategy0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("LocalizedMessage");
      MockIllegalAccessException mockIllegalAccessException0 = new MockIllegalAccessException();
      MockMinguoDate mockMinguoDate0 = new MockMinguoDate();
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlDate(mockMinguoDate0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : org.evosuite.runtime.mock.java.time.chrono.MockMinguoDate@597ae13e
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Class<Byte> class0 = Byte.TYPE;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Byte.compare((byte)0, (byte)0);
      HashMap<String, Field> hashMap0 = new HashMap<String, Field>();
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      ClassLoader.getSystemClassLoader();
      TypeUtils.loadClass("yyyy-MM-ddTHH:mm:ss");
      TypeUtils.getGenericParamType((Type) null);
      MockIllegalAccessException mockIllegalAccessException0 = new MockIllegalAccessException();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-1253), (-1951), (byte)0);
      TypeUtils.castToSqlDate(mockGregorianCalendar0);
      MockHijrahDate mockHijrahDate0 = new MockHijrahDate();
      // Undeclared exception!
      try { 
        TypeUtils.castToDouble(mockHijrahDate0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to double, value : org.evosuite.runtime.mock.java.time.chrono.MockHijrahDate@3996a10e
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }
}
