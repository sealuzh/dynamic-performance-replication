/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 24 19:11:55 GMT 2019
 */

package wheel.json;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StringWriter;
import java.io.Writer;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import wheel.json.JSONArray;
import wheel.json.JSONObject;
import wheel.json.JSONTokener;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONObject_ESTest extends JSONObject_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("{4MP17rm{lYb");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at character 9 of {4MP17rm{lYb
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("|5");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of |5
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      String[] stringArray0 = new String[5];
      JSONObject jSONObject0 = new JSONObject("for", stringArray0);
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      jSONObject0.put("for", (Collection) linkedList0);
      JSONArray jSONArray0 = (JSONArray)jSONObject0.remove("for");
      assertEquals(0, jSONArray0.length());
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt("FUMO(U", "FUMO(U");
      String string0 = jSONObject1.optString("FUMO(U");
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("s~7R;", 160);
      long long0 = jSONObject1.optLong("s~7R;");
      assertEquals(160L, long0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Short short0 = new Short((short)79);
      JSONObject jSONObject1 = jSONObject0.put("aJ!FW(]8K~wlk", (Object) short0);
      int int0 = jSONObject1.optInt("aJ!FW(]8K~wlk");
      assertEquals(79, int0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Float float0 = Float.valueOf(1965.048F);
      String[] stringArray0 = new String[3];
      JSONObject jSONObject0 = new JSONObject(float0, stringArray0);
      jSONObject0.put("(?. _2", (-1L));
      int int0 = jSONObject0.optInt("(?. _2");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Float float0 = new Float((-913.7496941126109));
      JSONObject jSONObject1 = jSONObject0.putOpt("0", float0);
      double double0 = jSONObject1.optDouble("0");
      assertEquals((-913.7496948242188), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("M weAbc{g[nlNlOh-", true);
      boolean boolean0 = jSONObject0.optBoolean("M weAbc{g[nlNlOh-");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Float float0 = new Float(0.0F);
      JSONObject jSONObject0 = new JSONObject(float0);
      jSONObject0.accumulate("isfloatToRawIntBits", "null");
      jSONObject0.opt("isfloatToRawIntBits");
      assertEquals(4, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("aJ!FW(]8K~wlk", (Object) jSONObject0);
      int int0 = jSONObject1.length();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("cF", 0.0);
      boolean boolean0 = jSONObject0.has("cF");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.append("{", (Object) null);
      String string0 = jSONObject0.getString("{");
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("Null pointer", (-2708));
      long long0 = jSONObject1.getLong("Null pointer");
      assertEquals((-2708L), long0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      JSONObject jSONObject1 = jSONObject0.put("cF", (Collection) linkedList0);
      JSONArray jSONArray0 = jSONObject1.getJSONArray("cF");
      assertEquals(0, jSONArray0.length());
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      HashMap<Byte, JSONObject> hashMap0 = new HashMap<Byte, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Long long0 = new Long(0L);
      JSONObject jSONObject1 = jSONObject0.putOpt("null", long0);
      int int0 = jSONObject1.getInt("null");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("] is not a Boolean.", 16);
      int int0 = jSONObject1.getInt("] is not a Boolean.");
      assertEquals(16, int0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("not", (-1321.22469431757));
      double double0 = jSONObject0.getDouble("not");
      assertEquals((-1321.22469431757), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<JSONArray> linkedList0 = new LinkedList<JSONArray>();
      JSONObject jSONObject1 = jSONObject0.put("[", (Collection) linkedList0);
      JSONArray jSONArray0 = (JSONArray)jSONObject1.get("[");
      assertEquals(0, jSONArray0.length());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      String string0 = JSONObject.valueToString((Object) null);
      assertEquals("null", string0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.toString(0, 0);
      assertEquals("{}", string0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.toString(0);
      assertEquals("{}", string0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      JSONObject.testValidity((Object) null);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject.testValidity(object0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = jSONObject0.remove((String) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = jSONObject0.remove("");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Object object0 = new Object();
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.putOpt("", object0);
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("", true);
      assertSame(jSONObject1, jSONObject0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("0", (Map) null);
      assertEquals(1, jSONObject1.length());
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      HashMap<Boolean, JSONObject> hashMap0 = new HashMap<Boolean, JSONObject>();
      JSONObject jSONObject0 = new JSONObject();
      Boolean boolean0 = new Boolean(",T'");
      hashMap0.put(boolean0, jSONObject0);
      JSONObject jSONObject1 = jSONObject0.put("T6Ok%7,Zid3", (Map) hashMap0);
      JSONObject jSONObject2 = jSONObject1.getJSONObject("T6Ok%7,Zid3");
      assertNotSame(jSONObject0, jSONObject2);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "");
      HashMap<Integer, Boolean> hashMap0 = new HashMap<Integer, Boolean>();
      jSONObject0.put("", (Map) hashMap0);
      assertEquals(4, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Boolean, Byte> hashMap0 = new HashMap<Boolean, Byte>();
      Collection<Byte> collection0 = hashMap0.values();
      JSONObject jSONObject1 = jSONObject0.put("wheel.json.JSONArray@0000000002", collection0);
      assertSame(jSONObject1, jSONObject0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      JSONObject jSONObject1 = jSONObject0.put("", (Collection) linkedList0);
      assertSame(jSONObject1, jSONObject0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      HashMap<Byte, JSONObject> hashMap0 = new HashMap<Byte, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject1 = jSONObject0.put("1900.60373394908.", object0);
      assertSame(jSONObject1, jSONObject0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("", (Object) "toS");
      assertEquals(1, jSONObject1.length());
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("", (long) 25);
      assertSame(jSONObject0, jSONObject1);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("i", 0);
      assertSame(jSONObject1, jSONObject0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("", 8);
      assertSame(jSONObject1, jSONObject0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      HashMap<Integer, Boolean> hashMap0 = new HashMap<Integer, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("2xfvw>'", 1.0);
      double double0 = jSONObject1.getDouble("2xfvw>'");
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      JSONObject jSONObject1 = jSONObject0.put("g?d<^+y-?kl)1tigH3", (-912.30009649867));
      assertSame(jSONObject0, jSONObject1);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("", 0.0);
      assertEquals(1, jSONObject1.length());
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      String string0 = jSONObject0.optString((String) null, "^W");
      assertEquals("^W", string0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.optString("", "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Double double0 = new Double(Double.NaN);
      String[] stringArray0 = new String[0];
      JSONObject jSONObject0 = new JSONObject(double0, stringArray0);
      String string0 = jSONObject0.optString((String) null);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.optString("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Float float0 = Float.valueOf(1965.048F);
      String[] stringArray0 = new String[3];
      JSONObject jSONObject0 = new JSONObject(float0, stringArray0);
      long long0 = jSONObject0.optLong("wheel.json.JSONObject", (long) 160);
      assertEquals(160L, long0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      long long0 = jSONObject0.optLong("7>G\"Q:s8V9H~1", (-1L));
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      long long0 = jSONObject0.optLong((String) null, 0L);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      long long0 = jSONObject0.optLong("", 0L);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      long long0 = jSONObject0.optLong("");
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.optJSONObject("");
      assertNull(jSONObject1);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = jSONObject0.optJSONArray((String) null);
      assertNull(jSONArray0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = jSONObject0.optJSONArray("");
      assertNull(jSONArray0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      int int0 = jSONObject0.optInt("u{jk-cu`CD\"}u]k+[g", 0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      int int0 = jSONObject0.optInt("-304.6527255532", (-6254807));
      assertEquals((-6254807), int0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      int int0 = jSONObject0.optInt((String) null, 674);
      assertEquals(674, int0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Integer integer0 = new Integer((-1412));
      JSONObject jSONObject0 = new JSONObject(integer0);
      int int0 = jSONObject0.optInt("", 2);
      assertEquals(1, jSONObject0.length());
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      int int0 = jSONObject0.optInt((String) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      HashMap<JSONObject, Integer> hashMap0 = new HashMap<JSONObject, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      int int0 = jSONObject0.optInt("");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      HashMap<Float, JSONObject> hashMap0 = new HashMap<Float, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      double double0 = jSONObject0.optDouble(".", 1627.3031);
      assertEquals(1627.3031, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      double double0 = jSONObject0.optDouble((String) null, 0.0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      double double0 = jSONObject0.optDouble("", (-858.19759973));
      assertEquals((-858.19759973), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      double double0 = jSONObject0.optDouble((String) null);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Long long0 = new Long((-2225L));
      JSONObject jSONObject0 = new JSONObject(long0);
      double double0 = jSONObject0.optDouble("");
      assertEquals(1, jSONObject0.length());
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONObject0.optBoolean("", false);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONObject0.optBoolean((String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Float float0 = new Float(0.0);
      JSONObject jSONObject0 = new JSONObject(float0);
      boolean boolean0 = jSONObject0.optBoolean("");
      assertFalse(boolean0);
      assertEquals(3, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      HashMap<Boolean, JSONObject> hashMap0 = new HashMap<Boolean, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Object object0 = jSONObject0.opt("");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONObject0.isNull((String) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONObject0.isNull("");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Byte byte0 = new Byte((byte)6);
      String[] stringArray0 = new String[1];
      JSONObject jSONObject0 = new JSONObject(byte0, stringArray0);
      boolean boolean0 = jSONObject0.has((String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getString("{");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"{\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getString("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getLong((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getLong("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getJSONObject((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Long long0 = new Long((-2225L));
      JSONObject jSONObject0 = new JSONObject(long0);
      try { 
        jSONObject0.getJSONObject("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getJSONArray((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getJSONArray("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getInt((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      String[] stringArray0 = JSONObject.getNames((Object) "0");
      Boolean boolean0 = new Boolean(true);
      JSONObject jSONObject0 = new JSONObject(boolean0, stringArray0);
      try { 
        jSONObject0.getDouble((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Float float0 = new Float(0.0);
      JSONObject jSONObject0 = new JSONObject(float0);
      try { 
        jSONObject0.getDouble("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getBoolean((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "");
      try { 
        jSONObject0.getBoolean("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("wheel.json.JSONArray");
      JSONObject jSONObject0 = new JSONObject((Object) jSONTokener0);
      try { 
        jSONObject0.get((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.get("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      String string0 = JSONObject.doubleToString(2);
      assertEquals("2", string0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = new Object();
      JSONObject jSONObject1 = jSONObject0.append("aF", object0);
      assertSame(jSONObject1, jSONObject0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.append((String) null, "cF");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.append("", "");
      assertEquals(1, jSONObject1.length());
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject1 = jSONObject0.accumulate("Null pointer", object0);
      assertSame(jSONObject0, jSONObject1);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "");
      Short short0 = new Short((short) (-3361));
      jSONObject0.accumulate("", short0);
      assertEquals(4, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      HashMap<Long, String> hashMap0 = new HashMap<Long, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      // Undeclared exception!
      try { 
        jSONObject0.write((Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      String[] stringArray0 = new String[6];
      JSONObject jSONObject0 = new JSONObject("80.3604083539595", stringArray0);
      try { 
        jSONObject0.put((String) null, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<JSONObject, Object> hashMap0 = new HashMap<JSONObject, Object>();
      try { 
        jSONObject0.put((String) null, (Map) hashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, (-764L));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Float float0 = Float.valueOf(1965.048F);
      String[] stringArray0 = new String[3];
      JSONObject jSONObject0 = new JSONObject(float0, stringArray0);
      try { 
        jSONObject0.put(stringArray0[2], 160);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Integer integer0 = new Integer((-1412));
      JSONObject jSONObject0 = new JSONObject(integer0);
      try { 
        jSONObject0.put((String) null, 0.0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.getNames((JSONObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Float float0 = new Float(0.0F);
      JSONObject jSONObject0 = new JSONObject(float0);
      try { 
        jSONObject0.accumulate((String) null, jSONObject0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((JSONTokener) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject(jSONObject0, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      String string0 = JSONObject.valueToString((Object) null, (byte)9, (-3665));
      assertEquals("null", string0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.toString(44, 44);
      assertEquals("{}", string0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      String string0 = JSONObject.quote("$ aOe}");
      assertEquals("\"$ aOe}\"", string0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      String string0 = JSONObject.quote(".3/gYI>4@6>is8");
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      String string0 = JSONObject.quote((String) null);
      assertEquals("\"\"", string0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      String string0 = JSONObject.quote("");
      assertEquals("\"\"", string0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt((String) null, (Object) null);
      assertEquals(0, jSONObject1.length());
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      JSONObject jSONObject1 = jSONObject0.putOpt("] is not a number.", (Object) null);
      assertSame(jSONObject1, jSONObject0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("H", (Object) null);
      assertEquals(0, jSONObject1.length());
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, (Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      String string0 = jSONObject0.optString("ishashCode", (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Float float0 = Float.valueOf(1965.048F);
      String[] stringArray0 = new String[3];
      JSONObject jSONObject0 = new JSONObject(float0, stringArray0);
      jSONObject0.put("(?. _2", (-1L));
      double double0 = jSONObject0.optDouble("(?. _2", (double) (-1L));
      assertEquals((-1.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = jSONObject0.opt((String) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("Null pointer", (-2708));
      String[] stringArray0 = new String[3];
      JSONObject jSONObject1 = new JSONObject("Null pointer", stringArray0);
      jSONObject0.optInt("cF");
      jSONObject0.names();
      jSONObject0.put("cF", 0.0);
      JSONObject jSONObject2 = new JSONObject();
      Float float0 = new Float((double) 0);
      String string0 = JSONObject.numberToString(float0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-4));
      String string0 = JSONObject.numberToString(byte0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Float float0 = new Float(2891.705);
      JSONObject jSONObject1 = jSONObject0.accumulate("#", float0);
      long long0 = jSONObject1.getLong("#");
      assertEquals(2891L, long0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("] is not a JSONObject.", false);
      try { 
        jSONObject0.getLong("] is not a JSONObject.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"] is not a JSONObject.\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      String[] stringArray0 = new String[5];
      JSONObject jSONObject0 = new JSONObject("for", stringArray0);
      JSONObject jSONObject1 = jSONObject0.append("o:D;)R{", "for");
      try { 
        jSONObject1.getDouble("o:D;)R{");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"o:D;)R{\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Float float0 = new Float(2891.705);
      JSONObject jSONObject1 = jSONObject0.accumulate("#", float0);
      try { 
        jSONObject1.getBoolean("#");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"#\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Float float0 = new Float(0.0F);
      JSONObject jSONObject0 = new JSONObject(float0);
      HashMap<JSONArray, JSONObject> hashMap0 = new HashMap<JSONArray, JSONObject>();
      jSONObject0.put("com", (Map) hashMap0);
      StringWriter stringWriter0 = new StringWriter(1375);
      jSONObject0.write(stringWriter0);
      assertEquals(4, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      LinkedList<JSONArray> linkedList0 = new LinkedList<JSONArray>();
      String string0 = JSONObject.valueToString(linkedList0, 18, 18);
      assertEquals("[]", string0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      HashMap<Boolean, JSONObject> hashMap0 = new HashMap<Boolean, JSONObject>();
      String string0 = JSONObject.valueToString(hashMap0, 69, 16);
      assertEquals("{}", string0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = JSONObject.valueToString(jSONObject0, 62, 11);
      assertEquals("{}", string0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "{}");
      jSONObject0.toString(45, 50);
      assertEquals(3, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      String string0 = JSONObject.valueToString(object0, 0, 0);
      assertEquals("null", string0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-47));
      JSONObject jSONObject0 = new JSONObject(byte0);
      JSONObject jSONObject1 = jSONObject0.append("\":W}nQ?VX5]mOK1`", (Object) null);
      jSONObject1.toString((-1961), 1);
      assertEquals(2, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "java.lang.Float@0000000007");
      jSONObject0.toString();
      assertEquals(3, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      String string0 = JSONObject.valueToString(linkedList0);
      assertEquals("[]", string0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      String string0 = JSONObject.valueToString(jSONArray0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      HashMap<Byte, JSONObject> hashMap0 = new HashMap<Byte, JSONObject>();
      JSONObject jSONObject0 = new JSONObject();
      Byte byte0 = new Byte((byte)44);
      hashMap0.put(byte0, jSONObject0);
      String string0 = JSONObject.valueToString(hashMap0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      String string0 = JSONObject.valueToString(object0);
      assertEquals("null", string0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-47));
      JSONObject jSONObject0 = new JSONObject(byte0);
      jSONObject0.append("\":W}nQ?VX5]mOK1`", (Object) null);
      StringWriter stringWriter0 = new StringWriter(43);
      jSONObject0.write(stringWriter0);
      assertEquals(2, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("{}", 11);
      String string0 = jSONObject0.toString(4, (-470));
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("{}", 11);
      String string0 = jSONObject0.toString();
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      linkedList0.add(jSONObject0);
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      JSONArray jSONArray1 = jSONObject0.toJSONArray(jSONArray0);
      assertNotNull(jSONArray1);
      assertNotSame(jSONArray1, jSONArray0);
      assertEquals(1, jSONArray1.length());
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      JSONArray jSONArray1 = jSONObject0.toJSONArray(jSONArray0);
      assertNull(jSONArray1);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = jSONObject0.toJSONArray((JSONArray) null);
      assertNull(jSONArray0);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Float float0 = new Float(Double.NaN);
      try { 
        jSONObject0.append("[]", float0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      String[] stringArray0 = new String[1];
      JSONObject jSONObject0 = new JSONObject("mbVAbLi=W", stringArray0);
      int int0 = jSONObject0.optInt("yK//A|</qW9#/Vz", 60);
      assertEquals(60, int0);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      JSONObject jSONObject1 = jSONObject0.put("cF", (Collection) linkedList0);
      jSONObject1.put("Null pointer", (Collection) linkedList0);
      String string0 = jSONObject0.toString(5);
      String string1 = JSONObject.quote(string0);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONObject0.optBoolean("\t", false);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      String[] stringArray0 = new String[7];
      JSONObject jSONObject0 = new JSONObject("4160.03400419435", stringArray0);
      try { 
        jSONObject0.getInt("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Integer integer0 = new Integer((byte)14);
      JSONObject jSONObject0 = new JSONObject(integer0);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "T6u11>T=,h\"T @(";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-47));
      JSONObject jSONObject0 = new JSONObject(byte0);
      try { 
        jSONObject0.put((String) null, (Collection) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      jSONObject0.put("wheel.json.JSONException", (Collection) linkedList0);
      String string0 = jSONObject0.optString("wheel.json.JSONException", "X|dU{)");
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Byte, Object> hashMap0 = new HashMap<Byte, Object>();
      jSONObject0.put("P-WA/mHeE", (Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.optJSONObject("P-WA/mHeE");
      assertNotSame(jSONObject1, jSONObject0);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.optJSONObject((String) null);
      assertNull(jSONObject1);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      jSONObject0.put("Null pointer", (Collection) linkedList0);
      JSONArray jSONArray0 = jSONObject0.optJSONArray("Null pointer");
      assertEquals(0, jSONArray0.length());
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("{}", 11);
      double double0 = jSONObject1.optDouble("{}");
      assertEquals(11.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      Integer integer0 = new Integer(1);
      JSONObject jSONObject1 = jSONObject0.append("cF", integer0);
      jSONObject0.put("Null pointer", (Collection) linkedList0);
      String string0 = JSONObject.valueToString("Null pointer");
      jSONObject1.optBoolean("wjZu");
      jSONObject0.optBoolean((String) null, false);
      jSONObject1.toString(34, 1);
      Short short0 = new Short((short)101);
      String string1 = JSONObject.valueToString(short0);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Integer integer0 = new Integer((-1029));
      String string0 = JSONObject.valueToString(integer0, (-1029), (-2012));
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      try { 
        JSONObject.numberToString((Number) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null pointer
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("0", 0L);
      JSONArray jSONArray0 = jSONObject1.names();
      assertEquals(1, jSONArray0.length());
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = jSONObject0.names();
      assertNull(jSONArray0);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Object object0 = new Object();
      String[] stringArray0 = JSONObject.getNames(object0);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      String[] stringArray0 = JSONObject.getNames((Object) null);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Float float0 = new Float(0.0F);
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.putOpt("0", float0);
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertEquals(1, jSONObject0.length());
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Short short0 = new Short((short) (-10));
      jSONObject0.put("Ti|3/j]0ua}&:>E)-_@", (Object) short0);
      long long0 = jSONObject0.optLong("Ti|3/j]0ua}&:>E)-_@");
      assertEquals((-10L), long0);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Float float0 = new Float(0.0F);
      JSONObject jSONObject0 = new JSONObject(float0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      JSONObject jSONObject1 = jSONObject0.append("isparseByte", jSONArray0);
      jSONObject1.getJSONArray("isparseByte");
      assertEquals(4, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<JSONArray, JSONObject> hashMap0 = new HashMap<JSONArray, JSONObject>();
      jSONObject0.put("cF", (Map) hashMap0);
      try { 
        jSONObject0.getJSONArray("cF");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"cF\"] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("null", (-3862));
      int int0 = jSONObject0.getInt("null");
      assertEquals((-3862), int0);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      jSONObject0.put("cF", (Collection) linkedList0);
      try { 
        jSONObject0.getInt("cF");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"cF\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("0", 0L);
      double double0 = jSONObject1.getDouble("0");
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.putOpt("FUMO(U", "FUMO(U");
      try { 
        jSONObject0.getBoolean("FUMO(U");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"FUMO(U\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("X|dU{)", true);
      boolean boolean0 = jSONObject0.getBoolean("X|dU{)");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put(".3/gYI>4@6>is8", false);
      boolean boolean0 = jSONObject1.getBoolean(".3/gYI>4@6>is8");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      String string0 = JSONObject.doubleToString((-1830.24));
      assertEquals("-1830.24", string0);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      String string0 = JSONObject.doubleToString((-90983867));
      assertEquals("-9.0983867E7", string0);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      String string0 = JSONObject.doubleToString(Double.NaN);
      assertEquals("null", string0);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      String string0 = JSONObject.doubleToString(0.0);
      assertEquals("0", string0);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Object object0 = new Object();
      JSONObject jSONObject0 = new JSONObject(object0);
      JSONObject jSONObject1 = jSONObject0.put("not", (-64089270));
      try { 
        jSONObject1.append("not", "not");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[not] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("Null pointer", (-2708));
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      Object object0 = jSONObject1.get("Null pointer");
      JSONObject jSONObject2 = jSONObject0.put("cF", (Collection) linkedList0);
      JSONObject jSONObject3 = jSONObject2.append("cF", object0);
      assertEquals(2, jSONObject3.length());
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.append("ismax", jSONObject0);
      JSONObject jSONObject1 = jSONObject0.accumulate("ismax", jSONObject0);
      assertSame(jSONObject0, jSONObject1);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      JSONObject jSONObject1 = jSONObject0.accumulate("RbTCvVh=@/hD}5]2t", jSONArray0);
      JSONArray jSONArray1 = jSONObject1.optJSONArray("RbTCvVh=@/hD}5]2t");
      assertNotNull(jSONArray1);
      assertEquals(1, jSONArray1.length());
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("isF", 0.0);
      JSONObject jSONObject2 = jSONObject1.accumulate("isF", "0");
      assertSame(jSONObject2, jSONObject0);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Double double0 = new Double((-624.09F));
      String[] stringArray0 = JSONObject.getNames((Object) double0);
      assertNotNull(stringArray0);
      
      JSONObject jSONObject0 = new JSONObject(double0, stringArray0);
      assertEquals(8, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      assertEquals(2, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{\n\"java.lang.String@0000000014\": {},\n\"java.lang.String@0000000011\": [[]],\n\"java.lang.String@0000000002\": java.lang.Boolean@0000000003,\n\"java.lang.String@0000000004\": java.lang.Boolean@0000000005,\n\"java.lang.String@0000000006\": \"java.lang.Class@0000000007\"\n}");
      assertEquals(5, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{}");
      assertEquals(0, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("{l2mUIAMy119");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at character 12 of {l2mUIAMy119
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("sa");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of sa
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt("FUMO(U", object0);
      boolean boolean0 = jSONObject1.isNull("FUMO(U");
      assertEquals(1, jSONObject0.length());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.putOpt("FUMO(U", "FUMO(U");
      boolean boolean0 = jSONObject0.isNull("FUMO(U");
      assertEquals(1, jSONObject0.length());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.toString((-470));
      assertEquals("{}", string0);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      long long0 = jSONObject0.optLong((String) null);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      int int0 = jSONObject0.length();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("{}", 11);
      boolean boolean0 = jSONObject0.optBoolean("{}", true);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("{");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must end with '}' at character 1 of {
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      HashMap<Boolean, JSONObject> hashMap0 = new HashMap<Boolean, JSONObject>();
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("T6Ok%7,Zid3", (Map) hashMap0);
      JSONObject jSONObject2 = jSONObject1.getJSONObject("T6Ok%7,Zid3");
      assertNotSame(jSONObject2, jSONObject0);
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Iterator iterator0 = jSONObject0.keys();
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.accumulate("getformat", (Object) null);
      assertEquals(0, jSONObject1.length());
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      Integer integer0 = new Integer((byte)14);
      JSONObject jSONObject0 = new JSONObject(integer0);
      JSONObject jSONObject1 = jSONObject0.put("KR#=LY", (long) 1);
      try { 
        jSONObject1.getJSONObject("KR#=LY");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"KR#=LY\"] is not a JSONObject.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      try { 
        jSONObject0.getString((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      Integer integer0 = new Integer((byte)14);
      JSONObject jSONObject0 = new JSONObject(integer0);
      jSONObject0.has("");
      assertEquals(1, jSONObject0.length());
  }
}
