/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 05:14:02 GMT 2018
 */

package com.pmdesigns.jvc.tools;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.pmdesigns.jvc.tools.JVCParserTokenManager;
import com.pmdesigns.jvc.tools.SimpleCharStream;
import com.pmdesigns.jvc.tools.Token;
import java.io.ByteArrayInputStream;
import java.io.CharArrayReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.PrintStream;
import java.io.Reader;
import java.io.StringReader;
import java.io.UnsupportedEncodingException;
import java.util.Locale;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JVCParserTokenManager_ESTest extends JVCParserTokenManager_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JVCParserTokenManager jVCParserTokenManager0 = null;
      try {
        jVCParserTokenManager0 = new JVCParserTokenManager((SimpleCharStream) null, (-1818));
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : -1818. State unchanged.
         //
         verifyException("com.pmdesigns.jvc.tools.JVCParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      byte[] byteArray0 = new byte[12];
      FileSystemHandling.shouldAllThrowIOExceptions();
      byteArray0[0] = (byte)89;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(byteArrayInputStream0, (byte)89, (byte)89, (byte)89);
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0);
      jVCParserTokenManager0.curLexState = (int) (byte)89;
      jVCParserTokenManager0.getNextToken();
      // Undeclared exception!
      try { 
        jVCParserTokenManager0.SwitchTo(89);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 89. State unchanged.
         //
         verifyException("com.pmdesigns.jvc.tools.JVCParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(byteArrayInputStream0, (byte)123, (byte)123, (byte)123);
      char[] charArray0 = new char[4];
      charArray0[0] = ']';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      SimpleCharStream simpleCharStream1 = new SimpleCharStream(charArrayReader0, (-1), (byte)123);
      charArrayReader0.mark((-1));
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream1);
      SimpleCharStream simpleCharStream2 = new SimpleCharStream(charArrayReader0);
      jVCParserTokenManager0.ReInit(simpleCharStream1, 0);
      jVCParserTokenManager0.getNextToken();
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream(jVCParserTokenManager0.debugStream, false, "]");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // ]
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      char[] charArray0 = new char[21];
      charArray0[0] = 'Z';
      charArray0[1] = 'Z';
      charArray0[2] = 'Z';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(charArrayReader0, (byte)2, 'Z');
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0);
      simpleCharStream0.setTabSize('Z');
      Token token0 = jVCParserTokenManager0.getNextToken();
      assertEquals("Z", token0.toString());
      
      jVCParserTokenManager0.SwitchTo(2);
      jVCParserTokenManager0.SwitchTo(0);
      Token token1 = jVCParserTokenManager0.getNextToken();
      assertEquals(16, token1.kind);
      assertEquals(2, token1.beginLine);
      assertEquals(91, token1.beginColumn);
      assertEquals(2, token1.endLine);
      assertEquals(91, token1.endColumn);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = '[';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(charArrayReader0, (-1424), (-1424));
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0);
      jVCParserTokenManager0.getNextToken();
      CharArrayReader charArrayReader1 = new CharArrayReader(charArray0);
      // Undeclared exception!
      try { 
        jVCParserTokenManager0.SwitchTo(46);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 46. State unchanged.
         //
         verifyException("com.pmdesigns.jvc.tools.JVCParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = '[';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(charArrayReader0, 2092, 105);
      SimpleCharStream simpleCharStream1 = new SimpleCharStream(charArrayReader0, (-1717), 2092);
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0);
      char char0 = Locale.PRIVATE_USE_EXTENSION;
      jVCParserTokenManager0.getNextToken();
      CharArrayReader charArrayReader1 = new CharArrayReader(charArray0);
      try { 
        charArrayReader0.read();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.CharArrayReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      char[] charArray0 = new char[12];
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      charArray0[0] = '[';
      charArray0[1] = 'a';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      byteArrayInputStream0.read(byteArray0);
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(charArrayReader0, 575, 575);
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      jVCParserTokenManager0.getNextToken();
      jVCParserTokenManager0.jjFillToken();
      charArrayReader0.mark((-3339));
      // Undeclared exception!
      try { 
        jVCParserTokenManager0.SwitchTo(575);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 575. State unchanged.
         //
         verifyException("com.pmdesigns.jvc.tools.JVCParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(byteArrayInputStream0, (byte)123, (byte)123, (byte)123);
      char[] charArray0 = new char[4];
      charArray0[0] = ']';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      SimpleCharStream simpleCharStream1 = new SimpleCharStream(charArrayReader0);
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream1);
      jVCParserTokenManager0.getNextToken();
      MockFile mockFile0 = new MockFile((File) null, "");
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream(mockFile0, "]");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = '[';
      charArray0[1] = '[';
      charArray0[2] = '[';
      charArray0[3] = '[';
      charArray0[4] = '[';
      charArray0[6] = '[';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(charArrayReader0, 12, 12);
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0);
      Token token0 = jVCParserTokenManager0.getNextToken();
      CharArrayReader charArrayReader1 = new CharArrayReader(charArray0);
      token0.beginColumn = (int) '[';
      CharArrayReader charArrayReader2 = new CharArrayReader(charArray0);
      SimpleCharStream simpleCharStream1 = new SimpleCharStream(charArrayReader0, 12, 1);
      JVCParserTokenManager jVCParserTokenManager1 = new JVCParserTokenManager(simpleCharStream1);
      charArrayReader2.ready();
      simpleCharStream1.setTabSize((-3325));
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      jVCParserTokenManager0.getNextToken();
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        jVCParserTokenManager0.SwitchTo(15);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 15. State unchanged.
         //
         verifyException("com.pmdesigns.jvc.tools.JVCParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte)123;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(byteArrayInputStream0, (byte)0, (byte)123, (byte)123);
      char[] charArray0 = new char[12];
      charArray0[0] = '[';
      simpleCharStream0.GetImage();
      charArray0[1] = '[';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      SimpleCharStream simpleCharStream1 = new SimpleCharStream(charArrayReader0, (-1), (-1));
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream1);
      jVCParserTokenManager0.jjmatchedKind = (int) '[';
      CharArrayReader charArrayReader1 = new CharArrayReader(charArray0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      SimpleCharStream simpleCharStream2 = new SimpleCharStream(charArrayReader0, 91, 62);
      jVCParserTokenManager0.getNextToken();
      charArrayReader1.mark(4661);
      MockPrintStream mockPrintStream0 = new MockPrintStream(jVCParserTokenManager0.debugStream);
      jVCParserTokenManager0.setDebugStream(mockPrintStream0);
      charArrayReader1.mark(25);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "`e5EN");
      jVCParserTokenManager0.getNextToken();
      jVCParserTokenManager0.jjFillToken();
      FileSystemHandling.shouldAllThrowIOExceptions();
      jVCParserTokenManager0.getNextToken();
      jVCParserTokenManager0.getNextToken();
      jVCParserTokenManager0.getNextToken();
      jVCParserTokenManager0.ReInit(simpleCharStream1);
      assertEquals(5, simpleCharStream1.bufpos);
      assertEquals((-1), simpleCharStream1.getLine());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)123;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertArrayEquals(new byte[] {(byte)123, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(7, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(byteArrayInputStream0, (byte)123, (byte)123, (byte)123);
      assertArrayEquals(new byte[] {(byte)123, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(7, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream0);
      
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0);
      assertArrayEquals(new byte[] {(byte)123, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(7, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(jVCParserTokenManager0);
      
      simpleCharStream0.backup((byte)123);
      assertArrayEquals(new byte[] {(byte)123, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(7, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      Token token0 = jVCParserTokenManager0.getNextToken();
      assertArrayEquals(new byte[] {(byte)123, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(7, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getEndLine());
      assertEquals(0, simpleCharStream0.getEndColumn());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getColumn());
      assertEquals(0, simpleCharStream0.getLine());
      assertEquals("\u0000", token0.toString());
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, token0.endLine);
      assertEquals(16, token0.kind);
      assertEquals(0, token0.beginLine);
      assertEquals(0, token0.beginColumn);
      assertEquals(0, token0.endColumn);
      assertNotNull(token0);
      
      jVCParserTokenManager0.SwitchTo(0);
      assertArrayEquals(new byte[] {(byte)123, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(7, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getEndLine());
      assertEquals(0, simpleCharStream0.getEndColumn());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getColumn());
      assertEquals(0, simpleCharStream0.getLine());
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      char[] charArray0 = new char[7];
      charArray0[0] = 'U';
      charArray0[1] = 'U';
      simpleCharStream0.bufline = jVCParserTokenManager0.jjnewLexState;
      assertEquals(7, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getEndColumn());
      assertEquals(41, simpleCharStream0.getLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getColumn());
      assertEquals(41, simpleCharStream0.getBeginLine());
      assertEquals(41, simpleCharStream0.getEndLine());
      
      charArray0[3] = 'U';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'U', 'U', '\u0000', 'U', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(charArrayReader0);
      
      SimpleCharStream simpleCharStream1 = new SimpleCharStream(charArrayReader0, 0, 0);
      assertFalse(simpleCharStream1.equals((Object)simpleCharStream0));
      assertArrayEquals(new char[] {'U', 'U', '\u0000', 'U', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(0, simpleCharStream1.getBeginLine());
      assertEquals(0, simpleCharStream1.getBeginColumn());
      assertEquals((-1), simpleCharStream1.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream1);
      
      jVCParserTokenManager0.setDebugStream(jVCParserTokenManager0.debugStream);
      assertFalse(simpleCharStream0.equals((Object)simpleCharStream1));
      assertArrayEquals(new byte[] {(byte)123, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(7, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getEndColumn());
      assertEquals(41, simpleCharStream0.getLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getColumn());
      assertEquals(41, simpleCharStream0.getBeginLine());
      assertEquals(41, simpleCharStream0.getEndLine());
      assertNotSame(simpleCharStream0, simpleCharStream1);
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      boolean boolean0 = byteArrayInputStream0.markSupported();
      assertArrayEquals(new byte[] {(byte)123, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertTrue(boolean0);
      assertEquals(7, byteArrayInputStream0.available());
      
      Token token1 = jVCParserTokenManager0.getNextToken();
      assertFalse(token1.equals((Object)token0));
      assertFalse(simpleCharStream0.equals((Object)simpleCharStream1));
      assertArrayEquals(new byte[] {(byte)123, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals("\u0000", token1.toString());
      assertEquals(7, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getEndColumn());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getColumn());
      assertEquals(4, simpleCharStream0.getLine());
      assertEquals(4, simpleCharStream0.getBeginLine());
      assertEquals(4, simpleCharStream0.getEndLine());
      assertNotSame(token1, token0);
      assertNotSame(simpleCharStream0, simpleCharStream1);
      assertEquals(16, token1.kind);
      assertEquals(0, token1.beginColumn);
      assertEquals(0, token1.endColumn);
      assertEquals(4, token1.endLine);
      assertEquals(4, token1.beginLine);
      assertEquals(1, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(token1);
      
      simpleCharStream1.ReInit((InputStream) byteArrayInputStream0, (int) 'U', (int) 'U');
      assertFalse(simpleCharStream1.equals((Object)simpleCharStream0));
      assertArrayEquals(new byte[] {(byte)123, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new char[] {'U', 'U', '\u0000', 'U', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(7, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream1.getBeginLine());
      assertEquals(0, simpleCharStream1.getBeginColumn());
      assertNotSame(simpleCharStream1, simpleCharStream0);
      assertEquals((-1), simpleCharStream1.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      JVCParserTokenManager jVCParserTokenManager1 = null;
      try {
        jVCParserTokenManager1 = new JVCParserTokenManager(simpleCharStream1, 14);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 14. State unchanged.
         //
         verifyException("com.pmdesigns.jvc.tools.JVCParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)1;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertArrayEquals(new byte[] {(byte)1}, byteArray0);
      assertEquals(1, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(byteArrayInputStream0, (byte)1, (byte)1, (byte)1);
      assertArrayEquals(new byte[] {(byte)1}, byteArray0);
      assertEquals(1, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream0);
      
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0, (byte)1);
      assertArrayEquals(new byte[] {(byte)1}, byteArray0);
      assertEquals(1, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(jVCParserTokenManager0);
      
      Token token0 = jVCParserTokenManager0.getNextToken();
      assertArrayEquals(new byte[] {(byte)1}, byteArray0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals("\u0001", token0.toString());
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.beginColumn);
      assertEquals(16, token0.kind);
      assertEquals(1, token0.beginLine);
      assertNotNull(token0);
      
      byteArrayInputStream0.close();
      assertArrayEquals(new byte[] {(byte)1}, byteArray0);
      assertEquals(0, byteArrayInputStream0.available());
      
      StringReader stringReader0 = new StringReader("\u0001");
      assertNotNull(stringReader0);
      
      int int0 = 91;
      // Undeclared exception!
      try { 
        byteArrayInputStream0.read(byteArray0, 1, 1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)123;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertArrayEquals(new byte[] {(byte)123}, byteArray0);
      assertEquals(1, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'U';
      charArray0[1] = 'U';
      charArray0[2] = 'U';
      charArray0[3] = 'U';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'U', 'U', 'U', 'U'}, charArray0);
      assertNotNull(charArrayReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(charArrayReader0);
      assertArrayEquals(new char[] {'U', 'U', 'U', 'U'}, charArray0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(simpleCharStream0);
      
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0);
      assertArrayEquals(new char[] {'U', 'U', 'U', 'U'}, charArray0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(jVCParserTokenManager0);
      
      Token token0 = jVCParserTokenManager0.getNextToken();
      assertArrayEquals(new char[] {'U', 'U', 'U', 'U'}, charArray0);
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getColumn());
      assertEquals("U", token0.toString());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.bufpos);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.beginColumn);
      assertEquals(16, token0.kind);
      assertEquals(1, token0.beginLine);
      assertNotNull(token0);
      
      jVCParserTokenManager0.ReInit(simpleCharStream0, 1);
      assertArrayEquals(new char[] {'U', 'U', 'U', 'U'}, charArray0);
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.bufpos);
      
      Token token1 = jVCParserTokenManager0.getNextToken();
      assertFalse(token1.equals((Object)token0));
      assertArrayEquals(new char[] {'U', 'U', 'U', 'U'}, charArray0);
      assertEquals(2, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(2, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(2, simpleCharStream0.getColumn());
      assertEquals("U", token1.toString());
      assertNotSame(token1, token0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, simpleCharStream0.bufpos);
      assertEquals(2, token1.beginColumn);
      assertEquals(2, token1.endColumn);
      assertEquals(16, token1.kind);
      assertEquals(1, token1.beginLine);
      assertEquals(1, token1.endLine);
      assertNotNull(token1);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      char[] charArray0 = new char[21];
      charArray0[0] = 'Z';
      charArray0[1] = 'Z';
      charArray0[2] = 'Z';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(charArrayReader0, (byte)2, 'Z');
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(simpleCharStream0);
      
      charArrayReader0.mark((byte)2);
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0, (byte)2);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(jVCParserTokenManager0);
      
      SimpleCharStream simpleCharStream1 = new SimpleCharStream(charArrayReader0);
      assertFalse(simpleCharStream1.equals((Object)simpleCharStream0));
      assertEquals(0, simpleCharStream1.getBeginColumn());
      assertEquals(0, simpleCharStream1.getBeginLine());
      assertEquals((-1), simpleCharStream1.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream1);
      
      Token token0 = jVCParserTokenManager0.getNextToken();
      assertFalse(simpleCharStream0.equals((Object)simpleCharStream1));
      assertEquals(2, simpleCharStream0.getLine());
      assertEquals(2, simpleCharStream0.getBeginLine());
      assertEquals(90, simpleCharStream0.getBeginColumn());
      assertEquals(90, simpleCharStream0.getEndColumn());
      assertEquals(90, simpleCharStream0.getColumn());
      assertEquals(2, simpleCharStream0.getEndLine());
      assertEquals("Z", token0.toString());
      assertNotSame(simpleCharStream0, simpleCharStream1);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.bufpos);
      assertEquals(2, token0.endLine);
      assertEquals(90, token0.beginColumn);
      assertEquals(90, token0.endColumn);
      assertEquals(16, token0.kind);
      assertEquals(2, token0.beginLine);
      assertNotNull(token0);
      
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream(jVCParserTokenManager0.debugStream, false, "Z");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // Z
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(6, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(byteArrayInputStream0, (byte)0, (byte)2, (byte)2);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(6, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(simpleCharStream0);
      
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0, (byte)2);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(6, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(jVCParserTokenManager0);
      
      byteArray0[3] = (byte)0;
      Token token0 = jVCParserTokenManager0.getNextToken();
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(2, simpleCharStream0.getEndColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getLine());
      assertEquals(0, simpleCharStream0.getEndLine());
      assertEquals(2, simpleCharStream0.getColumn());
      assertEquals(2, simpleCharStream0.getBeginColumn());
      assertEquals("\u0000", token0.toString());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.bufpos);
      assertEquals(2, token0.beginColumn);
      assertEquals(0, token0.beginLine);
      assertEquals(16, token0.kind);
      assertEquals(2, token0.endColumn);
      assertEquals(0, token0.endLine);
      assertNotNull(token0);
      
      Token token1 = jVCParserTokenManager0.jjFillToken();
      assertFalse(token1.equals((Object)token0));
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(2, simpleCharStream0.getEndColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getLine());
      assertEquals(0, simpleCharStream0.getEndLine());
      assertEquals(2, simpleCharStream0.getColumn());
      assertEquals(2, simpleCharStream0.getBeginColumn());
      assertEquals("\u0000", token1.toString());
      assertNotSame(token1, token0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.bufpos);
      assertEquals(0, token1.beginLine);
      assertEquals(2, token1.beginColumn);
      assertEquals(2, token1.endColumn);
      assertEquals(0, token1.endLine);
      assertEquals(16, token1.kind);
      assertNotNull(token1);
      
      jVCParserTokenManager0.SwitchTo(3);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(2, simpleCharStream0.getEndColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getLine());
      assertEquals(0, simpleCharStream0.getEndLine());
      assertEquals(2, simpleCharStream0.getColumn());
      assertEquals(2, simpleCharStream0.getBeginColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.bufpos);
      
      Token token2 = jVCParserTokenManager0.getNextToken();
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getLine());
      assertEquals(3, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getEndLine());
      assertEquals(3, simpleCharStream0.getEndColumn());
      assertEquals(3, simpleCharStream0.getColumn());
      assertEquals("\u0000", token2.toString());
      assertNotSame(token2, token0);
      assertNotSame(token2, token1);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, simpleCharStream0.bufpos);
      assertEquals(0, token2.beginLine);
      assertEquals(0, token2.endLine);
      assertEquals(16, token2.kind);
      assertEquals(3, token2.beginColumn);
      assertEquals(3, token2.endColumn);
      assertNotNull(token2);
      
      PipedWriter pipedWriter0 = null;
      try {
        pipedWriter0 = new PipedWriter((PipedReader) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      byte[] byteArray0 = new byte[16];
      byteArray0[0] = (byte)123;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(16, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(byteArrayInputStream0, (byte)123, (byte)123, (byte)123);
      assertEquals(16, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(simpleCharStream0);
      
      char char0 = simpleCharStream0.BeginToken();
      assertEquals('{', char0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(123, simpleCharStream0.getEndLine());
      assertEquals(123, simpleCharStream0.getLine());
      assertEquals(123, simpleCharStream0.getBeginLine());
      assertEquals(123, simpleCharStream0.getEndColumn());
      assertEquals(123, simpleCharStream0.getBeginColumn());
      assertEquals(123, simpleCharStream0.getColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.bufpos);
      
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(123, simpleCharStream0.getEndLine());
      assertEquals(123, simpleCharStream0.getLine());
      assertEquals(123, simpleCharStream0.getBeginLine());
      assertEquals(123, simpleCharStream0.getEndColumn());
      assertEquals(123, simpleCharStream0.getBeginColumn());
      assertEquals(123, simpleCharStream0.getColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.bufpos);
      assertNotNull(jVCParserTokenManager0);
      
      simpleCharStream0.backup((byte)123);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(123, simpleCharStream0.getEndLine());
      assertEquals(123, simpleCharStream0.getLine());
      assertEquals(123, simpleCharStream0.getBeginLine());
      assertEquals(123, simpleCharStream0.getEndColumn());
      assertEquals(123, simpleCharStream0.getBeginColumn());
      assertEquals(123, simpleCharStream0.getColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.bufpos);
      
      Token token0 = jVCParserTokenManager0.getNextToken();
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getEndLine());
      assertEquals(0, simpleCharStream0.getEndColumn());
      assertEquals(0, simpleCharStream0.getLine());
      assertEquals("\u0000", token0.toString());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, simpleCharStream0.bufpos);
      assertEquals(0, token0.endLine);
      assertEquals(0, token0.beginColumn);
      assertEquals(0, token0.endColumn);
      assertEquals(0, token0.beginLine);
      assertEquals(16, token0.kind);
      assertNotNull(token0);
      
      jVCParserTokenManager0.SwitchTo(0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getEndLine());
      assertEquals(0, simpleCharStream0.getEndColumn());
      assertEquals(0, simpleCharStream0.getLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, simpleCharStream0.bufpos);
      
      char[] charArray0 = new char[10];
      charArray0[1] = '{';
      simpleCharStream0.bufline = jVCParserTokenManager0.jjnewLexState;
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(4, simpleCharStream0.getLine());
      assertEquals(4, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getColumn());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getEndColumn());
      assertEquals(4, simpleCharStream0.getEndLine());
      
      charArray0[0] = '{';
      charArray0[3] = '{';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'{', '{', '\u0000', '{', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(charArrayReader0);
      
      SimpleCharStream simpleCharStream1 = new SimpleCharStream(charArrayReader0, 0, 0);
      assertFalse(simpleCharStream1.equals((Object)simpleCharStream0));
      assertArrayEquals(new char[] {'{', '{', '\u0000', '{', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(0, simpleCharStream1.getBeginLine());
      assertEquals(0, simpleCharStream1.getBeginColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream1.bufpos);
      assertNotNull(simpleCharStream1);
      
      jVCParserTokenManager0.setDebugStream(jVCParserTokenManager0.debugStream);
      assertFalse(simpleCharStream0.equals((Object)simpleCharStream1));
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(4, simpleCharStream0.getLine());
      assertEquals(4, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getColumn());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getEndColumn());
      assertEquals(4, simpleCharStream0.getEndLine());
      assertNotSame(simpleCharStream0, simpleCharStream1);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, simpleCharStream0.bufpos);
      
      boolean boolean0 = charArrayReader0.ready();
      assertArrayEquals(new char[] {'{', '{', '\u0000', '{', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertTrue(boolean0);
      
      simpleCharStream1.bufsize = (int) (byte)123;
      assertEquals(0, simpleCharStream1.getBeginLine());
      assertEquals(0, simpleCharStream1.getBeginColumn());
      
      boolean boolean1 = byteArrayInputStream0.markSupported();
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(0, byteArrayInputStream0.available());
      
      Token token1 = jVCParserTokenManager0.getNextToken();
      assertFalse(simpleCharStream0.equals((Object)simpleCharStream1));
      assertFalse(token1.equals((Object)token0));
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(3, simpleCharStream0.getLine());
      assertEquals(3, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getColumn());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getEndColumn());
      assertEquals(3, simpleCharStream0.getEndLine());
      assertEquals("\u0000", token1.toString());
      assertNotSame(simpleCharStream0, simpleCharStream1);
      assertNotSame(token1, token0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(2, simpleCharStream0.bufpos);
      assertEquals(0, token1.endColumn);
      assertEquals(3, token1.endLine);
      assertEquals(16, token1.kind);
      assertEquals(3, token1.beginLine);
      assertEquals(0, token1.beginColumn);
      assertNotNull(token1);
      
      String string0 = simpleCharStream1.GetImage();
      assertFalse(simpleCharStream1.equals((Object)simpleCharStream0));
      assertArrayEquals(new char[] {'{', '{', '\u0000', '{', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string0);
      assertEquals(0, simpleCharStream1.getBeginLine());
      assertEquals(0, simpleCharStream1.getBeginColumn());
      assertNotSame(simpleCharStream1, simpleCharStream0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream1.bufpos);
      assertNotNull(string0);
      
      Token token2 = jVCParserTokenManager0.getNextToken();
      assertFalse(simpleCharStream0.equals((Object)simpleCharStream1));
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getColumn());
      assertEquals(2, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getEndColumn());
      assertEquals(2, simpleCharStream0.getEndLine());
      assertEquals(2, simpleCharStream0.getLine());
      assertEquals("\u0000", token2.toString());
      assertNotSame(simpleCharStream0, simpleCharStream1);
      assertNotSame(token2, token0);
      assertNotSame(token2, token1);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(3, simpleCharStream0.bufpos);
      assertEquals(2, token2.beginLine);
      assertEquals(16, token2.kind);
      assertEquals(2, token2.endLine);
      assertEquals(0, token2.beginColumn);
      assertEquals(0, token2.endColumn);
      assertNotNull(token2);
      
      jVCParserTokenManager0.curLexState = 255;
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getColumn());
      assertEquals(2, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getEndColumn());
      assertEquals(2, simpleCharStream0.getEndLine());
      assertEquals(2, simpleCharStream0.getLine());
      
      boolean boolean2 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2);
      
      JVCParserTokenManager jVCParserTokenManager1 = new JVCParserTokenManager(simpleCharStream1, 0);
      assertFalse(jVCParserTokenManager1.equals((Object)jVCParserTokenManager0));
      assertFalse(simpleCharStream1.equals((Object)simpleCharStream0));
      assertArrayEquals(new char[] {'{', '{', '\u0000', '{', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(0, simpleCharStream1.getBeginLine());
      assertEquals(0, simpleCharStream1.getBeginColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream1.bufpos);
      assertNotNull(jVCParserTokenManager1);
      
      Token token3 = jVCParserTokenManager1.getNextToken();
      assertFalse(jVCParserTokenManager1.equals((Object)jVCParserTokenManager0));
      assertFalse(token3.equals((Object)token2));
      assertFalse(token3.equals((Object)token0));
      assertFalse(token3.equals((Object)token1));
      assertFalse(simpleCharStream1.equals((Object)simpleCharStream0));
      assertArrayEquals(new char[] {'{', '{', '\u0000', '{', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals("{", token3.toString());
      assertEquals(0, simpleCharStream1.getColumn());
      assertEquals(0, simpleCharStream1.getLine());
      assertEquals(0, simpleCharStream1.getBeginLine());
      assertEquals(0, simpleCharStream1.getBeginColumn());
      assertEquals(0, simpleCharStream1.getEndColumn());
      assertEquals(0, simpleCharStream1.getEndLine());
      assertNotSame(jVCParserTokenManager1, jVCParserTokenManager0);
      assertNotSame(token3, token2);
      assertNotSame(token3, token0);
      assertNotSame(token3, token1);
      assertNotSame(simpleCharStream1, simpleCharStream0);
      assertEquals(0, token3.beginLine);
      assertEquals(0, token3.endLine);
      assertEquals(16, token3.kind);
      assertEquals(0, token3.endColumn);
      assertEquals(0, token3.beginColumn);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream1.bufpos);
      assertNotNull(token3);
      
      // Undeclared exception!
      try { 
        jVCParserTokenManager1.ReInit(simpleCharStream1, 16);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 16. State unchanged.
         //
         verifyException("com.pmdesigns.jvc.tools.JVCParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(1, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(byteArrayInputStream0, (byte)119, (byte)119, (byte)119);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(1, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(simpleCharStream0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = ']';
      charArray0[1] = ']';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {']', ']', '\u0000', '\u0000'}, charArray0);
      assertNotNull(charArrayReader0);
      
      SimpleCharStream simpleCharStream1 = new SimpleCharStream(charArrayReader0, (-1), (byte)119);
      assertFalse(simpleCharStream1.equals((Object)simpleCharStream0));
      assertArrayEquals(new char[] {']', ']', '\u0000', '\u0000'}, charArray0);
      assertEquals(0, simpleCharStream1.getBeginLine());
      assertEquals(0, simpleCharStream1.getBeginColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream1.bufpos);
      assertNotNull(simpleCharStream1);
      
      charArrayReader0.mark((byte)119);
      assertArrayEquals(new char[] {']', ']', '\u0000', '\u0000'}, charArray0);
      
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream1);
      assertFalse(simpleCharStream1.equals((Object)simpleCharStream0));
      assertArrayEquals(new char[] {']', ']', '\u0000', '\u0000'}, charArray0);
      assertEquals(0, simpleCharStream1.getBeginLine());
      assertEquals(0, simpleCharStream1.getBeginColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream1.bufpos);
      assertNotNull(jVCParserTokenManager0);
      
      Token token0 = jVCParserTokenManager0.getNextToken();
      assertFalse(simpleCharStream1.equals((Object)simpleCharStream0));
      assertArrayEquals(new char[] {']', ']', '\u0000', '\u0000'}, charArray0);
      assertEquals(120, simpleCharStream1.getEndColumn());
      assertEquals((-1), simpleCharStream1.getEndLine());
      assertEquals((-1), simpleCharStream1.getLine());
      assertEquals((-1), simpleCharStream1.getBeginLine());
      assertEquals(120, simpleCharStream1.getColumn());
      assertEquals(119, simpleCharStream1.getBeginColumn());
      assertEquals("]]", token0.toString());
      assertNotSame(simpleCharStream1, simpleCharStream0);
      assertEquals(1, simpleCharStream1.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(9, token0.kind);
      assertEquals((-1), token0.endLine);
      assertEquals(119, token0.beginColumn);
      assertEquals(120, token0.endColumn);
      assertEquals((-1), token0.beginLine);
      assertNotNull(token0);
      
      simpleCharStream0.ReInit((Reader) charArrayReader0);
      assertFalse(simpleCharStream0.equals((Object)simpleCharStream1));
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertArrayEquals(new char[] {']', ']', '\u0000', '\u0000'}, charArray0);
      assertEquals(1, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertNotSame(simpleCharStream0, simpleCharStream1);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray0);
      assertFalse(byteArrayInputStream1.equals((Object)byteArrayInputStream0));
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(1, byteArrayInputStream1.available());
      assertNotNull(byteArrayInputStream1);
      
      charArrayReader0.close();
      assertArrayEquals(new char[] {']', ']', '\u0000', '\u0000'}, charArray0);
      
      int int0 = byteArrayInputStream1.read(byteArray0);
      assertFalse(byteArrayInputStream1.equals((Object)byteArrayInputStream0));
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(1, int0);
      assertEquals(0, byteArrayInputStream1.available());
      assertNotSame(byteArrayInputStream1, byteArrayInputStream0);
      
      // Undeclared exception!
      try { 
        byteArrayInputStream1.read(byteArray0, 1, 119);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(1, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(byteArrayInputStream0, (byte)123, (byte)123, (byte)123);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(1, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream0);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = ']';
      charArray0[1] = ']';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {']', ']', '\u0000', '\u0000'}, charArray0);
      assertNotNull(charArrayReader0);
      
      SimpleCharStream simpleCharStream1 = new SimpleCharStream(charArrayReader0, (-1), (byte)123);
      assertFalse(simpleCharStream1.equals((Object)simpleCharStream0));
      assertArrayEquals(new char[] {']', ']', '\u0000', '\u0000'}, charArray0);
      assertEquals(0, simpleCharStream1.getBeginLine());
      assertEquals(0, simpleCharStream1.getBeginColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream1.bufpos);
      assertNotNull(simpleCharStream1);
      
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream1);
      assertFalse(simpleCharStream1.equals((Object)simpleCharStream0));
      assertArrayEquals(new char[] {']', ']', '\u0000', '\u0000'}, charArray0);
      assertEquals(0, simpleCharStream1.getBeginLine());
      assertEquals(0, simpleCharStream1.getBeginColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream1.bufpos);
      assertNotNull(jVCParserTokenManager0);
      
      SimpleCharStream simpleCharStream2 = new SimpleCharStream(charArrayReader0);
      assertFalse(simpleCharStream2.equals((Object)simpleCharStream0));
      assertFalse(simpleCharStream2.equals((Object)simpleCharStream1));
      assertArrayEquals(new char[] {']', ']', '\u0000', '\u0000'}, charArray0);
      assertEquals(0, simpleCharStream2.getBeginLine());
      assertEquals(0, simpleCharStream2.getBeginColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream2.bufpos);
      assertNotNull(simpleCharStream2);
      
      jVCParserTokenManager0.ReInit(simpleCharStream1, 0);
      assertFalse(simpleCharStream1.equals((Object)simpleCharStream0));
      assertFalse(simpleCharStream1.equals((Object)simpleCharStream2));
      assertArrayEquals(new char[] {']', ']', '\u0000', '\u0000'}, charArray0);
      assertEquals(0, simpleCharStream1.getBeginLine());
      assertEquals(0, simpleCharStream1.getBeginColumn());
      assertNotSame(simpleCharStream1, simpleCharStream0);
      assertNotSame(simpleCharStream1, simpleCharStream2);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream1.bufpos);
      
      Token token0 = jVCParserTokenManager0.getNextToken();
      assertFalse(simpleCharStream1.equals((Object)simpleCharStream0));
      assertFalse(simpleCharStream1.equals((Object)simpleCharStream2));
      assertArrayEquals(new char[] {']', ']', '\u0000', '\u0000'}, charArray0);
      assertEquals((-1), simpleCharStream1.getLine());
      assertEquals((-1), simpleCharStream1.getBeginLine());
      assertEquals(124, simpleCharStream1.getColumn());
      assertEquals(123, simpleCharStream1.getBeginColumn());
      assertEquals(124, simpleCharStream1.getEndColumn());
      assertEquals((-1), simpleCharStream1.getEndLine());
      assertEquals("]]", token0.toString());
      assertNotSame(simpleCharStream1, simpleCharStream0);
      assertNotSame(simpleCharStream1, simpleCharStream2);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, simpleCharStream1.bufpos);
      assertEquals((-1), token0.beginLine);
      assertEquals(9, token0.kind);
      assertEquals(124, token0.endColumn);
      assertEquals((-1), token0.endLine);
      assertEquals(123, token0.beginColumn);
      assertNotNull(token0);
      
      Token token1 = jVCParserTokenManager0.getNextToken();
      assertFalse(simpleCharStream1.equals((Object)simpleCharStream0));
      assertFalse(simpleCharStream1.equals((Object)simpleCharStream2));
      assertFalse(token1.equals((Object)token0));
      assertArrayEquals(new char[] {']', ']', '\u0000', '\u0000'}, charArray0);
      assertEquals((-1), simpleCharStream1.getLine());
      assertEquals((-1), simpleCharStream1.getBeginLine());
      assertEquals(125, simpleCharStream1.getEndColumn());
      assertEquals(125, simpleCharStream1.getColumn());
      assertEquals(125, simpleCharStream1.getBeginColumn());
      assertEquals((-1), simpleCharStream1.getEndLine());
      assertEquals("\u0000", token1.toString());
      assertNotSame(simpleCharStream1, simpleCharStream0);
      assertNotSame(simpleCharStream1, simpleCharStream2);
      assertNotSame(token1, token0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(2, simpleCharStream1.bufpos);
      assertEquals(16, token1.kind);
      assertEquals((-1), token1.beginLine);
      assertEquals(125, token1.beginColumn);
      assertEquals(125, token1.endColumn);
      assertEquals((-1), token1.endLine);
      assertNotNull(token1);
      
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray0);
      assertFalse(byteArrayInputStream1.equals((Object)byteArrayInputStream0));
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(1, byteArrayInputStream1.available());
      assertNotNull(byteArrayInputStream1);
      
      byteArrayInputStream0.close();
      assertFalse(byteArrayInputStream0.equals((Object)byteArrayInputStream1));
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(1, byteArrayInputStream0.available());
      assertNotSame(byteArrayInputStream0, byteArrayInputStream1);
      
      CharArrayReader charArrayReader1 = new CharArrayReader(charArray0);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertArrayEquals(new char[] {']', ']', '\u0000', '\u0000'}, charArray0);
      assertNotNull(charArrayReader1);
      
      // Undeclared exception!
      try { 
        jVCParserTokenManager0.SwitchTo((-1973));
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : -1973. State unchanged.
         //
         verifyException("com.pmdesigns.jvc.tools.JVCParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = '[';
      charArray0[1] = '[';
      charArray0[3] = '[';
      charArray0[4] = '[';
      charArray0[6] = '[';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'[', '[', '\u0000', '[', '[', '\u0000', '['}, charArray0);
      assertNotNull(charArrayReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(charArrayReader0, 12, 12);
      assertArrayEquals(new char[] {'[', '[', '\u0000', '[', '[', '\u0000', '['}, charArray0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(simpleCharStream0);
      
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0);
      assertArrayEquals(new char[] {'[', '[', '\u0000', '[', '[', '\u0000', '['}, charArray0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(jVCParserTokenManager0);
      
      Token token0 = jVCParserTokenManager0.getNextToken();
      assertArrayEquals(new char[] {'[', '[', '\u0000', '[', '[', '\u0000', '['}, charArray0);
      assertEquals(13, simpleCharStream0.getColumn());
      assertEquals(13, simpleCharStream0.getEndColumn());
      assertEquals(12, simpleCharStream0.getLine());
      assertEquals(12, simpleCharStream0.getBeginColumn());
      assertEquals(12, simpleCharStream0.getEndLine());
      assertEquals(12, simpleCharStream0.getBeginLine());
      assertEquals("[[", token0.toString());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, simpleCharStream0.bufpos);
      assertEquals(12, token0.endLine);
      assertEquals(12, token0.beginLine);
      assertEquals(1, token0.kind);
      assertEquals(13, token0.endColumn);
      assertEquals(12, token0.beginColumn);
      assertNotNull(token0);
      
      CharArrayReader charArrayReader1 = new CharArrayReader(charArray0);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertArrayEquals(new char[] {'[', '[', '\u0000', '[', '[', '\u0000', '['}, charArray0);
      assertNotNull(charArrayReader1);
      
      simpleCharStream0.tabSize = (int) '\u0000';
      assertEquals(13, simpleCharStream0.getColumn());
      assertEquals(13, simpleCharStream0.getEndColumn());
      assertEquals(12, simpleCharStream0.getLine());
      assertEquals(12, simpleCharStream0.getBeginColumn());
      assertEquals(12, simpleCharStream0.getEndLine());
      assertEquals(12, simpleCharStream0.getBeginLine());
      
      SimpleCharStream simpleCharStream1 = new SimpleCharStream(charArrayReader0, 12, 58);
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertFalse(simpleCharStream1.equals((Object)simpleCharStream0));
      assertArrayEquals(new char[] {'[', '[', '\u0000', '[', '[', '\u0000', '['}, charArray0);
      assertEquals(0, simpleCharStream1.getBeginColumn());
      assertEquals(0, simpleCharStream1.getBeginLine());
      assertEquals((-1), simpleCharStream1.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream1);
      
      JVCParserTokenManager jVCParserTokenManager1 = new JVCParserTokenManager(simpleCharStream1);
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertFalse(simpleCharStream1.equals((Object)simpleCharStream0));
      assertFalse(jVCParserTokenManager1.equals((Object)jVCParserTokenManager0));
      assertArrayEquals(new char[] {'[', '[', '\u0000', '[', '[', '\u0000', '['}, charArray0);
      assertEquals(0, simpleCharStream1.getBeginColumn());
      assertEquals(0, simpleCharStream1.getBeginLine());
      assertEquals((-1), simpleCharStream1.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(jVCParserTokenManager1);
      
      simpleCharStream1.bufcolumn = jVCParserTokenManager1.jjnewLexState;
      assertEquals(0, simpleCharStream1.getBeginLine());
      assertEquals(41, simpleCharStream1.getBeginColumn());
      
      jVCParserTokenManager0.curLexState = 55;
      assertEquals(13, simpleCharStream0.getColumn());
      assertEquals(13, simpleCharStream0.getEndColumn());
      assertEquals(12, simpleCharStream0.getLine());
      assertEquals(12, simpleCharStream0.getBeginColumn());
      assertEquals(12, simpleCharStream0.getEndLine());
      assertEquals(12, simpleCharStream0.getBeginLine());
      
      simpleCharStream1.tabSize = 3;
      assertEquals(0, simpleCharStream1.getBeginLine());
      assertEquals(41, simpleCharStream1.getBeginColumn());
      
      jVCParserTokenManager0.setDebugStream(jVCParserTokenManager1.debugStream);
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertFalse(simpleCharStream0.equals((Object)simpleCharStream1));
      assertFalse(jVCParserTokenManager0.equals((Object)jVCParserTokenManager1));
      assertFalse(simpleCharStream1.equals((Object)simpleCharStream0));
      assertFalse(jVCParserTokenManager1.equals((Object)jVCParserTokenManager0));
      assertArrayEquals(new char[] {'[', '[', '\u0000', '[', '[', '\u0000', '['}, charArray0);
      assertEquals(13, simpleCharStream0.getColumn());
      assertEquals(13, simpleCharStream0.getEndColumn());
      assertEquals(12, simpleCharStream0.getLine());
      assertEquals(12, simpleCharStream0.getBeginColumn());
      assertEquals(12, simpleCharStream0.getEndLine());
      assertEquals(12, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream1.getBeginLine());
      assertEquals(41, simpleCharStream1.getBeginColumn());
      assertNotSame(charArrayReader0, charArrayReader1);
      assertNotSame(simpleCharStream0, simpleCharStream1);
      assertNotSame(jVCParserTokenManager0, jVCParserTokenManager1);
      assertNotSame(simpleCharStream1, simpleCharStream0);
      assertNotSame(jVCParserTokenManager1, jVCParserTokenManager0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, simpleCharStream0.bufpos);
      assertEquals((-1), simpleCharStream1.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      charArrayReader0.mark(68);
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertArrayEquals(new char[] {'[', '[', '\u0000', '[', '[', '\u0000', '['}, charArray0);
      assertNotSame(charArrayReader0, charArrayReader1);
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "[[");
      assertFalse(boolean0);
      
      Token token1 = jVCParserTokenManager0.getNextToken();
      assertFalse(token1.equals((Object)token0));
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertFalse(simpleCharStream0.equals((Object)simpleCharStream1));
      assertFalse(jVCParserTokenManager0.equals((Object)jVCParserTokenManager1));
      assertArrayEquals(new char[] {'[', '[', '\u0000', '[', '[', '\u0000', '['}, charArray0);
      assertEquals("[[", token1.toString());
      assertEquals(14, simpleCharStream0.getColumn());
      assertEquals(12, simpleCharStream0.getLine());
      assertEquals(14, simpleCharStream0.getEndColumn());
      assertEquals(14, simpleCharStream0.getBeginColumn());
      assertEquals(12, simpleCharStream0.getEndLine());
      assertEquals(12, simpleCharStream0.getBeginLine());
      assertNotSame(token1, token0);
      assertNotSame(charArrayReader0, charArrayReader1);
      assertNotSame(simpleCharStream0, simpleCharStream1);
      assertNotSame(jVCParserTokenManager0, jVCParserTokenManager1);
      assertEquals(1, token1.kind);
      assertEquals(12, token1.endLine);
      assertEquals(12, token1.beginLine);
      assertEquals(14, token1.beginColumn);
      assertEquals(14, token1.endColumn);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(2, simpleCharStream0.bufpos);
      assertNotNull(token1);
      
      Token token2 = jVCParserTokenManager0.jjFillToken();
      assertFalse(token2.equals((Object)token1));
      assertFalse(token2.equals((Object)token0));
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertFalse(simpleCharStream0.equals((Object)simpleCharStream1));
      assertFalse(jVCParserTokenManager0.equals((Object)jVCParserTokenManager1));
      assertArrayEquals(new char[] {'[', '[', '\u0000', '[', '[', '\u0000', '['}, charArray0);
      assertEquals("[[", token2.toString());
      assertEquals(14, simpleCharStream0.getColumn());
      assertEquals(12, simpleCharStream0.getLine());
      assertEquals(14, simpleCharStream0.getEndColumn());
      assertEquals(14, simpleCharStream0.getBeginColumn());
      assertEquals(12, simpleCharStream0.getEndLine());
      assertEquals(12, simpleCharStream0.getBeginLine());
      assertNotSame(token2, token1);
      assertNotSame(token2, token0);
      assertNotSame(charArrayReader0, charArrayReader1);
      assertNotSame(simpleCharStream0, simpleCharStream1);
      assertNotSame(jVCParserTokenManager0, jVCParserTokenManager1);
      assertEquals(12, token2.endLine);
      assertEquals(1, token2.kind);
      assertEquals(14, token2.beginColumn);
      assertEquals(12, token2.beginLine);
      assertEquals(14, token2.endColumn);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(2, simpleCharStream0.bufpos);
      assertNotNull(token2);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      Token token3 = jVCParserTokenManager0.getNextToken();
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertFalse(token3.equals((Object)token1));
      assertFalse(token3.equals((Object)token0));
      assertFalse(token3.equals((Object)token2));
      assertFalse(simpleCharStream0.equals((Object)simpleCharStream1));
      assertFalse(jVCParserTokenManager0.equals((Object)jVCParserTokenManager1));
      assertArrayEquals(new char[] {'[', '[', '\u0000', '[', '[', '\u0000', '['}, charArray0);
      assertEquals("[[", token3.toString());
      assertEquals(12, simpleCharStream0.getLine());
      assertEquals(16, simpleCharStream0.getEndColumn());
      assertEquals(16, simpleCharStream0.getColumn());
      assertEquals(15, simpleCharStream0.getBeginColumn());
      assertEquals(12, simpleCharStream0.getEndLine());
      assertEquals(12, simpleCharStream0.getBeginLine());
      assertNotSame(charArrayReader0, charArrayReader1);
      assertNotSame(token3, token1);
      assertNotSame(token3, token0);
      assertNotSame(token3, token2);
      assertNotSame(simpleCharStream0, simpleCharStream1);
      assertNotSame(jVCParserTokenManager0, jVCParserTokenManager1);
      assertEquals(12, token3.beginLine);
      assertEquals(1, token3.kind);
      assertEquals(12, token3.endLine);
      assertEquals(15, token3.beginColumn);
      assertEquals(16, token3.endColumn);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(4, simpleCharStream0.bufpos);
      assertNotNull(token3);
      
      Token token4 = jVCParserTokenManager0.getNextToken();
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertFalse(simpleCharStream0.equals((Object)simpleCharStream1));
      assertFalse(token4.equals((Object)token0));
      assertFalse(token4.equals((Object)token2));
      assertFalse(token4.equals((Object)token1));
      assertFalse(token4.equals((Object)token3));
      assertFalse(jVCParserTokenManager0.equals((Object)jVCParserTokenManager1));
      assertArrayEquals(new char[] {'[', '[', '\u0000', '[', '[', '\u0000', '['}, charArray0);
      assertEquals(12, simpleCharStream0.getLine());
      assertEquals(17, simpleCharStream0.getEndColumn());
      assertEquals(12, simpleCharStream0.getEndLine());
      assertEquals(17, simpleCharStream0.getBeginColumn());
      assertEquals(12, simpleCharStream0.getBeginLine());
      assertEquals(17, simpleCharStream0.getColumn());
      assertEquals("\u0000", token4.toString());
      assertNotSame(charArrayReader0, charArrayReader1);
      assertNotSame(simpleCharStream0, simpleCharStream1);
      assertNotSame(token4, token0);
      assertNotSame(token4, token2);
      assertNotSame(token4, token1);
      assertNotSame(token4, token3);
      assertNotSame(jVCParserTokenManager0, jVCParserTokenManager1);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(5, simpleCharStream0.bufpos);
      assertEquals(16, token4.kind);
      assertEquals(12, token4.beginLine);
      assertEquals(17, token4.endColumn);
      assertEquals(12, token4.endLine);
      assertEquals(17, token4.beginColumn);
      assertNotNull(token4);
      
      // Undeclared exception!
      try { 
        jVCParserTokenManager0.SwitchTo((-4633));
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : -4633. State unchanged.
         //
         verifyException("com.pmdesigns.jvc.tools.JVCParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = '[';
      charArray0[1] = '[';
      charArray0[2] = '[';
      charArray0[3] = '[';
      charArray0[4] = '[';
      charArray0[6] = '[';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'[', '[', '[', '[', '[', '\u0000', '['}, charArray0);
      assertNotNull(charArrayReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(charArrayReader0, 12, 12);
      assertArrayEquals(new char[] {'[', '[', '[', '[', '[', '\u0000', '['}, charArray0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream0);
      
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0);
      assertArrayEquals(new char[] {'[', '[', '[', '[', '[', '\u0000', '['}, charArray0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(jVCParserTokenManager0);
      
      Token token0 = jVCParserTokenManager0.getNextToken();
      assertArrayEquals(new char[] {'[', '[', '[', '[', '[', '\u0000', '['}, charArray0);
      assertEquals(12, simpleCharStream0.getLine());
      assertEquals(12, simpleCharStream0.getBeginLine());
      assertEquals(12, simpleCharStream0.getEndLine());
      assertEquals(13, simpleCharStream0.getColumn());
      assertEquals(12, simpleCharStream0.getBeginColumn());
      assertEquals(13, simpleCharStream0.getEndColumn());
      assertEquals("[[", token0.toString());
      assertEquals(1, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(13, token0.endColumn);
      assertEquals(12, token0.beginColumn);
      assertEquals(12, token0.endLine);
      assertEquals(12, token0.beginLine);
      assertEquals(1, token0.kind);
      assertNotNull(token0);
      
      CharArrayReader charArrayReader1 = new CharArrayReader(charArray0);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertArrayEquals(new char[] {'[', '[', '[', '[', '[', '\u0000', '['}, charArray0);
      assertNotNull(charArrayReader1);
      
      simpleCharStream0.tabSize = (int) '[';
      assertEquals(12, simpleCharStream0.getLine());
      assertEquals(12, simpleCharStream0.getBeginLine());
      assertEquals(12, simpleCharStream0.getEndLine());
      assertEquals(13, simpleCharStream0.getColumn());
      assertEquals(12, simpleCharStream0.getBeginColumn());
      assertEquals(13, simpleCharStream0.getEndColumn());
      
      SimpleCharStream simpleCharStream1 = new SimpleCharStream(charArrayReader0, 12, 15);
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertFalse(simpleCharStream1.equals((Object)simpleCharStream0));
      assertArrayEquals(new char[] {'[', '[', '[', '[', '[', '\u0000', '['}, charArray0);
      assertEquals(0, simpleCharStream1.getBeginColumn());
      assertEquals(0, simpleCharStream1.getBeginLine());
      assertEquals((-1), simpleCharStream1.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream1);
      
      JVCParserTokenManager jVCParserTokenManager1 = new JVCParserTokenManager(simpleCharStream1);
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertFalse(simpleCharStream1.equals((Object)simpleCharStream0));
      assertFalse(jVCParserTokenManager1.equals((Object)jVCParserTokenManager0));
      assertArrayEquals(new char[] {'[', '[', '[', '[', '[', '\u0000', '['}, charArray0);
      assertEquals(0, simpleCharStream1.getBeginColumn());
      assertEquals(0, simpleCharStream1.getBeginLine());
      assertEquals((-1), simpleCharStream1.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(jVCParserTokenManager1);
      
      charArrayReader0.mark(4661);
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertArrayEquals(new char[] {'[', '[', '[', '[', '[', '\u0000', '['}, charArray0);
      assertNotSame(charArrayReader0, charArrayReader1);
      
      jVCParserTokenManager0.setDebugStream(jVCParserTokenManager1.debugStream);
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertFalse(simpleCharStream0.equals((Object)simpleCharStream1));
      assertFalse(jVCParserTokenManager0.equals((Object)jVCParserTokenManager1));
      assertFalse(simpleCharStream1.equals((Object)simpleCharStream0));
      assertFalse(jVCParserTokenManager1.equals((Object)jVCParserTokenManager0));
      assertArrayEquals(new char[] {'[', '[', '[', '[', '[', '\u0000', '['}, charArray0);
      assertEquals(12, simpleCharStream0.getLine());
      assertEquals(12, simpleCharStream0.getBeginLine());
      assertEquals(12, simpleCharStream0.getEndLine());
      assertEquals(13, simpleCharStream0.getColumn());
      assertEquals(12, simpleCharStream0.getBeginColumn());
      assertEquals(13, simpleCharStream0.getEndColumn());
      assertEquals(0, simpleCharStream1.getBeginColumn());
      assertEquals(0, simpleCharStream1.getBeginLine());
      assertNotSame(charArrayReader0, charArrayReader1);
      assertNotSame(simpleCharStream0, simpleCharStream1);
      assertNotSame(jVCParserTokenManager0, jVCParserTokenManager1);
      assertNotSame(simpleCharStream1, simpleCharStream0);
      assertNotSame(jVCParserTokenManager1, jVCParserTokenManager0);
      assertEquals(1, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream1.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      charArrayReader0.mark(68);
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertArrayEquals(new char[] {'[', '[', '[', '[', '[', '\u0000', '['}, charArray0);
      assertNotSame(charArrayReader0, charArrayReader1);
      
      Token token1 = jVCParserTokenManager0.getNextToken();
      assertFalse(token1.equals((Object)token0));
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertFalse(simpleCharStream0.equals((Object)simpleCharStream1));
      assertFalse(jVCParserTokenManager0.equals((Object)jVCParserTokenManager1));
      assertArrayEquals(new char[] {'[', '[', '[', '[', '[', '\u0000', '['}, charArray0);
      assertEquals("[[", token1.toString());
      assertEquals(15, simpleCharStream0.getEndColumn());
      assertEquals(12, simpleCharStream0.getLine());
      assertEquals(14, simpleCharStream0.getBeginColumn());
      assertEquals(12, simpleCharStream0.getBeginLine());
      assertEquals(12, simpleCharStream0.getEndLine());
      assertEquals(15, simpleCharStream0.getColumn());
      assertNotSame(token1, token0);
      assertNotSame(charArrayReader0, charArrayReader1);
      assertNotSame(simpleCharStream0, simpleCharStream1);
      assertNotSame(jVCParserTokenManager0, jVCParserTokenManager1);
      assertEquals(15, token1.endColumn);
      assertEquals(12, token1.beginLine);
      assertEquals(14, token1.beginColumn);
      assertEquals(1, token1.kind);
      assertEquals(12, token1.endLine);
      assertEquals(3, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(token1);
      
      Token token2 = jVCParserTokenManager0.jjFillToken();
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertFalse(simpleCharStream0.equals((Object)simpleCharStream1));
      assertFalse(jVCParserTokenManager0.equals((Object)jVCParserTokenManager1));
      assertArrayEquals(new char[] {'[', '[', '[', '[', '[', '\u0000', '['}, charArray0);
      assertEquals("[[", token2.toString());
      assertEquals(15, simpleCharStream0.getEndColumn());
      assertEquals(12, simpleCharStream0.getLine());
      assertEquals(14, simpleCharStream0.getBeginColumn());
      assertEquals(12, simpleCharStream0.getBeginLine());
      assertEquals(12, simpleCharStream0.getEndLine());
      assertEquals(15, simpleCharStream0.getColumn());
      assertNotSame(token2, token0);
      assertNotSame(token2, token1);
      assertNotSame(charArrayReader0, charArrayReader1);
      assertNotSame(simpleCharStream0, simpleCharStream1);
      assertNotSame(jVCParserTokenManager0, jVCParserTokenManager1);
      assertEquals(14, token2.beginColumn);
      assertEquals(12, token2.endLine);
      assertEquals(15, token2.endColumn);
      assertEquals(12, token2.beginLine);
      assertEquals(1, token2.kind);
      assertEquals(3, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(token2);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Token token3 = jVCParserTokenManager0.getNextToken();
      assertFalse(token3.equals((Object)token2));
      assertFalse(token3.equals((Object)token1));
      assertFalse(token3.equals((Object)token0));
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertFalse(simpleCharStream0.equals((Object)simpleCharStream1));
      assertFalse(jVCParserTokenManager0.equals((Object)jVCParserTokenManager1));
      assertArrayEquals(new char[] {'[', '[', '[', '[', '[', '\u0000', '['}, charArray0);
      assertEquals("[", token3.toString());
      assertEquals(16, simpleCharStream0.getEndColumn());
      assertEquals(16, simpleCharStream0.getBeginColumn());
      assertEquals(12, simpleCharStream0.getLine());
      assertEquals(12, simpleCharStream0.getBeginLine());
      assertEquals(16, simpleCharStream0.getColumn());
      assertEquals(12, simpleCharStream0.getEndLine());
      assertNotSame(token3, token2);
      assertNotSame(token3, token1);
      assertNotSame(token3, token0);
      assertNotSame(charArrayReader0, charArrayReader1);
      assertNotSame(simpleCharStream0, simpleCharStream1);
      assertNotSame(jVCParserTokenManager0, jVCParserTokenManager1);
      assertEquals(16, token3.kind);
      assertEquals(16, token3.endColumn);
      assertEquals(12, token3.beginLine);
      assertEquals(12, token3.endLine);
      assertEquals(16, token3.beginColumn);
      assertEquals(4, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(token3);
      
      Token token4 = jVCParserTokenManager0.getNextToken();
      assertFalse(token4.equals((Object)token2));
      assertFalse(token4.equals((Object)token0));
      assertFalse(token4.equals((Object)token3));
      assertFalse(token4.equals((Object)token1));
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertFalse(simpleCharStream0.equals((Object)simpleCharStream1));
      assertFalse(jVCParserTokenManager0.equals((Object)jVCParserTokenManager1));
      assertArrayEquals(new char[] {'[', '[', '[', '[', '[', '\u0000', '['}, charArray0);
      assertEquals("\u0000", token4.toString());
      assertEquals(12, simpleCharStream0.getLine());
      assertEquals(17, simpleCharStream0.getEndColumn());
      assertEquals(12, simpleCharStream0.getBeginLine());
      assertEquals(17, simpleCharStream0.getBeginColumn());
      assertEquals(17, simpleCharStream0.getColumn());
      assertEquals(12, simpleCharStream0.getEndLine());
      assertNotSame(token4, token2);
      assertNotSame(token4, token0);
      assertNotSame(token4, token3);
      assertNotSame(token4, token1);
      assertNotSame(charArrayReader0, charArrayReader1);
      assertNotSame(simpleCharStream0, simpleCharStream1);
      assertNotSame(jVCParserTokenManager0, jVCParserTokenManager1);
      assertEquals(17, token4.beginColumn);
      assertEquals(17, token4.endColumn);
      assertEquals(16, token4.kind);
      assertEquals(12, token4.endLine);
      assertEquals(12, token4.beginLine);
      assertEquals(5, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(token4);
      
      PipedInputStream pipedInputStream0 = null;
      try {
        pipedInputStream0 = new PipedInputStream((PipedOutputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = '[';
      charArray0[1] = '[';
      charArray0[2] = '[';
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "[[=");
      assertFalse(boolean0);
      
      charArray0[3] = '[';
      charArray0[4] = '[';
      charArray0[6] = '[';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'[', '[', '[', '[', '[', '\u0000', '['}, charArray0);
      assertNotNull(charArrayReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(charArrayReader0, 12, 12);
      assertArrayEquals(new char[] {'[', '[', '[', '[', '[', '\u0000', '['}, charArray0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(simpleCharStream0);
      
      char char0 = simpleCharStream0.BeginToken();
      assertArrayEquals(new char[] {'[', '[', '[', '[', '[', '\u0000', '['}, charArray0);
      assertEquals('[', char0);
      assertEquals(12, simpleCharStream0.getColumn());
      assertEquals(12, simpleCharStream0.getBeginLine());
      assertEquals(12, simpleCharStream0.getBeginColumn());
      assertEquals(12, simpleCharStream0.getEndLine());
      assertEquals(12, simpleCharStream0.getEndColumn());
      assertEquals(12, simpleCharStream0.getLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.bufpos);
      
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0);
      assertArrayEquals(new char[] {'[', '[', '[', '[', '[', '\u0000', '['}, charArray0);
      assertEquals(12, simpleCharStream0.getColumn());
      assertEquals(12, simpleCharStream0.getBeginLine());
      assertEquals(12, simpleCharStream0.getBeginColumn());
      assertEquals(12, simpleCharStream0.getEndLine());
      assertEquals(12, simpleCharStream0.getEndColumn());
      assertEquals(12, simpleCharStream0.getLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.bufpos);
      assertNotNull(jVCParserTokenManager0);
      
      Token token0 = jVCParserTokenManager0.getNextToken();
      assertArrayEquals(new char[] {'[', '[', '[', '[', '[', '\u0000', '['}, charArray0);
      assertEquals(14, simpleCharStream0.getEndColumn());
      assertEquals(14, simpleCharStream0.getColumn());
      assertEquals(13, simpleCharStream0.getBeginColumn());
      assertEquals(12, simpleCharStream0.getBeginLine());
      assertEquals(12, simpleCharStream0.getEndLine());
      assertEquals(12, simpleCharStream0.getLine());
      assertEquals("[[", token0.toString());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(2, simpleCharStream0.bufpos);
      assertEquals(1, token0.kind);
      assertEquals(12, token0.endLine);
      assertEquals(14, token0.endColumn);
      assertEquals(12, token0.beginLine);
      assertEquals(13, token0.beginColumn);
      assertNotNull(token0);
      
      CharArrayReader charArrayReader1 = new CharArrayReader(charArray0);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertArrayEquals(new char[] {'[', '[', '[', '[', '[', '\u0000', '['}, charArray0);
      assertNotNull(charArrayReader1);
      
      token0.beginColumn = (int) '[';
      assertEquals(14, simpleCharStream0.getEndColumn());
      assertEquals(14, simpleCharStream0.getColumn());
      assertEquals(13, simpleCharStream0.getBeginColumn());
      assertEquals(12, simpleCharStream0.getBeginLine());
      assertEquals(12, simpleCharStream0.getEndLine());
      assertEquals(12, simpleCharStream0.getLine());
      assertEquals("[[", token0.toString());
      
      SimpleCharStream simpleCharStream1 = new SimpleCharStream(charArrayReader0, 12, 15);
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertFalse(simpleCharStream1.equals((Object)simpleCharStream0));
      assertArrayEquals(new char[] {'[', '[', '[', '[', '[', '\u0000', '['}, charArray0);
      assertEquals(0, simpleCharStream1.getBeginLine());
      assertEquals(0, simpleCharStream1.getBeginColumn());
      assertEquals((-1), simpleCharStream1.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream1);
      
      JVCParserTokenManager jVCParserTokenManager1 = new JVCParserTokenManager(simpleCharStream1);
      assertFalse(jVCParserTokenManager1.equals((Object)jVCParserTokenManager0));
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertFalse(simpleCharStream1.equals((Object)simpleCharStream0));
      assertArrayEquals(new char[] {'[', '[', '[', '[', '[', '\u0000', '['}, charArray0);
      assertEquals(0, simpleCharStream1.getBeginLine());
      assertEquals(0, simpleCharStream1.getBeginColumn());
      assertEquals((-1), simpleCharStream1.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(jVCParserTokenManager1);
      
      charArrayReader0.mark(4661);
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertArrayEquals(new char[] {'[', '[', '[', '[', '[', '\u0000', '['}, charArray0);
      assertNotSame(charArrayReader0, charArrayReader1);
      
      jVCParserTokenManager0.setDebugStream(jVCParserTokenManager1.debugStream);
      assertFalse(jVCParserTokenManager1.equals((Object)jVCParserTokenManager0));
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertFalse(simpleCharStream0.equals((Object)simpleCharStream1));
      assertFalse(jVCParserTokenManager0.equals((Object)jVCParserTokenManager1));
      assertFalse(simpleCharStream1.equals((Object)simpleCharStream0));
      assertArrayEquals(new char[] {'[', '[', '[', '[', '[', '\u0000', '['}, charArray0);
      assertEquals(14, simpleCharStream0.getEndColumn());
      assertEquals(14, simpleCharStream0.getColumn());
      assertEquals(13, simpleCharStream0.getBeginColumn());
      assertEquals(12, simpleCharStream0.getBeginLine());
      assertEquals(12, simpleCharStream0.getEndLine());
      assertEquals(12, simpleCharStream0.getLine());
      assertEquals(0, simpleCharStream1.getBeginLine());
      assertEquals(0, simpleCharStream1.getBeginColumn());
      assertNotSame(jVCParserTokenManager1, jVCParserTokenManager0);
      assertNotSame(charArrayReader0, charArrayReader1);
      assertNotSame(simpleCharStream0, simpleCharStream1);
      assertNotSame(jVCParserTokenManager0, jVCParserTokenManager1);
      assertNotSame(simpleCharStream1, simpleCharStream0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(2, simpleCharStream0.bufpos);
      assertEquals((-1), simpleCharStream1.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      charArrayReader0.mark(68);
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertArrayEquals(new char[] {'[', '[', '[', '[', '[', '\u0000', '['}, charArray0);
      assertNotSame(charArrayReader0, charArrayReader1);
      
      Token token1 = jVCParserTokenManager0.getNextToken();
      assertFalse(token1.equals((Object)token0));
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertFalse(simpleCharStream0.equals((Object)simpleCharStream1));
      assertFalse(jVCParserTokenManager0.equals((Object)jVCParserTokenManager1));
      assertArrayEquals(new char[] {'[', '[', '[', '[', '[', '\u0000', '['}, charArray0);
      assertEquals("[[", token1.toString());
      assertEquals(12, simpleCharStream0.getBeginLine());
      assertEquals(16, simpleCharStream0.getEndColumn());
      assertEquals(16, simpleCharStream0.getColumn());
      assertEquals(15, simpleCharStream0.getBeginColumn());
      assertEquals(12, simpleCharStream0.getEndLine());
      assertEquals(12, simpleCharStream0.getLine());
      assertNotSame(token1, token0);
      assertNotSame(charArrayReader0, charArrayReader1);
      assertNotSame(simpleCharStream0, simpleCharStream1);
      assertNotSame(jVCParserTokenManager0, jVCParserTokenManager1);
      assertEquals(1, token1.kind);
      assertEquals(16, token1.endColumn);
      assertEquals(12, token1.beginLine);
      assertEquals(15, token1.beginColumn);
      assertEquals(12, token1.endLine);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(4, simpleCharStream0.bufpos);
      assertNotNull(token1);
      
      Token token2 = jVCParserTokenManager0.getNextToken();
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertFalse(simpleCharStream0.equals((Object)simpleCharStream1));
      assertFalse(jVCParserTokenManager0.equals((Object)jVCParserTokenManager1));
      assertArrayEquals(new char[] {'[', '[', '[', '[', '[', '\u0000', '['}, charArray0);
      assertEquals("\u0000", token2.toString());
      assertEquals(17, simpleCharStream0.getBeginColumn());
      assertEquals(12, simpleCharStream0.getBeginLine());
      assertEquals(17, simpleCharStream0.getEndColumn());
      assertEquals(12, simpleCharStream0.getEndLine());
      assertEquals(17, simpleCharStream0.getColumn());
      assertEquals(12, simpleCharStream0.getLine());
      assertNotSame(token2, token0);
      assertNotSame(token2, token1);
      assertNotSame(charArrayReader0, charArrayReader1);
      assertNotSame(simpleCharStream0, simpleCharStream1);
      assertNotSame(jVCParserTokenManager0, jVCParserTokenManager1);
      assertEquals(17, token2.beginColumn);
      assertEquals(16, token2.kind);
      assertEquals(12, token2.beginLine);
      assertEquals(17, token2.endColumn);
      assertEquals(12, token2.endLine);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(5, simpleCharStream0.bufpos);
      assertNotNull(token2);
      
      jVCParserTokenManager0.SwitchTo(4);
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertFalse(simpleCharStream0.equals((Object)simpleCharStream1));
      assertFalse(jVCParserTokenManager0.equals((Object)jVCParserTokenManager1));
      assertArrayEquals(new char[] {'[', '[', '[', '[', '[', '\u0000', '['}, charArray0);
      assertEquals(17, simpleCharStream0.getBeginColumn());
      assertEquals(12, simpleCharStream0.getBeginLine());
      assertEquals(17, simpleCharStream0.getEndColumn());
      assertEquals(12, simpleCharStream0.getEndLine());
      assertEquals(17, simpleCharStream0.getColumn());
      assertEquals(12, simpleCharStream0.getLine());
      assertNotSame(charArrayReader0, charArrayReader1);
      assertNotSame(simpleCharStream0, simpleCharStream1);
      assertNotSame(jVCParserTokenManager0, jVCParserTokenManager1);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(5, simpleCharStream0.bufpos);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      Token token3 = jVCParserTokenManager0.getNextToken();
      assertFalse(token3.equals((Object)token1));
      assertFalse(token3.equals((Object)token2));
      assertFalse(token3.equals((Object)token0));
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertFalse(simpleCharStream0.equals((Object)simpleCharStream1));
      assertFalse(jVCParserTokenManager0.equals((Object)jVCParserTokenManager1));
      assertArrayEquals(new char[] {'[', '[', '[', '[', '[', '\u0000', '['}, charArray0);
      assertEquals("[", token3.toString());
      assertEquals(18, simpleCharStream0.getEndColumn());
      assertEquals(18, simpleCharStream0.getBeginColumn());
      assertEquals(12, simpleCharStream0.getBeginLine());
      assertEquals(12, simpleCharStream0.getEndLine());
      assertEquals(18, simpleCharStream0.getColumn());
      assertEquals(12, simpleCharStream0.getLine());
      assertNotSame(token3, token1);
      assertNotSame(token3, token2);
      assertNotSame(token3, token0);
      assertNotSame(charArrayReader0, charArrayReader1);
      assertNotSame(simpleCharStream0, simpleCharStream1);
      assertNotSame(jVCParserTokenManager0, jVCParserTokenManager1);
      assertEquals(12, token3.endLine);
      assertEquals(12, token3.beginLine);
      assertEquals(18, token3.endColumn);
      assertEquals(16, token3.kind);
      assertEquals(18, token3.beginColumn);
      assertEquals(6, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(token3);
      
      Token token4 = jVCParserTokenManager0.getNextToken();
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertFalse(token4.equals((Object)token0));
      assertFalse(token4.equals((Object)token3));
      assertFalse(token4.equals((Object)token2));
      assertFalse(token4.equals((Object)token1));
      assertFalse(simpleCharStream0.equals((Object)simpleCharStream1));
      assertFalse(jVCParserTokenManager0.equals((Object)jVCParserTokenManager1));
      assertArrayEquals(new char[] {'[', '[', '[', '[', '[', '\u0000', '['}, charArray0);
      assertEquals("", token4.toString());
      assertEquals(18, simpleCharStream0.getEndColumn());
      assertEquals(18, simpleCharStream0.getBeginColumn());
      assertEquals(12, simpleCharStream0.getBeginLine());
      assertEquals(12, simpleCharStream0.getEndLine());
      assertEquals(18, simpleCharStream0.getColumn());
      assertEquals(12, simpleCharStream0.getLine());
      assertNotSame(charArrayReader0, charArrayReader1);
      assertNotSame(token4, token0);
      assertNotSame(token4, token3);
      assertNotSame(token4, token2);
      assertNotSame(token4, token1);
      assertNotSame(simpleCharStream0, simpleCharStream1);
      assertNotSame(jVCParserTokenManager0, jVCParserTokenManager1);
      assertEquals(0, token4.kind);
      assertEquals(18, token4.beginColumn);
      assertEquals(18, token4.endColumn);
      assertEquals(12, token4.endLine);
      assertEquals(12, token4.beginLine);
      assertEquals(6, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(token4);
      
      PipedInputStream pipedInputStream0 = null;
      try {
        pipedInputStream0 = new PipedInputStream((PipedOutputStream) null, 91);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(1, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(byteArrayInputStream0, (byte)0, (byte)2, (byte)2);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(1, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(simpleCharStream0);
      
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(1, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(jVCParserTokenManager0);
      
      Token token0 = jVCParserTokenManager0.getNextToken();
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(2, simpleCharStream0.getColumn());
      assertEquals(2, simpleCharStream0.getEndColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(2, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getEndLine());
      assertEquals(0, simpleCharStream0.getLine());
      assertEquals("\u0000", token0.toString());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.bufpos);
      assertEquals(0, token0.beginLine);
      assertEquals(16, token0.kind);
      assertEquals(2, token0.endColumn);
      assertEquals(2, token0.beginColumn);
      assertEquals(0, token0.endLine);
      assertNotNull(token0);
      
      byteArrayInputStream0.close();
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(0, byteArrayInputStream0.available());
      
      long long0 = byteArrayInputStream0.skip((byte)2);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(0L, long0);
      assertEquals(0, byteArrayInputStream0.available());
      
      char[] charArray0 = new char[3];
      charArray0[1] = '\u008E';
      charArray0[2] = '\u0000';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u008E', '\u0000'}, charArray0);
      assertNotNull(charArrayReader0);
      
      byteArrayInputStream0.close();
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(0, byteArrayInputStream0.available());
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "\u0000");
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      SimpleCharStream simpleCharStream1 = new SimpleCharStream(charArrayReader0);
      assertFalse(simpleCharStream1.equals((Object)simpleCharStream0));
      assertArrayEquals(new char[] {'\u0000', '\u008E', '\u0000'}, charArray0);
      assertEquals(0, simpleCharStream1.getBeginLine());
      assertEquals(0, simpleCharStream1.getBeginColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream1.bufpos);
      assertNotNull(simpleCharStream1);
      
      Token token1 = jVCParserTokenManager0.getNextToken();
      assertFalse(simpleCharStream0.equals((Object)simpleCharStream1));
      assertFalse(token1.equals((Object)token0));
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(2, simpleCharStream0.getColumn());
      assertEquals(2, simpleCharStream0.getEndColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(2, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getEndLine());
      assertEquals(0, simpleCharStream0.getLine());
      assertEquals("", token1.toString());
      assertNotSame(simpleCharStream0, simpleCharStream1);
      assertNotSame(token1, token0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.bufpos);
      assertEquals(2, token1.beginColumn);
      assertEquals(2, token1.endColumn);
      assertEquals(0, token1.endLine);
      assertEquals(0, token1.beginLine);
      assertEquals(0, token1.kind);
      assertNotNull(token1);
      
      jVCParserTokenManager0.ReInit(simpleCharStream0, 0);
      assertFalse(simpleCharStream0.equals((Object)simpleCharStream1));
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(2, simpleCharStream0.getColumn());
      assertEquals(2, simpleCharStream0.getEndColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(2, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getEndLine());
      assertEquals(0, simpleCharStream0.getLine());
      assertNotSame(simpleCharStream0, simpleCharStream1);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.bufpos);
      
      SimpleCharStream simpleCharStream2 = new SimpleCharStream(charArrayReader0);
      assertFalse(simpleCharStream2.equals((Object)simpleCharStream1));
      assertFalse(simpleCharStream2.equals((Object)simpleCharStream0));
      assertArrayEquals(new char[] {'\u0000', '\u008E', '\u0000'}, charArray0);
      assertEquals(0, simpleCharStream2.getBeginLine());
      assertEquals(0, simpleCharStream2.getBeginColumn());
      assertEquals((-1), simpleCharStream2.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream2);
      
      JVCParserTokenManager jVCParserTokenManager1 = new JVCParserTokenManager(simpleCharStream2, 2);
      assertFalse(simpleCharStream2.equals((Object)simpleCharStream1));
      assertFalse(simpleCharStream2.equals((Object)simpleCharStream0));
      assertFalse(jVCParserTokenManager1.equals((Object)jVCParserTokenManager0));
      assertArrayEquals(new char[] {'\u0000', '\u008E', '\u0000'}, charArray0);
      assertEquals(0, simpleCharStream2.getBeginLine());
      assertEquals(0, simpleCharStream2.getBeginColumn());
      assertEquals((-1), simpleCharStream2.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(jVCParserTokenManager1);
      
      token1.endColumn = 2;
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(2, simpleCharStream0.getColumn());
      assertEquals(2, simpleCharStream0.getEndColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(2, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getEndLine());
      assertEquals(0, simpleCharStream0.getLine());
      assertEquals("", token1.toString());
      
      boolean boolean2 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertFalse(boolean2);
      
      Token token2 = jVCParserTokenManager1.getNextToken();
      assertFalse(simpleCharStream2.equals((Object)simpleCharStream1));
      assertFalse(simpleCharStream2.equals((Object)simpleCharStream0));
      assertFalse(jVCParserTokenManager1.equals((Object)jVCParserTokenManager0));
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
      assertArrayEquals(new char[] {'\u0000', '\u008E', '\u0000'}, charArray0);
      assertEquals(1, simpleCharStream2.getEndColumn());
      assertEquals(1, simpleCharStream2.getBeginLine());
      assertEquals(1, simpleCharStream2.getEndLine());
      assertEquals(1, simpleCharStream2.getBeginColumn());
      assertEquals(1, simpleCharStream2.getColumn());
      assertEquals(1, simpleCharStream2.getLine());
      assertEquals("\u0000", token2.toString());
      assertNotSame(simpleCharStream2, simpleCharStream1);
      assertNotSame(simpleCharStream2, simpleCharStream0);
      assertNotSame(jVCParserTokenManager1, jVCParserTokenManager0);
      assertNotSame(token2, token0);
      assertNotSame(token2, token1);
      assertEquals(0, simpleCharStream2.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(16, token2.kind);
      assertEquals(1, token2.beginLine);
      assertEquals(1, token2.beginColumn);
      assertEquals(1, token2.endColumn);
      assertEquals(1, token2.endLine);
      assertNotNull(token2);
      
      boolean boolean3 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "\u0000");
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3);
      
      Token token3 = jVCParserTokenManager1.getNextToken();
      assertFalse(simpleCharStream2.equals((Object)simpleCharStream1));
      assertFalse(simpleCharStream2.equals((Object)simpleCharStream0));
      assertFalse(jVCParserTokenManager1.equals((Object)jVCParserTokenManager0));
      assertFalse(token3.equals((Object)token2));
      assertFalse(token3.equals((Object)token0));
      assertFalse(token3.equals((Object)token1));
      assertArrayEquals(new char[] {'\u0000', '\u008E', '\u0000'}, charArray0);
      assertEquals(2, simpleCharStream2.getEndColumn());
      assertEquals(1, simpleCharStream2.getBeginLine());
      assertEquals(1, simpleCharStream2.getEndLine());
      assertEquals(2, simpleCharStream2.getColumn());
      assertEquals(2, simpleCharStream2.getBeginColumn());
      assertEquals(1, simpleCharStream2.getLine());
      assertEquals("\u008E", token3.toString());
      assertNotSame(simpleCharStream2, simpleCharStream1);
      assertNotSame(simpleCharStream2, simpleCharStream0);
      assertNotSame(jVCParserTokenManager1, jVCParserTokenManager0);
      assertNotSame(token3, token2);
      assertNotSame(token3, token0);
      assertNotSame(token3, token1);
      assertEquals(1, simpleCharStream2.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(2, token3.endColumn);
      assertEquals(1, token3.beginLine);
      assertEquals(16, token3.kind);
      assertEquals(2, token3.beginColumn);
      assertEquals(1, token3.endLine);
      assertNotNull(token3);
      
      PipedReader pipedReader0 = new PipedReader();
      assertNotNull(pipedReader0);
      
      // Undeclared exception!
      try { 
        pipedReader0.skip((-2516L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // skip value is negative
         //
         verifyException("java.io.Reader", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "J7\"8NVb|9TQ");
      assertFalse(boolean0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = ']';
      charArray0[1] = ']';
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "\t");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      charArray0[2] = ']';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {']', ']', ']', '\u0000'}, charArray0);
      assertNotNull(charArrayReader0);
      
      boolean boolean2 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(charArrayReader0);
      assertArrayEquals(new char[] {']', ']', ']', '\u0000'}, charArray0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(simpleCharStream0);
      
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0);
      assertArrayEquals(new char[] {']', ']', ']', '\u0000'}, charArray0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(jVCParserTokenManager0);
      
      Token token0 = jVCParserTokenManager0.getNextToken();
      assertArrayEquals(new char[] {']', ']', ']', '\u0000'}, charArray0);
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(2, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(2, simpleCharStream0.getEndColumn());
      assertEquals("]]", token0.toString());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, simpleCharStream0.bufpos);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(9, token0.kind);
      assertEquals(2, token0.endColumn);
      assertNotNull(token0);
      
      Token token1 = jVCParserTokenManager0.jjFillToken();
      assertFalse(token1.equals((Object)token0));
      assertArrayEquals(new char[] {']', ']', ']', '\u0000'}, charArray0);
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(2, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(2, simpleCharStream0.getEndColumn());
      assertEquals("]]", token1.toString());
      assertNotSame(token1, token0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, simpleCharStream0.bufpos);
      assertEquals(2, token1.endColumn);
      assertEquals(1, token1.beginColumn);
      assertEquals(1, token1.beginLine);
      assertEquals(1, token1.endLine);
      assertEquals(9, token1.kind);
      assertNotNull(token1);
      
      Token token2 = jVCParserTokenManager0.jjFillToken();
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
      assertArrayEquals(new char[] {']', ']', ']', '\u0000'}, charArray0);
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(2, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(2, simpleCharStream0.getEndColumn());
      assertEquals("]]", token2.toString());
      assertNotSame(token2, token0);
      assertNotSame(token2, token1);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, simpleCharStream0.bufpos);
      assertEquals(1, token2.endLine);
      assertEquals(9, token2.kind);
      assertEquals(2, token2.endColumn);
      assertEquals(1, token2.beginColumn);
      assertEquals(1, token2.beginLine);
      assertNotNull(token2);
      
      Token token3 = jVCParserTokenManager0.jjFillToken();
      assertFalse(token3.equals((Object)token2));
      assertFalse(token3.equals((Object)token0));
      assertFalse(token3.equals((Object)token1));
      assertArrayEquals(new char[] {']', ']', ']', '\u0000'}, charArray0);
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(2, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(2, simpleCharStream0.getEndColumn());
      assertEquals("]]", token3.toString());
      assertNotSame(token3, token2);
      assertNotSame(token3, token0);
      assertNotSame(token3, token1);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, simpleCharStream0.bufpos);
      assertEquals(2, token3.endColumn);
      assertEquals(1, token3.beginLine);
      assertEquals(1, token3.endLine);
      assertEquals(9, token3.kind);
      assertEquals(1, token3.beginColumn);
      assertNotNull(token3);
      
      // Undeclared exception!
      try { 
        jVCParserTokenManager0.ReInit(simpleCharStream0, 126);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 126. State unchanged.
         //
         verifyException("com.pmdesigns.jvc.tools.JVCParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(1, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      
      byteArrayInputStream0.close();
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(1, byteArrayInputStream0.available());
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'V';
      charArray0[1] = '\u0085';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'V', '\u0085', '\u0000'}, charArray0);
      assertNotNull(charArrayReader0);
      
      byteArrayInputStream0.close();
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(1, byteArrayInputStream0.available());
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(charArrayReader0);
      assertArrayEquals(new char[] {'V', '\u0085', '\u0000'}, charArray0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream0);
      
      SimpleCharStream simpleCharStream1 = new SimpleCharStream(charArrayReader0);
      assertFalse(simpleCharStream1.equals((Object)simpleCharStream0));
      assertArrayEquals(new char[] {'V', '\u0085', '\u0000'}, charArray0);
      assertEquals(0, simpleCharStream1.getBeginLine());
      assertEquals(0, simpleCharStream1.getBeginColumn());
      assertEquals((-1), simpleCharStream1.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream1);
      
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream1);
      assertFalse(simpleCharStream1.equals((Object)simpleCharStream0));
      assertArrayEquals(new char[] {'V', '\u0085', '\u0000'}, charArray0);
      assertEquals(0, simpleCharStream1.getBeginLine());
      assertEquals(0, simpleCharStream1.getBeginColumn());
      assertEquals((-1), simpleCharStream1.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(jVCParserTokenManager0);
      
      Token token0 = jVCParserTokenManager0.getNextToken();
      assertFalse(simpleCharStream1.equals((Object)simpleCharStream0));
      assertArrayEquals(new char[] {'V', '\u0085', '\u0000'}, charArray0);
      assertEquals(1, simpleCharStream1.getEndLine());
      assertEquals(1, simpleCharStream1.getEndColumn());
      assertEquals(1, simpleCharStream1.getLine());
      assertEquals(1, simpleCharStream1.getColumn());
      assertEquals(1, simpleCharStream1.getBeginLine());
      assertEquals(1, simpleCharStream1.getBeginColumn());
      assertEquals("V", token0.toString());
      assertNotSame(simpleCharStream1, simpleCharStream0);
      assertEquals(0, simpleCharStream1.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.endLine);
      assertEquals(16, token0.kind);
      assertEquals(1, token0.beginLine);
      assertNotNull(token0);
      
      Token token1 = jVCParserTokenManager0.getNextToken();
      assertFalse(simpleCharStream1.equals((Object)simpleCharStream0));
      assertFalse(token1.equals((Object)token0));
      assertArrayEquals(new char[] {'V', '\u0085', '\u0000'}, charArray0);
      assertEquals(1, simpleCharStream1.getEndLine());
      assertEquals(1, simpleCharStream1.getLine());
      assertEquals(2, simpleCharStream1.getEndColumn());
      assertEquals(1, simpleCharStream1.getBeginLine());
      assertEquals(2, simpleCharStream1.getColumn());
      assertEquals(2, simpleCharStream1.getBeginColumn());
      assertEquals("\u0085", token1.toString());
      assertNotSame(simpleCharStream1, simpleCharStream0);
      assertNotSame(token1, token0);
      assertEquals(1, simpleCharStream1.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(16, token1.kind);
      assertEquals(1, token1.beginLine);
      assertEquals(2, token1.beginColumn);
      assertEquals(1, token1.endLine);
      assertEquals(2, token1.endColumn);
      assertNotNull(token1);
      
      JVCParserTokenManager jVCParserTokenManager1 = new JVCParserTokenManager(simpleCharStream1);
      assertFalse(simpleCharStream1.equals((Object)simpleCharStream0));
      assertFalse(jVCParserTokenManager1.equals((Object)jVCParserTokenManager0));
      assertArrayEquals(new char[] {'V', '\u0085', '\u0000'}, charArray0);
      assertEquals(1, simpleCharStream1.getEndLine());
      assertEquals(1, simpleCharStream1.getLine());
      assertEquals(2, simpleCharStream1.getEndColumn());
      assertEquals(1, simpleCharStream1.getBeginLine());
      assertEquals(2, simpleCharStream1.getColumn());
      assertEquals(2, simpleCharStream1.getBeginColumn());
      assertEquals(1, simpleCharStream1.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(jVCParserTokenManager1);
      
      simpleCharStream1.available = 34;
      assertEquals(1, simpleCharStream1.getEndLine());
      assertEquals(1, simpleCharStream1.getLine());
      assertEquals(2, simpleCharStream1.getEndColumn());
      assertEquals(1, simpleCharStream1.getBeginLine());
      assertEquals(2, simpleCharStream1.getColumn());
      assertEquals(2, simpleCharStream1.getBeginColumn());
      
      JVCParserTokenManager jVCParserTokenManager2 = new JVCParserTokenManager(simpleCharStream0, 1);
      assertFalse(simpleCharStream0.equals((Object)simpleCharStream1));
      assertFalse(jVCParserTokenManager2.equals((Object)jVCParserTokenManager1));
      assertFalse(jVCParserTokenManager2.equals((Object)jVCParserTokenManager0));
      assertArrayEquals(new char[] {'V', '\u0085', '\u0000'}, charArray0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(jVCParserTokenManager2);
      
      Token token2 = jVCParserTokenManager0.jjFillToken();
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
      assertFalse(simpleCharStream1.equals((Object)simpleCharStream0));
      assertFalse(jVCParserTokenManager0.equals((Object)jVCParserTokenManager2));
      assertFalse(jVCParserTokenManager0.equals((Object)jVCParserTokenManager1));
      assertArrayEquals(new char[] {'V', '\u0085', '\u0000'}, charArray0);
      assertEquals("\u0085", token2.toString());
      assertEquals(1, simpleCharStream1.getEndLine());
      assertEquals(1, simpleCharStream1.getLine());
      assertEquals(2, simpleCharStream1.getEndColumn());
      assertEquals(1, simpleCharStream1.getBeginLine());
      assertEquals(2, simpleCharStream1.getColumn());
      assertEquals(2, simpleCharStream1.getBeginColumn());
      assertNotSame(token2, token0);
      assertNotSame(token2, token1);
      assertNotSame(simpleCharStream1, simpleCharStream0);
      assertNotSame(jVCParserTokenManager0, jVCParserTokenManager2);
      assertNotSame(jVCParserTokenManager0, jVCParserTokenManager1);
      assertEquals(1, token2.endLine);
      assertEquals(16, token2.kind);
      assertEquals(1, token2.beginLine);
      assertEquals(2, token2.beginColumn);
      assertEquals(2, token2.endColumn);
      assertEquals(1, simpleCharStream1.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(token2);
      
      // Undeclared exception!
      try { 
        jVCParserTokenManager2.jjFillToken();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = '[';
      charArray0[1] = '[';
      charArray0[2] = '[';
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "[[=");
      assertFalse(boolean0);
      
      charArray0[3] = '[';
      charArray0[4] = '[';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'[', '[', '[', '[', '[', '\u0000', '\u0000'}, charArray0);
      assertNotNull(charArrayReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(charArrayReader0, 13, 13);
      assertArrayEquals(new char[] {'[', '[', '[', '[', '[', '\u0000', '\u0000'}, charArray0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream0);
      
      char char0 = simpleCharStream0.BeginToken();
      assertArrayEquals(new char[] {'[', '[', '[', '[', '[', '\u0000', '\u0000'}, charArray0);
      assertEquals('[', char0);
      assertEquals(13, simpleCharStream0.getEndColumn());
      assertEquals(13, simpleCharStream0.getLine());
      assertEquals(13, simpleCharStream0.getBeginColumn());
      assertEquals(13, simpleCharStream0.getEndLine());
      assertEquals(13, simpleCharStream0.getBeginLine());
      assertEquals(13, simpleCharStream0.getColumn());
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0);
      assertArrayEquals(new char[] {'[', '[', '[', '[', '[', '\u0000', '\u0000'}, charArray0);
      assertEquals(13, simpleCharStream0.getEndColumn());
      assertEquals(13, simpleCharStream0.getLine());
      assertEquals(13, simpleCharStream0.getBeginColumn());
      assertEquals(13, simpleCharStream0.getEndLine());
      assertEquals(13, simpleCharStream0.getBeginLine());
      assertEquals(13, simpleCharStream0.getColumn());
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(jVCParserTokenManager0);
      
      Token token0 = jVCParserTokenManager0.getNextToken();
      assertArrayEquals(new char[] {'[', '[', '[', '[', '[', '\u0000', '\u0000'}, charArray0);
      assertEquals(13, simpleCharStream0.getLine());
      assertEquals(15, simpleCharStream0.getEndColumn());
      assertEquals(14, simpleCharStream0.getBeginColumn());
      assertEquals(13, simpleCharStream0.getEndLine());
      assertEquals(13, simpleCharStream0.getBeginLine());
      assertEquals(15, simpleCharStream0.getColumn());
      assertEquals("[[", token0.toString());
      assertEquals(2, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(15, token0.endColumn);
      assertEquals(13, token0.beginLine);
      assertEquals(14, token0.beginColumn);
      assertEquals(13, token0.endLine);
      assertEquals(1, token0.kind);
      assertNotNull(token0);
      
      CharArrayReader charArrayReader1 = new CharArrayReader(charArray0);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertArrayEquals(new char[] {'[', '[', '[', '[', '[', '\u0000', '\u0000'}, charArray0);
      assertNotNull(charArrayReader1);
      
      token0.beginColumn = (int) '[';
      assertEquals(13, simpleCharStream0.getLine());
      assertEquals(15, simpleCharStream0.getEndColumn());
      assertEquals(14, simpleCharStream0.getBeginColumn());
      assertEquals(13, simpleCharStream0.getEndLine());
      assertEquals(13, simpleCharStream0.getBeginLine());
      assertEquals(15, simpleCharStream0.getColumn());
      assertEquals("[[", token0.toString());
      
      SimpleCharStream simpleCharStream1 = new SimpleCharStream(charArrayReader0, 13, 15);
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertFalse(simpleCharStream1.equals((Object)simpleCharStream0));
      assertArrayEquals(new char[] {'[', '[', '[', '[', '[', '\u0000', '\u0000'}, charArray0);
      assertEquals(0, simpleCharStream1.getBeginLine());
      assertEquals(0, simpleCharStream1.getBeginColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream1.bufpos);
      assertNotNull(simpleCharStream1);
      
      JVCParserTokenManager jVCParserTokenManager1 = new JVCParserTokenManager(simpleCharStream1);
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertFalse(simpleCharStream1.equals((Object)simpleCharStream0));
      assertFalse(jVCParserTokenManager1.equals((Object)jVCParserTokenManager0));
      assertArrayEquals(new char[] {'[', '[', '[', '[', '[', '\u0000', '\u0000'}, charArray0);
      assertEquals(0, simpleCharStream1.getBeginLine());
      assertEquals(0, simpleCharStream1.getBeginColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream1.bufpos);
      assertNotNull(jVCParserTokenManager1);
      
      jVCParserTokenManager0.setDebugStream(jVCParserTokenManager1.debugStream);
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertFalse(simpleCharStream0.equals((Object)simpleCharStream1));
      assertFalse(jVCParserTokenManager0.equals((Object)jVCParserTokenManager1));
      assertFalse(simpleCharStream1.equals((Object)simpleCharStream0));
      assertFalse(jVCParserTokenManager1.equals((Object)jVCParserTokenManager0));
      assertArrayEquals(new char[] {'[', '[', '[', '[', '[', '\u0000', '\u0000'}, charArray0);
      assertEquals(13, simpleCharStream0.getLine());
      assertEquals(15, simpleCharStream0.getEndColumn());
      assertEquals(14, simpleCharStream0.getBeginColumn());
      assertEquals(13, simpleCharStream0.getEndLine());
      assertEquals(13, simpleCharStream0.getBeginLine());
      assertEquals(15, simpleCharStream0.getColumn());
      assertEquals(0, simpleCharStream1.getBeginLine());
      assertEquals(0, simpleCharStream1.getBeginColumn());
      assertNotSame(charArrayReader0, charArrayReader1);
      assertNotSame(simpleCharStream0, simpleCharStream1);
      assertNotSame(jVCParserTokenManager0, jVCParserTokenManager1);
      assertNotSame(simpleCharStream1, simpleCharStream0);
      assertNotSame(jVCParserTokenManager1, jVCParserTokenManager0);
      assertEquals(2, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream1.bufpos);
      
      charArrayReader0.mark(68);
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertArrayEquals(new char[] {'[', '[', '[', '[', '[', '\u0000', '\u0000'}, charArray0);
      assertNotSame(charArrayReader0, charArrayReader1);
      
      Token token1 = jVCParserTokenManager0.getNextToken();
      assertFalse(token1.equals((Object)token0));
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertFalse(simpleCharStream0.equals((Object)simpleCharStream1));
      assertFalse(jVCParserTokenManager0.equals((Object)jVCParserTokenManager1));
      assertArrayEquals(new char[] {'[', '[', '[', '[', '[', '\u0000', '\u0000'}, charArray0);
      assertEquals("[[", token1.toString());
      assertEquals(13, simpleCharStream0.getLine());
      assertEquals(17, simpleCharStream0.getEndColumn());
      assertEquals(16, simpleCharStream0.getBeginColumn());
      assertEquals(17, simpleCharStream0.getColumn());
      assertEquals(13, simpleCharStream0.getEndLine());
      assertEquals(13, simpleCharStream0.getBeginLine());
      assertNotSame(token1, token0);
      assertNotSame(charArrayReader0, charArrayReader1);
      assertNotSame(simpleCharStream0, simpleCharStream1);
      assertNotSame(jVCParserTokenManager0, jVCParserTokenManager1);
      assertEquals(1, token1.kind);
      assertEquals(16, token1.beginColumn);
      assertEquals(13, token1.endLine);
      assertEquals(13, token1.beginLine);
      assertEquals(17, token1.endColumn);
      assertEquals(4, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(token1);
      
      Token token2 = jVCParserTokenManager0.jjFillToken();
      assertFalse(token2.equals((Object)token1));
      assertFalse(token2.equals((Object)token0));
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertFalse(simpleCharStream0.equals((Object)simpleCharStream1));
      assertFalse(jVCParserTokenManager0.equals((Object)jVCParserTokenManager1));
      assertArrayEquals(new char[] {'[', '[', '[', '[', '[', '\u0000', '\u0000'}, charArray0);
      assertEquals("[[", token2.toString());
      assertEquals(13, simpleCharStream0.getLine());
      assertEquals(17, simpleCharStream0.getEndColumn());
      assertEquals(16, simpleCharStream0.getBeginColumn());
      assertEquals(17, simpleCharStream0.getColumn());
      assertEquals(13, simpleCharStream0.getEndLine());
      assertEquals(13, simpleCharStream0.getBeginLine());
      assertNotSame(token2, token1);
      assertNotSame(token2, token0);
      assertNotSame(charArrayReader0, charArrayReader1);
      assertNotSame(simpleCharStream0, simpleCharStream1);
      assertNotSame(jVCParserTokenManager0, jVCParserTokenManager1);
      assertEquals(16, token2.beginColumn);
      assertEquals(1, token2.kind);
      assertEquals(13, token2.endLine);
      assertEquals(13, token2.beginLine);
      assertEquals(17, token2.endColumn);
      assertEquals(4, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(token2);
      
      jVCParserTokenManager0.SwitchTo(3);
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertFalse(simpleCharStream0.equals((Object)simpleCharStream1));
      assertFalse(jVCParserTokenManager0.equals((Object)jVCParserTokenManager1));
      assertArrayEquals(new char[] {'[', '[', '[', '[', '[', '\u0000', '\u0000'}, charArray0);
      assertEquals(13, simpleCharStream0.getLine());
      assertEquals(17, simpleCharStream0.getEndColumn());
      assertEquals(16, simpleCharStream0.getBeginColumn());
      assertEquals(17, simpleCharStream0.getColumn());
      assertEquals(13, simpleCharStream0.getEndLine());
      assertEquals(13, simpleCharStream0.getBeginLine());
      assertNotSame(charArrayReader0, charArrayReader1);
      assertNotSame(simpleCharStream0, simpleCharStream1);
      assertNotSame(jVCParserTokenManager0, jVCParserTokenManager1);
      assertEquals(4, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      Token token3 = jVCParserTokenManager0.getNextToken();
      assertFalse(token3.equals((Object)token1));
      assertFalse(token3.equals((Object)token0));
      assertFalse(token3.equals((Object)token2));
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertFalse(simpleCharStream0.equals((Object)simpleCharStream1));
      assertFalse(jVCParserTokenManager0.equals((Object)jVCParserTokenManager1));
      assertArrayEquals(new char[] {'[', '[', '[', '[', '[', '\u0000', '\u0000'}, charArray0);
      assertEquals("\u0000", token3.toString());
      assertEquals(13, simpleCharStream0.getLine());
      assertEquals(18, simpleCharStream0.getEndColumn());
      assertEquals(13, simpleCharStream0.getEndLine());
      assertEquals(18, simpleCharStream0.getColumn());
      assertEquals(18, simpleCharStream0.getBeginColumn());
      assertEquals(13, simpleCharStream0.getBeginLine());
      assertNotSame(token3, token1);
      assertNotSame(token3, token0);
      assertNotSame(token3, token2);
      assertNotSame(charArrayReader0, charArrayReader1);
      assertNotSame(simpleCharStream0, simpleCharStream1);
      assertNotSame(jVCParserTokenManager0, jVCParserTokenManager1);
      assertEquals(13, token3.endLine);
      assertEquals(18, token3.endColumn);
      assertEquals(13, token3.beginLine);
      assertEquals(18, token3.beginColumn);
      assertEquals(16, token3.kind);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(5, simpleCharStream0.bufpos);
      assertNotNull(token3);
      
      PipedInputStream pipedInputStream0 = null;
      try {
        pipedInputStream0 = new PipedInputStream((PipedOutputStream) null, 91);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = ']';
      charArray0[1] = ']';
      charArray0[2] = ']';
      charArray0[3] = ']';
      charArray0[4] = ']';
      charArray0[1] = ']';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {']', ']', ']', ']', ']', '\u0000', '\u0000'}, charArray0);
      assertNotNull(charArrayReader0);
      
      int int0 = 12;
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(charArrayReader0, 12, 12);
      assertArrayEquals(new char[] {']', ']', ']', ']', ']', '\u0000', '\u0000'}, charArray0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream0);
      
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0);
      assertArrayEquals(new char[] {']', ']', ']', ']', ']', '\u0000', '\u0000'}, charArray0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(jVCParserTokenManager0);
      
      Token token0 = jVCParserTokenManager0.getNextToken();
      assertArrayEquals(new char[] {']', ']', ']', ']', ']', '\u0000', '\u0000'}, charArray0);
      assertEquals(12, simpleCharStream0.getLine());
      assertEquals(13, simpleCharStream0.getEndColumn());
      assertEquals(12, simpleCharStream0.getBeginLine());
      assertEquals(12, simpleCharStream0.getBeginColumn());
      assertEquals(12, simpleCharStream0.getEndLine());
      assertEquals(13, simpleCharStream0.getColumn());
      assertEquals("]]", token0.toString());
      assertEquals(1, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(12, token0.beginColumn);
      assertEquals(9, token0.kind);
      assertEquals(12, token0.beginLine);
      assertEquals(12, token0.endLine);
      assertEquals(13, token0.endColumn);
      assertNotNull(token0);
      
      CharArrayReader charArrayReader1 = new CharArrayReader(charArray0);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertArrayEquals(new char[] {']', ']', ']', ']', ']', '\u0000', '\u0000'}, charArray0);
      assertNotNull(charArrayReader1);
      
      SimpleCharStream simpleCharStream1 = new SimpleCharStream(charArrayReader1);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertFalse(simpleCharStream1.equals((Object)simpleCharStream0));
      assertArrayEquals(new char[] {']', ']', ']', ']', ']', '\u0000', '\u0000'}, charArray0);
      assertEquals(0, simpleCharStream1.getBeginLine());
      assertEquals(0, simpleCharStream1.getBeginColumn());
      assertEquals((-1), simpleCharStream1.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream1);
      
      JVCParserTokenManager jVCParserTokenManager1 = new JVCParserTokenManager(simpleCharStream1);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertFalse(simpleCharStream1.equals((Object)simpleCharStream0));
      assertFalse(jVCParserTokenManager1.equals((Object)jVCParserTokenManager0));
      assertArrayEquals(new char[] {']', ']', ']', ']', ']', '\u0000', '\u0000'}, charArray0);
      assertEquals(0, simpleCharStream1.getBeginLine());
      assertEquals(0, simpleCharStream1.getBeginColumn());
      assertEquals((-1), simpleCharStream1.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(jVCParserTokenManager1);
      
      JVCParserTokenManager jVCParserTokenManager2 = new JVCParserTokenManager(simpleCharStream1);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertFalse(simpleCharStream1.equals((Object)simpleCharStream0));
      assertFalse(jVCParserTokenManager2.equals((Object)jVCParserTokenManager1));
      assertFalse(jVCParserTokenManager2.equals((Object)jVCParserTokenManager0));
      assertArrayEquals(new char[] {']', ']', ']', ']', ']', '\u0000', '\u0000'}, charArray0);
      assertEquals(0, simpleCharStream1.getBeginLine());
      assertEquals(0, simpleCharStream1.getBeginColumn());
      assertEquals((-1), simpleCharStream1.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(jVCParserTokenManager2);
      
      Token token1 = jVCParserTokenManager2.getNextToken();
      assertFalse(token1.equals((Object)token0));
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertFalse(simpleCharStream1.equals((Object)simpleCharStream0));
      assertFalse(jVCParserTokenManager2.equals((Object)jVCParserTokenManager1));
      assertFalse(jVCParserTokenManager2.equals((Object)jVCParserTokenManager0));
      assertArrayEquals(new char[] {']', ']', ']', ']', ']', '\u0000', '\u0000'}, charArray0);
      assertEquals("]]", token1.toString());
      assertEquals(2, simpleCharStream1.getColumn());
      assertEquals(1, simpleCharStream1.getEndLine());
      assertEquals(1, simpleCharStream1.getLine());
      assertEquals(1, simpleCharStream1.getBeginLine());
      assertEquals(1, simpleCharStream1.getBeginColumn());
      assertEquals(2, simpleCharStream1.getEndColumn());
      assertNotSame(token1, token0);
      assertNotSame(charArrayReader1, charArrayReader0);
      assertNotSame(simpleCharStream1, simpleCharStream0);
      assertNotSame(jVCParserTokenManager2, jVCParserTokenManager1);
      assertNotSame(jVCParserTokenManager2, jVCParserTokenManager0);
      assertEquals(1, token1.beginLine);
      assertEquals(1, token1.endLine);
      assertEquals(1, token1.beginColumn);
      assertEquals(9, token1.kind);
      assertEquals(2, token1.endColumn);
      assertEquals(1, simpleCharStream1.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(token1);
      
      jVCParserTokenManager2.ReInit(simpleCharStream0, 1);
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertFalse(simpleCharStream0.equals((Object)simpleCharStream1));
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertFalse(simpleCharStream1.equals((Object)simpleCharStream0));
      assertFalse(jVCParserTokenManager2.equals((Object)jVCParserTokenManager1));
      assertFalse(jVCParserTokenManager2.equals((Object)jVCParserTokenManager0));
      assertArrayEquals(new char[] {']', ']', ']', ']', ']', '\u0000', '\u0000'}, charArray0);
      assertEquals(12, simpleCharStream0.getLine());
      assertEquals(13, simpleCharStream0.getEndColumn());
      assertEquals(12, simpleCharStream0.getBeginLine());
      assertEquals(12, simpleCharStream0.getBeginColumn());
      assertEquals(12, simpleCharStream0.getEndLine());
      assertEquals(13, simpleCharStream0.getColumn());
      assertEquals(2, simpleCharStream1.getColumn());
      assertEquals(1, simpleCharStream1.getEndLine());
      assertEquals(1, simpleCharStream1.getLine());
      assertEquals(1, simpleCharStream1.getBeginLine());
      assertEquals(1, simpleCharStream1.getBeginColumn());
      assertEquals(2, simpleCharStream1.getEndColumn());
      assertNotSame(charArrayReader0, charArrayReader1);
      assertNotSame(simpleCharStream0, simpleCharStream1);
      assertNotSame(charArrayReader1, charArrayReader0);
      assertNotSame(simpleCharStream1, simpleCharStream0);
      assertNotSame(jVCParserTokenManager2, jVCParserTokenManager1);
      assertNotSame(jVCParserTokenManager2, jVCParserTokenManager0);
      assertEquals(1, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, simpleCharStream1.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      Token token2 = jVCParserTokenManager2.getNextToken();
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertFalse(simpleCharStream1.equals((Object)simpleCharStream0));
      assertFalse(jVCParserTokenManager2.equals((Object)jVCParserTokenManager1));
      assertFalse(jVCParserTokenManager2.equals((Object)jVCParserTokenManager0));
      assertArrayEquals(new char[] {']', ']', ']', ']', ']', '\u0000', '\u0000'}, charArray0);
      assertEquals("]]", token2.toString());
      assertEquals(2, simpleCharStream1.getColumn());
      assertEquals(1, simpleCharStream1.getEndLine());
      assertEquals(1, simpleCharStream1.getLine());
      assertEquals(1, simpleCharStream1.getBeginLine());
      assertEquals(1, simpleCharStream1.getBeginColumn());
      assertEquals(2, simpleCharStream1.getEndColumn());
      assertNotSame(token2, token0);
      assertNotSame(token2, token1);
      assertNotSame(charArrayReader1, charArrayReader0);
      assertNotSame(simpleCharStream1, simpleCharStream0);
      assertNotSame(jVCParserTokenManager2, jVCParserTokenManager1);
      assertNotSame(jVCParserTokenManager2, jVCParserTokenManager0);
      assertEquals(15, token2.endColumn);
      assertEquals(14, token2.beginColumn);
      assertEquals(9, token2.kind);
      assertEquals(12, token2.endLine);
      assertEquals(12, token2.beginLine);
      assertEquals(1, simpleCharStream1.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(token2);
      
      jVCParserTokenManager1.SwitchTo(3);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertFalse(simpleCharStream1.equals((Object)simpleCharStream0));
      assertFalse(jVCParserTokenManager1.equals((Object)jVCParserTokenManager0));
      assertFalse(jVCParserTokenManager1.equals((Object)jVCParserTokenManager2));
      assertArrayEquals(new char[] {']', ']', ']', ']', ']', '\u0000', '\u0000'}, charArray0);
      assertEquals(2, simpleCharStream1.getColumn());
      assertEquals(1, simpleCharStream1.getEndLine());
      assertEquals(1, simpleCharStream1.getLine());
      assertEquals(1, simpleCharStream1.getBeginLine());
      assertEquals(1, simpleCharStream1.getBeginColumn());
      assertEquals(2, simpleCharStream1.getEndColumn());
      assertNotSame(charArrayReader1, charArrayReader0);
      assertNotSame(simpleCharStream1, simpleCharStream0);
      assertNotSame(jVCParserTokenManager1, jVCParserTokenManager0);
      assertNotSame(jVCParserTokenManager1, jVCParserTokenManager2);
      assertEquals(1, simpleCharStream1.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      Token token3 = jVCParserTokenManager1.getNextToken();
      assertFalse(token3.equals((Object)token2));
      assertFalse(token3.equals((Object)token0));
      assertFalse(token3.equals((Object)token1));
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertFalse(simpleCharStream1.equals((Object)simpleCharStream0));
      assertFalse(jVCParserTokenManager1.equals((Object)jVCParserTokenManager0));
      assertFalse(jVCParserTokenManager1.equals((Object)jVCParserTokenManager2));
      assertArrayEquals(new char[] {']', ']', ']', ']', ']', '\u0000', '\u0000'}, charArray0);
      assertEquals("]]", token3.toString());
      assertEquals(4, simpleCharStream1.getColumn());
      assertEquals(1, simpleCharStream1.getEndLine());
      assertEquals(1, simpleCharStream1.getLine());
      assertEquals(1, simpleCharStream1.getBeginLine());
      assertEquals(3, simpleCharStream1.getBeginColumn());
      assertEquals(4, simpleCharStream1.getEndColumn());
      assertNotSame(token3, token2);
      assertNotSame(token3, token0);
      assertNotSame(token3, token1);
      assertNotSame(charArrayReader1, charArrayReader0);
      assertNotSame(simpleCharStream1, simpleCharStream0);
      assertNotSame(jVCParserTokenManager1, jVCParserTokenManager0);
      assertNotSame(jVCParserTokenManager1, jVCParserTokenManager2);
      assertEquals(4, token3.endColumn);
      assertEquals(1, token3.endLine);
      assertEquals(3, token3.beginColumn);
      assertEquals(1, token3.beginLine);
      assertEquals(9, token3.kind);
      assertEquals(3, simpleCharStream1.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(token3);
      
      SimpleCharStream simpleCharStream2 = new SimpleCharStream(charArrayReader0, 12, 1);
      assertFalse(simpleCharStream2.equals((Object)simpleCharStream1));
      assertFalse(simpleCharStream2.equals((Object)simpleCharStream0));
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertArrayEquals(new char[] {']', ']', ']', ']', ']', '\u0000', '\u0000'}, charArray0);
      assertEquals(0, simpleCharStream2.getBeginLine());
      assertEquals(0, simpleCharStream2.getBeginColumn());
      assertEquals((-1), simpleCharStream2.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream2);
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      assertNotNull(pipedOutputStream0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(jVCParserTokenManager0.debugStream, true);
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertFalse(simpleCharStream0.equals((Object)simpleCharStream2));
      assertFalse(simpleCharStream0.equals((Object)simpleCharStream1));
      assertFalse(jVCParserTokenManager0.equals((Object)jVCParserTokenManager2));
      assertFalse(jVCParserTokenManager0.equals((Object)jVCParserTokenManager1));
      assertArrayEquals(new char[] {']', ']', ']', ']', ']', '\u0000', '\u0000'}, charArray0);
      assertEquals(12, simpleCharStream0.getLine());
      assertEquals(12, simpleCharStream0.getBeginLine());
      assertEquals(14, simpleCharStream0.getBeginColumn());
      assertEquals(12, simpleCharStream0.getEndLine());
      assertEquals(15, simpleCharStream0.getColumn());
      assertEquals(15, simpleCharStream0.getEndColumn());
      assertEquals(3, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(mockPrintStream0);
      
      // Undeclared exception!
      try { 
        mockPrintStream0.append((CharSequence) "]]", 12, 16);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = '[';
      charArray0[1] = '[';
      charArray0[2] = '[';
      charArray0[3] = '[';
      charArray0[4] = '[';
      charArray0[1] = '[';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'[', '[', '[', '[', '[', '\u0000', '\u0000'}, charArray0);
      assertNotNull(charArrayReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(charArrayReader0, 12, 12);
      assertArrayEquals(new char[] {'[', '[', '[', '[', '[', '\u0000', '\u0000'}, charArray0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream0);
      
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0);
      assertArrayEquals(new char[] {'[', '[', '[', '[', '[', '\u0000', '\u0000'}, charArray0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(jVCParserTokenManager0);
      
      Token token0 = jVCParserTokenManager0.getNextToken();
      assertArrayEquals(new char[] {'[', '[', '[', '[', '[', '\u0000', '\u0000'}, charArray0);
      assertEquals(12, simpleCharStream0.getEndLine());
      assertEquals(13, simpleCharStream0.getEndColumn());
      assertEquals(13, simpleCharStream0.getColumn());
      assertEquals(12, simpleCharStream0.getBeginColumn());
      assertEquals(12, simpleCharStream0.getBeginLine());
      assertEquals(12, simpleCharStream0.getLine());
      assertEquals("[[", token0.toString());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, simpleCharStream0.bufpos);
      assertEquals(1, token0.kind);
      assertEquals(13, token0.endColumn);
      assertEquals(12, token0.beginColumn);
      assertEquals(12, token0.beginLine);
      assertEquals(12, token0.endLine);
      assertNotNull(token0);
      
      CharArrayReader charArrayReader1 = new CharArrayReader(charArray0);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertArrayEquals(new char[] {'[', '[', '[', '[', '[', '\u0000', '\u0000'}, charArray0);
      assertNotNull(charArrayReader1);
      
      SimpleCharStream simpleCharStream1 = new SimpleCharStream(charArrayReader1);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertFalse(simpleCharStream1.equals((Object)simpleCharStream0));
      assertArrayEquals(new char[] {'[', '[', '[', '[', '[', '\u0000', '\u0000'}, charArray0);
      assertEquals(0, simpleCharStream1.getBeginLine());
      assertEquals(0, simpleCharStream1.getBeginColumn());
      assertEquals((-1), simpleCharStream1.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream1);
      
      JVCParserTokenManager jVCParserTokenManager1 = new JVCParserTokenManager(simpleCharStream1);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertFalse(simpleCharStream1.equals((Object)simpleCharStream0));
      assertFalse(jVCParserTokenManager1.equals((Object)jVCParserTokenManager0));
      assertArrayEquals(new char[] {'[', '[', '[', '[', '[', '\u0000', '\u0000'}, charArray0);
      assertEquals(0, simpleCharStream1.getBeginLine());
      assertEquals(0, simpleCharStream1.getBeginColumn());
      assertEquals((-1), simpleCharStream1.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(jVCParserTokenManager1);
      
      JVCParserTokenManager jVCParserTokenManager2 = new JVCParserTokenManager(simpleCharStream1);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertFalse(simpleCharStream1.equals((Object)simpleCharStream0));
      assertFalse(jVCParserTokenManager2.equals((Object)jVCParserTokenManager1));
      assertFalse(jVCParserTokenManager2.equals((Object)jVCParserTokenManager0));
      assertArrayEquals(new char[] {'[', '[', '[', '[', '[', '\u0000', '\u0000'}, charArray0);
      assertEquals(0, simpleCharStream1.getBeginLine());
      assertEquals(0, simpleCharStream1.getBeginColumn());
      assertEquals((-1), simpleCharStream1.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(jVCParserTokenManager2);
      
      Token token1 = jVCParserTokenManager2.getNextToken();
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertFalse(simpleCharStream1.equals((Object)simpleCharStream0));
      assertFalse(jVCParserTokenManager2.equals((Object)jVCParserTokenManager1));
      assertFalse(jVCParserTokenManager2.equals((Object)jVCParserTokenManager0));
      assertFalse(token1.equals((Object)token0));
      assertArrayEquals(new char[] {'[', '[', '[', '[', '[', '\u0000', '\u0000'}, charArray0);
      assertEquals(2, simpleCharStream1.getColumn());
      assertEquals(1, simpleCharStream1.getEndLine());
      assertEquals(2, simpleCharStream1.getEndColumn());
      assertEquals(1, simpleCharStream1.getBeginLine());
      assertEquals(1, simpleCharStream1.getBeginColumn());
      assertEquals(1, simpleCharStream1.getLine());
      assertEquals("[[", token1.toString());
      assertNotSame(charArrayReader1, charArrayReader0);
      assertNotSame(simpleCharStream1, simpleCharStream0);
      assertNotSame(jVCParserTokenManager2, jVCParserTokenManager1);
      assertNotSame(jVCParserTokenManager2, jVCParserTokenManager0);
      assertNotSame(token1, token0);
      assertEquals(1, simpleCharStream1.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, token1.beginColumn);
      assertEquals(2, token1.endColumn);
      assertEquals(1, token1.beginLine);
      assertEquals(1, token1.endLine);
      assertEquals(1, token1.kind);
      assertNotNull(token1);
      
      jVCParserTokenManager2.ReInit(simpleCharStream0, 1);
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertFalse(simpleCharStream0.equals((Object)simpleCharStream1));
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertFalse(simpleCharStream1.equals((Object)simpleCharStream0));
      assertFalse(jVCParserTokenManager2.equals((Object)jVCParserTokenManager1));
      assertFalse(jVCParserTokenManager2.equals((Object)jVCParserTokenManager0));
      assertArrayEquals(new char[] {'[', '[', '[', '[', '[', '\u0000', '\u0000'}, charArray0);
      assertEquals(12, simpleCharStream0.getEndLine());
      assertEquals(13, simpleCharStream0.getEndColumn());
      assertEquals(13, simpleCharStream0.getColumn());
      assertEquals(12, simpleCharStream0.getBeginColumn());
      assertEquals(12, simpleCharStream0.getBeginLine());
      assertEquals(12, simpleCharStream0.getLine());
      assertEquals(2, simpleCharStream1.getColumn());
      assertEquals(1, simpleCharStream1.getEndLine());
      assertEquals(2, simpleCharStream1.getEndColumn());
      assertEquals(1, simpleCharStream1.getBeginLine());
      assertEquals(1, simpleCharStream1.getBeginColumn());
      assertEquals(1, simpleCharStream1.getLine());
      assertNotSame(charArrayReader0, charArrayReader1);
      assertNotSame(simpleCharStream0, simpleCharStream1);
      assertNotSame(charArrayReader1, charArrayReader0);
      assertNotSame(simpleCharStream1, simpleCharStream0);
      assertNotSame(jVCParserTokenManager2, jVCParserTokenManager1);
      assertNotSame(jVCParserTokenManager2, jVCParserTokenManager0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, simpleCharStream0.bufpos);
      assertEquals(1, simpleCharStream1.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      Token token2 = jVCParserTokenManager2.getNextToken();
      assertFalse(token2.equals((Object)token1));
      assertFalse(token2.equals((Object)token0));
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertFalse(simpleCharStream1.equals((Object)simpleCharStream0));
      assertFalse(jVCParserTokenManager2.equals((Object)jVCParserTokenManager1));
      assertFalse(jVCParserTokenManager2.equals((Object)jVCParserTokenManager0));
      assertArrayEquals(new char[] {'[', '[', '[', '[', '[', '\u0000', '\u0000'}, charArray0);
      assertEquals("[[", token2.toString());
      assertEquals(2, simpleCharStream1.getColumn());
      assertEquals(1, simpleCharStream1.getEndLine());
      assertEquals(2, simpleCharStream1.getEndColumn());
      assertEquals(1, simpleCharStream1.getBeginLine());
      assertEquals(1, simpleCharStream1.getBeginColumn());
      assertEquals(1, simpleCharStream1.getLine());
      assertNotSame(token2, token1);
      assertNotSame(token2, token0);
      assertNotSame(charArrayReader1, charArrayReader0);
      assertNotSame(simpleCharStream1, simpleCharStream0);
      assertNotSame(jVCParserTokenManager2, jVCParserTokenManager1);
      assertNotSame(jVCParserTokenManager2, jVCParserTokenManager0);
      assertEquals(12, token2.endLine);
      assertEquals(15, token2.endColumn);
      assertEquals(12, token2.beginLine);
      assertEquals(14, token2.beginColumn);
      assertEquals(1, token2.kind);
      assertEquals(1, simpleCharStream1.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(token2);
      
      jVCParserTokenManager1.SwitchTo(3);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertFalse(simpleCharStream1.equals((Object)simpleCharStream0));
      assertFalse(jVCParserTokenManager1.equals((Object)jVCParserTokenManager0));
      assertFalse(jVCParserTokenManager1.equals((Object)jVCParserTokenManager2));
      assertArrayEquals(new char[] {'[', '[', '[', '[', '[', '\u0000', '\u0000'}, charArray0);
      assertEquals(2, simpleCharStream1.getColumn());
      assertEquals(1, simpleCharStream1.getEndLine());
      assertEquals(2, simpleCharStream1.getEndColumn());
      assertEquals(1, simpleCharStream1.getBeginLine());
      assertEquals(1, simpleCharStream1.getBeginColumn());
      assertEquals(1, simpleCharStream1.getLine());
      assertNotSame(charArrayReader1, charArrayReader0);
      assertNotSame(simpleCharStream1, simpleCharStream0);
      assertNotSame(jVCParserTokenManager1, jVCParserTokenManager0);
      assertNotSame(jVCParserTokenManager1, jVCParserTokenManager2);
      assertEquals(1, simpleCharStream1.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      Token token3 = jVCParserTokenManager1.getNextToken();
      assertFalse(token3.equals((Object)token0));
      assertFalse(token3.equals((Object)token1));
      assertFalse(token3.equals((Object)token2));
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertFalse(simpleCharStream1.equals((Object)simpleCharStream0));
      assertFalse(jVCParserTokenManager1.equals((Object)jVCParserTokenManager0));
      assertFalse(jVCParserTokenManager1.equals((Object)jVCParserTokenManager2));
      assertArrayEquals(new char[] {'[', '[', '[', '[', '[', '\u0000', '\u0000'}, charArray0);
      assertEquals("[[", token3.toString());
      assertEquals(4, simpleCharStream1.getColumn());
      assertEquals(1, simpleCharStream1.getEndLine());
      assertEquals(1, simpleCharStream1.getBeginLine());
      assertEquals(4, simpleCharStream1.getEndColumn());
      assertEquals(3, simpleCharStream1.getBeginColumn());
      assertEquals(1, simpleCharStream1.getLine());
      assertNotSame(token3, token0);
      assertNotSame(token3, token1);
      assertNotSame(token3, token2);
      assertNotSame(charArrayReader1, charArrayReader0);
      assertNotSame(simpleCharStream1, simpleCharStream0);
      assertNotSame(jVCParserTokenManager1, jVCParserTokenManager0);
      assertNotSame(jVCParserTokenManager1, jVCParserTokenManager2);
      assertEquals(4, token3.endColumn);
      assertEquals(1, token3.kind);
      assertEquals(3, token3.beginColumn);
      assertEquals(1, token3.beginLine);
      assertEquals(1, token3.endLine);
      assertEquals(3, simpleCharStream1.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(token3);
      
      SimpleCharStream simpleCharStream2 = new SimpleCharStream(charArrayReader0, 12, 1);
      assertFalse(simpleCharStream2.equals((Object)simpleCharStream0));
      assertFalse(simpleCharStream2.equals((Object)simpleCharStream1));
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertArrayEquals(new char[] {'[', '[', '[', '[', '[', '\u0000', '\u0000'}, charArray0);
      assertEquals(0, simpleCharStream2.getBeginColumn());
      assertEquals(0, simpleCharStream2.getBeginLine());
      assertEquals((-1), simpleCharStream2.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream2);
      
      simpleCharStream2.setTabSize('[');
      assertFalse(simpleCharStream2.equals((Object)simpleCharStream0));
      assertFalse(simpleCharStream2.equals((Object)simpleCharStream1));
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertArrayEquals(new char[] {'[', '[', '[', '[', '[', '\u0000', '\u0000'}, charArray0);
      assertEquals(0, simpleCharStream2.getBeginColumn());
      assertEquals(0, simpleCharStream2.getBeginLine());
      assertNotSame(simpleCharStream2, simpleCharStream0);
      assertNotSame(simpleCharStream2, simpleCharStream1);
      assertNotSame(charArrayReader0, charArrayReader1);
      assertEquals((-1), simpleCharStream2.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Token token4 = jVCParserTokenManager1.getNextToken();
      assertFalse(token4.equals((Object)token1));
      assertFalse(token4.equals((Object)token2));
      assertFalse(token4.equals((Object)token0));
      assertFalse(token4.equals((Object)token3));
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertFalse(simpleCharStream1.equals((Object)simpleCharStream0));
      assertFalse(simpleCharStream1.equals((Object)simpleCharStream2));
      assertFalse(jVCParserTokenManager1.equals((Object)jVCParserTokenManager0));
      assertFalse(jVCParserTokenManager1.equals((Object)jVCParserTokenManager2));
      assertArrayEquals(new char[] {'[', '[', '[', '[', '[', '\u0000', '\u0000'}, charArray0);
      assertEquals("[", token4.toString());
      assertEquals(5, simpleCharStream1.getBeginColumn());
      assertEquals(1, simpleCharStream1.getEndLine());
      assertEquals(5, simpleCharStream1.getColumn());
      assertEquals(1, simpleCharStream1.getBeginLine());
      assertEquals(1, simpleCharStream1.getLine());
      assertEquals(5, simpleCharStream1.getEndColumn());
      assertNotSame(token4, token1);
      assertNotSame(token4, token2);
      assertNotSame(token4, token0);
      assertNotSame(token4, token3);
      assertNotSame(charArrayReader1, charArrayReader0);
      assertNotSame(simpleCharStream1, simpleCharStream0);
      assertNotSame(simpleCharStream1, simpleCharStream2);
      assertNotSame(jVCParserTokenManager1, jVCParserTokenManager0);
      assertNotSame(jVCParserTokenManager1, jVCParserTokenManager2);
      assertEquals(1, token4.endLine);
      assertEquals(5, token4.beginColumn);
      assertEquals(5, token4.endColumn);
      assertEquals(16, token4.kind);
      assertEquals(1, token4.beginLine);
      assertEquals(4, simpleCharStream1.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(token4);
      
      jVCParserTokenManager2.SwitchTo(0);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertFalse(simpleCharStream1.equals((Object)simpleCharStream0));
      assertFalse(simpleCharStream1.equals((Object)simpleCharStream2));
      assertFalse(jVCParserTokenManager2.equals((Object)jVCParserTokenManager1));
      assertFalse(jVCParserTokenManager2.equals((Object)jVCParserTokenManager0));
      assertArrayEquals(new char[] {'[', '[', '[', '[', '[', '\u0000', '\u0000'}, charArray0);
      assertEquals(5, simpleCharStream1.getBeginColumn());
      assertEquals(1, simpleCharStream1.getEndLine());
      assertEquals(5, simpleCharStream1.getColumn());
      assertEquals(1, simpleCharStream1.getBeginLine());
      assertEquals(1, simpleCharStream1.getLine());
      assertEquals(5, simpleCharStream1.getEndColumn());
      assertNotSame(charArrayReader1, charArrayReader0);
      assertNotSame(simpleCharStream1, simpleCharStream0);
      assertNotSame(simpleCharStream1, simpleCharStream2);
      assertNotSame(jVCParserTokenManager2, jVCParserTokenManager1);
      assertNotSame(jVCParserTokenManager2, jVCParserTokenManager0);
      assertEquals(4, simpleCharStream1.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      // Undeclared exception!
      try { 
        jVCParserTokenManager0.SwitchTo(2845);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 2845. State unchanged.
         //
         verifyException("com.pmdesigns.jvc.tools.JVCParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = '[';
      charArray0[1] = '[';
      charArray0[2] = '[';
      charArray0[3] = '[';
      charArray0[4] = '[';
      charArray0[6] = '[';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'[', '[', '[', '[', '[', '\u0000', '['}, charArray0);
      assertNotNull(charArrayReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(charArrayReader0, '[', '[');
      assertArrayEquals(new char[] {'[', '[', '[', '[', '[', '\u0000', '['}, charArray0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream0);
      
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0);
      assertArrayEquals(new char[] {'[', '[', '[', '[', '[', '\u0000', '['}, charArray0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(jVCParserTokenManager0);
      
      Token token0 = jVCParserTokenManager0.getNextToken();
      assertArrayEquals(new char[] {'[', '[', '[', '[', '[', '\u0000', '['}, charArray0);
      assertEquals(91, simpleCharStream0.getLine());
      assertEquals(91, simpleCharStream0.getEndLine());
      assertEquals(92, simpleCharStream0.getEndColumn());
      assertEquals(91, simpleCharStream0.getBeginLine());
      assertEquals(92, simpleCharStream0.getColumn());
      assertEquals(91, simpleCharStream0.getBeginColumn());
      assertEquals("[[", token0.toString());
      assertEquals(1, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(92, token0.endColumn);
      assertEquals(91, token0.beginColumn);
      assertEquals(1, token0.kind);
      assertEquals(91, token0.beginLine);
      assertEquals(91, token0.endLine);
      assertNotNull(token0);
      
      CharArrayReader charArrayReader1 = new CharArrayReader(charArray0);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertArrayEquals(new char[] {'[', '[', '[', '[', '[', '\u0000', '['}, charArray0);
      assertNotNull(charArrayReader1);
      
      token0.beginColumn = (int) '[';
      assertEquals(91, simpleCharStream0.getLine());
      assertEquals(91, simpleCharStream0.getEndLine());
      assertEquals(92, simpleCharStream0.getEndColumn());
      assertEquals(91, simpleCharStream0.getBeginLine());
      assertEquals(92, simpleCharStream0.getColumn());
      assertEquals(91, simpleCharStream0.getBeginColumn());
      assertEquals("[[", token0.toString());
      
      SimpleCharStream simpleCharStream1 = new SimpleCharStream(charArrayReader0, '[', 15);
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertFalse(simpleCharStream1.equals((Object)simpleCharStream0));
      assertArrayEquals(new char[] {'[', '[', '[', '[', '[', '\u0000', '['}, charArray0);
      assertEquals(0, simpleCharStream1.getBeginLine());
      assertEquals(0, simpleCharStream1.getBeginColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream1.bufpos);
      assertNotNull(simpleCharStream1);
      
      charArrayReader0.mark(4661);
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertArrayEquals(new char[] {'[', '[', '[', '[', '[', '\u0000', '['}, charArray0);
      assertNotSame(charArrayReader0, charArrayReader1);
      
      jVCParserTokenManager0.setDebugStream(jVCParserTokenManager0.debugStream);
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertFalse(simpleCharStream0.equals((Object)simpleCharStream1));
      assertArrayEquals(new char[] {'[', '[', '[', '[', '[', '\u0000', '['}, charArray0);
      assertEquals(91, simpleCharStream0.getLine());
      assertEquals(91, simpleCharStream0.getEndLine());
      assertEquals(92, simpleCharStream0.getEndColumn());
      assertEquals(91, simpleCharStream0.getBeginLine());
      assertEquals(92, simpleCharStream0.getColumn());
      assertEquals(91, simpleCharStream0.getBeginColumn());
      assertNotSame(charArrayReader0, charArrayReader1);
      assertNotSame(simpleCharStream0, simpleCharStream1);
      assertEquals(1, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      charArrayReader0.mark(68);
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertArrayEquals(new char[] {'[', '[', '[', '[', '[', '\u0000', '['}, charArray0);
      assertNotSame(charArrayReader0, charArrayReader1);
      
      Token token1 = jVCParserTokenManager0.getNextToken();
      assertFalse(token1.equals((Object)token0));
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertFalse(simpleCharStream0.equals((Object)simpleCharStream1));
      assertArrayEquals(new char[] {'[', '[', '[', '[', '[', '\u0000', '['}, charArray0);
      assertEquals("[[", token1.toString());
      assertEquals(91, simpleCharStream0.getLine());
      assertEquals(91, simpleCharStream0.getEndLine());
      assertEquals(91, simpleCharStream0.getBeginLine());
      assertEquals(94, simpleCharStream0.getEndColumn());
      assertEquals(94, simpleCharStream0.getColumn());
      assertEquals(93, simpleCharStream0.getBeginColumn());
      assertNotSame(token1, token0);
      assertNotSame(charArrayReader0, charArrayReader1);
      assertNotSame(simpleCharStream0, simpleCharStream1);
      assertEquals(91, token1.beginLine);
      assertEquals(91, token1.endLine);
      assertEquals(1, token1.kind);
      assertEquals(93, token1.beginColumn);
      assertEquals(94, token1.endColumn);
      assertEquals(3, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(token1);
      
      Token token2 = jVCParserTokenManager0.jjFillToken();
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertFalse(simpleCharStream0.equals((Object)simpleCharStream1));
      assertArrayEquals(new char[] {'[', '[', '[', '[', '[', '\u0000', '['}, charArray0);
      assertEquals("[[", token2.toString());
      assertEquals(91, simpleCharStream0.getLine());
      assertEquals(91, simpleCharStream0.getEndLine());
      assertEquals(91, simpleCharStream0.getBeginLine());
      assertEquals(94, simpleCharStream0.getEndColumn());
      assertEquals(94, simpleCharStream0.getColumn());
      assertEquals(93, simpleCharStream0.getBeginColumn());
      assertNotSame(token2, token0);
      assertNotSame(token2, token1);
      assertNotSame(charArrayReader0, charArrayReader1);
      assertNotSame(simpleCharStream0, simpleCharStream1);
      assertEquals(94, token2.endColumn);
      assertEquals(91, token2.beginLine);
      assertEquals(93, token2.beginColumn);
      assertEquals(1, token2.kind);
      assertEquals(91, token2.endLine);
      assertEquals(3, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(token2);
      
      jVCParserTokenManager0.SwitchTo(2);
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertFalse(simpleCharStream0.equals((Object)simpleCharStream1));
      assertArrayEquals(new char[] {'[', '[', '[', '[', '[', '\u0000', '['}, charArray0);
      assertEquals(91, simpleCharStream0.getLine());
      assertEquals(91, simpleCharStream0.getEndLine());
      assertEquals(91, simpleCharStream0.getBeginLine());
      assertEquals(94, simpleCharStream0.getEndColumn());
      assertEquals(94, simpleCharStream0.getColumn());
      assertEquals(93, simpleCharStream0.getBeginColumn());
      assertNotSame(charArrayReader0, charArrayReader1);
      assertNotSame(simpleCharStream0, simpleCharStream1);
      assertEquals(3, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Token token3 = jVCParserTokenManager0.getNextToken();
      assertFalse(token3.equals((Object)token0));
      assertFalse(token3.equals((Object)token1));
      assertFalse(token3.equals((Object)token2));
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertFalse(simpleCharStream0.equals((Object)simpleCharStream1));
      assertArrayEquals(new char[] {'[', '[', '[', '[', '[', '\u0000', '['}, charArray0);
      assertEquals("[", token3.toString());
      assertEquals(95, simpleCharStream0.getBeginColumn());
      assertEquals(91, simpleCharStream0.getLine());
      assertEquals(91, simpleCharStream0.getEndLine());
      assertEquals(95, simpleCharStream0.getColumn());
      assertEquals(91, simpleCharStream0.getBeginLine());
      assertEquals(95, simpleCharStream0.getEndColumn());
      assertNotSame(token3, token0);
      assertNotSame(token3, token1);
      assertNotSame(token3, token2);
      assertNotSame(charArrayReader0, charArrayReader1);
      assertNotSame(simpleCharStream0, simpleCharStream1);
      assertEquals(91, token3.endLine);
      assertEquals(95, token3.beginColumn);
      assertEquals(95, token3.endColumn);
      assertEquals(91, token3.beginLine);
      assertEquals(16, token3.kind);
      assertEquals(4, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(token3);
      
      PipedInputStream pipedInputStream0 = null;
      try {
        pipedInputStream0 = new PipedInputStream((PipedOutputStream) null, 91);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(1, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(byteArrayInputStream0, (byte)0, (byte)2, (byte)2);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(1, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream0);
      
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(1, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(jVCParserTokenManager0);
      
      Token token0 = jVCParserTokenManager0.getNextToken();
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getEndLine());
      assertEquals(2, simpleCharStream0.getColumn());
      assertEquals(2, simpleCharStream0.getBeginColumn());
      assertEquals(2, simpleCharStream0.getEndColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getLine());
      assertEquals("\u0000", token0.toString());
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(2, token0.endColumn);
      assertEquals(0, token0.beginLine);
      assertEquals(2, token0.beginColumn);
      assertEquals(0, token0.endLine);
      assertEquals(16, token0.kind);
      assertNotNull(token0);
      
      byteArrayInputStream0.close();
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(0, byteArrayInputStream0.available());
      
      long long0 = byteArrayInputStream0.skip((byte)2);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(0L, long0);
      assertEquals(0, byteArrayInputStream0.available());
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'V';
      charArray0[1] = '\u008E';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'V', '\u008E', '\u0000'}, charArray0);
      assertNotNull(charArrayReader0);
      
      byteArrayInputStream0.close();
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(0, byteArrayInputStream0.available());
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "\u0000");
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      SimpleCharStream simpleCharStream1 = new SimpleCharStream(charArrayReader0);
      assertFalse(simpleCharStream1.equals((Object)simpleCharStream0));
      assertArrayEquals(new char[] {'V', '\u008E', '\u0000'}, charArray0);
      assertEquals(0, simpleCharStream1.getBeginLine());
      assertEquals(0, simpleCharStream1.getBeginColumn());
      assertEquals((-1), simpleCharStream1.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream1);
      
      simpleCharStream0.ReInit((InputStream) byteArrayInputStream0, 16, 16);
      assertFalse(simpleCharStream0.equals((Object)simpleCharStream1));
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertNotSame(simpleCharStream0, simpleCharStream1);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      Token token1 = jVCParserTokenManager0.getNextToken();
      assertFalse(token1.equals((Object)token0));
      assertFalse(simpleCharStream0.equals((Object)simpleCharStream1));
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals("", token1.toString());
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getColumn());
      assertEquals(0, simpleCharStream0.getEndLine());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getEndColumn());
      assertEquals(0, simpleCharStream0.getLine());
      assertNotSame(token1, token0);
      assertNotSame(simpleCharStream0, simpleCharStream1);
      assertEquals(0, token1.kind);
      assertEquals(0, token1.beginLine);
      assertEquals(0, token1.endColumn);
      assertEquals(0, token1.beginColumn);
      assertEquals(0, token1.endLine);
      assertEquals(4095, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(token1);
      
      jVCParserTokenManager0.ReInit(simpleCharStream0, 0);
      assertFalse(simpleCharStream0.equals((Object)simpleCharStream1));
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getColumn());
      assertEquals(0, simpleCharStream0.getEndLine());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getEndColumn());
      assertEquals(0, simpleCharStream0.getLine());
      assertNotSame(simpleCharStream0, simpleCharStream1);
      assertEquals(4095, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      SimpleCharStream simpleCharStream2 = new SimpleCharStream(charArrayReader0);
      assertFalse(simpleCharStream2.equals((Object)simpleCharStream0));
      assertFalse(simpleCharStream2.equals((Object)simpleCharStream1));
      assertArrayEquals(new char[] {'V', '\u008E', '\u0000'}, charArray0);
      assertEquals(0, simpleCharStream2.getBeginColumn());
      assertEquals(0, simpleCharStream2.getBeginLine());
      assertEquals((-1), simpleCharStream2.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream2);
      
      int int0 = byteArrayInputStream0.read();
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals((-1), int0);
      assertEquals(0, byteArrayInputStream0.available());
      
      charArrayReader0.mark(0);
      assertArrayEquals(new char[] {'V', '\u008E', '\u0000'}, charArray0);
      
      JVCParserTokenManager jVCParserTokenManager1 = new JVCParserTokenManager(simpleCharStream2);
      assertFalse(simpleCharStream2.equals((Object)simpleCharStream0));
      assertFalse(simpleCharStream2.equals((Object)simpleCharStream1));
      assertFalse(jVCParserTokenManager1.equals((Object)jVCParserTokenManager0));
      assertArrayEquals(new char[] {'V', '\u008E', '\u0000'}, charArray0);
      assertEquals(0, simpleCharStream2.getBeginColumn());
      assertEquals(0, simpleCharStream2.getBeginLine());
      assertEquals((-1), simpleCharStream2.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(jVCParserTokenManager1);
      
      Token token2 = jVCParserTokenManager1.getNextToken();
      assertFalse(simpleCharStream2.equals((Object)simpleCharStream0));
      assertFalse(simpleCharStream2.equals((Object)simpleCharStream1));
      assertFalse(jVCParserTokenManager1.equals((Object)jVCParserTokenManager0));
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
      assertArrayEquals(new char[] {'V', '\u008E', '\u0000'}, charArray0);
      assertEquals(1, simpleCharStream2.getColumn());
      assertEquals(1, simpleCharStream2.getEndColumn());
      assertEquals(1, simpleCharStream2.getLine());
      assertEquals(1, simpleCharStream2.getBeginColumn());
      assertEquals(1, simpleCharStream2.getBeginLine());
      assertEquals(1, simpleCharStream2.getEndLine());
      assertEquals("V", token2.toString());
      assertNotSame(simpleCharStream2, simpleCharStream0);
      assertNotSame(simpleCharStream2, simpleCharStream1);
      assertNotSame(jVCParserTokenManager1, jVCParserTokenManager0);
      assertNotSame(token2, token0);
      assertNotSame(token2, token1);
      assertEquals(0, simpleCharStream2.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(16, token2.kind);
      assertEquals(1, token2.beginLine);
      assertEquals(1, token2.endColumn);
      assertEquals(1, token2.beginColumn);
      assertEquals(1, token2.endLine);
      assertNotNull(token2);
      
      Token token3 = jVCParserTokenManager0.jjFillToken();
      assertFalse(simpleCharStream0.equals((Object)simpleCharStream1));
      assertFalse(simpleCharStream0.equals((Object)simpleCharStream2));
      assertFalse(jVCParserTokenManager0.equals((Object)jVCParserTokenManager1));
      assertFalse(token3.equals((Object)token2));
      assertFalse(token3.equals((Object)token0));
      assertFalse(token3.equals((Object)token1));
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getColumn());
      assertEquals(0, simpleCharStream0.getEndLine());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getEndColumn());
      assertEquals(0, simpleCharStream0.getLine());
      assertEquals("", token3.toString());
      assertNotSame(simpleCharStream0, simpleCharStream1);
      assertNotSame(simpleCharStream0, simpleCharStream2);
      assertNotSame(jVCParserTokenManager0, jVCParserTokenManager1);
      assertNotSame(token3, token2);
      assertNotSame(token3, token0);
      assertNotSame(token3, token1);
      assertEquals(4095, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, token3.beginColumn);
      assertEquals(0, token3.endColumn);
      assertEquals(0, token3.endLine);
      assertEquals(0, token3.kind);
      assertEquals(0, token3.beginLine);
      assertNotNull(token3);
      
      jVCParserTokenManager1.SwitchTo(1);
      assertFalse(simpleCharStream2.equals((Object)simpleCharStream0));
      assertFalse(simpleCharStream2.equals((Object)simpleCharStream1));
      assertFalse(jVCParserTokenManager1.equals((Object)jVCParserTokenManager0));
      assertArrayEquals(new char[] {'V', '\u008E', '\u0000'}, charArray0);
      assertEquals(1, simpleCharStream2.getColumn());
      assertEquals(1, simpleCharStream2.getEndColumn());
      assertEquals(1, simpleCharStream2.getLine());
      assertEquals(1, simpleCharStream2.getBeginColumn());
      assertEquals(1, simpleCharStream2.getBeginLine());
      assertEquals(1, simpleCharStream2.getEndLine());
      assertNotSame(simpleCharStream2, simpleCharStream0);
      assertNotSame(simpleCharStream2, simpleCharStream1);
      assertNotSame(jVCParserTokenManager1, jVCParserTokenManager0);
      assertEquals(0, simpleCharStream2.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      boolean boolean2 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2);
      
      Token token4 = jVCParserTokenManager1.getNextToken();
      assertFalse(simpleCharStream2.equals((Object)simpleCharStream0));
      assertFalse(simpleCharStream2.equals((Object)simpleCharStream1));
      assertFalse(jVCParserTokenManager1.equals((Object)jVCParserTokenManager0));
      assertFalse(token4.equals((Object)token2));
      assertFalse(token4.equals((Object)token0));
      assertFalse(token4.equals((Object)token3));
      assertFalse(token4.equals((Object)token1));
      assertArrayEquals(new char[] {'V', '\u008E', '\u0000'}, charArray0);
      assertEquals(2, simpleCharStream2.getColumn());
      assertEquals(1, simpleCharStream2.getLine());
      assertEquals(2, simpleCharStream2.getBeginColumn());
      assertEquals(2, simpleCharStream2.getEndColumn());
      assertEquals(1, simpleCharStream2.getBeginLine());
      assertEquals(1, simpleCharStream2.getEndLine());
      assertEquals("\u008E", token4.toString());
      assertNotSame(simpleCharStream2, simpleCharStream0);
      assertNotSame(simpleCharStream2, simpleCharStream1);
      assertNotSame(jVCParserTokenManager1, jVCParserTokenManager0);
      assertNotSame(token4, token2);
      assertNotSame(token4, token0);
      assertNotSame(token4, token3);
      assertNotSame(token4, token1);
      assertEquals(1, simpleCharStream2.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(2, token4.endColumn);
      assertEquals(16, token4.kind);
      assertEquals(1, token4.beginLine);
      assertEquals(2, token4.beginColumn);
      assertEquals(1, token4.endLine);
      assertNotNull(token4);
      
      Token token5 = jVCParserTokenManager1.getNextToken();
      assertFalse(simpleCharStream2.equals((Object)simpleCharStream0));
      assertFalse(simpleCharStream2.equals((Object)simpleCharStream1));
      assertFalse(jVCParserTokenManager1.equals((Object)jVCParserTokenManager0));
      assertFalse(token5.equals((Object)token0));
      assertFalse(token5.equals((Object)token3));
      assertFalse(token5.equals((Object)token4));
      assertFalse(token5.equals((Object)token2));
      assertFalse(token5.equals((Object)token1));
      assertArrayEquals(new char[] {'V', '\u008E', '\u0000'}, charArray0);
      assertEquals(3, simpleCharStream2.getColumn());
      assertEquals(1, simpleCharStream2.getLine());
      assertEquals(3, simpleCharStream2.getBeginColumn());
      assertEquals(3, simpleCharStream2.getEndColumn());
      assertEquals(1, simpleCharStream2.getBeginLine());
      assertEquals(1, simpleCharStream2.getEndLine());
      assertEquals("\u0000", token5.toString());
      assertNotSame(simpleCharStream2, simpleCharStream0);
      assertNotSame(simpleCharStream2, simpleCharStream1);
      assertNotSame(jVCParserTokenManager1, jVCParserTokenManager0);
      assertNotSame(token5, token0);
      assertNotSame(token5, token3);
      assertNotSame(token5, token4);
      assertNotSame(token5, token2);
      assertNotSame(token5, token1);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(2, simpleCharStream2.bufpos);
      assertEquals(1, token5.endLine);
      assertEquals(3, token5.endColumn);
      assertEquals(3, token5.beginColumn);
      assertEquals(16, token5.kind);
      assertEquals(1, token5.beginLine);
      assertNotNull(token5);
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      assertNotNull(pipedOutputStream0);
      
      PipedInputStream pipedInputStream0 = null;
      try {
        pipedInputStream0 = new PipedInputStream(pipedOutputStream0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pipe Size <= 0
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      char[] charArray0 = new char[21];
      charArray0[0] = '\\';
      charArray0[1] = '\\';
      charArray0[2] = '\\';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(charArrayReader0, (byte)2, '\\');
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(simpleCharStream0);
      
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(jVCParserTokenManager0);
      
      simpleCharStream0.setTabSize('\\');
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Token token0 = jVCParserTokenManager0.getNextToken();
      assertEquals(96, simpleCharStream0.getEndColumn());
      assertEquals(2, simpleCharStream0.getEndLine());
      assertEquals(2, simpleCharStream0.getLine());
      assertEquals(96, simpleCharStream0.getColumn());
      assertEquals(2, simpleCharStream0.getBeginLine());
      assertEquals(96, simpleCharStream0.getBeginColumn());
      assertEquals("\u0000", token0.toString());
      assertEquals(4, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(16, token0.kind);
      assertEquals(96, token0.beginColumn);
      assertEquals(96, token0.endColumn);
      assertEquals(2, token0.endLine);
      assertEquals(2, token0.beginLine);
      assertNotNull(token0);
      
      char char0 = simpleCharStream0.BeginToken();
      assertEquals('\u0000', char0);
      assertEquals(97, simpleCharStream0.getEndColumn());
      assertEquals(2, simpleCharStream0.getEndLine());
      assertEquals(2, simpleCharStream0.getLine());
      assertEquals(2, simpleCharStream0.getBeginLine());
      assertEquals(97, simpleCharStream0.getBeginColumn());
      assertEquals(97, simpleCharStream0.getColumn());
      assertEquals(5, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      // Undeclared exception!
      try { 
        jVCParserTokenManager0.SwitchTo(16);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 16. State unchanged.
         //
         verifyException("com.pmdesigns.jvc.tools.JVCParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = '[';
      charArray0[1] = '[';
      charArray0[2] = '[';
      charArray0[0] = '[';
      charArray0[4] = '[';
      charArray0[6] = '[';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'[', '[', '[', '\u0000', '[', '\u0000', '['}, charArray0);
      assertNotNull(charArrayReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(charArrayReader0, 13, 13);
      assertArrayEquals(new char[] {'[', '[', '[', '\u0000', '[', '\u0000', '['}, charArray0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream0);
      
      char char0 = simpleCharStream0.BeginToken();
      assertArrayEquals(new char[] {'[', '[', '[', '\u0000', '[', '\u0000', '['}, charArray0);
      assertEquals('[', char0);
      assertEquals(13, simpleCharStream0.getLine());
      assertEquals(13, simpleCharStream0.getEndColumn());
      assertEquals(13, simpleCharStream0.getBeginLine());
      assertEquals(13, simpleCharStream0.getEndLine());
      assertEquals(13, simpleCharStream0.getColumn());
      assertEquals(13, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0);
      assertArrayEquals(new char[] {'[', '[', '[', '\u0000', '[', '\u0000', '['}, charArray0);
      assertEquals(13, simpleCharStream0.getLine());
      assertEquals(13, simpleCharStream0.getEndColumn());
      assertEquals(13, simpleCharStream0.getBeginLine());
      assertEquals(13, simpleCharStream0.getEndLine());
      assertEquals(13, simpleCharStream0.getColumn());
      assertEquals(13, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(jVCParserTokenManager0);
      
      CharArrayReader charArrayReader1 = new CharArrayReader(charArray0);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertArrayEquals(new char[] {'[', '[', '[', '\u0000', '[', '\u0000', '['}, charArray0);
      assertNotNull(charArrayReader1);
      
      SimpleCharStream simpleCharStream1 = new SimpleCharStream(charArrayReader0, 13, 15);
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertFalse(simpleCharStream1.equals((Object)simpleCharStream0));
      assertArrayEquals(new char[] {'[', '[', '[', '\u0000', '[', '\u0000', '['}, charArray0);
      assertEquals(0, simpleCharStream1.getBeginLine());
      assertEquals(0, simpleCharStream1.getBeginColumn());
      assertEquals((-1), simpleCharStream1.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream1);
      
      JVCParserTokenManager jVCParserTokenManager1 = new JVCParserTokenManager(simpleCharStream1);
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertFalse(simpleCharStream1.equals((Object)simpleCharStream0));
      assertFalse(jVCParserTokenManager1.equals((Object)jVCParserTokenManager0));
      assertArrayEquals(new char[] {'[', '[', '[', '\u0000', '[', '\u0000', '['}, charArray0);
      assertEquals(0, simpleCharStream1.getBeginLine());
      assertEquals(0, simpleCharStream1.getBeginColumn());
      assertEquals((-1), simpleCharStream1.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(jVCParserTokenManager1);
      
      charArrayReader0.mark(4661);
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertArrayEquals(new char[] {'[', '[', '[', '\u0000', '[', '\u0000', '['}, charArray0);
      assertNotSame(charArrayReader0, charArrayReader1);
      
      jVCParserTokenManager0.setDebugStream(jVCParserTokenManager1.debugStream);
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertFalse(simpleCharStream0.equals((Object)simpleCharStream1));
      assertFalse(jVCParserTokenManager0.equals((Object)jVCParserTokenManager1));
      assertFalse(simpleCharStream1.equals((Object)simpleCharStream0));
      assertFalse(jVCParserTokenManager1.equals((Object)jVCParserTokenManager0));
      assertArrayEquals(new char[] {'[', '[', '[', '\u0000', '[', '\u0000', '['}, charArray0);
      assertEquals(13, simpleCharStream0.getLine());
      assertEquals(13, simpleCharStream0.getEndColumn());
      assertEquals(13, simpleCharStream0.getBeginLine());
      assertEquals(13, simpleCharStream0.getEndLine());
      assertEquals(13, simpleCharStream0.getColumn());
      assertEquals(13, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream1.getBeginLine());
      assertEquals(0, simpleCharStream1.getBeginColumn());
      assertNotSame(charArrayReader0, charArrayReader1);
      assertNotSame(simpleCharStream0, simpleCharStream1);
      assertNotSame(jVCParserTokenManager0, jVCParserTokenManager1);
      assertNotSame(simpleCharStream1, simpleCharStream0);
      assertNotSame(jVCParserTokenManager1, jVCParserTokenManager0);
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream1.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      charArrayReader0.mark('[');
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertArrayEquals(new char[] {'[', '[', '[', '\u0000', '[', '\u0000', '['}, charArray0);
      assertNotSame(charArrayReader0, charArrayReader1);
      
      Token token0 = jVCParserTokenManager0.getNextToken();
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertFalse(simpleCharStream0.equals((Object)simpleCharStream1));
      assertFalse(jVCParserTokenManager0.equals((Object)jVCParserTokenManager1));
      assertArrayEquals(new char[] {'[', '[', '[', '\u0000', '[', '\u0000', '['}, charArray0);
      assertEquals("[[", token0.toString());
      assertEquals(15, simpleCharStream0.getEndColumn());
      assertEquals(14, simpleCharStream0.getBeginColumn());
      assertEquals(13, simpleCharStream0.getLine());
      assertEquals(13, simpleCharStream0.getBeginLine());
      assertEquals(15, simpleCharStream0.getColumn());
      assertEquals(13, simpleCharStream0.getEndLine());
      assertNotSame(charArrayReader0, charArrayReader1);
      assertNotSame(simpleCharStream0, simpleCharStream1);
      assertNotSame(jVCParserTokenManager0, jVCParserTokenManager1);
      assertEquals(14, token0.beginColumn);
      assertEquals(15, token0.endColumn);
      assertEquals(13, token0.endLine);
      assertEquals(13, token0.beginLine);
      assertEquals(1, token0.kind);
      assertEquals(2, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(token0);
      
      Token token1 = jVCParserTokenManager0.jjFillToken();
      assertFalse(token1.equals((Object)token0));
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertFalse(simpleCharStream0.equals((Object)simpleCharStream1));
      assertFalse(jVCParserTokenManager0.equals((Object)jVCParserTokenManager1));
      assertArrayEquals(new char[] {'[', '[', '[', '\u0000', '[', '\u0000', '['}, charArray0);
      assertEquals("[[", token1.toString());
      assertEquals(15, simpleCharStream0.getEndColumn());
      assertEquals(14, simpleCharStream0.getBeginColumn());
      assertEquals(13, simpleCharStream0.getLine());
      assertEquals(13, simpleCharStream0.getBeginLine());
      assertEquals(15, simpleCharStream0.getColumn());
      assertEquals(13, simpleCharStream0.getEndLine());
      assertNotSame(token1, token0);
      assertNotSame(charArrayReader0, charArrayReader1);
      assertNotSame(simpleCharStream0, simpleCharStream1);
      assertNotSame(jVCParserTokenManager0, jVCParserTokenManager1);
      assertEquals(13, token1.beginLine);
      assertEquals(1, token1.kind);
      assertEquals(13, token1.endLine);
      assertEquals(15, token1.endColumn);
      assertEquals(14, token1.beginColumn);
      assertEquals(2, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(token1);
      
      jVCParserTokenManager0.SwitchTo(2);
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertFalse(simpleCharStream0.equals((Object)simpleCharStream1));
      assertFalse(jVCParserTokenManager0.equals((Object)jVCParserTokenManager1));
      assertArrayEquals(new char[] {'[', '[', '[', '\u0000', '[', '\u0000', '['}, charArray0);
      assertEquals(15, simpleCharStream0.getEndColumn());
      assertEquals(14, simpleCharStream0.getBeginColumn());
      assertEquals(13, simpleCharStream0.getLine());
      assertEquals(13, simpleCharStream0.getBeginLine());
      assertEquals(15, simpleCharStream0.getColumn());
      assertEquals(13, simpleCharStream0.getEndLine());
      assertNotSame(charArrayReader0, charArrayReader1);
      assertNotSame(simpleCharStream0, simpleCharStream1);
      assertNotSame(jVCParserTokenManager0, jVCParserTokenManager1);
      assertEquals(2, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Token token2 = jVCParserTokenManager0.getNextToken();
      assertFalse(token2.equals((Object)token1));
      assertFalse(token2.equals((Object)token0));
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertFalse(simpleCharStream0.equals((Object)simpleCharStream1));
      assertFalse(jVCParserTokenManager0.equals((Object)jVCParserTokenManager1));
      assertArrayEquals(new char[] {'[', '[', '[', '\u0000', '[', '\u0000', '['}, charArray0);
      assertEquals("\u0000", token2.toString());
      assertEquals(13, simpleCharStream0.getLine());
      assertEquals(16, simpleCharStream0.getBeginColumn());
      assertEquals(13, simpleCharStream0.getBeginLine());
      assertEquals(16, simpleCharStream0.getColumn());
      assertEquals(13, simpleCharStream0.getEndLine());
      assertEquals(16, simpleCharStream0.getEndColumn());
      assertNotSame(token2, token1);
      assertNotSame(token2, token0);
      assertNotSame(charArrayReader0, charArrayReader1);
      assertNotSame(simpleCharStream0, simpleCharStream1);
      assertNotSame(jVCParserTokenManager0, jVCParserTokenManager1);
      assertEquals(16, token2.beginColumn);
      assertEquals(16, token2.kind);
      assertEquals(13, token2.endLine);
      assertEquals(16, token2.endColumn);
      assertEquals(13, token2.beginLine);
      assertEquals(3, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(token2);
      
      Token token3 = jVCParserTokenManager0.getNextToken();
      assertFalse(token3.equals((Object)token2));
      assertFalse(token3.equals((Object)token1));
      assertFalse(token3.equals((Object)token0));
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertFalse(simpleCharStream0.equals((Object)simpleCharStream1));
      assertFalse(jVCParserTokenManager0.equals((Object)jVCParserTokenManager1));
      assertArrayEquals(new char[] {'[', '[', '[', '\u0000', '[', '\u0000', '['}, charArray0);
      assertEquals("[", token3.toString());
      assertEquals(13, simpleCharStream0.getLine());
      assertEquals(13, simpleCharStream0.getBeginLine());
      assertEquals(17, simpleCharStream0.getBeginColumn());
      assertEquals(17, simpleCharStream0.getColumn());
      assertEquals(13, simpleCharStream0.getEndLine());
      assertEquals(17, simpleCharStream0.getEndColumn());
      assertNotSame(token3, token2);
      assertNotSame(token3, token1);
      assertNotSame(token3, token0);
      assertNotSame(charArrayReader0, charArrayReader1);
      assertNotSame(simpleCharStream0, simpleCharStream1);
      assertNotSame(jVCParserTokenManager0, jVCParserTokenManager1);
      assertEquals(16, token3.kind);
      assertEquals(17, token3.beginColumn);
      assertEquals(17, token3.endColumn);
      assertEquals(13, token3.endLine);
      assertEquals(13, token3.beginLine);
      assertEquals(4, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(token3);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = '[';
      charArray0[1] = '[';
      charArray0[3] = '[';
      charArray0[6] = '\u0000';
      charArray0[1] = '[';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'[', '[', '\u0000', '[', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(charArrayReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(charArrayReader0, 12, 12);
      assertArrayEquals(new char[] {'[', '[', '\u0000', '[', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(simpleCharStream0);
      
      CharArrayReader charArrayReader1 = new CharArrayReader(charArray0);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertArrayEquals(new char[] {'[', '[', '\u0000', '[', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(charArrayReader1);
      
      SimpleCharStream simpleCharStream1 = new SimpleCharStream(charArrayReader1);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertFalse(simpleCharStream1.equals((Object)simpleCharStream0));
      assertArrayEquals(new char[] {'[', '[', '\u0000', '[', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(0, simpleCharStream1.getBeginColumn());
      assertEquals(0, simpleCharStream1.getBeginLine());
      assertEquals((-1), simpleCharStream1.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream1);
      
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream1);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertFalse(simpleCharStream1.equals((Object)simpleCharStream0));
      assertArrayEquals(new char[] {'[', '[', '\u0000', '[', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(0, simpleCharStream1.getBeginColumn());
      assertEquals(0, simpleCharStream1.getBeginLine());
      assertEquals((-1), simpleCharStream1.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(jVCParserTokenManager0);
      
      JVCParserTokenManager jVCParserTokenManager1 = new JVCParserTokenManager(simpleCharStream1);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertFalse(simpleCharStream1.equals((Object)simpleCharStream0));
      assertFalse(jVCParserTokenManager1.equals((Object)jVCParserTokenManager0));
      assertArrayEquals(new char[] {'[', '[', '\u0000', '[', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(0, simpleCharStream1.getBeginColumn());
      assertEquals(0, simpleCharStream1.getBeginLine());
      assertEquals((-1), simpleCharStream1.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(jVCParserTokenManager1);
      
      Token token0 = jVCParserTokenManager1.getNextToken();
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertFalse(simpleCharStream1.equals((Object)simpleCharStream0));
      assertFalse(jVCParserTokenManager1.equals((Object)jVCParserTokenManager0));
      assertArrayEquals(new char[] {'[', '[', '\u0000', '[', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(1, simpleCharStream1.getEndLine());
      assertEquals(2, simpleCharStream1.getEndColumn());
      assertEquals(1, simpleCharStream1.getLine());
      assertEquals(1, simpleCharStream1.getBeginLine());
      assertEquals(2, simpleCharStream1.getColumn());
      assertEquals(1, simpleCharStream1.getBeginColumn());
      assertEquals("[[", token0.toString());
      assertNotSame(charArrayReader1, charArrayReader0);
      assertNotSame(simpleCharStream1, simpleCharStream0);
      assertNotSame(jVCParserTokenManager1, jVCParserTokenManager0);
      assertEquals(1, simpleCharStream1.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.kind);
      assertEquals(1, token0.beginColumn);
      assertEquals(2, token0.endColumn);
      assertNotNull(token0);
      
      jVCParserTokenManager1.ReInit(simpleCharStream0, 1);
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertFalse(simpleCharStream0.equals((Object)simpleCharStream1));
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertFalse(simpleCharStream1.equals((Object)simpleCharStream0));
      assertFalse(jVCParserTokenManager1.equals((Object)jVCParserTokenManager0));
      assertArrayEquals(new char[] {'[', '[', '\u0000', '[', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream1.getEndLine());
      assertEquals(2, simpleCharStream1.getEndColumn());
      assertEquals(1, simpleCharStream1.getLine());
      assertEquals(1, simpleCharStream1.getBeginLine());
      assertEquals(2, simpleCharStream1.getColumn());
      assertEquals(1, simpleCharStream1.getBeginColumn());
      assertNotSame(charArrayReader0, charArrayReader1);
      assertNotSame(simpleCharStream0, simpleCharStream1);
      assertNotSame(charArrayReader1, charArrayReader0);
      assertNotSame(simpleCharStream1, simpleCharStream0);
      assertNotSame(jVCParserTokenManager1, jVCParserTokenManager0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertEquals(1, simpleCharStream1.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      Token token1 = jVCParserTokenManager1.getNextToken();
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertFalse(simpleCharStream1.equals((Object)simpleCharStream0));
      assertFalse(jVCParserTokenManager1.equals((Object)jVCParserTokenManager0));
      assertFalse(token1.equals((Object)token0));
      assertArrayEquals(new char[] {'[', '[', '\u0000', '[', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(1, simpleCharStream1.getEndLine());
      assertEquals(2, simpleCharStream1.getEndColumn());
      assertEquals(1, simpleCharStream1.getLine());
      assertEquals(1, simpleCharStream1.getBeginLine());
      assertEquals(2, simpleCharStream1.getColumn());
      assertEquals(1, simpleCharStream1.getBeginColumn());
      assertEquals("[[", token1.toString());
      assertNotSame(charArrayReader1, charArrayReader0);
      assertNotSame(simpleCharStream1, simpleCharStream0);
      assertNotSame(jVCParserTokenManager1, jVCParserTokenManager0);
      assertNotSame(token1, token0);
      assertEquals(1, simpleCharStream1.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(12, token1.beginLine);
      assertEquals(12, token1.beginColumn);
      assertEquals(13, token1.endColumn);
      assertEquals(12, token1.endLine);
      assertEquals(1, token1.kind);
      assertNotNull(token1);
      
      jVCParserTokenManager0.SwitchTo(1);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertFalse(simpleCharStream1.equals((Object)simpleCharStream0));
      assertFalse(jVCParserTokenManager0.equals((Object)jVCParserTokenManager1));
      assertArrayEquals(new char[] {'[', '[', '\u0000', '[', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(1, simpleCharStream1.getEndLine());
      assertEquals(2, simpleCharStream1.getEndColumn());
      assertEquals(1, simpleCharStream1.getLine());
      assertEquals(1, simpleCharStream1.getBeginLine());
      assertEquals(2, simpleCharStream1.getColumn());
      assertEquals(1, simpleCharStream1.getBeginColumn());
      assertNotSame(charArrayReader1, charArrayReader0);
      assertNotSame(simpleCharStream1, simpleCharStream0);
      assertNotSame(jVCParserTokenManager0, jVCParserTokenManager1);
      assertEquals(1, simpleCharStream1.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      simpleCharStream0.available = (-2841);
      assertEquals(12, simpleCharStream0.getLine());
      assertEquals(12, simpleCharStream0.getEndLine());
      assertEquals(13, simpleCharStream0.getEndColumn());
      assertEquals(12, simpleCharStream0.getBeginLine());
      assertEquals(12, simpleCharStream0.getBeginColumn());
      assertEquals(13, simpleCharStream0.getColumn());
      
      Token token2 = jVCParserTokenManager0.getNextToken();
      assertFalse(token2.equals((Object)token1));
      assertFalse(token2.equals((Object)token0));
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertFalse(simpleCharStream1.equals((Object)simpleCharStream0));
      assertFalse(jVCParserTokenManager0.equals((Object)jVCParserTokenManager1));
      assertArrayEquals(new char[] {'[', '[', '\u0000', '[', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals("\u0000", token2.toString());
      assertEquals(1, simpleCharStream1.getEndLine());
      assertEquals(1, simpleCharStream1.getLine());
      assertEquals(3, simpleCharStream1.getEndColumn());
      assertEquals(1, simpleCharStream1.getBeginLine());
      assertEquals(3, simpleCharStream1.getColumn());
      assertEquals(3, simpleCharStream1.getBeginColumn());
      assertNotSame(token2, token1);
      assertNotSame(token2, token0);
      assertNotSame(charArrayReader1, charArrayReader0);
      assertNotSame(simpleCharStream1, simpleCharStream0);
      assertNotSame(jVCParserTokenManager0, jVCParserTokenManager1);
      assertEquals(16, token2.kind);
      assertEquals(1, token2.beginLine);
      assertEquals(3, token2.endColumn);
      assertEquals(3, token2.beginColumn);
      assertEquals(1, token2.endLine);
      assertEquals(2, simpleCharStream1.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(token2);
      
      SimpleCharStream simpleCharStream2 = new SimpleCharStream(charArrayReader0, 12, 1);
      assertFalse(simpleCharStream2.equals((Object)simpleCharStream1));
      assertFalse(simpleCharStream2.equals((Object)simpleCharStream0));
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertArrayEquals(new char[] {'[', '[', '\u0000', '[', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(0, simpleCharStream2.getBeginColumn());
      assertEquals(0, simpleCharStream2.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream2.bufpos);
      assertNotNull(simpleCharStream2);
      
      simpleCharStream2.setTabSize('[');
      assertFalse(simpleCharStream2.equals((Object)simpleCharStream1));
      assertFalse(simpleCharStream2.equals((Object)simpleCharStream0));
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertArrayEquals(new char[] {'[', '[', '\u0000', '[', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(0, simpleCharStream2.getBeginColumn());
      assertEquals(0, simpleCharStream2.getBeginLine());
      assertNotSame(simpleCharStream2, simpleCharStream1);
      assertNotSame(simpleCharStream2, simpleCharStream0);
      assertNotSame(charArrayReader0, charArrayReader1);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream2.bufpos);
      
      Token token3 = jVCParserTokenManager0.getNextToken();
      assertFalse(token3.equals((Object)token0));
      assertFalse(token3.equals((Object)token1));
      assertFalse(token3.equals((Object)token2));
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertFalse(simpleCharStream1.equals((Object)simpleCharStream0));
      assertFalse(simpleCharStream1.equals((Object)simpleCharStream2));
      assertFalse(jVCParserTokenManager0.equals((Object)jVCParserTokenManager1));
      assertArrayEquals(new char[] {'[', '[', '\u0000', '[', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals("[", token3.toString());
      assertEquals(1, simpleCharStream1.getEndLine());
      assertEquals(1, simpleCharStream1.getLine());
      assertEquals(1, simpleCharStream1.getBeginLine());
      assertEquals(4, simpleCharStream1.getEndColumn());
      assertEquals(4, simpleCharStream1.getColumn());
      assertEquals(4, simpleCharStream1.getBeginColumn());
      assertNotSame(token3, token0);
      assertNotSame(token3, token1);
      assertNotSame(token3, token2);
      assertNotSame(charArrayReader1, charArrayReader0);
      assertNotSame(simpleCharStream1, simpleCharStream0);
      assertNotSame(simpleCharStream1, simpleCharStream2);
      assertNotSame(jVCParserTokenManager0, jVCParserTokenManager1);
      assertEquals(4, token3.beginColumn);
      assertEquals(1, token3.endLine);
      assertEquals(4, token3.endColumn);
      assertEquals(16, token3.kind);
      assertEquals(1, token3.beginLine);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(3, simpleCharStream1.bufpos);
      assertNotNull(token3);
      
      // Undeclared exception!
      try { 
        jVCParserTokenManager0.SwitchTo(2656);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 2656. State unchanged.
         //
         verifyException("com.pmdesigns.jvc.tools.JVCParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = '[';
      charArray0[6] = '[';
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "f%b3");
      assertFalse(boolean0);
      
      charArray0[2] = '[';
      charArray0[3] = '[';
      charArray0[4] = '[';
      charArray0[1] = '[';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'[', '[', '[', '[', '[', '\u0000', '['}, charArray0);
      assertNotNull(charArrayReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(charArrayReader0, 12, 12);
      assertArrayEquals(new char[] {'[', '[', '[', '[', '[', '\u0000', '['}, charArray0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream0);
      
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0);
      assertArrayEquals(new char[] {'[', '[', '[', '[', '[', '\u0000', '['}, charArray0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(jVCParserTokenManager0);
      
      Token token0 = jVCParserTokenManager0.getNextToken();
      assertArrayEquals(new char[] {'[', '[', '[', '[', '[', '\u0000', '['}, charArray0);
      assertEquals(12, simpleCharStream0.getLine());
      assertEquals(12, simpleCharStream0.getBeginColumn());
      assertEquals(12, simpleCharStream0.getBeginLine());
      assertEquals(12, simpleCharStream0.getEndLine());
      assertEquals(13, simpleCharStream0.getColumn());
      assertEquals(13, simpleCharStream0.getEndColumn());
      assertEquals("[[", token0.toString());
      assertEquals(1, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(12, token0.beginLine);
      assertEquals(12, token0.beginColumn);
      assertEquals(13, token0.endColumn);
      assertEquals(12, token0.endLine);
      assertEquals(1, token0.kind);
      assertNotNull(token0);
      
      SimpleCharStream simpleCharStream1 = new SimpleCharStream(charArrayReader0);
      assertFalse(simpleCharStream1.equals((Object)simpleCharStream0));
      assertArrayEquals(new char[] {'[', '[', '[', '[', '[', '\u0000', '['}, charArray0);
      assertEquals(0, simpleCharStream1.getBeginColumn());
      assertEquals(0, simpleCharStream1.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream1.bufpos);
      assertNotNull(simpleCharStream1);
      
      JVCParserTokenManager jVCParserTokenManager1 = new JVCParserTokenManager(simpleCharStream1);
      assertFalse(simpleCharStream1.equals((Object)simpleCharStream0));
      assertFalse(jVCParserTokenManager1.equals((Object)jVCParserTokenManager0));
      assertArrayEquals(new char[] {'[', '[', '[', '[', '[', '\u0000', '['}, charArray0);
      assertEquals(0, simpleCharStream1.getBeginColumn());
      assertEquals(0, simpleCharStream1.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream1.bufpos);
      assertNotNull(jVCParserTokenManager1);
      
      JVCParserTokenManager jVCParserTokenManager2 = new JVCParserTokenManager(simpleCharStream1);
      assertFalse(simpleCharStream1.equals((Object)simpleCharStream0));
      assertFalse(jVCParserTokenManager2.equals((Object)jVCParserTokenManager1));
      assertFalse(jVCParserTokenManager2.equals((Object)jVCParserTokenManager0));
      assertArrayEquals(new char[] {'[', '[', '[', '[', '[', '\u0000', '['}, charArray0);
      assertEquals(0, simpleCharStream1.getBeginColumn());
      assertEquals(0, simpleCharStream1.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream1.bufpos);
      assertNotNull(jVCParserTokenManager2);
      
      Token token1 = jVCParserTokenManager2.getNextToken();
      assertFalse(simpleCharStream1.equals((Object)simpleCharStream0));
      assertFalse(jVCParserTokenManager2.equals((Object)jVCParserTokenManager1));
      assertFalse(jVCParserTokenManager2.equals((Object)jVCParserTokenManager0));
      assertFalse(token1.equals((Object)token0));
      assertArrayEquals(new char[] {'[', '[', '[', '[', '[', '\u0000', '['}, charArray0);
      assertEquals(0, simpleCharStream1.getBeginColumn());
      assertEquals(0, simpleCharStream1.getBeginLine());
      assertEquals(0, simpleCharStream1.getEndLine());
      assertEquals(0, simpleCharStream1.getColumn());
      assertEquals(0, simpleCharStream1.getLine());
      assertEquals(0, simpleCharStream1.getEndColumn());
      assertEquals("", token1.toString());
      assertNotSame(simpleCharStream1, simpleCharStream0);
      assertNotSame(jVCParserTokenManager2, jVCParserTokenManager1);
      assertNotSame(jVCParserTokenManager2, jVCParserTokenManager0);
      assertNotSame(token1, token0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(4095, simpleCharStream1.bufpos);
      assertEquals(0, token1.kind);
      assertEquals(0, token1.endColumn);
      assertEquals(0, token1.endLine);
      assertEquals(0, token1.beginLine);
      assertEquals(0, token1.beginColumn);
      assertNotNull(token1);
      
      jVCParserTokenManager2.ReInit(simpleCharStream0, 0);
      assertFalse(simpleCharStream0.equals((Object)simpleCharStream1));
      assertFalse(simpleCharStream1.equals((Object)simpleCharStream0));
      assertFalse(jVCParserTokenManager2.equals((Object)jVCParserTokenManager1));
      assertFalse(jVCParserTokenManager2.equals((Object)jVCParserTokenManager0));
      assertArrayEquals(new char[] {'[', '[', '[', '[', '[', '\u0000', '['}, charArray0);
      assertEquals(12, simpleCharStream0.getLine());
      assertEquals(12, simpleCharStream0.getBeginColumn());
      assertEquals(12, simpleCharStream0.getBeginLine());
      assertEquals(12, simpleCharStream0.getEndLine());
      assertEquals(13, simpleCharStream0.getColumn());
      assertEquals(13, simpleCharStream0.getEndColumn());
      assertEquals(0, simpleCharStream1.getBeginColumn());
      assertEquals(0, simpleCharStream1.getBeginLine());
      assertEquals(0, simpleCharStream1.getEndLine());
      assertEquals(0, simpleCharStream1.getColumn());
      assertEquals(0, simpleCharStream1.getLine());
      assertEquals(0, simpleCharStream1.getEndColumn());
      assertNotSame(simpleCharStream0, simpleCharStream1);
      assertNotSame(simpleCharStream1, simpleCharStream0);
      assertNotSame(jVCParserTokenManager2, jVCParserTokenManager1);
      assertNotSame(jVCParserTokenManager2, jVCParserTokenManager0);
      assertEquals(1, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(4095, simpleCharStream1.bufpos);
      
      Token token2 = jVCParserTokenManager2.getNextToken();
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
      assertFalse(simpleCharStream1.equals((Object)simpleCharStream0));
      assertFalse(jVCParserTokenManager2.equals((Object)jVCParserTokenManager1));
      assertFalse(jVCParserTokenManager2.equals((Object)jVCParserTokenManager0));
      assertArrayEquals(new char[] {'[', '[', '[', '[', '[', '\u0000', '['}, charArray0);
      assertEquals("[[", token2.toString());
      assertEquals(0, simpleCharStream1.getBeginColumn());
      assertEquals(0, simpleCharStream1.getBeginLine());
      assertEquals(0, simpleCharStream1.getEndLine());
      assertEquals(0, simpleCharStream1.getColumn());
      assertEquals(0, simpleCharStream1.getLine());
      assertEquals(0, simpleCharStream1.getEndColumn());
      assertNotSame(token2, token0);
      assertNotSame(token2, token1);
      assertNotSame(simpleCharStream1, simpleCharStream0);
      assertNotSame(jVCParserTokenManager2, jVCParserTokenManager1);
      assertNotSame(jVCParserTokenManager2, jVCParserTokenManager0);
      assertEquals(1, token2.kind);
      assertEquals(12, token2.beginLine);
      assertEquals(15, token2.endColumn);
      assertEquals(14, token2.beginColumn);
      assertEquals(12, token2.endLine);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(4095, simpleCharStream1.bufpos);
      assertNotNull(token2);
      
      jVCParserTokenManager1.SwitchTo(3);
      assertFalse(simpleCharStream1.equals((Object)simpleCharStream0));
      assertFalse(jVCParserTokenManager1.equals((Object)jVCParserTokenManager2));
      assertFalse(jVCParserTokenManager1.equals((Object)jVCParserTokenManager0));
      assertArrayEquals(new char[] {'[', '[', '[', '[', '[', '\u0000', '['}, charArray0);
      assertEquals(0, simpleCharStream1.getBeginColumn());
      assertEquals(0, simpleCharStream1.getBeginLine());
      assertEquals(0, simpleCharStream1.getEndLine());
      assertEquals(0, simpleCharStream1.getColumn());
      assertEquals(0, simpleCharStream1.getLine());
      assertEquals(0, simpleCharStream1.getEndColumn());
      assertNotSame(simpleCharStream1, simpleCharStream0);
      assertNotSame(jVCParserTokenManager1, jVCParserTokenManager2);
      assertNotSame(jVCParserTokenManager1, jVCParserTokenManager0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(4095, simpleCharStream1.bufpos);
      
      Token token3 = jVCParserTokenManager1.getNextToken();
      assertFalse(token3.equals((Object)token2));
      assertFalse(token3.equals((Object)token1));
      assertFalse(token3.equals((Object)token0));
      assertFalse(simpleCharStream1.equals((Object)simpleCharStream0));
      assertFalse(jVCParserTokenManager1.equals((Object)jVCParserTokenManager2));
      assertFalse(jVCParserTokenManager1.equals((Object)jVCParserTokenManager0));
      assertArrayEquals(new char[] {'[', '[', '[', '[', '[', '\u0000', '['}, charArray0);
      assertEquals("", token3.toString());
      assertEquals(0, simpleCharStream1.getBeginColumn());
      assertEquals(0, simpleCharStream1.getBeginLine());
      assertEquals(0, simpleCharStream1.getEndLine());
      assertEquals(0, simpleCharStream1.getColumn());
      assertEquals(0, simpleCharStream1.getLine());
      assertEquals(0, simpleCharStream1.getEndColumn());
      assertNotSame(token3, token2);
      assertNotSame(token3, token1);
      assertNotSame(token3, token0);
      assertNotSame(simpleCharStream1, simpleCharStream0);
      assertNotSame(jVCParserTokenManager1, jVCParserTokenManager2);
      assertNotSame(jVCParserTokenManager1, jVCParserTokenManager0);
      assertEquals(0, token3.beginColumn);
      assertEquals(0, token3.beginLine);
      assertEquals(0, token3.kind);
      assertEquals(0, token3.endLine);
      assertEquals(0, token3.endColumn);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(4095, simpleCharStream1.bufpos);
      assertNotNull(token3);
      
      SimpleCharStream simpleCharStream2 = new SimpleCharStream(charArrayReader0, 12, 0);
      assertFalse(simpleCharStream2.equals((Object)simpleCharStream1));
      assertFalse(simpleCharStream2.equals((Object)simpleCharStream0));
      assertArrayEquals(new char[] {'[', '[', '[', '[', '[', '\u0000', '['}, charArray0);
      assertEquals(0, simpleCharStream2.getBeginColumn());
      assertEquals(0, simpleCharStream2.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream2.bufpos);
      assertNotNull(simpleCharStream2);
      
      simpleCharStream2.line = 0;
      assertEquals(0, simpleCharStream2.getBeginColumn());
      assertEquals(0, simpleCharStream2.getBeginLine());
      
      simpleCharStream2.setTabSize('[');
      assertFalse(simpleCharStream2.equals((Object)simpleCharStream1));
      assertFalse(simpleCharStream2.equals((Object)simpleCharStream0));
      assertArrayEquals(new char[] {'[', '[', '[', '[', '[', '\u0000', '['}, charArray0);
      assertEquals(0, simpleCharStream2.getBeginColumn());
      assertEquals(0, simpleCharStream2.getBeginLine());
      assertNotSame(simpleCharStream2, simpleCharStream1);
      assertNotSame(simpleCharStream2, simpleCharStream0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream2.bufpos);
      
      JVCParserTokenManager jVCParserTokenManager3 = new JVCParserTokenManager(simpleCharStream1);
      assertFalse(jVCParserTokenManager3.equals((Object)jVCParserTokenManager0));
      assertFalse(jVCParserTokenManager3.equals((Object)jVCParserTokenManager1));
      assertFalse(jVCParserTokenManager3.equals((Object)jVCParserTokenManager2));
      assertFalse(simpleCharStream1.equals((Object)simpleCharStream2));
      assertFalse(simpleCharStream1.equals((Object)simpleCharStream0));
      assertArrayEquals(new char[] {'[', '[', '[', '[', '[', '\u0000', '['}, charArray0);
      assertEquals(0, simpleCharStream1.getBeginColumn());
      assertEquals(0, simpleCharStream1.getBeginLine());
      assertEquals(0, simpleCharStream1.getEndLine());
      assertEquals(0, simpleCharStream1.getColumn());
      assertEquals(0, simpleCharStream1.getLine());
      assertEquals(0, simpleCharStream1.getEndColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(4095, simpleCharStream1.bufpos);
      assertNotNull(jVCParserTokenManager3);
      
      Token token4 = jVCParserTokenManager3.getNextToken();
      assertFalse(jVCParserTokenManager3.equals((Object)jVCParserTokenManager0));
      assertFalse(jVCParserTokenManager3.equals((Object)jVCParserTokenManager1));
      assertFalse(jVCParserTokenManager3.equals((Object)jVCParserTokenManager2));
      assertFalse(token4.equals((Object)token0));
      assertFalse(token4.equals((Object)token1));
      assertFalse(token4.equals((Object)token3));
      assertFalse(token4.equals((Object)token2));
      assertFalse(simpleCharStream1.equals((Object)simpleCharStream2));
      assertFalse(simpleCharStream1.equals((Object)simpleCharStream0));
      assertArrayEquals(new char[] {'[', '[', '[', '[', '[', '\u0000', '['}, charArray0);
      assertEquals("", token4.toString());
      assertEquals(0, simpleCharStream1.getBeginColumn());
      assertEquals(0, simpleCharStream1.getBeginLine());
      assertEquals(0, simpleCharStream1.getEndLine());
      assertEquals(0, simpleCharStream1.getColumn());
      assertEquals(0, simpleCharStream1.getLine());
      assertEquals(0, simpleCharStream1.getEndColumn());
      assertNotSame(jVCParserTokenManager3, jVCParserTokenManager0);
      assertNotSame(jVCParserTokenManager3, jVCParserTokenManager1);
      assertNotSame(jVCParserTokenManager3, jVCParserTokenManager2);
      assertNotSame(token4, token0);
      assertNotSame(token4, token1);
      assertNotSame(token4, token3);
      assertNotSame(token4, token2);
      assertNotSame(simpleCharStream1, simpleCharStream2);
      assertNotSame(simpleCharStream1, simpleCharStream0);
      assertEquals(0, token4.kind);
      assertEquals(0, token4.beginLine);
      assertEquals(0, token4.beginColumn);
      assertEquals(0, token4.endColumn);
      assertEquals(0, token4.endLine);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(4095, simpleCharStream1.bufpos);
      assertNotNull(token4);
      
      Token token5 = jVCParserTokenManager2.getNextToken();
      assertFalse(token5.equals((Object)token3));
      assertFalse(token5.equals((Object)token2));
      assertFalse(token5.equals((Object)token1));
      assertFalse(token5.equals((Object)token4));
      assertFalse(token5.equals((Object)token0));
      assertFalse(simpleCharStream1.equals((Object)simpleCharStream2));
      assertFalse(simpleCharStream1.equals((Object)simpleCharStream0));
      assertFalse(jVCParserTokenManager2.equals((Object)jVCParserTokenManager1));
      assertFalse(jVCParserTokenManager2.equals((Object)jVCParserTokenManager0));
      assertFalse(jVCParserTokenManager2.equals((Object)jVCParserTokenManager3));
      assertArrayEquals(new char[] {'[', '[', '[', '[', '[', '\u0000', '['}, charArray0);
      assertEquals("[", token5.toString());
      assertEquals(0, simpleCharStream1.getBeginColumn());
      assertEquals(0, simpleCharStream1.getBeginLine());
      assertEquals(0, simpleCharStream1.getEndLine());
      assertEquals(0, simpleCharStream1.getColumn());
      assertEquals(0, simpleCharStream1.getLine());
      assertEquals(0, simpleCharStream1.getEndColumn());
      assertNotSame(token5, token3);
      assertNotSame(token5, token2);
      assertNotSame(token5, token1);
      assertNotSame(token5, token4);
      assertNotSame(token5, token0);
      assertNotSame(simpleCharStream1, simpleCharStream2);
      assertNotSame(simpleCharStream1, simpleCharStream0);
      assertNotSame(jVCParserTokenManager2, jVCParserTokenManager1);
      assertNotSame(jVCParserTokenManager2, jVCParserTokenManager0);
      assertNotSame(jVCParserTokenManager2, jVCParserTokenManager3);
      assertEquals(16, token5.beginColumn);
      assertEquals(16, token5.kind);
      assertEquals(12, token5.endLine);
      assertEquals(12, token5.beginLine);
      assertEquals(16, token5.endColumn);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(4095, simpleCharStream1.bufpos);
      assertNotNull(token5);
      
      Token token6 = jVCParserTokenManager2.getNextToken();
      assertFalse(token6.equals((Object)token5));
      assertFalse(token6.equals((Object)token1));
      assertFalse(token6.equals((Object)token3));
      assertFalse(token6.equals((Object)token2));
      assertFalse(token6.equals((Object)token4));
      assertFalse(token6.equals((Object)token0));
      assertFalse(simpleCharStream1.equals((Object)simpleCharStream2));
      assertFalse(simpleCharStream1.equals((Object)simpleCharStream0));
      assertFalse(jVCParserTokenManager2.equals((Object)jVCParserTokenManager1));
      assertFalse(jVCParserTokenManager2.equals((Object)jVCParserTokenManager0));
      assertFalse(jVCParserTokenManager2.equals((Object)jVCParserTokenManager3));
      assertArrayEquals(new char[] {'[', '[', '[', '[', '[', '\u0000', '['}, charArray0);
      assertEquals("\u0000", token6.toString());
      assertEquals(0, simpleCharStream1.getBeginColumn());
      assertEquals(0, simpleCharStream1.getBeginLine());
      assertEquals(0, simpleCharStream1.getEndLine());
      assertEquals(0, simpleCharStream1.getColumn());
      assertEquals(0, simpleCharStream1.getLine());
      assertEquals(0, simpleCharStream1.getEndColumn());
      assertNotSame(token6, token5);
      assertNotSame(token6, token1);
      assertNotSame(token6, token3);
      assertNotSame(token6, token2);
      assertNotSame(token6, token4);
      assertNotSame(token6, token0);
      assertNotSame(simpleCharStream1, simpleCharStream2);
      assertNotSame(simpleCharStream1, simpleCharStream0);
      assertNotSame(jVCParserTokenManager2, jVCParserTokenManager1);
      assertNotSame(jVCParserTokenManager2, jVCParserTokenManager0);
      assertNotSame(jVCParserTokenManager2, jVCParserTokenManager3);
      assertEquals(12, token6.endLine);
      assertEquals(16, token6.kind);
      assertEquals(17, token6.endColumn);
      assertEquals(12, token6.beginLine);
      assertEquals(17, token6.beginColumn);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(4095, simpleCharStream1.bufpos);
      assertNotNull(token6);
      
      Token token7 = jVCParserTokenManager2.jjFillToken();
      assertFalse(token7.equals((Object)token5));
      assertFalse(token7.equals((Object)token6));
      assertFalse(token7.equals((Object)token0));
      assertFalse(token7.equals((Object)token4));
      assertFalse(token7.equals((Object)token1));
      assertFalse(token7.equals((Object)token3));
      assertFalse(token7.equals((Object)token2));
      assertFalse(simpleCharStream1.equals((Object)simpleCharStream2));
      assertFalse(simpleCharStream1.equals((Object)simpleCharStream0));
      assertFalse(jVCParserTokenManager2.equals((Object)jVCParserTokenManager1));
      assertFalse(jVCParserTokenManager2.equals((Object)jVCParserTokenManager0));
      assertFalse(jVCParserTokenManager2.equals((Object)jVCParserTokenManager3));
      assertArrayEquals(new char[] {'[', '[', '[', '[', '[', '\u0000', '['}, charArray0);
      assertEquals("\u0000", token7.toString());
      assertEquals(0, simpleCharStream1.getBeginColumn());
      assertEquals(0, simpleCharStream1.getBeginLine());
      assertEquals(0, simpleCharStream1.getEndLine());
      assertEquals(0, simpleCharStream1.getColumn());
      assertEquals(0, simpleCharStream1.getLine());
      assertEquals(0, simpleCharStream1.getEndColumn());
      assertNotSame(token7, token5);
      assertNotSame(token7, token6);
      assertNotSame(token7, token0);
      assertNotSame(token7, token4);
      assertNotSame(token7, token1);
      assertNotSame(token7, token3);
      assertNotSame(token7, token2);
      assertNotSame(simpleCharStream1, simpleCharStream2);
      assertNotSame(simpleCharStream1, simpleCharStream0);
      assertNotSame(jVCParserTokenManager2, jVCParserTokenManager1);
      assertNotSame(jVCParserTokenManager2, jVCParserTokenManager0);
      assertNotSame(jVCParserTokenManager2, jVCParserTokenManager3);
      assertEquals(16, token7.kind);
      assertEquals(12, token7.endLine);
      assertEquals(17, token7.beginColumn);
      assertEquals(17, token7.endColumn);
      assertEquals(12, token7.beginLine);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(4095, simpleCharStream1.bufpos);
      assertNotNull(token7);
      
      jVCParserTokenManager1.SwitchTo(0);
      assertFalse(simpleCharStream1.equals((Object)simpleCharStream2));
      assertFalse(simpleCharStream1.equals((Object)simpleCharStream0));
      assertFalse(jVCParserTokenManager1.equals((Object)jVCParserTokenManager3));
      assertFalse(jVCParserTokenManager1.equals((Object)jVCParserTokenManager2));
      assertFalse(jVCParserTokenManager1.equals((Object)jVCParserTokenManager0));
      assertArrayEquals(new char[] {'[', '[', '[', '[', '[', '\u0000', '['}, charArray0);
      assertEquals(0, simpleCharStream1.getBeginColumn());
      assertEquals(0, simpleCharStream1.getBeginLine());
      assertEquals(0, simpleCharStream1.getEndLine());
      assertEquals(0, simpleCharStream1.getColumn());
      assertEquals(0, simpleCharStream1.getLine());
      assertEquals(0, simpleCharStream1.getEndColumn());
      assertNotSame(simpleCharStream1, simpleCharStream2);
      assertNotSame(simpleCharStream1, simpleCharStream0);
      assertNotSame(jVCParserTokenManager1, jVCParserTokenManager3);
      assertNotSame(jVCParserTokenManager1, jVCParserTokenManager2);
      assertNotSame(jVCParserTokenManager1, jVCParserTokenManager0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(4095, simpleCharStream1.bufpos);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      Token token8 = jVCParserTokenManager2.getNextToken();
      assertFalse(simpleCharStream1.equals((Object)simpleCharStream2));
      assertFalse(simpleCharStream1.equals((Object)simpleCharStream0));
      assertFalse(token8.equals((Object)token7));
      assertFalse(token8.equals((Object)token0));
      assertFalse(token8.equals((Object)token6));
      assertFalse(token8.equals((Object)token5));
      assertFalse(token8.equals((Object)token4));
      assertFalse(token8.equals((Object)token1));
      assertFalse(token8.equals((Object)token3));
      assertFalse(token8.equals((Object)token2));
      assertFalse(jVCParserTokenManager2.equals((Object)jVCParserTokenManager1));
      assertFalse(jVCParserTokenManager2.equals((Object)jVCParserTokenManager0));
      assertFalse(jVCParserTokenManager2.equals((Object)jVCParserTokenManager3));
      assertArrayEquals(new char[] {'[', '[', '[', '[', '[', '\u0000', '['}, charArray0);
      assertEquals(0, simpleCharStream1.getBeginColumn());
      assertEquals(0, simpleCharStream1.getBeginLine());
      assertEquals(0, simpleCharStream1.getEndLine());
      assertEquals(0, simpleCharStream1.getColumn());
      assertEquals(0, simpleCharStream1.getLine());
      assertEquals(0, simpleCharStream1.getEndColumn());
      assertEquals("[", token8.toString());
      assertNotSame(simpleCharStream1, simpleCharStream2);
      assertNotSame(simpleCharStream1, simpleCharStream0);
      assertNotSame(token8, token7);
      assertNotSame(token8, token0);
      assertNotSame(token8, token6);
      assertNotSame(token8, token5);
      assertNotSame(token8, token4);
      assertNotSame(token8, token1);
      assertNotSame(token8, token3);
      assertNotSame(token8, token2);
      assertNotSame(jVCParserTokenManager2, jVCParserTokenManager1);
      assertNotSame(jVCParserTokenManager2, jVCParserTokenManager0);
      assertNotSame(jVCParserTokenManager2, jVCParserTokenManager3);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(4095, simpleCharStream1.bufpos);
      assertEquals(16, token8.kind);
      assertEquals(18, token8.beginColumn);
      assertEquals(18, token8.endColumn);
      assertEquals(12, token8.endLine);
      assertEquals(12, token8.beginLine);
      assertNotNull(token8);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      // Undeclared exception!
      try { 
        jVCParserTokenManager1.ReInit(simpleCharStream0, 12);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 12. State unchanged.
         //
         verifyException("com.pmdesigns.jvc.tools.JVCParserTokenManager", e);
      }
  }
}
