/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 24 02:03:14 GMT 2019
 */

package weka.core;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.IOException;
import java.io.StringReader;
import java.util.ArrayList;
import java.util.Comparator;
import java.util.Enumeration;
import java.util.HashSet;
import java.util.Locale;
import java.util.Vector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import weka.core.Attribute;
import weka.core.BinarySparseInstance;
import weka.core.Capabilities;
import weka.core.CapabilitiesHandler;
import weka.core.ClassCache;
import weka.core.ClassDiscovery;
import weka.core.DenseInstance;
import weka.core.FindWithCapabilities;
import weka.core.Instances;
import weka.core.SingleIndex;
import weka.core.SparseInstance;
import weka.core.TestInstances;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class FindWithCapabilities_ESTest extends FindWithCapabilities_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.setClassIndex("1-");
      Capabilities capabilities0 = findWithCapabilities0.getNotCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      findWithCapabilities0.find();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities0.setHandler(findWithCapabilities1);
      FileSystemHandling.shouldAllThrowIOExceptions();
      findWithCapabilities0.getCapabilities();
      findWithCapabilities0.setFilename("weka/core/Capabilities.props");
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      findWithCapabilities2.getCapabilities();
      capabilities0.disableAll();
      findWithCapabilities1.disable((Capabilities.Capability) null);
      String[] stringArray0 = TestInstances.listToArray("/G;Wjb`_Wv9(C");
      findWithCapabilities0.find();
      String[] stringArray1 = findWithCapabilities0.getOptions();
      FindWithCapabilities findWithCapabilities3 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities4 = new FindWithCapabilities();
      findWithCapabilities4.setFilename("Value of \"position\": ");
      FindWithCapabilities.main(stringArray1);
      FindWithCapabilities.main(stringArray0);
      try { 
        findWithCapabilities1.setOptions(testInstances0.DEFAULT_WORDS);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NO_CLASS;
      findWithCapabilities0.enable(capabilities_Capability0);
      String[] stringArray0 = findWithCapabilities0.getOptions();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities1.setHandler(findWithCapabilities0);
      Capabilities capabilities0 = findWithCapabilities0.getCapabilities();
      findWithCapabilities1.find();
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities3 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities4 = new FindWithCapabilities();
      findWithCapabilities1.setCapabilities(capabilities0);
      FindWithCapabilities findWithCapabilities5 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities6 = new FindWithCapabilities();
      findWithCapabilities6.disable(capabilities_Capability0);
      FindWithCapabilities findWithCapabilities7 = new FindWithCapabilities();
      Capabilities capabilities1 = findWithCapabilities5.getNotCapabilities();
      FindWithCapabilities findWithCapabilities8 = new FindWithCapabilities();
      findWithCapabilities8.setHandler(findWithCapabilities5);
      Capabilities capabilities2 = findWithCapabilities5.m_NotCapabilities;
      findWithCapabilities0.setNotCapabilities(capabilities1);
      assertSame(capabilities1, capabilities2);
      
      findWithCapabilities8.enable((Capabilities.Capability) null);
      findWithCapabilities2.getNotCapabilities();
      FindWithCapabilities.main(stringArray0);
      assertEquals(5, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      System.setCurrentTimeMillis(0L);
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities capabilities0 = findWithCapabilities0.getNotCapabilities();
      findWithCapabilities0.m_Capabilities = capabilities0;
      findWithCapabilities0.m_Superclass = "second set of options is null!";
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      capabilities0.test(instances0);
      findWithCapabilities0.m_NotCapabilities = capabilities0;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "weka/core/Capabilities.props";
      stringArray0[1] = ".arff";
      stringArray0[2] = "-not-relational-atts";
      stringArray0[3] = ".arff";
      try { 
        findWithCapabilities0.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.RELATIONAL_ATTRIBUTES;
      findWithCapabilities0.enable(capabilities_Capability0);
      findWithCapabilities0.m_Superclass = "` C0{o`jv-";
      String[] stringArray0 = findWithCapabilities0.getOptions();
      findWithCapabilities0.find();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities1.setHandler(findWithCapabilities0);
      Capabilities capabilities0 = findWithCapabilities0.getCapabilities();
      findWithCapabilities0.find();
      findWithCapabilities1.getCapabilities();
      capabilities0.disableAll();
      TestInstances.listToArray("` C0{o`jv-");
      findWithCapabilities1.setFilename("` C0{o`jv-");
      FindWithCapabilities.main(stringArray0);
      findWithCapabilities0.setFilename("weka/core/Capabilities.props");
      FindWithCapabilities.main(stringArray0);
      Locale.getISOCountries();
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.ONLY_MULTIINSTANCE;
      Locale.getISOLanguages();
      findWithCapabilities0.disable(capabilities_Capability1);
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities3 = new FindWithCapabilities();
      findWithCapabilities0.enableNot(capabilities_Capability1);
      TestInstances testInstances0 = new TestInstances();
      testInstances0.getHandler();
      try { 
        findWithCapabilities1.setOptions(testInstances0.DEFAULT_WORDS);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      findWithCapabilities0.m_Capabilities = null;
      findWithCapabilities0.getCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NUMERIC_CLASS;
      // Undeclared exception!
      try { 
        findWithCapabilities0.enable(capabilities_Capability0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "` 0{o`jv-");
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.EMPTY_NOMINAL_ATTRIBUTES;
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("` 0{o`jv-");
      Capabilities capabilities0 = Capabilities.forInstances(instances0, false);
      findWithCapabilities0.m_Capabilities = capabilities0;
      findWithCapabilities0.disableNot(capabilities_Capability0);
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.UNARY_CLASS;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      SingleIndex singleIndex0 = null;
      findWithCapabilities0.m_GenericPropertiesCreator = false;
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities0.m_Handler = (CapabilitiesHandler) findWithCapabilities1;
      Capabilities capabilities1 = findWithCapabilities0.getNotCapabilities();
      capabilities1.m_MinimumNumberInstances = (-2);
      capabilities1.m_MissingValuesTest = false;
      findWithCapabilities0.setCapabilities(capabilities1);
      // Undeclared exception!
      try { 
        ClassDiscovery.clearClassCache();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.evosuite.instrumentation.InstrumentingClassLoader cannot be cast to java.net.URLClassLoader
         //
         verifyException("weka.core.ClassCache", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "-string-class";
      stringArray0[1] = "EP&bp5/5,i";
      stringArray0[2] = "-not-no-class";
      stringArray0[3] = "#(VKFi@:7";
      String string0 = "T''wpBSENo!?@,+XD3";
      stringArray0[4] = "-not-no-class";
      stringArray0[5] = "yI=\"0X4+CXfN3zP";
      stringArray0[6] = "rST :1Qow<q*!@&P";
      FindWithCapabilities.main(stringArray0);
      Locale.getISOCountries();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities3 = new FindWithCapabilities();
      try { 
        findWithCapabilities0.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.setFilename("AkSG($z!");
      findWithCapabilities0.setClassIndex(":mN5s*w\ns!");
      findWithCapabilities0.setFilename("A?C\" <k9TA");
      String[] stringArray0 = findWithCapabilities0.getOptions();
      findWithCapabilities0.getRevision();
      try { 
        findWithCapabilities0.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Rv");
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NUMERIC_CLASS;
      findWithCapabilities0.enable(capabilities_Capability0);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "-not-numeric-class";
      stringArray0[1] = "]";
      Capabilities capabilities0 = findWithCapabilities0.m_NotCapabilities;
      findWithCapabilities0.m_NotCapabilities = capabilities0;
      try { 
        findWithCapabilities0.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.m_Superclass = "` C0{o`jv-";
      findWithCapabilities0.getOptions();
      findWithCapabilities0.listOptions();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.DATE_CLASS;
      findWithCapabilities0.enableNot(capabilities_Capability0);
      String[] stringArray0 = findWithCapabilities0.getOptions();
      findWithCapabilities0.setClassIndex("?mY2");
      findWithCapabilities0.listOptions();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      Capabilities capabilities0 = new Capabilities(findWithCapabilities1);
      TestInstances.forCapabilities(capabilities0);
      findWithCapabilities1.setOptions(stringArray0);
      assertEquals(5, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.m_Superclass = "` C0{o`jv-";
      String[] stringArray0 = findWithCapabilities0.getOptions();
      findWithCapabilities0.listOptions();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.UNARY_ATTRIBUTES;
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.NUMERIC_ATTRIBUTES;
      findWithCapabilities0.enable(capabilities_Capability1);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "` C0{o`jv-");
      Capabilities.Capability capabilities_Capability2 = Capabilities.Capability.NUMERIC_ATTRIBUTES;
      boolean boolean0 = findWithCapabilities0.isEnabledNot(capabilities_Capability2);
      assertFalse(boolean0);
      
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      Capabilities capabilities0 = findWithCapabilities1.getCapabilities();
      Capabilities capabilities1 = capabilities0.getClassCapabilities();
      Capabilities capabilities2 = capabilities1.getOtherCapabilities();
      Capabilities capabilities3 = capabilities2.getAttributeCapabilities();
      capabilities3.toSource("unary-atts");
      findWithCapabilities1.getMatches();
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      findWithCapabilities2.setCapabilities(capabilities2);
      String[] stringArray1 = findWithCapabilities0.getOptions();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "unary-atts");
      findWithCapabilities0.setClassIndex("[WekaPackageManager] weka.core.WekaPackageRepositoryURL = ");
      findWithCapabilities2.getMisses();
      findWithCapabilities1.setCapabilities(capabilities1);
      findWithCapabilities0.setOptions(stringArray1);
      assertEquals(5, stringArray1.length);
      
      findWithCapabilities2.setOptions(stringArray0);
      FindWithCapabilities findWithCapabilities3 = new FindWithCapabilities();
      findWithCapabilities3.enable(capabilities_Capability0);
      findWithCapabilities0.getOptions();
      assertEquals("", findWithCapabilities0.getFilename());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "b(s:]s6j4";
      stringArray0[1] = "W@-=";
      stringArray0[2] = "-string-class";
      stringArray0[3] = "cifuo#GP@c";
      stringArray0[4] = "b(s:]s6j4";
      stringArray0[5] = "-date-class";
      stringArray0[6] = "b(s:]s6j4";
      try { 
        findWithCapabilities0.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "- allowed: ";
      stringArray0[1] = "$pjD]L=";
      stringArray0[2] = "-missing-att-values";
      stringArray0[3] = "ZK{)%K";
      FindWithCapabilities.main(stringArray0);
      stringArray0[4] = "numeric%-class";
      stringArray0[5] = "@";
      stringArray0[6] = "` C0{o`jv-";
      stringArray0[7] = "-superclass";
      stringArray0[8] = "";
      try { 
        findWithCapabilities0.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Vector<String> vector0 = findWithCapabilities0.find();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.ONLY_MULTIINSTANCE;
      findWithCapabilities0.enable(capabilities_Capability0);
      findWithCapabilities0.m_Packages = vector0;
      Vector<String> vector1 = new Vector<String>();
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.EMPTY_NOMINAL_ATTRIBUTES;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      findWithCapabilities0.disable(capabilities_Capability1);
      findWithCapabilities0.getFilename();
      findWithCapabilities0.listOptions();
      String[] stringArray0 = findWithCapabilities0.getOptions();
      assertEquals(5, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.find();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.RELATIONAL_CLASS;
      findWithCapabilities0.enableNot(capabilities_Capability0);
      String[] stringArray0 = findWithCapabilities0.getOptions();
      try { 
        findWithCapabilities0.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.getFilename();
      findWithCapabilities0.setFilename("]aeUL-k?o9K6`");
      Capabilities capabilities0 = findWithCapabilities0.getCapabilities();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.MISSING_CLASS_VALUES;
      capabilities0.disable(capabilities_Capability0);
      findWithCapabilities0.setCapabilities(capabilities0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "weka/core/Capabilities.props");
      findWithCapabilities0.setCapabilities(capabilities0);
      findWithCapabilities0.enable((Capabilities.Capability) null);
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities1.getRevision();
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      findWithCapabilities2.setCapabilities(capabilities0);
      assertEquals("]aeUL-k?o9K6`", findWithCapabilities0.getFilename());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "-string-class";
      stringArray0[1] = "b(s:]s6j4";
      try { 
        findWithCapabilities0.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.DATE_ATTRIBUTES;
      Capabilities capabilities0 = findWithCapabilities0.m_Capabilities;
      capabilities0.m_InstancesTest = true;
      HashSet<Capabilities.Capability> hashSet0 = new HashSet<Capabilities.Capability>();
      hashSet0.add(capabilities_Capability0);
      hashSet0.add(capabilities_Capability0);
      capabilities0.m_Dependencies = hashSet0;
      capabilities0.m_MissingValuesTest = true;
      findWithCapabilities0.m_NotCapabilities = capabilities0;
      capabilities0.m_MinimumNumberInstances = (-750);
      findWithCapabilities0.getOptions();
      findWithCapabilities0.listOptions();
      findWithCapabilities0.enable(capabilities_Capability0);
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.NUMERIC_CLASS;
      hashSet0.add(capabilities_Capability1);
      findWithCapabilities0.getNotCapabilities();
      Capabilities.Capability capabilities_Capability2 = Capabilities.Capability.STRING_ATTRIBUTES;
      findWithCapabilities0.isEnabledNot(capabilities_Capability2);
      // Undeclared exception!
      try { 
        findWithCapabilities0.setHandler((CapabilitiesHandler) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities capabilities0 = findWithCapabilities0.m_NotCapabilities;
      findWithCapabilities0.setClassIndex("19");
      findWithCapabilities0.getCapabilities();
      capabilities0.getOtherCapabilities();
      Capabilities capabilities1 = findWithCapabilities0.m_NotCapabilities;
      capabilities1.disableAllAttributes();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      capabilities1.enableAllAttributes();
      findWithCapabilities1.setHandler(findWithCapabilities0);
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      findWithCapabilities1.getMatches();
      String[] stringArray0 = findWithCapabilities0.getOptions();
      FindWithCapabilities findWithCapabilities3 = new FindWithCapabilities();
      findWithCapabilities1.setFilename("weka/core/Capabilities.props");
      FindWithCapabilities.main(stringArray0);
      Locale.getISOLanguages();
      FindWithCapabilities findWithCapabilities4 = new FindWithCapabilities();
      String[] stringArray1 = Locale.getISOCountries();
      findWithCapabilities3.setFilename("19");
      FindWithCapabilities findWithCapabilities5 = new FindWithCapabilities();
      FindWithCapabilities.main(stringArray0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/apaniche/wekafiles/props");
      FileSystemHandling.createFolder(evoSuiteFile0);
      findWithCapabilities0.setOptions(stringArray1);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.listOptions();
      Capabilities capabilities0 = findWithCapabilities0.getNotCapabilities();
      capabilities0.toString();
      findWithCapabilities0.setNotCapabilities(capabilities0);
      String[] stringArray0 = new String[3];
      capabilities0.disableAllAttributes();
      stringArray0[0] = "-string-class";
      findWithCapabilities0.listOptions();
      stringArray0[1] = "Capabilities: []\nDependencies: []\nmin # Instance: 1\n";
      stringArray0[2] = "weka/core/Capabilities.props";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "weka/core/Capabilities.props");
      FindWithCapabilities.main(stringArray0);
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.MISSING_CLASS_VALUES;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      findWithCapabilities0.isEnabledNot(capabilities_Capability0);
      findWithCapabilities0.getCapabilities();
      findWithCapabilities0.getCapabilities();
      findWithCapabilities0.getFilename();
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(2L);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.m_Superclass = "`U C?0{o`jv-";
      findWithCapabilities0.getOptions();
      findWithCapabilities0.getMatches();
      findWithCapabilities0.getOptions();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities1.setHandler(findWithCapabilities0);
      Capabilities capabilities0 = findWithCapabilities0.getCapabilities();
      capabilities0.disableAll();
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      Capabilities capabilities1 = capabilities0.getOtherCapabilities();
      Capabilities capabilities2 = capabilities1.getAttributeCapabilities();
      capabilities2.setOwner(findWithCapabilities0);
      FindWithCapabilities findWithCapabilities3 = new FindWithCapabilities();
      findWithCapabilities3.setHandler(findWithCapabilities2);
      capabilities2.disableAll();
      findWithCapabilities1.getMatches();
      findWithCapabilities2.getOptions();
      FindWithCapabilities findWithCapabilities4 = new FindWithCapabilities();
      findWithCapabilities2.setFilename("weka/core/Capabilities.props");
      String[] stringArray0 = Locale.getISOCountries();
      FindWithCapabilities findWithCapabilities5 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities6 = new FindWithCapabilities();
      findWithCapabilities1.setClassIndex("");
      findWithCapabilities3.setNotCapabilities(capabilities2);
      FindWithCapabilities findWithCapabilities7 = new FindWithCapabilities();
      findWithCapabilities3.setOptions(stringArray0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities capabilities0 = findWithCapabilities0.m_NotCapabilities;
      findWithCapabilities0.setClassIndex("19");
      Capabilities capabilities1 = findWithCapabilities0.m_NotCapabilities;
      capabilities1.enableAllClasses();
      Capabilities capabilities2 = capabilities1.getOtherCapabilities();
      Capabilities capabilities3 = findWithCapabilities0.m_NotCapabilities;
      capabilities3.disableAllAttributes();
      capabilities2.m_MissingClassValuesTest = true;
      capabilities3.setOwner(findWithCapabilities0);
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities1.setHandler(findWithCapabilities0);
      capabilities2.disableAll();
      findWithCapabilities0.getMatches();
      String[] stringArray0 = findWithCapabilities1.getOptions();
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      findWithCapabilities0.setFilename("weka/core/Capabilities.props");
      Locale.getISOCountries();
      FindWithCapabilities findWithCapabilities3 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities4 = new FindWithCapabilities();
      findWithCapabilities2.setClassIndex("weka/core/Capabilities.props");
      FindWithCapabilities findWithCapabilities5 = new FindWithCapabilities();
      try { 
        findWithCapabilities4.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.m_Superclass = "`U C?0{o`jv-";
      String[] stringArray0 = findWithCapabilities0.getOptions();
      findWithCapabilities0.getMatches();
      findWithCapabilities0.getOptions();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities1.setHandler(findWithCapabilities0);
      Capabilities capabilities0 = findWithCapabilities0.getCapabilities();
      findWithCapabilities0.find();
      findWithCapabilities1.getCapabilities();
      capabilities0.disableAll();
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      findWithCapabilities2.getMatches();
      String[] stringArray1 = findWithCapabilities1.getOptions();
      FindWithCapabilities findWithCapabilities3 = new FindWithCapabilities();
      findWithCapabilities2.setFilename("DPb{|UOQIfNi@6WF:");
      FindWithCapabilities.main(stringArray0);
      Locale.getISOCountries();
      FindWithCapabilities findWithCapabilities4 = new FindWithCapabilities();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      findWithCapabilities0.setFilename("DPb{|UOQIfNi@6WF:");
      findWithCapabilities3.setClassIndex("n`nh:kUI");
      FindWithCapabilities findWithCapabilities5 = new FindWithCapabilities();
      findWithCapabilities2.setFilename("%4L{IBP");
      findWithCapabilities0.getFilename();
      FindWithCapabilities findWithCapabilities6 = new FindWithCapabilities();
      findWithCapabilities3.getCapabilities();
      try { 
        findWithCapabilities6.setOptions(stringArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities capabilities0 = null;
      String[] stringArray0 = new String[8];
      stringArray0[0] = "uR";
      stringArray0[1] = "Labels differ at position ";
      stringArray0[2] = ", ";
      stringArray0[3] = "not-binary-class";
      stringArray0[4] = "org.pentaho.packageManagement.DefaultPackage";
      stringArray0[5] = "-numeric-class";
      stringArray0[6] = "\nEmpty dataset:\n";
      stringArray0[7] = "Z&-%t";
      try { 
        findWithCapabilities0.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.m_Superclass = "`U C?0{o`jv-";
      String[] stringArray0 = findWithCapabilities0.getOptions();
      findWithCapabilities0.setOptions(stringArray0);
      findWithCapabilities0.find();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities1.setFilename("-relational-class");
      FindWithCapabilities.main(stringArray0);
      Locale.getISOCountries();
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      findWithCapabilities0.setFilename("`U C?0{o`jv-");
      FindWithCapabilities findWithCapabilities3 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities4 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities5 = new FindWithCapabilities();
      findWithCapabilities0.setClassIndex("-not-binary-atts");
      FindWithCapabilities findWithCapabilities6 = new FindWithCapabilities();
      String[] stringArray1 = new String[3];
      stringArray1[0] = "`U C?0{o`jv-";
      stringArray1[1] = "-relational-class";
      stringArray1[2] = "`U C?0{o`jv-";
      try { 
        findWithCapabilities3.setOptions(stringArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities capabilities0 = findWithCapabilities0.m_NotCapabilities;
      findWithCapabilities0.setClassIndex("19");
      findWithCapabilities0.getNotCapabilities();
      String[] stringArray0 = findWithCapabilities0.getOptions();
      findWithCapabilities0.setFilename("Grn%St=J");
      FindWithCapabilities.main(stringArray0);
      Locale.getISOCountries();
      capabilities0.enableAllClassDependencies();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities0.getNotCapabilities();
      findWithCapabilities1.setCapabilities(capabilities0);
      findWithCapabilities1.setFilename("weka/core/Capabilities.props");
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      findWithCapabilities2.getFilename();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      findWithCapabilities1.setClassIndex("19");
      FindWithCapabilities findWithCapabilities3 = new FindWithCapabilities();
      findWithCapabilities1.getCapabilities();
      assertEquals("weka/core/Capabilities.props", findWithCapabilities1.getFilename());
      
      String string0 = findWithCapabilities2.getRevision();
      assertEquals("8034", string0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      System.setCurrentTimeMillis(1348L);
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Capabilities capabilities0 = findWithCapabilities0.m_Capabilities;
      findWithCapabilities0.m_NotCapabilities = capabilities0;
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.STRING_ATTRIBUTES;
      findWithCapabilities0.enable(capabilities_Capability0);
      String[] stringArray0 = findWithCapabilities0.getOptions();
      FindWithCapabilities.main(stringArray0);
      findWithCapabilities0.listOptions();
      Capabilities capabilities1 = capabilities0.getAttributeCapabilities();
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.DATE_ATTRIBUTES;
      findWithCapabilities0.isEnabled(capabilities_Capability1);
      findWithCapabilities0.m_Filename = "weka/core/Capabilities.props";
      findWithCapabilities0.getMisses();
      findWithCapabilities0.getMatches();
      Capabilities.Capability capabilities_Capability2 = Capabilities.Capability.NO_CLASS;
      findWithCapabilities0.disableNot(capabilities_Capability2);
      Capabilities.Capability capabilities_Capability3 = Capabilities.Capability.NUMERIC_ATTRIBUTES;
      findWithCapabilities0.disableNot(capabilities_Capability3);
      Capabilities.Capability capabilities_Capability4 = Capabilities.Capability.UNARY_CLASS;
      findWithCapabilities0.enableNot(capabilities_Capability4);
      findWithCapabilities0.getMatches();
      findWithCapabilities0.getFilename();
      findWithCapabilities0.setNotCapabilities(capabilities0);
      findWithCapabilities0.setFilename("<_A0(h");
      capabilities1.disableAllAttributeDependencies();
      findWithCapabilities0.getCapabilities();
      findWithCapabilities0.isEnabledNot(capabilities_Capability4);
      Random.setNextRandom(93);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.m_Superclass = "`U C?0{o`jv-";
      String[] stringArray0 = findWithCapabilities0.getOptions();
      findWithCapabilities0.getMatches();
      findWithCapabilities0.getOptions();
      Capabilities capabilities0 = findWithCapabilities0.getNotCapabilities();
      capabilities0.disableAll();
      findWithCapabilities0.getMatches();
      findWithCapabilities0.getOptions();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities1.setFilename("DMj%)~n>H");
      FindWithCapabilities.main(stringArray0);
      Locale.getISOCountries();
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      findWithCapabilities1.setFilename("`U C?0{o`jv-");
      FindWithCapabilities findWithCapabilities3 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities4 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities5 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities6 = new FindWithCapabilities();
      findWithCapabilities6.setClassIndex("`U C?0{o`jv-");
      FindWithCapabilities findWithCapabilities7 = new FindWithCapabilities();
      Capabilities capabilities1 = findWithCapabilities3.getCapabilities();
      assertFalse(capabilities1.hasDependencies());
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.m_Superclass = "`U C?0{o`jv-";
      String[] stringArray0 = findWithCapabilities0.getOptions();
      findWithCapabilities0.setOptions(stringArray0);
      assertEquals(4, stringArray0.length);
      
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities0.getMatches();
      assertEquals("", findWithCapabilities0.getFilename());
      
      findWithCapabilities1.getFilename();
      Capabilities capabilities0 = findWithCapabilities1.getNotCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NUMERIC_ATTRIBUTES;
      findWithCapabilities1.enableNot(capabilities_Capability0);
      Capabilities capabilities1 = findWithCapabilities1.getCapabilities();
      assertNotSame(capabilities1, capabilities0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities capabilities0 = findWithCapabilities0.m_Capabilities;
      capabilities0.m_MissingValuesTest = true;
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.STRING_CLASS;
      findWithCapabilities0.enableNot(capabilities_Capability0);
      capabilities0.disableAllClassDependencies();
      findWithCapabilities0.setFilename("`U@_1)QOBO");
      String[] stringArray0 = new String[7];
      stringArray0[0] = "`U@_1)QOBO";
      stringArray0[1] = "`U@_1)QOBO";
      stringArray0[2] = "\n";
      stringArray0[3] = "weka/core/Capabilities.props";
      stringArray0[4] = "weka/core/Capabilities.props";
      stringArray0[5] = "weka/core/Capabilities.props";
      stringArray0[6] = "-not-no-class";
      FindWithCapabilities.main(stringArray0);
      findWithCapabilities0.getNotCapabilities();
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.NUMERIC_ATTRIBUTES;
      findWithCapabilities0.enableNot(capabilities_Capability1);
      findWithCapabilities0.getCapabilities();
      findWithCapabilities0.find();
      assertEquals("`U@_1)QOBO", findWithCapabilities0.getFilename());
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NOMINAL_ATTRIBUTES;
      findWithCapabilities0.enable(capabilities_Capability0);
      String[] stringArray0 = findWithCapabilities0.getOptions();
      try { 
        findWithCapabilities0.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities1.enableNot((Capabilities.Capability) null);
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      findWithCapabilities2.setClassIndex("@X9FG@iqW{fRP^1)9");
      findWithCapabilities0.getOptions();
      findWithCapabilities0.find();
      Capabilities capabilities0 = findWithCapabilities1.m_Capabilities;
      findWithCapabilities1.getRevision();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NO_CLASS;
      capabilities0.disable(capabilities_Capability0);
      findWithCapabilities0.setFilename("kj#6]G");
      findWithCapabilities1.setNotCapabilities(capabilities0);
      findWithCapabilities0.getFilename();
      assertEquals("kj#6]G", findWithCapabilities0.getFilename());
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities capabilities0 = findWithCapabilities0.getNotCapabilities();
      capabilities0.m_MissingValuesTest = true;
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.DATE_CLASS;
      findWithCapabilities0.enableNot(capabilities_Capability0);
      findWithCapabilities0.m_Filename = "`U@_1)QOBO";
      findWithCapabilities0.setFilename("`U@_1)QOBO");
      findWithCapabilities0.m_Matches = null;
      findWithCapabilities0.setCapabilities(capabilities0);
      findWithCapabilities0.getOptions();
      findWithCapabilities0.setFilename("`U@_1)QOBO");
      findWithCapabilities0.getFilename();
      findWithCapabilities0.isEnabled(capabilities_Capability0);
      System.setCurrentTimeMillis(0L);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NUMERIC_ATTRIBUTES;
      findWithCapabilities0.enableNot(capabilities_Capability0);
      findWithCapabilities0.setClassIndex("cifuo#GP@c");
      findWithCapabilities0.getOptions();
      findWithCapabilities0.getMatches();
      Capabilities capabilities0 = findWithCapabilities0.m_Capabilities;
      findWithCapabilities0.getRevision();
      capabilities0.disable(capabilities_Capability0);
      Capabilities capabilities1 = findWithCapabilities0.getCapabilities();
      capabilities1.clone();
      findWithCapabilities0.setNotCapabilities(capabilities1);
      String[] stringArray0 = null;
      ClassCache classCache0 = null;
      try {
        classCache0 = new ClassCache();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.evosuite.instrumentation.InstrumentingClassLoader cannot be cast to java.net.URLClassLoader
         //
         verifyException("weka.core.ClassCache", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.DATE_ATTRIBUTES;
      findWithCapabilities0.enableNot(capabilities_Capability0);
      findWithCapabilities0.setClassIndex("cifuo#GP@c");
      String[] stringArray0 = findWithCapabilities0.getOptions();
      findWithCapabilities0.enableNot(capabilities_Capability0);
      findWithCapabilities0.setFilename("m1(_cbiN;5kc r1bg");
      findWithCapabilities0.getRevision();
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.DATE_CLASS;
      findWithCapabilities0.enable(capabilities_Capability1);
      findWithCapabilities0.getMisses();
      findWithCapabilities0.handles(capabilities_Capability1);
      Capabilities capabilities0 = findWithCapabilities0.getCapabilities();
      findWithCapabilities0.setNotCapabilities(capabilities0);
      Capabilities.Capability capabilities_Capability2 = Capabilities.Capability.BINARY_CLASS;
      findWithCapabilities0.isEnabledNot(capabilities_Capability2);
      try { 
        findWithCapabilities0.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      String[] stringArray0 = findWithCapabilities0.getOptions();
      Capabilities capabilities0 = findWithCapabilities0.getCapabilities();
      FindWithCapabilities.main(stringArray0);
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.MISSING_VALUES;
      capabilities0.enable(capabilities_Capability0);
      capabilities0.toString();
      findWithCapabilities0.setCapabilities(capabilities0);
      findWithCapabilities0.setClassIndex("weka/core/Capabilities.props");
      capabilities0.getOtherCapabilities();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "not-missing-class-values");
      findWithCapabilities0.getOptions();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Random.setNextRandom(12);
      findWithCapabilities0.m_Matches = null;
      FileSystemHandling.shouldAllThrowIOExceptions();
      findWithCapabilities0.m_Superclass = "(tJ}TU,q[[_SF?a6:";
      FindWithCapabilities.main(stringArray0);
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.NOMINAL_CLASS;
      findWithCapabilities0.handles(capabilities_Capability1);
      findWithCapabilities0.m_Capabilities = capabilities0;
      FindWithCapabilities.main(stringArray0);
      findWithCapabilities0.setNotCapabilities(capabilities0);
      FindWithCapabilities.main(stringArray0);
      findWithCapabilities0.getRevision();
      System.setCurrentTimeMillis((-740L));
      findWithCapabilities0.getOptions();
      findWithCapabilities0.enable(capabilities_Capability1);
      assertFalse(capabilities_Capability1.equals((Object)capabilities_Capability0));
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.DATE_ATTRIBUTES;
      findWithCapabilities0.enableNot(capabilities_Capability0);
      findWithCapabilities0.setClassIndex("cifuo#GP@c");
      findWithCapabilities0.getOptions();
      findWithCapabilities0.find();
      Capabilities capabilities0 = findWithCapabilities0.m_Capabilities;
      findWithCapabilities0.getRevision();
      // Undeclared exception!
      try { 
        findWithCapabilities0.setFilename((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.getMisses();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.RELATIONAL_CLASS;
      findWithCapabilities0.enableNot(capabilities_Capability0);
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.BINARY_ATTRIBUTES;
      findWithCapabilities0.enableNot(capabilities_Capability1);
      String[] stringArray0 = findWithCapabilities0.getOptions();
      findWithCapabilities0.setClassIndex("?mY2");
      System.setCurrentTimeMillis((-281L));
      findWithCapabilities0.listOptions();
      FindWithCapabilities.main(stringArray0);
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities1.setFilename("-W");
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      Capabilities capabilities0 = findWithCapabilities2.getCapabilities();
      assertFalse(capabilities0.hasDependencies());
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "weka.core.neighboursearch.PerformanceStats";
      stringArray0[1] = "Str";
      stringArray0[2] = "-numeric-class";
      stringArray0[3] = "%20";
      stringArray0[4] = "'u;S!Dw<sbT&T78f<e";
      stringArray0[5] = "-relational-class";
      stringArray0[6] = "0c<OJ-LuzI*y";
      FindWithCapabilities.main(stringArray0);
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      findWithCapabilities2.getMisses();
      findWithCapabilities2.getNotCapabilities();
      findWithCapabilities0.setHandler(findWithCapabilities1);
      assertEquals("", findWithCapabilities0.getFilename());
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Vector<String> vector0 = findWithCapabilities0.m_Matches;
      vector0.add("@^1x!@0fo(");
      findWithCapabilities0.m_Misses = vector0;
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.MISSING_CLASS_VALUES;
      vector0.add((String) null);
      findWithCapabilities0.enable(capabilities_Capability0);
      findWithCapabilities0.setFilename("-relational-atts");
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(1975).when(comparator0).compare(any() , any());
      vector0.sort(comparator0);
      String[] stringArray0 = findWithCapabilities0.getOptions();
      findWithCapabilities0.getCapabilities();
      findWithCapabilities0.listOptions();
      findWithCapabilities0.getHandler();
      findWithCapabilities0.m_Handler = null;
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.NUMERIC_CLASS;
      findWithCapabilities0.enable(capabilities_Capability1);
      FindWithCapabilities.main(stringArray0);
      FindWithCapabilities.main(stringArray0);
      findWithCapabilities0.getOptions();
      try { 
        findWithCapabilities0.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "I>/:nc9J5;";
      stringArray0[1] = "-string-atts";
      stringArray0[2] = "}Ob,#$AT";
      stringArray0[3] = "Different number of attributes: ";
      stringArray0[4] = "u";
      stringArray0[5] = "GW#R";
      try { 
        findWithCapabilities0.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("Capabilities.props");
      FileSystemHandling.setPermissions(evoSuiteFile0, true, true, false);
      findWithCapabilities0.setFilename("x``gWLBh(J*@s:h='");
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NUMERIC_CLASS;
      findWithCapabilities0.enable(capabilities_Capability0);
      boolean boolean0 = findWithCapabilities0.isEnabled(capabilities_Capability0);
      assertEquals("x``gWLBh(J*@s:h='", findWithCapabilities0.getFilename());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NO_CLASS;
      findWithCapabilities0.enableNot(capabilities_Capability0);
      findWithCapabilities0.getOptions();
      // Undeclared exception!
      try { 
        findWithCapabilities0.setClassIndex((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/apaniche/wekafiles/props/Capabilities.props");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.setFilename("-not-unary-class");
      String[] stringArray0 = new String[9];
      stringArray0[0] = "-not-unary-class";
      stringArray0[1] = "-not-unary-class";
      stringArray0[2] = "-not-unary-class";
      stringArray0[3] = "-not-unary-class";
      stringArray0[4] = "-not-unary-class";
      stringArray0[5] = "-not-unary-class";
      stringArray0[6] = "-not-unary-class";
      stringArray0[7] = "-not-unary-class";
      stringArray0[8] = "-not-unary-class";
      FindWithCapabilities.main(stringArray0);
      findWithCapabilities0.getMisses();
      findWithCapabilities0.getMatches();
      assertEquals("-not-unary-class", findWithCapabilities0.getFilename());
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.ONLY_MULTIINSTANCE;
      findWithCapabilities0.enable(capabilities_Capability0);
      assertEquals("", findWithCapabilities0.getFilename());
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "EhRy|tVy`6Qlgi0O0A";
      stringArray0[1] = "O:G:`m3WyfX";
      stringArray0[2] = "PHU0cg{[}*XT|6m['W.";
      stringArray0[3] = "I8ie@g:Sl,Ey";
      stringArray0[4] = ",*m8}%";
      stringArray0[5] = "?mY";
      stringArray0[6] = "JfrfG\"u/|3Awq";
      FindWithCapabilities.main(stringArray0);
      String[] stringArray1 = new String[8];
      stringArray1[0] = "\tThe class index, with -1=last, (default -1).";
      stringArray1[1] = "F_c?@7RX&>";
      stringArray1[2] = "\tMust handle numeric classes.";
      stringArray1[3] = "eK7`o.cKRK_Es!GIZ";
      stringArray1[4] = "=aXuMQCnK}\"[*6GieIe";
      stringArray1[5] = "-not-date-atts";
      stringArray1[6] = "5.7 < 5.70001 ? ";
      stringArray1[7] = "\ntoString():\n";
      FindWithCapabilities.main(stringArray1);
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.RELATIONAL_ATTRIBUTES;
      findWithCapabilities0.enableNot(capabilities_Capability0);
      System.setCurrentTimeMillis(0L);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "last";
      stringArray0[1] = "-not-string-class";
      stringArray0[2] = "-1";
      try { 
        findWithCapabilities0.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "-not-binary-class");
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.setClassIndex("\tSuppresses printing in the console.");
      findWithCapabilities0.getFilename();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "-not-binary-class";
      stringArray0[1] = "FXy{7|(xT;aj[#";
      try { 
        findWithCapabilities0.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "G\"Jr";
      stringArray0[1] = "-not-binary-atts";
      stringArray0[2] = "yoD5KmA*M";
      stringArray0[3] = "7~}Ud')*f~,^-Q1Y";
      stringArray0[4] = "4()0`Z0";
      try { 
        findWithCapabilities0.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities capabilities0 = findWithCapabilities0.m_Capabilities;
      findWithCapabilities0.setClassIndex("weka/core/Capabilities.props");
      findWithCapabilities0.setFilename("weka/core/Capabilities.props");
      findWithCapabilities0.m_Matches = null;
      findWithCapabilities0.setCapabilities(capabilities0);
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NO_CLASS;
      findWithCapabilities1.disableNot(capabilities_Capability0);
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      findWithCapabilities2.getMatches();
      capabilities0.toSource("-not-missing-att-values", 40);
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.NO_CLASS;
      capabilities0.enableAllAttributeDependencies();
      findWithCapabilities0.isEnabledNot(capabilities_Capability1);
      findWithCapabilities0.setCapabilities(capabilities0);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "                                        weka.core.Capabilities -not-missing-att-values = new weka.core.Capabilities(this);\n\n\n\n                                        -not-missing-att-values.setMinimumNumberInstances(1);\n\n";
      stringArray0[1] = "-not-missing-att-values";
      try { 
        findWithCapabilities1.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      byte[] byteArray0 = new byte[7];
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byteArray0[0] = (byte)47;
      byteArray0[1] = (byte)20;
      byteArray0[2] = (byte)61;
      byteArray0[3] = (byte) (-63);
      byteArray0[4] = (byte)15;
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities1.setFilename("81-106");
      String[] stringArray0 = new String[6];
      stringArray0[0] = "81-106";
      stringArray0[1] = "81-106";
      stringArray0[2] = "81-106";
      stringArray0[3] = "81-106";
      stringArray0[4] = "81-106";
      stringArray0[5] = "-unary-atts";
      try { 
        findWithCapabilities0.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "b@");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "b@");
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.m_GenericPropertiesCreator = true;
      Vector<String> vector0 = findWithCapabilities0.m_Misses;
      findWithCapabilities0.m_Matches = vector0;
      findWithCapabilities0.getMatches();
      vector0.add("numeric-atts");
      findWithCapabilities0.find();
      vector0.addElement("i");
      vector0.parallelStream();
      String string0 = ":8D";
      vector0.add(":8D");
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.UNARY_CLASS;
      findWithCapabilities0.enable(capabilities_Capability0);
      vector0.add("b@");
      Capabilities capabilities0 = findWithCapabilities0.getCapabilities();
      findWithCapabilities0.getOptions();
      findWithCapabilities0.find();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      CapabilitiesHandler capabilitiesHandler0 = testInstances0.m_Handler;
      // Undeclared exception!
      try { 
        findWithCapabilities0.setHandler((CapabilitiesHandler) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.getCapabilities();
      findWithCapabilities0.find();
      Capabilities capabilities0 = findWithCapabilities0.getCapabilities();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      capabilities0.getAttributeCapabilities();
      Capabilities capabilities1 = capabilities0.getOtherCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities1);
      testInstances0.setRelationalClassFormat((Instances) null);
      CapabilitiesHandler capabilitiesHandler0 = testInstances0.m_Handler;
      findWithCapabilities0.setClassIndex("-1");
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NOMINAL_ATTRIBUTES;
      findWithCapabilities0.enableNot(capabilities_Capability0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/apaniche/wekafiles/props/Capabilities.props");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      FindWithCapabilities.main(testInstances0.DEFAULT_WORDS);
      findWithCapabilities0.getClassIndex();
      findWithCapabilities0.setFilename("mpd");
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      Enumeration enumeration0 = findWithCapabilities1.listOptions();
      assertNotNull(enumeration0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      findWithCapabilities0.m_NotCapabilities = null;
      findWithCapabilities0.getNotCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.STRING_CLASS;
      // Undeclared exception!
      try { 
        findWithCapabilities0.disableNot(capabilities_Capability0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      Capabilities capabilities0 = findWithCapabilities1.m_Capabilities;
      findWithCapabilities0.setCapabilities(capabilities0);
      findWithCapabilities0.setClassIndex("weka/core/Capabilities.props");
      System.setCurrentTimeMillis(22L);
      findWithCapabilities1.find();
      findWithCapabilities1.setFilename(".*.");
      findWithCapabilities1.getFilename();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.BINARY_ATTRIBUTES;
      findWithCapabilities1.isEnabledNot(capabilities_Capability0);
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      findWithCapabilities2.getFilename();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "-numeric-atts";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "weka/core/Capabilities.props";
      stringArray0[5] = "Type: ";
      stringArray0[6] = "weka/core/Capabilities.props";
      FindWithCapabilities.main(stringArray0);
      // Undeclared exception!
      try { 
        findWithCapabilities2.getClassIndex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No index set
         //
         verifyException("weka.core.SingleIndex", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.find();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.RELATIONAL_CLASS;
      findWithCapabilities0.enableNot(capabilities_Capability0);
      findWithCapabilities0.m_GenericPropertiesCreator = true;
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.EMPTY_NOMINAL_CLASS;
      findWithCapabilities0.enableNot(capabilities_Capability1);
      String[] stringArray0 = findWithCapabilities0.getOptions();
      findWithCapabilities0.setClassIndex("?mY2");
      System.setCurrentTimeMillis(2131L);
      findWithCapabilities0.listOptions();
      FindWithCapabilities.main(stringArray0);
      // Undeclared exception!
      try { 
        findWithCapabilities0.setFilename((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.getRevision();
      findWithCapabilities0.setClassIndex("H6");
      Vector<String> vector0 = new Vector<String>();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities0.disableNot((Capabilities.Capability) null);
      Capabilities capabilities0 = findWithCapabilities1.m_Capabilities;
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      findWithCapabilities2.getMatches();
      findWithCapabilities0.isEnabledNot((Capabilities.Capability) null);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "weka/core/Capabilities.props";
      stringArray0[1] = "8034";
      stringArray0[2] = "weka/core/Capabilities.props";
      stringArray0[3] = "8034";
      stringArray0[4] = "]aeUL-k?o9K6`";
      try { 
        findWithCapabilities1.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities capabilities0 = findWithCapabilities0.m_Capabilities;
      findWithCapabilities0.setClassIndex("weka/core/Capabilities.props");
      findWithCapabilities0.setFilename("weka/core/Capabilities.props");
      findWithCapabilities0.m_Matches = null;
      findWithCapabilities0.setCapabilities(capabilities0);
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.BINARY_ATTRIBUTES;
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities0.m_Handler = (CapabilitiesHandler) findWithCapabilities1;
      findWithCapabilities0.disableNot(capabilities_Capability0);
      findWithCapabilities0.getMatches();
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.NO_CLASS;
      capabilities0.enableAllAttributeDependencies();
      findWithCapabilities0.isEnabledNot(capabilities_Capability1);
      findWithCapabilities0.setCapabilities(capabilities0);
      assertEquals("weka/core/Capabilities.props", findWithCapabilities0.getFilename());
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.getCapabilities();
      findWithCapabilities0.find();
      Capabilities capabilities0 = findWithCapabilities0.getCapabilities();
      capabilities0.getAttributeCapabilities();
      Capabilities capabilities1 = capabilities0.getOtherCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities1);
      CapabilitiesHandler capabilitiesHandler0 = testInstances0.m_Handler;
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities1.setHandler(findWithCapabilities0);
      findWithCapabilities0.getMatches();
      String[] stringArray0 = findWithCapabilities1.getOptions();
      findWithCapabilities0.setFilename(" the following packages will");
      try { 
        findWithCapabilities1.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.getCapabilities();
      findWithCapabilities0.find();
      Capabilities capabilities0 = findWithCapabilities0.m_NotCapabilities;
      Capabilities capabilities1 = capabilities0.getAttributeCapabilities();
      Capabilities capabilities2 = capabilities1.getAttributeCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities2);
      CapabilitiesHandler capabilitiesHandler0 = testInstances0.m_Handler;
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities1.setHandler(findWithCapabilities0);
      findWithCapabilities1.getMatches();
      findWithCapabilities1.getOptions();
      findWithCapabilities0.setFilename("P");
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      findWithCapabilities2.getFilename();
      findWithCapabilities2.getNotCapabilities();
      findWithCapabilities1.setNotCapabilities(capabilities2);
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NUMERIC_ATTRIBUTES;
      findWithCapabilities2.enableNot(capabilities_Capability0);
      // Undeclared exception!
      try { 
        findWithCapabilities0.setNotCapabilities((Capabilities) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.getNotCapabilities();
      findWithCapabilities0.getNotCapabilities();
      Capabilities capabilities0 = findWithCapabilities0.getCapabilities();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      Capabilities capabilities1 = findWithCapabilities1.getCapabilities();
      capabilities1.enableAll();
      capabilities1.or(capabilities0);
      capabilities1.getOtherCapabilities();
      Capabilities capabilities2 = findWithCapabilities1.getCapabilities();
      findWithCapabilities1.setNotCapabilities(capabilities2);
      System.setCurrentTimeMillis(0L);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      TestInstances testInstances0 = new TestInstances();
      testInstances0.clone();
      testInstances0.m_NumDate = 1463;
      findWithCapabilities0.m_Superclass = " ";
      Capabilities capabilities0 = findWithCapabilities0.getCapabilities();
      TestInstances.forCapabilities(capabilities0);
      testInstances0.m_NumRelationalDate = 102;
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NUMERIC_CLASS;
      findWithCapabilities0.enableNot(capabilities_Capability0);
      findWithCapabilities0.setNotCapabilities(capabilities0);
      try { 
        findWithCapabilities0.setOptions(testInstances0.DEFAULT_WORDS);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities1.getRevision();
      Vector<String> vector0 = findWithCapabilities1.m_Misses;
      vector0.add("8034");
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NO_CLASS;
      findWithCapabilities1.enable(capabilities_Capability0);
      findWithCapabilities1.setFilename("\tSuperclass to look for in the packages.\n");
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vector0.sort(comparator0);
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      findWithCapabilities1.getOptions();
      findWithCapabilities0.getCapabilities();
      findWithCapabilities0.listOptions();
      findWithCapabilities1.getHandler();
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.EMPTY_NOMINAL_CLASS;
      findWithCapabilities0.enable(capabilities_Capability1);
      // Undeclared exception!
      try { 
        findWithCapabilities1.getClassIndex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No index set
         //
         verifyException("weka.core.SingleIndex", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities1.getRevision();
      findWithCapabilities1.getRevision();
      findWithCapabilities1.setClassIndex("H6");
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.MISSING_CLASS_VALUES;
      findWithCapabilities1.isEnabled(capabilities_Capability0);
      findWithCapabilities0.enableNot(capabilities_Capability0);
      String[] stringArray0 = findWithCapabilities0.getOptions();
      findWithCapabilities1.getCapabilities();
      findWithCapabilities0.listOptions();
      findWithCapabilities0.getHandler();
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.UNARY_ATTRIBUTES;
      findWithCapabilities0.enable(capabilities_Capability1);
      findWithCapabilities1.getCapabilities();
      try { 
        findWithCapabilities0.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities1.getRevision();
      String string0 = findWithCapabilities1.getRevision();
      assertEquals("8034", string0);
      
      findWithCapabilities1.setClassIndex("8034");
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.MISSING_CLASS_VALUES;
      findWithCapabilities1.isEnabled(capabilities_Capability0);
      findWithCapabilities1.enableNot(capabilities_Capability0);
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities3 = new FindWithCapabilities();
      findWithCapabilities3.setHandler(findWithCapabilities2);
      findWithCapabilities3.setHandler(findWithCapabilities1);
      findWithCapabilities0.getNotCapabilities();
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.ONLY_MULTIINSTANCE;
      findWithCapabilities1.disable(capabilities_Capability1);
      String[] stringArray0 = findWithCapabilities1.getOptions();
      assertEquals(5, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities1.getRevision();
      String string0 = findWithCapabilities1.getRevision();
      assertEquals("8034", string0);
      
      findWithCapabilities1.setClassIndex("8034");
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.MISSING_CLASS_VALUES;
      findWithCapabilities1.isEnabled(capabilities_Capability0);
      findWithCapabilities0.enableNot(capabilities_Capability0);
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      findWithCapabilities2.setHandler(findWithCapabilities0);
      findWithCapabilities2.setHandler(findWithCapabilities1);
      findWithCapabilities0.getNotCapabilities();
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.ONLY_MULTIINSTANCE;
      findWithCapabilities1.disable(capabilities_Capability1);
      String[] stringArray0 = findWithCapabilities2.getOptions();
      assertEquals(11, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities capabilities0 = findWithCapabilities0.m_Capabilities;
      findWithCapabilities0.setClassIndex("weka/core/Capabilities.props");
      findWithCapabilities0.setFilename("`U@_1)QOBO");
      findWithCapabilities0.m_Matches = null;
      findWithCapabilities0.getOptions();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      findWithCapabilities2.disableNot((Capabilities.Capability) null);
      Capabilities capabilities1 = findWithCapabilities0.m_Capabilities;
      String[] stringArray0 = new String[5];
      stringArray0[0] = "\tThe number of nominal attributes (default 1).";
      stringArray0[1] = "\tMust handle relational attributes.";
      stringArray0[2] = "weka/core/Capabilities.props";
      stringArray0[3] = "weka/core/Capabilities.props";
      stringArray0[4] = "`U@_1)QOBO";
      FindWithCapabilities.main(stringArray0);
      FindWithCapabilities findWithCapabilities3 = new FindWithCapabilities();
      findWithCapabilities3.getFilename();
      FindWithCapabilities findWithCapabilities4 = new FindWithCapabilities();
      System.setCurrentTimeMillis(0L);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Vector<String> vector0 = findWithCapabilities0.find();
      findWithCapabilities0.m_Superclass = "weka.core.OptionHandlerJavadoc";
      Vector<String> vector1 = findWithCapabilities0.getMisses();
      assertNotSame(vector1, vector0);
      
      String[] stringArray0 = findWithCapabilities0.getOptions();
      assertEquals(4, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Vector<String> vector0 = findWithCapabilities0.m_Matches;
      vector0.add("@^1x!@0fo(");
      findWithCapabilities0.m_Misses = vector0;
      vector0.add((String) null);
      findWithCapabilities0.setFilename("-relational-atts");
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(10).when(comparator0).compare(any() , any());
      vector0.sort(comparator0);
      findWithCapabilities0.getOptions();
      Capabilities capabilities0 = findWithCapabilities0.getCapabilities();
      capabilities0.createMessage("string-class");
      findWithCapabilities0.setClassIndex("weka/core/Capabilities.props");
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NOMINAL_CLASS;
      findWithCapabilities0.isEnabled(capabilities_Capability0);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "@^1x!@0fo(";
      stringArray0[1] = null;
      FindWithCapabilities.main((String[]) null);
      findWithCapabilities0.getMisses();
      assertEquals("-relational-atts", findWithCapabilities0.getFilename());
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities0.getRevision();
      findWithCapabilities1.getRevision();
      Vector<String> vector0 = findWithCapabilities0.m_Misses;
      vector0.trimToSize();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "8034";
      stringArray0[1] = "8034";
      stringArray0[2] = "8034";
      stringArray0[3] = "8034";
      stringArray0[4] = "8034";
      stringArray0[5] = "9R(F<I(g";
      stringArray0[6] = "8034";
      stringArray0[7] = "9R(F<I(g";
      FindWithCapabilities.main(stringArray0);
      findWithCapabilities0.getMisses();
      findWithCapabilities0.setClassIndex("8034");
      assertEquals("", findWithCapabilities0.getFilename());
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.setClassIndex("S]k");
      Capabilities capabilities0 = findWithCapabilities0.m_Capabilities;
      capabilities0.enableAllAttributes();
      findWithCapabilities0.setFilename("PWOW4*Zd (^-5#=@ Zb");
      findWithCapabilities0.setCapabilities(capabilities0);
      String[] stringArray0 = findWithCapabilities0.getOptions();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.EMPTY_NOMINAL_ATTRIBUTES;
      findWithCapabilities0.disableNot(capabilities_Capability0);
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.DATE_CLASS;
      findWithCapabilities0.enable(capabilities_Capability1);
      findWithCapabilities0.getCapabilities();
      try { 
        findWithCapabilities0.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities capabilities0 = findWithCapabilities0.m_Capabilities;
      capabilities0.m_MissingValuesTest = true;
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.STRING_CLASS;
      findWithCapabilities0.enableNot(capabilities_Capability0);
      findWithCapabilities0.setFilename("`U@_1)QOBO");
      findWithCapabilities0.m_Matches = null;
      findWithCapabilities0.setCapabilities(capabilities0);
      findWithCapabilities0.getOptions();
      findWithCapabilities0.setFilename("`U@_1)QOBO");
      findWithCapabilities0.getFilename();
      findWithCapabilities0.getNotCapabilities();
      assertEquals("`U@_1)QOBO", findWithCapabilities0.getFilename());
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NUMERIC_CLASS;
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.NUMERIC_CLASS;
      findWithCapabilities0.m_Filename = "GK9,T7vU nJCr~";
      findWithCapabilities0.enable(capabilities_Capability1);
      findWithCapabilities0.handles(capabilities_Capability0);
      findWithCapabilities0.getRevision();
      System.setCurrentTimeMillis(2065L);
      System.setCurrentTimeMillis(2065L);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.find();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "D]^bvc2r@";
      stringArray0[1] = "-date-atts";
      stringArray0[2] = ". instance";
      stringArray0[3] = "X*UR`S";
      stringArray0[4] = "O/]'ezN]ff6$+q}";
      stringArray0[5] = "y ~iqr>H";
      stringArray0[6] = "z|`mv5";
      stringArray0[7] = "Length of copy missing: ";
      stringArray0[8] = "r5\"dUS878hBxHJy:,r";
      FindWithCapabilities.main(stringArray0);
      ClassCache classCache0 = null;
      try {
        classCache0 = new ClassCache();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.evosuite.instrumentation.InstrumentingClassLoader cannot be cast to java.net.URLClassLoader
         //
         verifyException("weka.core.ClassCache", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.getOptions();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.RELATIONAL_ATTRIBUTES;
      Vector<String> vector0 = findWithCapabilities0.m_Packages;
      findWithCapabilities0.m_Packages = vector0;
      findWithCapabilities0.handles(capabilities_Capability0);
      Vector<String> vector1 = findWithCapabilities0.find();
      findWithCapabilities0.m_Matches = vector1;
      String[] stringArray0 = new String[1];
      stringArray0[0] = "9R(F<I(g";
      FindWithCapabilities.main(stringArray0);
      System.setCurrentTimeMillis(0L);
      findWithCapabilities0.getFilename();
      findWithCapabilities0.setClassIndex("");
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.NO_CLASS;
      findWithCapabilities0.isEnabled(capabilities_Capability1);
      System.setCurrentTimeMillis(0L);
      findWithCapabilities0.listOptions();
      try { 
        findWithCapabilities0.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities capabilities0 = findWithCapabilities0.m_Capabilities;
      findWithCapabilities0.setClassIndex("weka/core/Capabilities.props");
      findWithCapabilities0.setFilename("`U@_1)QOBO");
      findWithCapabilities0.m_Matches = null;
      findWithCapabilities0.setCapabilities(capabilities0);
      String[] stringArray0 = findWithCapabilities0.getOptions();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NOMINAL_ATTRIBUTES;
      findWithCapabilities0.disableNot(capabilities_Capability0);
      findWithCapabilities0.getCapabilities();
      FindWithCapabilities.main(stringArray0);
      findWithCapabilities0.setCapabilities(capabilities0);
      // Undeclared exception!
      try { 
        findWithCapabilities0.getClassIndex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No upper limit has been specified for index
         //
         verifyException("weka.core.SingleIndex", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Random.setNextRandom((-1523));
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NUMERIC_CLASS;
      findWithCapabilities0.enableNot(capabilities_Capability0);
      String[] stringArray0 = findWithCapabilities0.getOptions();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.DATE_ATTRIBUTES;
      findWithCapabilities0.isEnabled(capabilities_Capability1);
      findWithCapabilities0.isEnabled(capabilities_Capability1);
      Capabilities.Capability capabilities_Capability2 = Capabilities.Capability.UNARY_CLASS;
      findWithCapabilities0.isEnabledNot(capabilities_Capability2);
      DenseInstance denseInstance0 = new DenseInstance(258);
      SparseInstance sparseInstance0 = new SparseInstance(denseInstance0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(sparseInstance0);
      Attribute attribute0 = new Attribute("!s(ej>fDz&nxU", 6);
      Attribute.main(stringArray0);
      Instances instances0 = null;
      try {
        instances0 = new Instances("#W\"0*", (ArrayList<Attribute>) null, (-1523));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Instances", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.getCapabilities();
      Vector<String> vector0 = findWithCapabilities0.m_Misses;
      findWithCapabilities0.m_Matches = vector0;
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities0.setHandler(findWithCapabilities1);
      findWithCapabilities0.listOptions();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NUMERIC_ATTRIBUTES;
      findWithCapabilities1.enable(capabilities_Capability0);
      findWithCapabilities0.getHandler();
      findWithCapabilities1.getMisses();
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.RELATIONAL_CLASS;
      int int0 = (-518);
      // Undeclared exception!
      try { 
        vector0.subList(841, (-518));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fromIndex(841) > toIndex(-518)
         //
         verifyException("java.util.SubList", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.getMatches();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.ONLY_MULTIINSTANCE;
      findWithCapabilities0.getRevision();
      findWithCapabilities0.isEnabledNot(capabilities_Capability0);
      findWithCapabilities0.isEnabledNot(capabilities_Capability0);
      findWithCapabilities0.m_GenericPropertiesCreator = false;
      findWithCapabilities0.getFilename();
      findWithCapabilities0.getRevision();
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.NOMINAL_CLASS;
      findWithCapabilities0.enableNot(capabilities_Capability1);
      Capabilities.Capability capabilities_Capability2 = Capabilities.Capability.ONLY_MULTIINSTANCE;
      findWithCapabilities0.disableNot(capabilities_Capability2);
      findWithCapabilities0.getMatches();
      findWithCapabilities0.listOptions();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      findWithCapabilities0.isEnabledNot(capabilities_Capability2);
      findWithCapabilities0.disable(capabilities_Capability2);
      String string0 = findWithCapabilities0.getFilename();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.getRevision();
      String[] stringArray0 = new String[4];
      Vector<String> vector0 = findWithCapabilities0.m_Matches;
      findWithCapabilities0.m_Misses = vector0;
      vector0.add("8034");
      stringArray0[0] = "8034";
      Capabilities capabilities0 = findWithCapabilities0.getNotCapabilities();
      Capabilities capabilities1 = capabilities0.getOtherCapabilities();
      findWithCapabilities0.m_NotCapabilities = capabilities1;
      stringArray0[1] = "8034";
      stringArray0[2] = "8034";
      FindWithCapabilities.main(stringArray0);
      findWithCapabilities0.getMatches();
      findWithCapabilities0.getRevision();
      findWithCapabilities0.getRevision();
      capabilities0.enableAllClasses();
      SingleIndex singleIndex0 = findWithCapabilities0.m_ClassIndex;
      findWithCapabilities0.m_ClassIndex = singleIndex0;
      findWithCapabilities0.getFilename();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.BINARY_CLASS;
      vector0.add("");
      findWithCapabilities0.isEnabledNot(capabilities_Capability0);
      Enumeration enumeration0 = findWithCapabilities0.listOptions();
      assertNotNull(enumeration0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      String[] stringArray0 = new String[0];
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FindWithCapabilities.main(stringArray0);
      findWithCapabilities0.setFilename("kRn");
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.BINARY_ATTRIBUTES;
      findWithCapabilities0.handles(capabilities_Capability0);
      findWithCapabilities0.listOptions();
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.ONLY_MULTIINSTANCE;
      findWithCapabilities0.handles(capabilities_Capability1);
      findWithCapabilities0.setClassIndex("^0k+g");
      // Undeclared exception!
      try { 
        findWithCapabilities0.getClassIndex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No upper limit has been specified for index
         //
         verifyException("weka.core.SingleIndex", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      String[] stringArray0 = new String[0];
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      FindWithCapabilities.main(stringArray0);
      Vector<String> vector0 = findWithCapabilities0.getMisses();
      Vector<String> vector1 = findWithCapabilities0.find();
      assertTrue(vector1.equals((Object)vector0));
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "DoVU*yMI3V+FC";
      stringArray0[1] = "`";
      stringArray0[2] = "All class and attribute options can be prefixed with 'not',\ne.g., '-not-numeric-class'. This makes sure that the returned\nschemes 'cannot' handle numeric classes.";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "w8*bxmM5d.25&a");
      stringArray0[3] = "-only-multiinstance";
      stringArray0[4] = "Tgo3f4%BVUkr";
      stringArray0[5] = "fRLp,_Hrmf$";
      stringArray0[6] = "j'aJ_nN{is";
      stringArray0[7] = "3kB;[1l9^rZO F/PK#";
      try { 
        findWithCapabilities0.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.BINARY_ATTRIBUTES;
      findWithCapabilities0.handles(capabilities_Capability0);
      findWithCapabilities0.getFilename();
      String string0 = findWithCapabilities0.m_Filename;
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.NOMINAL_ATTRIBUTES;
      findWithCapabilities0.enableNot(capabilities_Capability1);
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability2 = Capabilities.Capability.ONLY_MULTIINSTANCE;
      findWithCapabilities1.disableNot(capabilities_Capability2);
      findWithCapabilities0.getMatches();
      findWithCapabilities0.isEnabledNot(capabilities_Capability0);
      Random.setNextRandom((-1845216178));
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities capabilities0 = findWithCapabilities0.m_Capabilities;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities1.setClassIndex("Can only remove value of nominal, string or relation- valued attribute!");
      Vector<String> vector0 = findWithCapabilities1.find();
      vector0.add("-nominal-atts");
      Vector<String> vector1 = findWithCapabilities1.m_Misses;
      vector1.addElement("-1");
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "-not-unary-atts";
      stringArray0[1] = "-not-unary-atts";
      stringArray0[2] = "weka/core/Capabilities.props";
      stringArray0[3] = "-nominal-atts";
      stringArray0[4] = "weka/core/Capabilities.props";
      stringArray0[5] = "-nominal-atts";
      stringArray0[6] = "-not-unary-atts";
      try { 
        findWithCapabilities2.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.getFilename();
      findWithCapabilities0.setFilename("]aeUL-k?o9K6`");
      Capabilities capabilities0 = findWithCapabilities0.getCapabilities();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.MISSING_CLASS_VALUES;
      capabilities0.disable(capabilities_Capability0);
      findWithCapabilities0.setCapabilities(capabilities0);
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.MISSING_CLASS_VALUES;
      findWithCapabilities0.enableNot(capabilities_Capability1);
      findWithCapabilities0.find();
      findWithCapabilities0.getNotCapabilities();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      // Undeclared exception!
      try { 
        ClassDiscovery.clearClassCache();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.evosuite.instrumentation.InstrumentingClassLoader cannot be cast to java.net.URLClassLoader
         //
         verifyException("weka.core.ClassCache", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      Capabilities capabilities0 = findWithCapabilities1.m_NotCapabilities;
      Capabilities capabilities1 = capabilities0.getClassCapabilities();
      capabilities1.getAttributeCapabilities();
      findWithCapabilities0.setCapabilities(capabilities1);
      String[] stringArray0 = null;
      try { 
        findWithCapabilities0.setOptions((String[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.getFilename();
      findWithCapabilities0.setFilename("]aeUL-k?o9K6`");
      Capabilities capabilities0 = findWithCapabilities0.getCapabilities();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.MISSING_CLASS_VALUES;
      capabilities0.disable(capabilities_Capability0);
      findWithCapabilities0.setCapabilities(capabilities0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.NOMINAL_CLASS;
      findWithCapabilities0.enableNot(capabilities_Capability1);
      findWithCapabilities0.getOptions();
      Capabilities.Capability capabilities_Capability2 = Capabilities.Capability.DATE_CLASS;
      findWithCapabilities0.isEnabled(capabilities_Capability2);
      findWithCapabilities0.getHandler();
      findWithCapabilities0.setCapabilities(capabilities0);
      assertEquals("]aeUL-k?o9K6`", findWithCapabilities0.getFilename());
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Vector<String> vector0 = findWithCapabilities0.getMatches();
      findWithCapabilities0.m_Misses = vector0;
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.ONLY_MULTIINSTANCE;
      findWithCapabilities0.isEnabledNot(capabilities_Capability0);
      boolean boolean0 = findWithCapabilities0.isEnabled(capabilities_Capability0);
      findWithCapabilities0.m_GenericPropertiesCreator = false;
      findWithCapabilities0.getFilename();
      findWithCapabilities0.getRevision();
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.BINARY_ATTRIBUTES;
      Capabilities.Capability capabilities_Capability2 = Capabilities.Capability.NOMINAL_CLASS;
      findWithCapabilities0.enableNot(capabilities_Capability2);
      findWithCapabilities0.disableNot(capabilities_Capability1);
      findWithCapabilities0.getMatches();
      findWithCapabilities0.listOptions();
      Capabilities.Capability capabilities_Capability3 = Capabilities.Capability.DATE_ATTRIBUTES;
      boolean boolean1 = findWithCapabilities0.isEnabledNot(capabilities_Capability3);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Vector<String> vector0 = findWithCapabilities0.getMatches();
      vector0.add("Parameters first and/or toCopy out of range");
      findWithCapabilities0.m_Packages = vector0;
      findWithCapabilities0.m_Filename = ";KtC2[<TumDy?23";
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      Capabilities capabilities0 = new Capabilities(findWithCapabilities1);
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NOMINAL_ATTRIBUTES;
      capabilities0.enableDependency(capabilities_Capability0);
      capabilities0.disableAllClasses();
      findWithCapabilities0.setCapabilities(capabilities0);
      assertFalse(findWithCapabilities0.equals((Object)findWithCapabilities1));
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NOMINAL_CLASS;
      // Undeclared exception!
      try { 
        findWithCapabilities0.setFilename((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.MISSING_CLASS_VALUES;
      findWithCapabilities0.enableNot(capabilities_Capability0);
      Capabilities capabilities0 = findWithCapabilities0.m_Capabilities;
      findWithCapabilities0.setNotCapabilities(capabilities0);
      FindWithCapabilities.main((String[]) null);
      Vector<String> vector0 = findWithCapabilities0.getMisses();
      assertEquals(0, vector0.size());
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.getFilename();
      findWithCapabilities0.setClassIndex("-1");
      try { 
        Capabilities.forInstances((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Capabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.setFilename("\tSecond set: ");
      // Undeclared exception!
      try { 
        findWithCapabilities0.setCapabilities((Capabilities) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Random.setNextRandom((-688));
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      Vector<String> vector0 = findWithCapabilities1.m_Misses;
      findWithCapabilities0.m_Packages = vector0;
      findWithCapabilities1.setHandler(findWithCapabilities0);
      findWithCapabilities0.getRevision();
      findWithCapabilities0.listOptions();
      findWithCapabilities0.setHandler(findWithCapabilities1);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      findWithCapabilities0.setFilename("Ranges not yet set.");
      findWithCapabilities1.listOptions();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.BINARY_ATTRIBUTES;
      findWithCapabilities1.enableNot(capabilities_Capability0);
      findWithCapabilities0.setFilename("Ranges not yet set.");
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Capabilities capabilities0 = Capabilities.forInstances(instances0);
      HashSet<Capabilities.Capability> hashSet0 = capabilities0.m_Capabilities;
      capabilities0.m_Capabilities = hashSet0;
      findWithCapabilities0.setNotCapabilities(capabilities0);
      findWithCapabilities1.disable(capabilities_Capability0);
      assertEquals("", findWithCapabilities1.getFilename());
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities capabilities0 = findWithCapabilities0.m_Capabilities;
      findWithCapabilities0.setFilename("`U@_1)QOBO");
      findWithCapabilities0.m_Matches = null;
      findWithCapabilities0.setCapabilities(capabilities0);
      String[] stringArray0 = findWithCapabilities0.getOptions();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NOMINAL_ATTRIBUTES;
      findWithCapabilities0.handles(capabilities_Capability0);
      FindWithCapabilities.main(stringArray0);
      findWithCapabilities0.getMisses();
      findWithCapabilities0.getMisses();
      assertEquals("`U@_1)QOBO", findWithCapabilities0.getFilename());
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      SingleIndex singleIndex0 = new SingleIndex();
      singleIndex0.setSingleIndex("Not enough training instances (required: ");
      findWithCapabilities0.m_ClassIndex = singleIndex0;
      findWithCapabilities0.getHandler();
      findWithCapabilities0.getFilename();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.BINARY_CLASS;
      findWithCapabilities0.handles(capabilities_Capability0);
      findWithCapabilities0.setFilename("");
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities1.setClassIndex("Not enough training instances (required: ");
      // Undeclared exception!
      try { 
        findWithCapabilities1.getClassIndex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No upper limit has been specified for index
         //
         verifyException("weka.core.SingleIndex", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.setFilename("string");
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities0.m_Handler = (CapabilitiesHandler) findWithCapabilities1;
      Vector<String> vector0 = findWithCapabilities0.getMatches();
      findWithCapabilities1.setHandler(findWithCapabilities0);
      findWithCapabilities1.m_Misses = vector0;
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NUMERIC_ATTRIBUTES;
      findWithCapabilities0.getRevision();
      findWithCapabilities0.isEnabled(capabilities_Capability0);
      findWithCapabilities0.setFilename("string");
      findWithCapabilities1.setClassIndex("w8*bxmM5d.25&a");
      // Undeclared exception!
      try { 
        findWithCapabilities1.getClassIndex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No upper limit has been specified for index
         //
         verifyException("weka.core.SingleIndex", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities capabilities0 = findWithCapabilities0.m_Capabilities;
      findWithCapabilities0.setFilename("last");
      Capabilities capabilities1 = new Capabilities(findWithCapabilities0);
      findWithCapabilities0.setCapabilities(capabilities1);
      findWithCapabilities0.getOptions();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NOMINAL_ATTRIBUTES;
      findWithCapabilities0.disableNot(capabilities_Capability0);
      findWithCapabilities0.getCapabilities();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "last";
      stringArray0[1] = "weka/core/Capabilities.props";
      stringArray0[2] = "WvP|IA$Vy28gfF{G=";
      stringArray0[3] = "weka/core/Capabilities.props";
      stringArray0[4] = "weka/core/Capabilities.props";
      stringArray0[5] = "`U@_1)QOBO";
      stringArray0[6] = "weka/core/Capabilities.props";
      stringArray0[7] = "last";
      stringArray0[8] = "weka/core/Capabilities.props";
      FindWithCapabilities.main(stringArray0);
      assertEquals(9, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.setFilename("string");
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities0.m_Handler = (CapabilitiesHandler) findWithCapabilities1;
      Vector<String> vector0 = findWithCapabilities0.getMatches();
      findWithCapabilities1.m_Misses = vector0;
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NUMERIC_ATTRIBUTES;
      findWithCapabilities0.getRevision();
      findWithCapabilities0.isEnabled(capabilities_Capability0);
      findWithCapabilities0.setFilename("string");
      findWithCapabilities1.setClassIndex("w8*bxmM5d.25&a");
      String[] stringArray0 = new String[6];
      stringArray0[0] = "w8*bxmM5d.25&a";
      stringArray0[1] = "8034";
      stringArray0[2] = "w8*bxmM5d.25&a";
      stringArray0[3] = "-not-nominal-atts";
      stringArray0[4] = "8034";
      stringArray0[5] = "8034";
      try { 
        findWithCapabilities0.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities capabilities0 = findWithCapabilities0.m_Capabilities;
      findWithCapabilities0.setFilename("`U@_1)QOBO");
      findWithCapabilities0.m_Matches = null;
      findWithCapabilities0.setCapabilities(capabilities0);
      String[] stringArray0 = findWithCapabilities0.getOptions();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NOMINAL_ATTRIBUTES;
      findWithCapabilities0.disableNot(capabilities_Capability0);
      findWithCapabilities0.getCapabilities();
      FindWithCapabilities.main(stringArray0);
      assertEquals("`U@_1)QOBO", findWithCapabilities0.getFilename());
      assertEquals(8, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.getRevision();
      String[] stringArray0 = new String[4];
      Vector<String> vector0 = findWithCapabilities0.m_Matches;
      findWithCapabilities0.m_Misses = vector0;
      stringArray0[0] = "8034";
      Capabilities capabilities0 = findWithCapabilities0.getNotCapabilities();
      Capabilities capabilities1 = capabilities0.getOtherCapabilities();
      findWithCapabilities0.m_NotCapabilities = capabilities1;
      stringArray0[1] = "8034";
      stringArray0[2] = "8034";
      stringArray0[3] = "8034";
      FindWithCapabilities.main(stringArray0);
      findWithCapabilities0.getMatches();
      findWithCapabilities0.getRevision();
      findWithCapabilities0.find();
      findWithCapabilities0.getRevision();
      capabilities0.enableAllClasses();
      findWithCapabilities0.getFilename();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.BINARY_CLASS;
      vector0.add("");
      findWithCapabilities0.isEnabledNot(capabilities_Capability0);
      Enumeration enumeration0 = findWithCapabilities0.listOptions();
      assertNotNull(enumeration0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.setFilename("string");
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities0.m_Handler = (CapabilitiesHandler) findWithCapabilities1;
      Vector<String> vector0 = findWithCapabilities0.getMatches();
      findWithCapabilities1.m_Misses = vector0;
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NUMERIC_ATTRIBUTES;
      findWithCapabilities0.getRevision();
      findWithCapabilities0.isEnabled(capabilities_Capability0);
      findWithCapabilities0.setFilename("string");
      findWithCapabilities1.setClassIndex("w8*bxmM5d.25&a");
      // Undeclared exception!
      try { 
        findWithCapabilities1.getClassIndex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No upper limit has been specified for index
         //
         verifyException("weka.core.SingleIndex", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      Capabilities capabilities0 = findWithCapabilities1.m_NotCapabilities;
      findWithCapabilities0.setNotCapabilities(capabilities0);
      assertEquals("", findWithCapabilities0.getFilename());
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      String string0 = "k:(VMS;m\"DANCHY#cY";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "k:(VMS;m\"DANCHY#cY");
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.MISSING_CLASS_VALUES;
      findWithCapabilities0.enable(capabilities_Capability0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      findWithCapabilities0.find();
      findWithCapabilities0.setFilename("!vf8X4)9f<fnF");
      String[] stringArray0 = findWithCapabilities0.getOptions();
      try { 
        findWithCapabilities0.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/apaniche/wekafiles/props");
      FileSystemHandling.createFolder(evoSuiteFile0);
      Capabilities capabilities0 = findWithCapabilities0.m_Capabilities;
      capabilities0.m_MissingValuesTest = true;
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.STRING_CLASS;
      findWithCapabilities0.setClassIndex("`U@_1)QOBO");
      findWithCapabilities0.enableNot(capabilities_Capability0);
      findWithCapabilities0.m_Filename = "`U@_1)QOBO";
      findWithCapabilities0.setFilename("`U@_1)QOBO");
      capabilities0.enableAll();
      findWithCapabilities0.m_Matches = null;
      findWithCapabilities0.setCapabilities(capabilities0);
      findWithCapabilities0.getOptions();
      findWithCapabilities0.setFilename("`U@_1)QOBO");
      findWithCapabilities0.getFilename();
      findWithCapabilities0.getNotCapabilities();
      assertEquals("`U@_1)QOBO", findWithCapabilities0.getFilename());
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Vector<String> vector0 = findWithCapabilities0.m_Matches;
      vector0.add("@^1x!@0fo(");
      findWithCapabilities0.m_Misses = vector0;
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.MISSING_CLASS_VALUES;
      vector0.add((String) null);
      findWithCapabilities0.enable(capabilities_Capability0);
      findWithCapabilities0.setFilename("-relational-atts");
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(any() , any());
      vector0.sort(comparator0);
      String[] stringArray0 = findWithCapabilities0.getOptions();
      findWithCapabilities0.getCapabilities();
      findWithCapabilities0.listOptions();
      findWithCapabilities0.getHandler();
      findWithCapabilities0.m_Handler = null;
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.NUMERIC_CLASS;
      findWithCapabilities0.enable(capabilities_Capability1);
      FindWithCapabilities.main(stringArray0);
      FindWithCapabilities.main(stringArray0);
      try { 
        findWithCapabilities0.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.setClassIndex("S]k");
      Capabilities capabilities0 = findWithCapabilities0.m_Capabilities;
      capabilities0.enableAllAttributes();
      findWithCapabilities0.setFilename("PWOW4*Zd (^-5#=@ Zb");
      findWithCapabilities0.setCapabilities(capabilities0);
      findWithCapabilities0.getOptions();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.EMPTY_NOMINAL_ATTRIBUTES;
      findWithCapabilities0.disableNot(capabilities_Capability0);
      // Undeclared exception!
      try { 
        findWithCapabilities0.getClassIndex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No upper limit has been specified for index
         //
         verifyException("weka.core.SingleIndex", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "";
      stringArray0[1] = "O22ApFSCuNL";
      stringArray0[2] = "~@&]$Ln";
      stringArray0[3] = "b(s:]s6j4";
      stringArray0[4] = "last";
      stringArray0[5] = "-not-nominal-class";
      stringArray0[6] = "4R1c1ujK2)5r";
      try { 
        findWithCapabilities0.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.m_Filename = "$3(]nSu$>^";
      findWithCapabilities0.getFilename();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.STRING_ATTRIBUTES;
      findWithCapabilities0.isEnabled(capabilities_Capability0);
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.RELATIONAL_CLASS;
      findWithCapabilities0.disableNot(capabilities_Capability1);
      findWithCapabilities0.setClassIndex("-not-nominal-atts");
      assertEquals("$3(]nSu$>^", findWithCapabilities0.getFilename());
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.getRevision();
      findWithCapabilities0.m_GenericPropertiesCreator = true;
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.MISSING_VALUES;
      findWithCapabilities0.enableNot(capabilities_Capability0);
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.RELATIONAL_ATTRIBUTES;
      findWithCapabilities0.enable(capabilities_Capability1);
      findWithCapabilities0.getCapabilities();
      findWithCapabilities0.listOptions();
      findWithCapabilities0.m_Misses = null;
      findWithCapabilities0.getOptions();
      // Undeclared exception!
      try { 
        findWithCapabilities0.setHandler((CapabilitiesHandler) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.find();
      findWithCapabilities0.getRevision();
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 0.0;
      doubleArray0[7] = 0.0;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0.0, doubleArray0);
      Attribute attribute0 = null;
      try {
        attribute0 = new Attribute(":~{", "/p%#}~xb3Ti!&x");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern character 'p'
         //
         verifyException("java.text.SimpleDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.STRING_CLASS;
      findWithCapabilities0.getHandler();
      findWithCapabilities0.m_Handler = null;
      findWithCapabilities0.disable(capabilities_Capability0);
      ClassCache classCache0 = null;
      try {
        classCache0 = new ClassCache();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.evosuite.instrumentation.InstrumentingClassLoader cannot be cast to java.net.URLClassLoader
         //
         verifyException("weka.core.ClassCache", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities capabilities0 = findWithCapabilities0.m_NotCapabilities;
      findWithCapabilities0.m_Capabilities = capabilities0;
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.DATE_ATTRIBUTES;
      findWithCapabilities0.disableNot(capabilities_Capability0);
      capabilities0.getRevision();
      ClassCache classCache0 = null;
      try {
        classCache0 = new ClassCache();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.evosuite.instrumentation.InstrumentingClassLoader cannot be cast to java.net.URLClassLoader
         //
         verifyException("weka.core.ClassCache", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.STRING_ATTRIBUTES;
      findWithCapabilities0.disable(capabilities_Capability0);
      findWithCapabilities0.isEnabled(capabilities_Capability0);
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.BINARY_CLASS;
      findWithCapabilities0.enableNot(capabilities_Capability1);
      findWithCapabilities0.getFilename();
      findWithCapabilities0.disable(capabilities_Capability1);
      Instances instances0 = null;
      try {
        instances0 = new Instances((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Instances", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      SingleIndex singleIndex0 = new SingleIndex((String) null);
      findWithCapabilities0.m_ClassIndex = singleIndex0;
      Vector<String> vector0 = findWithCapabilities0.m_Matches;
      findWithCapabilities0.m_Packages = vector0;
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.BINARY_CLASS;
      boolean boolean0 = findWithCapabilities0.handles(capabilities_Capability0);
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.DATE_ATTRIBUTES;
      boolean boolean1 = findWithCapabilities0.isEnabledNot(capabilities_Capability1);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      String[] stringArray0 = new String[0];
      try { 
        findWithCapabilities0.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.DATE_CLASS;
      findWithCapabilities0.enableNot(capabilities_Capability0);
      assertEquals("", findWithCapabilities0.getFilename());
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.getNotCapabilities();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      SingleIndex singleIndex0 = findWithCapabilities1.m_ClassIndex;
      findWithCapabilities0.m_ClassIndex = singleIndex0;
      String[] stringArray0 = new String[5];
      stringArray0[0] = "weka/core/Capabilities.props";
      stringArray0[1] = "weka/core/Capabilities.props";
      stringArray0[2] = "weka/core/Capabilities.props";
      stringArray0[3] = "weka/core/Capabilities.props";
      stringArray0[4] = "weka/core/Capabilities.props";
      try { 
        findWithCapabilities1.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NOMINAL_CLASS;
      findWithCapabilities0.isEnabled(capabilities_Capability0);
      findWithCapabilities0.setFilename("weka.core.CheckOptionHandler");
      String[] stringArray0 = new String[4];
      stringArray0[0] = "weka.core.CheckOptionHandler";
      stringArray0[1] = "weka.core.CheckOptionHandler";
      stringArray0[2] = "weka.core.CheckOptionHandler";
      stringArray0[3] = "weka.core.CheckOptionHandler";
      try { 
        findWithCapabilities0.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.getFilename();
      findWithCapabilities0.setClassIndex("0U@I_4#");
      findWithCapabilities0.find();
      try { 
        Capabilities.forInstances((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Capabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "\tMust handle multi-instance data.";
      stringArray0[1] = "t&R]~FXMp^";
      stringArray0[2] = "";
      try { 
        findWithCapabilities0.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "-nominal-class";
      stringArray0[1] = "BAR[??e(?y";
      stringArray0[2] = "^Wd^4X,X-kjjGo|>77";
      stringArray0[3] = "9=b`8";
      stringArray0[4] = "#Le.T5lOXG'H%eqt]q";
      stringArray0[5] = "Nt&ofoS_?)";
      stringArray0[6] = "";
      stringArray0[7] = "\tSpecifies list of columns to used in the calculation of the \n\tdistance. 'first' and 'last' are valid indices.\n\t(default: first-last)";
      stringArray0[8] = ",M1LCGnCZd)*Cp1,a";
      FindWithCapabilities.main(stringArray0);
      assertEquals(9, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.ONLY_MULTIINSTANCE;
      findWithCapabilities0.enableNot(capabilities_Capability0);
      findWithCapabilities0.m_Filename = "EhRy|tVy`6Qlgi0O0A";
      findWithCapabilities0.getFilename();
      // Undeclared exception!
      try { 
        findWithCapabilities0.getClassIndex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No index set
         //
         verifyException("weka.core.SingleIndex", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NOMINAL_CLASS;
      findWithCapabilities0.enable(capabilities_Capability0);
      findWithCapabilities0.find();
      findWithCapabilities0.listOptions();
      String[] stringArray0 = findWithCapabilities0.getOptions();
      try { 
        findWithCapabilities0.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Vector<String> vector0 = findWithCapabilities0.getMisses();
      findWithCapabilities0.m_Matches = vector0;
      Capabilities capabilities0 = new Capabilities(findWithCapabilities0);
      capabilities0.setMinimumNumberInstances((-774));
      findWithCapabilities0.m_NotCapabilities = capabilities0;
      // Undeclared exception!
      try { 
        findWithCapabilities0.setClassIndex((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      StringReader stringReader0 = new StringReader("p(Lw3=mJZ+l`2");
      Instances instances0 = null;
      try {
        instances0 = new Instances(stringReader0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // keyword @relation expected, read Token[p(Lw3=mJZ+l`2], line 1
         //
         verifyException("weka.core.converters.ArffLoader$ArffReader", e);
      }
  }
}
