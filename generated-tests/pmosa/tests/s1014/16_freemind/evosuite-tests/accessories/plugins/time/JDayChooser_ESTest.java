/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 18 04:55:06 GMT 2018
 */

package accessories.plugins.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import accessories.plugins.time.JDayChooser;
import accessories.plugins.time.JMonthChooser;
import accessories.plugins.time.JYearChooser;
import freemind.controller.filter.condition.IconNotContainedCondition;
import java.awt.Color;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.HeadlessException;
import java.awt.Panel;
import java.awt.Rectangle;
import java.awt.SystemColor;
import java.awt.color.ColorSpace;
import java.awt.event.ActionEvent;
import java.awt.event.FocusEvent;
import java.awt.event.InputEvent;
import java.awt.event.KeyEvent;
import java.awt.image.BufferedImage;
import java.awt.image.ComponentColorModel;
import java.awt.image.ImageProducer;
import java.awt.image.IndexColorModel;
import java.awt.image.MemoryImageSource;
import java.io.IOException;
import java.net.URL;
import java.sql.Time;
import java.sql.Timestamp;
import java.time.DateTimeException;
import java.time.LocalDateTime;
import java.time.ZoneId;
import java.util.Calendar;
import java.util.Date;
import java.util.Locale;
import java.util.TimeZone;
import javax.help.HelpSet;
import javax.help.Map;
import javax.help.TreeItem;
import javax.swing.DebugGraphics;
import javax.swing.JButton;
import javax.swing.JCheckBoxMenuItem;
import javax.swing.JComponent;
import javax.swing.JEditorPane;
import javax.swing.border.SoftBevelBorder;
import javax.swing.plaf.basic.BasicTreeUI;
import javax.swing.plaf.metal.MetalComboBoxUI;
import javax.swing.plaf.metal.MetalTreeUI;
import javax.swing.text.DefaultCaret;
import org.apache.batik.util.SVGConstants;
import org.apache.fop.pdf.PDFInfo;
import org.apache.fop.svg.PDFDocumentGraphics2D;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.time.MockLocalDateTime;
import org.evosuite.runtime.mock.java.util.MockCalendar;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.hsqldb.jdbc.jdbcCallableStatement;
import org.hsqldb.jdbc.jdbcConnection;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JDayChooser_ESTest extends JDayChooser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.enableInputMethods(false);
      jDayChooser0.setAlwaysFireDayProperty(false);
      int int0 = (-268);
      int int1 = 0;
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, (-268), (-268), 0, 276, '?');
      jDayChooser0.keyReleased(keyEvent0);
      boolean boolean0 = true;
      int int2 = 0;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)10;
      IndexColorModel indexColorModel0 = null;
      try {
        indexColorModel0 = new IndexColorModel(0, 160, byteArray0, (-268), false, 276);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Number of pixel bits must be > 0
         //
         verifyException("java.awt.image.ColorModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getX();
      jDayChooser0.initDecorations();
      Color color0 = DebugGraphics.flashColor();
      jDayChooser0.getUIClassID();
      Color.getColor("f#?6Wrv", color0);
      jDayChooser0.transferFocusUpCycle();
      jDayChooser0.setDecorationBackgroundColor(color0);
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = new Locale("freemind.modes.mindmapmode.actions.ColorArrowLinkAction", "freemind.modes.mindmapmode.actions.ColorArrowLinkAction");
      locale0.stripExtensions();
      locale0.toLanguageTag();
      Calendar calendar0 = MockCalendar.getInstance(timeZone0, locale0);
      jDayChooser0.setCalendar(calendar0);
      jDayChooser0.setYear(1405);
      jDayChooser0.invalidate();
      jDayChooser0.isDecorationBordersVisible();
      jDayChooser0.drawDays();
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      
      jDayChooser0.setWeekOfYearVisible(false);
      assertEquals(14, jDayChooser0.getDay());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      
      jDayChooser0.setWeekOfYearVisible(false);
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      String[] stringArray0 = new String[4];
      String string0 = "wF,o";
      stringArray0[0] = "wF,o";
      stringArray0[1] = "transferable_content";
      stringArray0[2] = "0";
      stringArray0[3] = "";
      // Undeclared exception!
      try { 
        JDayChooser.main(stringArray0);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getDecorationBackgroundColor();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "day";
      stringArray0[1] = "day";
      stringArray0[2] = "day";
      stringArray0[3] = "day";
      stringArray0[4] = "day";
      stringArray0[5] = "day";
      stringArray0[6] = "day";
      stringArray0[7] = "day";
      // Undeclared exception!
      try { 
        JDayChooser.main(stringArray0);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setMaxDayCharacters(0);
      Color color0 = Color.lightGray;
      JMonthChooser jMonthChooser0 = new JMonthChooser();
      jDayChooser0.setMonthChooser(jMonthChooser0);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      JYearChooser jYearChooser0 = new JYearChooser();
      jDayChooser0.setYearChooser(jYearChooser0);
      jdbcCallableStatement jdbcCallableStatement0 = null;
      try {
        jdbcCallableStatement0 = new jdbcCallableStatement((jdbcConnection) null, "", 270);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.hsqldb.jdbc.jdbcPreparedStatement", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      Color color0 = Color.white;
      Color.getColor("vyv%@\":8OZvgeq:ZM0");
      color0.getRGBComponents((float[]) null);
      jDayChooser0.setWeekdayForeground(color0);
      // Undeclared exception!
      try { 
        jDayChooser0.getTemporaryCalendar();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      boolean boolean0 = false;
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.getDayPanel();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      int int0 = 1209;
      int int1 = 0;
      ComponentColorModel componentColorModel0 = null;
      try {
        componentColorModel0 = new ComponentColorModel((ColorSpace) null, false, false, 1209, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.image.ComponentColorModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.requestFocusInWindow();
      jDayChooser0.setForeground((Color) null);
      jDayChooser0.setFocus();
      jDayChooser0.getMinSelectableDate();
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.getAccessibleContext();
      jDayChooser0.isDecorationBackgroundVisible();
      jDayChooser0.getHierarchyListeners();
      jDayChooser0.isDayBordersVisible();
      int int0 = 160;
      jDayChooser0.setYear(160);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser_DecoratorButton0.isFocusable();
      JMonthChooser jMonthChooser0 = new JMonthChooser();
      jMonthChooser0.getPropertyChangeListeners();
      jDayChooser_DecoratorButton0.createVolatileImage((-2283), 160);
      MetalTreeUI metalTreeUI0 = new MetalTreeUI();
      BasicTreeUI.NodeDimensionsHandler basicTreeUI_NodeDimensionsHandler0 = metalTreeUI0.new NodeDimensionsHandler();
      DefaultCaret defaultCaret0 = new DefaultCaret();
      basicTreeUI_NodeDimensionsHandler0.getNodeDimensions(metalTreeUI0, 160, 160, false, defaultCaret0);
      // Undeclared exception!
      try { 
        jDayChooser0.paintImmediately((Rectangle) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("javax.swing.JComponent", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.initDecorations();
      jDayChooser0.getSundayForeground();
      jDayChooser0.setDecorationBordersVisible(true);
      jDayChooser0.isDecorationBackgroundVisible();
      int int0 = (-1362);
      jDayChooser0.transferFocus();
      jDayChooser0.setMaxDayCharacters((-1362));
      // Undeclared exception!
      try { 
        ZoneId.of("KJ0A_zC]a'3!");
        fail("Expecting exception: DateTimeException");
      
      } catch(DateTimeException e) {
         //
         // Invalid ID for region-based ZoneId, invalid format: KJ0A_zC]a'3!
         //
         verifyException("java.time.ZoneRegion", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.requestFocus();
      jDayChooser0.setDecorationBackgroundVisible(false);
      Color color0 = jDayChooser0.getWeekdayForeground();
      jDayChooser0.getDecorationBackgroundColor();
      String string0 = "";
      ActionEvent actionEvent0 = new ActionEvent(color0, 0, "");
      actionEvent0.paramString();
      // Undeclared exception!
      try { 
        jDayChooser0.actionPerformed(actionEvent0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.awt.Color cannot be cast to javax.swing.JButton
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 1603, 34, 34, 33, 'A');
      // Undeclared exception!
      try { 
        jDayChooser0.keyPressed(keyEvent0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getX();
      jDayChooser0.initDecorations();
      Color color0 = DebugGraphics.flashColor();
      jDayChooser0.getUIClassID();
      Color.getColor("f#?6Wrv", color0);
      jDayChooser0.transferFocusUpCycle();
      jDayChooser0.setDecorationBackgroundColor(color0);
      TimeZone timeZone0 = TimeZone.getDefault();
      jDayChooser0.repaint((long) 1405);
      Locale locale0 = new Locale("freemind.modes.mindmapmode.actions.ColorArrowLinkAction", "freemind.modes.mindmapmode.actions.ColorArrowLinkAction");
      locale0.stripExtensions();
      locale0.toLanguageTag();
      Calendar calendar0 = MockCalendar.getInstance(timeZone0, locale0);
      jDayChooser0.setCalendar(calendar0);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      
      jDayChooser0.setYear(1405);
      jDayChooser0.invalidate();
      jDayChooser0.isDecorationBordersVisible();
      jDayChooser0.drawDays();
      jDayChooser0.setWeekOfYearVisible(true);
      jDayChooser0.setEnabled(true);
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      System.setCurrentTimeMillis(4294981120L);
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.setEnabled(false);
      assertEquals(19, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      int int0 = jDayChooser0.getMaxDayCharacters();
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getInputMap();
      jDayChooser0.getSundayForeground();
      jDayChooser0.isDayBordersVisible();
      JYearChooser jYearChooser0 = new JYearChooser();
      jYearChooser0.validate();
      Map.ID.create("", (HelpSet) null);
      String string0 = ",E`]~n__";
      Locale locale0 = jDayChooser0.getLocale();
      TreeItem treeItem0 = new TreeItem((Map.ID) null, locale0);
      treeItem0.getURL();
      JEditorPane jEditorPane0 = null;
      try {
        jEditorPane0 = new JEditorPane((URL) null);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // invalid url
         //
         verifyException("javax.swing.JEditorPane", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setMaxDayCharacters(6168);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      
      jDayChooser0.setDecorationBordersVisible(true);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, (-4932), 6168, 11, 6168, 'a');
      KeyEvent.getKeyModifiersText(1726);
      jDayChooser0.keyTyped(keyEvent0);
      jDayChooser0.keyPressed(keyEvent0);
      Date date0 = jDayChooser0.defaultMinSelectableDate;
      jDayChooser0.setMaxSelectableDate(date0);
      assertEquals(14, jDayChooser0.getDay());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      PDFInfo pDFInfo0 = new PDFInfo();
      pDFInfo0.getCreationDate();
      jDayChooser0.setMaxSelectableDate((Date) null);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.resetKeyboardActions();
      SystemColor systemColor0 = SystemColor.activeCaptionText;
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) 4355;
      floatArray0[1] = (float) 4355;
      floatArray0[2] = (float) 4355;
      floatArray0[3] = (float) 4355;
      floatArray0[4] = (float) 4355;
      systemColor0.getRGBColorComponents(floatArray0);
      Color.getColor("day", 4355);
      SoftBevelBorder softBevelBorder0 = new SoftBevelBorder(4355, systemColor0, systemColor0, systemColor0, systemColor0);
      jDayChooser0.setBorder(softBevelBorder0);
      jDayChooser0.setYear((-700));
      jDayChooser0.getSelectedDay();
      jDayChooser0.isWeekOfYearVisible();
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getX();
      jDayChooser0.initDecorations();
      Color color0 = DebugGraphics.flashColor();
      String string0 = SVGConstants.SVG_DEFINITION_SRC_TAG;
      Color.getColor("x", color0);
      jDayChooser0.transferFocusUpCycle();
      jDayChooser0.setDecorationBackgroundColor(color0);
      TimeZone.getDefault();
      jDayChooser0.repaint((long) 1405);
      Locale locale0 = new Locale("freemind.modes.mindmapmode.actions.ColorArrowLinkAction", "freemind.modes.mindmapmode.actions.ColorArrowLinkAction");
      locale0.stripExtensions();
      locale0.toLanguageTag();
      jDayChooser0.setFocus();
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, 1405, false);
      jDayChooser0.focusLost(focusEvent0);
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.setMaxDayCharacters((-3142));
      jDayChooser0.invalidate();
      jDayChooser0.setMonthChooser((JMonthChooser) null);
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 1452, 2355L, 2851, 1452, 'B');
      KeyEvent.getKeyModifiersText(1452);
      InputEvent.getModifiersExText(1452);
      jDayChooser0.keyTyped(keyEvent0);
      JDayChooser jDayChooser1 = new JDayChooser(false);
      jDayChooser1.keyPressed(keyEvent0);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser1.new DecoratorButton();
      jDayChooser_DecoratorButton0.paint((Graphics) null);
      assertTrue(jDayChooser1.isDayBordersVisible());
      assertEquals(14, jDayChooser1.getDay());
      assertTrue(jDayChooser1.isDecorationBackgroundVisible());
      assertFalse(jDayChooser1.isDecorationBordersVisible());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      System.setCurrentTimeMillis((-1956L));
      JDayChooser jDayChooser0 = new JDayChooser();
      MockDate mockDate0 = new MockDate(15L);
      jDayChooser0.setSelectableDateRange(mockDate0, mockDate0);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(31, jDayChooser0.getDay());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setMaxDayCharacters(6168);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      
      jDayChooser0.setDecorationBordersVisible(true);
      jDayChooser0.transferFocusUpCycle();
      SystemColor systemColor0 = SystemColor.window;
      jDayChooser0.setDecorationBackgroundColor(systemColor0);
      TimeZone timeZone0 = TimeZone.getDefault();
      jDayChooser0.repaint(0L);
      Locale locale0 = new Locale("wN\"t4J]O8", "day");
      locale0.stripExtensions();
      Locale locale1 = Locale.PRC;
      locale1.toLanguageTag();
      Calendar calendar0 = MockCalendar.getInstance(timeZone0, locale0);
      jDayChooser0.setCalendar(calendar0);
      jDayChooser0.setYear((-2133));
      jDayChooser0.invalidate();
      JDayChooser jDayChooser1 = new JDayChooser(true);
      jDayChooser1.isDecorationBordersVisible();
      jDayChooser1.drawDays();
      jDayChooser1.setWeekOfYearVisible(false);
      jDayChooser1.setEnabled(true);
      assertFalse(jDayChooser1.isDecorationBordersVisible());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        jDayChooser0.setLocale((Locale) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      Color color0 = Color.CYAN;
      jDayChooser0.sundayForeground = color0;
      jDayChooser0.setMaxDayCharacters(228);
      jDayChooser0.setDecorationBordersVisible(false);
      jDayChooser0.isPaintingTile();
      JCheckBoxMenuItem jCheckBoxMenuItem0 = new JCheckBoxMenuItem();
      Color.getColor("day");
      KeyEvent keyEvent0 = new KeyEvent(jCheckBoxMenuItem0, 29, (-1069L), 15, 242, 'K');
      jDayChooser0.keyPressed(keyEvent0);
      FocusEvent focusEvent0 = new FocusEvent(jCheckBoxMenuItem0, 9);
      jDayChooser0.focusGained(focusEvent0);
      assertEquals(14, jDayChooser0.getDay());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      SystemColor systemColor0 = SystemColor.controlText;
      jDayChooser0.setDecorationBackgroundColor(systemColor0);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, (-3011), (-3011), 11, 2851, '>');
      KeyEvent.getKeyModifiersText((-1217));
      InputEvent.getModifiersExText((-3011));
      jDayChooser0.keyTyped(keyEvent0);
      JDayChooser jDayChooser1 = new JDayChooser(true);
      jDayChooser0.keyPressed(keyEvent0);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser1.new DecoratorButton();
      jDayChooser_DecoratorButton0.paint((Graphics) null);
      jDayChooser1.setFont((Font) null);
      jDayChooser0.setMonth(90);
      assertEquals(14, jDayChooser0.getDay());
      
      SystemColor systemColor1 = SystemColor.controlDkShadow;
      jDayChooser1.setForeground(systemColor1);
      assertTrue(jDayChooser1.isWeekOfYearVisible());
      assertFalse(jDayChooser1.isDecorationBordersVisible());
      assertTrue(jDayChooser1.isDayBordersVisible());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setMonth(8);
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      JButton jButton0 = new JButton();
      jDayChooser0.selectedDay = jButton0;
      jDayChooser0.getMinSelectableDate();
      Color color0 = Color.red;
      jDayChooser0.setSundayForeground(color0);
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setMaxDayCharacters(6168);
      jDayChooser0.setDecorationBordersVisible(true);
      jDayChooser0.transferFocusUpCycle();
      SystemColor systemColor0 = SystemColor.window;
      jDayChooser0.setDecorationBackgroundColor(systemColor0);
      TimeZone.getDefault();
      jDayChooser0.repaint(0L);
      Locale locale0 = new Locale("wN\"t4J]O8", "day");
      JDayChooser jDayChooser1 = new JDayChooser(true);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser1.new DecoratorButton();
      PDFDocumentGraphics2D pDFDocumentGraphics2D0 = new PDFDocumentGraphics2D(true);
      jDayChooser_DecoratorButton0.paint(pDFDocumentGraphics2D0);
      jDayChooser0.getWeekdayForeground();
      jDayChooser0.getLocale();
      jDayChooser1.setMinSelectableDate((Date) null);
      jDayChooser1.getMaxSelectableDate();
      assertEquals(14, jDayChooser1.getDay());
      assertTrue(jDayChooser1.isWeekOfYearVisible());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getX();
      jDayChooser0.initDecorations();
      Color color0 = DebugGraphics.flashColor();
      jDayChooser0.getUIClassID();
      jDayChooser0.getWeekdayForeground();
      jDayChooser0.transferFocusUpCycle();
      jDayChooser0.setDecorationBackgroundColor(color0);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, (-1163), 222L, (-2484), 32, 'a');
      KeyEvent.getKeyModifiersText(0);
      jDayChooser0.keyTyped(keyEvent0);
      Date date0 = jDayChooser0.getMaxSelectableDate();
      jDayChooser0.setMinSelectableDate(date0);
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getX();
      Color color0 = DebugGraphics.flashColor();
      jDayChooser0.getUIClassID();
      Color.getColor("f#?6Wrv", color0);
      jDayChooser0.setDecorationBackgroundColor(color0);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, (-1163), 222L, (-2484), 37, 'a');
      KeyEvent.getKeyModifiersText(0);
      jDayChooser0.keyTyped(keyEvent0);
      jDayChooser0.keyPressed(keyEvent0);
      jDayChooser0.setEnabled(true);
      jDayChooser0.getSundayForeground();
      assertEquals(13, jDayChooser0.getDay());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 14, 14, 35, 35, '3');
      assertEquals(14, jDayChooser0.getDay());
      
      jDayChooser0.keyPressed(keyEvent0);
      assertEquals(28, jDayChooser0.getDay());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getUIClassID();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 32, 32, 183, 34, '@');
      KeyEvent.getKeyModifiersText((-2047));
      jDayChooser0.keyTyped(keyEvent0);
      // Undeclared exception!
      try { 
        jDayChooser0.keyPressed(keyEvent0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      JMonthChooser jMonthChooser0 = new JMonthChooser();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 31, 595L, 955, 39, 'I');
      jDayChooser0.keyPressed(keyEvent0);
      assertEquals(15, jDayChooser0.getDay());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setMaxDayCharacters(4);
      Color color0 = Color.lightGray;
      assertEquals(255, color0.getAlpha());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      JDayChooser jDayChooser1 = new JDayChooser();
      jDayChooser1.setMaxDayCharacters(4);
      Color color0 = Color.lightGray;
      assertEquals((-4144960), color0.getRGB());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      SystemColor systemColor0 = SystemColor.text;
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, (-3164), 0L, (-3164), 36, '5');
      assertEquals(14, jDayChooser0.getDay());
      
      jDayChooser0.keyPressed(keyEvent0);
      assertEquals(1, jDayChooser0.getDay());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 38, 14, 35, 38, '3');
      KeyEvent.getExtendedKeyCodeForChar(35);
      jDayChooser0.keyPressed(keyEvent0);
      assertEquals(7, jDayChooser0.getDay());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, (-1254), (-1254), 864, 33, 'm');
      String string0 = SVGConstants.SVG_SCALE_ATTRIBUTE;
      // Undeclared exception!
      try { 
        jDayChooser0.keyPressed(keyEvent0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, (-2110), (-355L), 40, 40, '5');
      jDayChooser0.keyPressed(keyEvent0);
      assertEquals(21, jDayChooser0.getDay());
  }
}
