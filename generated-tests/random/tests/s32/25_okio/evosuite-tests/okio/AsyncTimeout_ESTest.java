/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 23 17:33:16 GMT 2019
 */

package okio;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.IOException;
import java.io.InterruptedIOException;
import java.util.concurrent.TimeUnit;
import java.util.zip.Deflater;
import okio.AsyncTimeout;
import okio.Buffer;
import okio.HashingSink;
import okio.HashingSource;
import okio.Pipe;
import okio.Sink;
import okio.Source;
import okio.Timeout;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.io.MockIOException;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AsyncTimeout_ESTest extends AsyncTimeout_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      AsyncTimeout asyncTimeout0 = new AsyncTimeout();
      assertNotNull(asyncTimeout0);
      assertEquals(0L, asyncTimeout0.timeoutNanos());
      assertFalse(asyncTimeout0.hasDeadline());
      
      IOException iOException0 = asyncTimeout0.exit((IOException) null);
      assertNull(iOException0);
      assertEquals(0L, asyncTimeout0.timeoutNanos());
      assertFalse(asyncTimeout0.hasDeadline());
      
      IOException iOException1 = asyncTimeout0.exit((IOException) null);
      assertNull(iOException1);
      assertEquals(0L, asyncTimeout0.timeoutNanos());
      assertFalse(asyncTimeout0.hasDeadline());
      
      AsyncTimeout.head = asyncTimeout0;
      assertEquals(0L, asyncTimeout0.timeoutNanos());
      assertFalse(asyncTimeout0.hasDeadline());
      assertFalse(AsyncTimeout.head.hasDeadline());
      assertEquals(0L, AsyncTimeout.head.timeoutNanos());
      
      asyncTimeout0.exit(true);
      assertEquals(0L, asyncTimeout0.timeoutNanos());
      assertFalse(asyncTimeout0.hasDeadline());
      
      Source source0 = asyncTimeout0.source((Source) null);
      assertNotNull(source0);
      assertEquals(0L, asyncTimeout0.timeoutNanos());
      assertFalse(asyncTimeout0.hasDeadline());
      
      // Undeclared exception!
      try { 
        AsyncTimeout.awaitTimeout();
        fail("Expecting exception: IllegalMonitorStateException");
      
      } catch(IllegalMonitorStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.Object", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      AsyncTimeout asyncTimeout0 = new AsyncTimeout();
      assertNotNull(asyncTimeout0);
      assertEquals(0L, asyncTimeout0.timeoutNanos());
      assertFalse(asyncTimeout0.hasDeadline());
      
      Timeout timeout0 = asyncTimeout0.clearTimeout();
      assertSame(asyncTimeout0, timeout0);
      assertSame(timeout0, asyncTimeout0);
      assertNotNull(timeout0);
      assertEquals(0L, asyncTimeout0.timeoutNanos());
      assertFalse(asyncTimeout0.hasDeadline());
      assertEquals(0L, timeout0.timeoutNanos());
      assertFalse(timeout0.hasDeadline());
      
      long long0 = 234L;
      TimeUnit timeUnit0 = TimeUnit.MILLISECONDS;
      Timeout timeout1 = asyncTimeout0.timeout(234L, timeUnit0);
      assertSame(asyncTimeout0, timeout0);
      assertSame(asyncTimeout0, timeout1);
      assertSame(timeout1, timeout0);
      assertSame(timeout1, asyncTimeout0);
      assertNotNull(timeout1);
      assertFalse(asyncTimeout0.hasDeadline());
      assertEquals(234000000L, asyncTimeout0.timeoutNanos());
      assertEquals(234000000L, timeout1.timeoutNanos());
      assertFalse(timeout1.hasDeadline());
      
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      asyncTimeout0.timedOut();
      assertSame(asyncTimeout0, timeout0);
      assertSame(asyncTimeout0, timeout1);
      assertFalse(asyncTimeout0.hasDeadline());
      assertEquals(234000000L, asyncTimeout0.timeoutNanos());
      
      asyncTimeout0.timedOut();
      assertSame(asyncTimeout0, timeout0);
      assertSame(asyncTimeout0, timeout1);
      assertFalse(asyncTimeout0.hasDeadline());
      assertEquals(234000000L, asyncTimeout0.timeoutNanos());
      
      AsyncTimeout.head = asyncTimeout0;
      assertFalse(asyncTimeout0.hasDeadline());
      assertEquals(234000000L, asyncTimeout0.timeoutNanos());
      assertEquals(234000000L, AsyncTimeout.head.timeoutNanos());
      assertFalse(AsyncTimeout.head.hasDeadline());
      
      asyncTimeout0.enter();
      assertSame(asyncTimeout0, timeout0);
      assertSame(asyncTimeout0, timeout1);
      assertFalse(asyncTimeout0.hasDeadline());
      assertEquals(234000000L, asyncTimeout0.timeoutNanos());
      
      IOException iOException0 = null;
      MockIOException mockIOException0 = new MockIOException();
      assertNotNull(mockIOException0);
      
      // Undeclared exception!
      try { 
        asyncTimeout0.enter();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Unbalanced enter/exit
         //
         verifyException("okio.AsyncTimeout", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      AsyncTimeout asyncTimeout0 = new AsyncTimeout();
      assertNotNull(asyncTimeout0);
      assertEquals(0L, asyncTimeout0.timeoutNanos());
      assertFalse(asyncTimeout0.hasDeadline());
      
      Pipe pipe0 = new Pipe(1100L);
      assertNotNull(pipe0);
      
      Buffer buffer0 = pipe0.buffer;
      assertNotNull(buffer0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      pipe0.sinkClosed = true;
      HashingSource hashingSource0 = HashingSource.sha1(buffer0);
      assertNotNull(hashingSource0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      Buffer buffer1 = (Buffer)hashingSource0.delegate();
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertNotNull(buffer1);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(0L, buffer1.size());
      assertTrue(buffer1.exhausted());
      
      Source source0 = asyncTimeout0.source(buffer1);
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertNotNull(source0);
      assertEquals(0L, asyncTimeout0.timeoutNanos());
      assertFalse(asyncTimeout0.hasDeadline());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(0L, buffer1.size());
      assertTrue(buffer1.exhausted());
      
      asyncTimeout0.timedOut();
      assertEquals(0L, asyncTimeout0.timeoutNanos());
      assertFalse(asyncTimeout0.hasDeadline());
      
      InterruptedIOException interruptedIOException0 = (InterruptedIOException)asyncTimeout0.newTimeoutException((IOException) null);
      assertEquals(0, interruptedIOException0.bytesTransferred);
      assertNotNull(interruptedIOException0);
      assertEquals(0L, asyncTimeout0.timeoutNanos());
      assertFalse(asyncTimeout0.hasDeadline());
      assertEquals("java.io.InterruptedIOException: timeout", interruptedIOException0.toString());
      assertEquals("timeout", interruptedIOException0.getMessage());
      
      InterruptedIOException interruptedIOException1 = (InterruptedIOException)asyncTimeout0.exit((IOException) interruptedIOException0);
      assertSame(interruptedIOException0, interruptedIOException1);
      assertSame(interruptedIOException1, interruptedIOException0);
      assertEquals(0, interruptedIOException0.bytesTransferred);
      assertEquals(0, interruptedIOException1.bytesTransferred);
      assertNotNull(interruptedIOException1);
      assertEquals(0L, asyncTimeout0.timeoutNanos());
      assertFalse(asyncTimeout0.hasDeadline());
      assertEquals("java.io.InterruptedIOException: timeout", interruptedIOException0.toString());
      assertEquals("timeout", interruptedIOException0.getMessage());
      assertEquals("java.io.InterruptedIOException: timeout", interruptedIOException1.toString());
      assertEquals("timeout", interruptedIOException1.getMessage());
      
      asyncTimeout0.timedOut();
      assertEquals(0L, asyncTimeout0.timeoutNanos());
      assertFalse(asyncTimeout0.hasDeadline());
      
      // Undeclared exception!
      try { 
        AsyncTimeout.awaitTimeout();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.AsyncTimeout", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      AsyncTimeout asyncTimeout0 = new AsyncTimeout();
      assertNotNull(asyncTimeout0);
      assertEquals(0L, asyncTimeout0.timeoutNanos());
      assertFalse(asyncTimeout0.hasDeadline());
      
      asyncTimeout0.exit(true);
      assertEquals(0L, asyncTimeout0.timeoutNanos());
      assertFalse(asyncTimeout0.hasDeadline());
      
      asyncTimeout0.exit(true);
      assertEquals(0L, asyncTimeout0.timeoutNanos());
      assertFalse(asyncTimeout0.hasDeadline());
      
      MockIOException mockIOException0 = new MockIOException();
      assertNotNull(mockIOException0);
      
      String string0 = mockIOException0.getLocalizedMessage();
      assertNull(string0);
      
      MockIOException mockIOException1 = new MockIOException("~K", mockIOException0);
      assertFalse(mockIOException1.equals((Object)mockIOException0));
      assertNotNull(mockIOException1);
      
      IOException iOException0 = asyncTimeout0.exit((IOException) mockIOException1);
      assertFalse(mockIOException0.equals((Object)mockIOException1));
      assertFalse(mockIOException1.equals((Object)mockIOException0));
      assertFalse(iOException0.equals((Object)mockIOException0));
      assertNotSame(mockIOException0, mockIOException1);
      assertNotSame(mockIOException0, iOException0);
      assertSame(mockIOException1, iOException0);
      assertNotSame(mockIOException1, mockIOException0);
      assertSame(iOException0, mockIOException1);
      assertNotSame(iOException0, mockIOException0);
      assertNotNull(iOException0);
      assertEquals(0L, asyncTimeout0.timeoutNanos());
      assertFalse(asyncTimeout0.hasDeadline());
      
      IOException iOException1 = asyncTimeout0.exit(iOException0);
      assertFalse(mockIOException0.equals((Object)mockIOException1));
      assertFalse(mockIOException0.equals((Object)iOException0));
      assertFalse(mockIOException1.equals((Object)mockIOException0));
      assertFalse(iOException0.equals((Object)mockIOException0));
      assertFalse(iOException1.equals((Object)mockIOException0));
      assertNotSame(mockIOException0, mockIOException1);
      assertNotSame(mockIOException0, iOException0);
      assertNotSame(mockIOException0, iOException1);
      assertSame(mockIOException1, iOException1);
      assertSame(mockIOException1, iOException0);
      assertNotSame(mockIOException1, mockIOException0);
      assertSame(iOException0, iOException1);
      assertSame(iOException0, mockIOException1);
      assertNotSame(iOException0, mockIOException0);
      assertNotSame(iOException1, mockIOException0);
      assertSame(iOException1, iOException0);
      assertSame(iOException1, mockIOException1);
      assertNotNull(iOException1);
      assertEquals(0L, asyncTimeout0.timeoutNanos());
      assertFalse(asyncTimeout0.hasDeadline());
      
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      
      HashingSink hashingSink0 = HashingSink.sha1(buffer0);
      assertNotNull(hashingSink0);
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      
      HashingSink hashingSink1 = HashingSink.sha512(hashingSink0);
      assertFalse(hashingSink1.equals((Object)hashingSink0));
      assertNotSame(hashingSink0, hashingSink1);
      assertNotSame(hashingSink1, hashingSink0);
      assertNotNull(hashingSink1);
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      
      hashingSink1.flush();
      assertFalse(hashingSink0.equals((Object)hashingSink1));
      assertFalse(hashingSink1.equals((Object)hashingSink0));
      assertNotSame(hashingSink0, hashingSink1);
      assertNotSame(hashingSink1, hashingSink0);
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      
      Sink sink0 = asyncTimeout0.sink(hashingSink1);
      assertFalse(hashingSink0.equals((Object)hashingSink1));
      assertFalse(hashingSink1.equals((Object)hashingSink0));
      assertNotSame(hashingSink0, hashingSink1);
      assertNotSame(hashingSink1, hashingSink0);
      assertNotNull(sink0);
      assertEquals(0L, asyncTimeout0.timeoutNanos());
      assertFalse(asyncTimeout0.hasDeadline());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      // Undeclared exception!
      try { 
        AsyncTimeout.awaitTimeout();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.AsyncTimeout", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      AsyncTimeout asyncTimeout0 = new AsyncTimeout();
      assertNotNull(asyncTimeout0);
      assertEquals(0L, asyncTimeout0.timeoutNanos());
      assertFalse(asyncTimeout0.hasDeadline());
      
      asyncTimeout0.enter();
      assertEquals(0L, asyncTimeout0.timeoutNanos());
      assertFalse(asyncTimeout0.hasDeadline());
      
      boolean boolean0 = asyncTimeout0.exit();
      assertFalse(boolean0);
      assertEquals(0L, asyncTimeout0.timeoutNanos());
      assertFalse(asyncTimeout0.hasDeadline());
      
      MockIOException mockIOException0 = new MockIOException();
      assertNotNull(mockIOException0);
      
      IOException iOException0 = asyncTimeout0.exit((IOException) mockIOException0);
      assertSame(mockIOException0, iOException0);
      assertSame(iOException0, mockIOException0);
      assertNotNull(iOException0);
      assertEquals(0L, asyncTimeout0.timeoutNanos());
      assertFalse(asyncTimeout0.hasDeadline());
      
      // Undeclared exception!
      try { 
        mockIOException0.addSuppressed(iOException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Self-suppression not permitted
         //
         verifyException("java.lang.Throwable", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      AsyncTimeout asyncTimeout0 = new AsyncTimeout();
      assertNotNull(asyncTimeout0);
      assertEquals(0L, asyncTimeout0.timeoutNanos());
      assertFalse(asyncTimeout0.hasDeadline());
      
      Timeout timeout0 = asyncTimeout0.clearTimeout();
      assertSame(asyncTimeout0, timeout0);
      assertSame(timeout0, asyncTimeout0);
      assertNotNull(timeout0);
      assertEquals(0L, asyncTimeout0.timeoutNanos());
      assertFalse(asyncTimeout0.hasDeadline());
      assertEquals(0L, timeout0.timeoutNanos());
      assertFalse(timeout0.hasDeadline());
      
      TimeUnit timeUnit0 = TimeUnit.MILLISECONDS;
      Timeout timeout1 = asyncTimeout0.timeout(234L, timeUnit0);
      assertSame(asyncTimeout0, timeout1);
      assertSame(asyncTimeout0, timeout0);
      assertSame(timeout1, timeout0);
      assertSame(timeout1, asyncTimeout0);
      assertNotNull(timeout1);
      assertEquals(234000000L, asyncTimeout0.timeoutNanos());
      assertFalse(asyncTimeout0.hasDeadline());
      assertEquals(234000000L, timeout1.timeoutNanos());
      assertFalse(timeout1.hasDeadline());
      
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      asyncTimeout0.timedOut();
      assertSame(asyncTimeout0, timeout1);
      assertSame(asyncTimeout0, timeout0);
      assertEquals(234000000L, asyncTimeout0.timeoutNanos());
      assertFalse(asyncTimeout0.hasDeadline());
      
      asyncTimeout0.timedOut();
      assertSame(asyncTimeout0, timeout1);
      assertSame(asyncTimeout0, timeout0);
      assertEquals(234000000L, asyncTimeout0.timeoutNanos());
      assertFalse(asyncTimeout0.hasDeadline());
      
      AsyncTimeout.head = asyncTimeout0;
      assertEquals(234000000L, asyncTimeout0.timeoutNanos());
      assertFalse(asyncTimeout0.hasDeadline());
      assertEquals(234000000L, AsyncTimeout.head.timeoutNanos());
      assertFalse(AsyncTimeout.head.hasDeadline());
      
      asyncTimeout0.enter();
      assertSame(asyncTimeout0, timeout1);
      assertSame(asyncTimeout0, timeout0);
      assertEquals(234000000L, asyncTimeout0.timeoutNanos());
      assertFalse(asyncTimeout0.hasDeadline());
      
      IOException iOException0 = asyncTimeout0.exit((IOException) null);
      assertSame(asyncTimeout0, timeout1);
      assertSame(asyncTimeout0, timeout0);
      assertNull(iOException0);
      assertEquals(234000000L, asyncTimeout0.timeoutNanos());
      assertFalse(asyncTimeout0.hasDeadline());
      
      asyncTimeout0.enter();
      assertSame(asyncTimeout0, timeout1);
      assertSame(asyncTimeout0, timeout0);
      assertEquals(234000000L, asyncTimeout0.timeoutNanos());
      assertFalse(asyncTimeout0.hasDeadline());
      
      IOException iOException1 = asyncTimeout0.exit((IOException) null);
      assertSame(asyncTimeout0, timeout1);
      assertSame(asyncTimeout0, timeout0);
      assertNull(iOException1);
      assertEquals(234000000L, asyncTimeout0.timeoutNanos());
      assertFalse(asyncTimeout0.hasDeadline());
      
      boolean boolean2 = asyncTimeout0.exit();
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertSame(asyncTimeout0, timeout1);
      assertSame(asyncTimeout0, timeout0);
      assertFalse(boolean2);
      assertEquals(234000000L, asyncTimeout0.timeoutNanos());
      assertFalse(asyncTimeout0.hasDeadline());
      
      InterruptedIOException interruptedIOException0 = (InterruptedIOException)asyncTimeout0.newTimeoutException((IOException) null);
      assertSame(asyncTimeout0, timeout1);
      assertSame(asyncTimeout0, timeout0);
      assertEquals(0, interruptedIOException0.bytesTransferred);
      assertNotNull(interruptedIOException0);
      assertEquals(234000000L, asyncTimeout0.timeoutNanos());
      assertFalse(asyncTimeout0.hasDeadline());
      assertEquals("java.io.InterruptedIOException: timeout", interruptedIOException0.toString());
      assertEquals("timeout", interruptedIOException0.getMessage());
      
      InterruptedIOException interruptedIOException1 = (InterruptedIOException)asyncTimeout0.newTimeoutException((IOException) null);
      assertFalse(interruptedIOException1.equals((Object)interruptedIOException0));
      assertSame(asyncTimeout0, timeout1);
      assertSame(asyncTimeout0, timeout0);
      assertNotSame(interruptedIOException1, interruptedIOException0);
      assertEquals(0, interruptedIOException1.bytesTransferred);
      assertNotNull(interruptedIOException1);
      assertEquals(234000000L, asyncTimeout0.timeoutNanos());
      assertFalse(asyncTimeout0.hasDeadline());
      assertEquals("java.io.InterruptedIOException: timeout", interruptedIOException1.toString());
      assertEquals("timeout", interruptedIOException1.getMessage());
      
      AsyncTimeout asyncTimeout1 = (AsyncTimeout)AsyncTimeout.head.timeout(234L, timeUnit0);
      assertSame(asyncTimeout1, timeout1);
      assertSame(asyncTimeout1, timeout0);
      assertSame(asyncTimeout1, asyncTimeout0);
      assertNotNull(asyncTimeout1);
      assertEquals(234000000L, asyncTimeout1.timeoutNanos());
      assertFalse(asyncTimeout1.hasDeadline());
      
      MockIOException mockIOException0 = new MockIOException("f", (Throwable) null);
      assertNotNull(mockIOException0);
      
      InterruptedIOException interruptedIOException2 = (InterruptedIOException)asyncTimeout0.newTimeoutException(mockIOException0);
      assertFalse(interruptedIOException2.equals((Object)interruptedIOException0));
      assertFalse(interruptedIOException2.equals((Object)interruptedIOException1));
      assertSame(asyncTimeout0, timeout1);
      assertSame(asyncTimeout0, timeout0);
      assertSame(asyncTimeout0, asyncTimeout1);
      assertNotSame(interruptedIOException2, interruptedIOException0);
      assertNotSame(interruptedIOException2, interruptedIOException1);
      assertEquals(0, interruptedIOException2.bytesTransferred);
      assertNotNull(interruptedIOException2);
      assertEquals(234000000L, asyncTimeout0.timeoutNanos());
      assertFalse(asyncTimeout0.hasDeadline());
      assertEquals("timeout", interruptedIOException2.getMessage());
      assertEquals("java.io.InterruptedIOException: timeout", interruptedIOException2.toString());
      
      boolean boolean3 = AsyncTimeout.head.exit();
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3);
      
      MockIOException mockIOException1 = new MockIOException("f", (Throwable) null);
      assertFalse(mockIOException1.equals((Object)mockIOException0));
      assertNotNull(mockIOException1);
      
      Throwable[] throwableArray0 = mockIOException1.getSuppressed();
      assertFalse(mockIOException1.equals((Object)mockIOException0));
      assertNotSame(mockIOException1, mockIOException0);
      assertEquals(0, throwableArray0.length);
      assertNotNull(throwableArray0);
      
      MockIOException mockIOException2 = (MockIOException)AsyncTimeout.head.exit((IOException) mockIOException1);
      assertFalse(mockIOException1.equals((Object)mockIOException0));
      assertFalse(mockIOException2.equals((Object)mockIOException0));
      assertNotSame(mockIOException1, mockIOException0);
      assertSame(mockIOException1, mockIOException2);
      assertNotSame(mockIOException2, mockIOException0);
      assertSame(mockIOException2, mockIOException1);
      assertNotNull(mockIOException2);
      
      IOException iOException2 = AsyncTimeout.head.exit((IOException) null);
      assertNull(iOException2);
      
      System.setCurrentTimeMillis(234L);
      System.setCurrentTimeMillis((-4911L));
      String string0 = mockIOException0.getLocalizedMessage();
      assertFalse(mockIOException0.equals((Object)mockIOException1));
      assertFalse(mockIOException0.equals((Object)mockIOException2));
      assertNotSame(mockIOException0, mockIOException1);
      assertNotSame(mockIOException0, mockIOException2);
      assertEquals("f", string0);
      assertNotNull(string0);
      
      InterruptedIOException interruptedIOException3 = (InterruptedIOException)asyncTimeout0.newTimeoutException((IOException) null);
      assertFalse(interruptedIOException3.equals((Object)interruptedIOException0));
      assertFalse(interruptedIOException3.equals((Object)interruptedIOException1));
      assertFalse(interruptedIOException3.equals((Object)interruptedIOException2));
      assertSame(asyncTimeout0, timeout1);
      assertSame(asyncTimeout0, timeout0);
      assertSame(asyncTimeout0, asyncTimeout1);
      assertNotSame(interruptedIOException3, interruptedIOException0);
      assertNotSame(interruptedIOException3, interruptedIOException1);
      assertNotSame(interruptedIOException3, interruptedIOException2);
      assertEquals(0, interruptedIOException3.bytesTransferred);
      assertNotNull(interruptedIOException3);
      assertEquals(234000000L, asyncTimeout0.timeoutNanos());
      assertFalse(asyncTimeout0.hasDeadline());
      assertEquals("java.io.InterruptedIOException: timeout", interruptedIOException3.toString());
      assertEquals("timeout", interruptedIOException3.getMessage());
      
      InterruptedIOException interruptedIOException4 = (InterruptedIOException)asyncTimeout0.newTimeoutException(interruptedIOException2);
      assertFalse(mockIOException0.equals((Object)mockIOException1));
      assertFalse(mockIOException0.equals((Object)mockIOException2));
      assertFalse(interruptedIOException2.equals((Object)interruptedIOException3));
      assertFalse(interruptedIOException2.equals((Object)interruptedIOException0));
      assertFalse(interruptedIOException2.equals((Object)interruptedIOException1));
      assertFalse(interruptedIOException4.equals((Object)interruptedIOException1));
      assertFalse(interruptedIOException4.equals((Object)interruptedIOException3));
      assertFalse(interruptedIOException4.equals((Object)interruptedIOException2));
      assertFalse(interruptedIOException4.equals((Object)interruptedIOException0));
      assertSame(asyncTimeout0, timeout1);
      assertSame(asyncTimeout0, timeout0);
      assertSame(asyncTimeout0, asyncTimeout1);
      assertNotSame(mockIOException0, mockIOException1);
      assertNotSame(mockIOException0, mockIOException2);
      assertNotSame(interruptedIOException2, interruptedIOException3);
      assertNotSame(interruptedIOException2, interruptedIOException0);
      assertNotSame(interruptedIOException2, interruptedIOException1);
      assertNotSame(interruptedIOException2, interruptedIOException4);
      assertNotSame(interruptedIOException4, interruptedIOException1);
      assertNotSame(interruptedIOException4, interruptedIOException3);
      assertNotSame(interruptedIOException4, interruptedIOException2);
      assertNotSame(interruptedIOException4, interruptedIOException0);
      assertEquals(0, interruptedIOException2.bytesTransferred);
      assertEquals(0, interruptedIOException4.bytesTransferred);
      assertNotNull(interruptedIOException4);
      assertEquals(234000000L, asyncTimeout0.timeoutNanos());
      assertFalse(asyncTimeout0.hasDeadline());
      assertEquals("timeout", interruptedIOException2.getMessage());
      assertEquals("java.io.InterruptedIOException: timeout", interruptedIOException2.toString());
      assertEquals("java.io.InterruptedIOException: timeout", interruptedIOException4.toString());
      assertEquals("timeout", interruptedIOException4.getMessage());
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      AsyncTimeout asyncTimeout0 = new AsyncTimeout();
      asyncTimeout0.deadlineNanoTime(1000000L);
      asyncTimeout0.exit(true);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      asyncTimeout0.enter();
      asyncTimeout0.clearDeadline();
      System.setCurrentTimeMillis(10000000000000L);
      try { 
        asyncTimeout0.exit(true);
       //  fail("Expecting exception: InterruptedIOException");
       // Unstable assertion
      } catch(InterruptedIOException e) {
         //
         // timeout
         //
         verifyException("okio.AsyncTimeout", e);
      }
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      AsyncTimeout asyncTimeout0 = new AsyncTimeout();
      Buffer buffer0 = new Buffer();
      int int0 = 52;
      Deflater deflater0 = null;
      try {
        deflater0 = new Deflater(52);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.zip.Deflater", e);
      }
  }
}
