/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 00:49:03 GMT 2018
 */

package okio;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayInputStream;
import java.io.ObjectStreamConstants;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.nio.charset.Charset;
import okio.Buffer;
import okio.ByteString;
import okio.Pipe;
import okio.RealBufferedSource;
import okio.Segment;
import okio.SegmentedByteString;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SegmentedByteString_ESTest extends SegmentedByteString_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Pipe pipe0 = new Pipe(1423L);
      Buffer buffer0 = pipe0.buffer;
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 0);
      // Undeclared exception!
      try { 
        segmentedByteString0.sha256();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("okio.SegmentedByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 0);
      // Undeclared exception!
      try { 
        segmentedByteString0.substring(5086, 2875);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("okio.SegmentedByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 0);
      // Undeclared exception!
      try { 
        segmentedByteString0.base64();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("okio.SegmentedByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 0);
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        segmentedByteString0.lastIndexOf(byteArray0, 969);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("okio.SegmentedByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeDecimalLong(0L);
      SegmentedByteString segmentedByteString0 = (SegmentedByteString)buffer0.snapshot();
      ByteString byteString0 = ByteString.encodeUtf8("0ff!(^8o_");
      segmentedByteString0.rangeEquals((-738), byteString0, (-738), 2808);
      segmentedByteString0.sha1();
      segmentedByteString0.write(buffer0);
      assertFalse(buffer0.exhausted());
      assertEquals(2L, buffer0.completeSegmentByteCount());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeDecimalLong(0L);
      ByteString byteString0 = buffer0.snapshot();
      // Undeclared exception!
      try { 
        byteString0.indexOf((byte[]) null, 2210);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeDecimalLong(0L);
      ByteString byteString0 = buffer0.snapshot();
      byteString0.equals(buffer1);
      // Undeclared exception!
      try { 
        byteString0.hmacSha256((ByteString) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.sha256();
      buffer0.writeDecimalLong(0L);
      ByteString byteString0 = buffer0.snapshot();
      byte[] byteArray0 = new byte[1];
      boolean boolean0 = byteString0.rangeEquals((-1809), byteArray0, (-1809), (-1809));
      assertEquals(1, byteString0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeDecimalLong(0L);
      ByteString byteString0 = buffer0.snapshot();
      assertEquals(1, byteString0.size());
      
      int int0 = ObjectStreamConstants.baseWireHandle;
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) byteString0;
      Charset charset0 = Charset.defaultCharset();
      String string0 = byteString0.string(charset0);
      assertEquals("0", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      ByteString byteString0 = ByteString.encodeUtf8("30X,L|");
      buffer0.write(byteString0);
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, (byte)2);
      segmentedByteString0.toAsciiLowercase();
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[17];
      Segment segment0 = buffer0.head;
      ByteString.encodeUtf8("30X,L|");
      String string0 = segmentedByteString0.utf8;
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeDecimalLong((-2179L));
      SegmentedByteString segmentedByteString0 = (SegmentedByteString)buffer0.snapshot();
      ByteString byteString0 = ByteString.EMPTY;
      ByteString byteString1 = segmentedByteString0.md5();
      segmentedByteString0.write(buffer1);
      Object object0 = new Object();
      segmentedByteString0.equals(byteString1);
      assertFalse(buffer0.exhausted());
      assertEquals(10L, buffer0.size());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 0);
      // Undeclared exception!
      try { 
        segmentedByteString0.base64Url();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("okio.SegmentedByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeDecimalLong(0L);
      ByteString byteString0 = buffer0.snapshot();
      byte[] byteArray0 = new byte[1];
      boolean boolean0 = byteString0.rangeEquals((int) (byte)60, byteArray0, (int) (byte)60, (-1809));
      assertEquals(1, byteString0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeDecimalLong((-1L));
      ByteString byteString0 = buffer0.snapshot();
      ByteString byteString1 = ByteString.EMPTY;
      byteString0.startsWith(byteString1);
      byteString0.hashCode();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeDecimalLong((-33L));
      ByteString byteString0 = buffer0.snapshot();
      byte[] byteArray0 = new byte[11];
      boolean boolean0 = byteString0.rangeEquals((int) (byte)60, byteArray0, (int) (byte)60, (int) (byte)60);
      assertFalse(boolean0);
      assertEquals(3, byteString0.size());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeDecimalLong(1L);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      SegmentedByteString segmentedByteString0 = (SegmentedByteString)buffer1.snapshot();
      buffer1.readDecimalLong();
      Charset.defaultCharset();
      segmentedByteString0.write(buffer0);
      assertEquals(1L, buffer1.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeDecimalLong(0L);
      ByteString byteString0 = buffer0.snapshot();
      byteString0.md5();
      byteString0.hashCode();
      assertEquals(1, byteString0.size());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 0);
      // Undeclared exception!
      try { 
        segmentedByteString0.asByteBuffer();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("okio.SegmentedByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeDecimalLong(0L);
      SegmentedByteString segmentedByteString0 = (SegmentedByteString)buffer1.snapshot();
      Charset.defaultCharset();
      int int0 = ObjectStreamConstants.baseWireHandle;
      byte[] byteArray0 = segmentedByteString0.internalArray();
      assertArrayEquals(new byte[] {(byte)48}, byteArray0);
      
      ByteString byteString0 = ByteString.EMPTY;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      ByteString byteString1 = realBufferedSource0.readByteString();
      boolean boolean0 = segmentedByteString0.equals(byteString1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeDecimalLong(0L);
      ByteString byteString0 = buffer0.snapshot();
      ByteString byteString1 = ByteString.EMPTY;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("s.limit == s.pos", false);
      byteString0.write(mockFileOutputStream0);
      assertEquals(1, byteString0.size());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeDecimalLong((-27L));
      ByteString byteString0 = buffer0.snapshot();
      ByteString byteString1 = byteString0.hmacSha256(byteString0);
      boolean boolean0 = byteString0.startsWith(byteString1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeDecimalLong(0L);
      ByteString byteString0 = buffer0.snapshot();
      ByteString byteString1 = ByteString.EMPTY;
      byteString0.startsWith(byteString1);
      byteString0.hashCode();
      assertEquals(1, byteString0.size());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeDecimalLong(0L);
      ByteString byteString0 = buffer0.snapshot();
      ByteString byteString1 = byteString0.toAsciiUppercase();
      int int0 = byteString0.compareTo(byteString1);
      assertEquals(0, int0);
      
      byteString0.toByteArray();
      byteString0.equals(buffer1);
      assertEquals(1, byteString0.size());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeDecimalLong((-1L));
      ByteString byteString0 = buffer0.snapshot();
      ByteString byteString1 = ByteString.EMPTY;
      byteString1.startsWith(byteString0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      byteString0.hashCode();
      String string0 = byteString0.utf8;
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.sha256();
      buffer0.writeDecimalLong(0L);
      ByteString byteString0 = buffer0.snapshot();
      byte[] byteArray0 = new byte[1];
      byteString0.rangeEquals((int) (byte)60, byteArray0, (-1228), (-1414));
      // Undeclared exception!
      try { 
        byteString0.substring(8191);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endIndex < beginIndex
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Pipe pipe0 = new Pipe(438L);
      Buffer buffer1 = pipe0.buffer;
      Segment segment0 = buffer0.head;
      buffer1.head = null;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-115);
      Segment segment1 = new Segment(byteArray0, 2, (-762), true, true);
      ByteString byteString0 = ByteString.encodeUtf8("T~>}X$7V{\"D#D,");
      Buffer buffer2 = buffer1.write(byteString0);
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer1, (byte)2);
      segmentedByteString0.hex();
      ByteString byteString1 = ByteString.of(byteArray0);
      ByteString byteString2 = segmentedByteString0.hmacSha1(byteString0);
      buffer2.readUtf8();
      segmentedByteString0.equals(byteString1);
      byteString2.toString();
      MockFile mockFile0 = new MockFile("T~>}X$7V{\"D#D,");
      segmentedByteString0.sha1();
      SegmentedByteString segmentedByteString1 = null;
      try {
        segmentedByteString1 = new SegmentedByteString(buffer1, 2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=0 byteCount=2
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeDecimalLong(0L);
      ByteString byteString0 = buffer0.snapshot();
      ByteString byteString1 = byteString0.toAsciiUppercase();
      boolean boolean0 = byteString0.startsWith(byteString1);
      assertTrue(boolean0);
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      ByteString byteString2 = buffer0.snapshot();
      assertTrue(byteString2.equals((Object)byteString0));
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeDecimalLong(0L);
      ByteString byteString0 = buffer1.snapshot();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-59);
      ByteString byteString1 = new ByteString(byteArray0);
      byteString0.startsWith(byteString1);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      // Undeclared exception!
      try { 
        realBufferedSource0.indexOfElement(byteString1, (long) (byte) (-59));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fromIndex < 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeDecimalLong(0L);
      ByteString byteString0 = buffer0.snapshot();
      byteString0.hashCode = (-1);
      byteString0.hashCode();
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeDecimalLong(0L);
      ByteString byteString0 = buffer0.snapshot();
      // Undeclared exception!
      try { 
        byteString0.write((OutputStream) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // out == null
         //
         verifyException("okio.SegmentedByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeDecimalLong(0L);
      SegmentedByteString segmentedByteString0 = (SegmentedByteString)buffer0.snapshot();
      Charset.defaultCharset();
      byte[] byteArray0 = segmentedByteString0.internalArray();
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      boolean boolean0 = segmentedByteString0.startsWith(byteArray0);
      assertTrue(boolean0);
      
      String string0 = segmentedByteString0.toString();
      assertEquals("[text=0]", string0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeDecimalLong(0L);
      ByteString byteString0 = buffer0.snapshot();
      byte[] byteArray0 = new byte[1];
      byteString0.startsWith(byteArray0);
      byteString0.hashCode();
      ByteString.decodeBase64("5`IN=c#");
      // Undeclared exception!
      try { 
        byteString0.indexOf((ByteString) null, 3206);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeDecimalLong(0L);
      SegmentedByteString segmentedByteString0 = (SegmentedByteString)buffer1.snapshot();
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      segmentedByteString0.hashCode();
      segmentedByteString0.write(buffer0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      segmentedByteString0.hex();
      SegmentedByteString segmentedByteString1 = new SegmentedByteString(buffer0, 2);
      ByteString byteString0 = ByteString.decodeBase64("30");
      segmentedByteString1.endsWith(byteString0);
      Segment segment0 = buffer1.head;
      // Undeclared exception!
      try { 
        buffer0.write(buffer1, 526L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // source == this
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeDecimalLong(0L);
      SegmentedByteString segmentedByteString0 = (SegmentedByteString)buffer1.snapshot();
      Charset.defaultCharset();
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      segmentedByteString0.hashCode();
      segmentedByteString0.write(buffer0);
      segmentedByteString0.utf8();
      SegmentedByteString segmentedByteString1 = new SegmentedByteString(buffer0, (byte)2);
      byte[] byteArray0 = new byte[1];
      boolean boolean0 = segmentedByteString1.endsWith(byteArray0);
      assertEquals(2L, buffer0.completeSegmentByteCount());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeDecimalLong(0L);
      SegmentedByteString segmentedByteString0 = (SegmentedByteString)buffer1.snapshot();
      Charset.defaultCharset();
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      segmentedByteString0.write(buffer0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      SegmentedByteString segmentedByteString1 = new SegmentedByteString(buffer0, (byte)2);
      buffer0.rangeEquals(0L, (ByteString) segmentedByteString1);
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        ByteString.of(byteArray0, (int) (byte)2, (-58));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=2 byteCount=-58
         //
         verifyException("okio.Util", e);
      }
  }
}
