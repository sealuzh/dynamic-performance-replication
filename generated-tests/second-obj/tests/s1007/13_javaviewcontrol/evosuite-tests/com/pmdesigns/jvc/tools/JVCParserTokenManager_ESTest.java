/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 06 20:41:11 GMT 2018
 */

package com.pmdesigns.jvc.tools;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.pmdesigns.jvc.tools.JVCParserTokenManager;
import com.pmdesigns.jvc.tools.SimpleCharStream;
import com.pmdesigns.jvc.tools.Token;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.CharArrayReader;
import java.io.FileNotFoundException;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.PrintStream;
import java.io.PushbackInputStream;
import java.io.Reader;
import java.io.UnsupportedEncodingException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JVCParserTokenManager_ESTest extends JVCParserTokenManager_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SimpleCharStream simpleCharStream0 = new SimpleCharStream((Reader) null, 27, 27, 92);
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0);
      jVCParserTokenManager0.setDebugStream((PrintStream) null);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-35);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(byteArrayInputStream0, "DEFAULT");
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0);
      Token token0 = jVCParserTokenManager0.getNextToken();
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(16, token0.kind);
      assertEquals(1, token0.endLine);
      assertEquals("\uFFFD", token0.toString());
      assertEquals(1, token0.endColumn);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)23;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(byteArrayInputStream0, "DEFAULT");
      simpleCharStream0.setTabSize((byte)23);
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0);
      Token token0 = jVCParserTokenManager0.getNextToken();
      assertEquals(0, simpleCharStream0.bufpos);
      assertEquals(1, token0.beginColumn);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)15;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray0);
      ByteArrayInputStream byteArrayInputStream2 = new ByteArrayInputStream(byteArray0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream2);
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(pushbackInputStream0, 4, 1);
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0, 1);
      boolean boolean0 = SimpleCharStream.staticFlag;
      jVCParserTokenManager0.getNextToken();
      byteArrayInputStream1.markSupported();
      jVCParserTokenManager0.ReInit(simpleCharStream0);
      SimpleCharStream simpleCharStream1 = null;
      try {
        simpleCharStream1 = new SimpleCharStream(pushbackInputStream0, "I8,");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      byte[] byteArray0 = new byte[15];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(byteArrayInputStream0);
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray0);
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0, 4);
      byteArrayInputStream1.read(byteArray0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      boolean boolean0 = simpleCharStream0.prevCharIsCR;
      Token token0 = jVCParserTokenManager0.getNextToken();
      assertEquals(16, token0.kind);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.endLine);
      assertEquals("\u0000", token0.toString());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      byte[] byteArray0 = new byte[13];
      byteArray0[0] = (byte)22;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray0);
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(byteArrayInputStream1, (byte)22, 3);
      byteArrayInputStream0.mark((-1));
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0, 3);
      Token token0 = jVCParserTokenManager0.getNextToken();
      assertEquals(3, token0.endColumn);
      assertEquals(22, token0.endLine);
      assertEquals(22, token0.beginLine);
      assertEquals("\u0016", token0.toString());
      assertEquals(3, token0.beginColumn);
      assertEquals(16, token0.kind);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[3] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(4, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteArrayInputStream0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(byteArrayInputStream0);
      assertEquals(4, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream0);
      
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0, 2);
      assertEquals(4, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(jVCParserTokenManager0);
      
      Token token0 = jVCParserTokenManager0.getNextToken();
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals("\u0000", token0.toString());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(16, token0.kind);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.endLine);
      assertNotNull(token0);
      
      jVCParserTokenManager0.ReInit(simpleCharStream0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getLine());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream("\u0000");
      assertNotNull(mockPrintStream0);
      
      MockPrintStream mockPrintStream1 = new MockPrintStream("\u0000");
      assertNotNull(mockPrintStream1);
      assertFalse(mockPrintStream1.equals((Object)mockPrintStream0));
      
      mockPrintStream0.close();
      assertNotSame(mockPrintStream0, mockPrintStream1);
      assertFalse(mockPrintStream0.equals((Object)mockPrintStream1));
      
      byteArrayInputStream0.close();
      assertEquals(0, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      CharArrayReader charArrayReader0 = null;
      try {
        charArrayReader0 = new CharArrayReader((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.CharArrayReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[3] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(4, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteArrayInputStream0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(byteArrayInputStream0);
      assertEquals(4, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(simpleCharStream0);
      
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0);
      assertEquals(4, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(jVCParserTokenManager0);
      
      jVCParserTokenManager0.curLexState = 64;
      assertEquals(4, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      
      Token token0 = jVCParserTokenManager0.getNextToken();
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(1, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getColumn());
      assertEquals("", token0.toString());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.bufpos);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.endColumn);
      assertEquals(0, token0.kind);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.endLine);
      assertNotNull(token0);
      
      long long0 = byteArrayInputStream0.skip(1);
      assertEquals(0L, long0);
      assertEquals(0, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      jVCParserTokenManager0.ReInit(simpleCharStream0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(1, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getColumn());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.bufpos);
      
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream("");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)74;
      byteArray0[1] = (byte)8;
      byteArray0[3] = (byte)8;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(4, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)74, (byte)8, (byte)0, (byte)8}, byteArray0);
      assertNotNull(byteArrayInputStream0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(byteArrayInputStream0);
      assertEquals(4, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertArrayEquals(new byte[] {(byte)74, (byte)8, (byte)0, (byte)8}, byteArray0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream0);
      
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0);
      assertEquals(4, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertArrayEquals(new byte[] {(byte)74, (byte)8, (byte)0, (byte)8}, byteArray0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(jVCParserTokenManager0);
      
      Token token0 = jVCParserTokenManager0.getNextToken();
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals("J", token0.toString());
      assertArrayEquals(new byte[] {(byte)74, (byte)8, (byte)0, (byte)8}, byteArray0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.bufpos);
      assertEquals(1, token0.endColumn);
      assertEquals(16, token0.kind);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginColumn);
      assertNotNull(token0);
      
      jVCParserTokenManager0.jjround = 2328;
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      
      // Undeclared exception!
      try { 
        jVCParserTokenManager0.ReInit(simpleCharStream0, 41);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 41. State unchanged.
         //
         verifyException("com.pmdesigns.jvc.tools.JVCParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      byte[] byteArray0 = new byte[13];
      byteArray0[0] = (byte)13;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(13, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray0);
      assertEquals(13, byteArrayInputStream1.available());
      assertNotNull(byteArrayInputStream1);
      assertFalse(byteArrayInputStream1.equals((Object)byteArrayInputStream0));
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(byteArrayInputStream1, (byte)13, 3);
      assertEquals(13, byteArrayInputStream1.available());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(simpleCharStream0);
      assertFalse(byteArrayInputStream1.equals((Object)byteArrayInputStream0));
      
      byteArrayInputStream0.mark((-1));
      assertEquals(13, byteArrayInputStream0.available());
      assertNotSame(byteArrayInputStream0, byteArrayInputStream1);
      assertFalse(byteArrayInputStream0.equals((Object)byteArrayInputStream1));
      
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0, 3);
      assertEquals(13, byteArrayInputStream1.available());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(jVCParserTokenManager0);
      assertFalse(byteArrayInputStream1.equals((Object)byteArrayInputStream0));
      
      Token token0 = jVCParserTokenManager0.getNextToken();
      assertEquals(0, byteArrayInputStream1.available());
      assertEquals(13, simpleCharStream0.getLine());
      assertEquals(13, simpleCharStream0.getBeginLine());
      assertEquals(3, simpleCharStream0.getBeginColumn());
      assertEquals(3, simpleCharStream0.getEndColumn());
      assertEquals(13, simpleCharStream0.getEndLine());
      assertEquals(3, simpleCharStream0.getColumn());
      assertEquals("\r", token0.toString());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.bufpos);
      assertEquals(3, token0.beginColumn);
      assertEquals(3, token0.endColumn);
      assertEquals(13, token0.endLine);
      assertEquals(6, token0.kind);
      assertEquals(13, token0.beginLine);
      assertNotNull(token0);
      assertNotSame(byteArrayInputStream1, byteArrayInputStream0);
      assertFalse(byteArrayInputStream1.equals((Object)byteArrayInputStream0));
      
      Token token1 = jVCParserTokenManager0.jjFillToken();
      assertEquals(0, byteArrayInputStream1.available());
      assertEquals(13, simpleCharStream0.getLine());
      assertEquals(13, simpleCharStream0.getBeginLine());
      assertEquals(3, simpleCharStream0.getBeginColumn());
      assertEquals(3, simpleCharStream0.getEndColumn());
      assertEquals(13, simpleCharStream0.getEndLine());
      assertEquals(3, simpleCharStream0.getColumn());
      assertEquals("\r", token1.toString());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.bufpos);
      assertEquals(13, token1.endLine);
      assertEquals(6, token1.kind);
      assertEquals(3, token1.endColumn);
      assertEquals(3, token1.beginColumn);
      assertEquals(13, token1.beginLine);
      assertNotNull(token1);
      assertNotSame(byteArrayInputStream1, byteArrayInputStream0);
      assertNotSame(token1, token0);
      assertFalse(byteArrayInputStream1.equals((Object)byteArrayInputStream0));
      assertFalse(token1.equals((Object)token0));
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)99;
      byteArray0[0] = (byte)99;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(3, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)99, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteArrayInputStream0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(byteArrayInputStream0);
      assertEquals(3, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertArrayEquals(new byte[] {(byte)99, (byte)0, (byte)0}, byteArray0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream0);
      
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray0);
      assertEquals(3, byteArrayInputStream1.available());
      assertArrayEquals(new byte[] {(byte)99, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteArrayInputStream1);
      assertFalse(byteArrayInputStream1.equals((Object)byteArrayInputStream0));
      
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream((InputStream) null);
      assertNotNull(pushbackInputStream0);
      
      byte[] byteArray1 = new byte[1];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte)99;
      SimpleCharStream simpleCharStream1 = new SimpleCharStream(byteArrayInputStream1, 4, (byte)99);
      assertEquals(3, byteArrayInputStream1.available());
      assertEquals(0, simpleCharStream1.getBeginColumn());
      assertEquals(0, simpleCharStream1.getBeginLine());
      assertArrayEquals(new byte[] {(byte)99, (byte)0, (byte)0}, byteArray0);
      assertEquals((-1), simpleCharStream1.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArrayInputStream1.equals((Object)byteArrayInputStream0));
      assertFalse(simpleCharStream1.equals((Object)simpleCharStream0));
      
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0, 4);
      assertEquals(3, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertArrayEquals(new byte[] {(byte)99, (byte)0, (byte)0}, byteArray0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(jVCParserTokenManager0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArrayInputStream0.equals((Object)byteArrayInputStream1));
      assertFalse(simpleCharStream0.equals((Object)simpleCharStream1));
      
      boolean boolean0 = byteArrayInputStream1.markSupported();
      assertTrue(boolean0);
      assertEquals(3, byteArrayInputStream1.available());
      assertArrayEquals(new byte[] {(byte)99, (byte)0, (byte)0}, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArrayInputStream1, byteArrayInputStream0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArrayInputStream1.equals((Object)byteArrayInputStream0));
      
      Token token0 = jVCParserTokenManager0.getNextToken();
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getColumn());
      assertEquals("c", token0.toString());
      assertArrayEquals(new byte[] {(byte)99, (byte)0, (byte)0}, byteArray0);
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.endLine);
      assertEquals(16, token0.kind);
      assertEquals(1, token0.beginLine);
      assertNotNull(token0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArrayInputStream0, byteArrayInputStream1);
      assertNotSame(simpleCharStream0, simpleCharStream1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArrayInputStream0.equals((Object)byteArrayInputStream1));
      assertFalse(simpleCharStream0.equals((Object)simpleCharStream1));
      
      boolean boolean1 = byteArrayInputStream0.markSupported();
      assertTrue(boolean1);
      assertEquals(0, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)99, (byte)0, (byte)0}, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArrayInputStream0, byteArrayInputStream1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArrayInputStream0.equals((Object)byteArrayInputStream1));
      assertTrue(boolean1 == boolean0);
      
      SimpleCharStream simpleCharStream2 = null;
      try {
        simpleCharStream2 = new SimpleCharStream(byteArrayInputStream0, "c");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      byte[] byteArray0 = new byte[17];
      byteArray0[0] = (byte)13;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(17, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray0);
      assertEquals(17, byteArrayInputStream1.available());
      assertNotNull(byteArrayInputStream1);
      assertFalse(byteArrayInputStream1.equals((Object)byteArrayInputStream0));
      
      ByteArrayInputStream byteArrayInputStream2 = new ByteArrayInputStream(byteArray0);
      assertEquals(17, byteArrayInputStream2.available());
      assertNotNull(byteArrayInputStream2);
      assertFalse(byteArrayInputStream2.equals((Object)byteArrayInputStream0));
      assertFalse(byteArrayInputStream2.equals((Object)byteArrayInputStream1));
      
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0);
      assertEquals(17, byteArrayInputStream0.available());
      assertNotNull(pushbackInputStream0);
      assertFalse(byteArrayInputStream0.equals((Object)byteArrayInputStream2));
      assertFalse(byteArrayInputStream0.equals((Object)byteArrayInputStream1));
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(pushbackInputStream0, 4, 1093);
      assertEquals(17, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream0);
      assertFalse(byteArrayInputStream0.equals((Object)byteArrayInputStream2));
      assertFalse(byteArrayInputStream0.equals((Object)byteArrayInputStream1));
      
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0, 4);
      assertEquals(17, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(jVCParserTokenManager0);
      assertFalse(byteArrayInputStream0.equals((Object)byteArrayInputStream2));
      assertFalse(byteArrayInputStream0.equals((Object)byteArrayInputStream1));
      
      boolean boolean0 = byteArrayInputStream0.markSupported();
      assertTrue(boolean0);
      assertEquals(17, byteArrayInputStream0.available());
      assertNotSame(byteArrayInputStream0, byteArrayInputStream2);
      assertNotSame(byteArrayInputStream0, byteArrayInputStream1);
      assertFalse(byteArrayInputStream0.equals((Object)byteArrayInputStream2));
      assertFalse(byteArrayInputStream0.equals((Object)byteArrayInputStream1));
      
      Token token0 = jVCParserTokenManager0.getNextToken();
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(4, simpleCharStream0.getEndLine());
      assertEquals(4, simpleCharStream0.getLine());
      assertEquals(1093, simpleCharStream0.getColumn());
      assertEquals(1093, simpleCharStream0.getEndColumn());
      assertEquals(1093, simpleCharStream0.getBeginColumn());
      assertEquals(4, simpleCharStream0.getBeginLine());
      assertEquals("\r", token0.toString());
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(4, token0.endLine);
      assertEquals(4, token0.beginLine);
      assertEquals(1093, token0.beginColumn);
      assertEquals(1093, token0.endColumn);
      assertEquals(6, token0.kind);
      assertNotNull(token0);
      assertNotSame(byteArrayInputStream0, byteArrayInputStream2);
      assertNotSame(byteArrayInputStream0, byteArrayInputStream1);
      assertFalse(byteArrayInputStream0.equals((Object)byteArrayInputStream2));
      assertFalse(byteArrayInputStream0.equals((Object)byteArrayInputStream1));
      
      boolean boolean1 = byteArrayInputStream0.markSupported();
      assertTrue(boolean1);
      assertEquals(0, byteArrayInputStream0.available());
      assertNotSame(byteArrayInputStream0, byteArrayInputStream2);
      assertNotSame(byteArrayInputStream0, byteArrayInputStream1);
      assertFalse(byteArrayInputStream0.equals((Object)byteArrayInputStream2));
      assertFalse(byteArrayInputStream0.equals((Object)byteArrayInputStream1));
      assertTrue(boolean1 == boolean0);
      
      jVCParserTokenManager0.ReInit(simpleCharStream0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(4, simpleCharStream0.getEndLine());
      assertEquals(4, simpleCharStream0.getLine());
      assertEquals(1093, simpleCharStream0.getColumn());
      assertEquals(1093, simpleCharStream0.getEndColumn());
      assertEquals(1093, simpleCharStream0.getBeginColumn());
      assertEquals(4, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotSame(byteArrayInputStream0, byteArrayInputStream2);
      assertNotSame(byteArrayInputStream0, byteArrayInputStream1);
      assertFalse(byteArrayInputStream0.equals((Object)byteArrayInputStream2));
      assertFalse(byteArrayInputStream0.equals((Object)byteArrayInputStream1));
      
      SimpleCharStream simpleCharStream1 = null;
      try {
        simpleCharStream1 = new SimpleCharStream(byteArrayInputStream1, "JeTRa41kfp");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      byte[] byteArray0 = new byte[13];
      byteArray0[0] = (byte)13;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(13, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(byteArrayInputStream0, (byte)13, 3);
      assertEquals(13, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream0);
      
      byte[] byteArray1 = new byte[0];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      int int0 = byteArrayInputStream0.read(byteArray1);
      assertEquals(0, int0);
      assertEquals(13, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0);
      assertEquals(13, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(jVCParserTokenManager0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      boolean boolean1 = simpleCharStream0.prevCharIsLF;
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      Token token0 = jVCParserTokenManager0.getNextToken();
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(3, simpleCharStream0.getBeginColumn());
      assertEquals(3, simpleCharStream0.getEndColumn());
      assertEquals(13, simpleCharStream0.getEndLine());
      assertEquals(3, simpleCharStream0.getColumn());
      assertEquals(13, simpleCharStream0.getBeginLine());
      assertEquals(13, simpleCharStream0.getLine());
      assertEquals("\r", token0.toString());
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(3, token0.endColumn);
      assertEquals(13, token0.beginLine);
      assertEquals(3, token0.beginColumn);
      assertEquals(13, token0.endLine);
      assertEquals(6, token0.kind);
      assertNotNull(token0);
      assertNotSame(byteArray0, byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      
      jVCParserTokenManager0.SwitchTo(3);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(3, simpleCharStream0.getBeginColumn());
      assertEquals(3, simpleCharStream0.getEndColumn());
      assertEquals(13, simpleCharStream0.getEndLine());
      assertEquals(3, simpleCharStream0.getColumn());
      assertEquals(13, simpleCharStream0.getBeginLine());
      assertEquals(13, simpleCharStream0.getLine());
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotSame(byteArray0, byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray1));
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[5] = (byte)29;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(7, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)29, (byte)0}, byteArray0);
      assertNotNull(byteArrayInputStream0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(byteArrayInputStream0);
      assertEquals(7, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)29, (byte)0}, byteArray0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(simpleCharStream0);
      
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0);
      assertEquals(7, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)29, (byte)0}, byteArray0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(jVCParserTokenManager0);
      
      Token token0 = jVCParserTokenManager0.getNextToken();
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(1, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals("\u0000", token0.toString());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)29, (byte)0}, byteArray0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.bufpos);
      assertEquals(1, token0.endLine);
      assertEquals(16, token0.kind);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.endColumn);
      assertNotNull(token0);
      
      byteArrayInputStream0.close();
      assertEquals(0, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)29, (byte)0}, byteArray0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = ',';
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      charArray0[1] = 'e';
      simpleCharStream0.buffer = charArray0;
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(1, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      
      MockFile mockFile0 = new MockFile("\u0000", "\u0000");
      assertEquals("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/13_javaviewcontrol/\u0000", mockFile0.getParent());
      assertFalse(mockFile0.canRead());
      assertEquals("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/13_javaviewcontrol/\u0000/\u0000", mockFile0.toString());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.exists());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals("\u0000", mockFile0.getName());
      assertTrue(mockFile0.isAbsolute());
      assertNotNull(mockFile0);
      
      jVCParserTokenManager0.SwitchTo(0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(1, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)29, (byte)0}, byteArray0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.bufpos);
      
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      Token token1 = jVCParserTokenManager0.getNextToken();
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(2, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(2, simpleCharStream0.getBeginColumn());
      assertEquals(2, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals("e", token1.toString());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)29, (byte)0}, byteArray0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, simpleCharStream0.bufpos);
      assertEquals(1, token1.endLine);
      assertEquals(2, token1.endColumn);
      assertEquals(16, token1.kind);
      assertEquals(1, token1.beginLine);
      assertEquals(2, token1.beginColumn);
      assertNotNull(token1);
      assertNotSame(token1, token0);
      assertFalse(token1.equals((Object)token0));
      
      // Undeclared exception!
      try { 
        jVCParserTokenManager0.ReInit(simpleCharStream0, 35);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 35. State unchanged.
         //
         verifyException("com.pmdesigns.jvc.tools.JVCParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)74;
      byteArray0[1] = (byte)74;
      byteArray0[3] = (byte)74;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(4, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)74, (byte)74, (byte)0, (byte)74}, byteArray0);
      assertNotNull(byteArrayInputStream0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(byteArrayInputStream0);
      assertEquals(4, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertArrayEquals(new byte[] {(byte)74, (byte)74, (byte)0, (byte)74}, byteArray0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream0);
      
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0, 2);
      assertEquals(4, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertArrayEquals(new byte[] {(byte)74, (byte)74, (byte)0, (byte)74}, byteArray0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(jVCParserTokenManager0);
      
      Token token0 = jVCParserTokenManager0.getNextToken();
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getEndColumn());
      assertEquals("J", token0.toString());
      assertArrayEquals(new byte[] {(byte)74, (byte)74, (byte)0, (byte)74}, byteArray0);
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(16, token0.kind);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.endColumn);
      assertNotNull(token0);
      
      jVCParserTokenManager0.ReInit(simpleCharStream0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getEndColumn());
      assertArrayEquals(new byte[] {(byte)74, (byte)74, (byte)0, (byte)74}, byteArray0);
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream("J");
      assertNotNull(mockPrintStream0);
      
      MockPrintStream mockPrintStream1 = new MockPrintStream("J");
      assertNotNull(mockPrintStream1);
      assertFalse(mockPrintStream1.equals((Object)mockPrintStream0));
      
      mockPrintStream0.close();
      assertNotSame(mockPrintStream0, mockPrintStream1);
      assertFalse(mockPrintStream0.equals((Object)mockPrintStream1));
      
      byteArrayInputStream0.close();
      assertEquals(0, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)74, (byte)74, (byte)0, (byte)74}, byteArray0);
      
      CharArrayReader charArrayReader0 = null;
      try {
        charArrayReader0 = new CharArrayReader((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.CharArrayReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-23);
      byteArray0[1] = (byte) (-23);
      byteArray0[3] = (byte) (-23);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(4, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte) (-23), (byte) (-23), (byte)0, (byte) (-23)}, byteArray0);
      assertNotNull(byteArrayInputStream0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(byteArrayInputStream0);
      assertEquals(4, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertArrayEquals(new byte[] {(byte) (-23), (byte) (-23), (byte)0, (byte) (-23)}, byteArray0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream0);
      
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0);
      assertEquals(4, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertArrayEquals(new byte[] {(byte) (-23), (byte) (-23), (byte)0, (byte) (-23)}, byteArray0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(jVCParserTokenManager0);
      
      jVCParserTokenManager0.curLexState = 64;
      assertEquals(4, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      
      JVCParserTokenManager jVCParserTokenManager1 = new JVCParserTokenManager(simpleCharStream0, 2);
      assertEquals(4, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertArrayEquals(new byte[] {(byte) (-23), (byte) (-23), (byte)0, (byte) (-23)}, byteArray0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(jVCParserTokenManager1);
      assertFalse(jVCParserTokenManager1.equals((Object)jVCParserTokenManager0));
      
      Token token0 = jVCParserTokenManager1.getNextToken();
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals("\uFFFD", token0.toString());
      assertArrayEquals(new byte[] {(byte) (-23), (byte) (-23), (byte)0, (byte) (-23)}, byteArray0);
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(16, token0.kind);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.beginColumn);
      assertNotNull(token0);
      assertNotSame(jVCParserTokenManager1, jVCParserTokenManager0);
      assertFalse(jVCParserTokenManager1.equals((Object)jVCParserTokenManager0));
      
      jVCParserTokenManager1.ReInit(simpleCharStream0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertArrayEquals(new byte[] {(byte) (-23), (byte) (-23), (byte)0, (byte) (-23)}, byteArray0);
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotSame(jVCParserTokenManager1, jVCParserTokenManager0);
      assertFalse(jVCParserTokenManager1.equals((Object)jVCParserTokenManager0));
      
      MockPrintStream mockPrintStream0 = new MockPrintStream("\uFFFD");
      assertNotNull(mockPrintStream0);
      
      jVCParserTokenManager1.jjmatchedKind = 1;
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      
      MockPrintStream mockPrintStream1 = null;
      try {
        mockPrintStream1 = new MockPrintStream("\uFFFD", "\uFFFD");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // \uFFFD
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      byte[] byteArray0 = new byte[15];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(15, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(byteArrayInputStream0);
      assertEquals(15, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream0);
      
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0);
      assertEquals(15, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(jVCParserTokenManager0);
      
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray0);
      assertEquals(15, byteArrayInputStream1.available());
      assertNotNull(byteArrayInputStream1);
      assertFalse(byteArrayInputStream1.equals((Object)byteArrayInputStream0));
      
      jVCParserTokenManager0.jjmatchedKind = (-1);
      assertEquals(15, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      
      JVCParserTokenManager jVCParserTokenManager1 = new JVCParserTokenManager(simpleCharStream0, 4);
      assertEquals(15, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(jVCParserTokenManager1);
      assertFalse(byteArrayInputStream0.equals((Object)byteArrayInputStream1));
      assertFalse(jVCParserTokenManager1.equals((Object)jVCParserTokenManager0));
      
      int int0 = byteArrayInputStream1.read(byteArray0);
      assertEquals(15, int0);
      assertEquals(0, byteArrayInputStream1.available());
      assertNotSame(byteArrayInputStream1, byteArrayInputStream0);
      assertFalse(byteArrayInputStream1.equals((Object)byteArrayInputStream0));
      
      jVCParserTokenManager1.curLexState = (-1);
      assertEquals(15, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      
      jVCParserTokenManager1.jjmatchedPos = (-1);
      assertEquals(15, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      
      jVCParserTokenManager0.curChar = '$';
      assertEquals(15, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      jVCParserTokenManager1.jjmatchedKind = (int) '$';
      assertEquals(15, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      
      // Undeclared exception!
      try { 
        jVCParserTokenManager1.getNextToken();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 36
         //
         verifyException("com.pmdesigns.jvc.tools.JVCParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)74;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(3, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)74, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteArrayInputStream0);
      
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray0);
      assertEquals(3, byteArrayInputStream1.available());
      assertArrayEquals(new byte[] {(byte)74, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteArrayInputStream1);
      assertFalse(byteArrayInputStream1.equals((Object)byteArrayInputStream0));
      
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream1);
      assertEquals(3, byteArrayInputStream1.available());
      assertArrayEquals(new byte[] {(byte)74, (byte)0, (byte)0}, byteArray0);
      assertNotNull(pushbackInputStream0);
      assertFalse(byteArrayInputStream1.equals((Object)byteArrayInputStream0));
      
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0, 32);
      assertEquals(3, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)74, (byte)0, (byte)0}, byteArray0);
      assertNotNull(bufferedInputStream0);
      assertFalse(byteArrayInputStream0.equals((Object)byteArrayInputStream1));
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(bufferedInputStream0, 45, 45);
      assertEquals(3, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertArrayEquals(new byte[] {(byte)74, (byte)0, (byte)0}, byteArray0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream0);
      assertFalse(byteArrayInputStream0.equals((Object)byteArrayInputStream1));
      
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0, 1);
      assertEquals(3, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertArrayEquals(new byte[] {(byte)74, (byte)0, (byte)0}, byteArray0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(jVCParserTokenManager0);
      assertFalse(byteArrayInputStream0.equals((Object)byteArrayInputStream1));
      
      boolean boolean0 = SimpleCharStream.staticFlag;
      assertFalse(boolean0);
      
      Token token0 = jVCParserTokenManager0.getNextToken();
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(45, simpleCharStream0.getBeginColumn());
      assertEquals(45, simpleCharStream0.getEndLine());
      assertEquals(45, simpleCharStream0.getBeginLine());
      assertEquals(45, simpleCharStream0.getColumn());
      assertEquals(45, simpleCharStream0.getEndColumn());
      assertEquals(45, simpleCharStream0.getLine());
      assertEquals("J", token0.toString());
      assertArrayEquals(new byte[] {(byte)74, (byte)0, (byte)0}, byteArray0);
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(45, token0.endLine);
      assertEquals(45, token0.endColumn);
      assertEquals(16, token0.kind);
      assertEquals(45, token0.beginLine);
      assertEquals(45, token0.beginColumn);
      assertNotNull(token0);
      assertNotSame(byteArrayInputStream0, byteArrayInputStream1);
      assertFalse(byteArrayInputStream0.equals((Object)byteArrayInputStream1));
      
      boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      long long0 = pushbackInputStream0.skip((byte)74);
      assertEquals(3L, long0);
      assertEquals(0, byteArrayInputStream1.available());
      assertArrayEquals(new byte[] {(byte)74, (byte)0, (byte)0}, byteArray0);
      assertNotSame(byteArrayInputStream1, byteArrayInputStream0);
      assertFalse(byteArrayInputStream1.equals((Object)byteArrayInputStream0));
      
      long long1 = pushbackInputStream0.skip(4);
      assertEquals(0L, long1);
      assertEquals(0, byteArrayInputStream1.available());
      assertArrayEquals(new byte[] {(byte)74, (byte)0, (byte)0}, byteArray0);
      assertNotSame(byteArrayInputStream1, byteArrayInputStream0);
      assertFalse(byteArrayInputStream1.equals((Object)byteArrayInputStream0));
      assertFalse(long1 == long0);
      
      boolean boolean2 = byteArrayInputStream0.markSupported();
      assertTrue(boolean2);
      assertEquals(0, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)74, (byte)0, (byte)0}, byteArray0);
      assertNotSame(byteArrayInputStream0, byteArrayInputStream1);
      assertFalse(byteArrayInputStream0.equals((Object)byteArrayInputStream1));
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      ByteArrayInputStream byteArrayInputStream2 = new ByteArrayInputStream(byteArray0, 51, 15);
      assertEquals((-48), byteArrayInputStream2.available());
      assertArrayEquals(new byte[] {(byte)74, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteArrayInputStream2);
      assertFalse(byteArrayInputStream2.equals((Object)byteArrayInputStream1));
      assertFalse(byteArrayInputStream2.equals((Object)byteArrayInputStream0));
      
      boolean boolean3 = byteArrayInputStream1.markSupported();
      assertTrue(boolean3);
      assertEquals(0, byteArrayInputStream1.available());
      assertArrayEquals(new byte[] {(byte)74, (byte)0, (byte)0}, byteArray0);
      assertNotSame(byteArrayInputStream1, byteArrayInputStream0);
      assertNotSame(byteArrayInputStream1, byteArrayInputStream2);
      assertFalse(byteArrayInputStream1.equals((Object)byteArrayInputStream0));
      assertFalse(byteArrayInputStream1.equals((Object)byteArrayInputStream2));
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      
      // Undeclared exception!
      try { 
        jVCParserTokenManager0.ReInit(simpleCharStream0, 45);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 45. State unchanged.
         //
         verifyException("com.pmdesigns.jvc.tools.JVCParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte) (-23);
      byteArray0[3] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(4, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)0, (byte) (-23), (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteArrayInputStream0);
      
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertFalse(boolean0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(byteArrayInputStream0);
      assertEquals(4, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertArrayEquals(new byte[] {(byte)0, (byte) (-23), (byte)0, (byte)0}, byteArray0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(simpleCharStream0);
      
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0);
      assertEquals(4, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertArrayEquals(new byte[] {(byte)0, (byte) (-23), (byte)0, (byte)0}, byteArray0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(jVCParserTokenManager0);
      
      JVCParserTokenManager jVCParserTokenManager1 = new JVCParserTokenManager(simpleCharStream0, (byte)0);
      assertEquals(4, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertArrayEquals(new byte[] {(byte)0, (byte) (-23), (byte)0, (byte)0}, byteArray0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(jVCParserTokenManager1);
      assertFalse(jVCParserTokenManager1.equals((Object)jVCParserTokenManager0));
      
      Token token0 = jVCParserTokenManager0.getNextToken();
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals("\u0000", token0.toString());
      assertArrayEquals(new byte[] {(byte)0, (byte) (-23), (byte)0, (byte)0}, byteArray0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.bufpos);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.endColumn);
      assertEquals(16, token0.kind);
      assertEquals(1, token0.beginLine);
      assertNotNull(token0);
      assertNotSame(jVCParserTokenManager0, jVCParserTokenManager1);
      assertFalse(jVCParserTokenManager0.equals((Object)jVCParserTokenManager1));
      
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray0, 10, (-2384));
      assertEquals((-2384), byteArrayInputStream1.available());
      assertArrayEquals(new byte[] {(byte)0, (byte) (-23), (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteArrayInputStream1);
      assertFalse(byteArrayInputStream1.equals((Object)byteArrayInputStream0));
      
      boolean boolean1 = byteArrayInputStream1.markSupported();
      assertTrue(boolean1);
      assertEquals((-2384), byteArrayInputStream1.available());
      assertArrayEquals(new byte[] {(byte)0, (byte) (-23), (byte)0, (byte)0}, byteArray0);
      assertNotSame(byteArrayInputStream1, byteArrayInputStream0);
      assertFalse(byteArrayInputStream1.equals((Object)byteArrayInputStream0));
      assertFalse(boolean1 == boolean0);
      
      Token token1 = jVCParserTokenManager1.getNextToken();
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(2, simpleCharStream0.getColumn());
      assertEquals(2, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(2, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals("\uFFFD", token1.toString());
      assertArrayEquals(new byte[] {(byte)0, (byte) (-23), (byte)0, (byte)0}, byteArray0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, simpleCharStream0.bufpos);
      assertEquals(1, token1.endLine);
      assertEquals(16, token1.kind);
      assertEquals(1, token1.beginLine);
      assertEquals(2, token1.beginColumn);
      assertEquals(2, token1.endColumn);
      assertNotNull(token1);
      assertNotSame(byteArrayInputStream0, byteArrayInputStream1);
      assertNotSame(jVCParserTokenManager1, jVCParserTokenManager0);
      assertNotSame(token1, token0);
      assertFalse(byteArrayInputStream0.equals((Object)byteArrayInputStream1));
      assertFalse(jVCParserTokenManager1.equals((Object)jVCParserTokenManager0));
      assertFalse(token1.equals((Object)token0));
      
      boolean boolean2 = byteArrayInputStream0.markSupported();
      assertTrue(boolean2);
      assertEquals(0, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)0, (byte) (-23), (byte)0, (byte)0}, byteArray0);
      assertNotSame(byteArrayInputStream0, byteArrayInputStream1);
      assertFalse(byteArrayInputStream0.equals((Object)byteArrayInputStream1));
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      boolean boolean3 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean3);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      
      Token token2 = jVCParserTokenManager1.getNextToken();
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(3, simpleCharStream0.getColumn());
      assertEquals(3, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(3, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals("\u0000", token2.toString());
      assertArrayEquals(new byte[] {(byte)0, (byte) (-23), (byte)0, (byte)0}, byteArray0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(2, simpleCharStream0.bufpos);
      assertEquals(3, token2.endColumn);
      assertEquals(1, token2.endLine);
      assertEquals(3, token2.beginColumn);
      assertEquals(16, token2.kind);
      assertEquals(1, token2.beginLine);
      assertNotNull(token2);
      assertNotSame(byteArrayInputStream0, byteArrayInputStream1);
      assertNotSame(jVCParserTokenManager1, jVCParserTokenManager0);
      assertNotSame(token2, token0);
      assertNotSame(token2, token1);
      assertFalse(byteArrayInputStream0.equals((Object)byteArrayInputStream1));
      assertFalse(jVCParserTokenManager1.equals((Object)jVCParserTokenManager0));
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
      
      boolean boolean4 = byteArrayInputStream1.markSupported();
      assertTrue(boolean4);
      assertEquals((-2384), byteArrayInputStream1.available());
      assertArrayEquals(new byte[] {(byte)0, (byte) (-23), (byte)0, (byte)0}, byteArray0);
      assertNotSame(byteArrayInputStream1, byteArrayInputStream0);
      assertFalse(byteArrayInputStream1.equals((Object)byteArrayInputStream0));
      assertTrue(boolean4 == boolean2);
      assertTrue(boolean4 == boolean3);
      assertFalse(boolean4 == boolean0);
      assertTrue(boolean4 == boolean1);
      
      // Undeclared exception!
      try { 
        jVCParserTokenManager0.ReInit(simpleCharStream0, (-2148));
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : -2148. State unchanged.
         //
         verifyException("com.pmdesigns.jvc.tools.JVCParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      byte[] byteArray0 = new byte[15];
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(15, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      
      boolean boolean2 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      char[] charArray0 = new char[8];
      charArray0[0] = '^';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'^', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(charArrayReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(charArrayReader0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertArrayEquals(new char[] {'^', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream0);
      
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0, 3);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertArrayEquals(new char[] {'^', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(jVCParserTokenManager0);
      
      Token token0 = jVCParserTokenManager0.getNextToken();
      assertEquals(1, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals("^", token0.toString());
      assertArrayEquals(new char[] {'^', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.endLine);
      assertEquals(16, token0.kind);
      assertEquals(1, token0.beginLine);
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      byte[] byteArray0 = new byte[13];
      byteArray0[0] = (byte) (-9);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(13, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray0);
      assertEquals(13, byteArrayInputStream1.available());
      assertNotNull(byteArrayInputStream1);
      assertFalse(byteArrayInputStream1.equals((Object)byteArrayInputStream0));
      
      byteArrayInputStream0.close();
      assertEquals(13, byteArrayInputStream0.available());
      assertNotSame(byteArrayInputStream0, byteArrayInputStream1);
      assertFalse(byteArrayInputStream0.equals((Object)byteArrayInputStream1));
      
      byteArrayInputStream0.mark((byte) (-9));
      assertEquals(13, byteArrayInputStream0.available());
      assertNotSame(byteArrayInputStream0, byteArrayInputStream1);
      assertFalse(byteArrayInputStream0.equals((Object)byteArrayInputStream1));
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(byteArrayInputStream1, (byte) (-9), 3);
      assertEquals(13, byteArrayInputStream1.available());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream0);
      assertFalse(byteArrayInputStream1.equals((Object)byteArrayInputStream0));
      
      byteArrayInputStream0.mark((-1));
      assertEquals(13, byteArrayInputStream0.available());
      assertNotSame(byteArrayInputStream0, byteArrayInputStream1);
      assertFalse(byteArrayInputStream0.equals((Object)byteArrayInputStream1));
      
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0, 3);
      assertEquals(13, byteArrayInputStream1.available());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(jVCParserTokenManager0);
      assertFalse(byteArrayInputStream1.equals((Object)byteArrayInputStream0));
      
      PrintStream printStream0 = jVCParserTokenManager0.debugStream;
      assertNotNull(printStream0);
      
      Token token0 = jVCParserTokenManager0.getNextToken();
      assertEquals(0, byteArrayInputStream1.available());
      assertEquals(3, simpleCharStream0.getBeginColumn());
      assertEquals((-9), simpleCharStream0.getEndLine());
      assertEquals(3, simpleCharStream0.getEndColumn());
      assertEquals((-9), simpleCharStream0.getLine());
      assertEquals((-9), simpleCharStream0.getBeginLine());
      assertEquals(3, simpleCharStream0.getColumn());
      assertEquals("\uFFFD", token0.toString());
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(3, token0.beginColumn);
      assertEquals(16, token0.kind);
      assertEquals(3, token0.endColumn);
      assertEquals((-9), token0.endLine);
      assertEquals((-9), token0.beginLine);
      assertNotNull(token0);
      assertNotSame(byteArrayInputStream1, byteArrayInputStream0);
      assertFalse(byteArrayInputStream1.equals((Object)byteArrayInputStream0));
      
      PipedWriter pipedWriter0 = new PipedWriter();
      assertNotNull(pipedWriter0);
      
      pipedWriter0.flush();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0, 36);
      assertNotNull(pipedReader0);
      
      jVCParserTokenManager0.ReInit((SimpleCharStream) null);
      assertEquals(0, byteArrayInputStream1.available());
      assertEquals(3, simpleCharStream0.getBeginColumn());
      assertEquals((-9), simpleCharStream0.getEndLine());
      assertEquals(3, simpleCharStream0.getEndColumn());
      assertEquals((-9), simpleCharStream0.getLine());
      assertEquals((-9), simpleCharStream0.getBeginLine());
      assertEquals(3, simpleCharStream0.getColumn());
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotSame(byteArrayInputStream1, byteArrayInputStream0);
      assertFalse(byteArrayInputStream1.equals((Object)byteArrayInputStream0));
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      byte[] byteArray0 = new byte[13];
      byteArray0[0] = (byte)13;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(13, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(byteArrayInputStream0, (byte)13, 3);
      assertEquals(13, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream0);
      
      byte[] byteArray1 = new byte[0];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      int int0 = byteArrayInputStream0.read(byteArray1);
      assertEquals(0, int0);
      assertEquals(13, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0);
      assertEquals(13, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(jVCParserTokenManager0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      boolean boolean1 = simpleCharStream0.prevCharIsLF;
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = simpleCharStream0.prevCharIsLF;
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      JVCParserTokenManager jVCParserTokenManager1 = new JVCParserTokenManager(simpleCharStream0, 0);
      assertEquals(13, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(jVCParserTokenManager1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(jVCParserTokenManager1.equals((Object)jVCParserTokenManager0));
      
      Token token0 = jVCParserTokenManager1.getNextToken();
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(3, simpleCharStream0.getBeginColumn());
      assertEquals(3, simpleCharStream0.getEndColumn());
      assertEquals(13, simpleCharStream0.getEndLine());
      assertEquals(13, simpleCharStream0.getBeginLine());
      assertEquals(3, simpleCharStream0.getColumn());
      assertEquals(13, simpleCharStream0.getLine());
      assertEquals("\r", token0.toString());
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(13, token0.beginLine);
      assertEquals(6, token0.kind);
      assertEquals(3, token0.endColumn);
      assertEquals(13, token0.endLine);
      assertEquals(3, token0.beginColumn);
      assertNotNull(token0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(jVCParserTokenManager1, jVCParserTokenManager0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(jVCParserTokenManager1.equals((Object)jVCParserTokenManager0));
      
      jVCParserTokenManager0.ReInit(simpleCharStream0, 3);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(3, simpleCharStream0.getBeginColumn());
      assertEquals(3, simpleCharStream0.getEndColumn());
      assertEquals(13, simpleCharStream0.getEndLine());
      assertEquals(13, simpleCharStream0.getBeginLine());
      assertEquals(3, simpleCharStream0.getColumn());
      assertEquals(13, simpleCharStream0.getLine());
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(jVCParserTokenManager0, jVCParserTokenManager1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(jVCParserTokenManager0.equals((Object)jVCParserTokenManager1));
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      byte[] byteArray0 = new byte[17];
      byteArray0[0] = (byte)13;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(17, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray0);
      assertEquals(17, byteArrayInputStream1.available());
      assertNotNull(byteArrayInputStream1);
      assertFalse(byteArrayInputStream1.equals((Object)byteArrayInputStream0));
      
      ByteArrayInputStream byteArrayInputStream2 = new ByteArrayInputStream(byteArray0);
      assertEquals(17, byteArrayInputStream2.available());
      assertNotNull(byteArrayInputStream2);
      assertFalse(byteArrayInputStream2.equals((Object)byteArrayInputStream0));
      assertFalse(byteArrayInputStream2.equals((Object)byteArrayInputStream1));
      
      int int0 = 4;
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0);
      assertEquals(17, byteArrayInputStream0.available());
      assertNotNull(pushbackInputStream0);
      assertFalse(byteArrayInputStream0.equals((Object)byteArrayInputStream1));
      assertFalse(byteArrayInputStream0.equals((Object)byteArrayInputStream2));
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(byteArrayInputStream2, (-2263), (byte)13);
      assertEquals(17, byteArrayInputStream2.available());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream0);
      assertFalse(byteArrayInputStream2.equals((Object)byteArrayInputStream0));
      assertFalse(byteArrayInputStream2.equals((Object)byteArrayInputStream1));
      
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0, 1);
      assertEquals(17, byteArrayInputStream2.available());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(jVCParserTokenManager0);
      assertFalse(byteArrayInputStream2.equals((Object)byteArrayInputStream0));
      assertFalse(byteArrayInputStream2.equals((Object)byteArrayInputStream1));
      
      boolean boolean0 = SimpleCharStream.staticFlag;
      assertFalse(boolean0);
      
      Token token0 = jVCParserTokenManager0.getNextToken();
      assertEquals(0, byteArrayInputStream2.available());
      assertEquals((-2263), simpleCharStream0.getLine());
      assertEquals((-2263), simpleCharStream0.getBeginLine());
      assertEquals((-2263), simpleCharStream0.getEndLine());
      assertEquals(13, simpleCharStream0.getColumn());
      assertEquals(13, simpleCharStream0.getBeginColumn());
      assertEquals(13, simpleCharStream0.getEndColumn());
      assertEquals("\r", token0.toString());
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-2263), token0.endLine);
      assertEquals(6, token0.kind);
      assertEquals((-2263), token0.beginLine);
      assertEquals(13, token0.endColumn);
      assertEquals(13, token0.beginColumn);
      assertNotNull(token0);
      assertNotSame(byteArrayInputStream2, byteArrayInputStream0);
      assertNotSame(byteArrayInputStream2, byteArrayInputStream1);
      assertFalse(byteArrayInputStream2.equals((Object)byteArrayInputStream0));
      assertFalse(byteArrayInputStream2.equals((Object)byteArrayInputStream1));
      
      boolean boolean1 = byteArrayInputStream1.markSupported();
      assertTrue(boolean1);
      assertEquals(17, byteArrayInputStream1.available());
      assertNotSame(byteArrayInputStream1, byteArrayInputStream2);
      assertNotSame(byteArrayInputStream1, byteArrayInputStream0);
      assertFalse(byteArrayInputStream1.equals((Object)byteArrayInputStream2));
      assertFalse(byteArrayInputStream1.equals((Object)byteArrayInputStream0));
      assertFalse(boolean1 == boolean0);
      
      boolean boolean2 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      JVCParserTokenManager jVCParserTokenManager1 = null;
      try {
        jVCParserTokenManager1 = new JVCParserTokenManager(simpleCharStream0, (-4));
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : -4. State unchanged.
         //
         verifyException("com.pmdesigns.jvc.tools.JVCParserTokenManager", e);
      }
  }
}
