/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 06 16:36:06 GMT 2018
 */

package org.apache.bcel.generic;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectStreamConstants;
import java.io.PipedInputStream;
import java.lang.reflect.Array;
import java.lang.reflect.Member;
import java.util.regex.Pattern;
import org.apache.bcel.Constants;
import org.apache.bcel.classfile.Constant;
import org.apache.bcel.classfile.ConstantClass;
import org.apache.bcel.classfile.ConstantDouble;
import org.apache.bcel.classfile.ConstantFieldref;
import org.apache.bcel.classfile.ConstantFloat;
import org.apache.bcel.classfile.ConstantInteger;
import org.apache.bcel.classfile.ConstantInterfaceMethodref;
import org.apache.bcel.classfile.ConstantInvokeDynamic;
import org.apache.bcel.classfile.ConstantLong;
import org.apache.bcel.classfile.ConstantMethodHandle;
import org.apache.bcel.classfile.ConstantMethodType;
import org.apache.bcel.classfile.ConstantMethodref;
import org.apache.bcel.classfile.ConstantNameAndType;
import org.apache.bcel.classfile.ConstantPool;
import org.apache.bcel.classfile.ConstantString;
import org.apache.bcel.classfile.ConstantUtf8;
import org.apache.bcel.classfile.LocalVariable;
import org.apache.bcel.generic.ANEWARRAY;
import org.apache.bcel.generic.ArrayType;
import org.apache.bcel.generic.BasicType;
import org.apache.bcel.generic.ConstantPoolGen;
import org.apache.bcel.generic.F2I;
import org.apache.bcel.generic.IFGT;
import org.apache.bcel.generic.InstructionHandle;
import org.apache.bcel.generic.InstructionList;
import org.apache.bcel.generic.LCONST;
import org.apache.bcel.generic.MethodGen;
import org.apache.bcel.generic.ObjectType;
import org.apache.bcel.generic.PUSH;
import org.apache.bcel.generic.ReturnaddressType;
import org.apache.bcel.generic.Type;
import org.apache.bcel.util.ClassPath;
import org.apache.bcel.util.SyntheticRepository;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ConstantPoolGen_ESTest extends ConstantPoolGen_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.getConstant(255);
      assertEquals(1, constantPoolGen0.getSize());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantPool0);
      int int0 = constantPoolGen0.lookupFieldref("Field '", "Field '", "AeR(S]v:sX4-(J{~l");
      assertEquals(1, constantPoolGen0.getSize());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      int int0 = constantPoolGen0.lookupNameAndType((String) null, (String) null);
      assertEquals((-1), int0);
      
      String string0 = constantPoolGen0.toString();
      assertEquals(1, constantPoolGen0.getSize());
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Constant[] constantArray0 = new Constant[6];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      int int0 = Pattern.UNIX_LINES;
      int int1 = Pattern.DOTALL;
      int int2 = constantPoolGen0.addInteger((-452));
      assertEquals(7, constantPoolGen0.getSize());
      assertEquals(6, int2);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.addInteger(3);
      constantPoolGen0.toString();
      constantPoolGen0.addInteger(3);
      int int0 = constantPoolGen0.lookupDouble(0.0);
      assertEquals(2, constantPoolGen0.getSize());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      constantPoolGen0.addInteger(0);
      constantPoolGen0.lookupNameAndType("lM ", "lM ");
      constantPoolGen0.addInteger((-452));
      // Undeclared exception!
      try { 
        constantPoolGen0.getConstant((-452));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -452
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.addInterfaceMethodref("", "", "");
      int int0 = Character.MAX_CODE_POINT;
      ConstantInteger constantInteger0 = new ConstantInteger(4);
      int int1 = constantPoolGen0.addLong(387L);
      assertEquals(7, constantPoolGen0.getSize());
      assertEquals(5, int1);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      int int0 = constantPoolGen0.size;
      constantPoolGen0.lookupNameAndType((String) null, (String) null);
      constantPoolGen0.addLong(256);
      constantPoolGen0.getFinalConstantPool();
      // Undeclared exception!
      try { 
        constantPoolGen0.addFieldref((String) null, (String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.addLong(0L);
      int int0 = constantPoolGen0.getSize();
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      constantPoolGen0.lookupString("");
      constantPoolGen0.addLong(387L);
      int int0 = constantPoolGen0.addLong(387L);
      assertEquals(3, constantPoolGen0.getSize());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.addDouble(2308L);
      constantPoolGen0.addLong(2308L);
      constantPoolGen0.lookupLong(1);
      ObjectType objectType0 = Type.STRINGBUFFER;
      assertEquals((byte)14, objectType0.getType());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.lookupNameAndType("-Ybh9Ww2AU{ikI", "");
      constantPoolGen0.addLong(0L);
      // Undeclared exception!
      try { 
        constantPoolGen0.addMethodref((MethodGen) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Constant[] constantArray0 = new Constant[2];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      int int0 = constantPoolGen0.addFloat((-529));
      assertEquals(3, constantPoolGen0.getSize());
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Constant[] constantArray0 = new Constant[2];
      ConstantFieldref constantFieldref0 = new ConstantFieldref(188, 188);
      constantFieldref0.setNameAndTypeIndex(188);
      constantArray0[0] = (Constant) constantFieldref0;
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("4o.{SO{8");
      constantArray0[1] = (Constant) constantUtf8_0;
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      ConstantUtf8.getInstance("EDwnfirN'_D");
      int int0 = constantPoolGen0.addDouble(188);
      assertEquals(4, constantPoolGen0.getSize());
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref(256, 2011);
      constantArray0[0] = (Constant) constantInterfaceMethodref0;
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      constantPoolGen0.size = 256;
      constantPoolGen0.addClass("})_AC~R");
      // Undeclared exception!
      try { 
        constantPoolGen0.addFieldref("})_AC~R", (String) null, "})_AC~R");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // bytes must not be null!
         //
         verifyException("org.apache.bcel.classfile.ConstantUtf8", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Constant[] constantArray0 = new Constant[2];
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(134, 134);
      Constant constant0 = constantNameAndType0.copy();
      constantArray0[0] = constant0;
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic(134, 134);
      constantArray0[1] = (Constant) constantInvokeDynamic0;
      ConstantPoolGen constantPoolGen0 = null;
      try {
        constantPoolGen0 = new ConstantPoolGen(constantArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.size = 1;
      constantPoolGen0.addDouble(2.0);
      constantPoolGen0.getConstantPool();
      assertEquals(3, constantPoolGen0.getSize());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Constant[] constantArray0 = new Constant[2];
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("");
      ConstantUtf8 constantUtf8_1 = new ConstantUtf8(constantUtf8_0);
      constantArray0[0] = (Constant) constantUtf8_1;
      ConstantLong constantLong0 = new ConstantLong(1572L);
      constantArray0[1] = (Constant) constantLong0;
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      int int0 = constantPoolGen0.lookupFloat(1572L);
      assertEquals((-1), int0);
      assertEquals(2, constantPoolGen0.getSize());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Constant[] constantArray0 = new Constant[3];
      ConstantFieldref constantFieldref0 = new ConstantFieldref(3, 3);
      ConstantFieldref constantFieldref1 = new ConstantFieldref(constantFieldref0);
      constantArray0[0] = (Constant) constantFieldref1;
      ConstantString constantString0 = new ConstantString(4);
      constantArray0[1] = (Constant) constantString0;
      ConstantString constantString1 = new ConstantString(constantString0);
      constantArray0[2] = (Constant) constantString1;
      ConstantPoolGen constantPoolGen0 = null;
      try {
        constantPoolGen0 = new ConstantPoolGen(constantArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Constant[] constantArray0 = new Constant[3];
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(601, 601);
      Constant constant0 = constantNameAndType0.copy();
      constantArray0[0] = constant0;
      ConstantFloat constantFloat0 = new ConstantFloat(601);
      constantArray0[1] = (Constant) constantFloat0;
      ConstantMethodType constantMethodType0 = new ConstantMethodType(601);
      ConstantMethodType constantMethodType1 = new ConstantMethodType(constantMethodType0);
      constantArray0[2] = (Constant) constantMethodType1;
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      int int0 = constantPoolGen0.addFloat(601);
      assertEquals(1, int0);
      assertEquals(3, constantPoolGen0.getSize());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      constantPoolGen0.addFloat((-1794.8F));
      int int0 = constantPoolGen0.lookupFloat((-1794.8F));
      assertEquals(2, constantPoolGen0.getSize());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      constantPoolGen0.addFloat((-1794.8F));
      int int0 = constantPoolGen0.lookupFloat((-1254.17F));
      assertEquals(2, constantPoolGen0.getSize());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      int int0 = Pattern.CASE_INSENSITIVE;
      ConstantFieldref constantFieldref0 = new ConstantFieldref(2, (-3970));
      constantPoolGen0.toString();
      // Undeclared exception!
      try { 
        constantPoolGen0.addConstant(constantFieldref0, constantPoolGen0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -3970
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantPool1);
      constantPoolGen0.lookupInteger((-287));
      ObjectType objectType0 = Type.THROWABLE;
      constantPoolGen0.addClass(objectType0);
      ConstantFloat constantFloat0 = new ConstantFloat((-287));
      ConstantFloat constantFloat1 = new ConstantFloat(constantFloat0);
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen();
      constantPoolGen0.addConstant(constantFloat1, constantPoolGen1);
      constantPoolGen1.addFloat(2);
      IFGT iFGT0 = new IFGT((InstructionHandle) null);
      constantPoolGen0.lookupString((String) null);
      constantPoolGen0.lookupFloat(0.0F);
      assertEquals(4, constantPoolGen0.getSize());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.addInteger(231);
      ConstantString constantString0 = new ConstantString(231);
      // Undeclared exception!
      try { 
        constantPoolGen0.addConstant(constantString0, constantPoolGen0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      int int0 = constantPoolGen0.size;
      constantPoolGen0.addLong(256);
      int int1 = constantPoolGen0.lookupDouble(2.0);
      assertEquals(3, constantPoolGen0.getSize());
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("4o.{SO{8");
      Constant[] constantArray0 = new Constant[6];
      constantArray0[1] = (Constant) constantUtf8_0;
      constantArray0[2] = (Constant) constantUtf8_0;
      constantArray0[3] = (Constant) constantUtf8_0;
      constantArray0[5] = (Constant) constantUtf8_0;
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      ReturnaddressType returnaddressType0 = ReturnaddressType.NO_TARGET;
      String[] stringArray0 = new String[4];
      constantPoolGen0.size = 188;
      stringArray0[0] = "4o.{SO{8";
      stringArray0[1] = "]1|_";
      stringArray0[2] = "EDwnfirN'_D";
      stringArray0[3] = "EDwnfirN'_D";
      MethodGen methodGen0 = null;
      try {
        methodGen0 = new MethodGen(188, returnaddressType0, returnaddressType0.NO_ARGS, stringArray0, "\n", "EDwnfirN'_D", (InstructionList) null, constantPoolGen0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Type can not be <return address>
         //
         verifyException("org.apache.bcel.generic.FieldGenOrMethodGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(238, 238);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.adjustSize();
      Constant[] constantArray0 = new Constant[10];
      constantMethodHandle0.copy();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      constantArray0[0] = (Constant) constantMethodHandle0;
      constantArray0[1] = (Constant) constantMethodHandle0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantPool0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      constantPoolGen1.getConstantPool();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      ObjectInputStream objectInputStream0 = null;
      try {
        objectInputStream0 = new ObjectInputStream(pipedInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.addMethodref("", "", "");
      constantPoolGen0.lookupInterfaceMethodref("", "", "T^JO");
      constantPoolGen0.addLong(2308L);
      constantPoolGen0.addUtf8("");
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      constantPoolGen0.lookupNameAndType("", "");
      // Undeclared exception!
      try { 
        Type.getArgumentTypes("T^JO");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: T^JO
         //
         verifyException("org.apache.bcel.generic.Type", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.adjustSize();
      Constant[] constantArray0 = new Constant[3];
      constantPoolGen0.getFinalConstantPool();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      constantPoolGen0.addInterfaceMethodref("<", ")", "[g6if^QeJ@+d");
      constantPoolGen0.addNameAndType(")", "[g6if^QeJ@+d");
      constantPoolGen0.getConstantPool();
      ObjectType objectType0 = Type.STRINGBUFFER;
      F2I f2I0 = new F2I();
      InstructionList instructionList0 = new InstructionList(f2I0);
      InstructionList instructionList1 = instructionList0.copy();
      assertEquals(1, instructionList1.getLength());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ConstantInteger constantInteger0 = new ConstantInteger(1649);
      ConstantInteger constantInteger1 = new ConstantInteger(constantInteger0);
      Constant[] constantArray0 = new Constant[9];
      constantArray0[0] = (Constant) constantInteger0;
      constantArray0[1] = (Constant) constantInteger0;
      constantArray0[8] = (Constant) constantInteger0;
      constantArray0[1] = (Constant) constantInteger1;
      constantArray0[5] = (Constant) constantInteger0;
      constantArray0[7] = (Constant) constantInteger0;
      constantArray0[8] = (Constant) constantInteger0;
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantArray0);
      constantPoolGen0.toString();
      constantPoolGen0.lookupInterfaceMethodref("@E", "6U r", "6U r");
      constantPoolGen0.addConstant(constantInteger1, constantPoolGen1);
      constantPoolGen0.getConstantPool();
      assertEquals(2, constantPoolGen0.getSize());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle((-1842), (-1842));
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      int int0 = Double.MIN_EXPONENT;
      FileSystemHandling.shouldAllThrowIOExceptions();
      ConstantPool constantPool0 = constantPoolGen0.getConstantPool();
      constantPoolGen0.addFieldref("5~2e;v,", "5~2e;v,", "5~2e;v,");
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantPool0);
      LocalVariable[] localVariableArray0 = new LocalVariable[1];
      ANEWARRAY aNEWARRAY0 = new ANEWARRAY();
      // Undeclared exception!
      try { 
        aNEWARRAY0.getType(constantPoolGen1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Constant pool at index 0 is null.
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.addString(";mG$wNEPXb=|mZ6eBX");
      ConstantPool constantPool0 = constantPoolGen0.getConstantPool();
      int int0 = Member.PUBLIC;
      int int1 = Character.MAX_RADIX;
      constantPoolGen0.addNameAndType("EXCS_CLASS_AND_INTERFACE_RESOLUTION", ";mG$wNEPXb=|mZ6eBX");
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantPool0);
      ConstantInteger constantInteger0 = new ConstantInteger(0);
      // Undeclared exception!
      try { 
        constantInteger0.accept((org.apache.bcel.classfile.Visitor) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(235, 235);
      ConstantMethodHandle constantMethodHandle1 = new ConstantMethodHandle(constantMethodHandle0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantPool0);
      // Undeclared exception!
      try { 
        constantPoolGen0.addConstant(constantMethodHandle1, constantPoolGen1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unknown constant type CONSTANT_MethodHandle[15](reference_kind = 235, reference_index = 235)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.addString(";mG$wNEPXb=|mZ6eBX");
      ConstantPool constantPool0 = constantPoolGen0.getConstantPool();
      int int0 = Member.PUBLIC;
      int int1 = Character.MAX_RADIX;
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantPool0);
      ConstantInteger constantInteger0 = new ConstantInteger(0);
      constantInteger0.clone();
      constantPoolGen1.addFloat(2);
      constantPool0.getConstant(234);
      constantPoolGen1.toString();
      constantPool0.copy();
      assertEquals(3, constantPoolGen0.getSize());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Constant[] constantArray0 = new Constant[2];
      ConstantDouble constantDouble0 = new ConstantDouble(0.0);
      constantArray0[0] = (Constant) constantDouble0;
      ConstantInteger constantInteger0 = new ConstantInteger(1262);
      constantArray0[1] = (Constant) constantInteger0;
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      int int0 = constantPoolGen0.addDouble(0.0);
      assertEquals(4, constantPoolGen0.getSize());
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.addUtf8("OOPS: Does not BCEL handle that? LDC2_W operand has a problem.&WSTV&WSTV");
      ConstantClass constantClass0 = new ConstantClass(169);
      constantPoolGen0.adjustSize();
      int int0 = Pattern.COMMENTS;
      Constant[] constantArray0 = new Constant[2];
      constantArray0[0] = (Constant) constantClass0;
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantArray0);
      // Undeclared exception!
      try { 
        constantPoolGen0.addConstant(constantClass0, constantPoolGen1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ";mG$Q{wNEPXb=|mZ6eBX");
      int int0 = Character.MAX_RADIX;
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      int int1 = Character.MIN_CODE_POINT;
      ConstantDouble constantDouble0 = new ConstantDouble((-78.639046F));
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantDouble0.getConstantValue(constantPool0);
      ConstantDouble constantDouble1 = new ConstantDouble(constantDouble0);
      Constant[] constantArray1 = new Constant[2];
      constantDouble0.toString();
      constantArray1[0] = (Constant) constantDouble0;
      constantArray1[1] = (Constant) constantDouble0;
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantArray1);
      constantPoolGen1.lookupFieldref(";mG$Q{wNEPXb=|mZ6eBX", "\b", "o-3g.ADl7]");
      int int2 = Character.BYTES;
      assertFalse(int2 == int0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantPool1);
      // Undeclared exception!
      try { 
        constantPoolGen0.addArrayClass((ArrayType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen();
      constantPoolGen1.addString("%[{Xp%;r>S<_lVV$c1a");
      BasicType basicType0 = Type.VOID;
      String[] stringArray0 = new String[2];
      stringArray0[0] = "%[{Xp%;r>S<_lVV$c1a";
      stringArray0[1] = "%[{Xp%;r>S<_lVV$c1a";
      PUSH pUSH0 = new PUSH(constantPoolGen1, "%[{Xp%;r>S<_lVV$c1a");
      InstructionList instructionList0 = new InstructionList(pUSH0);
      MethodGen methodGen0 = null;
      try {
        methodGen0 = new MethodGen(2, basicType0, basicType0.NO_ARGS, stringArray0, "><Mj7V}8", "org/apKhe/bcel/genericConstantPoolGen", instructionList0, constantPoolGen1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Mismatch in argument array lengths: 0 vs. 2
         //
         verifyException("org.apache.bcel.generic.MethodGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.getConstantPool();
      ConstantDouble constantDouble0 = new ConstantDouble((-3809.9589582104));
      ConstantDouble constantDouble1 = new ConstantDouble(constantDouble0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantArray0);
      int int0 = constantPoolGen0.addConstant(constantDouble1, constantPoolGen1);
      assertEquals(3, constantPoolGen0.getSize());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.addDouble((-3671.26825251229));
      constantPoolGen0.addDouble((-3671.26825251229));
      constantPoolGen0.lookupMethodref("QmX540*4ZP5u*\"tK&/7", "Unknown constant-type ", "QmX540*4ZP5u*\"tK&/7");
      ConstantMethodref constantMethodref0 = new ConstantMethodref(141, 1);
      constantPoolGen0.setConstant(133, constantMethodref0);
      assertEquals(3, constantPoolGen0.getSize());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Constant[] constantArray0 = new Constant[2];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      constantPoolGen0.getFinalConstantPool();
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen();
      int int0 = Pattern.MULTILINE;
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(8, 157);
      // Undeclared exception!
      try { 
        constantPoolGen1.addConstant(constantNameAndType0, constantPoolGen0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.addDouble((-3671.26825251229));
      constantPoolGen0.addDouble(4075.8847691);
      constantPoolGen0.lookupMethodref("QmX540*4ZP5u*\"tK&/7", "QmX540*4ZP5u*\"tK&/7", "QmX540*4ZP5u*\"tK&/7");
      ConstantMethodref constantMethodref0 = new ConstantMethodref(141, 3);
      constantPoolGen0.setConstant(133, constantMethodref0);
      assertEquals(5, constantPoolGen0.getSize());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      ConstantLong constantLong0 = new ConstantLong((-1244L));
      constantLong0.toString();
      ConstantLong constantLong1 = new ConstantLong(constantLong0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      ConstantPool constantPool0 = constantPoolGen0.getConstantPool();
      String string0 = "<";
      constantPoolGen0.addInterfaceMethodref("\n", "<", "\n");
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(2480, 5);
      constantNameAndType0.clone();
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantPool0);
      // Undeclared exception!
      try { 
        constantPoolGen1.addConstant(constantNameAndType0, constantPoolGen0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2480
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      constantPoolGen0.adjustSize();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      int int1 = Pattern.DOTALL;
      Constant[] constantArray0 = new Constant[9];
      int int2 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("F?L\"+P`s%@4AmYc}");
      constantPoolGen0.addConstant(constantUtf8_0, constantPoolGen0);
      int int3 = constantPoolGen0.addConstant(constantUtf8_0, constantPoolGen0);
      assertEquals(2, constantPoolGen0.getSize());
      assertEquals(1, int3);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ConstantLong constantLong0 = new ConstantLong(261L);
      ConstantLong constantLong1 = new ConstantLong(constantLong0);
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen();
      constantPoolGen0.addConstant(constantLong1, constantPoolGen1);
      constantPoolGen0.lookupMethodref((String) null, "#", "#");
      constantPoolGen0.adjustSize();
      assertEquals(3, constantPoolGen0.getSize());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      int int0 = Byte.BYTES;
      constantPoolGen0.addMethodref("Unknown constant type ", "Unknown constant type ", "Unknown constant type ");
      int int1 = Character.MIN_CODE_POINT;
      constantPoolGen0.addFloat(0);
      ConstantPool constantPool0 = constantPoolGen0.getFinalConstantPool();
      Boolean boolean0 = new Boolean("Unknown constant type ");
      Constant[] constantArray0 = new Constant[4];
      ConstantDouble constantDouble0 = new ConstantDouble((-2915));
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantPool0);
      ConstantDouble constantDouble1 = new ConstantDouble(5);
      constantDouble1.getConstantValue(constantPool0);
      constantPoolGen1.addMethodref("Unknown constant type ", "Unknown constant type ", "Unknown constant type ");
      int int2 = Character.SIZE;
      ObjectType objectType0 = Type.STRING;
      int int3 = Long.BYTES;
      ConstantFieldref constantFieldref0 = new ConstantFieldref(5, (-2915));
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      ConstantClass constantClass0 = new ConstantClass(231);
      constantPoolGen1.adjustSize();
      int int4 = Pattern.COMMENTS;
      int int5 = Character.MIN_RADIX;
      int int6 = constantPoolGen0.addFieldref("Unknown constant type ", "\n", "Byte code error: ");
      assertEquals(10, constantPoolGen0.getSize());
      assertEquals(9, int6);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      Constant[] constantArray0 = new Constant[5];
      int int0 = 169;
      ConstantMethodref constantMethodref0 = new ConstantMethodref(169, 169);
      constantArray0[0] = (Constant) constantMethodref0;
      ConstantString constantString0 = new ConstantString(169);
      constantArray0[1] = (Constant) constantString0;
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen();
      // Undeclared exception!
      try { 
        constantPoolGen0.addConstant(constantMethodref0, constantPoolGen1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref(256, 2011);
      constantArray0[0] = (Constant) constantInterfaceMethodref0;
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      ClassPath classPath0 = new ClassPath("ACC_SUPER flag\t\t");
      SyntheticRepository.getInstance();
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(2011, 299);
      ConstantMethodref constantMethodref0 = new ConstantMethodref(1, 299);
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("up9#");
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantPool0);
      // Undeclared exception!
      try { 
        constantPoolGen0.addConstant(constantArray0[0], constantPoolGen1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 256
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle((-1842), (-1842));
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.addFieldref("5~2e;v,", "5~2e;v,", "5~2e;v,");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      constantPoolGen0.addString("5~2e;v,");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "<");
      ConstantPool constantPool0 = constantPoolGen0.getConstantPool();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      constantPoolGen0.addFieldref("5~2e;v,", "5~2e;v,", "5~2e;v,");
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen();
      try { 
        constantPool0.getConstant(49, (byte)100);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Constant pool at index 49 is null.
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      FileSystemHandling.shouldAllThrowIOExceptions();
      constantPoolGen0.lookupLong((-189L));
      LCONST lCONST0 = new LCONST();
      Type type0 = lCONST0.getType(constantPoolGen0);
      byte byte0 = Character.DIRECTIONALITY_BOUNDARY_NEUTRAL;
      PUSH pUSH0 = new PUSH(constantPoolGen0, (Number) (byte)9);
      InstructionList instructionList0 = pUSH0.getInstructionList();
      pUSH0.toString();
      MethodGen methodGen0 = new MethodGen((-1), type0, type0.NO_ARGS, (String[]) null, "D", "@yEy^z <$t<B", instructionList0, constantPoolGen0);
      constantPoolGen0.lookupMethodref(methodGen0);
      Class<ConstantNameAndType>[] classArray0 = (Class<ConstantNameAndType>[]) Array.newInstance(Class.class, 4);
      Class<ConstantNameAndType> class0 = ConstantNameAndType.class;
      classArray0[0] = class0;
      classArray0[1] = class0;
      Class<ConstantNameAndType> class1 = ConstantNameAndType.class;
      classArray0[2] = class1;
      Class<ConstantNameAndType> class2 = ConstantNameAndType.class;
      classArray0[3] = class2;
      constantPoolGen0.lookupUtf8("org.apache.bcel.generic.ConstantPoolGen");
      constantPoolGen0.lookupMethodref(methodGen0);
      constantPoolGen0.lookupInterfaceMethodref(methodGen0);
      constantPoolGen0.addInterfaceMethodref(methodGen0);
      constantPoolGen0.lookupInterfaceMethodref(methodGen0);
      int int0 = constantPoolGen0.addClass("org.apache.bcel.generic.ConstantPoolGen");
      assertEquals(9, constantPoolGen0.getSize());
      assertEquals(8, int0);
  }
}
