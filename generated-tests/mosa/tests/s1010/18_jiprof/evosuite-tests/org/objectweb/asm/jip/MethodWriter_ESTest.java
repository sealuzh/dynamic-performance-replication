/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 01:13:25 GMT 2018
 */

package org.objectweb.asm.jip;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.PipedInputStream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import org.objectweb.asm.jip.AnnotationVisitor;
import org.objectweb.asm.jip.Attribute;
import org.objectweb.asm.jip.ByteVector;
import org.objectweb.asm.jip.ClassReader;
import org.objectweb.asm.jip.ClassWriter;
import org.objectweb.asm.jip.Edge;
import org.objectweb.asm.jip.Frame;
import org.objectweb.asm.jip.Item;
import org.objectweb.asm.jip.Label;
import org.objectweb.asm.jip.MethodWriter;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class MethodWriter_ESTest extends MethodWriter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(3086);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "RuntimeVisibleParameterAnnotations";
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 3086, "RuntimeVisibleParameterAnnotations", "RuntimeVisibleParameterAnnotations", "RuntimeVisibleParameterAnnotations", stringArray0, false, false);
      int int0 = methodWriter0.getSize();
      assertEquals(26, int0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        MethodWriter.readShort(byteArray0, 1224736769);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1224736769
         //
         verifyException("org.objectweb.asm.jip.MethodWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte)23;
      // Undeclared exception!
      try { 
        MethodWriter.readUnsignedShort(byteArray0, 1991);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1991
         //
         verifyException("org.objectweb.asm.jip.MethodWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 24117248;
      intArray0[1] = 76;
      Label label0 = new Label();
      label0.visitSubroutine(label0, 76, (-8));
      MethodWriter.getNewOffset(intArray0, intArray0, label0);
      ClassWriter classWriter0 = new ClassWriter(1985);
      MethodWriter methodWriter0 = classWriter0.firstMethod;
      int int0 = MethodWriter.getNewOffset(intArray0, intArray0, (-8), 285212673);
      assertEquals(309330005, int0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 0, " 9@=t<zi\"Sb~s{1'L", "", " 9@=t<zi\"Sb~s{1'L", (String[]) null, false, false);
      int[] intArray0 = new int[8];
      intArray0[0] = (-2481);
      intArray0[1] = 0;
      intArray0[2] = 2;
      intArray0[3] = 2;
      intArray0[4] = 1;
      intArray0[5] = 1;
      intArray0[6] = 1;
      intArray0[7] = 1;
      int int0 = MethodWriter.getNewOffset(intArray0, intArray0, 1, (-2481));
      assertEquals((-2486), int0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(191);
      String[] stringArray0 = new String[0];
      MethodWriter methodWriter0 = null;
      try {
        methodWriter0 = new MethodWriter(classWriter0, (-421), ".JSZ&~[G}*xWw_G<", ".JSZ&~[G}*xWw_G<", ".JSZ&~[G}*xWw_G<", stringArray0, true, false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      ClassWriter classWriter1 = new ClassWriter(0);
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, (-231), " 9=t<zi\"Sb~s{1'L", " 9=t<zi\"Sb~s{1'L", " 9=t<zi\"Sb~s{1'L", (String[]) null, false, false);
      classWriter0.toByteArray();
      methodWriter0.visitCode();
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(17);
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, (-231), " 9=t<zi\"SV~s{1'L", " 9=t<zi\"SV~s{1'L", " 9=t<zi\"SV~s{1'L", (String[]) null, false, false);
      methodWriter0.visitTypeInsn(1, " 9=t<zi\"SV~s{1'L");
      Attribute attribute0 = new Attribute(" 9=t<zi\"SV~s{1'L");
      methodWriter0.visitAttribute(attribute0);
      assertTrue(attribute0.isUnknown());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(30);
      classWriter0.newNameType(" 9@=t<zi\"Sb~s{1'L", " 9@=t<zi\"Sb~s{1'L");
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 30, " 9@=t<zi\"Sb~s{1'L", " 9@=t<zi\"Sb~s{1'L", "RuntimeInvisibleAnnotations", (String[]) null, false, false);
      methodWriter0.visitMultiANewArrayInsn("RuntimeInvisibleAnnotations", 57);
      // Undeclared exception!
      try { 
        methodWriter0.visitParameterAnnotation((-1141), "RuntimeInvisibleAnnotations", false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 17
         //
         verifyException("org.objectweb.asm.jip.Type", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(70);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "ksN,uq)s \"eRJ-%( ";
      stringArray0[1] = "ksN,uq)s \"eRJ-%( ";
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 70, "ksN,uq)s \"eRJ-%( ", "ksN,uq)s \"eRJ-%( ", "ksN,uq)s \"eRJ-%( ", stringArray0, true, true);
      methodWriter0.visitVarInsn(54, 1);
      methodWriter0.getSize();
      methodWriter0.visitEnd();
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 1, "sC+J@v2s Cw!`K", "sC+J@v2s Cw!`K", "sC+J@v2s Cw!`K", (String[]) null, false, false);
      methodWriter0.visitAnnotation("sC+J@v2s Cw!`K", false);
      Integer integer0 = new Integer(54);
      methodWriter0.visitLdcInsn("*.Foo$|mB%7;*");
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 0, " 9@=t<zi\"Sb~s{1'L", " 9@=t<zi\"Sb~s{1'L", " 9@=t<zi\"Sb~s{1'L", (String[]) null, false, false);
      MethodWriter methodWriter1 = new MethodWriter(classWriter0, 2, "sC+J@v2s Cw!`K", "org.objectweb.asm.jip.MethodWriter", "sC+J@v2s Cw!`K", (String[]) null, false, false);
      String string0 = ",YNUSB{m[e\\u";
      // Undeclared exception!
      try { 
        methodWriter1.visitParameterAnnotation(2, string0, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 34
         //
         verifyException("org.objectweb.asm.jip.Type", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, (-231), " 9=t<zi\"Sb~s{1'L", " 9=t<zi\"Sb~s{1'L", " 9=t<zi\"Sb~s{1'L", (String[]) null, false, false);
      methodWriter0.visitMethodInsn((-3390), " 9=t<zi\"Sb~s{1'L", " 9=t<zi\"Sb~s{1'L", " 9=t<zi\"Sb~s{1'L");
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(30);
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 30, " 9@=t<zi\"Sb~s{1'L", " 9@=t<zi\"Sb~s{1'L", "RuntimeInvisibleAnnotations", (String[]) null, false, false);
      methodWriter0.visitTryCatchBlock((Label) null, (Label) null, (Label) null, " 9@=t<zi\"Sb~s{1'L");
      // Undeclared exception!
      try { 
        methodWriter0.visitParameterAnnotation((-1141), "RuntimeInvisibleAnnotations", false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 17
         //
         verifyException("org.objectweb.asm.jip.Type", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(7);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "kN,:\u0000)s\"eRJ-%( ";
      stringArray0[1] = "kN,:\u0000)s\"eRJ-%( ";
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 7, "kN,:\u0000)s\"eRJ-%( ", "kN,:\u0000)s\"eRJ-%( ", "Code", stringArray0, true, true);
      methodWriter0.visitTypeInsn(8, "kN,:\u0000)s\"eRJ-%( ");
      MethodWriter methodWriter1 = classWriter0.lastMethod;
      Label label0 = new Label();
      int[] intArray0 = new int[4];
      intArray0[0] = 49;
      intArray0[1] = 2;
      intArray0[2] = 2;
      intArray0[3] = 8;
      Label[] labelArray0 = new Label[3];
      labelArray0[0] = label0;
      Label label1 = label0.next;
      labelArray0[1] = null;
      Edge edge0 = new Edge();
      Label label2 = edge0.successor;
      labelArray0[2] = null;
      // Undeclared exception!
      try { 
        methodWriter0.visitLookupSwitchInsn(label0, intArray0, labelArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.objectweb.asm.jip.MethodWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 0, "RuntimeVisibleParameterAnnotations", "RuntimeVisibleParameterAnnotations", "E0esDszuU&M", (String[]) null, false, false);
      methodWriter0.visitAnnotation("E0esDszuU&M", false);
      Label label0 = new Label();
      Label label1 = label0.successor;
      MethodWriter methodWriter1 = classWriter0.lastMethod;
      methodWriter0.visitVarInsn(1, 2147483645);
      methodWriter0.visitLabel(label0);
      methodWriter1.visitVarInsn(1, 1);
      int[] intArray0 = new int[0];
      Label[] labelArray0 = new Label[0];
      methodWriter1.visitLookupSwitchInsn(label0, intArray0, labelArray0);
      assertSame(methodWriter1, methodWriter0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-16));
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 1, "kN,:\u0000)s\"eRJ-%( ", "kN,:\u0000)s\"eRJ-%( ", "bj5R!jG1|,qD,iTB<", (String[]) null, true, false);
      Attribute attribute0 = new Attribute("1@(4P?\"4");
      Attribute attribute1 = new Attribute("kN,:\u0000)s\"eRJ-%( ");
      methodWriter0.visitAttribute(attribute0);
      assertNotSame(attribute0, attribute1);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 0, " 9@=t<zi\"Sb~s{1'L", " 9@=t<zi\"Sb~s{1'L", " 9@=t<zi\"Sb~s{1'L", (String[]) null, false, false);
      methodWriter0.visitMaxs(1, 1);
      Attribute attribute0 = new Attribute("J");
      methodWriter0.visitVarInsn(1458, 1);
      MethodWriter methodWriter1 = classWriter0.firstMethod;
      assertSame(methodWriter1, methodWriter0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(70);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "ksN,uq)s \"eRJ-%( ";
      stringArray0[1] = "ksN,uq)s \"eRJ-%( ";
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 70, "ksN,uq)s \"eRJ-%( ", "ksN,uq)s \"eRJ-%( ", "ksN,uq)s \"eRJ-%( ", stringArray0, true, true);
      methodWriter0.visitVarInsn(54, 1);
      methodWriter0.visitEnd();
      AnnotationVisitor annotationVisitor0 = methodWriter0.visitAnnotationDefault();
      assertNotNull(annotationVisitor0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(7);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "CIode";
      stringArray0[1] = "CIode";
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 7, "CIode", "kN,:\u0000)s\"eRJ-%( ", "kN,:\u0000)s\"eRJ-%( ", stringArray0, true, true);
      methodWriter0.visitAnnotation("kN,:\u0000)s\"eRJ-%( ", true);
      methodWriter0.visitVarInsn(7, 1);
      methodWriter0.visitVarInsn(2, 1451);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(30);
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 30, " 9@=t<zi\"Sb~s{1'L", " 9@=t<zi\"Sb~s{1'L", "RuntimeInvisibleAnnotations", (String[]) null, false, false);
      methodWriter0.classReaderOffset = 2;
      methodWriter0.visitFieldInsn((-1103680300), "e82-hn}P\"s", "RuntimeInvisibleAnnotations", "LmIj(bm");
      AnnotationVisitor annotationVisitor0 = methodWriter0.visitAnnotationDefault();
      assertNotNull(annotationVisitor0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-24));
      String[] stringArray0 = new String[2];
      stringArray0[0] = "kN,:\u0000)s\"eRJ-%( ";
      stringArray0[1] = "kN,:\u0000)s\"eRJ-%( ";
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, (-24), "kN,:\u0000)s\"eRJ-%( ", "kN,:\u0000)s\"eRJ-%( ", "~o?e", stringArray0, true, false);
      methodWriter0.visitAnnotation("kN,:\u0000)s\"eRJ-%( ", false);
      Label label0 = new Label();
      classWriter0.toByteArray();
      methodWriter0.visitCode();
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-24));
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 1, "X", "kN,:\u0000)s\"*eRJ-%( ", "X", (String[]) null, true, true);
      Label label0 = new Label();
      classWriter0.toByteArray();
      Integer integer0 = new Integer(2);
      methodWriter0.visitLdcInsn(integer0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-24));
      String[] stringArray0 = new String[2];
      stringArray0[0] = "kN,:\u0000)s\"eRJ-%( ";
      stringArray0[1] = "kN,:\u0000)s\"eRJ-%( ";
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, (-24), "kN,:\u0000)s\"eRJ-%( ", "kN,:\u0000)s\"eRJ-%( ", "~o?e", stringArray0, false, false);
      Label label0 = new Label();
      methodWriter0.visitAnnotation("~o?e", false);
      methodWriter0.visitFieldInsn((-24), "kN,:\u0000)s\"eRJ-%( ", "kN,:\u0000)s\"eRJ-%( ", "kN,:\u0000)s\"eRJ-%( ");
      classWriter0.toByteArray();
      ClassWriter classWriter1 = new ClassWriter(0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      // Undeclared exception!
      try { 
        MethodWriter.readInt((byte[]) null, 1374);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.objectweb.asm.jip.MethodWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 0, "RuntimeVisibleParameterAnnotations", "RuntimeVisibleParameterAnnotations", "E0esDszuU&M", (String[]) null, false, false);
      methodWriter0.visitAnnotation("E0esDszuU&M", false);
      Label label0 = new Label();
      Label label1 = label0.successor;
      MethodWriter methodWriter1 = classWriter0.lastMethod;
      methodWriter1.visitLineNumber(2, label0);
      methodWriter1.visitCode();
      assertSame(methodWriter1, methodWriter0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 0, " 9@=t<zi\"Sb~s{1'L", " 9@=t<zi\"Sb~s{1'L", " 9@=t<zi\"Sb~s{1'L", (String[]) null, false, false);
      int[] intArray0 = new int[11];
      intArray0[7] = 1;
      methodWriter0.visitFrame(3, 3, (Object[]) null, 2, (Object[]) null);
      methodWriter0.visitAnnotation(" 9@=t<zi\"Sb~s{1'L", true);
      Label label0 = new Label();
      classWriter0.toByteArray();
      methodWriter0.visitCode();
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-39));
      String[] stringArray0 = new String[2];
      stringArray0[0] = "kN,:\u0000)s\"eRJ-%( ";
      stringArray0[1] = "kN,:\u0000)s\"eRJ-%( ";
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, (-39), "kN,:\u0000)s\"eRJ-%( ", "kN,:\u0000)s\"eRJ-%( ", "ESd'xHx", stringArray0, true, false);
      Label label0 = new Label();
      Integer integer0 = new Integer(16777243);
      methodWriter0.visitLdcInsn(integer0);
      Label[] labelArray0 = new Label[0];
      methodWriter0.visitTableSwitchInsn(1580, 255, label0, labelArray0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-24));
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, (-24), "char", "Code", "RuntimeInvisibleAnnotations", (String[]) null, false, false);
      AnnotationVisitor annotationVisitor0 = methodWriter0.visitParameterAnnotation(4, "Ljava/lang/Synthetic;", false);
      assertNotNull(annotationVisitor0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-24));
      String string0 = " 9@=t<zi\"Sb~s{1'L";
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, (-24), "kN,:\u0000)s\"eRJ-%( ", "+Nv%mD(_=21#Lr8N3", " 9@=t<zi\"Sb~s{1'L", (String[]) null, false, false);
      // Undeclared exception!
      try { 
        methodWriter0.visitFrame(1, 1, (Object[]) null, 1, (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.objectweb.asm.jip.MethodWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      int int0 = 0;
      ClassWriter classWriter0 = new ClassWriter(0);
      ClassWriter classWriter1 = new ClassWriter(0);
      boolean boolean0 = true;
      String string0 = "LineNumberTable";
      MethodWriter methodWriter0 = new MethodWriter(classWriter1, 0, "LineNumberTable", "org.objectweb.asm.jip.MethodWriter", "fgWc;M8z-yJ", (String[]) null, false, false);
      // Undeclared exception!
      try { 
        methodWriter0.visitFrame(0, 2, (Object[]) null, 2, (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.objectweb.asm.jip.MethodWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 0, " 9@=t<zi\"Sb~s{1'L", " 9@=t<zi\"Sb~s{1'L", " 9@=t<zi\"Sb~s{1'L", (String[]) null, false, false);
      methodWriter0.visitMaxs(1, 1);
      Attribute attribute0 = new Attribute("J");
      Attribute attribute1 = new Attribute(" 9@=t<zi\"Sb~s{1'L");
      Attribute attribute2 = new Attribute("J");
      methodWriter0.visitAttribute(attribute1);
      MethodWriter methodWriter1 = classWriter0.firstMethod;
      // Undeclared exception!
      try { 
        methodWriter0.getSize();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.objectweb.asm.jip.Attribute", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 2, " 9@=t<zi\"Sb~s{1'L", " 9@=t<zi\"Sb~s{1'L", " 9@=t<zi\"Sb~s{1'L", (String[]) null, false, false);
      // Undeclared exception!
      try { 
        methodWriter0.visitFrame((-1), 191, (Object[]) null, 333, (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.objectweb.asm.jip.MethodWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(7);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "kN,:\u0000)s\"eRJ-%( ";
      stringArray0[1] = "kN,:\u0000)s\"eRJ-%( ";
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 7, "kN,:\u0000)s\"eRJ-%( ", "kN,:\u0000)s\"eRJ-%( ", "Codv", stringArray0, true, true);
      methodWriter0.visitAnnotation("Codv", false);
      methodWriter0.visitVarInsn(177, 7);
      methodWriter0.visitMultiANewArrayInsn("Codv", 2);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-24));
      String[] stringArray0 = new String[2];
      stringArray0[0] = "kN,:\u0000)s\"eRJ-%( ";
      stringArray0[1] = "kN,:\u0000)s\"eRJ-%( ";
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, (-24), "kN,:\u0000)s\"eRJ-%( ", "kN,:\u0000)s\"eRJ-%( ", "~o?e", stringArray0, true, false);
      Integer integer0 = new Integer(1);
      methodWriter0.visitMultiANewArrayInsn("kN,:\u0000)s\"eRJ-%( ", 2);
      methodWriter0.visitLdcInsn("LineNumberTable");
      AnnotationVisitor annotationVisitor0 = methodWriter0.visitAnnotationDefault();
      assertNotNull(annotationVisitor0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(Integer.MAX_VALUE);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "kN,:\u0000)s\"eRJ-%( ";
      stringArray0[1] = "kN,:\u0000)s\"eRJ-%( ";
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, Integer.MAX_VALUE, "kN,:\u0000)s\"eRJ-%( ", "kN,:\u0000)s\"eRJ-%( ", "~o?e", stringArray0, true, false);
      methodWriter0.visitFieldInsn((-1217), "RuntimeVisibleParameterAnnotations", "kN,:\u0000)s\"eRJ-%( ", "RuntimeVisibleParameterAnnotations");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      classWriter0.toByteArray();
      methodWriter0.visitIntInsn(24117255, 1);
      // Undeclared exception!
      try { 
        methodWriter0.visitInsn(24117255);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 24117255
         //
         verifyException("org.objectweb.asm.jip.MethodWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 0, " 9@=t<zi\"Sb~s{1'L", "", " 9@=t<zi\"Sb~s{1'L", (String[]) null, false, false);
      int[] intArray0 = new int[8];
      intArray0[7] = 1;
      classWriter0.addType("LineNumberTable");
      methodWriter0.visitCode();
      Integer integer0 = new Integer(0);
      methodWriter0.visitLdcInsn(integer0);
      methodWriter0.visitInsn((-1840700263));
      Frame frame0 = new Frame();
      Label label0 = frame0.owner;
      methodWriter0.visitTryCatchBlock((Label) null, (Label) null, (Label) null, "");
      methodWriter0.visitTryCatchBlock((Label) null, (Label) null, (Label) null, (String) null);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-24));
      String[] stringArray0 = new String[2];
      stringArray0[0] = "kN,:\u0000)s\"eRJ-%( ";
      stringArray0[1] = "~o?e";
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, (-24), "kN,:\u0000)s\"eRJ-%( ", "kN,:\u0000)s\"eRJ-%( ", "~o?e", stringArray0, false, false);
      methodWriter0.visitAnnotation("RuntimeInvisibleAnnotations", false);
      Label label0 = new Label();
      classWriter0.toByteArray();
      methodWriter0.visitTryCatchBlock(label0, label0, label0, "~o?e");
      Label label1 = new Label();
      methodWriter0.visitTryCatchBlock(label0, label1, label1, "~o?e");
      methodWriter0.visitInsn(1);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 0, " 9@=t<zi\"Sb~s{1'L", " 9@=t<zi\"Sb~s{1'L", " 9@=t<zi\"Sb~s{1'L", (String[]) null, false, false);
      int[] intArray0 = new int[11];
      intArray0[9] = 1;
      methodWriter0.visitFrame(3, 3, (Object[]) null, 2, (Object[]) null);
      Integer integer0 = new Integer(0);
      // Undeclared exception!
      try { 
        methodWriter0.visitLdcInsn(classWriter0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // value org.objectweb.asm.jip.ClassWriter@5
         //
         verifyException("org.objectweb.asm.jip.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(3086);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "RuntimeVisibleParameterAnnotations";
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, (-3915), "org.objectweb.asm.jip.MethodWriter", "org.objectweb.asm.jip.MethodWriter", "RuntimeVisibleParameterAnnotations", stringArray0, false, false);
      methodWriter0.visitAnnotation("", false);
      Label label0 = new Label();
      methodWriter0.visitJumpInsn(2, label0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(17);
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, (-231), " 9=t<zi\"SV~s{1'L", " 9=t<zi\"SV~s{1'L", " 9=t<zi\"SV~s{1'L", (String[]) null, false, false);
      methodWriter0.visitIntInsn(1, 17);
      Label label0 = new Label();
      methodWriter0.visitLocalVariable("c'REvqDU5ENvYbM", "Exceptions", "c'REvqDU5ENvYbM", label0, label0, 90);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(7);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "kN,:\u0000)s\"eRJ-%( ";
      stringArray0[1] = "kN,:\u0000)s\"eRJ-%( ";
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 7, "kN,:\u0000)s\"eRJ-%( ", "kN,:\u0000)s\"eRJ-%( ", "Codv", stringArray0, true, true);
      methodWriter0.visitAnnotation("Codv", false);
      methodWriter0.visitTypeInsn(177, "92u");
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(7);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "Ljava/lang/Synthetic;";
      stringArray0[1] = "Ljava/lang/Synthetic;";
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 7, "Ljava/lang/Synthetic;", "kN,:\u0000)s\"eRJ-%( ", "Code", stringArray0, true, true);
      methodWriter0.visitAnnotation("Ljava/lang/Synthetic;", true);
      methodWriter0.visitTypeInsn(8, "Ljava/lang/Synthetic;");
      classWriter0.toByteArray();
      MethodWriter methodWriter1 = classWriter0.lastMethod;
      methodWriter0.visitVarInsn(22, 49);
      assertSame(methodWriter0, methodWriter1);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(70);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "ksN,uq)s \"eRJ-%( ";
      stringArray0[1] = "ksN,uq)s \"eRJ-%( ";
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 70, "ksN,uq)s \"eRJ-%( ", "ksN,uq)s \"eRJ-%( ", ";B.bSq5{=q]&Y", stringArray0, true, true);
      methodWriter0.visitVarInsn(54, 1);
      methodWriter0.visitMethodInsn(54, "ksN,uq)s \"eRJ-%( ", ";B.bSq5{=q]&Y", "ksN,uq)s \"eRJ-%( ");
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      int int0 = 7;
      ClassWriter classWriter0 = new ClassWriter(7);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "CIode";
      stringArray0[1] = "CIode";
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 7, "CIode", "kN,:\u0000)s\"eRJ-%( ", "kN,:\u0000)s\"eRJ-%( ", stringArray0, true, true);
      methodWriter0.visitAnnotation("kN,:\u0000)s\"eRJ-%( ", true);
      // Undeclared exception!
      try { 
        methodWriter0.visitIntInsn((-2128), 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.objectweb.asm.jip.Frame", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-9));
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, (-9), "kN,:\u0000)s\"eRJ-%( ", "kN,:\u0000)s\"eRJ-%( ", "kN,:\u0000)s\"eRJ-%( ", (String[]) null, false, true);
      methodWriter0.visitFrame(0, 2, (Object[]) null, 64, (Object[]) null);
      methodWriter0.visitAnnotation("kN,:\u0000)s\"eRJ-%( ", true);
      Label label0 = new Label();
      classWriter0.toByteArray();
      methodWriter0.visitCode();
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-24));
      String[] stringArray0 = new String[2];
      stringArray0[0] = "~o?e";
      stringArray0[1] = "kN,:\u0000)s\"*eRJ-%( ";
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, (-24), "kN,:\u0000)s\"*eRJ-%( ", "kN,:\u0000)s\"*eRJ-%( ", "~o?e", stringArray0, false, false);
      methodWriter0.visitVarInsn(1, 2);
      methodWriter0.visitIntInsn(18, 1);
      methodWriter0.visitMethodInsn((-24), "kN,:\u0000)s\"*eRJ-%( ", "kN,:\u0000)s\"*eRJ-%( ", "kN,:\u0000)s\"*eRJ-%( ");
      methodWriter0.visitFrame(1, (-1654), stringArray0, 18, stringArray0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 0, " 9@=t<zi\"Sb~s{1'L", " 9@=t<zi\"Sb~s{1'L", " 9@=t<zi\"Sb~s{1'L", (String[]) null, false, false);
      methodWriter0.visitMaxs(1, 1);
      Attribute attribute0 = new Attribute("J");
      // Undeclared exception!
      try { 
        methodWriter0.visitFrame(0, 0, (Object[]) null, 83, (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.objectweb.asm.jip.MethodWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-24));
      String[] stringArray0 = new String[2];
      stringArray0[0] = "kN,:\u0000)s\"eRJ-%( ";
      stringArray0[1] = "kN,:\u0000)s\"eRJ-%( ";
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, (-24), "kN,:\u0000)s\"eRJ-%( ", "kN,:\u0000)s\"eRJ-%( ", "~o?e", stringArray0, true, false);
      Integer integer0 = new Integer(1);
      methodWriter0.visitLdcInsn("LineNumberTable");
      methodWriter0.visitIincInsn((-24), (-24));
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(7);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(classWriter0);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "CIode";
      stringArray0[1] = "kN,:\u0000)s\"eRJ-%( ";
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 7, "CIode", "kN,:\u0000)s\"eRJ-%( ", "kN,:\u0000)s\"eRJ-%( ", stringArray0, true, true);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(methodWriter0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      AnnotationVisitor annotationVisitor0 = methodWriter0.visitAnnotation("kN,:\u0000)s\"eRJ-%( ", true);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(annotationVisitor0);
      
      methodWriter0.visitVarInsn(11, 1461);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      methodWriter0.visitIincInsn(11, 2);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter0);
      
      ClassWriter classWriter1 = new ClassWriter(0);
      assertFalse(classWriter1.equals((Object)classWriter0));
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(classWriter1);
      
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, (-231), " 9=t<zi\"Sb~s{1'L", " 9=t<zi\"Sb~s{1'L", " 9=t<zi\"Sb~s{1'L", (String[]) null, false, false);
      assertFalse(classWriter0.equals((Object)classWriter1));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(methodWriter0);
      
      Label label0 = new Label();
      assertNotNull(label0);
      
      methodWriter0.visitLabel(label0);
      assertNotSame(classWriter0, classWriter1);
      assertFalse(classWriter0.equals((Object)classWriter1));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      methodWriter0.visitMaxs(23, 1);
      assertNotSame(classWriter0, classWriter1);
      assertFalse(classWriter0.equals((Object)classWriter1));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter0);
      
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 0, " 9@=t<zi\"Sb~s{1'L", " 9@=t<zi\"Sb~s{1'L", " 9@=t<zi\"Sb~s{1'L", (String[]) null, false, false);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(methodWriter0);
      
      methodWriter0.visitMaxs(1, 1);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      AnnotationVisitor annotationVisitor0 = methodWriter0.visitAnnotation(" 9@=t<zi\"Sb~s{1'L", false);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(annotationVisitor0);
      
      methodWriter0.visitFrame(2, 2, (Object[]) null, 191, (Object[]) null);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      Label label0 = new Label();
      assertNotNull(label0);
      
      methodWriter0.visitTypeInsn(0, " 9@=t<zi\"Sb~s{1'L");
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(byteArray0);
      
      ClassWriter classWriter1 = new ClassWriter(1);
      assertFalse(classWriter1.equals((Object)classWriter0));
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(classWriter1);
      
      AnnotationVisitor annotationVisitor1 = methodWriter0.visitAnnotationDefault();
      assertNotSame(classWriter0, classWriter1);
      assertNotSame(annotationVisitor1, annotationVisitor0);
      assertFalse(classWriter0.equals((Object)classWriter1));
      assertFalse(annotationVisitor1.equals((Object)annotationVisitor0));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(annotationVisitor1);
      
      int int0 = methodWriter0.getSize();
      assertEquals(66, int0);
      assertNotSame(classWriter0, classWriter1);
      assertFalse(classWriter0.equals((Object)classWriter1));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(classWriter0);
      
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 0, " 9@=t<zi\"Sb~s{1'L", " 9@=t<zi\"Sb~s{1'L", " 9@=t<zi\"Sb~s{1'L", (String[]) null, false, false);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(methodWriter0);
      
      AnnotationVisitor annotationVisitor0 = methodWriter0.visitAnnotationDefault();
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(annotationVisitor0);
      
      int[] intArray0 = new int[11];
      intArray0[7] = 1;
      Item item0 = classWriter0.newLong(1);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(item0);
      
      methodWriter0.visitFrame(3, 5, (Object[]) null, 24, (Object[]) null);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      AnnotationVisitor annotationVisitor1 = methodWriter0.visitAnnotation(" 9@=t<zi\"Sb~s{1'L", true);
      assertNotSame(annotationVisitor1, annotationVisitor0);
      assertFalse(annotationVisitor1.equals((Object)annotationVisitor0));
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(annotationVisitor1);
      
      Label label0 = new Label();
      assertNotNull(label0);
      
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(byteArray0);
      
      ClassWriter classWriter1 = new ClassWriter((-176));
      assertFalse(classWriter1.equals((Object)classWriter0));
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(classWriter1);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-50));
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(classWriter0);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "~o?e";
      stringArray0[1] = "kN,:\u0000)s\"*eRJ-%( ";
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, (-50), "kN,:\u0000)s\"*eRJ-%( ", "kN,:\u0000)s\"*eRJ-%( ", "~o?e", stringArray0, true, false);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(methodWriter0);
      
      methodWriter0.visitVarInsn(0, 2);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      methodWriter0.visitLdcInsn("~o?e");
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter0);
      
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 0, " 9@=t<zi\"Sb~s{1'L", " 9@=t<zi\"Sb~s{1'L", " 9@=t<zi\"Sb~s{1'L", (String[]) null, false, false);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(methodWriter0);
      
      methodWriter0.visitFrame(2, 91, (Object[]) null, 1611, (Object[]) null);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      // Undeclared exception!
      try { 
        methodWriter0.visitParameterAnnotation(90, "ws9'p*\"U[H", false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 17
         //
         verifyException("org.objectweb.asm.jip.Type", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter0);
      
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 1, "Exceptions", "RuntimeInvisibleAnnotations", "RuntimeInvisibleAnnotations", (String[]) null, false, false);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(methodWriter0);
      
      Attribute attribute0 = new Attribute("StackMap");
      assertTrue(attribute0.isUnknown());
      assertFalse(attribute0.isCodeAttribute());
      assertNotNull(attribute0);
      
      Attribute attribute1 = new Attribute("StackMap");
      assertTrue(attribute1.isUnknown());
      assertFalse(attribute1.isCodeAttribute());
      assertFalse(attribute1.equals((Object)attribute0));
      assertNotNull(attribute1);
      
      attribute0.next = attribute1;
      assertTrue(attribute0.isUnknown());
      assertFalse(attribute0.isCodeAttribute());
      assertTrue(attribute1.isUnknown());
      assertFalse(attribute1.isCodeAttribute());
      assertTrue(attribute0.next.isUnknown());
      assertFalse(attribute0.next.isCodeAttribute());
      
      Attribute attribute2 = attribute0.next;
      assertSame(attribute2, attribute1);
      assertNotSame(attribute2, attribute0);
      assertTrue(attribute2.isUnknown());
      assertFalse(attribute2.isCodeAttribute());
      assertFalse(attribute2.equals((Object)attribute0));
      assertNotNull(attribute2);
      
      methodWriter0.visitAttribute(attribute0);
      assertNotSame(attribute0, attribute2);
      assertNotSame(attribute0, attribute1);
      assertTrue(attribute0.isUnknown());
      assertFalse(attribute0.isCodeAttribute());
      assertFalse(attribute0.equals((Object)attribute2));
      assertFalse(attribute0.equals((Object)attribute1));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      MethodWriter methodWriter1 = methodWriter0.next;
      assertNull(methodWriter1);
      
      methodWriter0.visitIincInsn(2, 0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      int int0 = (-24);
      ClassWriter classWriter0 = new ClassWriter((-24));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter0);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "kN,:\u0000)s\"eRJ-%( ";
      stringArray0[1] = "kN,:\u0000)s\"eRJ-%( ";
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, (-24), "kN,:\u0000)s\"eRJ-%( ", "kN,:\u0000)s\"eRJ-%( ", "~o?e", stringArray0, true, false);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(methodWriter0);
      
      Frame frame0 = new Frame();
      assertNotNull(frame0);
      
      Label label0 = frame0.owner;
      assertNull(label0);
      
      methodWriter0.visitTryCatchBlock((Label) null, (Label) null, (Label) null, "kN,:\u0000)s\"eRJ-%( ");
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      Label label1 = new Label();
      assertNotNull(label1);
      
      AnnotationVisitor annotationVisitor0 = methodWriter0.visitAnnotation("~o?e", true);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(annotationVisitor0);
      
      methodWriter0.visitFieldInsn((-24), "kN,:\u0000)s\"eRJ-%( ", "kN,:\u0000)s\"eRJ-%( ", "J");
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      // Undeclared exception!
      try { 
        classWriter0.toByteArray();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.objectweb.asm.jip.MethodWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(classWriter0);
      
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 0, " 9@=t<zi\"Sb~s{1'L", " 9@=t<zi\"Sb~s{1'L", " 9@=t<zi\"Sb~s{1'L", (String[]) null, false, false);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(methodWriter0);
      
      methodWriter0.visitMaxs(1, 1);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      AnnotationVisitor annotationVisitor0 = methodWriter0.visitAnnotation(" 9@=t<zi\"Sb~s{1'L", false);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(annotationVisitor0);
      
      Label label0 = new Label();
      assertNotNull(label0);
      
      AnnotationVisitor annotationVisitor1 = methodWriter0.visitAnnotation(" 9@=t<zi\"Sb~s{1'L", true);
      assertNotSame(annotationVisitor1, annotationVisitor0);
      assertFalse(annotationVisitor1.equals((Object)annotationVisitor0));
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(annotationVisitor1);
      
      Label label1 = new Label();
      assertFalse(label1.equals((Object)label0));
      assertNotNull(label1);
      
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(byteArray0);
      
      methodWriter0.visitMultiANewArrayInsn(" 9@=t<zi\"Sb~s{1'L", (-128));
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      methodWriter0.visitIntInsn((-30), 1);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      methodWriter0.visitVarInsn(191, 21);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      methodWriter0.visitTryCatchBlock(label1, label1, label1, " 9@=t<zi\"Sb~s{1'L");
      assertNotSame(label1, label0);
      assertFalse(label1.equals((Object)label0));
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      int int0 = methodWriter0.getSize();
      assertEquals(74, int0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      methodWriter0.visitIntInsn(25, 1);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      ByteVector byteVector0 = new ByteVector(90);
      assertNotNull(byteVector0);
      
      ByteVector byteVector1 = byteVector0.putInt(16777219);
      assertSame(byteVector0, byteVector1);
      assertSame(byteVector1, byteVector0);
      assertNotNull(byteVector1);
      
      ByteVector byteVector2 = byteVector1.put11((-128), (-128));
      assertSame(byteVector2, byteVector0);
      assertSame(byteVector2, byteVector1);
      assertSame(byteVector0, byteVector2);
      assertSame(byteVector0, byteVector1);
      assertSame(byteVector1, byteVector0);
      assertSame(byteVector1, byteVector2);
      assertNotNull(byteVector2);
      
      methodWriter0.put(byteVector2);
      assertSame(byteVector2, byteVector0);
      assertSame(byteVector2, byteVector1);
      assertSame(byteVector0, byteVector2);
      assertSame(byteVector0, byteVector1);
      assertSame(byteVector1, byteVector0);
      assertSame(byteVector1, byteVector2);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter0);
      
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 0, " 9@=t<zi\"Sb~s{1'L", " 9@=t<zi\"Sb~s{1'L", " 9@=t<zi\"Sb~s{1'L", (String[]) null, false, false);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(methodWriter0);
      
      int[] intArray0 = new int[10];
      intArray0[9] = 1;
      methodWriter0.visitIincInsn(255, (-1010));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      methodWriter0.visitFrame(3, 3, (Object[]) null, 2, (Object[]) null);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      // Undeclared exception!
      try { 
        methodWriter0.visitParameterAnnotation(2, "kN,:\u0000)s\"*eRJ-%( ", false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 17
         //
         verifyException("org.objectweb.asm.jip.Type", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-24));
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(classWriter0);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "kN,:\u0000)s\"eRJ-%(";
      stringArray0[1] = "kN,:\u0000)s\"eRJ-%(";
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, (-24), "kN,:\u0000)s\"eRJ-%(", "kN,:\u0000)s\"eRJ-%(", "~o?e", stringArray0, true, false);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(methodWriter0);
      
      AnnotationVisitor annotationVisitor0 = methodWriter0.visitAnnotation("~o?e", true);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(annotationVisitor0);
      
      AnnotationVisitor annotationVisitor1 = methodWriter0.visitAnnotation("kN,:\u0000)s\"eRJ-%(", false);
      assertNotSame(annotationVisitor1, annotationVisitor0);
      assertFalse(annotationVisitor1.equals((Object)annotationVisitor0));
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(annotationVisitor1);
      
      methodWriter0.visitFieldInsn(1, "kN,:\u0000)s\"eRJ-%(", "kN,:\u0000)s\"eRJ-%(", "kN,:\u0000)s\"eRJ-%(");
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      methodWriter0.visitInsn(186);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(70);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter0);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "ksN,uq)s \"eRJ-%( ";
      stringArray0[1] = "ksN,uq)s \"eRJ-%( ";
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 70, "ksN,uq)s \"eRJ-%( ", "ksN,uq)s \"eRJ-%( ", ";B.bSq5{=q]&Y", stringArray0, false, true);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(methodWriter0);
      
      Label label0 = new Label();
      assertNotNull(label0);
      
      methodWriter0.visitFieldInsn(70, "ksN,uq)s \"eRJ-%( ", "ksN,uq)s \"eRJ-%( ", "ksN,uq)s \"eRJ-%( ");
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      methodWriter0.visitFieldInsn(70, "ksN,uq)s \"eRJ-%( ", "ksN,uq)s \"eRJ-%( ", ";B.bSq5{=q]&Y");
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      // Undeclared exception!
      try { 
        methodWriter0.visitMaxs(187, 70);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 17
         //
         verifyException("org.objectweb.asm.jip.Type", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      int int0 = (-17);
      ClassWriter classWriter0 = new ClassWriter((-17));
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(classWriter0);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "kN,:\u0000)s\"eRJ-%( ";
      stringArray0[1] = "kN,:\u0000)s\"eRJ-%( ";
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, (-17), "kN,:\u0000)s\"eRJ-%( ", "kN,:\u0000)s\"eRJ-%( ", "Qo?e", stringArray0, true, false);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(methodWriter0);
      
      Label label0 = new Label();
      assertNotNull(label0);
      
      MethodWriter methodWriter1 = classWriter0.lastMethod;
      assertSame(methodWriter1, methodWriter0);
      assertNotNull(methodWriter1);
      
      int int1 = 50;
      // Undeclared exception!
      try { 
        methodWriter1.visitFrame(1, 719, stringArray0, 2181, stringArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.objectweb.asm.jip.MethodWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-24));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter0);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "kN,:\u0000)s\"eRJ-%( ";
      stringArray0[1] = "kN,:\u0000)s\"eRJ-%( ";
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, (-24), "kN,:\u0000)s\"eRJ-%( ", "kN,:\u0000)s\"eRJ-%( ", "w{", stringArray0, true, true);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(methodWriter0);
      
      methodWriter0.visitIincInsn(2852, (-24));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      methodWriter0.visitFrame(1, 262144, stringArray0, (-24), stringArray0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      methodWriter0.visitFrame(9, 262144, stringArray0, 191, stringArray0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-24));
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(classWriter0);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "kN,:\u0000)s\"eRJ-%( ";
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 942, "ksN,uq)s \"eRJ-%( ", "rcCE(", "int", stringArray0, false, false);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(methodWriter0);
      
      Label label0 = new Label();
      assertNotNull(label0);
      
      Integer integer0 = new Integer(2);
      assertEquals(2, (int)integer0);
      assertNotNull(integer0);
      
      methodWriter0.visitLdcInsn("ksN,uq)s \"eRJ-%( ");
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      methodWriter0.visitIincInsn(942, 2);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(17);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter0);
      
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, (-231), " 9=t<zi\"Sb~s{1'L", " 9=t<zi\"Sb~s{1'L", " 9=t<zi\"Sb~s{1'L", (String[]) null, false, false);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(methodWriter0);
      
      // Undeclared exception!
      try { 
        methodWriter0.visitParameterAnnotation(1, " 9=t<zi\"Sb~s{1'L", true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 16
         //
         verifyException("org.objectweb.asm.jip.Type", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-9));
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(classWriter0);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "kN,:\u0000)s\"eRJ-%( ";
      stringArray0[1] = "kN,:\u0000)s\"eRJ-%( ";
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, (-9), "kN,:\u0000)s\"eRJ-%( ", "kN,:\u0000)s\"eRJ-%( ", "kN,:\u0000)s\"eRJ-%( ", stringArray0, true, true);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(methodWriter0);
      
      methodWriter0.visitFrame((-9), 1, stringArray0, (-9), stringArray0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      MethodWriter methodWriter1 = classWriter0.lastMethod;
      assertSame(methodWriter1, methodWriter0);
      assertNotNull(methodWriter1);
      
      // Undeclared exception!
      try { 
        methodWriter1.visitMaxs((-9), (-3539));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 15
         //
         verifyException("org.objectweb.asm.jip.Type", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter0);
      
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 1, "sC+J@v2s Cw!`K", "sC+J@v2s Cw!`K", "sC+J@v2s Cw!`K", (String[]) null, false, false);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(methodWriter0);
      
      methodWriter0.visitFrame((-1037), (-1037), (Object[]) null, (-2070), (Object[]) null);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) methodWriter0;
      // Undeclared exception!
      try { 
        methodWriter0.visitFrame(1, 65535, (Object[]) null, 2, objectArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.objectweb.asm.jip.MethodWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter0);
      
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 0, " 9@=t<zi\"Sb~s{1'L", " 9@=t<zi\"Sb~s{1'L", " 9@=t<zi\"Sb~s{1'L", (String[]) null, false, false);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(methodWriter0);
      
      methodWriter0.visitMaxs(1, 1);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      methodWriter0.visitFrame((-128), (-128), (Object[]) null, 191, (Object[]) null);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      Label label0 = new Label();
      assertNotNull(label0);
      
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(byteArray0);
      
      methodWriter0.visitMultiANewArrayInsn(" 9@=t<zi\"Sb~s{1'L", (-128));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      methodWriter0.visitIntInsn((-30), 1);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      methodWriter0.visitVarInsn(191, 191);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      methodWriter0.visitTryCatchBlock(label0, label0, label0, " 9@=t<zi\"Sb~s{1'L");
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      int int0 = methodWriter0.getSize();
      assertEquals(58, int0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      methodWriter0.visitFrame((-128), (-30), (Object[]) null, 2, (Object[]) null);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      AnnotationVisitor annotationVisitor0 = methodWriter0.visitAnnotation(";!I$*v(q<$`m}6U4", true);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(annotationVisitor0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-24));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter0);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "Ljava/lang/Synthetic;";
      stringArray0[1] = "Ljava/lang/Synthetic;";
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, (-24), "Ljava/lang/Synthetic;", "kNH/,)s\"eRJ-%( ", "~o?e", stringArray0, true, false);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(methodWriter0);
      
      Label label0 = new Label();
      assertNotNull(label0);
      
      methodWriter0.visitLabel(label0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      AnnotationVisitor annotationVisitor0 = methodWriter0.visitAnnotation("e82-hn}P\"s", true);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(annotationVisitor0);
      
      Label[] labelArray0 = new Label[3];
      labelArray0[0] = label0;
      labelArray0[1] = label0;
      labelArray0[2] = label0;
      methodWriter0.visitTableSwitchInsn(1, 1, label0, labelArray0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      methodWriter0.visitJumpInsn(184, label0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-24));
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(classWriter0);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "kN,:\u0000)s\"eRJ-%( ";
      stringArray0[1] = "kN,:\u0000)s\"eRJ-%( ";
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, (-24), "kN,:\u0000)s\"eRJ-%( ", "kN,:\u0000)s\"eRJ-%( ", "~o?e", stringArray0, true, false);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(methodWriter0);
      
      Integer integer0 = new Integer(1);
      assertEquals(1, (int)integer0);
      assertNotNull(integer0);
      
      methodWriter0.visitLdcInsn("LineNumberTable");
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      methodWriter0.visitIincInsn((-24), 228);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-24));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter0);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "kN,:\u0000)s\"eRJ-%( ";
      stringArray0[1] = "kN,:\u0000)s\"eRJ-%( ";
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, (-24), "kN,:\u0000)s\"eRJ-%( ", "kN,:\u0000)s\"eRJ-%( ", "~o?e", stringArray0, true, false);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(methodWriter0);
      
      Integer integer0 = new Integer(1);
      assertEquals(1, (int)integer0);
      assertNotNull(integer0);
      
      methodWriter0.visitIntInsn((-24), 1);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      methodWriter0.visitMethodInsn(1, "kN,:\u0000)s\"eRJ-%( ", "AnnotationDefault", "kN,:\u0000)s\"eRJ-%( ");
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-15));
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(classWriter0);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "~o?e";
      stringArray0[1] = "kN,:\u0000)s\"*eRJ-%( ";
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, (-15), "kN,:\u0000)s\"*eRJ-%( ", "kN,:\u0000)s\"*eRJ-%( ", "~o?e", stringArray0, true, false);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(methodWriter0);
      
      methodWriter0.visitVarInsn(2, 2);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      methodWriter0.visitIntInsn(18, 0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-24));
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(classWriter0);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "~o?e";
      stringArray0[1] = "kN,:\u0000)s\"eRJ-%( ";
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, (-24), "kN,:\u0000)s\"eRJ-%( ", "kN,:\u0000)s\"eRJ-%( ", "~o?e", stringArray0, true, false);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(methodWriter0);
      
      methodWriter0.visitVarInsn(1, 2);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      methodWriter0.visitIntInsn(65, 24117248);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      methodWriter0.visitInsn(1);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-24));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter0);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "kN,:\u0000)s\"eRJ-%(";
      stringArray0[1] = "kN,:\u0000)s\"eRJ-%(";
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, (-24), "kN,:\u0000)s\"eRJ-%(", "kN,:\u0000)s\"eRJ-%(", "~o?e", stringArray0, true, false);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(methodWriter0);
      
      AnnotationVisitor annotationVisitor0 = methodWriter0.visitAnnotation("~o?e", true);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(annotationVisitor0);
      
      AnnotationVisitor annotationVisitor1 = methodWriter0.visitAnnotation("kN,:\u0000)s\"eRJ-%(", false);
      assertNotSame(annotationVisitor1, annotationVisitor0);
      assertFalse(annotationVisitor1.equals((Object)annotationVisitor0));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(annotationVisitor1);
      
      methodWriter0.visitFieldInsn(1, "kN,:\u0000)s\"eRJ-%(", "kN,:\u0000)s\"eRJ-%(", "kN,:\u0000)s\"eRJ-%(");
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      methodWriter0.visitMaxs(16, (-24));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-9));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter0);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "kN,:\u0000)s\"eRJ-%( ";
      stringArray0[1] = "kN,:\u0000)s\"eRJ-%( ";
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, (-9), "kN,:\u0000)s\"eRJ-%( ", "kN,:\u0000)s\"eRJ-%( ", "~o?e", stringArray0, true, false);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(methodWriter0);
      
      methodWriter0.signature = null;
      Label label0 = new Label();
      assertNotNull(label0);
      
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(byteArray0);
      
      Integer integer0 = new Integer((-3539));
      assertEquals((-3539), (int)integer0);
      assertNotNull(integer0);
      
      methodWriter0.visitLabel(label0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      methodWriter0.visitMaxs(23, (-2049));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-9));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter0);
      
      String[] stringArray0 = new String[9];
      stringArray0[0] = "!8}%n!4`=m+Q4nZCe_";
      stringArray0[1] = "!8}%n!4`=m+Q4nZCe_";
      stringArray0[2] = "Qo?e";
      stringArray0[3] = "!8}%n!4`=m+Q4nZCe_";
      stringArray0[4] = "kN,:\u0000)s\"eRJ-%( ";
      stringArray0[5] = "kN,:\u0000)s\"eRJ-%( ";
      stringArray0[6] = "B.d";
      stringArray0[7] = "f";
      stringArray0[8] = "f";
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, (-9), "Qo?e", "!8}%n!4`=m+Q4nZCe_", "f", stringArray0, false, false);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(methodWriter0);
      
      Label label0 = new Label();
      assertNotNull(label0);
      
      methodWriter0.classReaderOffset = 1;
      AnnotationVisitor annotationVisitor0 = methodWriter0.visitAnnotation("!8}%n!4`=m+Q4nZCe_", false);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(annotationVisitor0);
      
      methodWriter0.visitFieldInsn(2, "Qo?e", ":w[EY&", "Qo?e");
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      // Undeclared exception!
      try { 
        classWriter0.toByteArray();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.objectweb.asm.jip.MethodWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-9));
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(classWriter0);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "kN,:\u0000)s\"eRJ-%( ";
      stringArray0[1] = "kN,:\u0000)s\"eRJ-%( ";
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, (-9), "kN,:\u0000)s\"eRJ-%( ", "kN,:\u0000)s\"eRJ-%( ", " 9=t<zi\"Sb~s{1'L", stringArray0, true, false);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(methodWriter0);
      
      Label label0 = new Label();
      assertNotNull(label0);
      
      methodWriter0.visitIntInsn((-9), 2);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      Label label1 = new Label();
      assertFalse(label1.equals((Object)label0));
      assertNotNull(label1);
      
      methodWriter0.visitLocalVariable("kN,:\u0000)s\"eRJ-%( ", "kN,:\u0000)s\"eRJ-%( ", "mD", label1, label0, (-3833));
      assertNotSame(label0, label1);
      assertNotSame(label1, label0);
      assertFalse(label0.equals((Object)label1));
      assertFalse(label1.equals((Object)label0));
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-24));
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(classWriter0);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "kN,:\u0000)s\"eRJ-%(";
      stringArray0[1] = "kN,:\u0000)s\"eRJ-%(";
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, (-24), "kN,:\u0000)s\"eRJ-%(", "kN,:\u0000)s\"eRJ-%(", "?o?e", stringArray0, true, false);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(methodWriter0);
      
      AnnotationVisitor annotationVisitor0 = methodWriter0.visitAnnotation("?o?e", true);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(annotationVisitor0);
      
      methodWriter0.visitIntInsn((-24), 2631);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      Label label0 = new Label();
      assertNotNull(label0);
      
      methodWriter0.visitLocalVariable("ws9'p*\"U[H", "kN,:\u0000)s\"eRJ-%(", "=,/CzhTTw, X", label0, label0, 553);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(classWriter0);
      
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 0, " 9@=t<zi\"Sb~s{1'L", " 9@=t<zi\"Sb~s{1'L", " 9@=t<zi\"Sb~s{1'L", (String[]) null, false, false);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(methodWriter0);
      
      AnnotationVisitor annotationVisitor0 = methodWriter0.visitAnnotation(" 9@=t<zi\"Sb~s{1'L", true);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(annotationVisitor0);
      
      methodWriter0.visitFrame(0, (-168), (Object[]) null, 0, (Object[]) null);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      Label label0 = new Label();
      assertNotNull(label0);
      
      methodWriter0.visitIntInsn(28, 16);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      Label label1 = new Label();
      assertFalse(label1.equals((Object)label0));
      assertNotNull(label1);
      
      Label label2 = label1.successor;
      assertNull(label2);
      
      MethodWriter methodWriter1 = classWriter0.lastMethod;
      assertSame(methodWriter1, methodWriter0);
      assertNotNull(methodWriter1);
      
      methodWriter1.visitVarInsn(2808, 1);
      assertSame(methodWriter1, methodWriter0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      methodWriter1.visitLabel(label0);
      assertNotSame(label0, label1);
      assertSame(methodWriter1, methodWriter0);
      assertFalse(label0.equals((Object)label1));
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-24));
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(classWriter0);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "kN,:\u0000)s\"eRJ-%(";
      stringArray0[1] = "kN,:\u0000)s\"eRJ-%(";
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, (-24), "kN,:\u0000)s\"eRJ-%(", "kN,:\u0000)s\"eRJ-%(", "kN,:\u0000)s\"eRJ-%(", stringArray0, true, false);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(methodWriter0);
      
      AnnotationVisitor annotationVisitor0 = methodWriter0.visitAnnotation("kN,:\u0000)s\"eRJ-%(", true);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(annotationVisitor0);
      
      AnnotationVisitor annotationVisitor1 = methodWriter0.visitAnnotation(" 9@=t<zi\"Sb~s{1'L", false);
      assertNotSame(annotationVisitor1, annotationVisitor0);
      assertFalse(annotationVisitor1.equals((Object)annotationVisitor0));
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(annotationVisitor1);
      
      methodWriter0.visitFieldInsn(1, "kN,:\u0000)s\"eRJ-%(", "kN,:\u0000)s\"eRJ-%(", " 9@=t<zi\"Sb~s{1'L");
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      methodWriter0.visitTypeInsn((-24), "kN,:\u0000)s\"eRJ-%(");
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      Attribute attribute0 = new Attribute("kN,:\u0000)s\"eRJ-%(");
      assertTrue(attribute0.isUnknown());
      assertFalse(attribute0.isCodeAttribute());
      assertNotNull(attribute0);
      
      methodWriter0.visitAttribute(attribute0);
      assertTrue(attribute0.isUnknown());
      assertFalse(attribute0.isCodeAttribute());
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(7);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(classWriter0);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "Codv";
      stringArray0[1] = "kN,:\u0000)s\"eRJ-%( ";
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 7, "kN,:\u0000)s\"eRJ-%( ", "kN,:\u0000)s\"eRJ-%( ", "Codv", stringArray0, true, true);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(methodWriter0);
      
      AnnotationVisitor annotationVisitor0 = methodWriter0.visitAnnotation("Codv", true);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(annotationVisitor0);
      
      Label label0 = new Label();
      assertNotNull(label0);
      
      methodWriter0.visitLabel(label0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      label0.successor = null;
      methodWriter0.visitJumpInsn(7, label0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      methodWriter0.visitLineNumber(2, label0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      methodWriter0.visitCode();
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-15));
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(classWriter0);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "~o?e";
      stringArray0[1] = "kN,:\u0000)s\"*eRJ-%( ";
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, (-15), "kN,:\u0000)s\"*eRJ-%( ", "kN,:\u0000)s\"*eRJ-%( ", "~o?e", stringArray0, true, false);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(methodWriter0);
      
      methodWriter0.visitVarInsn(0, 2);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      methodWriter0.visitMaxs(13, (-15));
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      Label label0 = new Label();
      assertNotNull(label0);
      
      methodWriter0.visitJumpInsn(18, label0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-16));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter0);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "kN,:\u0000)s\"eRJ-%( ";
      stringArray0[1] = "kN,:\u0000)s\"eRJ-%( ";
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, (-16), "kN,:\u0000)s\"eRJ-%( ", "kN,:\u0000)s\"eRJ-%( ", "~o?e", stringArray0, true, false);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(methodWriter0);
      
      Label label0 = new Label();
      assertNotNull(label0);
      
      methodWriter0.visitLabel(label0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      MethodWriter methodWriter1 = classWriter0.lastMethod;
      assertSame(methodWriter1, methodWriter0);
      assertNotNull(methodWriter1);
      
      methodWriter1.visitMaxs(1, 1);
      assertSame(methodWriter1, methodWriter0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      // Undeclared exception!
      try { 
        methodWriter1.visitMethodInsn(1, (String) null, "kN,:\u0000)s\"eRJ-%( ", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(7);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter0);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "kN,:\u0000)s\"eRJ-%( ";
      stringArray0[1] = "kN,:\u0000)s\"eRJ-%( ";
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 7, "kN,:\u0000)s\"eRJ-%( ", "kN,:\u0000)s\"eRJ-%( ", "Codv", stringArray0, true, true);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(methodWriter0);
      
      int int0 = Frame.OBJECT;
      assertEquals(24117248, int0);
      
      Label label0 = new Label();
      assertNotNull(label0);
      
      methodWriter0.visitVarInsn(2, 1);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      methodWriter0.visitLabel(label0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      AnnotationVisitor annotationVisitor0 = methodWriter0.visitAnnotation("kN,:\u0000)s\"eRJ-%( ", false);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(annotationVisitor0);
      
      methodWriter0.visitLabel(label0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(7);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter0);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "Ljava/lang/Synthetic;";
      stringArray0[1] = "Ljava/lang/Synthetic;";
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 7, "Ljava/lang/Synthetic;", "kN,:\u0000)s\"eRJ-%( ", "Codv", stringArray0, true, true);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(methodWriter0);
      
      int int0 = Frame.OBJECT;
      assertEquals(24117248, int0);
      
      AnnotationVisitor annotationVisitor0 = methodWriter0.visitAnnotation("Codv", false);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(annotationVisitor0);
      
      Label label0 = new Label();
      assertNotNull(label0);
      
      label0.status = 1;
      methodWriter0.visitVarInsn(2, 1);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      methodWriter0.visitLabel(label0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      // Undeclared exception!
      try { 
        methodWriter0.visitJumpInsn(643, label0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.objectweb.asm.jip.Frame", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-9));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter0);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "kN,:\u0000)s\"eRJ-%( ";
      stringArray0[1] = "kN,:\u0000)s\"eRJ-%( ";
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, (-9), "kN,:\u0000)s\"eRJ-%( ", "kN,:\u0000)s\"eRJ-%( ", "~o?e", stringArray0, true, false);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(methodWriter0);
      
      Label label0 = new Label();
      assertNotNull(label0);
      
      methodWriter0.visitLocalVariable("kN,:\u0000)s\"eRJ-%( ", "kN,:\u0000)s\"eRJ-%( ", "kN,:\u0000)s\"eRJ-%( ", label0, label0, 1141048066);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      AnnotationVisitor annotationVisitor0 = methodWriter0.visitAnnotation("kN,:\u0000)s\"eRJ-%( ", false);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(annotationVisitor0);
      
      methodWriter0.visitFieldInsn(1866, "kN,:\u0000)s\"eRJ-%( ", "xfRlTE", "ConstantValue");
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "kN,:\u0000)s\"eRJ-%( ");
      assertFalse(boolean0);
      
      methodWriter0.visitLocalVariable("kN,:\u0000)s\"eRJ-%( ", "RuntimeInvisibleAnnotations", "kN,:\u0000)s\"eRJ-%( ", label0, label0, 2);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(classWriter0);
      
      boolean boolean0 = true;
      String string0 = "2vctd[p";
      MethodWriter methodWriter0 = null;
      try {
        methodWriter0 = new MethodWriter(classWriter0, 1, "<init>", "2vctd[p", " 9@=t<zi\"Sb~s{1'L", (String[]) null, true, true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(7);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter0);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "kN,:\u0000)s\"eRJ-%( ";
      stringArray0[1] = "kN,:\u0000)s\"eRJ-%( ";
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 7, "kN,:\u0000)s\"eRJ-%( ", "kN,:\u0000)s\"eRJ-%( ", "Codv", stringArray0, true, true);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(methodWriter0);
      
      int int0 = Frame.OBJECT;
      assertEquals(24117248, int0);
      
      AnnotationVisitor annotationVisitor0 = methodWriter0.visitAnnotation("Codv", true);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(annotationVisitor0);
      
      Label label0 = new Label();
      assertNotNull(label0);
      
      methodWriter0.visitLabel(label0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      methodWriter0.visitVarInsn(177, 2147483645);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      methodWriter0.visitLabel(label0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-24));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter0);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "kN,:\u0000)s\"*eRJ-%( ";
      stringArray0[1] = "kN,:\u0000)s\"*eRJ-%( ";
      classWriter0.visit(66, (-24), "kN,:\u0000)s\"*eRJ-%( ", "g5 @$Gf:AE", "Exceptions", stringArray0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, (-24), "kN,:\u0000)s\"*eRJ-%( ", "kN,:\u0000)s\"*eRJ-%( ", "kN,:\u0000)s\"*eRJ-%( ", stringArray0, false, false);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(methodWriter0);
      
      AnnotationVisitor annotationVisitor0 = methodWriter0.visitAnnotation("kN,:\u0000)s\"*eRJ-%( ", false);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(annotationVisitor0);
      
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) classWriter0;
      Label label0 = new Label();
      assertNotNull(label0);
      
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(byteArray0);
      
      Label label1 = label0.getFirst();
      assertSame(label0, label1);
      assertSame(label1, label0);
      assertNotNull(label1);
      
      Label label2 = label0.successor;
      assertNull(label2);
      
      methodWriter0.visitTryCatchBlock(label1, label1, label0, "kN,:\u0000)s\"*eRJ-%( ");
      assertSame(label0, label1);
      assertSame(label1, label0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      MethodWriter methodWriter1 = classWriter0.lastMethod;
      assertSame(methodWriter1, methodWriter0);
      assertNotNull(methodWriter1);
      
      methodWriter1.visitMaxs((-3539), 1);
      assertSame(methodWriter1, methodWriter0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-24));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter0);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "Ljava/lang/Synthetic;";
      stringArray0[1] = "Ljava/lang/Synthetic;";
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, (-24), "Ljava/lang/Synthetic;", "kN,:\u0000)s\"eRJ-%( ", "kN,:\u0000)s\"eRJ-%( ", stringArray0, true, false);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(methodWriter0);
      
      AnnotationVisitor annotationVisitor0 = methodWriter0.visitAnnotation("org.objectweb.asm.jip.Frame", true);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(annotationVisitor0);
      
      Label label0 = new Label();
      assertNotNull(label0);
      
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(byteArray0);
      
      Integer integer0 = new Integer((-1955921861));
      assertEquals((-1955921861), (int)integer0);
      assertNotNull(integer0);
      
      methodWriter0.visitVarInsn(1, 1);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      methodWriter0.visitLabel(label0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      methodWriter0.visitMaxs(855, (-24));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      int int0 = 0;
      ClassWriter classWriter0 = new ClassWriter(0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter0);
      
      String[] stringArray0 = null;
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 1, "sC+J@v2s Cw!`K", "sC+J@v2s Cw!`K", "sC+J@v2s Cw!`K", (String[]) null, false, false);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(methodWriter0);
      
      methodWriter0.visitMaxs(0, 2);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[1] = (Object) "sC+J@v2s Cw!`K";
      int int1 = (-1142);
      // Undeclared exception!
      try { 
        methodWriter0.visitFrame(1, 2, objectArray0, (-1142), (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.objectweb.asm.jip.MethodWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(70);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter0);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "ksN,uq)s \"eRJ-%( ";
      stringArray0[1] = "ksN,uq)s \"eRJ-%( ";
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 70, "ksN,uq)s \"eRJ-%( ", "ksN,uq)s \"eRJ-%( ", ";B.bSq5{=q]&Y", stringArray0, true, true);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(methodWriter0);
      
      Label label0 = new Label();
      assertNotNull(label0);
      
      methodWriter0.visitFieldInsn(70, "ksN,uq)s \"eRJ-%( ", "ksN,uq)s \"eRJ-%( ", "ksN,uq)s \"eRJ-%( ");
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      methodWriter0.visitTypeInsn(70, "ksN,uq)s \"eRJ-%( ");
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      methodWriter0.visitVarInsn(54, 987);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      Label[] labelArray0 = new Label[2];
      labelArray0[0] = label0;
      labelArray0[1] = label0;
      methodWriter0.visitTableSwitchInsn(54, 349, label0, labelArray0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      methodWriter0.visitLineNumber(987, label0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      methodWriter0.visitMethodInsn(987, "ksN,uq)s \"eRJ-%( ", ";B.bSq5{=q]&Y", "ksN,uq)s \"eRJ-%( ");
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      // Undeclared exception!
      try { 
        methodWriter0.visitFieldInsn(22, "ksN,uq)s \"eRJ-%( ", (String) null, "ksN,uq)s \"eRJ-%( ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-17));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter0);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "kN,:\u0000)s\"eRJ-%( ";
      stringArray0[1] = "kN,:\u0000)s\"eRJ-%( ";
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, (-17), "kN,:\u0000)s\"eRJ-%( ", "kN,:\u0000)s\"eRJ-%( ", "Qo?e", stringArray0, true, true);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(methodWriter0);
      
      Label label0 = new Label();
      assertNotNull(label0);
      
      AnnotationVisitor annotationVisitor0 = methodWriter0.visitAnnotation("Qo?e", true);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(annotationVisitor0);
      
      methodWriter0.visitFieldInsn((-17), "kN,:\u0000)s\"eRJ-%( ", "kN,:\u0000)s\"eRJ-%( ", "J");
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(byteArray0);
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "boolean");
      assertFalse(boolean0);
      
      methodWriter0.visitIntInsn(191, 24117248);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      methodWriter0.visitInsn(191);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-41));
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(classWriter0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "Ljava/lang/Synthetic;";
      stringArray0[1] = "Ljava/lang/Synthetic;";
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, (-41), "Ljava/lang/Synthetic;", "kN,:0)s\"RJ-%( ", "~o?e", stringArray0, false, false);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(methodWriter0);
      
      MethodWriter methodWriter1 = new MethodWriter(classWriter0, 1, "b9*Q<'y]R", "kN,:0)s\"RJ-%( ", "Ljava/lang/Synthetic;", stringArray0, false, true);
      assertFalse(methodWriter1.equals((Object)methodWriter0));
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(methodWriter1);
      
      int int0 = Frame.OBJECT;
      assertEquals(24117248, int0);
      
      Label label0 = new Label();
      assertNotNull(label0);
      
      int[] intArray0 = new int[9];
      intArray0[0] = (-41);
      intArray0[1] = 1;
      intArray0[2] = 1;
      intArray0[3] = 24117248;
      intArray0[4] = 76;
      intArray0[5] = 132;
      intArray0[7] = 2;
      intArray0[8] = 132;
      Label[] labelArray0 = new Label[8];
      labelArray0[0] = label0;
      labelArray0[1] = label0;
      labelArray0[2] = label0;
      labelArray0[3] = label0;
      labelArray0[4] = label0;
      labelArray0[5] = label0;
      labelArray0[6] = label0;
      labelArray0[7] = label0;
      methodWriter1.visitLookupSwitchInsn(label0, intArray0, labelArray0);
      assertArrayEquals(new int[] {(-41), 1, 1, 24117248, 76, 132, 0, 2, 132}, intArray0);
      assertNotSame(methodWriter1, methodWriter0);
      assertFalse(methodWriter1.equals((Object)methodWriter0));
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      methodWriter0.visitVarInsn(132, 132);
      assertNotSame(methodWriter0, methodWriter1);
      assertFalse(methodWriter0.equals((Object)methodWriter1));
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      methodWriter1.visitLabel(label0);
      assertNotSame(methodWriter1, methodWriter0);
      assertFalse(methodWriter1.equals((Object)methodWriter0));
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-24));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter0);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "kN,:\u0000)s\"eRJ-%( ";
      stringArray0[1] = "kN,:\u0000)s\"eRJ-%( ";
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, (-24), "kN,:\u0000)s\"eRJ-%( ", "kN,:\u0000)s\"eRJ-%( ", "~o?e", stringArray0, true, false);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(methodWriter0);
      
      Label label0 = new Label();
      assertNotNull(label0);
      
      Item item0 = classWriter0.newMethodItem("e82-hn}P\"s", "~o?e", "kN,:\u0000)s\"eRJ-%( ", true);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(item0);
      
      AnnotationVisitor annotationVisitor0 = methodWriter0.visitAnnotation("`!", false);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(annotationVisitor0);
      
      methodWriter0.visitLocalVariable("lu.<.P-zU0a{:^", "JU", ")E!Cs", label0, label0, (-24));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      methodWriter0.visitFieldInsn(8, "kN,:\u0000)s\"eRJ-%( ", "w&5l", "wX8_@OG}R");
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      boolean boolean0 = ClassReader.RESIZE;
      assertTrue(boolean0);
      
      AnnotationVisitor annotationVisitor1 = methodWriter0.visitAnnotation("`!", true);
      assertNotSame(annotationVisitor1, annotationVisitor0);
      assertFalse(annotationVisitor1.equals((Object)annotationVisitor0));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(annotationVisitor1);
      
      methodWriter0.visitMethodInsn((-24), "4Yb5- C};JZ06T", "RuntimeInvisibleAnnotations", "kN,:\u0000)s\"eRJ-%( ");
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-24));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter0);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "kN,:\u0000)s\"eRJ-%( ";
      stringArray0[1] = "kN,:\u0000)s\"eRJ-%( ";
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, (-24), "kN,:\u0000)s\"eRJ-%( ", "kN,:\u0000)s\"eRJ-%( ", "~o?e", stringArray0, false, false);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(methodWriter0);
      
      Label label0 = new Label();
      assertNotNull(label0);
      
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(byteArray0);
      
      methodWriter0.visitLocalVariable("kU>h", "kN,:\u0000)s\"eRJ-%( ", " 9@=t<zi\"Sb~s{1'L", label0, label0, 1570);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      Integer integer0 = new Integer(16777217);
      assertEquals(16777217, (int)integer0);
      assertNotNull(integer0);
      
      methodWriter0.visitLdcInsn(integer0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      ClassWriter classWriter1 = new ClassWriter((-24));
      assertFalse(classWriter1.equals((Object)classWriter0));
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(classWriter1);
      
      Label label1 = label0.getFirst();
      assertSame(label0, label1);
      assertSame(label1, label0);
      assertNotNull(label1);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream(2);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      methodWriter0.visitLocalVariable("kN,:\u0000)s\"eRJ-%( ", "RuntimeInvisibleAnnotations", "kN,:\u0000)s\"eRJ-%( ", label0, label1, 2);
      assertNotSame(classWriter0, classWriter1);
      assertSame(label0, label1);
      assertSame(label1, label0);
      assertFalse(classWriter0.equals((Object)classWriter1));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      methodWriter0.visitFieldInsn(184, "RuntimeInvisibleAnnotations", "kN,:\u0000)s\"eRJ-%( ", "RuntimeInvisiblePara,eterAnnotations");
      assertNotSame(classWriter0, classWriter1);
      assertFalse(classWriter0.equals((Object)classWriter1));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      methodWriter0.visitMaxs(2, 2);
      assertNotSame(classWriter0, classWriter1);
      assertFalse(classWriter0.equals((Object)classWriter1));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      ByteVector byteVector0 = new ByteVector(186);
      assertNotNull(byteVector0);
      
      methodWriter0.put(byteVector0);
      assertNotSame(classWriter0, classWriter1);
      assertFalse(classWriter0.equals((Object)classWriter1));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Label label0 = new Label();
      assertNotNull(label0);
      
      int[] intArray0 = new int[19];
      MethodWriter.getNewOffset(intArray0, intArray0, label0);
      MethodWriter.getNewOffset(intArray0, intArray0, label0);
      int int0 = 2166;
      String[] stringArray0 = new String[6];
      stringArray0[0] = "<init>";
      stringArray0[1] = ":CX_dK^4a?";
      stringArray0[2] = "']+J*b{ >*B.zJ:5+#";
      stringArray0[3] = "']+J*b{ >*B.zJ:5+#";
      stringArray0[4] = "']+J*b{ >*B.zJ:5+#";
      stringArray0[5] = "']+J*b{ >*B.zJ:5+#";
      MethodWriter methodWriter0 = null;
      try {
        methodWriter0 = new MethodWriter((ClassWriter) null, 2166, "']+J*b{ >*B.zJ:5+#", "']+J*b{ >*B.zJ:5+#", ":CX_dK^4a?", stringArray0, true, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.objectweb.asm.jip.MethodWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-9));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter0);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "kN,:\u0000)s\"eRJ-%( ";
      stringArray0[1] = "kN,:\u0000)s\"eRJ-%( ";
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, (-9), "kN,:\u0000)s\"eRJ-%( ", "kN,:\u0000)s\"eRJ-%( ", " 9=t<zi\"Sb~s{1'L", stringArray0, true, false);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(methodWriter0);
      
      Label label0 = new Label();
      assertNotNull(label0);
      
      Label label1 = new Label();
      assertFalse(label1.equals((Object)label0));
      assertNotNull(label1);
      
      Label label2 = label1.successor;
      assertNull(label2);
      
      methodWriter0.visitTryCatchBlock(label1, (Label) null, (Label) null, "kN,:\u0000)s\"eRJ-%( ");
      assertNotSame(label1, label0);
      assertFalse(label1.equals((Object)label0));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      MethodWriter methodWriter1 = classWriter0.lastMethod;
      assertSame(methodWriter1, methodWriter0);
      assertNotNull(methodWriter1);
      
      methodWriter1.visitMaxs((-9), 1);
      assertSame(methodWriter1, methodWriter0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-24));
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(classWriter0);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "kN,:\u0000)s\"eRJ-%( ";
      stringArray0[1] = "kN,:\u0000)s\"eRJ-%( ";
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, (-24), "kN,:\u0000)s\"eRJ-%( ", "kN,:\u0000)s\"eRJ-%( ", "~o?e", stringArray0, true, false);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(methodWriter0);
      
      Label label0 = new Label();
      assertNotNull(label0);
      
      AnnotationVisitor annotationVisitor0 = methodWriter0.visitAnnotation("~o?e", true);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(annotationVisitor0);
      
      methodWriter0.visitLineNumber(2, label0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      methodWriter0.visitFieldInsn((-24), "kN,:\u0000)s\"eRJ-%( ", "kN,:\u0000)s\"eRJ-%( ", "J");
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(byteArray0);
      
      ClassWriter classWriter1 = new ClassWriter(0);
      assertFalse(classWriter1.equals((Object)classWriter0));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter1);
      
      MethodWriter.writeShort(byteArray0, 8, (-24));
      assertNotSame(classWriter0, classWriter1);
      assertFalse(classWriter0.equals((Object)classWriter1));
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-24));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter0);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "kN,:\u0000)s\"eRJ-%( ";
      stringArray0[1] = "kN,:\u0000)s\"eRJ-%( ";
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, (-24), "kN,:\u0000)s\"eRJ-%( ", "kN,:\u0000)s\"eRJ-%( ", "boolean", stringArray0, true, false);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(methodWriter0);
      
      methodWriter0.visitFrame((-24), 184, stringArray0, (-32768), stringArray0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      Label label0 = new Label();
      assertNotNull(label0);
      
      Label label1 = new Label();
      assertFalse(label1.equals((Object)label0));
      assertNotNull(label1);
      
      methodWriter0.visitTypeInsn(2, "boolean");
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      methodWriter0.visitVarInsn(1, (-32768));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      AnnotationVisitor annotationVisitor0 = methodWriter0.visitAnnotation("kN,:\u0000)s\"eRJ-%( ", true);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(annotationVisitor0);
      
      methodWriter0.visitFieldInsn(1866, "kN,:\u0000)s\"eRJ-%( ", "M*LXF]", "org.objectweb.asm.jip.MethodWriter");
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "kN,:\u0000)s\"eRJ-%( ");
      assertFalse(boolean0);
      
      MethodWriter methodWriter1 = classWriter0.firstMethod;
      assertSame(methodWriter1, methodWriter0);
      assertNotNull(methodWriter1);
      
      methodWriter1.visitMethodInsn(184, "boolean", "r}J,xN^>)#.sPhNU", "j*bM)9");
      assertSame(methodWriter1, methodWriter0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-24));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter0);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "kN,:\u0000)s\"eRJ-%( ";
      stringArray0[1] = "kN,:\u0000)s\"eRJ-%( ";
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, (-24), "kN,:\u0000)s\"eRJ-%( ", "kN,:\u0000)s\"eRJ-%( ", "~o?e", stringArray0, true, false);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(methodWriter0);
      
      Label label0 = new Label();
      assertNotNull(label0);
      
      AnnotationVisitor annotationVisitor0 = methodWriter0.visitAnnotation("~o?e", true);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(annotationVisitor0);
      
      methodWriter0.visitVarInsn(1, 2);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      methodWriter0.visitIntInsn(18, 65);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      // Undeclared exception!
      try { 
        methodWriter0.visitLocalVariable((String) null, "'fexh=:", (String) null, label0, label0, 73);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-24));
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(classWriter0);
      
      String string0 = "kN,:\\0)s\"eRJ-%( ";
      String[] stringArray0 = new String[2];
      stringArray0[0] = "kN,:\u0000)s\"eRJ-%( ";
      stringArray0[1] = "kN,:\u0000)s\"eRJ-%( ";
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 24, "kN,:\u0000)s\"eRJ-%( ", "kN,:\u0000)s\"eRJ-%( ", "java/lang/Throwable", (String[]) null, true, false);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(methodWriter0);
      
      Attribute attribute0 = new Attribute("kN,:\u0000)s\"eRJ-%( ");
      assertTrue(attribute0.isUnknown());
      assertFalse(attribute0.isCodeAttribute());
      assertNotNull(attribute0);
      
      Attribute attribute1 = new Attribute("kN,:\u0000)s\"eRJ-%( ");
      assertFalse(attribute1.isCodeAttribute());
      assertTrue(attribute1.isUnknown());
      assertFalse(attribute1.equals((Object)attribute0));
      assertNotNull(attribute1);
      
      methodWriter0.visitAttribute(attribute1);
      assertNotSame(attribute1, attribute0);
      assertFalse(attribute1.isCodeAttribute());
      assertTrue(attribute1.isUnknown());
      assertFalse(attribute1.equals((Object)attribute0));
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      int int0 = 57;
      ByteVector byteVector0 = new ByteVector(57);
      assertNotNull(byteVector0);
      
      ByteVector byteVector1 = byteVector0.putShort((-835));
      assertSame(byteVector0, byteVector1);
      assertSame(byteVector1, byteVector0);
      assertNotNull(byteVector1);
      
      // Undeclared exception!
      try { 
        methodWriter0.put(byteVector0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.objectweb.asm.jip.Attribute", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-24));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter0);
      
      String[] stringArray0 = new String[0];
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 63, "(a:j,F", "kN,:\u0000)s\"eRJ-%( ", "HG?_Kce@7JOw=z4_", stringArray0, false, true);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(methodWriter0);
      
      Label label0 = new Label();
      assertNotNull(label0);
      
      Label label1 = new Label();
      assertFalse(label1.equals((Object)label0));
      assertNotNull(label1);
      
      Label label2 = label0.successor;
      assertNull(label2);
      
      methodWriter0.visitTryCatchBlock((Label) null, label0, label0, "oCGz9U5C:4b8he&^$");
      assertNotSame(label0, label1);
      assertFalse(label0.equals((Object)label1));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      MethodWriter methodWriter1 = classWriter0.lastMethod;
      assertSame(methodWriter1, methodWriter0);
      assertNotNull(methodWriter1);
      
      // Undeclared exception!
      try { 
        methodWriter1.visitMaxs(220, 220);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.objectweb.asm.jip.MethodWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-24));
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(classWriter0);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "kN,:\u0000)s\"eRJ-%( ";
      stringArray0[1] = "kN,:\u0000)s\"eRJ-%( ";
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, (-24), "kN,:\u0000)s\"eRJ-%( ", "kN,:\u0000)s\"eRJ-%( ", "~o?e", stringArray0, true, true);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(methodWriter0);
      
      AnnotationVisitor annotationVisitor0 = methodWriter0.visitAnnotation("RuntimeInvisibleAnnotatons", true);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(annotationVisitor0);
      
      Label label0 = new Label();
      assertNotNull(label0);
      
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(byteArray0);
      
      methodWriter0.visitTryCatchBlock(label0, label0, label0, "kN,:\u0000)s\"eRJ-%( ");
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      Integer integer0 = new Integer((-1820818954));
      assertEquals((-1820818954), (int)integer0);
      assertNotNull(integer0);
      
      MethodWriter methodWriter1 = classWriter0.lastMethod;
      assertSame(methodWriter1, methodWriter0);
      assertNotNull(methodWriter1);
      
      // Undeclared exception!
      try { 
        methodWriter1.visitMaxs(2, 2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 15
         //
         verifyException("org.objectweb.asm.jip.Type", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-24));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter0);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "kN,:\u0000)s\"eRJ-%( ";
      stringArray0[1] = "kN,:\u0000)s\"eRJ-%( ";
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, (-24), "kN,:\u0000)s\"eRJ-%( ", "kN,:\u0000)s\"eRJ-%( ", "~o?e", stringArray0, true, false);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(methodWriter0);
      
      Object[] objectArray0 = new Object[0];
      methodWriter0.visitFrame(1, (-32768), objectArray0, 1, stringArray0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      Label label0 = new Label();
      assertNotNull(label0);
      
      Label label1 = new Label();
      assertFalse(label1.equals((Object)label0));
      assertNotNull(label1);
      
      MethodWriter methodWriter1 = new MethodWriter(classWriter0, (-1088), "org.objectweb.asm.jip.MethodWriter", "kN,:\u0000)s\"eRJ-%( ", "!h:vxPB.%ygZ", stringArray0, false, false);
      assertFalse(methodWriter1.equals((Object)methodWriter0));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(methodWriter1);
      
      methodWriter1.visitTypeInsn((-24), "kN,:\u0000)s\"eRJ-%( ");
      assertNotSame(methodWriter1, methodWriter0);
      assertFalse(methodWriter1.equals((Object)methodWriter0));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      methodWriter1.visitVarInsn(179, 2);
      assertNotSame(methodWriter1, methodWriter0);
      assertFalse(methodWriter1.equals((Object)methodWriter0));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      methodWriter0.visitFieldInsn(179, "kN,:\u0000)s\"eRJ-%( ", "kN,:\u0000)s\"eRJ-%( ", "org.objectweb.asm.jip.MethodWriter");
      assertNotSame(methodWriter0, methodWriter1);
      assertFalse(methodWriter0.equals((Object)methodWriter1));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      boolean boolean0 = classWriter0.invalidFrames;
      assertFalse(boolean0);
      
      MethodWriter methodWriter2 = classWriter0.firstMethod;
      assertNotSame(methodWriter2, methodWriter1);
      assertSame(methodWriter2, methodWriter0);
      assertFalse(methodWriter2.equals((Object)methodWriter1));
      assertNotNull(methodWriter2);
      
      // Undeclared exception!
      try { 
        methodWriter0.visitLdcInsn((Object) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // value null
         //
         verifyException("org.objectweb.asm.jip.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-15));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter0);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "~o?e";
      stringArray0[1] = "~o?e";
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, (-15), "kN,:\u0000)s\"*eRJ-%( ", "kN,:\u0000)s\"*eRJ-%( ", "~o?e", stringArray0, true, false);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(methodWriter0);
      
      methodWriter0.visitVarInsn(24, 2);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      assertFalse(boolean0);
      
      methodWriter0.visitIntInsn(18, 24);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      // Undeclared exception!
      try { 
        methodWriter0.visitMethodInsn((-15), "~o?e", "kN,:\u0000)s\"*eRJ-%( ", "~o?e");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter0);
      
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 2093, "sC+J@v2s Cw!`K", "I)V}[4K[n]", "I)V}[4K[n]", (String[]) null, false, true);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(methodWriter0);
      
      AnnotationVisitor annotationVisitor0 = methodWriter0.visitAnnotation("brUxy!LFq <t!M/Bp\"", true);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(annotationVisitor0);
      
      Label label0 = new Label();
      assertNotNull(label0);
      
      ByteVector byteVector0 = new ByteVector(0);
      assertNotNull(byteVector0);
      
      MethodWriter methodWriter1 = classWriter0.lastMethod;
      assertSame(methodWriter1, methodWriter0);
      assertNotNull(methodWriter1);
      
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      assertFalse(boolean0);
      
      methodWriter0.visitTryCatchBlock(label0, label0, label0, "jyqS#E](I-oLR> ");
      assertSame(methodWriter0, methodWriter1);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      Integer integer0 = new Integer(1);
      assertEquals(1, (int)integer0);
      assertNotNull(integer0);
      
      MethodWriter methodWriter2 = classWriter0.lastMethod;
      assertSame(methodWriter2, methodWriter1);
      assertSame(methodWriter2, methodWriter0);
      assertNotNull(methodWriter2);
      
      methodWriter1.visitMaxs(2, 1);
      assertSame(methodWriter1, methodWriter0);
      assertSame(methodWriter1, methodWriter2);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      // Undeclared exception!
      try { 
        methodWriter1.visitParameterAnnotation(0, "jyqS#E](I-oLR> ", false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.objectweb.asm.jip.MethodWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(classWriter0);
      
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 1, "sC+J@v2s Cw!`K", "sC+J@v2s Cw!`K", "sC+J@v2s Cw!`K", (String[]) null, false, false);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(methodWriter0);
      
      int int0 = 177;
      methodWriter0.visitMaxs(177, 2);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      AnnotationVisitor annotationVisitor0 = methodWriter0.visitAnnotation("sC+J@v2s Cw!`K", false);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(annotationVisitor0);
      
      MethodWriter methodWriter1 = new MethodWriter(classWriter0, 2093, "sC+J@v2s Cw!`K", "I)V}[4K[n]", "I)V}[4K[n]", (String[]) null, false, true);
      assertFalse(methodWriter1.equals((Object)methodWriter0));
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(methodWriter1);
      
      AnnotationVisitor annotationVisitor1 = methodWriter1.visitAnnotation("brUxy!LFq <t!M/Bp\"", true);
      assertNotSame(methodWriter1, methodWriter0);
      assertNotSame(annotationVisitor1, annotationVisitor0);
      assertFalse(methodWriter1.equals((Object)methodWriter0));
      assertFalse(annotationVisitor1.equals((Object)annotationVisitor0));
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(annotationVisitor1);
      
      Label label0 = new Label();
      assertNotNull(label0);
      
      methodWriter1.visitJumpInsn(177, label0);
      assertNotSame(methodWriter1, methodWriter0);
      assertFalse(methodWriter1.equals((Object)methodWriter0));
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      methodWriter1.visitLineNumber(0, label0);
      assertNotSame(methodWriter1, methodWriter0);
      assertFalse(methodWriter1.equals((Object)methodWriter0));
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      methodWriter1.visitVarInsn(177, 1);
      assertNotSame(methodWriter1, methodWriter0);
      assertFalse(methodWriter1.equals((Object)methodWriter0));
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      MethodWriter methodWriter2 = classWriter0.lastMethod;
      assertSame(methodWriter2, methodWriter1);
      assertNotSame(methodWriter2, methodWriter0);
      assertFalse(methodWriter2.equals((Object)methodWriter0));
      assertNotNull(methodWriter2);
      
      methodWriter2.next = methodWriter0;
      // Undeclared exception!
      try { 
        methodWriter1.visitMaxs(0, 177);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.objectweb.asm.jip.Frame", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      int int0 = (-24);
      ClassWriter classWriter0 = new ClassWriter((-24));
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(classWriter0);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "kN,:\u0000)s\"*eRJ-%( ";
      stringArray0[1] = "kN,:\u0000)s\"*eRJ-%( ";
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, (-24), "kN,:\u0000)s\"*eRJ-%( ", "kN,:\u0000)s\"*eRJ-%( ", "kN,:\u0000)s\"*eRJ-%( ", stringArray0, false, false);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(methodWriter0);
      
      AnnotationVisitor annotationVisitor0 = methodWriter0.visitAnnotation("kN,:\u0000)s\"*eRJ-%( ", false);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(annotationVisitor0);
      
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) classWriter0;
      objectArray0[1] = (Object) "kN,:\u0000)s\"*eRJ-%( ";
      objectArray0[2] = (Object) methodWriter0;
      objectArray0[3] = (Object) annotationVisitor0;
      methodWriter0.next = methodWriter0;
      methodWriter0.visitIincInsn(2, 1);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      // Undeclared exception!
      try { 
        methodWriter0.visitFrame(4, (-24), objectArray0, 68, objectArray0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.objectweb.asm.jip.ClassWriter cannot be cast to org.objectweb.asm.jip.Label
         //
         verifyException("org.objectweb.asm.jip.MethodWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-17));
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(classWriter0);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "kN,:\u0000)s\"eRJ-%( ";
      stringArray0[1] = "kN,:\u0000)s\"eRJ-%( ";
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, (-17), "kN,:\u0000)s\"eRJ-%( ", "kN,:\u0000)s\"eRJ-%( ", "Qo?e", stringArray0, true, false);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(methodWriter0);
      
      Label label0 = new Label();
      assertNotNull(label0);
      
      AnnotationVisitor annotationVisitor0 = methodWriter0.visitAnnotation("Qo?e", true);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(annotationVisitor0);
      
      methodWriter0.visitFieldInsn((-17), "kN,:\u0000)s\"eRJ-%( ", "kN,:\u0000)s\"eRJ-%( ", "J");
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(byteArray0);
      
      methodWriter0.visitIntInsn(191, 24117248);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      methodWriter0.visitInsn(191);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      methodWriter0.visitVarInsn(55, (-424));
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-24));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter0);
      
      String string0 = "kN,:\\0)s\"eRJ-%( ";
      String[] stringArray0 = new String[2];
      stringArray0[0] = "kN,:\u0000)s\"eRJ-%( ";
      stringArray0[1] = "kN,:\u0000)s\"eRJ-%( ";
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, (-24), "kN,:\u0000)s\"eRJ-%( ", "kN,:\u0000)s\"eRJ-%( ", "~o?e", stringArray0, true, false);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(methodWriter0);
      
      Label label0 = new Label();
      assertNotNull(label0);
      
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(byteArray0);
      
      AnnotationVisitor annotationVisitor0 = methodWriter0.visitAnnotation("ls>6J_$P|.", true);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(annotationVisitor0);
      
      methodWriter0.visitFieldInsn(1, "EcGlt]`\"", "kN,:\u0000)s\"eRJ-%( ", "$iz+$*Z");
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      methodWriter0.visitTypeInsn(743, "$iz+$*Z");
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      String string1 = null;
      // Undeclared exception!
      try { 
        methodWriter0.visitMethodInsn(186, (String) null, (String) null, "EcGlt]`\"");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-16));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "kN,:\u0000)s\"eRJ-%( ";
      stringArray0[1] = "kN,:\u0000)s\"eRJ-%( ";
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, (-16), "kN,:\u0000)s\"eRJ-%( ", "kN,:\u0000)s\"eRJ-%( ", "~o?e", stringArray0, true, false);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(methodWriter0);
      
      Label label0 = new Label();
      assertNotNull(label0);
      
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(byteArray0);
      
      classWriter0.index = 3214;
      Integer integer0 = new Integer(16777243);
      assertEquals(16777243, (int)integer0);
      assertNotNull(integer0);
      
      methodWriter0.visitLdcInsn(integer0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      Label[] labelArray0 = new Label[4];
      labelArray0[0] = label0;
      labelArray0[1] = label0;
      labelArray0[2] = label0;
      Label label1 = new Label();
      assertFalse(label1.equals((Object)label0));
      assertNotNull(label1);
      
      labelArray0[3] = label1;
      methodWriter0.visitTableSwitchInsn((-16), (-761), label0, labelArray0);
      assertNotSame(label0, label1);
      assertFalse(label0.equals((Object)label1));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      methodWriter0.visitIincInsn(1, 64);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter0);
      
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 0, " 9@=t<zi\"Sb~s{1'L", " 9@=t<zi\"Sb~s{1'L", " 9@=t<zi\"Sb~s{1'L", (String[]) null, false, false);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(methodWriter0);
      
      int[] intArray0 = new int[11];
      intArray0[9] = 1;
      methodWriter0.visitFrame(3, 3, (Object[]) null, 2, (Object[]) null);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      methodWriter0.visitFieldInsn(3, "AVWHR5o4?.3\"'@/,(r", "i-t", "AVWHR5o4?.3\"'@/,(r");
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      // Undeclared exception!
      try { 
        methodWriter0.visitMethodInsn(185, "AVWHR5o4?.3\"'@/,(r", (String) null, "LocalVariableTable");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-24));
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(classWriter0);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "kN,:\u0000)s\"eRJ-%( ";
      stringArray0[1] = "kN,:\u0000)s\"eRJ-%( ";
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, (-24), "kN,:\u0000)s\"eRJ-%( ", "kN,:\u0000)s\"eRJ-%( ", "~o?e", stringArray0, true, false);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(methodWriter0);
      
      Object[] objectArray0 = new Object[0];
      methodWriter0.visitFrame(1, (-32768), objectArray0, 1, stringArray0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      Label label0 = new Label();
      assertNotNull(label0);
      
      MethodWriter methodWriter1 = new MethodWriter(classWriter0, (-1075), "org.objectweb.asm.jip.MethodWriter", "kN,:\u0000)s\"eRJ-%( ", "!h:vxPB.%yg", stringArray0, false, false);
      assertFalse(methodWriter1.equals((Object)methodWriter0));
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(methodWriter1);
      
      methodWriter1.visitTypeInsn((-24), "kN,:\u0000)s\"eRJ-%( ");
      assertNotSame(methodWriter1, methodWriter0);
      assertFalse(methodWriter1.equals((Object)methodWriter0));
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      methodWriter0.visitIntInsn(2370, (-2048));
      assertNotSame(methodWriter0, methodWriter1);
      assertFalse(methodWriter0.equals((Object)methodWriter1));
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      // Undeclared exception!
      try { 
        methodWriter1.visitFrame((-1), 2982, stringArray0, 851, objectArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.objectweb.asm.jip.MethodWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter0);
      
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 2093, "sC+J@v2s Cw!`K", "I)V}[4K[n]", "I)V}[4K[n]", (String[]) null, false, true);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(methodWriter0);
      
      AnnotationVisitor annotationVisitor0 = methodWriter0.visitAnnotation("brUxy!LFq <t!M/Bp\"", true);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(annotationVisitor0);
      
      Label label0 = new Label();
      assertNotNull(label0);
      
      ByteVector byteVector0 = new ByteVector(0);
      assertNotNull(byteVector0);
      
      MethodWriter methodWriter1 = classWriter0.lastMethod;
      assertSame(methodWriter1, methodWriter0);
      assertNotNull(methodWriter1);
      
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      assertFalse(boolean0);
      
      methodWriter0.visitTryCatchBlock(label0, label0, label0, "jyqS#E](I-oLR> ");
      assertSame(methodWriter0, methodWriter1);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      Integer integer0 = new Integer(1);
      assertEquals(1, (int)integer0);
      assertNotNull(integer0);
      
      MethodWriter methodWriter2 = classWriter0.lastMethod;
      assertSame(methodWriter2, methodWriter1);
      assertSame(methodWriter2, methodWriter0);
      assertNotNull(methodWriter2);
      
      methodWriter2.classReaderOffset = 4;
      methodWriter0.visitFieldInsn(66, "Synthetic", "I)V}[4K[n]", "brUxy!LFq <t!M/Bp\"");
      assertSame(methodWriter0, methodWriter2);
      assertSame(methodWriter0, methodWriter1);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      methodWriter1.visitMaxs(2, 1);
      assertSame(methodWriter1, methodWriter2);
      assertSame(methodWriter1, methodWriter0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      // Undeclared exception!
      try { 
        methodWriter1.visitParameterAnnotation(0, "jyqS#E](I-oLR> ", false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.objectweb.asm.jip.MethodWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter0);
      
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, 2093, "sC+J@v2s Cw!`K", "I)V}[4K[n]", "I)V}[4K[n]", (String[]) null, false, true);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(methodWriter0);
      
      AnnotationVisitor annotationVisitor0 = methodWriter0.visitAnnotation("brUxy!LFq <t!M/Bp\"", true);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(annotationVisitor0);
      
      Label label0 = new Label();
      assertNotNull(label0);
      
      ByteVector byteVector0 = new ByteVector(0);
      assertNotNull(byteVector0);
      
      AnnotationVisitor annotationVisitor1 = methodWriter0.visitAnnotation("P<)a1DW>zepMt4q", false);
      assertNotSame(annotationVisitor1, annotationVisitor0);
      assertFalse(annotationVisitor1.equals((Object)annotationVisitor0));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(annotationVisitor1);
      
      Label label1 = new Label();
      assertFalse(label1.equals((Object)label0));
      assertNotNull(label1);
      
      methodWriter0.visitTryCatchBlock(label1, label0, label0, "org.objectweb.asm.jip.MethodWriter");
      assertNotSame(label0, label1);
      assertNotSame(label1, label0);
      assertFalse(label0.equals((Object)label1));
      assertFalse(label1.equals((Object)label0));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      Integer integer0 = new Integer(2);
      assertEquals(2, (int)integer0);
      assertNotNull(integer0);
      
      MethodWriter methodWriter1 = classWriter0.lastMethod;
      assertSame(methodWriter1, methodWriter0);
      assertNotNull(methodWriter1);
      
      // Undeclared exception!
      try { 
        methodWriter0.visitMaxs((-709), 2093);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.objectweb.asm.jip.MethodWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      int int0 = (-24);
      ClassWriter classWriter0 = new ClassWriter((-24));
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(classWriter0);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "kN,:\u0000)s\"eRJ-%( ";
      stringArray0[1] = "kN,:\u0000)s\"eRJ-%( ";
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, (-24), "kN,:\u0000)s\"eRJ-%( ", "kN,:\u0000)s\"eRJ-%( ", "kN,:\u0000)s\"eRJ-%( ", stringArray0, true, false);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(methodWriter0);
      
      Label label0 = new Label();
      assertNotNull(label0);
      
      Label label1 = label0.getFirst();
      assertSame(label0, label1);
      assertSame(label1, label0);
      assertNotNull(label1);
      
      methodWriter0.visitTryCatchBlock(label0, label0, label1, "\b-Q-w?xfY3uP ");
      assertSame(label0, label1);
      assertSame(label1, label0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      int int1 = 5;
      Integer integer0 = new Integer(5);
      assertEquals(5, (int)integer0);
      assertFalse(integer0.equals((Object)int0));
      assertTrue(integer0.equals((Object)int1));
      assertNotNull(integer0);
      
      MethodWriter methodWriter1 = classWriter0.lastMethod;
      assertSame(methodWriter1, methodWriter0);
      assertNotNull(methodWriter1);
      
      Label[] labelArray0 = new Label[2];
      labelArray0[0] = label1;
      labelArray0[1] = label0;
      methodWriter1.visitTableSwitchInsn(2, 25165824, label1, labelArray0);
      assertSame(label0, label1);
      assertSame(label1, label0);
      assertSame(methodWriter1, methodWriter0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      int int2 = (-484);
      methodWriter1.visitMaxs((-484), 2);
      assertSame(methodWriter1, methodWriter0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      int int3 = (-35);
      // Undeclared exception!
      try { 
        methodWriter0.visitParameterAnnotation((-35), " 9=t<zi\"Sb~s{1'L", true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 15
         //
         verifyException("org.objectweb.asm.jip.Type", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-3));
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(classWriter0);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "kN,:\u0000)s\"eRJ-%( ";
      stringArray0[1] = "kN,:\u0000)s\"eRJ-%( ";
      MethodWriter methodWriter0 = new MethodWriter(classWriter0, (-3), "kN,:\u0000)s\"eRJ-%( ", "kN,:\u0000)s\"eRJ-%( ", "Qo?e", stringArray0, true, false);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(methodWriter0);
      
      Label label0 = new Label();
      assertNotNull(label0);
      
      AnnotationVisitor annotationVisitor0 = methodWriter0.visitAnnotation("Qo?e", true);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(annotationVisitor0);
      
      MethodWriter methodWriter1 = classWriter0.lastMethod;
      assertSame(methodWriter1, methodWriter0);
      assertNotNull(methodWriter1);
      
      Integer integer0 = new Integer((-885));
      assertEquals((-885), (int)integer0);
      assertNotNull(integer0);
      
      methodWriter1.visitLocalVariable(")", ")", "JqJDw(>^K{cw", label0, label0, 2);
      assertSame(methodWriter1, methodWriter0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      methodWriter0.visitLdcInsn("Y_6:K_|0e]hfhB=-");
      assertSame(methodWriter0, methodWriter1);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      int int0 = methodWriter1.getSize();
      assertEquals(108, int0);
      assertSame(methodWriter1, methodWriter0);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
  }
}
