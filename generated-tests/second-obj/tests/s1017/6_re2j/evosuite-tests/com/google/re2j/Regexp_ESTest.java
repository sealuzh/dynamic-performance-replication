/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 04:34:13 GMT 2018
 */

package com.google.re2j;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.re2j.Regexp;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Regexp_ESTest extends Regexp_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.ANY_CHAR_NOT_NL;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexp0.reinit();
      String string0 = regexp0.toString();
      assertEquals("(?-s:.)", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.LITERAL;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp_Op0);
      regexp0.equals(regexp1);
      regexp0.reinit();
      // Undeclared exception!
      try { 
        Regexp.Op.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant com.google.re2j.Regexp.Op.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.NO_WORD_BOUNDARY;
      Regexp regexp0 = new Regexp(regexp_Op0);
      boolean boolean0 = regexp0.equals(regexp0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.NO_MATCH;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp0);
      String string0 = regexp0.toString();
      assertEquals("[^\\x00-\\x{10FFFF}]", string0);
      assertTrue(regexp0.equals((Object)regexp1));
      
      regexp1.name = "[^x00-x{10FFFF}]";
      regexp1.op = regexp_Op0;
      Regexp[] regexpArray0 = new Regexp[1];
      regexpArray0[0] = regexp0;
      regexp1.subs = regexpArray0;
      int int0 = regexp1.maxCap();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.END_LINE;
      Regexp regexp0 = new Regexp(regexp_Op0);
      String string0 = regexp0.toString();
      assertEquals("$", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.NO_WORD_BOUNDARY;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexp0.toString();
      int int0 = regexp0.maxCap();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.BEGIN_LINE;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexp0.max = 2352;
      regexp0.toString();
      int int0 = regexp0.maxCap();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.BEGIN_TEXT;
      Regexp regexp0 = new Regexp(regexp_Op0);
      String string0 = regexp0.toString();
      assertEquals("\\A", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Regexp.Op.values();
      Regexp.Op regexp_Op0 = Regexp.Op.NO_MATCH;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexp0.flags = 422;
      Regexp regexp1 = new Regexp(regexp0);
      regexp0.equals(regexp0);
      // Undeclared exception!
      try { 
        Regexp.Op.valueOf("Vai");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant com.google.re2j.Regexp.Op.Vai
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.WORD_BOUNDARY;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexp0.toString();
      int int0 = regexp0.maxCap();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.LITERAL;
      Regexp regexp0 = new Regexp(regexp_Op0);
      int[] intArray0 = new int[4];
      intArray0[3] = 40;
      regexp0.cap = 1100;
      intArray0[3] = (-9);
      regexp0.runes = intArray0;
      regexp0.toString();
      int int0 = regexp0.maxCap();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.BEGIN_TEXT;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp0);
      regexp0.equals(regexp1);
      // Undeclared exception!
      try { 
        Regexp.Op.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant com.google.re2j.Regexp.Op.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.VERTICAL_BAR;
      boolean boolean0 = regexp_Op0.isPseudo();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.ANY_CHAR_NOT_NL;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp_Op0);
      String string0 = regexp1.name;
      Regexp regexp2 = new Regexp(regexp_Op0);
      boolean boolean0 = regexp2.equals(regexp0);
      assertTrue(boolean0);
      
      int int0 = regexp1.maxCap();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.LITERAL;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp0);
      Regexp.Op regexp_Op1 = Regexp.Op.REPEAT;
      regexp1.op = regexp_Op1;
      regexp1.op = regexp_Op0;
      Regexp[] regexpArray0 = new Regexp[1];
      regexpArray0[0] = regexp0;
      Regexp.Op regexp_Op2 = Regexp.Op.REPEAT;
      regexp1.op = regexp_Op2;
      regexp1.subs = regexpArray0;
      // Undeclared exception!
      try { 
        regexp1.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Regexp", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.EMPTY_MATCH;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp0);
      Regexp.Op regexp_Op1 = Regexp.Op.REPEAT;
      String string0 = regexp1.name;
      regexp1.reinit();
      assertTrue(regexp1.equals((Object)regexp0));
      
      regexp1.name = "p]EI";
      regexp1.op = regexp_Op1;
      Regexp[] regexpArray0 = new Regexp[1];
      regexpArray0[0] = regexp0;
      regexp1.subs = regexpArray0;
      int int0 = regexp1.cap;
      regexp1.toString();
      int int1 = regexp0.maxCap();
      assertEquals(0, int1);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.CHAR_CLASS;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp_Op0);
      String string0 = regexp0.name;
      Regexp regexp2 = new Regexp(regexp1);
      boolean boolean0 = regexp2.equals(regexp0);
      boolean boolean1 = regexp_Op0.isPseudo();
      assertFalse(boolean1 == boolean0);
      
      int int0 = regexp1.maxCap();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.CHAR_CLASS;
      Regexp regexp0 = new Regexp(regexp_Op0);
      int[] intArray0 = new int[4];
      regexp0.runes = intArray0;
      intArray0[2] = 47;
      Regexp regexp1 = new Regexp(regexp_Op0);
      String string0 = regexp0.name;
      Regexp regexp2 = new Regexp(regexp1);
      boolean boolean0 = regexp2.equals(regexp0);
      boolean boolean1 = regexp_Op0.isPseudo();
      assertTrue(boolean1 == boolean0);
      
      int int0 = regexp1.maxCap();
      assertTrue(regexp1.equals((Object)regexp2));
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.PLUS;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp.Op regexp_Op1 = Regexp.Op.VERTICAL_BAR;
      regexp0.op = regexp_Op1;
      regexp_Op0.isPseudo();
      regexp0.equals(regexp0);
      Regexp.Op[] regexp_OpArray0 = Regexp.Op.values();
      assertNotNull(regexp_OpArray0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.CHAR_CLASS;
      Regexp regexp0 = new Regexp(regexp_Op0);
      int[] intArray0 = new int[3];
      intArray0[0] = 1169;
      intArray0[1] = 1169;
      regexp0.runes = intArray0;
      regexp0.flags = 1169;
      regexp0.min = 1169;
      regexp0.toString();
      regexp0.equals(regexp_Op0);
      Regexp.Op.values();
      Regexp[] regexpArray0 = new Regexp[3];
      regexpArray0[0] = regexp0;
      // Undeclared exception!
      try { 
        Regexp.Op.valueOf("[invalid char class]");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant com.google.re2j.Regexp.Op.[invalid char class]
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.STAR;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexp0.reinit();
      // Undeclared exception!
      try { 
        regexp0.equals(regexp0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.CAPTURE;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp0);
      regexp1.reinit();
      regexp0.maxCap();
      regexp0.name = "Zs";
      regexp0.flags = 0;
      String string0 = "d-$\\\\K>w";
      // Undeclared exception!
      try { 
        regexp0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Regexp", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.END_LINE;
      Regexp regexp0 = new Regexp(regexp_Op0);
      String string0 = regexp0.name;
      boolean boolean0 = regexp0.equals(regexp0);
      assertTrue(boolean0);
      
      boolean boolean1 = regexp0.equals(regexp_Op0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.WORD_BOUNDARY;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp.Op.values();
      regexp0.reinit();
      boolean boolean0 = regexp0.equals(regexp0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.BEGIN_LINE;
      Regexp regexp0 = new Regexp(regexp_Op0);
      String string0 = regexp0.name;
      Regexp regexp1 = new Regexp(regexp0);
      boolean boolean0 = regexp1.equals(regexp1);
      assertTrue(regexp1.equals((Object)regexp0));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.CHAR_CLASS;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp.Op regexp_Op1 = Regexp.Op.ALTERNATE;
      regexp0.op = regexp_Op1;
      regexp0.reinit();
      boolean boolean0 = regexp0.equals(regexp0);
      Regexp.Op regexp_Op2 = Regexp.Op.NO_MATCH;
      boolean boolean1 = regexp_Op0.isPseudo();
      assertFalse(boolean1 == boolean0);
      
      boolean boolean2 = regexp_Op2.isPseudo();
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.CHAR_CLASS;
      Regexp regexp0 = new Regexp(regexp_Op0);
      int[] intArray0 = new int[2];
      intArray0[0] = 1169;
      intArray0[1] = 1169;
      regexp0.runes = intArray0;
      regexp0.flags = 1169;
      regexp0.toString();
      regexp0.equals(regexp_Op0);
      Regexp.Op.values();
      regexp_Op0.isPseudo();
      // Undeclared exception!
      try { 
        Regexp.Op.valueOf("[\u0491]");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant com.google.re2j.Regexp.Op.[\u0491]
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.CHAR_CLASS;
      Regexp regexp0 = new Regexp(regexp_Op0);
      int[] intArray0 = new int[2];
      intArray0[0] = 1169;
      regexp0.runes = intArray0;
      Object object0 = new Object();
      String string0 = regexp0.toString();
      assertEquals("[\u0491-\\x00]", string0);
      
      Regexp regexp1 = new Regexp(regexp0);
      boolean boolean0 = regexp1.equals(",*NG\"r'N~;");
      assertFalse(boolean0);
      
      int int0 = regexp1.maxCap();
      assertEquals(0, int0);
      assertTrue(regexp1.equals((Object)regexp0));
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.ANY_CHAR;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp0);
      regexp0.equals(regexp_Op0);
      regexp0.equals(regexp1);
      regexp0.reinit();
      regexp1.toString();
      regexp_Op0.isPseudo();
      // Undeclared exception!
      try { 
        Regexp.Op.valueOf("com.google.re2j.Regexp$Op");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant com.google.re2j.Regexp.Op.com.google.re2j.Regexp$Op
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.EMPTY_MATCH;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp0);
      Regexp.Op regexp_Op1 = Regexp.Op.CONCAT;
      String string0 = regexp0.name;
      regexp1.op = regexp_Op1;
      Regexp[] regexpArray0 = new Regexp[1];
      regexpArray0[0] = regexp0;
      regexp1.subs = regexpArray0;
      int int0 = regexp0.cap;
      String string1 = regexp0.name;
      regexp1.toString();
      // Undeclared exception!
      try { 
        Regexp.Op.valueOf("Oj @ig");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant com.google.re2j.Regexp.Op.Oj @ig
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.CAPTURE;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexp0.name = "";
      // Undeclared exception!
      try { 
        regexp0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Regexp", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.CAPTURE;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp.Op.values();
      Regexp regexp1 = new Regexp(regexp0);
      regexp1.reinit();
      regexp1.name = "z";
      regexp0.equals(regexp1);
      int int0 = regexp1.maxCap();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.CONCAT;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp[] regexpArray0 = new Regexp[8];
      regexpArray0[1] = regexp0;
      regexpArray0[1] = regexp0;
      regexpArray0[3] = regexp0;
      regexpArray0[4] = regexp0;
      regexpArray0[5] = regexp0;
      regexpArray0[4] = regexp0;
      regexpArray0[7] = regexp0;
      regexp0.subs = regexpArray0;
      // Undeclared exception!
      try { 
        regexp0.equals(regexp0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.EMPTY_MATCH;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp0);
      regexp1.op = regexp_Op0;
      regexp1.op = regexp_Op0;
      Regexp[] regexpArray0 = new Regexp[1];
      regexpArray0[0] = regexp0;
      Regexp.Op regexp_Op1 = Regexp.Op.REPEAT;
      regexp1.op = regexp_Op1;
      regexp1.subs = regexpArray0;
      regexp1.toString();
      regexp1.equals(regexp1);
      // Undeclared exception!
      try { 
        Regexp.Op.valueOf("(?:){0}");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant com.google.re2j.Regexp.Op.(?:){0}
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.NO_MATCH;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp_Op0);
      Regexp.Op regexp_Op1 = Regexp.Op.ALTERNATE;
      regexp1.reinit();
      regexp1.op = regexp_Op1;
      regexp1.min = 1546;
      Regexp[] regexpArray0 = new Regexp[12];
      regexpArray0[0] = regexp0;
      regexp1.subs = regexpArray0;
      regexp0.toString();
      regexp1.min = (-8);
      // Undeclared exception!
      try { 
        regexp1.equals(regexp1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.EMPTY_MATCH;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp_Op0);
      Regexp.Op regexp_Op1 = Regexp.Op.REPEAT;
      regexp1.reinit();
      regexp1.op = regexp_Op1;
      regexp1.min = 1546;
      Regexp[] regexpArray0 = new Regexp[12];
      regexpArray0[0] = regexp0;
      regexp1.subs = regexpArray0;
      regexp1.toString();
      regexp1.min = 10;
      Regexp regexp2 = new Regexp(regexp1);
      regexp0.max = 1546;
      regexp2.min = 569;
      regexp1.equals(regexp2);
      // Undeclared exception!
      try { 
        Regexp.Op.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant com.google.re2j.Regexp.Op.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.EMPTY_MATCH;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp0);
      Regexp.Op regexp_Op1 = Regexp.Op.ALTERNATE;
      int[] intArray0 = new int[11];
      intArray0[0] = 15;
      intArray0[1] = 1169;
      regexp0.cap = 15;
      intArray0[5] = 1596;
      regexp0.toString();
      regexp1.op = regexp_Op1;
      Regexp[] regexpArray0 = new Regexp[1];
      regexpArray0[0] = regexp0;
      regexp1.subs = regexpArray0;
      regexp1.toString();
      String string0 = regexp0.name;
      Object object0 = new Object();
      Object object1 = new Object();
      Regexp.Op[] regexp_OpArray0 = Regexp.Op.values();
      assertNotNull(regexp_OpArray0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.CAPTURE;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexp0.cap = 1100;
      Regexp regexp1 = new Regexp(regexp0);
      regexp1.reinit();
      regexp1.name = "z";
      regexp0.equals(regexp1);
      int int0 = regexp1.maxCap();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.ALTERNATE;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexp0.equals(regexp_Op0);
      regexp0.reinit();
      regexp0.op = regexp_Op0;
      regexp0.maxCap();
      regexp0.cap = 0;
      regexp0.maxCap();
      Regexp.Op.values();
      regexp_Op0.isPseudo();
      regexp0.max = 0;
      regexp0.toString();
      Regexp.Op.values();
      Regexp.Op.values();
      regexp0.maxCap();
      regexp0.toString();
      Regexp.Op.values();
      Regexp regexp1 = new Regexp(regexp0);
      assertTrue(regexp1.equals((Object)regexp0));
      
      Regexp[] regexpArray0 = new Regexp[1];
      regexpArray0[0] = regexp0;
      regexp1.subs = regexpArray0;
      regexp0.equals(regexp1);
      regexp1.toString();
      assertFalse(regexp1.equals((Object)regexp0));
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.STAR;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Object object0 = new Object();
      regexp0.equals(object0);
      Regexp.Op.values();
      Regexp regexp1 = new Regexp(regexp_Op0);
      regexp1.flags = 32;
      regexp0.min = 32;
      regexp0.equals(regexp1);
      String string0 = "Osmanya";
      // Undeclared exception!
      try { 
        Regexp.Op.valueOf("Osmanya");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant com.google.re2j.Regexp.Op.Osmanya
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.EMPTY_MATCH;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp0);
      assertTrue(regexp1.equals((Object)regexp0));
      
      Regexp.Op regexp_Op1 = Regexp.Op.CAPTURE;
      regexp1.op = regexp_Op1;
      Regexp[] regexpArray0 = new Regexp[7];
      regexp1.subs = regexpArray0;
      regexpArray0[0] = regexp0;
      regexp1.subs = regexpArray0;
      regexp0.op = regexp_Op0;
      regexp1.toString();
      regexp1.equals(regexp1);
      String string0 = regexp0.name;
      Object object0 = new Object();
      Regexp.Op.values();
      Regexp.Op.values();
      int int0 = regexp0.max;
      regexp1.op.isPseudo();
      assertFalse(regexp0.equals((Object)regexp1));
      
      boolean boolean0 = regexp_Op0.isPseudo();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.CAPTURE;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexp0.reinit();
      Regexp regexp1 = new Regexp(regexp0);
      Regexp regexp2 = new Regexp(regexp_Op0);
      Regexp[] regexpArray0 = new Regexp[1];
      regexpArray0[0] = regexp1;
      regexp2.subs = regexpArray0;
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        regexp2.toString();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.google.re2j.Regexp", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.NO_MATCH;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp0);
      Regexp.Op regexp_Op1 = Regexp.Op.QUEST;
      regexp1.reinit();
      regexp1.op = regexp_Op1;
      regexp1.min = 1546;
      Regexp[] regexpArray0 = new Regexp[12];
      regexpArray0[0] = regexp0;
      regexp1.subs = regexpArray0;
      regexp1.toString();
      regexp1.equals(regexp0);
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        Regexp.Op.valueOf("[^x00-x{10FFFF}]?");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant com.google.re2j.Regexp.Op.[^x00-x{10FFFF}]?
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.EMPTY_MATCH;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp0);
      Regexp.Op regexp_Op1 = Regexp.Op.PLUS;
      int[] intArray0 = new int[1];
      regexp1.runes = intArray0;
      regexp1.op = regexp_Op1;
      Regexp[] regexpArray0 = new Regexp[1];
      regexpArray0[0] = regexp0;
      regexp1.subs = regexpArray0;
      regexp1.toString();
      regexp1.equals(regexp1);
      // Undeclared exception!
      try { 
        Regexp.Op.valueOf("(?:)+");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant com.google.re2j.Regexp.Op.(?:)+
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.LITERAL;
      Regexp regexp0 = new Regexp(regexp_Op0);
      int[] intArray0 = new int[2];
      regexp0.runes = intArray0;
      regexp_Op0.isPseudo();
      regexp0.toString();
      Regexp regexp1 = new Regexp(regexp0);
      String string0 = regexp0.name;
      Object object0 = new Object();
      regexp0.equals(object0);
      Regexp.Op.values();
      Object object1 = new Object();
      Regexp.Op regexp_Op1 = Regexp.Op.QUEST;
      Regexp regexp2 = new Regexp(regexp_Op1);
      Regexp[] regexpArray0 = new Regexp[2];
      regexpArray0[0] = regexp1;
      Regexp[] regexpArray1 = new Regexp[5];
      regexpArray1[0] = regexp2;
      regexpArray1[1] = regexp0;
      regexpArray1[2] = regexp1;
      regexpArray1[4] = regexp0;
      Regexp.Op regexp_Op2 = Regexp.Op.STAR;
      regexpArray1[0].op = regexp_Op2;
      regexp2.subs = regexpArray0;
      regexp2.toString();
      Object object2 = new Object();
      // Undeclared exception!
      try { 
        Regexp.Op.valueOf((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Name is null
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.EMPTY_MATCH;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp_Op0);
      Regexp.Op regexp_Op1 = Regexp.Op.STAR;
      regexp0.toString();
      regexp1.op = regexp_Op1;
      Regexp[] regexpArray0 = new Regexp[1];
      regexpArray0[0] = regexp0;
      regexp1.subs = regexpArray0;
      regexp0.op = regexp_Op0;
      regexpArray0[0].min = (-1386);
      regexp1.toString();
      regexp1.equals(regexp1);
      regexp0.toString();
      Object object0 = new Object();
      Regexp.Op.values();
      Regexp.Op.values();
      int int0 = regexp0.maxCap();
      assertFalse(regexp0.equals((Object)regexp1));
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.EMPTY_MATCH;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp_Op0);
      regexp0.toString();
      Regexp.Op regexp_Op1 = Regexp.Op.QUEST;
      regexp1.reinit();
      regexp1.op = regexp_Op1;
      Regexp[] regexpArray0 = new Regexp[4];
      regexpArray0[0] = regexp0;
      regexp1.subs = regexpArray0;
      Regexp regexp2 = new Regexp(regexp1);
      regexp1.equals(regexp2);
      // Undeclared exception!
      try { 
        regexp2.maxCap();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Regexp", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.END_TEXT;
      Regexp regexp0 = new Regexp(regexp_Op0);
      String string0 = regexp0.name;
      Regexp.Op regexp_Op1 = Regexp.Op.NO_WORD_BOUNDARY;
      regexp_Op1.isPseudo();
      regexp0.flags = (-138);
      regexp0.equals(regexp0);
      Regexp.Op regexp_Op2 = Regexp.Op.END_TEXT;
      Regexp regexp1 = new Regexp(regexp_Op2);
      regexp1.toString();
      regexp0.equals((Object) null);
      regexp1.equals("z");
      Regexp[] regexpArray0 = new Regexp[7];
      regexpArray0[0] = regexp1;
      regexpArray0[1] = regexp1;
      regexpArray0[2] = regexp1;
      regexpArray0[3] = regexp0;
      regexpArray0[4] = regexp1;
      regexpArray0[5] = regexp1;
      regexpArray0[6] = regexp0;
      regexp0.subs = regexpArray0;
      regexp0.max = 329;
      regexp0.equals("\\");
      regexp0.toString();
      // Undeclared exception!
      try { 
        Regexp.Op.valueOf((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Name is null
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.LITERAL;
      Regexp regexp0 = new Regexp(regexp_Op0);
      int[] intArray0 = new int[1];
      regexp0.runes = intArray0;
      int int0 = regexp0.min;
      Object object0 = new Object();
      regexp0.equals(object0);
      Regexp.Op regexp_Op1 = Regexp.Op.NO_WORD_BOUNDARY;
      Regexp regexp1 = new Regexp(regexp_Op1);
      Regexp[] regexpArray0 = new Regexp[2];
      regexpArray0[0] = regexp0;
      Regexp[] regexpArray1 = new Regexp[5];
      regexpArray1[0] = regexp1;
      regexpArray1[2] = regexp0;
      regexpArray1[4] = regexp0;
      Regexp.Op regexp_Op2 = Regexp.Op.STAR;
      regexpArray0[0].cap = 0;
      regexpArray1[0].op = regexp_Op2;
      regexp1.subs = regexpArray0;
      regexp1.toString();
      Object object1 = new Object();
      regexp0.reinit();
      Regexp.Op.values();
      Regexp.Op regexp_Op3 = Regexp.Op.BEGIN_TEXT;
      Regexp regexp2 = new Regexp(regexp_Op3);
      regexp0.equals(regexp2);
      // Undeclared exception!
      try { 
        Regexp.Op.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant com.google.re2j.Regexp.Op.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.EMPTY_MATCH;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp_Op0);
      Regexp.Op regexp_Op1 = Regexp.Op.END_TEXT;
      regexp1.toString();
      regexp1.op = regexp_Op1;
      Regexp[] regexpArray0 = new Regexp[1];
      regexpArray0[0] = regexp0;
      regexp1.subs = regexpArray0;
      String string0 = regexp0.name;
      regexp1.toString();
      Regexp regexp2 = new Regexp(regexp_Op1);
      regexp2.subs = regexp1.subs;
      regexp1.equals(regexp2);
      Regexp regexp3 = new Regexp(regexp1.op);
      Object object0 = new Object();
      Object object1 = new Object();
      regexp2.flags = 2923;
      Regexp regexp4 = new Regexp(regexp1.op);
      regexp0.maxCap();
      Regexp.Op.values();
      Regexp regexp5 = new Regexp(regexp0);
      Object object2 = new Object();
      Regexp regexp6 = new Regexp(regexp2);
      Regexp regexp7 = new Regexp(regexp4);
      regexp2.equals(regexp7);
      regexp3.reinit();
      // Undeclared exception!
      try { 
        Regexp.Op.valueOf((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Name is null
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.PLUS;
      Regexp.Op regexp_Op1 = Regexp.Op.REPEAT;
      Object object0 = new Object();
      Regexp regexp0 = new Regexp(regexp_Op1);
      Regexp regexp1 = new Regexp(regexp0);
      regexp1.max = (-1017);
      Regexp regexp2 = new Regexp(regexp0);
      regexp1.equals(regexp2);
      regexp1.equals(regexp_Op0);
      regexp0.equals(regexp1);
      Regexp.Op regexp_Op2 = Regexp.Op.PLUS;
      Regexp regexp3 = new Regexp(regexp_Op2);
      int[] intArray0 = new int[4];
      intArray0[0] = (-1017);
      intArray0[1] = (-1017);
      intArray0[2] = (-1017);
      intArray0[3] = (-1170);
      regexp3.runes = intArray0;
      Regexp.Op regexp_Op3 = Regexp.Op.EMPTY_MATCH;
      Regexp regexp4 = new Regexp(regexp_Op3);
      // Undeclared exception!
      try { 
        regexp0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Regexp", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.EMPTY_MATCH;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp_Op0);
      Regexp.Op regexp_Op1 = Regexp.Op.REPEAT;
      regexp1.reinit();
      regexp1.op = regexp_Op1;
      regexp1.min = 1546;
      Regexp[] regexpArray0 = new Regexp[5];
      regexpArray0[0] = regexp0;
      regexp1.subs = regexpArray0;
      regexp1.toString();
      Regexp regexp2 = new Regexp(regexp0);
      regexp0.toString();
      Regexp regexp3 = new Regexp(regexp_Op0);
      regexp0.maxCap();
      Regexp regexp4 = new Regexp(regexp2);
      regexp0.reinit();
      Regexp regexp5 = new Regexp(regexp_Op0);
      regexp1.max = (-1935);
      Object object0 = new Object();
      Object object1 = new Object();
      Regexp.Op regexp_Op2 = Regexp.Op.BEGIN_LINE;
      Regexp regexp6 = new Regexp(regexp_Op2);
      Regexp regexp7 = new Regexp(regexp4);
      Object object2 = new Object();
      Regexp.Op regexp_Op3 = Regexp.Op.END_TEXT;
      Regexp regexp8 = new Regexp(regexp_Op2);
      Object object3 = new Object();
      Regexp regexp9 = new Regexp(regexp7);
      Regexp regexp10 = new Regexp(regexp_Op3);
      Regexp regexp11 = new Regexp(regexp7);
      int int0 = regexp7.flags;
      Regexp regexp12 = new Regexp(regexp3);
      regexp1.toString();
      Regexp.Op.values();
      regexp9.reinit();
      assertNotSame(regexp9, regexp0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.CHAR_CLASS;
      Regexp regexp0 = new Regexp(regexp_Op0);
      int[] intArray0 = new int[4];
      regexp0.runes = intArray0;
      intArray0[3] = 45;
      regexp0.runes = intArray0;
      Object object0 = new Object();
      Regexp.Op regexp_Op1 = Regexp.Op.CHAR_CLASS;
      regexp_Op1.isPseudo();
      regexp0.toString();
      Regexp regexp1 = new Regexp(regexp_Op0);
      Regexp regexp2 = new Regexp(regexp1);
      Regexp regexp3 = new Regexp(regexp1);
      regexp0.maxCap();
      Regexp regexp4 = new Regexp(regexp0);
      regexp1.cap = 123;
      regexp4.reinit();
      // Undeclared exception!
      try { 
        Regexp.Op.valueOf("[x00x00--]");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant com.google.re2j.Regexp.Op.[x00x00--]
         //
         verifyException("java.lang.Enum", e);
      }
  }
}
