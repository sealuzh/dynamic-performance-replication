/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 09:20:20 GMT 2018
 */

package org.la4j.vector.sparse;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.text.DecimalFormat;
import java.text.NumberFormat;
import java.util.Collection;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.Random;
import java.util.function.BiFunction;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;
import org.la4j.Vector;
import org.la4j.iterator.VectorIterator;
import org.la4j.operation.ooplace.OoPlaceVectorsSubtraction;
import org.la4j.vector.SparseVector;
import org.la4j.vector.VectorFactory;
import org.la4j.vector.functor.VectorAccumulator;
import org.la4j.vector.functor.VectorFunction;
import org.la4j.vector.functor.VectorProcedure;
import org.la4j.vector.sparse.CompressedVector;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CompressedVector_ESTest extends CompressedVector_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector();
      VectorIterator vectorIterator0 = compressedVector0.nonZeroIterator();
      assertNotNull(vectorIterator0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector();
      // Undeclared exception!
      try { 
        compressedVector0.blankOfLength((-861));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong vector length: -861
         //
         verifyException("org.la4j.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector();
      DecimalFormat decimalFormat0 = new DecimalFormat();
      String string0 = compressedVector0.toCSV((NumberFormat) decimalFormat0);
      assertEquals("", string0);
      
      byte[] byteArray0 = compressedVector0.toBinary();
      assertArrayEquals(new byte[] {(byte)16, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.fromCSV("");
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector();
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)3).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      // Undeclared exception!
      try { 
        compressedVector0.updateAt(3, vectorFunction0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // This vector can't grow up.
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector();
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.updateAt(3, vectorFunction0);
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(2, 2);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(2316.368989).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.updateAt(2, vectorFunction0);
      assertEquals(0.5, compressedVector0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector();
      compressedVector0.setAll(0.0);
      assertEquals(0, compressedVector0.cardinality());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector();
      boolean boolean0 = compressedVector0.nonZeroAt(1514);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      compressedVector0.iterator();
      assertEquals(0, compressedVector0.length());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-1111462.11500125);
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      compressedVector0.eachNonZero(vectorProcedure0);
      assertEquals(1.0, compressedVector0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector();
      compressedVector0.swapElements(1, 1);
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-1712.8209569157736);
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[6] = (double) 0;
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      // Undeclared exception!
      try { 
        compressedVector0.toCSV((NumberFormat) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 153;
      intArray0[1] = 153;
      intArray0[2] = 153;
      intArray0[3] = 153;
      CompressedVector compressedVector0 = new CompressedVector(153, 153, (double[]) null, intArray0);
      // Undeclared exception!
      try { 
        compressedVector0.update((VectorFunction) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      int int0 = 1220;
      CompressedVector compressedVector0 = new CompressedVector(1220, 1220);
      // Undeclared exception!
      try { 
        compressedVector0.mkString((NumberFormat) null, "XA'");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      try { 
        CompressedVector.random(1255, (-1.0), (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The density value should be between 0 and 1.0
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      HashMap<Integer, Byte> hashMap0 = new HashMap<Integer, Byte>();
      CompressedVector compressedVector0 = CompressedVector.fromMap(hashMap0, 0);
      // Undeclared exception!
      try { 
        compressedVector0.swapElements(Integer.MAX_VALUE, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      int int0 = 23;
      int int1 = (-13);
      CompressedVector compressedVector0 = null;
      try {
        compressedVector0 = new CompressedVector(23, (-13));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cardinality should be positive: -13.
         //
         verifyException("org.la4j.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[1] = 0.0;
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      HashMap<Integer, Short> hashMap0 = new HashMap<Integer, Short>();
      CompressedVector compressedVector1 = CompressedVector.fromMap(hashMap0, 1009);
      assertEquals(0.0, compressedVector1.density(), 0.01);
      
      compressedVector1.getOrElse(9, 0.0);
      assertEquals(1009, compressedVector1.length());
      
      compressedVector0.eachNonZero((VectorProcedure) null);
      assertEquals(2, compressedVector0.length());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(2);
      compressedVector0.setAll(Double.POSITIVE_INFINITY);
      compressedVector0.toCSV();
      // Undeclared exception!
      try { 
        compressedVector0.swapElements(0, 2146155581);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = Double.NEGATIVE_INFINITY;
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      boolean boolean0 = compressedVector0.nonZeroAt(2117237399);
      assertFalse(boolean0);
      assertEquals(1.0, compressedVector0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector();
      compressedVector0.setAll((-4785.317428));
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(824);
      compressedVector0.toBinary();
      compressedVector0.setAll(15.633867918524889);
      assertEquals(824, compressedVector0.cardinality());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(1);
      compressedVector0.setAll(1);
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      assertEquals(0, linkedList0.size());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      // Undeclared exception!
      try { 
        CompressedVector.fromBinary(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can not decode CompressedVector from the given byte array.
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      CompressedVector compressedVector0 = CompressedVector.fromCollection(linkedList0);
      CompressedVector compressedVector1 = (CompressedVector)compressedVector0.copyOfLength(1218);
      assertEquals(1218, compressedVector1.length());
      assertEquals(0, compressedVector1.cardinality());
      assertEquals(0, compressedVector0.length());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      VectorFactory<CompressedVector> vectorFactory0 = (VectorFactory<CompressedVector>) mock(VectorFactory.class, new ViolatedAssumptionAnswer());
      HashMap<Integer, Byte> hashMap0 = new HashMap<Integer, Byte>();
      Integer integer0 = new Integer((-2233));
      Byte byte0 = new Byte((byte)4);
      hashMap0.put(integer0, byte0);
      // Undeclared exception!
      try { 
        CompressedVector.fromMap(hashMap0, 8);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Check your map: Index must be 0..n-1
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      HashMap<Integer, Byte> hashMap0 = new HashMap<Integer, Byte>();
      Integer integer0 = new Integer(933);
      Byte byte0 = new Byte((byte) (-16));
      hashMap0.put(integer0, byte0);
      // Undeclared exception!
      try { 
        CompressedVector.fromMap(hashMap0, 933);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Check your map: Index must be 0..n-1
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      Integer integer0 = new Integer(4);
      Integer integer1 = new Integer((-2924));
      hashMap0.putIfAbsent(integer0, integer1);
      CompressedVector compressedVector0 = CompressedVector.fromMap(hashMap0, 907);
      assertEquals(0.0011025358324145535, compressedVector0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      CompressedVector compressedVector0 = null;
      try {
        compressedVector0 = new CompressedVector(0, 370);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cardinality should be less then or equal to capacity: 370.
         //
         verifyException("org.la4j.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector();
      SparseVector sparseVector0 = compressedVector0.toSparseVector();
      assertSame(sparseVector0, compressedVector0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector();
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      compressedVector0.each(vectorProcedure0);
      assertEquals(0, compressedVector0.cardinality());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(2);
      compressedVector0.setAll(Double.POSITIVE_INFINITY);
      compressedVector0.toBinary();
      assertEquals(1.0, compressedVector0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[2] = (double) 1519;
      doubleArray0[5] = (double) 1519;
      CompressedVector compressedVector0 = new CompressedVector(1519, 1519, doubleArray0, (int[]) null);
      VectorFactory<CompressedVector> vectorFactory0 = (VectorFactory<CompressedVector>) mock(VectorFactory.class, new ViolatedAssumptionAnswer());
      doReturn(compressedVector0).when(vectorFactory0).apply(anyInt());
      // Undeclared exception!
      try { 
        compressedVector0.to(vectorFactory0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.vector.sparse.CompressedVector$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(23, 23);
      compressedVector0.swapElements((-13), 23);
      assertEquals(23, compressedVector0.length());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(2);
      compressedVector0.setAll(Double.POSITIVE_INFINITY);
      // Undeclared exception!
      try { 
        compressedVector0.swapElements((-1230), 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      double[] doubleArray0 = new double[21];
      doubleArray0[0] = 1052.72;
      doubleArray0[1] = 1052.72;
      doubleArray0[2] = 638.0052417684058;
      HashMap<Integer, String> hashMap0 = new HashMap<Integer, String>(13);
      hashMap0.keySet();
      CompressedVector compressedVector0 = new CompressedVector(2609);
      compressedVector0.setAll(267.4036981);
      SparseVector sparseVector0 = compressedVector0.toSparseVector();
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      ((CompressedVector) sparseVector0).updateAt(652, vectorFunction0);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      compressedVector0.eachNonZero(vectorProcedure0);
      compressedVector0.swapElements(1, (-207));
      assertEquals(2608, compressedVector0.cardinality());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) (byte)0;
      doubleArray0[2] = (double) 2145722116;
      doubleArray0[3] = (double) 0;
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      compressedVector0.add(0.0);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.updateAt((byte)0, vectorFunction0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      HashMap<Integer, Short> hashMap0 = new HashMap<Integer, Short>();
      Integer integer0 = new Integer(8);
      Integer.getInteger("");
      Short short0 = new Short((short)1492);
      hashMap0.put(integer0, short0);
      CompressedVector compressedVector0 = CompressedVector.fromMap(hashMap0, 4415);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 2845.78;
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(Double.POSITIVE_INFINITY).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.updateAt(8, vectorFunction0);
      // Undeclared exception!
      try { 
        CompressedVector.fromMatrixMarket((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.StringTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      HashMap<Integer, Short> hashMap0 = new HashMap<Integer, Short>();
      Integer integer0 = new Integer(8);
      Integer.getInteger("");
      Short short0 = new Short((short)1492);
      Short.toUnsignedLong((short) (-749));
      hashMap0.put(integer0, short0);
      CompressedVector compressedVector0 = CompressedVector.fromMap(hashMap0, 4415);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 2845.78;
      CompressedVector.fromArray(doubleArray0);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.updateAt(8, vectorFunction0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(24, 24);
      compressedVector0.setAll(24);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      compressedVector0.each(vectorProcedure0);
      compressedVector0.swapElements(8, 8);
      compressedVector0.toBinary();
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      HashMap<Integer, Byte> hashMap0 = new HashMap<Integer, Byte>();
      Integer integer0 = new Integer(3);
      Byte byte0 = new Byte((byte) (-71));
      hashMap0.put(integer0, byte0);
      Integer integer1 = new Integer(933);
      CompressedVector compressedVector0 = CompressedVector.fromMap(hashMap0, 933);
      compressedVector0.sum();
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(16);
      compressedVector0.setAll(16);
      // Undeclared exception!
      try { 
        compressedVector0.swapElements(11, (-1230));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      HashMap<Integer, Byte> hashMap0 = new HashMap<Integer, Byte>();
      Integer integer0 = new Integer(13);
      Byte byte0 = new Byte((byte)8);
      BiFunction<Object, Object, Byte> biFunction0 = (BiFunction<Object, Object, Byte>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn(byte0).when(biFunction0).apply(any() , any());
      hashMap0.compute(integer0, biFunction0);
      CompressedVector compressedVector0 = CompressedVector.fromMap(hashMap0, 1150);
      compressedVector0.set(13, 13);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      HashMap<Integer, Byte> hashMap0 = new HashMap<Integer, Byte>();
      Integer integer0 = new Integer(13);
      BiFunction<Object, Object, Byte> biFunction0 = (BiFunction<Object, Object, Byte>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(any() , any());
      hashMap0.compute(integer0, biFunction0);
      CompressedVector compressedVector0 = CompressedVector.fromMap(hashMap0, 1150);
      compressedVector0.set(13, 100.0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 3860;
      doubleArray0[1] = (double) 3860;
      doubleArray0[3] = (double) 3860;
      doubleArray0[4] = 0.0;
      MockRandom mockRandom0 = new MockRandom();
      CompressedVector compressedVector0 = CompressedVector.random(3860, 1.0, (Random) mockRandom0);
      // Undeclared exception!
      try { 
        compressedVector0.swapElements(3860, 7);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(2, 2);
      compressedVector0.infinityNorm();
      compressedVector0.setAll(2);
      // Undeclared exception!
      try { 
        compressedVector0.swapElements(0, (-1230));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(1233, 1233);
      Integer integer0 = new Integer((-2960));
      compressedVector0.setAll(1.0);
      compressedVector0.nonZeroAt((-2960));
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 273.4919;
      doubleArray0[1] = (-1897.1688911091273);
      doubleArray0[2] = 601.7633611;
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      compressedVector0.nonZeroAt(2);
      // Undeclared exception!
      try { 
        compressedVector0.getOrElse((-34), 1205.833979158146);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index '-34' is invalid.
         //
         verifyException("org.la4j.vector.SparseVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-1712.8209569157736);
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      compressedVector0.swapElements(0, 3);
      compressedVector0.nonZeroIterator();
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      int int0 = 0;
      MockRandom mockRandom0 = new MockRandom();
      CompressedVector compressedVector0 = CompressedVector.random(1658, (double) 0, (Random) mockRandom0);
      compressedVector0.setAll(35);
      int int1 = 1215;
      int int2 = 335;
      CompressedVector compressedVector1 = CompressedVector.zero(1215, 335);
      compressedVector1.toMatrixMarket();
      int int3 = 7;
      // Undeclared exception!
      try { 
        compressedVector0.swapElements((-1230), 7);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-1712.8209569157736);
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[6] = (double) 0;
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      compressedVector0.swapElements((-4742), 0);
      compressedVector0.nonZeroIterator();
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(1233, 1233);
      Integer integer0 = new Integer((-2960));
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn((double)1233).when(vectorAccumulator0).accumulate();
      compressedVector0.foldNonZero(vectorAccumulator0);
      compressedVector0.setAll(1.0);
      compressedVector0.swapElements(8, 16);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-1714.5367515070832);
      CompressedVector compressedVector0 = CompressedVector.zero(32, 32);
      compressedVector0.copyOfLength(17);
      compressedVector0.nonZeroAt(0);
      // Undeclared exception!
      try { 
        CompressedVector.zero((-649));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong vector length: -649
         //
         verifyException("org.la4j.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      HashMap<Integer, String> hashMap0 = new HashMap<Integer, String>(2590);
      hashMap0.keySet();
      CompressedVector compressedVector0 = new CompressedVector(2609);
      compressedVector0.setAll(2609);
      compressedVector0.toSparseVector();
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      compressedVector0.eachNonZero(vectorProcedure0);
      compressedVector0.getOrElse(2588, 2.0);
      MockRandom mockRandom0 = new MockRandom(0L);
      compressedVector0.iterator();
      compressedVector0.toBinary();
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 7;
      doubleArray0[1] = (double) 2;
      doubleArray0[2] = (double) 7;
      doubleArray0[3] = (double) 2;
      doubleArray0[4] = (double) 2;
      doubleArray0[5] = (double) 2;
      int[] intArray0 = new int[4];
      intArray0[0] = 7;
      intArray0[1] = 7;
      intArray0[2] = 2;
      intArray0[3] = 2;
      CompressedVector compressedVector0 = new CompressedVector(7, 2, doubleArray0, intArray0);
      compressedVector0.set(2, 2.0);
      // Undeclared exception!
      try { 
        SparseVector.zero((-681), 2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong vector length: -681
         //
         verifyException("org.la4j.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[2] = (double) 1519;
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      byte[] byteArray0 = compressedVector0.toBinary();
      compressedVector0.iterator();
      CompressedVector.fromBinary(byteArray0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(1);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)1).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.update(vectorFunction0);
      // Undeclared exception!
      try { 
        compressedVector0.swapElements(1, 2145445645);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 1389.80014625;
      doubleArray0[1] = (-1200.534969053044);
      CompressedVector compressedVector0 = CompressedVector.fromCSV("6D");
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn((-3813.17930933)).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.update(vectorFunction0);
      compressedVector0.swapElements((-626), (-626));
      MockRandom mockRandom0 = new MockRandom(543L);
      // Undeclared exception!
      try { 
        CompressedVector.random((-626), 1150.0, (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The density value should be between 0 and 1.0
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      int[] intArray0 = new int[4];
      intArray0[0] = 3600;
      intArray0[1] = 3600;
      intArray0[2] = 1;
      intArray0[3] = 1;
      CompressedVector compressedVector0 = new CompressedVector(3600, 2160, doubleArray0, intArray0);
      OoPlaceVectorsSubtraction ooPlaceVectorsSubtraction0 = new OoPlaceVectorsSubtraction();
      // Undeclared exception!
      try { 
        ooPlaceVectorsSubtraction0.apply((SparseVector) compressedVector0, (SparseVector) compressedVector0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index '3600' is invalid.
         //
         verifyException("org.la4j.vector.SparseVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 1052.72;
      doubleArray0[6] = 1052.72;
      doubleArray0[3] = 1052.72;
      doubleArray0[7] = 1052.72;
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      HashMap<Integer, Byte> hashMap0 = new HashMap<Integer, Byte>();
      CompressedVector.fromMap(hashMap0, 4);
      compressedVector0.get(4);
      // Undeclared exception!
      try { 
        CompressedVector.fromMap(hashMap0, (-1073741824));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong vector length: -1073741824
         //
         verifyException("org.la4j.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-1714.5367515070832);
      doubleArray0[2] = (double) 0;
      doubleArray0[5] = (double) 0;
      doubleArray0[4] = (double) 0;
      doubleArray0[6] = (double) 0;
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      compressedVector0.swapElements(1954, 0);
      compressedVector0.iterator();
      compressedVector0.setAll((-1714.5367515070832));
      compressedVector0.setAll((-1714.5367515070832));
      // Undeclared exception!
      try { 
        SparseVector.fromCSV("b*-Jl*?wVR>WA");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 1052.72;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (-3372.0);
      doubleArray0[6] = 0.0;
      doubleArray0[7] = 1.0;
      doubleArray0[8] = 0.0;
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      compressedVector0.subtract(1.0);
      compressedVector0.toBinary();
      compressedVector0.infinityNorm();
      CompressedVector compressedVector1 = new CompressedVector(1060);
      CompressedVector.zero(1060, 1060);
      compressedVector1.toMatrixMarket();
      compressedVector0.swapElements(1060, (-803));
      compressedVector0.set(4, 0.0);
      HashMap<Integer, Short> hashMap0 = new HashMap<Integer, Short>();
      Short short0 = new Short((short) (-1));
      Short short1 = new Short((short) (-1751));
      hashMap0.put((Integer) null, short1);
      org.evosuite.runtime.Random.setNextRandom((short) (-1));
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-1712.8209569157736);
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      compressedVector0.swapElements(0, (-1543));
      compressedVector0.setAll((-1010));
  }
}
