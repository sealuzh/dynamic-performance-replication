/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 12:15:36 GMT 2018
 */

package com.pmdesigns.jvc.tools;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.pmdesigns.jvc.tools.JVCParserTokenManager;
import com.pmdesigns.jvc.tools.SimpleCharStream;
import com.pmdesigns.jvc.tools.Token;
import java.io.ByteArrayInputStream;
import java.io.CharArrayReader;
import java.io.PrintStream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JVCParserTokenManager_ESTest extends JVCParserTokenManager_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JVCParserTokenManager jVCParserTokenManager0 = null;
      try {
        jVCParserTokenManager0 = new JVCParserTokenManager((SimpleCharStream) null, (-9));
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : -9. State unchanged.
         //
         verifyException("com.pmdesigns.jvc.tools.JVCParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-45);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(byteArrayInputStream0, (byte) (-45), (byte) (-45));
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0);
      Token token0 = jVCParserTokenManager0.getNextToken();
      assertEquals((-45), token0.beginLine);
      assertEquals((-45), token0.beginColumn);
      assertEquals(16, token0.kind);
      assertEquals("\uFFFD", token0.toString());
      assertEquals((-45), token0.endColumn);
      assertEquals((-45), token0.endLine);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)118;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(byteArrayInputStream0, (byte)118, (byte)118);
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0);
      Token token0 = jVCParserTokenManager0.getNextToken();
      assertEquals(118, token0.endColumn);
      assertEquals(118, token0.beginColumn);
      assertEquals(16, token0.kind);
      assertEquals("v", token0.toString());
      assertEquals(118, token0.endLine);
      assertEquals(118, token0.beginLine);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(byteArrayInputStream0, (-31), (-31));
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0);
      jVCParserTokenManager0.curLexState = (-31);
      Token token0 = jVCParserTokenManager0.getNextToken();
      assertEquals((-31), token0.endLine);
      assertEquals((-31), token0.endColumn);
      assertEquals("", token0.toString());
      assertEquals((-31), token0.beginColumn);
      assertEquals((-31), token0.beginLine);
      assertEquals(0, token0.kind);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(byteArrayInputStream0, (byte)4, (byte)4);
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0, (byte)4);
      Token token0 = jVCParserTokenManager0.getNextToken();
      assertEquals(4, token0.beginColumn);
      assertEquals(4, token0.beginLine);
      assertEquals(16, token0.kind);
      assertEquals("\u0000", token0.toString());
      assertEquals(4, token0.endLine);
      assertEquals(4, token0.endColumn);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-45);
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte)4;
      byteArray1[1] = (byte) (-38);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(byteArrayInputStream0, (byte) (-45), 29);
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0, (byte)4);
      Token token0 = jVCParserTokenManager0.getNextToken();
      assertEquals(16, token0.kind);
      assertEquals("\uFFFD", token0.toString());
      assertEquals((-45), token0.beginLine);
      assertEquals((-45), token0.endLine);
      assertEquals(29, token0.endColumn);
      assertEquals(29, token0.beginColumn);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(byteArrayInputStream0, (-31), (-31));
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0);
      jVCParserTokenManager0.curLexState = 1;
      Token token0 = jVCParserTokenManager0.getNextToken();
      assertEquals("\u0000", token0.toString());
      assertEquals(16, token0.kind);
      assertEquals((-31), token0.beginLine);
      assertEquals((-31), token0.endLine);
      assertEquals((-31), token0.endColumn);
      assertEquals((-31), token0.beginColumn);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-6);
      byteArray0[1] = (byte) (-6);
      byteArray0[2] = (byte) (-6);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(byteArrayInputStream0, (byte) (-6), 15);
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0, 0);
      Token token0 = jVCParserTokenManager0.getNextToken();
      assertEquals(0, simpleCharStream0.bufpos);
      assertEquals(16, token0.kind);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(byteArrayInputStream0, (byte)17, (byte)17);
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0, 2);
      jVCParserTokenManager0.getNextToken();
      // Undeclared exception!
      try { 
        jVCParserTokenManager0.ReInit(simpleCharStream0, 17);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 17. State unchanged.
         //
         verifyException("com.pmdesigns.jvc.tools.JVCParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byteArray0[0] = (byte)17;
      byteArray0[1] = (byte)78;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(byteArrayInputStream0, (byte)17, (byte)78);
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0, 2);
      Token token0 = jVCParserTokenManager0.getNextToken();
      assertEquals(16, token0.kind);
      
      Token token1 = jVCParserTokenManager0.getNextToken();
      assertEquals(17, token1.endLine);
      assertEquals(79, token1.endColumn);
      assertEquals(79, token1.beginColumn);
      assertEquals("N", token1.toString());
      assertEquals(17, token1.beginLine);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = '[';
      charArray0[1] = '[';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(charArrayReader0, '[', '[', '[');
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0);
      jVCParserTokenManager0.getNextToken();
      assertEquals(1, simpleCharStream0.bufpos);
      assertEquals(92, simpleCharStream0.getEndColumn());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = '[';
      charArray0[0] = '[';
      charArray0[1] = 'Q';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'[', 'Q', '\u0000', '\u0000'}, charArray0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(charArrayReader0, '[', '[', '[');
      assertNotNull(simpleCharStream0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertArrayEquals(new char[] {'[', 'Q', '\u0000', '\u0000'}, charArray0);
      
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0);
      assertNotNull(jVCParserTokenManager0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertArrayEquals(new char[] {'[', 'Q', '\u0000', '\u0000'}, charArray0);
      
      Token token0 = jVCParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.bufpos);
      assertEquals(91, token0.beginLine);
      assertEquals(91, token0.beginColumn);
      assertEquals(91, token0.endColumn);
      assertEquals(16, token0.kind);
      assertEquals(91, token0.endLine);
      assertEquals(91, simpleCharStream0.getColumn());
      assertEquals(91, simpleCharStream0.getEndColumn());
      assertEquals(91, simpleCharStream0.getLine());
      assertEquals(91, simpleCharStream0.getEndLine());
      assertEquals(91, simpleCharStream0.getBeginLine());
      assertEquals(91, simpleCharStream0.getBeginColumn());
      assertEquals("[", token0.toString());
      assertArrayEquals(new char[] {'[', 'Q', '\u0000', '\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = '[';
      charArray0[2] = 'Q';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'[', '\u0000', 'Q', '\u0000'}, charArray0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(charArrayReader0, '[', '[', '[');
      assertNotNull(simpleCharStream0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertArrayEquals(new char[] {'[', '\u0000', 'Q', '\u0000'}, charArray0);
      
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0);
      assertNotNull(jVCParserTokenManager0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertArrayEquals(new char[] {'[', '\u0000', 'Q', '\u0000'}, charArray0);
      
      Token token0 = jVCParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.bufpos);
      assertEquals(91, token0.endColumn);
      assertEquals(91, token0.beginColumn);
      assertEquals(91, token0.beginLine);
      assertEquals(91, token0.endLine);
      assertEquals(16, token0.kind);
      assertEquals(91, simpleCharStream0.getColumn());
      assertEquals(91, simpleCharStream0.getLine());
      assertEquals(91, simpleCharStream0.getEndLine());
      assertEquals(91, simpleCharStream0.getEndColumn());
      assertEquals(91, simpleCharStream0.getBeginColumn());
      assertEquals(91, simpleCharStream0.getBeginLine());
      assertEquals("[", token0.toString());
      assertArrayEquals(new char[] {'[', '\u0000', 'Q', '\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      char[] charArray0 = new char[6];
      charArray0[0] = '[';
      charArray0[1] = '[';
      charArray0[2] = 'Q';
      charArray0[3] = 'w';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'[', '[', 'Q', 'w', '\u0000', '\u0000'}, charArray0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(charArrayReader0, '[', '[', '[');
      assertNotNull(simpleCharStream0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertArrayEquals(new char[] {'[', '[', 'Q', 'w', '\u0000', '\u0000'}, charArray0);
      
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0);
      assertNotNull(jVCParserTokenManager0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertArrayEquals(new char[] {'[', '[', 'Q', 'w', '\u0000', '\u0000'}, charArray0);
      
      Token token0 = jVCParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, simpleCharStream0.bufpos);
      assertEquals(1, token0.kind);
      assertEquals(92, token0.endColumn);
      assertEquals(91, token0.beginColumn);
      assertEquals(91, token0.beginLine);
      assertEquals(91, token0.endLine);
      assertEquals(92, simpleCharStream0.getColumn());
      assertEquals(91, simpleCharStream0.getLine());
      assertEquals(92, simpleCharStream0.getEndColumn());
      assertEquals(91, simpleCharStream0.getBeginColumn());
      assertEquals(91, simpleCharStream0.getEndLine());
      assertEquals(91, simpleCharStream0.getBeginLine());
      assertEquals("[[", token0.toString());
      assertArrayEquals(new char[] {'[', '[', 'Q', 'w', '\u0000', '\u0000'}, charArray0);
      
      Token token1 = jVCParserTokenManager0.getNextToken();
      assertNotNull(token1);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(2, simpleCharStream0.bufpos);
      assertEquals(93, token1.endColumn);
      assertEquals(91, token1.beginLine);
      assertEquals(93, token1.beginColumn);
      assertEquals(16, token1.kind);
      assertEquals(91, token1.endLine);
      assertFalse(token1.equals((Object)token0));
      assertEquals(93, simpleCharStream0.getColumn());
      assertEquals(91, simpleCharStream0.getLine());
      assertEquals(93, simpleCharStream0.getEndColumn());
      assertEquals(93, simpleCharStream0.getBeginColumn());
      assertEquals(91, simpleCharStream0.getEndLine());
      assertEquals(91, simpleCharStream0.getBeginLine());
      assertEquals("Q", token1.toString());
      assertNotSame(token1, token0);
      assertArrayEquals(new char[] {'[', '[', 'Q', 'w', '\u0000', '\u0000'}, charArray0);
      
      jVCParserTokenManager0.ReInit(simpleCharStream0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(2, simpleCharStream0.bufpos);
      assertEquals(93, simpleCharStream0.getColumn());
      assertEquals(91, simpleCharStream0.getLine());
      assertEquals(93, simpleCharStream0.getEndColumn());
      assertEquals(93, simpleCharStream0.getBeginColumn());
      assertEquals(91, simpleCharStream0.getEndLine());
      assertEquals(91, simpleCharStream0.getBeginLine());
      assertArrayEquals(new char[] {'[', '[', 'Q', 'w', '\u0000', '\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      byte[] byteArray0 = new byte[21];
      byteArray0[0] = (byte) (-100);
      byteArray0[4] = (byte)12;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(21, byteArrayInputStream0.available());
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(byteArrayInputStream0, (byte)12, (byte)12);
      assertNotNull(simpleCharStream0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(21, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0, 3);
      assertNotNull(jVCParserTokenManager0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(21, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      
      Token token0 = jVCParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(16, token0.kind);
      assertEquals(12, token0.endLine);
      assertEquals(12, token0.endColumn);
      assertEquals(12, token0.beginLine);
      assertEquals(12, token0.beginColumn);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(12, simpleCharStream0.getEndColumn());
      assertEquals(12, simpleCharStream0.getLine());
      assertEquals(12, simpleCharStream0.getColumn());
      assertEquals(12, simpleCharStream0.getBeginColumn());
      assertEquals(12, simpleCharStream0.getBeginLine());
      assertEquals(12, simpleCharStream0.getEndLine());
      assertEquals("\uFFFD", token0.toString());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(9, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(byteArrayInputStream0, 0, 0);
      assertNotNull(simpleCharStream0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertEquals(9, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0, 3);
      assertNotNull(jVCParserTokenManager0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertEquals(9, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      Token token0 = jVCParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.bufpos);
      assertEquals(0, token0.beginLine);
      assertEquals(16, token0.kind);
      assertEquals(0, token0.endLine);
      assertEquals(0, token0.beginColumn);
      assertEquals(0, token0.endColumn);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getEndColumn());
      assertEquals(0, simpleCharStream0.getLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getEndLine());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getColumn());
      assertEquals("\u0000", token0.toString());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream("\u0000");
      assertNotNull(mockPrintStream0);
      
      PrintStream printStream0 = mockPrintStream0.format("'0QLz*W", (Object[]) jVCParserTokenManager0.lexStateNames);
      assertNotNull(printStream0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.bufpos);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getEndColumn());
      assertEquals(0, simpleCharStream0.getLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getEndLine());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getColumn());
      assertSame(mockPrintStream0, printStream0);
      assertSame(printStream0, mockPrintStream0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      MockPrintStream mockPrintStream1 = new MockPrintStream(printStream0, false);
      assertNotNull(mockPrintStream1);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(mockPrintStream1.equals((Object)printStream0));
      assertFalse(mockPrintStream1.equals((Object)mockPrintStream0));
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getEndColumn());
      assertEquals(0, simpleCharStream0.getLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getEndLine());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getColumn());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      jVCParserTokenManager0.setDebugStream(mockPrintStream1);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(mockPrintStream0.equals((Object)mockPrintStream1));
      assertFalse(printStream0.equals((Object)mockPrintStream1));
      assertFalse(mockPrintStream1.equals((Object)printStream0));
      assertFalse(mockPrintStream1.equals((Object)mockPrintStream0));
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getEndColumn());
      assertEquals(0, simpleCharStream0.getLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getEndLine());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getColumn());
      assertNotSame(mockPrintStream0, mockPrintStream1);
      assertSame(mockPrintStream0, printStream0);
      assertNotSame(printStream0, mockPrintStream1);
      assertSame(printStream0, mockPrintStream0);
      assertNotSame(mockPrintStream1, printStream0);
      assertNotSame(mockPrintStream1, mockPrintStream0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      char[] charArray0 = new char[6];
      charArray0[0] = '[';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(charArrayReader0, 1205, 10, 10);
      assertNotNull(simpleCharStream0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertArrayEquals(new char[] {'[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0, 2);
      assertNotNull(jVCParserTokenManager0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertArrayEquals(new char[] {'[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      Token token0 = jVCParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(10, token0.beginColumn);
      assertEquals(16, token0.kind);
      assertEquals(1205, token0.endLine);
      assertEquals(1205, token0.beginLine);
      assertEquals(10, token0.endColumn);
      assertEquals(1205, simpleCharStream0.getLine());
      assertEquals(10, simpleCharStream0.getEndColumn());
      assertEquals(1205, simpleCharStream0.getBeginLine());
      assertEquals(10, simpleCharStream0.getColumn());
      assertEquals(1205, simpleCharStream0.getEndLine());
      assertEquals(10, simpleCharStream0.getBeginColumn());
      assertEquals("[", token0.toString());
      assertArrayEquals(new char[] {'[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      JVCParserTokenManager jVCParserTokenManager1 = new JVCParserTokenManager(simpleCharStream0);
      assertNotNull(jVCParserTokenManager1);
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertFalse(jVCParserTokenManager1.equals((Object)jVCParserTokenManager0));
      assertEquals(1205, simpleCharStream0.getLine());
      assertEquals(10, simpleCharStream0.getEndColumn());
      assertEquals(1205, simpleCharStream0.getBeginLine());
      assertEquals(10, simpleCharStream0.getColumn());
      assertEquals(1205, simpleCharStream0.getEndLine());
      assertEquals(10, simpleCharStream0.getBeginColumn());
      assertArrayEquals(new char[] {'[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      Token token1 = jVCParserTokenManager1.getNextToken();
      assertNotNull(token1);
      assertEquals(1, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(11, token1.endColumn);
      assertEquals(1205, token1.beginLine);
      assertEquals(11, token1.beginColumn);
      assertEquals(1205, token1.endLine);
      assertEquals(16, token1.kind);
      assertFalse(jVCParserTokenManager1.equals((Object)jVCParserTokenManager0));
      assertFalse(token1.equals((Object)token0));
      assertEquals(1205, simpleCharStream0.getLine());
      assertEquals(11, simpleCharStream0.getEndColumn());
      assertEquals(1205, simpleCharStream0.getBeginLine());
      assertEquals(1205, simpleCharStream0.getEndLine());
      assertEquals(11, simpleCharStream0.getBeginColumn());
      assertEquals(11, simpleCharStream0.getColumn());
      assertEquals("\u0000", token1.toString());
      assertNotSame(jVCParserTokenManager1, jVCParserTokenManager0);
      assertNotSame(token1, token0);
      assertArrayEquals(new char[] {'[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = ']';
      charArray0[1] = ']';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {']', ']', '\u0000', '\u0000'}, charArray0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(charArrayReader0, 33, 32, 33);
      assertNotNull(simpleCharStream0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertArrayEquals(new char[] {']', ']', '\u0000', '\u0000'}, charArray0);
      
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0);
      assertNotNull(jVCParserTokenManager0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertArrayEquals(new char[] {']', ']', '\u0000', '\u0000'}, charArray0);
      
      Token token0 = jVCParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(1, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(9, token0.kind);
      assertEquals(32, token0.beginColumn);
      assertEquals(33, token0.endColumn);
      assertEquals(33, token0.endLine);
      assertEquals(33, token0.beginLine);
      assertEquals(33, simpleCharStream0.getLine());
      assertEquals(33, simpleCharStream0.getBeginLine());
      assertEquals(33, simpleCharStream0.getEndColumn());
      assertEquals(33, simpleCharStream0.getColumn());
      assertEquals(32, simpleCharStream0.getBeginColumn());
      assertEquals(33, simpleCharStream0.getEndLine());
      assertEquals("]]", token0.toString());
      assertArrayEquals(new char[] {']', ']', '\u0000', '\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      char[] charArray0 = new char[4];
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)69;
      byteArray0[1] = (byte)14;
      byteArray0[2] = (byte)14;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(5, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)69, (byte)14, (byte)14, (byte)0, (byte)0}, byteArray0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(byteArrayInputStream0, (byte)69, (byte)69);
      assertNotNull(simpleCharStream0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertEquals(5, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertArrayEquals(new byte[] {(byte)69, (byte)14, (byte)14, (byte)0, (byte)0}, byteArray0);
      
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0, 0);
      assertNotNull(jVCParserTokenManager0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertEquals(5, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertArrayEquals(new byte[] {(byte)69, (byte)14, (byte)14, (byte)0, (byte)0}, byteArray0);
      
      Token token0 = jVCParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.bufpos);
      assertEquals(69, token0.beginLine);
      assertEquals(69, token0.beginColumn);
      assertEquals(69, token0.endColumn);
      assertEquals(69, token0.endLine);
      assertEquals(16, token0.kind);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(69, simpleCharStream0.getBeginColumn());
      assertEquals(69, simpleCharStream0.getLine());
      assertEquals(69, simpleCharStream0.getEndColumn());
      assertEquals(69, simpleCharStream0.getColumn());
      assertEquals(69, simpleCharStream0.getEndLine());
      assertEquals(69, simpleCharStream0.getBeginLine());
      assertEquals("E", token0.toString());
      assertArrayEquals(new byte[] {(byte)69, (byte)14, (byte)14, (byte)0, (byte)0}, byteArray0);
      
      Token token1 = jVCParserTokenManager0.getNextToken();
      assertNotNull(token1);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, simpleCharStream0.bufpos);
      assertEquals(70, token1.beginColumn);
      assertEquals(69, token1.beginLine);
      assertEquals(69, token1.endLine);
      assertEquals(70, token1.endColumn);
      assertEquals(16, token1.kind);
      assertFalse(token1.equals((Object)token0));
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(69, simpleCharStream0.getLine());
      assertEquals(70, simpleCharStream0.getEndColumn());
      assertEquals(70, simpleCharStream0.getColumn());
      assertEquals(70, simpleCharStream0.getBeginColumn());
      assertEquals(69, simpleCharStream0.getEndLine());
      assertEquals(69, simpleCharStream0.getBeginLine());
      assertEquals("\u000E", token1.toString());
      assertNotSame(token1, token0);
      assertArrayEquals(new byte[] {(byte)69, (byte)14, (byte)14, (byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      byte[] byteArray0 = new byte[10];
      byteArray0[0] = (byte)106;
      byteArray0[1] = (byte)12;
      byteArray0[3] = (byte)12;
      byteArray0[4] = (byte)12;
      byteArray0[5] = (byte)12;
      byteArray0[6] = (byte)12;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(10, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)106, (byte)12, (byte)0, (byte)12, (byte)12, (byte)12, (byte)12, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(byteArrayInputStream0, 20, (byte)12);
      assertNotNull(simpleCharStream0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(10, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertArrayEquals(new byte[] {(byte)106, (byte)12, (byte)0, (byte)12, (byte)12, (byte)12, (byte)12, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      simpleCharStream0.column = (-1740);
      assertEquals(10, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0, 3);
      assertNotNull(jVCParserTokenManager0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(10, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertArrayEquals(new byte[] {(byte)106, (byte)12, (byte)0, (byte)12, (byte)12, (byte)12, (byte)12, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      Token token0 = jVCParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.bufpos);
      assertEquals((-1739), token0.endColumn);
      assertEquals(16, token0.kind);
      assertEquals((-1739), token0.beginColumn);
      assertEquals(20, token0.beginLine);
      assertEquals(20, token0.endLine);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(20, simpleCharStream0.getLine());
      assertEquals((-1739), simpleCharStream0.getEndColumn());
      assertEquals((-1739), simpleCharStream0.getColumn());
      assertEquals((-1739), simpleCharStream0.getBeginColumn());
      assertEquals(20, simpleCharStream0.getEndLine());
      assertEquals(20, simpleCharStream0.getBeginLine());
      assertEquals("j", token0.toString());
      assertArrayEquals(new byte[] {(byte)106, (byte)12, (byte)0, (byte)12, (byte)12, (byte)12, (byte)12, (byte)0, (byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = '[';
      charArray0[1] = '[';
      charArray0[2] = '[';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'[', '[', '[', '\u0000'}, charArray0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(charArrayReader0, '[', '[', '[');
      assertNotNull(simpleCharStream0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertArrayEquals(new char[] {'[', '[', '[', '\u0000'}, charArray0);
      
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0);
      assertNotNull(jVCParserTokenManager0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertArrayEquals(new char[] {'[', '[', '[', '\u0000'}, charArray0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)58;
      byteArray0[1] = (byte)58;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(8, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)58, (byte)58, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream1);
      assertFalse(byteArrayInputStream1.equals((Object)byteArrayInputStream0));
      assertEquals(8, byteArrayInputStream1.available());
      assertArrayEquals(new byte[] {(byte)58, (byte)58, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      long long0 = byteArrayInputStream1.skip(0L);
      assertFalse(byteArrayInputStream1.equals((Object)byteArrayInputStream0));
      assertEquals(0L, long0);
      assertEquals(8, byteArrayInputStream1.available());
      assertNotSame(byteArrayInputStream1, byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)58, (byte)58, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      Token token0 = jVCParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, simpleCharStream0.bufpos);
      assertEquals(1, token0.kind);
      assertEquals(91, token0.endLine);
      assertEquals(91, token0.beginColumn);
      assertEquals(92, token0.endColumn);
      assertEquals(91, token0.beginLine);
      assertEquals(92, simpleCharStream0.getColumn());
      assertEquals(91, simpleCharStream0.getEndLine());
      assertEquals(91, simpleCharStream0.getBeginColumn());
      assertEquals(91, simpleCharStream0.getBeginLine());
      assertEquals(91, simpleCharStream0.getLine());
      assertEquals(92, simpleCharStream0.getEndColumn());
      assertEquals("[[", token0.toString());
      assertArrayEquals(new char[] {'[', '[', '[', '\u0000'}, charArray0);
      
      Token token1 = jVCParserTokenManager0.getNextToken();
      assertNotNull(token1);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(2, simpleCharStream0.bufpos);
      assertEquals(91, token1.endLine);
      assertEquals(16, token1.kind);
      assertEquals(91, token1.beginLine);
      assertEquals(93, token1.beginColumn);
      assertEquals(93, token1.endColumn);
      assertFalse(token1.equals((Object)token0));
      assertEquals(93, simpleCharStream0.getColumn());
      assertEquals(91, simpleCharStream0.getEndLine());
      assertEquals(93, simpleCharStream0.getEndColumn());
      assertEquals(91, simpleCharStream0.getBeginLine());
      assertEquals(91, simpleCharStream0.getLine());
      assertEquals(93, simpleCharStream0.getBeginColumn());
      assertEquals("[", token1.toString());
      assertNotSame(token1, token0);
      assertArrayEquals(new char[] {'[', '[', '[', '\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = '[';
      charArray0[1] = '[';
      charArray0[2] = '[';
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'[', '[', '['}, charArray0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(charArrayReader0, '[', '[', '[');
      assertNotNull(simpleCharStream0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertArrayEquals(new char[] {'[', '[', '['}, charArray0);
      
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0);
      assertNotNull(jVCParserTokenManager0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertArrayEquals(new char[] {'[', '[', '['}, charArray0);
      
      Token token0 = jVCParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(1, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, token0.kind);
      assertEquals(91, token0.beginColumn);
      assertEquals(92, token0.endColumn);
      assertEquals(91, token0.endLine);
      assertEquals(91, token0.beginLine);
      assertEquals(92, simpleCharStream0.getColumn());
      assertEquals(92, simpleCharStream0.getEndColumn());
      assertEquals(91, simpleCharStream0.getLine());
      assertEquals(91, simpleCharStream0.getBeginColumn());
      assertEquals(91, simpleCharStream0.getEndLine());
      assertEquals(91, simpleCharStream0.getBeginLine());
      assertEquals("[[", token0.toString());
      assertArrayEquals(new char[] {'[', '[', '['}, charArray0);
      
      Token token1 = jVCParserTokenManager0.getNextToken();
      assertNotNull(token1);
      assertEquals(2, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(91, token1.beginLine);
      assertEquals(16, token1.kind);
      assertEquals(91, token1.endLine);
      assertEquals(93, token1.beginColumn);
      assertEquals(93, token1.endColumn);
      assertFalse(token1.equals((Object)token0));
      assertEquals(93, simpleCharStream0.getColumn());
      assertEquals(93, simpleCharStream0.getBeginColumn());
      assertEquals(91, simpleCharStream0.getLine());
      assertEquals(93, simpleCharStream0.getEndColumn());
      assertEquals(91, simpleCharStream0.getEndLine());
      assertEquals(91, simpleCharStream0.getBeginLine());
      assertEquals("[", token1.toString());
      assertNotSame(token1, token0);
      assertArrayEquals(new char[] {'[', '[', '['}, charArray0);
      
      Token token2 = jVCParserTokenManager0.jjFillToken();
      assertNotNull(token2);
      assertEquals(2, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(16, token2.kind);
      assertEquals(91, token2.endLine);
      assertEquals(91, token2.beginLine);
      assertEquals(93, token2.beginColumn);
      assertEquals(93, token2.endColumn);
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
      assertEquals(93, simpleCharStream0.getColumn());
      assertEquals(93, simpleCharStream0.getBeginColumn());
      assertEquals(91, simpleCharStream0.getLine());
      assertEquals(93, simpleCharStream0.getEndColumn());
      assertEquals(91, simpleCharStream0.getEndLine());
      assertEquals(91, simpleCharStream0.getBeginLine());
      assertEquals("[", token2.toString());
      assertNotSame(token2, token0);
      assertNotSame(token2, token1);
      assertArrayEquals(new char[] {'[', '[', '['}, charArray0);
      
      jVCParserTokenManager0.ReInit(simpleCharStream0);
      assertEquals(2, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(93, simpleCharStream0.getColumn());
      assertEquals(93, simpleCharStream0.getBeginColumn());
      assertEquals(91, simpleCharStream0.getLine());
      assertEquals(93, simpleCharStream0.getEndColumn());
      assertEquals(91, simpleCharStream0.getEndLine());
      assertEquals(91, simpleCharStream0.getBeginLine());
      assertArrayEquals(new char[] {'[', '[', '['}, charArray0);
      
      Token token3 = jVCParserTokenManager0.jjFillToken();
      assertNotNull(token3);
      assertEquals(2, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(91, token3.endLine);
      assertEquals(16, token3.kind);
      assertEquals(93, token3.endColumn);
      assertEquals(91, token3.beginLine);
      assertEquals(93, token3.beginColumn);
      assertFalse(token3.equals((Object)token1));
      assertFalse(token3.equals((Object)token2));
      assertFalse(token3.equals((Object)token0));
      assertEquals(93, simpleCharStream0.getColumn());
      assertEquals(93, simpleCharStream0.getBeginColumn());
      assertEquals(91, simpleCharStream0.getLine());
      assertEquals(93, simpleCharStream0.getEndColumn());
      assertEquals(91, simpleCharStream0.getEndLine());
      assertEquals(91, simpleCharStream0.getBeginLine());
      assertEquals("[", token3.toString());
      assertNotSame(token3, token1);
      assertNotSame(token3, token2);
      assertNotSame(token3, token0);
      assertArrayEquals(new char[] {'[', '[', '['}, charArray0);
      
      Token token4 = jVCParserTokenManager0.getNextToken();
      assertNotNull(token4);
      assertEquals(2, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, token4.kind);
      assertEquals(93, token4.beginColumn);
      assertEquals(93, token4.endColumn);
      assertEquals(91, token4.endLine);
      assertEquals(91, token4.beginLine);
      assertFalse(token4.equals((Object)token1));
      assertFalse(token4.equals((Object)token0));
      assertFalse(token4.equals((Object)token2));
      assertFalse(token4.equals((Object)token3));
      assertEquals(93, simpleCharStream0.getColumn());
      assertEquals(93, simpleCharStream0.getBeginColumn());
      assertEquals(91, simpleCharStream0.getLine());
      assertEquals(93, simpleCharStream0.getEndColumn());
      assertEquals(91, simpleCharStream0.getEndLine());
      assertEquals(91, simpleCharStream0.getBeginLine());
      assertEquals("", token4.toString());
      assertNotSame(token4, token1);
      assertNotSame(token4, token0);
      assertNotSame(token4, token2);
      assertNotSame(token4, token3);
      assertArrayEquals(new char[] {'[', '[', '['}, charArray0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte) (-21);
      byteArray0[2] = (byte)123;
      byteArray0[4] = (byte)84;
      byteArray0[5] = (byte) (-1);
      byteArray0[6] = (byte)11;
      byteArray0[7] = (byte)24;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(8, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)2, (byte) (-21), (byte)123, (byte)0, (byte)84, (byte) (-1), (byte)11, (byte)24}, byteArray0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(byteArrayInputStream0, 57, (byte) (-1));
      assertNotNull(simpleCharStream0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertArrayEquals(new byte[] {(byte)2, (byte) (-21), (byte)123, (byte)0, (byte)84, (byte) (-1), (byte)11, (byte)24}, byteArray0);
      
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0, (byte)2);
      assertNotNull(jVCParserTokenManager0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertArrayEquals(new byte[] {(byte)2, (byte) (-21), (byte)123, (byte)0, (byte)84, (byte) (-1), (byte)11, (byte)24}, byteArray0);
      
      Token token0 = jVCParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.bufpos);
      assertEquals(16, token0.kind);
      assertEquals(57, token0.beginLine);
      assertEquals((-1), token0.endColumn);
      assertEquals(57, token0.endLine);
      assertEquals((-1), token0.beginColumn);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(57, simpleCharStream0.getBeginLine());
      assertEquals(57, simpleCharStream0.getLine());
      assertEquals((-1), simpleCharStream0.getEndColumn());
      assertEquals(57, simpleCharStream0.getEndLine());
      assertEquals((-1), simpleCharStream0.getBeginColumn());
      assertEquals((-1), simpleCharStream0.getColumn());
      assertEquals("\u0002", token0.toString());
      assertArrayEquals(new byte[] {(byte)2, (byte) (-21), (byte)123, (byte)0, (byte)84, (byte) (-1), (byte)11, (byte)24}, byteArray0);
      
      Token token1 = jVCParserTokenManager0.getNextToken();
      assertNotNull(token1);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, simpleCharStream0.bufpos);
      assertEquals(16, token1.kind);
      assertEquals(57, token1.beginLine);
      assertEquals(0, token1.beginColumn);
      assertEquals(57, token1.endLine);
      assertEquals(0, token1.endColumn);
      assertFalse(token1.equals((Object)token0));
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(57, simpleCharStream0.getBeginLine());
      assertEquals(57, simpleCharStream0.getLine());
      assertEquals(57, simpleCharStream0.getEndLine());
      assertEquals(0, simpleCharStream0.getColumn());
      assertEquals(0, simpleCharStream0.getEndColumn());
      assertEquals("\uFFFD", token1.toString());
      assertNotSame(token1, token0);
      assertArrayEquals(new byte[] {(byte)2, (byte) (-21), (byte)123, (byte)0, (byte)84, (byte) (-1), (byte)11, (byte)24}, byteArray0);
      
      // Undeclared exception!
      try { 
        jVCParserTokenManager0.SwitchTo((byte)24);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 24. State unchanged.
         //
         verifyException("com.pmdesigns.jvc.tools.JVCParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-22);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(1, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte) (-22)}, byteArray0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(byteArrayInputStream0, (byte)78, (-1592));
      assertNotNull(simpleCharStream0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertArrayEquals(new byte[] {(byte) (-22)}, byteArray0);
      
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0, 1);
      assertNotNull(jVCParserTokenManager0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertArrayEquals(new byte[] {(byte) (-22)}, byteArray0);
      
      Token token0 = jVCParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(78, token0.endLine);
      assertEquals(78, token0.beginLine);
      assertEquals(16, token0.kind);
      assertEquals((-1592), token0.beginColumn);
      assertEquals((-1592), token0.endColumn);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(78, simpleCharStream0.getEndLine());
      assertEquals(78, simpleCharStream0.getLine());
      assertEquals((-1592), simpleCharStream0.getColumn());
      assertEquals((-1592), simpleCharStream0.getBeginColumn());
      assertEquals((-1592), simpleCharStream0.getEndColumn());
      assertEquals(78, simpleCharStream0.getBeginLine());
      assertEquals("\uFFFD", token0.toString());
      assertArrayEquals(new byte[] {(byte) (-22)}, byteArray0);
  }
}
