/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 23 18:47:35 GMT 2019
 */

package weka.classifiers;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Arrays;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import weka.classifiers.AbstractClassifier;
import weka.classifiers.CheckClassifier;
import weka.classifiers.Classifier;
import weka.classifiers.Evaluation;
import weka.classifiers.bayes.NaiveBayesMultinomialUpdateable;
import weka.classifiers.functions.SMOreg;
import weka.classifiers.functions.SimpleLinearRegression;
import weka.classifiers.functions.SimpleLogistic;
import weka.classifiers.functions.supportVector.PrecomputedKernelMatrixKernel;
import weka.classifiers.lazy.KStar;
import weka.classifiers.meta.ClassificationViaRegression;
import weka.classifiers.misc.SerializedClassifier;
import weka.classifiers.trees.RandomForest;
import weka.clusterers.SimpleKMeans;
import weka.core.Capabilities;
import weka.core.CheckScheme;
import weka.core.Instances;
import weka.core.TestInstances;
import weka.core.Utils;
import weka.filters.MultiFilter;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CheckClassifier_ESTest extends CheckClassifier_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CheckClassifier checkClassifier0 = new CheckClassifier();
      SerializedClassifier serializedClassifier0 = new SerializedClassifier();
      serializedClassifier0.getCapabilities();
      serializedClassifier0.getCurrentModel();
      checkClassifier0.m_Classifier = null;
      checkClassifier0.testToString();
      Instances instances0 = null;
      int int0 = 1173;
      checkClassifier0.listOptions();
      Instances instances1 = null;
      try {
        instances1 = new Instances((Instances) null, 100, 1173);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      CheckClassifier checkClassifier0 = new CheckClassifier();
      checkClassifier0.setClassifier((Classifier) null);
      checkClassifier0.canTakeOptions();
      boolean boolean0 = true;
      boolean boolean1 = true;
      boolean boolean2 = false;
      int int0 = 946;
      checkClassifier0.testToString();
      boolean boolean3 = false;
      int int1 = (-2473);
      // Undeclared exception!
      try { 
        checkClassifier0.canHandleMissing(false, false, false, false, false, false, 946, false, false, (-2473));
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error setting up for tests: Attribute type '946' unknown!
         //
         verifyException("weka.classifiers.CheckClassifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      System.setCurrentTimeMillis((-1L));
      CheckClassifier checkClassifier0 = new CheckClassifier();
      boolean boolean0 = false;
      boolean boolean1 = true;
      int int0 = (-3093);
      int int1 = 1;
      checkClassifier0.setDebug(true);
      // Undeclared exception!
      try { 
        checkClassifier0.testsPerClassType(2, true, true, true);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error setting up for tests: Loop has been executed more times than the allowed 10000
         //
         verifyException("weka.classifiers.CheckClassifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      int int0 = 59;
      Random.setNextRandom(59);
      CheckClassifier checkClassifier0 = new CheckClassifier();
      int int1 = 266;
      checkClassifier0.setNumString(266);
      checkClassifier0.m_Classifier = null;
      checkClassifier0.multiInstanceHandler();
      checkClassifier0.setClassifier((Classifier) null);
      boolean boolean0 = true;
      checkClassifier0.setDebug(true);
      checkClassifier0.doTests();
      checkClassifier0.multiInstanceHandler();
      boolean boolean1 = true;
      boolean boolean2 = true;
      int int2 = 1559;
      // Undeclared exception!
      try { 
        checkClassifier0.canHandleOnlyClass(false, true, true, false, true, 1559);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error setting up for tests: Attribute type '1559' unknown!
         //
         verifyException("weka.classifiers.CheckClassifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CheckClassifier checkClassifier0 = new CheckClassifier();
      checkClassifier0.m_Classifier = null;
      checkClassifier0.getOptions();
      checkClassifier0.getOptions();
      // Undeclared exception!
      try { 
        checkClassifier0.canHandleMissing(true, false, false, true, true, true, (-5616), true, false, (-5616));
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error setting up for tests: Attribute type '-5616' unknown!
         //
         verifyException("weka.classifiers.CheckClassifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CheckClassifier checkClassifier0 = new CheckClassifier();
      boolean boolean0 = true;
      checkClassifier0.setDebug(true);
      boolean boolean1 = false;
      boolean boolean2 = false;
      boolean boolean3 = false;
      checkClassifier0.canTakeOptions();
      checkClassifier0.getWords();
      int int0 = (-999);
      boolean boolean4 = false;
      int int1 = 4217;
      // Undeclared exception!
      checkClassifier0.canHandleNClasses(false, false, false, false, false, false, 4217);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CheckClassifier checkClassifier0 = new CheckClassifier();
      SerializedClassifier serializedClassifier0 = new SerializedClassifier();
      serializedClassifier0.getCapabilities();
      serializedClassifier0.getCurrentModel();
      checkClassifier0.m_Classifier = null;
      checkClassifier0.testToString();
      Instances instances0 = null;
      int int0 = 1173;
      Instances instances1 = null;
      try {
        instances1 = new Instances((Instances) null, 100, 1173);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CheckClassifier checkClassifier0 = new CheckClassifier();
      boolean[] booleanArray0 = checkClassifier0.datasetIntegrity(true, false, false, false, true, false, 3, true, true);
      assertTrue(Arrays.equals(new boolean[] {true, false}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CheckClassifier checkClassifier0 = new CheckClassifier();
      checkClassifier0.getOptions();
      checkClassifier0.multiInstanceHandler();
      boolean boolean0 = false;
      boolean boolean1 = true;
      // Undeclared exception!
      try { 
        checkClassifier0.updatingEquality(true, false, false, false, false, false, 4);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error setting up for tests: weka.classifiers.rules.ZeroR: Cannot handle relational class!
         //
         verifyException("weka.classifiers.CheckClassifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      CheckClassifier checkClassifier0 = new CheckClassifier();
      checkClassifier0.updateableClassifier();
      checkClassifier0.setWordSeparators("T:VK6");
      boolean boolean0 = false;
      boolean boolean1 = false;
      // Undeclared exception!
      try { 
        checkClassifier0.canHandleClassAsNthAttribute(true, true, true, false, false, true, 204, (-1));
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error setting up for tests: Attribute type '204' unknown!
         //
         verifyException("weka.classifiers.CheckClassifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CheckClassifier checkClassifier0 = new CheckClassifier();
      checkClassifier0.instanceWeights(false, false, false, false, false, false, 0);
      checkClassifier0.multiInstanceHandler();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)3;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)3;
      byteArray0[3] = (byte)31;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      checkClassifier0.updatingEquality(true, false, false, true, false, false, 0);
      SMOreg sMOreg0 = new SMOreg();
      PrecomputedKernelMatrixKernel precomputedKernelMatrixKernel0 = new PrecomputedKernelMatrixKernel();
      sMOreg0.setKernel(precomputedKernelMatrixKernel0);
      checkClassifier0.setClassifier(sMOreg0);
      assertEquals(1, checkClassifier0.getNumNumeric());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CheckClassifier checkClassifier0 = new CheckClassifier();
      checkClassifier0.getRevision();
      checkClassifier0.setNumInstances(3);
      checkClassifier0.doesntUseTestClassVal(false, true, false, false, true, false, 3);
      checkClassifier0.listOptions();
      checkClassifier0.updatingEquality(false, false, false, true, true, false, 3);
      int int0 = 104;
      SimpleLogistic simpleLogistic0 = new SimpleLogistic(104, true, true);
      simpleLogistic0.getTechnicalInformation();
      SimpleKMeans simpleKMeans0 = new SimpleKMeans();
      simpleKMeans0.getClusterCentroids();
      try { 
        simpleLogistic0.buildClassifier((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CheckClassifier checkClassifier0 = new CheckClassifier();
      SimpleLinearRegression simpleLinearRegression0 = new SimpleLinearRegression();
      checkClassifier0.m_Classifier = (Classifier) simpleLinearRegression0;
      // Undeclared exception!
      try { 
        checkClassifier0.doTests();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Problem determining ZeroR performance: Loop has been executed more times than the allowed 10000
         //
         verifyException("weka.classifiers.CheckClassifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CheckClassifier checkClassifier0 = new CheckClassifier();
      boolean boolean0 = false;
      checkClassifier0.setDebug(false);
      checkClassifier0.setNumInstances(1174);
      boolean boolean1 = true;
      checkClassifier0.declaresSerialVersionUID();
      checkClassifier0.setDebug(true);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      // Undeclared exception!
      try { 
        checkClassifier0.doTests();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error setting up for tests: Loop has been executed more times than the allowed 10000
         //
         verifyException("weka.classifiers.CheckClassifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      CheckClassifier checkClassifier0 = new CheckClassifier();
      checkClassifier0.canPredict(true, true, true, false, false, false, 2);
      checkClassifier0.listOptions();
      System.setCurrentTimeMillis(0L);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CheckClassifier checkClassifier0 = new CheckClassifier();
      int int0 = 16;
      checkClassifier0.updateableClassifier();
      checkClassifier0.setNumNumeric(16);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      boolean boolean0 = false;
      checkClassifier0.setDebug(false);
      String[] stringArray0 = checkClassifier0.getOptions();
      checkClassifier0.setOptions(stringArray0);
      checkClassifier0.setNumNumeric(15);
      boolean boolean1 = false;
      boolean boolean2 = true;
      int int1 = 34;
      // Undeclared exception!
      try { 
        checkClassifier0.canHandleOnlyClass(false, false, false, false, true, 34);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error setting up for tests: Attribute type '34' unknown!
         //
         verifyException("weka.classifiers.CheckClassifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      CheckClassifier checkClassifier0 = new CheckClassifier();
      boolean boolean0 = true;
      boolean boolean1 = true;
      boolean boolean2 = true;
      boolean boolean3 = false;
      int int0 = (-1202);
      int int1 = 2335;
      // Undeclared exception!
      try { 
        checkClassifier0.canHandleMissing(true, true, true, true, false, true, (-1202), true, true, 2335);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error setting up for tests: Attribute type '-1202' unknown!
         //
         verifyException("weka.classifiers.CheckClassifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CheckClassifier checkClassifier0 = new CheckClassifier();
      checkClassifier0.weightedInstancesHandler();
      int int0 = 0;
      // Undeclared exception!
      try { 
        checkClassifier0.testsPerClassType(0, true, true, true);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error setting up for tests: Loop has been executed more times than the allowed 10000
         //
         verifyException("weka.classifiers.CheckClassifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      CheckClassifier checkClassifier0 = new CheckClassifier();
      checkClassifier0.printAttributeSummary(true, true, false, false, true, true, (-17));
      boolean[] booleanArray0 = checkClassifier0.correctBuildInitialisation(false, false, false, false, false, false, 4);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      CheckClassifier checkClassifier0 = new CheckClassifier();
      checkClassifier0.getWords();
      checkClassifier0.updatingEquality(true, true, true, true, false, false, 3);
      boolean boolean0 = false;
      int int0 = 1086;
      // Undeclared exception!
      try { 
        checkClassifier0.canHandleZeroTraining(false, false, false, true, false, true, 1086);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error setting up for tests: Attribute type '1086' unknown!
         //
         verifyException("weka.classifiers.CheckClassifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-122);
      byteArray0[1] = (byte) (-60);
      byteArray0[2] = (byte)9;
      byteArray0[3] = (byte)34;
      byteArray0[4] = (byte)30;
      byteArray0[5] = (byte)38;
      byteArray0[6] = (byte) (-94);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      boolean boolean0 = false;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      FileSystemHandling.shouldAllThrowIOExceptions();
      CheckClassifier checkClassifier0 = new CheckClassifier();
      RandomForest randomForest0 = new RandomForest();
      checkClassifier0.setClassifier(randomForest0);
      // Undeclared exception!
      try { 
        checkClassifier0.doTests();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error setting up for tests: Loop has been executed more times than the allowed 10000
         //
         verifyException("weka.classifiers.CheckClassifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      CheckClassifier checkClassifier0 = new CheckClassifier();
      int int0 = (-5616);
      boolean boolean0 = false;
      checkClassifier0.m_Classifier = null;
      // Undeclared exception!
      try { 
        checkClassifier0.updatingEquality(false, false, false, false, true, true, (-5616));
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error setting up for tests: Attribute type '-5616' unknown!
         //
         verifyException("weka.classifiers.CheckClassifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)104;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)48;
      byteArray0[3] = (byte) (-89);
      byteArray0[4] = (byte)85;
      byteArray0[5] = (byte) (-115);
      byteArray0[6] = (byte) (-98);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      CheckClassifier checkClassifier0 = new CheckClassifier();
      boolean boolean0 = true;
      boolean boolean1 = false;
      boolean boolean2 = true;
      boolean boolean3 = true;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      boolean boolean4 = true;
      boolean boolean5 = true;
      int int0 = (-1453);
      // Undeclared exception!
      try { 
        checkClassifier0.updatingEquality(true, false, true, false, true, true, (-1453));
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error setting up for tests: Attribute type '-1453' unknown!
         //
         verifyException("weka.classifiers.CheckClassifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      boolean boolean0 = true;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      CheckClassifier checkClassifier0 = new CheckClassifier();
      checkClassifier0.getOptions();
      boolean boolean1 = false;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "L`3n4H`\"eE+^u7,Alv");
      int int0 = 3;
      checkClassifier0.correctBuildInitialisation(false, false, false, true, false, true, 3);
      boolean boolean2 = false;
      checkClassifier0.printAttributeSummary(true, true, false, true, true, false, (-3270));
      boolean boolean3 = true;
      boolean boolean4 = false;
      boolean boolean5 = false;
      // Undeclared exception!
      try { 
        checkClassifier0.canHandleZeroTraining(true, false, true, false, true, false, (-3270));
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error setting up for tests: Attribute type '-3270' unknown!
         //
         verifyException("weka.classifiers.CheckClassifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      CheckClassifier checkClassifier0 = new CheckClassifier();
      checkClassifier0.listOptions();
      checkClassifier0.canTakeOptions();
      boolean boolean0 = false;
      boolean boolean1 = false;
      boolean boolean2 = false;
      // Undeclared exception!
      try { 
        checkClassifier0.datasetIntegrity(false, false, true, false, false, false, 1011, false, true);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error setting up for tests: Attribute type '1011' unknown!
         //
         verifyException("weka.classifiers.CheckClassifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      CheckClassifier checkClassifier0 = new CheckClassifier();
      boolean boolean0 = true;
      boolean boolean1 = true;
      boolean boolean2 = false;
      boolean boolean3 = true;
      boolean boolean4 = false;
      // Undeclared exception!
      try { 
        checkClassifier0.datasetIntegrity(true, true, false, false, true, true, 0, false, true);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error setting up for tests: Loop has been executed more times than the allowed 10000
         //
         verifyException("weka.classifiers.CheckClassifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      stringArray0[1] = "X**v-;Z_eUf'z=`gW{J";
      CheckClassifier.main(stringArray0);
      CheckClassifier checkClassifier0 = new CheckClassifier();
      int int0 = (-806);
      checkClassifier0.setNumString((-806));
      checkClassifier0.declaresSerialVersionUID();
      NaiveBayesMultinomialUpdateable naiveBayesMultinomialUpdateable0 = new NaiveBayesMultinomialUpdateable();
      MultiFilter multiFilter0 = new MultiFilter();
      Capabilities capabilities0 = multiFilter0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      testInstances0.getRelationalClassFormat();
      try { 
        checkClassifier0.testWRTZeroR(naiveBayesMultinomialUpdateable0, (Evaluation) null, (Instances) null, (Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.CheckClassifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      CheckClassifier checkClassifier0 = new CheckClassifier();
      ClassificationViaRegression classificationViaRegression0 = new ClassificationViaRegression();
      checkClassifier0.m_Classifier = (Classifier) classificationViaRegression0;
      checkClassifier0.setPostProcessor((CheckScheme.PostProcessor) null);
      checkClassifier0.setWordSeparators("");
      checkClassifier0.updateableClassifier();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      classificationViaRegression0.getCapabilities();
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "";
      stringArray0[6] = "";
      stringArray0[7] = "";
      stringArray0[8] = "";
      AbstractClassifier.runClassifier(classificationViaRegression0, stringArray0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      checkClassifier0.getOptions();
      checkClassifier0.testToString();
      checkClassifier0.printAttributeSummary(false, false, false, true, false, true, (-4359));
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        checkClassifier0.canHandleNClasses(false, true, true, false, true, true, 50);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error setting up for tests: Loop has been executed more times than the allowed 10000
         //
         verifyException("weka.classifiers.CheckClassifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      CheckClassifier checkClassifier0 = new CheckClassifier();
      boolean boolean0 = true;
      int int0 = (-1901);
      // Undeclared exception!
      try { 
        checkClassifier0.instanceWeights(false, false, true, true, false, false, (-1901));
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error setting up for tests: Attribute type '-1901' unknown!
         //
         verifyException("weka.classifiers.CheckClassifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      CheckClassifier checkClassifier0 = new CheckClassifier();
      checkClassifier0.getRevision();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "8034";
      checkClassifier0.setOptions(stringArray0);
      boolean boolean0 = true;
      boolean boolean1 = false;
      int int0 = (-826);
      // Undeclared exception!
      try { 
        checkClassifier0.canHandleZeroTraining(true, true, true, false, true, false, (-826));
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error setting up for tests: Attribute type '-826' unknown!
         //
         verifyException("weka.classifiers.CheckClassifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      CheckClassifier checkClassifier0 = new CheckClassifier();
      checkClassifier0.doesntUseTestClassVal(false, false, false, false, false, false, 3);
      int int0 = (-1001);
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        checkClassifier0.doesntUseTestClassVal(true, false, true, false, false, false, (-1001));
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error setting up for tests: Attribute type '-1001' unknown!
         //
         verifyException("weka.classifiers.CheckClassifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      CheckClassifier checkClassifier0 = new CheckClassifier();
      // Undeclared exception!
      try { 
        checkClassifier0.updatingEquality(true, true, true, false, true, true, (-1901));
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error setting up for tests: Attribute type '-1901' unknown!
         //
         verifyException("weka.classifiers.CheckClassifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      CheckClassifier checkClassifier0 = new CheckClassifier();
      boolean boolean0 = false;
      int int0 = 1567;
      // Undeclared exception!
      try { 
        checkClassifier0.doesntUseTestClassVal(false, false, false, false, false, false, 1567);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error setting up for tests: Attribute type '1567' unknown!
         //
         verifyException("weka.classifiers.CheckClassifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      CheckClassifier checkClassifier0 = new CheckClassifier();
      // Undeclared exception!
      try { 
        checkClassifier0.correctBuildInitialisation(false, true, false, false, true, false, 17);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error setting up for tests: Attribute type '17' unknown!
         //
         verifyException("weka.classifiers.CheckClassifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      CheckClassifier checkClassifier0 = new CheckClassifier();
      // Undeclared exception!
      try { 
        checkClassifier0.instanceWeights(false, true, false, false, true, false, 837);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error setting up for tests: Attribute type '837' unknown!
         //
         verifyException("weka.classifiers.CheckClassifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      CheckClassifier checkClassifier0 = new CheckClassifier();
      int int0 = 936;
      int int1 = (-17);
      int int2 = 1319;
      checkClassifier0.makeTestDataset(0, 0, 936, (-17), (-17), 936, 936, 0, 0, 1319, true);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      CheckClassifier checkClassifier0 = new CheckClassifier();
      boolean boolean0 = false;
      boolean boolean1 = true;
      boolean boolean2 = true;
      // Undeclared exception!
      try { 
        checkClassifier0.canPredict(false, true, false, true, false, true, (-575));
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error setting up for tests: Attribute type '-575' unknown!
         //
         verifyException("weka.classifiers.CheckClassifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      CheckClassifier checkClassifier0 = new CheckClassifier();
      boolean boolean0 = true;
      boolean boolean1 = true;
      boolean boolean2 = false;
      checkClassifier0.testToString();
      Utils.SMALL = (-811.0);
      // Undeclared exception!
      try { 
        checkClassifier0.canHandleZeroTraining(false, false, false, true, false, true, 1024);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error setting up for tests: Attribute type '1024' unknown!
         //
         verifyException("weka.classifiers.CheckClassifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      CheckClassifier checkClassifier0 = new CheckClassifier();
      checkClassifier0.weightedInstancesHandler();
      int int0 = 2224;
      int int1 = 0;
      try { 
        checkClassifier0.makeTestDataset(2224, 2224, (-212), 1856, 0, 2224, 0, 0, (-212), 2224, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Attribute type '-212' unknown!
         //
         verifyException("weka.core.TestInstances", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      CheckClassifier checkClassifier0 = new CheckClassifier();
      boolean boolean0 = true;
      boolean boolean1 = true;
      boolean boolean2 = true;
      // Undeclared exception!
      try { 
        checkClassifier0.updatingEquality(true, true, true, true, true, true, 1218);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error setting up for tests: Attribute type '1218' unknown!
         //
         verifyException("weka.classifiers.CheckClassifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      CheckClassifier checkClassifier0 = new CheckClassifier();
      KStar kStar0 = new KStar();
      int int0 = 1;
      boolean boolean0 = true;
      kStar0.setDebug(true);
      kStar0.setGlobalBlend(1);
      checkClassifier0.m_Classifier = (Classifier) kStar0;
      checkClassifier0.multiInstanceHandler();
      // Undeclared exception!
      try { 
        checkClassifier0.doTests();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error setting up for tests: Loop has been executed more times than the allowed 10000
         //
         verifyException("weka.classifiers.CheckClassifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      CheckClassifier checkClassifier0 = new CheckClassifier();
      CheckScheme.PostProcessor checkScheme_PostProcessor0 = new CheckScheme.PostProcessor();
      checkScheme_PostProcessor0.getRevision();
      checkScheme_PostProcessor0.getRevision();
      checkScheme_PostProcessor0.getRevision();
      checkScheme_PostProcessor0.getRevision();
      checkScheme_PostProcessor0.getRevision();
      checkScheme_PostProcessor0.getRevision();
      checkClassifier0.setPostProcessor(checkScheme_PostProcessor0);
      boolean boolean0 = false;
      boolean boolean1 = false;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      boolean boolean2 = false;
      boolean boolean3 = true;
      int int0 = (-4334);
      checkClassifier0.printAttributeSummary(false, false, false, true, false, false, (-4334));
      FileSystemHandling.shouldAllThrowIOExceptions();
      checkClassifier0.getOptions();
      checkClassifier0.canTakeOptions();
      checkClassifier0.getClassifier();
      checkClassifier0.listOptions();
      checkClassifier0.declaresSerialVersionUID();
      checkClassifier0.getClassifier();
      checkClassifier0.testToString();
      // Undeclared exception!
      try { 
        checkClassifier0.doTests();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error setting up for tests: Loop has been executed more times than the allowed 10000
         //
         verifyException("weka.classifiers.CheckClassifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      CheckClassifier checkClassifier0 = new CheckClassifier();
      checkClassifier0.getWords();
      // Undeclared exception!
      try { 
        checkClassifier0.canHandleOnlyClass(false, false, false, true, false, 41);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error setting up for tests: Attribute type '41' unknown!
         //
         verifyException("weka.classifiers.CheckClassifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      CheckClassifier checkClassifier0 = new CheckClassifier();
      // Undeclared exception!
      try { 
        checkClassifier0.doesntUseTestClassVal(true, false, false, false, false, false, 48);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error setting up for tests: Attribute type '48' unknown!
         //
         verifyException("weka.classifiers.CheckClassifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      CheckClassifier checkClassifier0 = new CheckClassifier();
      String[] stringArray0 = new String[9];
      String string0 = "_[fE8a\\u]";
      stringArray0[0] = string0;
      stringArray0[1] = "BE";
      stringArray0[2] = "BmhbSG&}g(d";
      stringArray0[3] = "uZKotSymnQDDyVp&\"";
      stringArray0[4] = "";
      stringArray0[5] = "B!";
      stringArray0[6] = "";
      stringArray0[7] = "";
      stringArray0[8] = "$Revision: 9101 $";
      checkClassifier0.setOptions(stringArray0);
      assertFalse(checkClassifier0.hasClasspathProblems());
  }
}
