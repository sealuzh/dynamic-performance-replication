/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 23 17:42:33 GMT 2019
 */

package com.alibaba.fastjson.parser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.alibaba.fastjson.parser.Feature;
import com.alibaba.fastjson.parser.JSONLexerBase;
import com.alibaba.fastjson.parser.JSONReaderScanner;
import com.alibaba.fastjson.parser.JSONScanner;
import com.alibaba.fastjson.parser.SymbolTable;
import java.io.StringReader;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Collection;
import java.util.HashSet;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.util.MockCalendar;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONLexerBase_ESTest extends JSONLexerBase_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("DisableSpecialKeyDetect");
      jSONReaderScanner0.scanFloat('$');
      jSONReaderScanner0.scanUUID('H');
      jSONReaderScanner0.scanNumber();
      boolean boolean0 = jSONReaderScanner0.isEOF();
      assertEquals(3, jSONReaderScanner0.token());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = ';';
      charArray0[1] = 'E';
      charArray0[2] = '3';
      char char0 = 'D';
      charArray0[3] = 'D';
      char char1 = 'o';
      charArray0[4] = 'o';
      charArray0[5] = '4';
      charArray0[6] = 'o';
      int int0 = 78;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 78);
      jSONReaderScanner0.putChar('o');
      jSONReaderScanner0.setLocale((Locale) null);
      jSONReaderScanner0.stringVal();
      SymbolTable symbolTable0 = new SymbolTable(103);
      symbolTable0.addSymbol("E", 0, 0, (-54), true);
      jSONReaderScanner0.scanFieldIntArray(charArray0);
      jSONReaderScanner0.scanSymbol(symbolTable0, 'o');
      // Undeclared exception!
      try { 
        JSONLexerBase.readString(charArray0, 78);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      String string0 = "true";
      JSONScanner jSONScanner0 = new JSONScanner("true");
      char char0 = '$';
      jSONScanner0.scanBoolean('$');
      jSONScanner0.scanType("true");
      // Undeclared exception!
      try { 
        jSONScanner0.charAt((-2));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("\"");
      jSONReaderScanner0.features = (-2);
      char[] charArray0 = new char[5];
      jSONReaderScanner0.skipWhitespace();
      int int0 = 42;
      jSONReaderScanner0.scanDouble('#');
      jSONReaderScanner0.indexOf('#', 42);
      charArray0[0] = '\"';
      charArray0[1] = 'N';
      char char0 = ']';
      char char1 = '/';
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextTokenWithChar('\"');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed string : \u001A
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("InitStringFieldAsEmpty", (-1910102270));
      jSONReaderScanner0.np = 2359;
      jSONReaderScanner0.token = (-1910102270);
      jSONReaderScanner0.nextToken((-1910102270));
      jSONReaderScanner0.scanDate('|');
      assertEquals(1, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("", 58);
      char[] charArray0 = new char[1];
      charArray0[0] = '[';
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 0);
      SymbolTable symbolTable0 = new SymbolTable(25);
      jSONScanner0.scanSymbol(symbolTable0);
      jSONScanner0.scanSymbolWithSeperator(symbolTable0, 'V');
      jSONScanner0.sbuf = charArray0;
      jSONReaderScanner0.nextToken(12);
      Locale locale0 = Locale.KOREAN;
      locale0.getDisplayName();
      Locale.forLanguageTag("");
      jSONScanner0.setLocale(locale0);
      jSONScanner0.intValue();
      jSONScanner0.scanFieldDate(charArray0);
      // Undeclared exception!
      try { 
        jSONScanner0.subString(577, (-1719));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      char[] charArray0 = new char[1];
      int int0 = 440;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 440, 440);
      char[] charArray1 = new char[6];
      char char0 = 'd';
      jSONReaderScanner0.scanLong('d');
      SymbolTable symbolTable0 = null;
      try {
        symbolTable0 = new SymbolTable((-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.SymbolTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(" - ");
      char[] charArray0 = new char[3];
      jSONScanner0.matchStat = (-237);
      jSONScanner0.scanLong('\\');
      charArray0[0] = '(';
      charArray0[1] = 'N';
      charArray0[2] = 'e';
      jSONScanner0.scanFieldBigInteger(charArray0);
      jSONScanner0.isBlankInput();
      jSONScanner0.scanUUID('(');
      jSONScanner0.scanFieldIntArray(charArray0);
      // Undeclared exception!
      try { 
        jSONScanner0.doubleValue();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = ',';
      charArray0[1] = 'F';
      charArray0[2] = '}';
      charArray0[3] = 'Q';
      charArray0[4] = 'J';
      charArray0[5] = '!';
      charArray0[6] = 'v';
      charArray0[7] = 'c';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 7, 7);
      jSONReaderScanner0.scanBoolean(',');
      // Undeclared exception!
      try { 
        jSONReaderScanner0.numberString();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      String string0 = "null";
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("null");
      char char0 = 'C';
      jSONReaderScanner0.scanDate('C');
      SymbolTable symbolTable0 = null;
      try {
        symbolTable0 = new SymbolTable((-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.SymbolTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = '5';
      charArray0[1] = 'a';
      charArray0[2] = '*';
      charArray0[3] = '%';
      charArray0[4] = 'L';
      charArray0[5] = '\'';
      charArray0[6] = 'G';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 1670, 579);
      jSONReaderScanner0.getLocale();
      Feature feature0 = Feature.AllowSingleQuotes;
      jSONReaderScanner0.config(feature0, true);
      jSONReaderScanner0.scanDouble('E');
      // Undeclared exception!
      try { 
        jSONReaderScanner0.indexOf('&', (-1081953104));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("1YjR~\"0FGfbAB#PwdP");
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      LinkedHashSet<Locale> linkedHashSet0 = new LinkedHashSet<Locale>();
      List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) arrayList0, (Collection<Locale>) linkedHashSet0);
      Locale.lookup(arrayList0, list0);
      jSONScanner0.setLocale((Locale) null);
      jSONScanner0.scanBoolean('N');
      // Undeclared exception!
      try { 
        jSONScanner0.nextTokenWithChar('G');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match G - 1, info : pos 0, json : 1YjR~\"0FGfbAB#PwdP
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("not support type : ");
      jSONReaderScanner0.scanLong('L');
      char[] charArray0 = new char[5];
      charArray0[0] = 'L';
      charArray0[1] = 'L';
      charArray0[2] = 'L';
      charArray0[3] = 'L';
      charArray0[4] = 'L';
      Feature feature0 = Feature.AllowSingleQuotes;
      jSONReaderScanner0.config(feature0, false);
      jSONReaderScanner0.scanFieldLong(charArray0);
      jSONReaderScanner0.next();
      jSONReaderScanner0.features = 4;
      jSONReaderScanner0.scanIdent();
      jSONReaderScanner0.integerValue();
      int int0 = 115;
      jSONReaderScanner0.isEnabled(115);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.subString((-14), 531);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      int int0 = 121;
      JSONScanner jSONScanner0 = new JSONScanner("scan false error", 121);
      jSONScanner0.scanDecimal('M');
      jSONScanner0.scanFloat('M');
      char[] charArray0 = new char[7];
      charArray0[0] = 'M';
      charArray0[1] = 'M';
      charArray0[2] = 'M';
      charArray0[3] = 'M';
      charArray0[4] = 'M';
      charArray0[5] = 'M';
      charArray0[6] = 'M';
      jSONScanner0.scanFieldIntArray(charArray0);
      Class<Locale> class0 = Locale.class;
      SymbolTable symbolTable0 = new SymbolTable(121);
      // Undeclared exception!
      try { 
        jSONScanner0.scanSymbol(symbolTable0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("4$WPc{Z;KKaV1oz=0%>");
      jSONReaderScanner0.scanDouble('A');
      jSONReaderScanner0.tokenName();
      jSONReaderScanner0.longValue();
      jSONReaderScanner0.scanIdent();
      char[] charArray0 = new char[7];
      charArray0[0] = 'A';
      charArray0[1] = 'A';
      charArray0[2] = 'A';
      charArray0[3] = 'A';
      charArray0[4] = 'A';
      charArray0[5] = 'G';
      charArray0[6] = '{';
      jSONReaderScanner0.scanFieldFloatArray(charArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("true", 129);
      jSONScanner0.scanISO8601DateIfMatch();
      jSONScanner0.scanIdent();
      jSONScanner0.bytesValue();
      char[] charArray0 = new char[1];
      charArray0[0] = 'I';
      jSONScanner0.scanFieldUUID(charArray0);
      assertEquals((-2), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = '+';
      char char0 = '\\';
      charArray0[1] = '\\';
      char char1 = 'w';
      charArray0[2] = 'w';
      char char2 = '5';
      charArray0[3] = '5';
      int int0 = 9;
      // Undeclared exception!
      try { 
        JSONLexerBase.readString(charArray0, 9);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed.str.lit
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = 'h';
      charArray0[1] = 'f';
      charArray0[2] = 'e';
      charArray0[3] = '8';
      charArray0[4] = '>';
      charArray0[5] = '{';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 488, 45);
      jSONReaderScanner0.scanFieldBigInteger(charArray0);
      SymbolTable symbolTable0 = new SymbolTable(23);
      jSONReaderScanner0.scanSymbolUnQuoted(symbolTable0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFalse();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 83);
      jSONReaderScanner0.scanFieldFloat(charArray0);
      jSONReaderScanner0.setLocale((Locale) null);
      char char0 = '\'';
      jSONReaderScanner0.scanString('\'');
      jSONReaderScanner0.scanIdent();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.skipComment();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid comment
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("/a%MD#<U}?p>u");
      char char0 = '&';
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed string : \u001A
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("new");
      jSONReaderScanner0.nextIdent();
      SymbolTable symbolTable0 = null;
      try {
        symbolTable0 = new SymbolTable(0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1185263
         //
         verifyException("com.alibaba.fastjson.parser.SymbolTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("true", 429);
      char[] charArray0 = new char[3];
      jSONScanner0.scanUUID('_');
      charArray0[0] = ';';
      charArray0[1] = 'v';
      jSONScanner0.scanDecimal('v');
      charArray0[2] = '%';
      jSONScanner0.scanFieldSymbol(charArray0);
      TimeZone timeZone0 = TimeZone.getTimeZone("TreeSet");
      timeZone0.setID("TreeSet");
      Locale locale0 = Locale.CANADA_FRENCH;
      Locale.forLanguageTag("*9p$");
      timeZone0.getDisplayName(locale0);
      timeZone0.clone();
      jSONScanner0.setTimeZone(timeZone0);
      jSONScanner0.nextToken((-78));
      jSONScanner0.skipWhitespace();
      jSONScanner0.skipWhitespace();
      jSONScanner0.scanFieldFloatArray2(charArray0);
      // Undeclared exception!
      try { 
        jSONScanner0.numberString();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      char[] charArray0 = new char[3];
      char char0 = 'Y';
      charArray0[0] = 'Y';
      char char1 = '\"';
      charArray0[1] = '\"';
      char char2 = 'd';
      charArray0[2] = 'd';
      int int0 = 114;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 9, 114);
      jSONReaderScanner0.nextToken();
      jSONReaderScanner0.isBlankInput();
      jSONReaderScanner0.scanFloat('Y');
      SymbolTable symbolTable0 = new SymbolTable(9);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanSymbol(symbolTable0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed.str
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("w}O9sV", (-2740));
      assertEquals(0, jSONScanner0.matchStat);
      
      Feature feature0 = Feature.OrderedField;
      jSONScanner0.scanDouble('.');
      jSONScanner0.config(feature0, true);
      jSONScanner0.scanString('b');
      jSONScanner0.info();
      char[] charArray0 = new char[4];
      charArray0[0] = 'b';
      charArray0[1] = '.';
      charArray0[2] = 'b';
      charArray0[3] = 'b';
      SymbolTable symbolTable0 = new SymbolTable(1059);
      jSONScanner0.scanFieldStringArray(charArray0, (-996), symbolTable0);
      assertEquals((-2740), jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("undefined");
      Locale locale0 = Locale.CHINESE;
      jSONScanner0.locale = locale0;
      jSONScanner0.bytesValue();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      linkedList0.clone();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      linkedHashSet0.add("S?");
      locale0.toLanguageTag();
      Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedHashSet0);
      locale0.stripExtensions();
      Locale.forLanguageTag("writeclassname");
      jSONScanner0.np = 1311;
      jSONScanner0.getFeatures();
      jSONScanner0.isEOF();
      jSONScanner0.isRef();
      jSONScanner0.scanDouble('z');
      jSONScanner0.scanDouble('z');
      char[] charArray0 = new char[2];
      charArray0[0] = 'z';
      charArray0[1] = 'z';
      jSONScanner0.scanFieldBoolean(charArray0);
      locale0.toLanguageTag();
      jSONScanner0.integerValue();
      // Undeclared exception!
      try { 
        jSONScanner0.copyTo(1311, 39, charArray0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = '~';
      charArray0[1] = 'j';
      charArray0[2] = 'n';
      charArray0[3] = 'f';
      charArray0[4] = 'I';
      charArray0[5] = 'g';
      charArray0[6] = '\\';
      charArray0[7] = '0';
      // Undeclared exception!
      try { 
        JSONLexerBase.readString(charArray0, 14);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("Bq*6]o");
      jSONReaderScanner0.charAt(102);
      char[] charArray0 = new char[8];
      charArray0[0] = '\u0000';
      charArray0[1] = '\u0000';
      charArray0[2] = '\u0000';
      charArray0[3] = '\u0000';
      charArray0[4] = '\u0000';
      charArray0[5] = '_';
      charArray0[6] = '\u0000';
      charArray0[7] = 'N';
      // Undeclared exception!
      try { 
        JSONLexerBase.readString(charArray0, 102);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = '/';
      charArray0[1] = '';
      charArray0[2] = ':';
      int int0 = (-926);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 119, (-926));
      // Undeclared exception!
      try { 
        jSONReaderScanner0.skipWhitespace();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid comment
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = '`';
      charArray0[1] = 'c';
      charArray0[2] = '+';
      charArray0[3] = 'W';
      char char0 = '%';
      charArray0[4] = '%';
      charArray0[5] = 'w';
      charArray0[6] = '%';
      charArray0[7] = 'S';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 46);
      SymbolTable symbolTable0 = new SymbolTable(1983);
      jSONReaderScanner0.scanFieldDate(charArray0);
      int int0 = 125;
      // Undeclared exception!
      try { 
        symbolTable0.addSymbol("true", 46, (-106), 125);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.SymbolTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = '-';
      charArray0[1] = 'K';
      charArray0[2] = '';
      charArray0[3] = 'n';
      charArray0[4] = '';
      charArray0[5] = 'N';
      charArray0[6] = 'y';
      charArray0[7] = '4';
      charArray0[8] = '|';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 1803);
      char[] charArray1 = new char[5];
      charArray1[0] = '|';
      charArray1[1] = '|';
      charArray1[2] = '';
      charArray1[3] = 'K';
      charArray1[4] = 't';
      jSONReaderScanner0.scanFieldBoolean(charArray1);
      jSONReaderScanner0.scanFieldFloatArray(charArray0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.floatValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      String string0 = "unclosed string : ";
      JSONScanner jSONScanner0 = new JSONScanner("unclosed string : ", 108);
      jSONScanner0.scanString('p');
      jSONScanner0.bytesValue();
      jSONScanner0.getLocale();
      char char0 = '|';
      jSONScanner0.skipWhitespace();
      jSONScanner0.scanDate('|');
      jSONScanner0.nextToken();
      char[] charArray0 = new char[1];
      charArray0[0] = '|';
      jSONScanner0.matchField2(charArray0);
      int int0 = 41;
      SymbolTable symbolTable0 = new SymbolTable(41);
      int int1 = 1755;
      int int2 = 102;
      int int3 = (-4970);
      // Undeclared exception!
      try { 
        symbolTable0.addSymbol(charArray0, 18, 36, 102);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = ',';
      int int0 = 49;
      int int1 = (-2535);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 49, (-2535));
      jSONReaderScanner0.scanFieldDouble(charArray0);
      SimpleTimeZone simpleTimeZone0 = null;
      try {
        simpleTimeZone0 = new SimpleTimeZone(45, "springfox.documentation.spring.web.json.Json", 45, (-2535), 1493, 49, 587, 45, 108, 49, 587, (-1328), 125);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal start month 45
         //
         verifyException("java.util.SimpleTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = 'n';
      charArray0[1] = 'l';
      charArray0[2] = 'R';
      charArray0[3] = '^';
      charArray0[4] = '9';
      charArray0[5] = '&';
      charArray0[6] = 'q';
      charArray0[7] = '%';
      charArray0[8] = 'd';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 35);
      double double0 = jSONReaderScanner0.scanDouble('}');
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("+P*HfXmoO2Bs;i=x");
      jSONReaderScanner0.nextIdent();
      jSONReaderScanner0.isBlankInput();
      char[] charArray0 = new char[6];
      charArray0[0] = 'N';
      charArray0[1] = 'b';
      charArray0[2] = '5';
      charArray0[3] = 'J';
      charArray0[4] = 'x';
      charArray0[5] = 'j';
      // Undeclared exception!
      try { 
        jSONReaderScanner0.arrayCopy((-2268), charArray0, (-2268), (-2268));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = 'a';
      charArray0[1] = '*';
      charArray0[2] = 'X';
      charArray0[3] = 'U';
      charArray0[4] = 'T';
      charArray0[5] = 'z';
      int int0 = 119;
      int int1 = (-2199);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 119, (-2199));
      jSONReaderScanner0.scanFieldDecimal(charArray0);
      JSONScanner jSONScanner0 = new JSONScanner("W.Mgm", (-1));
      jSONReaderScanner0.skipWhitespace();
      jSONScanner0.setToken(119);
      jSONScanner0.scanFieldFloatArray(charArray0);
      jSONReaderScanner0.sp = 119;
      // Undeclared exception!
      try { 
        jSONScanner0.scanNullOrNew();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse null or new
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = 'i';
      charArray0[1] = 'e';
      charArray0[2] = '1';
      charArray0[3] = '1';
      charArray0[4] = '_';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("P9ObVOv1#*r", 67);
      jSONReaderScanner0.isEnabled((-2110), 67);
      double double0 = jSONReaderScanner0.scanDouble('_');
      assertEquals(67, jSONReaderScanner0.getFeatures());
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      String string0 = "&KOF\\[T?I";
      int int0 = 66;
      JSONScanner jSONScanner0 = new JSONScanner("&KOF[T?I", 66);
      char[] charArray0 = null;
      char char0 = ',';
      int int1 = 1886;
      // Undeclared exception!
      try { 
        JSONLexerBase.readString((char[]) null, 1886);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = 'b';
      charArray0[1] = '.';
      charArray0[2] = '[';
      charArray0[3] = '[';
      charArray0[4] = '?';
      charArray0[5] = 'X';
      charArray0[6] = '7';
      charArray0[7] = '[';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 116, 116);
      int int0 = jSONReaderScanner0.getFeatures();
      assertEquals(116, int0);
      assertEquals(0, jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = '0';
      charArray0[1] = '9';
      charArray0[2] = '[';
      charArray0[3] = 'Y';
      charArray0[4] = 'A';
      charArray0[5] = 'G';
      charArray0[6] = '@';
      int int0 = 15;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 15);
      jSONReaderScanner0.skipWhitespace();
      jSONReaderScanner0.sp = 15;
      jSONReaderScanner0.stringVal();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanDecimal('A');
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = '1';
      charArray0[1] = 'g';
      charArray0[2] = 'a';
      charArray0[3] = '\\';
      charArray0[4] = '5';
      int int0 = 67;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 391, 67);
      jSONReaderScanner0.scanFieldBigInteger(charArray0);
      jSONReaderScanner0.scanFloat('V');
      int int1 = 2769;
      int int2 = 32;
      SymbolTable symbolTable0 = new SymbolTable(538);
      // Undeclared exception!
      try { 
        symbolTable0.addSymbol("\":\"", 52, 52, 2769);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      int int0 = 71;
      JSONScanner jSONScanner0 = new JSONScanner("ao!.N6^MY\"j", 71);
      char[] charArray0 = new char[0];
      jSONScanner0.matchField(charArray0);
      char char0 = 'W';
      jSONScanner0.scanBoolean('W');
      jSONScanner0.scanFieldIntArray(charArray0);
      char char1 = 'c';
      jSONScanner0.ch = 'c';
      jSONScanner0.scanFieldDecimal(charArray0);
      jSONScanner0.stringVal();
      jSONScanner0.getLocale();
      int int1 = 825;
      SymbolTable symbolTable0 = new SymbolTable(71);
      int int2 = 97;
      // Undeclared exception!
      try { 
        symbolTable0.addSymbol(charArray0, 825, 97);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 825
         //
         verifyException("com.alibaba.fastjson.parser.SymbolTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("float overflow : ", 92);
      jSONReaderScanner0.putChar('k');
      jSONReaderScanner0.scanUUID('h');
      jSONReaderScanner0.matchStat();
      Calendar calendar0 = MockCalendar.getInstance();
      jSONReaderScanner0.calendar = calendar0;
      char[] charArray0 = new char[4];
      charArray0[0] = 'h';
      charArray0[1] = 'k';
      charArray0[2] = 'k';
      jSONReaderScanner0.scanFieldSymbol(charArray0);
      jSONReaderScanner0.scanString('k');
      charArray0[3] = 'h';
      jSONReaderScanner0.ch = 'h';
      jSONReaderScanner0.scanFieldBigInteger(charArray0);
      jSONReaderScanner0.getTimeZone();
      JSONScanner.checkDate('E', 'k', 'e', 'k', 'h', 'k', (-1970), 994);
      JSONLexerBase.isWhitespace('y');
      SymbolTable symbolTable0 = new SymbolTable(109);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFieldStringArray(charArray0, (-1), symbolTable0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      String string0 = "/pSkf+K)|IR.Q-";
      int int0 = (-58);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("/pSkf+K)|IR.Q-", (-58));
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextIdent();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid comment
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      int int0 = (-1092);
      JSONScanner jSONScanner0 = new JSONScanner("undefined", (-1092));
      char[] charArray0 = new char[6];
      charArray0[0] = 'A';
      charArray0[1] = 'x';
      jSONScanner0.isRef();
      charArray0[2] = 'V';
      charArray0[3] = 'j';
      Class<Object> class0 = Object.class;
      SymbolTable symbolTable0 = new SymbolTable(1283);
      jSONScanner0.scanEnum(class0, symbolTable0, 'x');
      jSONScanner0.scanBoolean('v');
      charArray0[4] = '8';
      charArray0[5] = '^';
      jSONScanner0.scanFieldDecimal(charArray0);
      JSONLexerBase.isWhitespace('8');
      jSONScanner0.scanFieldDecimal(charArray0);
      jSONScanner0.nextIdent();
      jSONScanner0.getCurrent();
      // Undeclared exception!
      try { 
        jSONScanner0.sub_chars((-1010), 3584);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'Z';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 24180);
      jSONReaderScanner0.matchStat();
      String string0 = "&s#n[";
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "&s#n[";
      objectArray0[1] = (Object) jSONReaderScanner0;
      objectArray0[2] = (Object) "&s#n[";
      jSONReaderScanner0.subString(1265, 1265);
      char[] charArray1 = new char[7];
      charArray1[0] = 'Z';
      charArray1[1] = 'Z';
      charArray1[2] = 'Z';
      charArray1[3] = 'Z';
      charArray1[4] = 'Z';
      charArray1[5] = 'Z';
      charArray1[6] = 'Z';
      jSONReaderScanner0.charArrayCompare(charArray1);
      objectArray0[3] = (Object) "&s#n[";
      jSONReaderScanner0.lexError("&s#n[", objectArray0);
      jSONReaderScanner0.scanInt('~');
      int int0 = 192;
      int int1 = 1611;
      int int2 = 3492;
      SymbolTable symbolTable0 = new SymbolTable(192);
      // Undeclared exception!
      try { 
        symbolTable0.addSymbol("Lur*e,7 LTv;", 52429, (-2016), (-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.SymbolTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("InitStringFieldAsEmpty", (-1910102270));
      jSONReaderScanner0.np = 2359;
      assertEquals(0, jSONReaderScanner0.matchStat());
      
      jSONReaderScanner0.scanDate('|');
      assertEquals((-1910102270), jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("new");
      SymbolTable symbolTable0 = new SymbolTable(97);
      jSONScanner0.scanSymbol(symbolTable0);
      char char0 = 's';
      jSONScanner0.scanBoolean('s');
      jSONScanner0.nextToken(46);
      int int0 = 18;
      jSONScanner0.bp = 18;
      // Undeclared exception!
      jSONScanner0.nextToken(223);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("false");
      assertEquals(0, jSONScanner0.matchStat);
      
      char[] charArray0 = new char[3];
      charArray0[0] = '+';
      charArray0[1] = 'b';
      charArray0[2] = 'R';
      jSONScanner0.scanFieldSymbol(charArray0);
      jSONScanner0.scanFalse();
      jSONScanner0.tokenName();
      jSONScanner0.scanLong('S');
      assertEquals(989, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("<B>M^V]$2Ci6J4C s2");
      jSONReaderScanner0.nextToken(94);
      int int0 = 12;
      jSONReaderScanner0.nextToken(12);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.decimalValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(", pos ");
      jSONReaderScanner0.scanDecimal('$');
      jSONReaderScanner0.close();
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner((char[]) null, 101, 3066);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      String string0 = "illegal identifier : ";
      JSONScanner jSONScanner0 = new JSONScanner("illegal identifier : ", 62);
      // Undeclared exception!
      try { 
        jSONScanner0.nextTokenWithColon();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - i, info : pos 0, json : illegal identifier : 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = 'n';
      charArray0[1] = 'x';
      charArray0[2] = 'i';
      charArray0[3] = '>';
      charArray0[4] = '7';
      char char0 = 'o';
      charArray0[5] = 'o';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 55296, 55296);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanNullOrNew();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse new
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      int int0 = 3618;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("WriteClassName", 3618);
      char[] charArray0 = new char[2];
      char char0 = ' ';
      charArray0[0] = ' ';
      charArray0[1] = 'r';
      jSONReaderScanner0.scanFieldFloat(charArray0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.doubleValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = 'V';
      charArray0[1] = 'k';
      charArray0[2] = 'D';
      charArray0[3] = 'p';
      charArray0[4] = 'Y';
      charArray0[5] = ':';
      charArray0[6] = 'X';
      charArray0[7] = 'G';
      charArray0[8] = 'F';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 26376);
      int int0 = jSONReaderScanner0.scanInt('=');
      assertEquals(0, int0);
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("g<");
      jSONScanner0.getCurrent();
      TimeZone timeZone0 = TimeZone.getDefault();
      jSONScanner0.setTimeZone(timeZone0);
      jSONScanner0.stringVal();
      boolean boolean0 = true;
      int int0 = (-122);
      jSONScanner0.token = (-122);
      int int1 = (-1440);
      int int2 = (-2);
      SymbolTable symbolTable0 = null;
      try {
        symbolTable0 = new SymbolTable((-2));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.SymbolTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\":\"", 57);
      char[] charArray0 = new char[8];
      charArray0[0] = '5';
      charArray0[1] = 's';
      charArray0[2] = '`';
      charArray0[3] = '#';
      charArray0[4] = 'y';
      charArray0[5] = '-';
      charArray0[6] = '8';
      charArray0[7] = 's';
      jSONScanner0.scanFieldSymbol(charArray0);
      jSONScanner0.scanUUID('g');
      // Undeclared exception!
      try { 
        jSONScanner0.integerValue();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("scan new error");
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      jSONScanner0.scanStringArray(linkedHashSet0, 'f');
      Feature feature0 = Feature.IgnoreAutoType;
      boolean boolean0 = jSONScanner0.isEnabled(feature0);
      assertEquals((-1), jSONScanner0.matchStat);
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'f';
      charArray0[1] = 'f';
      charArray0[2] = 'f';
      charArray0[3] = '8';
      charArray0[4] = 'b';
      charArray0[5] = 'f';
      charArray0[6] = 'f';
      charArray0[7] = 'f';
      boolean boolean1 = jSONScanner0.matchField2(charArray0);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 102);
      TimeZone timeZone0 = null;
      int int0 = 9997;
      jSONReaderScanner0.scanFieldInt(charArray0);
      SymbolTable symbolTable0 = new SymbolTable(9997);
      // Undeclared exception!
      try { 
        symbolTable0.addSymbol(charArray0, 96, 991, 0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = ',';
      charArray0[1] = '_';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 883);
      jSONReaderScanner0.nextToken();
      assertEquals(16, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      char[] charArray0 = new char[1];
      char char0 = ':';
      charArray0[0] = ':';
      int int0 = 440;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 440, 440);
      char[] charArray1 = new char[6];
      charArray1[0] = ':';
      jSONReaderScanner0.scanLong('d');
      SymbolTable symbolTable0 = null;
      try {
        symbolTable0 = new SymbolTable((-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.SymbolTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = 'V';
      charArray0[1] = 'K';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 43);
      char[] charArray1 = new char[4];
      charArray1[0] = 'V';
      charArray1[1] = 'K';
      charArray1[2] = 'K';
      charArray1[3] = 'K';
      Class<String> class0 = String.class;
      char[] charArray2 = new char[4];
      charArray2[0] = 'V';
      charArray2[1] = 'K';
      charArray2[2] = 'K';
      charArray2[3] = 'V';
      jSONReaderScanner0.scanFieldDecimal(charArray2);
      SymbolTable symbolTable0 = new SymbolTable(1299);
      jSONReaderScanner0.scanEnum(class0, symbolTable0, 'K');
      jSONReaderScanner0.scanFieldDouble(charArray1);
      jSONReaderScanner0.scanFieldIntArray(charArray0);
      Class<Object> class1 = Object.class;
      jSONReaderScanner0.scanFieldStringArray(charArray0, class1);
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner(charArray0, 43);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = 'c';
      charArray0[1] = '%';
      charArray0[2] = 'm';
      charArray0[3] = '^';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 999);
      jSONReaderScanner0.scanFieldUUID(charArray0);
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner((String) null, (-1069));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("", (-2110));
      char[] charArray0 = new char[5];
      charArray0[0] = 'i';
      charArray0[1] = 'e';
      charArray0[2] = '1';
      jSONScanner0.putChar(')');
      jSONScanner0.info();
      charArray0[3] = 't';
      charArray0[4] = '_';
      jSONScanner0.scanFieldDouble(charArray0);
      // Undeclared exception!
      jSONScanner0.scanString();
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("");
      jSONReaderScanner0.scanNumber();
      char[] charArray0 = new char[2];
      charArray0[0] = 'S';
      charArray0[1] = '>';
      jSONReaderScanner0.bp = 802;
      jSONReaderScanner0.scanFieldLong(charArray0);
      jSONReaderScanner0.stringDefaultValue = "";
      jSONReaderScanner0.close();
      int int0 = 13;
      jSONReaderScanner0.scanFieldBoolean(charArray0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.subString(13, (-86));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -86
         //
         verifyException("com.alibaba.fastjson.parser.JSONReaderScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("Set", 2982);
      char char0 = 'G';
      jSONScanner0.scanLong('G');
      // Undeclared exception!
      try { 
        jSONScanner0.integerValue();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("false", 980);
      char[] charArray0 = new char[9];
      charArray0[0] = 't';
      charArray0[1] = 'O';
      charArray0[2] = 'm';
      charArray0[3] = '/';
      charArray0[4] = 'u';
      charArray0[5] = 'f';
      charArray0[6] = 'E';
      charArray0[7] = 'E';
      charArray0[8] = 'k';
      boolean boolean0 = jSONReaderScanner0.scanFieldBoolean(charArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("new", (-2426));
      char[] charArray0 = new char[7];
      charArray0[0] = '4';
      char char0 = 'B';
      jSONReaderScanner0.scanNullOrNew();
      charArray0[1] = 'B';
      charArray0[2] = 'Z';
      jSONReaderScanner0.stringDefaultValue = "undefined";
      charArray0[3] = '=';
      jSONReaderScanner0.skipWhitespace();
      charArray0[4] = 'T';
      char char1 = 'H';
      charArray0[5] = 'H';
      charArray0[6] = '@';
      // Undeclared exception!
      try { 
        jSONReaderScanner0.arrayCopy((-2426), charArray0, 2412, (-197));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("new");
      char char0 = 's';
      jSONScanner0.scanBoolean('s');
      jSONScanner0.nextToken(46);
      int int0 = 18;
      jSONScanner0.bp = 18;
      // Undeclared exception!
      jSONScanner0.nextToken(223);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      int int0 = (-295);
      JSONScanner jSONScanner0 = new JSONScanner("unclosed.str", (-295));
      char[] charArray0 = new char[8];
      jSONScanner0.scanFieldDouble(charArray0);
      charArray0[0] = 'Q';
      charArray0[1] = '~';
      jSONScanner0.matchField(charArray0);
      charArray0[2] = '#';
      charArray0[3] = '#';
      jSONScanner0.scanISO8601DateIfMatch(true);
      charArray0[4] = ']';
      charArray0[5] = 'b';
      charArray0[6] = 'c';
      charArray0[7] = 'p';
      jSONScanner0.scanFieldUUID(charArray0);
      Class<Integer> class0 = Integer.class;
      jSONScanner0.scanFieldStringArray(charArray0, class0);
      JSONReaderScanner jSONReaderScanner0 = null;
      try {
        jSONReaderScanner0 = new JSONReaderScanner(charArray0, (-295));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.CharArrayReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      String string0 = "dnhZ`q";
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("dnhZ`q");
      jSONReaderScanner0.isRef();
      jSONReaderScanner0.matchStat = 117;
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanHex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal state. d
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("p+$z'`W4>pQ");
      Class<Object> class0 = Object.class;
      // Undeclared exception!
      try { 
        jSONScanner0.scanNullOrNew();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse null or new
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("TreeSet");
      jSONScanner0.isBlankInput();
      jSONScanner0.getLocale();
      char[] charArray0 = new char[3];
      charArray0[0] = '';
      charArray0[1] = '&';
      int int0 = 10;
      int int1 = (-1622);
      SymbolTable symbolTable0 = null;
      try {
        symbolTable0 = new SymbolTable(0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1185263
         //
         verifyException("com.alibaba.fastjson.parser.SymbolTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      String string0 = ",O~}jxkn";
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(",O~}jxkn", (-1288));
      char[] charArray0 = new char[1];
      charArray0[0] = 'R';
      jSONReaderScanner0.scanFieldDate(charArray0);
      char[] charArray1 = new char[0];
      Class<Object> class0 = Object.class;
      jSONReaderScanner0.scanFieldStringArray(charArray1, class0);
      jSONReaderScanner0.charArrayCompare(charArray1);
      jSONReaderScanner0.scanUUID('d');
      // Undeclared exception!
      try { 
        jSONReaderScanner0.copyTo(815, (-925), charArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("IO=WYg~L Ay");
      int int0 = (-1726349657);
      jSONReaderScanner0.token = (-1726349657);
      char[] charArray0 = new char[5];
      charArray0[0] = 'Y';
      charArray0[1] = 'y';
      charArray0[2] = 'd';
      charArray0[3] = 'E';
      charArray0[4] = 'J';
      jSONReaderScanner0.scanFieldInt(charArray0);
      int int1 = 2496;
      jSONReaderScanner0.subString(16, 2496);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextTokenWithColon(471);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - I, info : 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = '\'';
      charArray0[1] = '>';
      charArray0[2] = 't';
      charArray0[3] = '0';
      charArray0[4] = '5';
      charArray0[5] = '5';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 32);
      jSONReaderScanner0.scanFieldLong(charArray0);
      jSONReaderScanner0.scanInt('i');
      jSONReaderScanner0.scanString('J');
      jSONReaderScanner0.scanType("true");
      // Undeclared exception!
      try { 
        jSONReaderScanner0.matchField2(charArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("new");
      jSONScanner0.nextToken();
      // Undeclared exception!
      try { 
        jSONScanner0.numberString();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("java.time.LocalDateTime");
      jSONReaderScanner0.scanNumber();
      char[] charArray0 = new char[0];
      JSONLexerBase.readString(charArray0, 0);
      char[] charArray1 = new char[0];
      jSONReaderScanner0.scanFieldString(charArray1);
      int int0 = 97;
      SymbolTable symbolTable0 = null;
      try {
        symbolTable0 = new SymbolTable((-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.SymbolTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = '(';
      charArray0[1] = '7';
      charArray0[2] = '%';
      charArray0[3] = 'k';
      charArray0[4] = '\'';
      charArray0[5] = '+';
      charArray0[6] = ' ';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 2337);
      boolean boolean0 = jSONReaderScanner0.matchField(charArray0);
      assertEquals('\u001A', jSONReaderScanner0.getCurrent());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("^3|)]W!5Yc");
      char[] charArray0 = new char[6];
      charArray0[0] = 'h';
      charArray0[1] = '@';
      charArray0[2] = ']';
      charArray0[3] = '0';
      jSONReaderScanner0.setToken((-1078));
      charArray0[4] = 'L';
      jSONReaderScanner0.scanBoolean('T');
      charArray0[5] = '*';
      jSONReaderScanner0.scanFieldString(charArray0);
      jSONReaderScanner0.scanFieldIntArray(charArray0);
      jSONReaderScanner0.nextToken();
      assertEquals(1, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("^3}ykena-7Xq@y~C*");
      Class<Integer> class0 = Integer.class;
      jSONReaderScanner0.scanEnum(class0, (SymbolTable) null, 'o');
      jSONReaderScanner0.scanDouble('F');
      jSONReaderScanner0.sub_chars(17, 17);
      Feature feature0 = Feature.SortFeidFastMatch;
      jSONReaderScanner0.isEnabled(feature0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.charAt(51068);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("");
      char[] charArray0 = new char[9];
      charArray0[0] = 'c';
      charArray0[1] = ';';
      charArray0[2] = 'r';
      charArray0[3] = 'j';
      charArray0[4] = 'p';
      charArray0[5] = 'T';
      charArray0[6] = 'v';
      charArray0[7] = 'W';
      charArray0[8] = 'v';
      jSONScanner0.scanFieldLong(charArray0);
      char[] charArray1 = new char[6];
      charArray1[0] = '?';
      charArray1[1] = 'U';
      jSONScanner0.scanFieldDate(charArray1);
      charArray1[2] = 'p';
      charArray1[3] = ':';
      charArray1[4] = 'X';
      charArray1[5] = ',';
      jSONScanner0.scanFieldSymbol(charArray1);
      jSONScanner0.isBlankInput();
      jSONScanner0.scanFieldDate(charArray1);
      assertEquals(20, jSONScanner0.token());
      
      boolean boolean0 = jSONScanner0.scanBoolean('W');
      assertEquals(20, jSONScanner0.token());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("kJk");
      char[] charArray0 = new char[6];
      charArray0[0] = '>';
      charArray0[1] = 'a';
      charArray0[2] = '-';
      charArray0[3] = '$';
      charArray0[4] = 'L';
      charArray0[5] = 'g';
      jSONReaderScanner0.scanFieldBigInteger(charArray0);
      jSONReaderScanner0.pos();
      char[] charArray1 = new char[0];
      jSONReaderScanner0.scanFieldInt(charArray1);
      assertEquals((-1), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = 'V';
      charArray0[1] = '2';
      charArray0[2] = '>';
      charArray0[3] = '{';
      charArray0[4] = 's';
      charArray0[5] = 'D';
      int int0 = 83;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 83, 83);
      jSONReaderScanner0.scanUUID('Z');
      jSONReaderScanner0.features = (-2845);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed string : \u001A
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("scan true error", 54);
      Feature feature0 = Feature.NonStringKeyAsString;
      jSONScanner0.config(feature0, true);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("scan true error");
      // Undeclared exception!
      try { 
        jSONReaderScanner0.decimalValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("^[3f`qw5@>V^N+O");
      char[] charArray0 = new char[5];
      jSONScanner0.putChar('_');
      charArray0[0] = '\\';
      charArray0[1] = 'K';
      charArray0[2] = '%';
      charArray0[3] = 'n';
      Class<Object> class0 = Object.class;
      SymbolTable symbolTable0 = null;
      try {
        symbolTable0 = new SymbolTable(0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1185263
         //
         verifyException("com.alibaba.fastjson.parser.SymbolTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = 'f';
      charArray0[1] = 'F';
      charArray0[2] = ']';
      charArray0[3] = 'O';
      charArray0[4] = '#';
      charArray0[5] = '}';
      charArray0[6] = 'p';
      charArray0[7] = '#';
      charArray0[8] = 'm';
      int int0 = 87;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 87, 87);
      jSONReaderScanner0.bp = 5;
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextToken();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("WriteClassName");
      char[] charArray0 = new char[2];
      charArray0[0] = ',';
      Locale locale0 = new Locale("true", "=<8f)JnboBx");
      jSONScanner0.setLocale(locale0);
      assertEquals(0, jSONScanner0.matchStat);
      
      charArray0[1] = 'f';
      SymbolTable symbolTable0 = new SymbolTable(43);
      jSONScanner0.scanFieldStringArray(charArray0, 161, symbolTable0);
      assertEquals(989, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("Zq=,]WI[aht ,(LO=w", 39);
      float float0 = jSONScanner0.scanFloat('');
      assertEquals(0.0F, float0, 0.01F);
      
      char[] charArray0 = new char[8];
      charArray0[0] = '';
      charArray0[1] = '';
      charArray0[2] = '';
      charArray0[3] = '';
      charArray0[4] = '';
      charArray0[5] = '';
      charArray0[6] = '';
      charArray0[7] = '';
      jSONScanner0.scanFieldInt(charArray0);
      assertEquals(39, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(" - ", 1650);
      char char0 = 'A';
      jSONScanner0.scanInt('A');
      jSONScanner0.isRef();
      jSONScanner0.stringDefaultValue = "true";
      jSONScanner0.features = 1650;
      char[] charArray0 = new char[0];
      jSONScanner0.resetStringPosition();
      // Undeclared exception!
      try { 
        JSONLexerBase.readString(charArray0, (-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("uR5[a)|4)`N~ 1_");
      char[] charArray0 = new char[1];
      charArray0[0] = '&';
      jSONScanner0.scanFieldFloatArray2(charArray0);
      assertEquals((-2), jSONScanner0.matchStat);
      
      jSONScanner0.scanUUID('.');
      jSONScanner0.stringVal();
      assertEquals(989, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      int int0 = 34;
      JSONScanner jSONScanner0 = new JSONScanner("TreeSet", 34);
      jSONScanner0.next();
      int int1 = 2781;
      SymbolTable symbolTable0 = new SymbolTable(2781);
      // Undeclared exception!
      try { 
        jSONScanner0.scanSymbol(symbolTable0, 'r');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed.str
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      char[] charArray0 = new char[0];
      int int0 = 16;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 16, 2805);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      ArrayList<Locale> arrayList0 = new ArrayList<Locale>(34);
      Locale.lookup(linkedList0, arrayList0);
      jSONReaderScanner0.locale = null;
      jSONReaderScanner0.scanFieldBigInteger(charArray0);
      jSONReaderScanner0.nextToken();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanTrue();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse true
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("java.time.ZoneId");
      char[] charArray0 = new char[1];
      charArray0[0] = 'm';
      jSONReaderScanner0.longValue();
      Class<Integer> class0 = Integer.class;
      jSONReaderScanner0.scanFieldStringArray(charArray0, class0);
      jSONReaderScanner0.nextToken(9);
      jSONReaderScanner0.tokenName();
      jSONReaderScanner0.isEOF();
      jSONReaderScanner0.scanFieldDouble(charArray0);
      System.setCurrentTimeMillis(33238344207745342L);
      jSONReaderScanner0.scanBoolean('%');
      // Undeclared exception!
      try { 
        jSONReaderScanner0.sub_chars(53, (-3146));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -3146
         //
         verifyException("com.alibaba.fastjson.parser.JSONReaderScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      String string0 = "75e";
      JSONScanner jSONScanner0 = new JSONScanner("75e");
      char[] charArray0 = new char[3];
      char char0 = 'u';
      charArray0[0] = 'u';
      char char1 = '-';
      char char2 = 'a';
      char char3 = 'H';
      char char4 = 'C';
      jSONScanner0.nextToken();
      jSONScanner0.ch = 'C';
      // Undeclared exception!
      try { 
        jSONScanner0.nextIdent();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      int int0 = (-409);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("scan true error", (-409));
      int int1 = (-1739);
      HashSet<String> hashSet0 = new HashSet<String>();
      hashSet0.add("scan true error");
      hashSet0.add((String) null);
      hashSet0.add((String) null);
      char char0 = '^';
      jSONReaderScanner0.scanStringArray(hashSet0, '^');
      SymbolTable symbolTable0 = null;
      try {
        symbolTable0 = new SymbolTable((-1739));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.SymbolTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = '/';
      charArray0[1] = 'x';
      charArray0[2] = 'l';
      charArray0[3] = ';';
      charArray0[4] = '';
      charArray0[5] = '1';
      charArray0[6] = 'V';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 32);
      jSONReaderScanner0.scanFieldSymbol(charArray0);
      jSONReaderScanner0.scanSymbolWithSeperator((SymbolTable) null, 'V');
      jSONReaderScanner0.getTimeZone();
      jSONReaderScanner0.setToken(1016);
      jSONReaderScanner0.isEOF();
      assertEquals(1016, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("hT2-/|>*", 49);
      char[] charArray0 = new char[5];
      charArray0[0] = 'D';
      jSONScanner0.scanBoolean('D');
      charArray0[1] = 'S';
      charArray0[2] = '`';
      charArray0[3] = 'Z';
      charArray0[4] = ';';
      SymbolTable symbolTable0 = new SymbolTable(1222);
      jSONScanner0.scanFieldStringArray(charArray0, 49, symbolTable0);
      char[] charArray1 = new char[4];
      charArray1[0] = 'e';
      charArray1[1] = 'T';
      charArray1[2] = '=';
      jSONScanner0.scanISO8601DateIfMatch(false);
      charArray1[3] = 'k';
      jSONScanner0.scanFieldDouble(charArray1);
      int int0 = jSONScanner0.token();
      assertEquals((-2), jSONScanner0.matchStat);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = 's';
      char char0 = '#';
      charArray0[1] = '#';
      int int0 = 4188;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 4188, 4188);
      Class<Object> class0 = Object.class;
      jSONReaderScanner0.newCollectionByType(class0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.doubleValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(" >i%;J!I}{7@5WD/");
      char[] charArray0 = new char[5];
      charArray0[0] = 'B';
      charArray0[1] = 'B';
      charArray0[2] = 'B';
      charArray0[3] = 'B';
      charArray0[4] = 'B';
      jSONScanner0.scanFieldLong(charArray0);
      jSONScanner0.scanFloat('B');
      jSONScanner0.next();
      StringReader stringReader0 = null;
      try {
        stringReader0 = new StringReader((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = ';';
      charArray0[1] = 'r';
      charArray0[2] = '%';
      charArray0[3] = 'G';
      char char0 = ',';
      charArray0[4] = ',';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 4450, 4450);
      char[] charArray1 = new char[4];
      charArray1[0] = 'G';
      charArray1[1] = ';';
      charArray1[2] = '%';
      SymbolTable symbolTable0 = new SymbolTable(4450);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFieldStringArray(charArray0, 4450, symbolTable0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = '.';
      charArray0[1] = '5';
      charArray0[2] = 'l';
      charArray0[3] = '1';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 116);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(116, 0, 34);
      jSONReaderScanner0.scanDouble(' ');
      jSONReaderScanner0.calendar = (Calendar) mockGregorianCalendar0;
      jSONReaderScanner0.scanFieldFloatArray2(charArray0);
      jSONReaderScanner0.stringVal();
      jSONReaderScanner0.scanType("-0a\"2;UkehQGtuYuT!1");
      // Undeclared exception!
      try { 
        jSONReaderScanner0.decimalValue(false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("6eg5f6O");
      jSONScanner0.pos();
      char char0 = 'h';
      char char1 = 'y';
      char char2 = 'm';
      jSONScanner0.scanString('s');
      // Undeclared exception!
      try { 
        jSONScanner0.setTimeZone('h', 'y', 'm');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      String string0 = "Set";
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("Set");
      char char0 = 'N';
      jSONReaderScanner0.scanDecimal('N');
      SymbolTable symbolTable0 = null;
      try {
        symbolTable0 = new SymbolTable((-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.SymbolTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("", 1884);
      jSONReaderScanner0.scanInt('1');
      jSONReaderScanner0.features = 110;
      jSONReaderScanner0.getCalendar();
      JSONScanner jSONScanner0 = new JSONScanner("");
      int int0 = 783;
      jSONScanner0.scanDouble('4');
      // Undeclared exception!
      try { 
        jSONScanner0.scanIdent();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("(E>[O3,EM8'waxHio");
      jSONScanner0.scanString('\"');
      int int0 = 3155;
      int int1 = 1519;
      int int2 = 34;
      int int3 = 36;
      SymbolTable symbolTable0 = new SymbolTable(36);
      // Undeclared exception!
      try { 
        symbolTable0.addSymbol((String) null, 3155, (-842), 3155, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.SymbolTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = '$';
      charArray0[1] = 'g';
      charArray0[2] = '6';
      int int0 = 62;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 47, 62);
      jSONReaderScanner0.nextIdent();
      jSONReaderScanner0.close();
      Class<Integer> class0 = Integer.class;
      jSONReaderScanner0.scanFieldStringArray(charArray0, class0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.close();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = '/';
      charArray0[1] = 'x';
      charArray0[2] = 'l';
      charArray0[3] = ';';
      charArray0[4] = '';
      charArray0[5] = '1';
      charArray0[6] = 'V';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 32);
      jSONReaderScanner0.scanSymbolWithSeperator((SymbolTable) null, 'V');
      jSONReaderScanner0.getTimeZone();
      jSONReaderScanner0.setToken(1016);
      jSONReaderScanner0.isEOF();
      assertEquals(1016, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = 'g';
      charArray0[1] = 'd';
      char char0 = 'a';
      charArray0[2] = 'a';
      charArray0[3] = 'X';
      int int0 = 730;
      int int1 = 2922;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 730, 2922);
      jSONReaderScanner0.scanFieldBoolean(charArray0);
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner(charArray0, 730);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("kFAFGJIz+zZO", 32);
      char[] charArray0 = new char[8];
      charArray0[0] = 'y';
      charArray0[1] = 'g';
      charArray0[2] = 'J';
      charArray0[3] = 'z';
      charArray0[4] = 'Q';
      charArray0[5] = 'Y';
      charArray0[6] = '3';
      charArray0[7] = '+';
      jSONScanner0.scanFieldBigInteger(charArray0);
      char char0 = '.';
      char char1 = '8';
      char char2 = 'H';
      int int0 = 32;
      Class<Integer> class0 = Integer.class;
      SymbolTable symbolTable0 = new SymbolTable(87);
      // Undeclared exception!
      try { 
        symbolTable0.addSymbol("kFAFGJIz+zZO", 32, (-540), (-2));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.SymbolTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("kVVX!n-Hh&W9lHB0");
      JSONScanner jSONScanner0 = new JSONScanner("kVVX!n-Hh&W9lHB0");
      char char0 = 'B';
      jSONScanner0.isRef();
      char char1 = 'Q';
      // Undeclared exception!
      try { 
        jSONScanner0.setTimeZone('B', 'Q', 'Q');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = 's';
      charArray0[1] = 'c';
      charArray0[2] = '\\';
      int int0 = 0;
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 0, 0);
      jSONScanner0.scanUUID('s');
      int int1 = 0;
      jSONScanner0.bytesValue();
      jSONScanner0.scanFieldFloatArray(charArray0);
      // Undeclared exception!
      try { 
        jSONScanner0.scanTrue();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse true
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("WriteClassName");
      assertEquals(0, jSONScanner0.matchStat);
      
      char[] charArray0 = new char[2];
      charArray0[0] = ',';
      charArray0[1] = 'f';
      SymbolTable symbolTable0 = new SymbolTable(43);
      jSONScanner0.scanFieldStringArray(charArray0, 161, symbolTable0);
      assertEquals(989, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      char[] charArray0 = new char[3];
      int int0 = (-3918);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 83, (-3918));
      jSONReaderScanner0.intValue();
      char char0 = '!';
      jSONReaderScanner0.matchStat = 1904;
      // Undeclared exception!
      try { 
        jSONReaderScanner0.decimalValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = '^';
      charArray0[1] = 'Y';
      int int0 = 1;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 1);
      jSONReaderScanner0.scanNumber();
      jSONReaderScanner0.scanFieldDouble(charArray0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.skipComment();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid comment
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      int int0 = 980;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("false", 980);
      char[] charArray0 = new char[9];
      charArray0[0] = 't';
      charArray0[2] = 't';
      charArray0[3] = '/';
      char char0 = 'u';
      charArray0[4] = 'u';
      charArray0[5] = 'f';
      Class<Integer> class0 = Integer.class;
      // Undeclared exception!
      try { 
        jSONReaderScanner0.newCollectionByType(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.Integer
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = 'o';
      charArray0[1] = 'C';
      charArray0[2] = 'v';
      charArray0[3] = 'v';
      charArray0[4] = '|';
      charArray0[5] = 'S';
      charArray0[6] = ')';
      charArray0[7] = '7';
      charArray0[8] = 'p';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 114, 114);
      int int0 = jSONReaderScanner0.scanType("<init>");
      assertEquals(114, jSONReaderScanner0.getFeatures());
      assertEquals((-2), int0);
      assertEquals(0, jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 116, (-672));
      jSONReaderScanner0.scanFieldIntArray(charArray0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextTokenWithColon(2072);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - \u0000, info : 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("}O3`9ZZ:!1M1do", 3626);
      jSONScanner0.scanIdent();
      jSONScanner0.setToken(168);
      jSONScanner0.scanBoolean('l');
      // Undeclared exception!
      try { 
        jSONScanner0.scanSymbolUnQuoted((SymbolTable) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal identifier : `pos 3, json : }O3`9ZZ:!1M1do
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = ':';
      charArray0[1] = '+';
      char char0 = 'o';
      charArray0[2] = 'o';
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner(charArray0, 55);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("u*9p$;f;qy2/:");
      char[] charArray0 = new char[2];
      SymbolTable symbolTable0 = new SymbolTable(45);
      symbolTable0.addSymbol(charArray0, 0, 0, 0);
      jSONReaderScanner0.scanSymbol(symbolTable0);
      charArray0[0] = 'w';
      charArray0[1] = 'C';
      Class<Object> class0 = Object.class;
      jSONReaderScanner0.scanIdent();
      jSONReaderScanner0.scanFieldStringArray(charArray0, class0);
      jSONReaderScanner0.scanNumber();
      jSONReaderScanner0.isEOF();
      jSONReaderScanner0.nextToken(45);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFalse();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("f");
      // Undeclared exception!
      try { 
        jSONScanner0.floatValue();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }
}
