/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 03:38:55 GMT 2018
 */

package org.freehep.math.minuit;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.freehep.math.minuit.FCNBase;
import org.freehep.math.minuit.MnCross;
import org.freehep.math.minuit.MnFunctionCross;
import org.freehep.math.minuit.MnStrategy;
import org.freehep.math.minuit.MnUserParameterState;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class MnFunctionCross_ESTest extends MnFunctionCross_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(3063.5862446014953, 3063.5862446014953, 3063.5862446014953, 232.4223031, (-3892.44)).when(fCNBase0).valueOf(any(double[].class));
      double[] doubleArray0 = new double[3];
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(doubleArray0, doubleArray0);
      MnStrategy mnStrategy0 = new MnStrategy(0);
      mnStrategy0.setMediumStrategy();
      mnStrategy0.setHessianG2Tolerance(0);
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, 232.4223031, mnStrategy0, 0.0);
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      MnCross mnCross0 = mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, 639.744, 0);
      assertNotNull(mnCross0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(fCNBase0).valueOf(any(double[].class));
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 1128.469863237111;
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(doubleArray0, doubleArray0);
      MnStrategy mnStrategy0 = new MnStrategy(3);
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, 4.0, mnStrategy0, (-4560.831203825));
      int[] intArray0 = new int[0];
      MnCross mnCross0 = mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, 1452.9999999999998, 869);
      assertNotNull(mnCross0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(3063.5862446014953, 3063.5862446014953, 3063.5862446014953, 3063.5862446014953, (-3892.44)).when(fCNBase0).valueOf(any(double[].class));
      double[] doubleArray0 = new double[3];
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(doubleArray0, doubleArray0);
      MnStrategy mnStrategy0 = new MnStrategy(0);
      mnStrategy0.setMediumStrategy();
      mnStrategy0.setHessianG2Tolerance(0);
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, 3063.5862446014953, mnStrategy0, 0.0);
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      mnStrategy0.setHessianGradientNCycles(0);
      // Undeclared exception!
      try { 
        mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, 0.1, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.freehep.math.minuit.MnFunctionCross", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      double double0 = (-204.93282593);
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(3065.5341577421905, 3065.5341577421905, 3065.5341577421905, (-204.93282593), 3065.5341577421905).when(fCNBase0).valueOf(any(double[].class));
      double[] doubleArray0 = new double[5];
      doubleArray0[1] = 0.1;
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(doubleArray0, doubleArray0);
      MnStrategy mnStrategy0 = new MnStrategy();
      mnUserParameterState0.setLowerLimit(0, 0.1);
      mnStrategy0.setHessianG2Tolerance(0.0);
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, 100.0, mnStrategy0, 0.0);
      mnStrategy0.setLowStrategy();
      int[] intArray0 = new int[2];
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = (-4250.68462);
      doubleArray1[2] = 100.0;
      int int0 = 2131334684;
      // Undeclared exception!
      mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray1, 0, 2131334684);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(2.0, 2.0, 3247.902482473745).when(fCNBase0).valueOf(any(double[].class));
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = new double[23];
      doubleArray1[0] = 1.0;
      doubleArray1[2] = 0.0;
      doubleArray1[3] = 0.0;
      doubleArray1[4] = 0.0;
      doubleArray1[5] = 3247.902482473745;
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(doubleArray0, doubleArray1);
      MnStrategy mnStrategy0 = new MnStrategy(140);
      mnStrategy0.setMediumStrategy();
      mnStrategy0.setHessianG2Tolerance(627.76);
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, 0.5, mnStrategy0, 0.0);
      int[] intArray0 = new int[0];
      MnCross mnCross0 = mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray1, 0.0, 2);
      assertNotNull(mnCross0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(1266.49, 1266.49, 1266.49, 1266.49, 0.0).when(fCNBase0).valueOf(any(double[].class));
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = new double[6];
      doubleArray1[1] = 4.692707250682979;
      doubleArray1[1] = 1.0;
      doubleArray1[2] = 0.0;
      doubleArray1[3] = 0.0;
      doubleArray1[4] = 0.0;
      doubleArray1[5] = (-3201.619047);
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(doubleArray0, doubleArray1);
      MnStrategy mnStrategy0 = new MnStrategy();
      mnStrategy0.setMediumStrategy();
      mnStrategy0.setHessianG2Tolerance(627.76);
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, 0.0, mnStrategy0, 0.0);
      int[] intArray0 = new int[0];
      MnCross mnCross0 = mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray1, 1.0, 2);
      assertNotNull(mnCross0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(3247.402482473745, 1.0, (-985.4847), (-50.44006341635), 1.0).when(fCNBase0).valueOf(any(double[].class));
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = 1.0;
      doubleArray1[1] = 1.0;
      doubleArray1[2] = 0.0;
      doubleArray1[3] = 0.0;
      doubleArray1[4] = 0.0;
      doubleArray1[5] = (-3201.619047);
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(doubleArray0, doubleArray1);
      MnStrategy mnStrategy0 = new MnStrategy(140);
      mnStrategy0.setMediumStrategy();
      mnStrategy0.setHessianG2Tolerance(627.76);
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, 0.5, mnStrategy0, 0.0);
      int[] intArray0 = new int[0];
      MnCross mnCross0 = mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray1, 1.0, 2);
      assertNotNull(mnCross0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(1266.49, 1266.49, 1266.49, 1266.49, 0.0).when(fCNBase0).valueOf(any(double[].class));
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = 1.0;
      doubleArray1[1] = 1.0;
      doubleArray1[2] = 1.0;
      doubleArray1[4] = 0.0;
      doubleArray1[5] = (-3201.619047);
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(doubleArray0, doubleArray1);
      MnStrategy mnStrategy0 = new MnStrategy();
      mnStrategy0.setMediumStrategy();
      mnStrategy0.setHessianG2Tolerance(627.76);
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, 1.0, mnStrategy0, 0.0);
      int[] intArray0 = new int[0];
      MnCross mnCross0 = mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, 1.0, (-281));
      assertNotNull(mnCross0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn((-154.064865826269), (-154.064865826269), 0.0, 0.0, 0.0).when(fCNBase0).valueOf(any(double[].class));
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = 1.0;
      doubleArray1[1] = 1.0;
      doubleArray1[2] = 0.0;
      doubleArray1[5] = (-3201.619047);
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(doubleArray0, doubleArray1);
      MnStrategy mnStrategy0 = new MnStrategy(140);
      mnStrategy0.setMediumStrategy();
      mnStrategy0.setHessianG2Tolerance(3722.96232063);
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, 4283.89, mnStrategy0, 1.0);
      int[] intArray0 = new int[0];
      MnCross mnCross0 = mnFunctionCross0.cross(intArray0, doubleArray1, doubleArray1, (-4466.649397883533), (-2126273116));
      assertNotNull(mnCross0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[1] = 0.1;
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(doubleArray0, doubleArray0);
      MnStrategy mnStrategy0 = new MnStrategy(456);
      mnStrategy0.setMediumStrategy();
      mnStrategy0.setHessianG2Tolerance(0.0);
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(fCNBase0).valueOf(any(double[].class));
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, 0.0, mnStrategy0, 0.0);
      int[] intArray0 = new int[0];
      MnCross mnCross0 = mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, (-3201.619047), 456);
      mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, (-1852.02553812), (-2296));
      MnCross mnCross1 = mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, 0.0, 140);
      assertNotSame(mnCross1, mnCross0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(3063.5862446014953, 3063.5862446014953, 3063.5862446014953, 200.39418757076288, 200.39418757076288).when(fCNBase0).valueOf(any(double[].class));
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 3063.5862446014953;
      doubleArray0[1] = 0.1;
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(doubleArray0, doubleArray0);
      MnStrategy mnStrategy0 = new MnStrategy(0);
      mnStrategy0.setLowStrategy();
      mnStrategy0.setGradientNCycles(0);
      mnUserParameterState0.setLowerLimit(0, Double.POSITIVE_INFINITY);
      mnStrategy0.setHessianG2Tolerance(2170.3109485614596);
      double double0 = 100.0;
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, 100.0, mnStrategy0, 3063.5862446014953);
      mnStrategy0.setLowStrategy();
      int[] intArray0 = new int[0];
      int[] intArray1 = new int[1];
      mnStrategy0.setLowStrategy();
      intArray1[0] = 0;
      mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, 2170.3109485614596, (-1));
      mnStrategy0.setHessianG2Tolerance(0.1);
      mnStrategy0.setHessianGradientNCycles(0);
      // Undeclared exception!
      mnFunctionCross0.cross(intArray1, doubleArray0, doubleArray0, 2.0259349753359857E-12, 0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(3065.5341577421905, 3065.5341577421905, 3065.5341577421905, (-204.93282593), 3065.5341577421905).when(fCNBase0).valueOf(any(double[].class));
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 3065.5341577421905;
      doubleArray0[1] = 3065.5341577421905;
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(doubleArray0, doubleArray0);
      MnStrategy mnStrategy0 = new MnStrategy(0);
      mnStrategy0.setLowStrategy();
      mnUserParameterState0.setLowerLimit(0, Double.POSITIVE_INFINITY);
      mnStrategy0.setHessianG2Tolerance(3065.5341577421905);
      mnStrategy0.setHessianNCycles(0);
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, 100.0, mnStrategy0, 3065.5341577421905);
      mnStrategy0.setLowStrategy();
      int[] intArray0 = new int[2];
      intArray0[0] = 0;
      double[] doubleArray1 = new double[3];
      double[] doubleArray2 = new double[3];
      doubleArray2[0] = (-4250.68462);
      doubleArray0[4] = 3065.5341577421905;
      mnFunctionCross0.cross(intArray0, doubleArray2, doubleArray2, 0.0, 2131334684);
      // Undeclared exception!
      mnFunctionCross0.cross(intArray0, doubleArray1, doubleArray1, (-62.40435121659742), 0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(3063.5862446014953, 3063.5862446014953, 3063.5862446014953, 232.4223031, 232.4223031).when(fCNBase0).valueOf(any(double[].class));
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 3063.5862446014953;
      doubleArray0[1] = 0.1;
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(doubleArray0, doubleArray0);
      MnStrategy mnStrategy0 = new MnStrategy();
      mnStrategy0.setMediumStrategy();
      mnStrategy0.setLowStrategy();
      mnStrategy0.setHessianG2Tolerance(2171.563092045495);
      mnStrategy0.setHessianG2Tolerance(3063.5862446014953);
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, 100.0, mnStrategy0, 3063.5862446014953);
      mnStrategy0.setLowStrategy();
      int[] intArray0 = new int[1];
      mnStrategy0.setLowStrategy();
      intArray0[0] = 0;
      MnCross mnCross0 = mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, 1389.35922, (-2126008811));
      assertNotNull(mnCross0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(1314.699950643211, 1314.699950643211, 1314.699950643211, 2309.01767894475, 1.0).when(fCNBase0).valueOf(any(double[].class));
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = 1.0;
      doubleArray1[1] = 1.0;
      doubleArray1[2] = 0.0;
      doubleArray1[3] = 0.0;
      doubleArray1[4] = 0.0;
      doubleArray1[5] = 0.0;
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(doubleArray0, doubleArray1);
      MnStrategy mnStrategy0 = new MnStrategy(140);
      mnStrategy0.setMediumStrategy();
      mnStrategy0.setHessianG2Tolerance(627.76);
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, 0.5, mnStrategy0, 2309.01767894475);
      int[] intArray0 = new int[0];
      MnCross mnCross0 = mnFunctionCross0.cross(intArray0, doubleArray1, doubleArray1, 0.0, 140);
      assertNotNull(mnCross0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = new double[20];
      doubleArray1[0] = (-20.52451788547388);
      doubleArray1[2] = 0.0;
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(doubleArray0, doubleArray1);
      MnStrategy mnStrategy0 = new MnStrategy(140);
      mnStrategy0.setMediumStrategy();
      mnStrategy0.setHessianG2Tolerance(16.6);
      mnStrategy0.setHessianNCycles(140);
      int[] intArray0 = new int[0];
      double[] doubleArray2 = new double[1];
      doubleArray2[0] = 0.0;
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn((double)140, (double)(-658), 0.0, 0.0, 0.0).when(fCNBase0).valueOf(any(double[].class));
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, (-20.52451788547388), mnStrategy0, 2.0);
      MnCross mnCross0 = mnFunctionCross0.cross(intArray0, doubleArray2, doubleArray2, 0.0, (-658));
      assertNotNull(mnCross0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      double[] doubleArray0 = new double[3];
      doubleArray0[1] = 0.1;
      doubleArray0[2] = 0.0;
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(doubleArray0, doubleArray0);
      MnUserParameterState mnUserParameterState1 = mnUserParameterState0.clone();
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState1, 0.1, (MnStrategy) null, 0.1);
      int[] intArray0 = new int[5];
      intArray0[0] = 0;
      doubleArray0[2] = (double) 3768;
      MnStrategy mnStrategy0 = new MnStrategy(0);
      mnStrategy0.setMediumStrategy();
      FCNBase fCNBase1 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, (-807.64390857), (double)3768, 19114.82789574396, 247.436192125).when(fCNBase1).valueOf(any(double[].class));
      MnFunctionCross mnFunctionCross1 = new MnFunctionCross(fCNBase1, mnUserParameterState1, 0, mnStrategy0, 0.1);
      mnStrategy0.setMediumStrategy();
      mnStrategy0.setHessianG2Tolerance(0);
      FCNBase fCNBase2 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      MnFunctionCross mnFunctionCross2 = new MnFunctionCross(fCNBase2, mnUserParameterState0, 0.0, mnStrategy0, 0.1);
      int[] intArray1 = new int[1];
      intArray0[3] = 0;
      mnFunctionCross1.cross(intArray1, doubleArray0, doubleArray0, (-1083.48829595), 297);
      // Undeclared exception!
      try { 
        mnFunctionCross1.cross((int[]) null, doubleArray0, doubleArray0, 0.1, (-1));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.freehep.math.minuit.MnFunctionCross", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(1314.699950643211, 1314.699950643211, 962.56327134).when(fCNBase0).valueOf(any(double[].class));
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = 1.0;
      doubleArray1[1] = 1.296500019833565;
      doubleArray1[2] = 0.0;
      doubleArray1[3] = 0.0;
      doubleArray1[4] = 1.0;
      doubleArray1[5] = (-3201.619047);
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(doubleArray0, doubleArray1);
      MnStrategy mnStrategy0 = new MnStrategy(140);
      mnStrategy0.setMediumStrategy();
      mnStrategy0.setHessianNCycles((-1));
      mnStrategy0.setHessianG2Tolerance(627.76);
      int[] intArray0 = new int[0];
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, 100.0, mnStrategy0, 10.0);
      MnCross mnCross0 = mnFunctionCross0.cross(intArray0, (double[]) null, doubleArray1, 383, 3835);
      MnCross mnCross1 = mnFunctionCross0.cross(intArray0, doubleArray0, (double[]) null, 100.0, 2146993288);
      assertNotSame(mnCross1, mnCross0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(131.25561312, (-1.0), 0.2, 1016.6266, 0.5).when(fCNBase0).valueOf(any(double[].class));
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = 1.0;
      doubleArray1[1] = 1.0;
      doubleArray1[2] = 0.0;
      doubleArray1[2] = 0.0;
      doubleArray1[4] = 1.0;
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(doubleArray0, doubleArray1);
      MnStrategy mnStrategy0 = new MnStrategy();
      mnStrategy0.setMediumStrategy();
      mnStrategy0.setHessianG2Tolerance(1.3020832254224933E30);
      mnStrategy0.setHessianG2Tolerance(627.76);
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, 0.0, mnStrategy0, 0.5);
      int[] intArray0 = new int[0];
      mnStrategy0.setGradientNCycles(960);
      mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray1, 1.0, 2);
      mnFunctionCross0.cross(intArray0, doubleArray1, doubleArray0, 1.0, 140);
      double[] doubleArray2 = new double[3];
      doubleArray2[0] = 1.0;
      doubleArray1[5] = (-1.0);
      mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, 1.0, 140);
      // Undeclared exception!
      try { 
        mnUserParameterState0.ext2int(200, 0.0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 200, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(1266.49, 1266.49, 1266.49, 1266.49, 0.0).when(fCNBase0).valueOf(any(double[].class));
      double[] doubleArray0 = new double[1];
      double[] doubleArray1 = new double[6];
      doubleArray1[1] = 4.692707250682979;
      doubleArray1[1] = 1.0;
      doubleArray1[2] = 0.0;
      doubleArray1[4] = 0.0;
      doubleArray1[5] = (-3201.619047);
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(doubleArray0, doubleArray1);
      MnStrategy mnStrategy0 = new MnStrategy();
      mnStrategy0.setMediumStrategy();
      mnStrategy0.setHessianG2Tolerance(627.76);
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, 0.0, mnStrategy0, 0.0);
      int[] intArray0 = new int[0];
      mnStrategy0.setHessianStepTolerance(0.0);
      mnFunctionCross0.cross(intArray0, doubleArray1, doubleArray1, 0.0, 15);
      // Undeclared exception!
      try { 
        mnUserParameterState0.intOfExt(15);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ext=15
         //
         verifyException("org.freehep.math.minuit.MnUserTransformation", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      double[] doubleArray0 = new double[5];
      doubleArray0[1] = 0.1;
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(doubleArray0, doubleArray0);
      MnStrategy mnStrategy0 = new MnStrategy(0);
      mnStrategy0.setGradientNCycles(0);
      mnUserParameterState0.setLowerLimit(0, Double.POSITIVE_INFINITY);
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, 100.0, mnStrategy0, 0.0);
      mnStrategy0.setLowStrategy();
      int[] intArray0 = new int[8];
      intArray0[0] = 0;
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = 2170.3109485614596;
      // Undeclared exception!
      try { 
        mnFunctionCross0.cross(intArray0, doubleArray1, doubleArray1, 2233.2704615, 3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.freehep.math.minuit.MnFunctionCross", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(3063.5862446014953, 3063.5862446014953, 3063.5862446014953, 232.2, 232.2).when(fCNBase0).valueOf(any(double[].class));
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.443;
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(doubleArray0, doubleArray0);
      MnStrategy mnStrategy0 = new MnStrategy();
      mnStrategy0.setMediumStrategy();
      mnStrategy0.setHessianG2Tolerance(3063.5862446014953);
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, 100.0, mnStrategy0, 0.443);
      mnStrategy0.setLowStrategy();
      int[] intArray0 = new int[0];
      int[] intArray1 = new int[1];
      mnStrategy0.setLowStrategy();
      mnStrategy0.setGradientTolerance(0);
      mnUserParameterState0.setUpperLimit(0, 0.443);
      MnCross mnCross0 = mnFunctionCross0.cross(intArray1, doubleArray0, doubleArray0, 1.9878292023809574, 0);
      mnStrategy0.setLowStrategy();
      mnUserParameterState0.setPrecision(100.0);
      MnCross mnCross1 = mnFunctionCross0.cross(intArray1, doubleArray0, doubleArray0, 1529.82488, 6);
      assertNotSame(mnCross1, mnCross0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(3065.5341577421905, 3065.5341577421905, 3065.5341577421905, (-204.93282593), 3065.5341577421905).when(fCNBase0).valueOf(any(double[].class));
      double[] doubleArray0 = new double[5];
      doubleArray0[1] = 0.1;
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(doubleArray0, doubleArray0);
      MnStrategy mnStrategy0 = new MnStrategy(0);
      mnStrategy0.setLowStrategy();
      mnUserParameterState0.setLowerLimit(0, Double.POSITIVE_INFINITY);
      mnStrategy0.setHessianG2Tolerance(0.1);
      int int0 = 2126221433;
      mnStrategy0.setHessianNCycles(2126221433);
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, 100.0, mnStrategy0, 0.0);
      mnStrategy0.setLowStrategy();
      int[] intArray0 = new int[2];
      intArray0[0] = 0;
      double[] doubleArray1 = new double[3];
      double[] doubleArray2 = new double[3];
      doubleArray2[0] = (-4250.68462);
      doubleArray0[4] = 0.1;
      // Undeclared exception!
      mnFunctionCross0.cross(intArray0, doubleArray2, doubleArray2, 0.0, 2131334684);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(3065.5341577421905, 3065.5341577421905, 3065.5341577421905, (-204.93282593), 3065.5341577421905).when(fCNBase0).valueOf(any(double[].class));
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 3065.5341577421905;
      doubleArray0[1] = 0.1;
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(doubleArray0, doubleArray0);
      MnStrategy mnStrategy0 = new MnStrategy();
      mnUserParameterState0.setLowerLimit(0, 0.1);
      mnStrategy0.setHessianG2Tolerance(3065.5341577421905);
      mnStrategy0.setHessianNCycles(2126221433);
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, 100.0, mnStrategy0, 3065.5341577421905);
      mnStrategy0.setLowStrategy();
      int[] intArray0 = new int[2];
      intArray0[0] = 0;
      double[] doubleArray1 = new double[3];
      double[] doubleArray2 = new double[3];
      doubleArray2[0] = (-4250.68462);
      doubleArray2[1] = 0.1;
      doubleArray2[2] = 100.0;
      mnFunctionCross0.cross(intArray0, doubleArray1, doubleArray2, 0, 2131334684);
      mnFunctionCross0.cross(intArray0, doubleArray1, doubleArray2, (-204.93282593), 0);
      mnFunctionCross0.cross(intArray0, doubleArray2, doubleArray2, 0.1, 2131334684);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(3065.5341577421905, 3065.5341577421905, 3065.5341577421905, (-204.93282593), 3065.5341577421905).when(fCNBase0).valueOf(any(double[].class));
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 3065.5341577421905;
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(doubleArray0, doubleArray0);
      MnStrategy mnStrategy0 = new MnStrategy();
      mnStrategy0.setLowStrategy();
      mnUserParameterState0.setLowerLimit(0, Double.POSITIVE_INFINITY);
      mnStrategy0.setHessianG2Tolerance(0.0);
      int int0 = 2126221433;
      mnStrategy0.setHessianNCycles(2126221433);
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, 100.0, mnStrategy0, 3065.5341577421905);
      mnStrategy0.setLowStrategy();
      mnUserParameterState0.setUpperLimit(0, (-7.0));
      int[] intArray0 = new int[2];
      mnStrategy0.setGradientNCycles(0);
      intArray0[0] = 0;
      double[] doubleArray1 = new double[3];
      double[] doubleArray2 = new double[3];
      doubleArray2[0] = (-4250.68462);
      doubleArray2[1] = 0.0;
      mnFunctionCross0.cross(intArray0, doubleArray1, doubleArray2, Double.POSITIVE_INFINITY, 2131334684);
      // Undeclared exception!
      mnFunctionCross0.cross(intArray0, doubleArray2, doubleArray2, 0.0, 2131334684);
  }
}
