/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 24 14:31:06 GMT 2019
 */

package org.databene.jdbacl;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.OutputStreamWriter;
import java.io.PipedReader;
import java.io.PrintWriter;
import java.io.StreamTokenizer;
import java.nio.charset.Charset;
import java.nio.charset.CharsetEncoder;
import java.util.List;
import java.util.Vector;
import org.apache.derby.iapi.sql.dictionary.ConstraintDescriptorList;
import org.apache.derby.iapi.store.raw.xact.RawTransaction;
import org.databene.jdbacl.NameSpec;
import org.databene.jdbacl.SQLUtil;
import org.databene.jdbacl.model.DBCatalog;
import org.databene.jdbacl.model.DBCheckConstraint;
import org.databene.jdbacl.model.DBColumn;
import org.databene.jdbacl.model.DBConstraint;
import org.databene.jdbacl.model.DBDataType;
import org.databene.jdbacl.model.DBForeignKeyConstraint;
import org.databene.jdbacl.model.DBNotNullConstraint;
import org.databene.jdbacl.model.DBObject;
import org.databene.jdbacl.model.DBPrimaryKeyConstraint;
import org.databene.jdbacl.model.DBSchema;
import org.databene.jdbacl.model.DBTable;
import org.databene.jdbacl.model.DBUniqueConstraint;
import org.databene.jdbacl.model.DefaultDBColumn;
import org.databene.jdbacl.model.DefaultDBTable;
import org.databene.jdbacl.model.FKChangeRule;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.hsqldb.lib.FileUtil;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SQLUtil_ESTest extends SQLUtil_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[6];
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, " NOT", false, stringArray0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      String string0 = SQLUtil.ukSpec(dBUniqueConstraint0, nameSpec0);
      assertEquals("CONSTRAINT \" NOT\" UNIQUE (, , , , , )", string0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(pipedReader0);
      streamTokenizer0.nval = (double) (-4);
      String string0 = SQLUtil.renderNumber(streamTokenizer0);
      assertEquals("- 4", string0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Object[] objectArray0 = SQLUtil.parseColumnTypeAndSize("SELECT * FROM  : UPDATE(-14482067,-14482067)");
      assertEquals(3, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("()");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String string0 = SQLUtil.renderValue(defaultDBTable0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("AM", (DBSchema) null);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("delete", defaultDBTable0, 42, "");
      String string0 = SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("faXiled a^ch", defaultDBTable0, 122, "faXiled a^ch");
      DBColumn[] dBColumnArray0 = new DBColumn[1];
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      String string0 = SQLUtil.renderColumnNames(dBColumnArray0);
      assertEquals("faXiled a^ch", string0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      DBDataType dBDataType0 = DBDataType.getInstance((-2123), "9*$?3[o");
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("9*$?3[o");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("", defaultDBTable0, dBDataType0, integer0, integer0);
      List<DBColumn> list0 = defaultDBTable0.getColumns();
      String string0 = SQLUtil.renderColumnNames(list0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("CONSTRAINT ", true, defaultDBTable0, (String[]) null, defaultDBTable0, (String[]) null);
      NameSpec nameSpec0 = NameSpec.NEVER;
      StringBuilder stringBuilder0 = new StringBuilder();
      StringBuilder stringBuilder1 = SQLUtil.appendConstraintName((DBConstraint) dBForeignKeyConstraint0, stringBuilder0, nameSpec0);
      assertEquals("", stringBuilder1.toString());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("indexType");
      String[] stringArray0 = new String[2];
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, ", ", true, stringArray0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      String string0 = SQLUtil.ukSpec(dBUniqueConstraint0, nameSpec0);
      assertEquals("CONSTRAINT \", \" UNIQUE (, )", string0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Object object0 = new Object();
      String string0 = SQLUtil.substituteMarkers("kQlZZGx\"{B", "Tj*y'Zh", object0);
      assertEquals("kQlZZGx\"{B", string0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      String string0 = SQLUtil.substituteMarkers("", "", "");
      assertEquals("''", string0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.substituteMarkers((String) null, "L(*YJ2\"$", (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      String string0 = SQLUtil.substituteMarkers("", "~h7", "ur > [ / + F0u3Uoa % lc");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String string0 = SQLUtil.renderWhereClause(stringArray0, stringArray0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      String string0 = SQLUtil.renderValue((Object) null);
      assertEquals("null", string0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Object object0 = new Object();
      String string0 = SQLUtil.renderValue(object0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.renderQuery((DBTable) null, (String[]) null, (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      String[] stringArray0 = new String[0];
      // Undeclared exception!
      try { 
        SQLUtil.renderQuery((DBTable) null, stringArray0, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("t~");
      // Undeclared exception!
      try { 
        SQLUtil.renderCreateTable((DBTable) null, true, (NameSpec) null, mockPrintWriter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("3%#?;bk{.F");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("KysR!x2q", defaultDBTable0, 73, "R");
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0, (StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("|Q1q");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("drop materialized view", defaultDBTable0, 73, "create unique indexeomeer<g2n");
      StringBuilder stringBuilder0 = new StringBuilder("CHR");
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0, stringBuilder0);
      assertEquals("CHRCREATE UNIQUE INDEXEOMEER<G2N", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBDataType dBDataType0 = DBDataType.getInstance((-585), "Y4^");
      Integer integer0 = RawTransaction.COMMIT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("Y4^", defaultDBTable0, dBDataType0, integer0);
      defaultDBColumn0.setVersionColumn(true);
      String string0 = SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      assertEquals("Y4^(0)", string0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((DBColumn[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      String string0 = SQLUtil.renderColumnNames((String[]) null);
      assertEquals("()", string0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String string0 = SQLUtil.renderColumnNames(stringArray0);
      assertEquals("()", string0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String string0 = SQLUtil.renderColumnListWithTableName(")\"K'M-", stringArray0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      String[] stringArray0 = new String[5];
      String string0 = SQLUtil.renderColumnListWithTableName("", stringArray0);
      assertEquals(".null, .null, .null, .null, .null", string0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBDataType dBDataType0 = DBDataType.getInstance("CLOB");
      Integer integer0 = RawTransaction.COMMIT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("CLOB", defaultDBTable0, dBDataType0, integer0, integer0);
      defaultDBColumn0.setVersionColumn(true);
      String string0 = SQLUtil.renderColumn(defaultDBColumn0);
      assertEquals("CLOB CLOB NULL", string0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("CONSTRAINT ", true, defaultDBTable0, (String[]) null, defaultDBTable0, (String[]) null);
      NameSpec nameSpec0 = NameSpec.NEVER;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("XT<ki&~960vG&.I=e f");
      SQLUtil.renderAddForeignKey(dBForeignKeyConstraint0, nameSpec0, mockPrintWriter0);
      assertTrue(dBForeignKeyConstraint0.isNameDeterministic());
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[1];
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("42Z22", false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(512);
      Charset charset0 = Charset.defaultCharset();
      CharsetEncoder charsetEncoder0 = charset0.newEncoder();
      OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(byteArrayOutputStream0, charsetEncoder0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(outputStreamWriter0);
      SQLUtil.renderAddForeignKey(dBForeignKeyConstraint0, nameSpec0, mockPrintWriter0);
      assertEquals(FKChangeRule.NO_ACTION, dBForeignKeyConstraint0.getUpdateRule());
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      String string0 = SQLUtil.removeComments("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      String[] stringArray0 = new String[3];
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, ", ", false, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String string0 = SQLUtil.pkSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("PRIMARY KEY (, , )", string0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Object[] objectArray0 = SQLUtil.parseColumnTypeAndSize("");
      assertEquals(1, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      String string0 = SQLUtil.normalize("", false);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesStructure("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("");
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String string0 = SQLUtil.leftJoin("*/", stringArray0, "", "alteGL$ |able", stringArray0);
      assertEquals("left join  as alteGL$ |able on ", string0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.leftJoin((String) null, (String[]) null, (String) null, (String) null, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      String[] stringArray0 = new String[9];
      String string0 = SQLUtil.leftJoin("", stringArray0, "KysR!x2q", "", stringArray0);
      assertEquals("left join KysR!x2q as  on .null = .null and .null = .null and .null = .null and .null = .null and .null = .null and .null = .null and .null = .null and .null = .null and .null = .null", string0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String string0 = SQLUtil.join("", "", stringArray0, "", "", stringArray0);
      assertEquals(" as  on ", string0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      String[] stringArray0 = new String[1];
      String string0 = SQLUtil.join("", "oxH6=[", stringArray0, "failed", "alter session", stringArray0);
      assertEquals("failed as alter session on oxH6=[.null = alter session.null", string0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      boolean boolean0 = SQLUtil.isQuery("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      boolean boolean0 = SQLUtil.isProcedureCall("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      boolean boolean0 = SQLUtil.isDML("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      String[] stringArray0 = new String[2];
      String string0 = SQLUtil.innerJoin("#<U`OCJ0])Up!Z_bw", stringArray0, "rename", (String) null, stringArray0);
      assertEquals("rename as null on #<U`OCJ0])Up!Z_bw.null = null.null and #<U`OCJ0])Up!Z_bw.null = null.null", string0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      String[] stringArray0 = new String[6];
      String string0 = SQLUtil.innerJoin("", stringArray0, "Cp950", "", stringArray0);
      assertEquals("Cp950 as  on .null = .null and .null = .null and .null = .null and .null = .null and .null = .null and .null = .null", string0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String string0 = SQLUtil.innerJoin("pX$SX1(_%2g&y5(", stringArray0, (String) null, "MERGE INTO ", stringArray0);
      assertEquals("null as MERGE INTO  on ", string0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      String[] stringArray0 = new String[5];
      String string0 = SQLUtil.innerJoin((String) null, stringArray0, "", "select", stringArray0);
      assertEquals(" as select on null.null = select.null and null.null = select.null and null.null = select.null and null.null = select.null and null.null = select.null", string0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      String[] stringArray0 = new String[0];
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("-ST'4b", true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      String string0 = SQLUtil.fkSpec(dBForeignKeyConstraint0, nameSpec0);
      assertEquals("CONSTRAINT -ST'4b FOREIGN KEY () REFERENCES null()", string0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[4];
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint((String) null, false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      String string0 = SQLUtil.fkSpec(dBForeignKeyConstraint0, nameSpec0);
      assertEquals("FOREIGN KEY (, , , ) REFERENCES null(, , , )", string0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("#<U`OCJ0])Up!Z_bw");
      String[] stringArray0 = new String[6];
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "#<U`OCJ0])Up!Z_bw", true, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      StringBuilder stringBuilder0 = SQLUtil.createConstraintSpecBuilder(dBUniqueConstraint0, nameSpec0);
      assertEquals("CONSTRAINT #<U`OCJ0])Up!Z_bw ", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      // Undeclared exception!
      try { 
        SQLUtil.appendConstraintName((DBConstraint) null, (StringBuilder) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("CONSTRAINT ", true, defaultDBTable0, (String[]) null, defaultDBTable0, (String[]) null);
      StringBuilder stringBuilder0 = new StringBuilder();
      SQLUtil.appendConstraintName((DBConstraint) dBForeignKeyConstraint0, stringBuilder0);
      assertEquals("CONSTRAINT \"CONSTRAINT \" ", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "create table");
      SQLUtil.addRequiredCondition((String) null, stringBuilder0);
      assertEquals("create table and null", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      StringBuilder stringBuilder1 = SQLUtil.addRequiredCondition("", stringBuilder0);
      assertEquals("", stringBuilder1.toString());
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "c");
      SQLUtil.addOptionalCondition((String) null, stringBuilder0);
      assertEquals("c or null", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "");
      StringBuilder stringBuilder1 = SQLUtil.addOptionalCondition("", stringBuilder0);
      assertEquals("", stringBuilder1.toString());
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.renderWhereClause((String[]) null, (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      String[] stringArray0 = new String[4];
      Object[] objectArray0 = new Object[0];
      // Undeclared exception!
      try { 
        SQLUtil.renderWhereClause(stringArray0, objectArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      String[] stringArray0 = new String[12];
      // Undeclared exception!
      try { 
        SQLUtil.renderQuery((DBTable) null, (String[]) null, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.renderNumber((StreamTokenizer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      // Undeclared exception!
      try { 
        SQLUtil.renderCreateTable((DBTable) null, false, nameSpec0, (PrintWriter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder("sH");
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnTypeWithSize((DBColumn) null, stringBuilder0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      DBColumn[] dBColumnArray0 = new DBColumn[0];
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames(dBColumnArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((List<DBColumn>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      ConstraintDescriptorList constraintDescriptorList0 = new ConstraintDescriptorList();
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((List<DBColumn>) constraintDescriptorList0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      ConstraintDescriptorList constraintDescriptorList0 = new ConstraintDescriptorList();
      Object object0 = new Object();
      constraintDescriptorList0.add(object0);
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((List<DBColumn>) constraintDescriptorList0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Object cannot be cast to org.databene.jdbacl.model.DBColumn
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Vector<DBColumn> vector0 = new Vector<DBColumn>();
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((List<DBColumn>) vector0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnListWithTableName("1*+Sb.)_<", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.renderColumn((DBColumn) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.removeComments((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.ownerDotComponent((DBObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.normalize((String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.mutatesStructure((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      // Undeclared exception!
      SQLUtil.mutatesDataOrStructure("/*");
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.mutatesDataOrStructure((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      String[] stringArray0 = new String[3];
      String[] stringArray1 = new String[0];
      // Undeclared exception!
      try { 
        SQLUtil.leftJoin("Cannot add a column after adding rows", stringArray0, "Cannot add a column after adding rows", "Y", stringArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      String[] stringArray0 = new String[3];
      String[] stringArray1 = new String[0];
      // Undeclared exception!
      try { 
        SQLUtil.join("P4-d`PY)dp", "P4-d`PY)dp", stringArray0, "executedeleteexecute", "P4-d`PY)dp", stringArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      // Undeclared exception!
      SQLUtil.isQuery("/*");
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.isQuery((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      // Undeclared exception!
      SQLUtil.isProcedureCall("/*");
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.isProcedureCall((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      // Undeclared exception!
      SQLUtil.isDML("/*");
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.isDML((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      // Undeclared exception!
      SQLUtil.isDDL("new Map() /* ");
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.isDDL((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.innerJoin("EXCtPT", (String[]) null, "EXCtPT", "EXCtPT", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      String[] stringArray0 = new String[9];
      String[] stringArray1 = new String[4];
      // Undeclared exception!
      try { 
        SQLUtil.innerJoin("drop mateialized view-2vk_+u=(55{2 join drop mateialized view-2vk_+u=(55{2 as drop mateialized view-2vk_+u=(55{2 on drop mateialized view-2vk_+u=(55{2.null = drop mateialized view-2vk_+u=(55{2.null and drop mateialized view-2vk_+u=(55{2.null = drop mateialized view-2vk_+u=(55{2.null and drop mateialized view-2vk_+u=(55{2.null = drop mateialized view-2vk_+u=(55{2.null and drop mateialized view-2vk_+u=(55{2.null = drop mateialized view-2vk_+u=(55{2.null and drop mateialized view-2vk_+u=(55{2.null = drop mateialized view-2vk_+u=(55{2.null and drop mateialized view-2vk_+u=(55{2.null = drop mateialized view-2vk_+u=(55{2.null and drop mateialized view-2vk_+u=(55{2.null = drop mateialized view-2vk_+u=(55{2.null and drop mateialized view-2vk_+u=(55{2.null = drop mateialized view-2vk_+u=(55{2.null and drop mateialized view-2vk_+u=(55{2.null = drop mateialized view-2vk_+u=(55{2.null", stringArray0, "drop mateialized view-2vk_+u=(55{2 join drop mateialized view-2vk_+u=(55{2 as drop mateialized view-2vk_+u=(55{2 on drop mateialized view-2vk_+u=(55{2.null = drop mateialized view-2vk_+u=(55{2.null and drop mateialized view-2vk_+u=(55{2.null = drop mateialized view-2vk_+u=(55{2.null and drop mateialized view-2vk_+u=(55{2.null = drop mateialized view-2vk_+u=(55{2.null and drop mateialized view-2vk_+u=(55{2.null = drop mateialized view-2vk_+u=(55{2.null and drop mateialized view-2vk_+u=(55{2.null = drop mateialized view-2vk_+u=(55{2.null and drop mateialized view-2vk_+u=(55{2.null = drop mateialized view-2vk_+u=(55{2.null and drop mateialized view-2vk_+u=(55{2.null = drop mateialized view-2vk_+u=(55{2.null and drop mateialized view-2vk_+u=(55{2.null = drop mateialized view-2vk_+u=(55{2.null and drop mateialized view-2vk_+u=(55{2.null = drop mateialized view-2vk_+u=(55{2.null", "drop mateialized view-2vk_+u=(55{2 join drop mateialized view-2vk_+u=(55{2 as drop mateialized view-2vk_+u=(55{2 on drop mateialized view-2vk_+u=(55{2.null = drop mateialized view-2vk_+u=(55{2.null and drop mateialized view-2vk_+u=(55{2.null = drop mateialized view-2vk_+u=(55{2.null and drop mateialized view-2vk_+u=(55{2.null = drop mateialized view-2vk_+u=(55{2.null and drop mateialized view-2vk_+u=(55{2.null = drop mateialized view-2vk_+u=(55{2.null and drop mateialized view-2vk_+u=(55{2.null = drop mateialized view-2vk_+u=(55{2.null and drop mateialized view-2vk_+u=(55{2.null = drop mateialized view-2vk_+u=(55{2.null and drop mateialized view-2vk_+u=(55{2.null = drop mateialized view-2vk_+u=(55{2.null and drop mateialized view-2vk_+u=(55{2.null = drop mateialized view-2vk_+u=(55{2.null and drop mateialized view-2vk_+u=(55{2.null = drop mateialized view-2vk_+u=(55{2.null", stringArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      // Undeclared exception!
      try { 
        SQLUtil.createConstraintSpecBuilder((DBConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.constraintName((DBConstraint) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.appendConstraintName((DBConstraint) null, (StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.addRequiredCondition("}l{-*\"E`0^", (StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.addOptionalCondition("alter tableselect * from", (StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      String[] stringArray0 = new String[1];
      DBSchema dBSchema0 = new DBSchema("{.Oqgo");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("https://", dBSchema0);
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("{.Oqgo", false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      // Undeclared exception!
      try { 
        SQLUtil.appendConstraintName((DBConstraint) dBForeignKeyConstraint0, (StringBuilder) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[4];
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint((String) null, true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      StringBuilder stringBuilder0 = SQLUtil.appendConstraintName((DBConstraint) dBForeignKeyConstraint0, (StringBuilder) null, nameSpec0);
      assertNull(stringBuilder0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[1];
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("v", false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      StringBuilder stringBuilder0 = SQLUtil.appendConstraintName((DBConstraint) dBForeignKeyConstraint0, (StringBuilder) null, nameSpec0);
      assertNull(stringBuilder0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      String[] stringArray0 = new String[1];
      DBSchema dBSchema0 = new DBSchema("D3T@8+{UQ[@`U1u%(4");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable((String) null, dBSchema0);
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("p,~bk0fU:`E}1Fj", true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      // Undeclared exception!
      try { 
        SQLUtil.appendConstraintName((DBConstraint) dBForeignKeyConstraint0, (StringBuilder) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.join("X0Y54.S", "X0Y54.S", (String[]) null, "X0Y54.S", "X0Y54.S", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      String[] stringArray0 = new String[3];
      String string0 = SQLUtil.join("inner", "inner", stringArray0, "faXiled a^ch", "136", stringArray0);
      assertEquals("faXiled a^ch as 136 on inner.null = 136.null and inner.null = 136.null and inner.null = 136.null", string0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      boolean boolean0 = SQLUtil.isQuery("selectprimary key");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      boolean boolean0 = SQLUtil.isQuery("select into");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      boolean boolean0 = SQLUtil.isProcedureCall("execsql-erro");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      boolean boolean0 = SQLUtil.isDML("select intounknown constraint type:");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      boolean boolean0 = SQLUtil.isDDL("create table ");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      boolean boolean0 = SQLUtil.isDDL("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesStructure("insert");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesStructure("call");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesStructure("alter table");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      String string0 = SQLUtil.renderValue("create materialized view");
      assertEquals("'create materialized view'", string0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      String string0 = SQLUtil.renderValue(stringBuilder0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      String[] stringArray0 = new String[2];
      String string0 = SQLUtil.renderWhereClause(stringArray0, stringArray0);
      assertEquals("null = null AND null = null", string0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      DBDataType dBDataType0 = DBDataType.getInstance(32, "CLOB");
      Integer integer0 = RawTransaction.COMMIT;
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("updateRow");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("create materialized viewbnvq3k.", defaultDBTable0, dBDataType0, integer0, integer0);
      String string0 = defaultDBColumn0.toString();
      assertEquals("create materialized viewbnvq3k. : CLOB", string0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBDataType dBDataType0 = DBDataType.getInstance("CLOB");
      Integer integer0 = RawTransaction.COMMIT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("VZ9Pj'N?5k ]E", defaultDBTable0, dBDataType0, integer0, integer0);
      defaultDBColumn0.setNullable(false);
      String string0 = SQLUtil.renderColumn(defaultDBColumn0);
      assertEquals("VZ9Pj'N?5k ]E CLOB NOT NULL", string0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      NameSpec nameSpec0 = NameSpec.NEVER;
      // Undeclared exception!
      try { 
        SQLUtil.ukSpec((DBUniqueConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      String[] stringArray0 = new String[5];
      String string0 = SQLUtil.renderColumnNames(stringArray0);
      assertEquals("(, , , , )", string0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      // Undeclared exception!
      try { 
        SQLUtil.fkSpec((DBForeignKeyConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      String[] stringArray0 = new String[42];
      String string0 = SQLUtil.renderColumnListWithTableName(stringArray0[0], stringArray0);
      assertEquals("null.null, null.null, null.null, null.null, null.null, null.null, null.null, null.null, null.null, null.null, null.null, null.null, null.null, null.null, null.null, null.null, null.null, null.null, null.null, null.null, null.null, null.null, null.null, null.null, null.null, null.null, null.null, null.null, null.null, null.null, null.null, null.null, null.null, null.null, null.null, null.null, null.null, null.null, null.null, null.null, null.null, null.null", string0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(pipedReader0);
      String string0 = SQLUtil.renderNumber(streamTokenizer0);
      assertEquals("- 0", string0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(pipedReader0);
      streamTokenizer0.nval = (-213.32847193432363);
      String string0 = SQLUtil.renderNumber(streamTokenizer0);
      assertEquals("- 213.32847193432363", string0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      String string0 = SQLUtil.normalize("DQ@h7q`BF'NmO]", true);
      assertEquals("DQ @ h7q ` BF 'NmO]'", string0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      String string0 = SQLUtil.normalize("v8K}K;tXC-\"Z\"zD", false);
      assertEquals("v8K } K ; tX  C - \"Z\" zD", string0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      String string0 = SQLUtil.normalize("*/", false);
      assertEquals("*/", string0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      String string0 = SQLUtil.normalize("-- pageSize: ", false);
      assertEquals("-- pageSize :", string0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      String string0 = SQLUtil.normalize("ur>[/+F0u3Uoa%lc", true);
      assertEquals("ur > [ / + F0u3Uoa % lc", string0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      String string0 = SQLUtil.normalize(".e=ie7(&wg^", false);
      assertEquals(".e = ie7 (& wg ^", string0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      String string0 = SQLUtil.normalize(">;KYSPJ+M3&},#HS", false);
      assertEquals("> ; KYSPJ + M3 & }, # HS", string0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      String string0 = SQLUtil.normalize("1*+.)_<", false);
      assertEquals("1 * +.) _ <", string0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      String string0 = SQLUtil.normalize("byg/*5U*}-[w?<", false);
      assertEquals("byg /* 5U * } - [ w ? <", string0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      String string0 = SQLUtil.removeComments("faXiled a^ch");
      assertEquals("faXiled a^ch", string0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String string0 = SQLUtil.typeAndName(defaultDBTable0);
      assertEquals("table null", string0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      DBDataType dBDataType0 = DBDataType.getInstance((-2123), "9*$?3[o");
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("9*$?3[o");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("", defaultDBTable0, dBDataType0, integer0, integer0);
      String string0 = SQLUtil.typeAndName(defaultDBColumn0);
      assertEquals("column ", string0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      String string0 = SQLUtil.typeAndName((DBObject) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[3];
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, (String) null, true, stringArray0);
      String string0 = SQLUtil.typeAndName(dBUniqueConstraint0);
      assertEquals("unique constraint constraint", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("MpWi", false, "MpWi", "MpWi");
      String string0 = SQLUtil.constraintName(dBCheckConstraint0);
      assertEquals("CONSTRAINT MpWi ", string0);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint((String) null, true, "fcN", "fcN");
      String string0 = SQLUtil.constraintName(dBCheckConstraint0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("MpWi", false, "MpWi", "MpWi");
      StringBuilder stringBuilder0 = new StringBuilder();
      SQLUtil.appendConstraintName((DBConstraint) dBCheckConstraint0, stringBuilder0);
      assertEquals("CONSTRAINT MpWi ", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("|Q1q");
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("selectprimary key", false, defaultDBTable0, "CHR");
      StringBuilder stringBuilder0 = new StringBuilder(110);
      dBCheckConstraint0.setName((String) null);
      SQLUtil.appendConstraintName((DBConstraint) dBCheckConstraint0, stringBuilder0);
      assertEquals("", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      String[] stringArray0 = new String[0];
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "electamldrsindex", true, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String string0 = SQLUtil.pkSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("CONSTRAINT electamldrsindex PRIMARY KEY ()", string0);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      String[] stringArray0 = new String[3];
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("truncate");
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, (String) null, false, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      StringBuilder stringBuilder0 = SQLUtil.createConstraintSpecBuilder(dBUniqueConstraint0, nameSpec0);
      assertEquals("", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("e\"k!*qJw&I hj9o");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("e\"k!*qJw&I hj9o", defaultDBTable0, (-732), "e\"k!*qJw&I hj9o");
      String string0 = SQLUtil.ownerDotComponent(defaultDBColumn0);
      assertEquals("e\"k!*qJw&I hj9o.e\"k!*qJw&I hj9o", string0);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      DBCatalog dBCatalog0 = new DBCatalog();
      String string0 = SQLUtil.ownerDotComponent(dBCatalog0);
      assertEquals("null", string0);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      String[] stringArray0 = new String[3];
      String string0 = SQLUtil.join((String) null, (String) null, stringArray0, (String) null, (String) null, stringArray0);
      assertEquals("null as null on null.null = null.null and null.null = null.null and null.null = null.null", string0);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      NameSpec nameSpec0 = NameSpec.NEVER;
      // Undeclared exception!
      try { 
        SQLUtil.constraintSpec((DBConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("selec{;tprimaryky", true, defaultDBTable0, (String[]) null, defaultDBTable0, (String[]) null);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      String string0 = SQLUtil.constraintSpec(dBForeignKeyConstraint0, nameSpec0);
      assertEquals("CONSTRAINT selec{;tprimaryky FOREIGN KEY () REFERENCES null()", string0);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[6];
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "faXiled a^ch", true, stringArray0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      String string0 = SQLUtil.constraintSpec(dBUniqueConstraint0, nameSpec0);
      assertEquals("CONSTRAINT \"faXiled a^ch\" UNIQUE (, , , , , )", string0);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      String[] stringArray0 = new String[2];
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("null.null, null.null");
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "?.d gEz$l:ZYQ", false, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String string0 = SQLUtil.constraintSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("PRIMARY KEY (, )", string0);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      // Undeclared exception!
      SQLUtil.mutatesStructure("/*");
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("select into");
      assertNotNull(boolean0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("select");
      assertFalse(boolean0);
      assertNotNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("alter table");
      assertTrue(boolean0);
      assertNotNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("alter session");
      assertNotNull(boolean0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Character character0 = Character.valueOf('M');
      String string0 = SQLUtil.renderValue(character0);
      assertEquals("'M'", string0);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      String[] stringArray0 = new String[42];
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("insertdeljte*+wa<");
      Object[] objectArray0 = new Object[7];
      objectArray0[3] = (Object) "insertdeljte*+wa<";
      // Undeclared exception!
      try { 
        SQLUtil.renderQuery(defaultDBTable0, stringArray0, objectArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema("42X45");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("42X45", dBSchema0);
      DBDataType dBDataType0 = DBDataType.getInstance((-1398), "42X45");
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("42X45", defaultDBTable0, dBDataType0, integer0, integer0);
      String string0 = defaultDBColumn0.toString();
      assertEquals("42X45 : 42X45(2,2)", string0);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      DBDataType dBDataType0 = DBDataType.getInstance(1, "alter session");
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("seletprZmr~ey", (DBTable) null, dBDataType0, integer0);
      String string0 = defaultDBColumn0.toString();
      assertEquals("seletprZmr~ey : ALTER SESSION(3)", string0);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("e\"k!*qJw&I hj9o");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("e\"k!*qJw&I hj9o", defaultDBTable0, (-732), "e\"k!*qJw&I hj9o");
      defaultDBColumn0.setNullable(false);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      File file0 = FileUtil.canonicalFile("/rm2S+I+'");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, mockPrintWriter0);
      assertEquals("table", defaultDBTable0.getObjectType());
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBDataType dBDataType0 = DBDataType.getInstance("CLOB");
      Integer integer0 = RawTransaction.COMMIT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("CLOB", defaultDBTable0, dBDataType0, integer0, integer0);
      defaultDBColumn0.setDefaultValue("CLOB");
      String string0 = SQLUtil.renderColumn(defaultDBColumn0);
      assertEquals("CLOB CLOB DEFAULT CLOB NULL", string0);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("faXiled a^ch", defaultDBTable0, 122, "faXiled a^ch");
      DBDataType dBDataType0 = DBDataType.getInstance(122, "_#OT!muA4");
      Integer integer0 = RawTransaction.COMMIT;
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("TO", defaultDBTable0, dBDataType0, (Integer) null, integer0);
      List<DBColumn> list0 = defaultDBTable0.getColumns();
      String string0 = SQLUtil.renderColumnNames(list0);
      assertEquals("faXiled a^ch, TO", string0);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      DBDataType dBDataType0 = DBDataType.getInstance(1, "alter session");
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("seletprZmr~ey", (DBTable) null, dBDataType0, integer0);
      DBColumn[] dBColumnArray0 = new DBColumn[3];
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames(dBColumnArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBColumn[] dBColumnArray0 = new DBColumn[1];
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("", defaultDBTable0, (-2085), "OD2");
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      String string0 = SQLUtil.renderColumnNames(dBColumnArray0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "selec{;tprim", false, (String[]) null);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("faXiled a^ch");
      NameSpec nameSpec0 = NameSpec.NEVER;
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, mockPrintWriter0);
      assertEquals("table", defaultDBTable0.getObjectType());
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("OBJECTID", defaultDBTable0, 122, "OBJECTID");
      DBDataType dBDataType0 = DBDataType.getInstance(122, "OBJECTID");
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("Y2idnDLR)-kxh", defaultDBTable0, dBDataType0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("Y2idnDLR)-kxh");
      NameSpec nameSpec0 = NameSpec.NEVER;
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, mockPrintWriter0);
      assertEquals("table", defaultDBTable0.getObjectType());
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable(":N:2#p");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("", defaultDBTable0, 42, "execute");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(":N:2#p");
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      SQLUtil.renderCreateTable(defaultDBTable0, false, nameSpec0, mockPrintWriter0);
      assertEquals("table", defaultDBTable0.getObjectType());
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("\")%a B3yvw1dxV_(4");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal column type format: \")%a B3yvw1dxV_(4
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("MpWi", true, "MpWi", "MpWi");
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      String string0 = SQLUtil.constraintSpec(dBCheckConstraint0, nameSpec0);
      assertEquals("CONSTRAINT MpWi CHECK MpWi", string0);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnTypeWithSize((DBColumn) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      NameSpec nameSpec0 = NameSpec.NEVER;
      // Undeclared exception!
      try { 
        SQLUtil.pkSpec((DBPrimaryKeyConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.substituteMarkers("m!M#cW:", (String) null, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("org.apache.derby.iapi.types.DateTimeDataValue");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[5];
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("org.apache.derby.iapi.types.DateTimeDataValue", true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, mockPrintWriter0);
      assertNull(defaultDBTable0.getName());
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("e\"k!*qJw&I hj9o", defaultDBTable0, (-732), "e\"k!*qJw&I hj9o");
      DBNotNullConstraint dBNotNullConstraint0 = new DBNotNullConstraint(defaultDBTable0, "e\"k!*qJw&I hj9o", true, "e\"k!*qJw&I hj9o");
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String string0 = SQLUtil.constraintSpec(dBNotNullConstraint0, nameSpec0);
      assertEquals("e\"k!*qJw&I hj9o NOT NULL", string0);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      String[] stringArray0 = new String[10];
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("null.null, null.null, null.null, null.null, null.null, null.null, null.null, null.null, null.null, null.null");
      String string0 = SQLUtil.renderQuery(defaultDBTable0, stringArray0, stringArray0);
      assertEquals("SELECT * FROM null.null, null.null, null.null, null.null, null.null, null.null, null.null, null.null, null.null, null.null WHERE null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null", string0);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      // Undeclared exception!
      try { 
        SQLUtil.renderAddForeignKey((DBForeignKeyConstraint) null, nameSpec0, (PrintWriter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable(":N:2#p");
      String[] stringArray0 = new String[0];
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "execute", false, stringArray0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(":N:2#p");
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      SQLUtil.renderCreateTable(defaultDBTable0, false, nameSpec0, mockPrintWriter0);
      assertEquals(":N:2#p", defaultDBTable0.getName());
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      SQLUtil sQLUtil0 = new SQLUtil();
  }
}
