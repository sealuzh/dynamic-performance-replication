/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 24 13:18:21 GMT 2019
 */

package com.google.re2j;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.re2j.CharClass;
import com.google.re2j.CharGroup;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CharClass_ESTest extends CharClass_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[][] intArray0 = new int[2][3];
      int[] intArray1 = new int[9];
      intArray1[0] = 1805;
      intArray1[1] = (-1906);
      intArray1[2] = 1;
      intArray1[3] = 30;
      intArray1[4] = 407;
      intArray1[5] = (-138);
      intArray1[6] = (-733);
      intArray1[7] = (-1239);
      intArray1[8] = 0;
      intArray0[0] = intArray1;
      int[] intArray2 = new int[1];
      assertFalse(intArray2.equals((Object)intArray1));
      
      intArray2[0] = 30;
      intArray0[1] = intArray2;
      // Undeclared exception!
      try { 
        charClass0.appendTable(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 7380;
      intArray0[2] = 66639;
      intArray0[3] = (-756);
      intArray0[4] = (-1928);
      intArray0[5] = 2383;
      CharClass charClass0 = new CharClass(intArray0);
      assertNotNull(charClass0);
      assertArrayEquals(new int[] {7380, 0, 66639, (-756), (-1928), 2383}, intArray0);
      assertEquals(6, intArray0.length);
      
      CharClass charClass1 = charClass0.appendFoldedRange((-1928), (-1696));
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      assertArrayEquals(new int[] {7380, 0, 66639, (-756), (-1928), 2383}, intArray0);
      assertEquals(6, intArray0.length);
      
      CharClass charClass2 = charClass1.cleanClass();
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertNotNull(charClass2);
      assertArrayEquals(new int[] {(-1928), 2383, 7380, 0, 66639, (-756)}, intArray0);
      assertEquals(6, intArray0.length);
      
      String string0 = charClass1.toString();
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertEquals("[0xfffff878-0x94f 0x1cd4-0x0 0x1044f-0xfffffd0c]", string0);
      assertNotNull(string0);
      assertArrayEquals(new int[] {(-1928), 2383, 7380, 0, 66639, (-756)}, intArray0);
      assertEquals(6, intArray0.length);
      
      CharClass charClass3 = charClass0.negateClass();
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass0);
      assertNotNull(charClass3);
      assertArrayEquals(new int[] {2384, 7379, 1, 66638, (-755), 1114111}, intArray0);
      assertEquals(6, intArray0.length);
      
      CharClass charClass4 = charClass0.appendNegatedClass(intArray0);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass1);
      assertNotNull(charClass4);
      assertArrayEquals(new int[] {2384, 7379, 1, 66638, (-755), 1114111}, intArray0);
      assertEquals(6, intArray0.length);
      
      int[][] intArray1 = new int[4][6];
      intArray1[0] = intArray0;
      // Undeclared exception!
      charClass3.appendNegatedTable(intArray1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.appendFoldedRange(0, 348);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[] intArray0 = charClass0.toArray();
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      CharClass charClass1 = charClass0.appendRange(1588, 1588);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      
      // Undeclared exception!
      try { 
        charClass1.appendNegatedClass((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[][] intArray0 = new int[4][6];
      int[] intArray1 = new int[6];
      intArray1[0] = (-2169);
      intArray1[1] = (-2169);
      intArray1[2] = 602;
      intArray1[3] = (-2169);
      intArray1[4] = 0;
      intArray1[5] = (-2169);
      intArray0[0] = intArray1;
      int[] intArray2 = new int[0];
      assertFalse(intArray2.equals((Object)intArray1));
      
      intArray0[1] = intArray2;
      int[] intArray3 = new int[8];
      assertFalse(intArray3.equals((Object)intArray2));
      assertFalse(intArray3.equals((Object)intArray1));
      
      intArray3[0] = (-2169);
      intArray3[1] = 0;
      intArray3[2] = 0;
      intArray3[3] = 602;
      intArray3[4] = 602;
      intArray3[5] = 602;
      intArray3[6] = 666;
      intArray3[7] = 602;
      intArray0[2] = intArray3;
      int[] intArray4 = new int[9];
      assertFalse(intArray4.equals((Object)intArray3));
      assertFalse(intArray4.equals((Object)intArray2));
      assertFalse(intArray4.equals((Object)intArray1));
      
      intArray4[0] = 64;
      intArray4[1] = (-2169);
      intArray4[2] = 666;
      intArray4[3] = 602;
      intArray4[4] = 0;
      intArray4[5] = 602;
      intArray4[6] = 0;
      intArray4[7] = 89;
      intArray4[8] = (-2169);
      intArray0[3] = intArray4;
      // Undeclared exception!
      try { 
        charClass0.appendTable(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      String string0 = charClass0.toString();
      assertEquals("[]", string0);
      assertNotNull(string0);
      
      int[] intArray0 = new int[0];
      CharClass charClass1 = charClass0.appendClass(intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 7380;
      intArray0[1] = 1848;
      intArray0[2] = 66639;
      intArray0[3] = (-756);
      intArray0[4] = (-1928);
      intArray0[5] = 2383;
      CharClass charClass0 = new CharClass(intArray0);
      assertNotNull(charClass0);
      assertArrayEquals(new int[] {7380, 1848, 66639, (-756), (-1928), 2383}, intArray0);
      assertEquals(6, intArray0.length);
      
      CharClass charClass1 = charClass0.appendFoldedRange((-1928), (-1696));
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      assertArrayEquals(new int[] {7380, 1848, 66639, (-756), (-1928), 2383}, intArray0);
      assertEquals(6, intArray0.length);
      
      CharClass charClass2 = charClass1.appendNegatedClass(intArray0);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertNotNull(charClass2);
      assertArrayEquals(new int[] {7380, 1848, 66639, (-756), (-1928), 1114111}, intArray0);
      assertEquals(6, intArray0.length);
      
      CharClass charClass3 = charClass1.cleanClass();
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass2);
      assertNotNull(charClass3);
      assertArrayEquals(new int[] {(-1928), 1114111, 7380, 1848, 66639, (-756)}, intArray0);
      assertEquals(6, intArray0.length);
      
      String string0 = charClass1.toString();
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertEquals("[0xfffff878-0x10ffff]", string0);
      assertNotNull(string0);
      assertArrayEquals(new int[] {(-1928), 1114111, 7380, 1848, 66639, (-756)}, intArray0);
      assertEquals(6, intArray0.length);
      
      CharClass charClass4 = charClass0.negateClass();
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass4);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass2);
      assertNotNull(charClass4);
      assertArrayEquals(new int[] {(-1928), 1114111, 7380, 1848, 66639, (-756)}, intArray0);
      assertEquals(6, intArray0.length);
      
      CharClass charClass5 = charClass0.appendNegatedClass(intArray0);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass4);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass1);
      assertNotNull(charClass5);
      assertArrayEquals(new int[] {(-755), 1114111, 7380, 1848, 66639, (-756)}, intArray0);
      assertEquals(6, intArray0.length);
      
      String string1 = charClass5.toString();
      assertFalse(string1.equals((Object)string0));
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass4);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass1);
      assertEquals("[0xfffffd0d-0x10ffff]", string1);
      assertNotNull(string1);
      assertArrayEquals(new int[] {(-755), 1114111, 7380, 1848, 66639, (-756)}, intArray0);
      assertEquals(6, intArray0.length);
      
      int[][] intArray1 = new int[4][6];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      CharClass charClass6 = charClass4.appendNegatedClass(intArray0);
      assertSame(charClass6, charClass1);
      assertSame(charClass6, charClass4);
      assertSame(charClass6, charClass5);
      assertSame(charClass6, charClass0);
      assertSame(charClass6, charClass2);
      assertSame(charClass6, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass6);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass6);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass5);
      assertNotNull(charClass6);
      assertArrayEquals(new int[] {(-755), 1114111, 7380, 1848, 66639, (-756)}, intArray0);
      assertEquals(6, intArray0.length);
      
      intArray1[2] = intArray0;
      intArray1[3] = intArray0;
      CharClass charClass7 = charClass0.appendTableWithSign(intArray1, 66639);
      assertSame(charClass7, charClass4);
      assertSame(charClass7, charClass5);
      assertSame(charClass7, charClass0);
      assertSame(charClass7, charClass2);
      assertSame(charClass7, charClass1);
      assertSame(charClass7, charClass3);
      assertSame(charClass7, charClass6);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass6);
      assertNotNull(charClass7);
      assertArrayEquals(new int[] {(-755), 1114111, 7380, 1848, 66639, (-756)}, intArray0);
      assertEquals(6, intArray0.length);
      assertEquals(4, intArray1.length);
      
      String string2 = CharClass.charClassToString(intArray0, (-1928));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("[]", string2);
      assertNotNull(string2);
      assertArrayEquals(new int[] {(-755), 1114111, 7380, 1848, 66639, (-756)}, intArray0);
      assertEquals(6, intArray0.length);
      
      CharClass charClass8 = charClass4.appendFoldedClass(intArray0);
      assertSame(charClass8, charClass6);
      assertSame(charClass8, charClass1);
      assertSame(charClass8, charClass3);
      assertSame(charClass8, charClass4);
      assertSame(charClass8, charClass0);
      assertSame(charClass8, charClass2);
      assertSame(charClass8, charClass7);
      assertSame(charClass8, charClass5);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass8);
      assertSame(charClass0, charClass6);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass6);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass8);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass7);
      assertSame(charClass4, charClass5);
      assertNotNull(charClass8);
      assertArrayEquals(new int[] {(-755), 1114111, 7380, 1848, 66639, (-756)}, intArray0);
      assertEquals(6, intArray0.length);
      
      CharClass charClass9 = charClass8.appendNegatedTable(intArray1);
      assertSame(charClass8, charClass6);
      assertSame(charClass8, charClass1);
      assertSame(charClass8, charClass9);
      assertSame(charClass8, charClass3);
      assertSame(charClass8, charClass4);
      assertSame(charClass8, charClass0);
      assertSame(charClass8, charClass2);
      assertSame(charClass8, charClass7);
      assertSame(charClass8, charClass5);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass9);
      assertSame(charClass0, charClass8);
      assertSame(charClass0, charClass6);
      assertSame(charClass9, charClass0);
      assertSame(charClass9, charClass1);
      assertSame(charClass9, charClass6);
      assertSame(charClass9, charClass2);
      assertSame(charClass9, charClass7);
      assertSame(charClass9, charClass3);
      assertSame(charClass9, charClass8);
      assertSame(charClass9, charClass4);
      assertSame(charClass9, charClass5);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass6);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass9);
      assertSame(charClass4, charClass8);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass7);
      assertSame(charClass4, charClass5);
      assertNotNull(charClass9);
      assertArrayEquals(new int[] {(-755), 1114111, 7380, 1848, 66639, (-756)}, intArray0);
      assertEquals(6, intArray0.length);
      assertEquals(4, intArray1.length);
      
      CharClass charClass10 = charClass4.appendNegatedTable(intArray1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass10);
      assertSame(charClass0, charClass9);
      assertSame(charClass0, charClass8);
      assertSame(charClass0, charClass6);
      assertSame(charClass10, charClass0);
      assertSame(charClass10, charClass5);
      assertSame(charClass10, charClass6);
      assertSame(charClass10, charClass8);
      assertSame(charClass10, charClass7);
      assertSame(charClass10, charClass3);
      assertSame(charClass10, charClass1);
      assertSame(charClass10, charClass4);
      assertSame(charClass10, charClass2);
      assertSame(charClass10, charClass9);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass6);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass9);
      assertSame(charClass4, charClass8);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass7);
      assertSame(charClass4, charClass10);
      assertSame(charClass4, charClass5);
      assertNotNull(charClass10);
      assertArrayEquals(new int[] {(-755), 1114111, 7380, 1848, 66639, (-756)}, intArray0);
      assertEquals(6, intArray0.length);
      assertEquals(4, intArray1.length);
      
      CharClass charClass11 = charClass7.appendFoldedRange((-1696), 67862);
      assertSame(charClass7, charClass10);
      assertSame(charClass7, charClass4);
      assertSame(charClass7, charClass5);
      assertSame(charClass7, charClass8);
      assertSame(charClass7, charClass0);
      assertSame(charClass7, charClass2);
      assertSame(charClass7, charClass1);
      assertSame(charClass7, charClass3);
      assertSame(charClass7, charClass11);
      assertSame(charClass7, charClass9);
      assertSame(charClass7, charClass6);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass10);
      assertSame(charClass0, charClass11);
      assertSame(charClass0, charClass9);
      assertSame(charClass0, charClass8);
      assertSame(charClass0, charClass6);
      assertSame(charClass11, charClass4);
      assertSame(charClass11, charClass10);
      assertSame(charClass11, charClass9);
      assertSame(charClass11, charClass6);
      assertSame(charClass11, charClass1);
      assertSame(charClass11, charClass5);
      assertSame(charClass11, charClass3);
      assertSame(charClass11, charClass8);
      assertSame(charClass11, charClass0);
      assertSame(charClass11, charClass2);
      assertSame(charClass11, charClass7);
      assertNotNull(charClass11);
      assertArrayEquals(new int[] {(-1696), 1114111, 7380, 1848, 66639, (-756)}, intArray0);
      assertEquals(6, intArray0.length);
      assertEquals(4, intArray1.length);
      
      CharClass charClass12 = charClass7.appendClassWithSign(intArray0, (-1696));
      assertSame(charClass7, charClass10);
      assertSame(charClass7, charClass12);
      assertSame(charClass7, charClass4);
      assertSame(charClass7, charClass5);
      assertSame(charClass7, charClass8);
      assertSame(charClass7, charClass0);
      assertSame(charClass7, charClass2);
      assertSame(charClass7, charClass1);
      assertSame(charClass7, charClass3);
      assertSame(charClass7, charClass11);
      assertSame(charClass7, charClass9);
      assertSame(charClass7, charClass6);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass12);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass10);
      assertSame(charClass0, charClass11);
      assertSame(charClass0, charClass9);
      assertSame(charClass0, charClass8);
      assertSame(charClass0, charClass6);
      assertSame(charClass12, charClass10);
      assertSame(charClass12, charClass11);
      assertSame(charClass12, charClass9);
      assertSame(charClass12, charClass6);
      assertSame(charClass12, charClass1);
      assertSame(charClass12, charClass3);
      assertSame(charClass12, charClass5);
      assertSame(charClass12, charClass8);
      assertSame(charClass12, charClass4);
      assertSame(charClass12, charClass0);
      assertSame(charClass12, charClass2);
      assertSame(charClass12, charClass7);
      assertNotNull(charClass12);
      assertArrayEquals(new int[] {(-1696), 1114111, 7380, 1848, 66639, (-756)}, intArray0);
      assertEquals(6, intArray0.length);
      assertEquals(4, intArray1.length);
      
      CharClass charClass13 = charClass4.appendTable(intArray1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass13);
      assertSame(charClass0, charClass12);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass10);
      assertSame(charClass0, charClass8);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass11);
      assertSame(charClass0, charClass9);
      assertSame(charClass13, charClass6);
      assertSame(charClass13, charClass1);
      assertSame(charClass13, charClass8);
      assertSame(charClass13, charClass10);
      assertSame(charClass13, charClass3);
      assertSame(charClass13, charClass11);
      assertSame(charClass13, charClass9);
      assertSame(charClass13, charClass7);
      assertSame(charClass13, charClass2);
      assertSame(charClass13, charClass4);
      assertSame(charClass13, charClass5);
      assertSame(charClass13, charClass0);
      assertSame(charClass13, charClass12);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass6);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass12);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass5);
      assertSame(charClass4, charClass9);
      assertSame(charClass4, charClass8);
      assertSame(charClass4, charClass11);
      assertSame(charClass4, charClass13);
      assertSame(charClass4, charClass10);
      assertSame(charClass4, charClass7);
      assertNotNull(charClass13);
      assertArrayEquals(new int[] {(-1696), 1114111, 7380, 1848, 66639, (-756)}, intArray0);
      assertEquals(6, intArray0.length);
      assertEquals(4, intArray1.length);
      
      CharClass charClass14 = charClass0.appendTable(intArray1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass13);
      assertSame(charClass0, charClass12);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass10);
      assertSame(charClass0, charClass14);
      assertSame(charClass0, charClass8);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass11);
      assertSame(charClass0, charClass9);
      assertSame(charClass14, charClass5);
      assertSame(charClass14, charClass10);
      assertSame(charClass14, charClass6);
      assertSame(charClass14, charClass2);
      assertSame(charClass14, charClass12);
      assertSame(charClass14, charClass0);
      assertSame(charClass14, charClass1);
      assertSame(charClass14, charClass8);
      assertSame(charClass14, charClass4);
      assertSame(charClass14, charClass7);
      assertSame(charClass14, charClass13);
      assertSame(charClass14, charClass3);
      assertSame(charClass14, charClass11);
      assertSame(charClass14, charClass9);
      assertNotNull(charClass14);
      assertArrayEquals(new int[] {(-1696), 1114111, 7380, 1848, 66639, (-756)}, intArray0);
      assertEquals(6, intArray0.length);
      assertEquals(4, intArray1.length);
      
      CharClass charClass15 = charClass12.appendLiteral(6800, 1848);
      assertSame(charClass7, charClass10);
      assertSame(charClass7, charClass12);
      assertSame(charClass7, charClass14);
      assertSame(charClass7, charClass5);
      assertSame(charClass7, charClass8);
      assertSame(charClass7, charClass2);
      assertSame(charClass7, charClass1);
      assertSame(charClass7, charClass3);
      assertSame(charClass7, charClass11);
      assertSame(charClass7, charClass9);
      assertSame(charClass7, charClass13);
      assertSame(charClass7, charClass4);
      assertSame(charClass7, charClass0);
      assertSame(charClass7, charClass15);
      assertSame(charClass7, charClass6);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass13);
      assertSame(charClass0, charClass12);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass10);
      assertSame(charClass0, charClass14);
      assertSame(charClass0, charClass15);
      assertSame(charClass0, charClass8);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass11);
      assertSame(charClass0, charClass9);
      assertSame(charClass12, charClass10);
      assertSame(charClass12, charClass15);
      assertSame(charClass12, charClass11);
      assertSame(charClass12, charClass6);
      assertSame(charClass12, charClass1);
      assertSame(charClass12, charClass3);
      assertSame(charClass12, charClass14);
      assertSame(charClass12, charClass8);
      assertSame(charClass12, charClass4);
      assertSame(charClass12, charClass7);
      assertSame(charClass12, charClass13);
      assertSame(charClass12, charClass9);
      assertSame(charClass12, charClass5);
      assertSame(charClass12, charClass0);
      assertSame(charClass12, charClass2);
      assertSame(charClass15, charClass8);
      assertSame(charClass15, charClass14);
      assertSame(charClass15, charClass10);
      assertSame(charClass15, charClass13);
      assertSame(charClass15, charClass9);
      assertSame(charClass15, charClass11);
      assertSame(charClass15, charClass1);
      assertSame(charClass15, charClass3);
      assertSame(charClass15, charClass2);
      assertSame(charClass15, charClass7);
      assertSame(charClass15, charClass5);
      assertSame(charClass15, charClass4);
      assertSame(charClass15, charClass0);
      assertSame(charClass15, charClass12);
      assertSame(charClass15, charClass6);
      assertNotNull(charClass15);
      assertArrayEquals(new int[] {(-1696), 1114111, 7380, 1848, 66639, (-756)}, intArray0);
      assertEquals(6, intArray0.length);
      assertEquals(4, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.appendRange(6412, 6412);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      
      CharClass charClass2 = charClass1.cleanClass();
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertNotNull(charClass2);
      
      CharClass charClass3 = charClass2.appendLiteral(6412, 6412);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      assertNotNull(charClass3);
      
      int[] intArray0 = new int[2];
      intArray0[0] = 6412;
      intArray0[1] = 6412;
      CharClass charClass4 = charClass3.appendNegatedClass(intArray0);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass4);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass4);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass1);
      assertNotNull(charClass4);
      assertArrayEquals(new int[] {6412, 6412}, intArray0);
      assertEquals(2, intArray0.length);
      
      CharClass charClass5 = charClass4.negateClass();
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass5);
      assertSame(charClass3, charClass5);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass4);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass5);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass1);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass2);
      assertNotNull(charClass5);
      assertArrayEquals(new int[] {6412, 6412}, intArray0);
      assertEquals(2, intArray0.length);
      
      String string0 = charClass1.toString();
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertEquals("[]", string0);
      assertNotNull(string0);
      
      int[][] intArray1 = new int[8][7];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      intArray1[2] = intArray0;
      intArray1[3] = intArray0;
      intArray1[4] = intArray0;
      intArray1[5] = intArray0;
      intArray1[6] = intArray0;
      intArray1[7] = intArray0;
      // Undeclared exception!
      try { 
        charClass2.appendTable(intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[] intArray0 = new int[6];
      intArray0[0] = 407;
      intArray0[1] = (-233);
      intArray0[2] = 0;
      intArray0[3] = 4;
      intArray0[4] = 2703;
      int[][] intArray1 = new int[9][2];
      intArray1[7] = intArray0;
      intArray1[1] = intArray0;
      intArray1[2] = intArray0;
      intArray1[3] = intArray0;
      intArray1[4] = intArray0;
      intArray1[5] = intArray0;
      int[] intArray2 = new int[0];
      assertFalse(intArray2.equals((Object)intArray0));
      
      intArray1[6] = intArray2;
      intArray1[7] = intArray0;
      intArray1[8] = intArray0;
      // Undeclared exception!
      try { 
        charClass0.appendNegatedTable(intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int int0 = 1478;
      CharClass charClass1 = charClass0.appendRange(1478, 1478);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      
      int[] intArray0 = new int[7];
      intArray0[0] = 1478;
      intArray0[1] = 1478;
      intArray0[2] = 1478;
      intArray0[3] = (-829);
      intArray0[4] = 1478;
      intArray0[5] = 1478;
      intArray0[6] = 1478;
      // Undeclared exception!
      try { 
        charClass1.appendClassWithSign(intArray0, (-774));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      // Undeclared exception!
      try { 
        CharClass.charClassToString((int[]) null, 4);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      int[] intArray0 = new int[2];
      CharClass charClass0 = new CharClass(intArray0);
      assertNotNull(charClass0);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertEquals(2, intArray0.length);
      
      CharClass charClass1 = charClass0.appendNegatedClass(intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      assertArrayEquals(new int[] {0, 1114111}, intArray0);
      assertEquals(2, intArray0.length);
      
      int[] intArray1 = new int[4];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 1740;
      intArray1[2] = (-1692);
      intArray1[3] = (-1692);
      String string0 = CharClass.charClassToString(intArray1, (-2));
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray1, intArray0);
      assertEquals("[]", string0);
      assertNotNull(string0);
      assertArrayEquals(new int[] {1740, 0, (-1692), (-1692)}, intArray1);
      assertEquals(4, intArray1.length);
      
      int[] intArray2 = charClass0.toArray();
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray1));
      assertSame(intArray0, intArray2);
      assertNotSame(intArray0, intArray1);
      assertSame(charClass0, charClass1);
      assertSame(intArray2, intArray0);
      assertNotSame(intArray2, intArray1);
      assertNotNull(intArray2);
      assertArrayEquals(new int[] {0, 1114111}, intArray0);
      assertArrayEquals(new int[] {0, 1114111}, intArray2);
      assertEquals(2, intArray0.length);
      assertEquals(2, intArray2.length);
      
      CharClass charClass2 = charClass0.appendLiteral(1740, (-2331));
      assertFalse(intArray0.equals((Object)intArray1));
      assertSame(intArray0, intArray2);
      assertNotSame(intArray0, intArray1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertNotNull(charClass2);
      assertArrayEquals(new int[] {0, 1114111}, intArray0);
      assertEquals(2, intArray0.length);
      
      CharClass charClass3 = charClass0.appendFoldedRange(1927, 1740);
      assertFalse(intArray0.equals((Object)intArray1));
      assertSame(intArray0, intArray2);
      assertNotSame(intArray0, intArray1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      assertNotNull(charClass3);
      assertArrayEquals(new int[] {0, 1114111}, intArray0);
      assertEquals(2, intArray0.length);
      
      CharClass charClass4 = charClass1.appendLiteral(0, (-1692));
      assertFalse(intArray0.equals((Object)intArray1));
      assertSame(intArray0, intArray2);
      assertNotSame(intArray0, intArray1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass3);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass2);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass2);
      assertNotNull(charClass4);
      assertArrayEquals(new int[] {0, 1114111}, intArray0);
      assertEquals(2, intArray0.length);
      
      int[][] intArray3 = new int[3][7];
      intArray3[0] = intArray2;
      int[] intArray4 = new int[6];
      assertFalse(intArray4.equals((Object)intArray2));
      assertFalse(intArray4.equals((Object)intArray1));
      assertFalse(intArray4.equals((Object)intArray0));
      
      intArray4[0] = (-1692);
      intArray4[1] = (-2);
      intArray4[2] = (-391);
      intArray4[3] = 6081;
      intArray4[4] = (-1692);
      intArray3[1] = intArray4;
      intArray3[2] = intArray1;
      // Undeclared exception!
      try { 
        charClass4.appendNegatedTable(intArray3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.appendLiteral((-797), 0);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      
      int[][] intArray0 = new int[4][9];
      int[] intArray1 = new int[9];
      intArray1[0] = 1870;
      intArray1[1] = (-797);
      intArray1[2] = 0;
      intArray1[3] = (-797);
      intArray1[4] = 69714;
      intArray1[5] = (-797);
      intArray1[6] = (-797);
      intArray1[7] = (-797);
      intArray1[8] = (-797);
      intArray0[0] = intArray1;
      int[] intArray2 = new int[4];
      assertFalse(intArray2.equals((Object)intArray1));
      
      intArray2[0] = 69714;
      intArray2[1] = 69714;
      intArray2[2] = 0;
      intArray2[3] = (-797);
      intArray0[1] = intArray2;
      int[] intArray3 = new int[8];
      assertFalse(intArray3.equals((Object)intArray1));
      assertFalse(intArray3.equals((Object)intArray2));
      
      intArray3[0] = 69714;
      intArray3[1] = 1870;
      intArray3[2] = 0;
      intArray3[3] = 1870;
      intArray3[4] = 4288;
      intArray3[5] = 0;
      intArray3[6] = (-797);
      intArray3[7] = (-797);
      intArray0[2] = intArray3;
      int[] intArray4 = new int[3];
      assertFalse(intArray4.equals((Object)intArray1));
      assertFalse(intArray4.equals((Object)intArray2));
      assertFalse(intArray4.equals((Object)intArray3));
      
      intArray4[0] = 69714;
      intArray4[1] = 4288;
      intArray4[2] = 0;
      intArray0[3] = intArray4;
      // Undeclared exception!
      charClass1.appendTableWithSign(intArray0, (-797));
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      // Undeclared exception!
      try { 
        charClass0.appendClass((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = (-1701);
      int int0 = (-1529);
      intArray0[1] = (-1529);
      intArray0[2] = 0;
      int int1 = 64;
      intArray0[3] = 64;
      int int2 = 0;
      intArray0[4] = 0;
      int int3 = 3332;
      intArray0[5] = 3332;
      CharClass charClass0 = new CharClass(intArray0);
      assertNotNull(charClass0);
      assertArrayEquals(new int[] {(-1701), (-1529), 0, 64, 0, 3332}, intArray0);
      assertEquals(6, intArray0.length);
      
      int[][] intArrayArray0 = null;
      // Undeclared exception!
      try { 
        charClass0.appendTable((int[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 604;
      intArray0[1] = 12991;
      intArray0[2] = 953;
      intArray0[3] = 391;
      intArray0[4] = 614;
      intArray0[5] = 609;
      CharClass charClass0 = new CharClass(intArray0);
      assertNotNull(charClass0);
      assertArrayEquals(new int[] {604, 12991, 953, 391, 614, 609}, intArray0);
      assertEquals(6, intArray0.length);
      
      int[][] intArray1 = new int[1][8];
      intArray1[0] = intArray0;
      CharClass charClass1 = charClass0.appendNegatedTable(intArray1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      assertArrayEquals(new int[] {604, 12991, 953, 391, 614, 609}, intArray0);
      assertEquals(6, intArray0.length);
      assertEquals(1, intArray1.length);
      
      CharClass charClass2 = charClass1.appendClassWithSign(intArray0, 609);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertNotNull(charClass2);
      assertArrayEquals(new int[] {604, 12991, 953, 391, 614, 609}, intArray0);
      assertEquals(6, intArray0.length);
      assertEquals(1, intArray1.length);
      
      CharClass charClass3 = charClass2.appendRange(603, 65);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass3);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass0);
      assertNotNull(charClass3);
      assertArrayEquals(new int[] {604, 12991, 953, 391, 614, 609}, intArray0);
      assertEquals(6, intArray0.length);
      assertEquals(1, intArray1.length);
      
      CharClass charClass4 = charClass3.negateClass();
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass4);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass3);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass0);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass1);
      assertNotNull(charClass4);
      assertArrayEquals(new int[] {604, 12991, 953, 391, 614, 609}, intArray0);
      assertEquals(6, intArray0.length);
      assertEquals(1, intArray1.length);
      
      CharClass charClass5 = charClass4.cleanClass();
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass4);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass5);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass3);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass5);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass5);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass1);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass2);
      assertNotNull(charClass5);
      assertArrayEquals(new int[] {604, 12991, 953, 391, 614, 609}, intArray0);
      assertEquals(6, intArray0.length);
      assertEquals(1, intArray1.length);
      
      String string0 = charClass5.toString();
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass4);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass5);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass3);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass5);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass5);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass1);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass2);
      assertEquals("[0x0-0x10ffff]", string0);
      assertNotNull(string0);
      assertArrayEquals(new int[] {604, 12991, 953, 391, 614, 609}, intArray0);
      assertEquals(6, intArray0.length);
      assertEquals(1, intArray1.length);
      
      CharClass charClass6 = charClass5.appendClass(intArray0);
      assertSame(charClass6, charClass3);
      assertSame(charClass6, charClass1);
      assertSame(charClass6, charClass4);
      assertSame(charClass6, charClass2);
      assertSame(charClass6, charClass0);
      assertSame(charClass6, charClass5);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass6);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass6);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass5);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass6);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass6);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass5);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass6);
      assertSame(charClass4, charClass5);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass2);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass6);
      assertSame(charClass5, charClass2);
      assertNotNull(charClass6);
      assertArrayEquals(new int[] {604, 12991, 953, 391, 614, 609}, intArray0);
      assertEquals(6, intArray0.length);
      assertEquals(1, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 0;
      intArray0[1] = (-1692);
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.appendNegatedClass(intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      assertArrayEquals(new int[] {0, (-1692)}, intArray0);
      assertEquals(2, intArray0.length);
      
      int[] intArray1 = new int[4];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 1740;
      int[][] intArray2 = new int[0][4];
      CharClass charClass2 = charClass1.appendNegatedTable(intArray2);
      assertFalse(intArray0.equals((Object)intArray1));
      assertNotSame(intArray0, intArray1);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertNotNull(charClass2);
      assertArrayEquals(new int[] {0, (-1692)}, intArray0);
      assertEquals(2, intArray0.length);
      assertEquals(0, intArray2.length);
      
      CharClass charClass3 = charClass0.appendTable(intArray2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass1);
      assertNotNull(charClass3);
      assertEquals(0, intArray2.length);
      
      CharClass charClass4 = new CharClass();
      assertFalse(charClass4.equals((Object)charClass1));
      assertFalse(charClass4.equals((Object)charClass2));
      assertFalse(charClass4.equals((Object)charClass3));
      assertFalse(charClass4.equals((Object)charClass0));
      assertNotNull(charClass4);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 0;
      intArray0[1] = (-196);
      intArray0[2] = 118;
      intArray0[3] = (-1356);
      intArray0[4] = 0;
      intArray0[5] = 1304;
      intArray0[6] = 94;
      intArray0[7] = (-1147);
      CharClass charClass0 = new CharClass(intArray0);
      assertNotNull(charClass0);
      assertArrayEquals(new int[] {0, (-196), 118, (-1356), 0, 1304, 94, (-1147)}, intArray0);
      assertEquals(8, intArray0.length);
      
      CharClass charClass1 = charClass0.appendFoldedRange((-126), (-568));
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      assertArrayEquals(new int[] {0, (-196), 118, (-1356), 0, 1304, 94, (-1147)}, intArray0);
      assertEquals(8, intArray0.length);
      
      int[][] intArray1 = new int[6][2];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      intArray1[2] = intArray0;
      intArray1[3] = intArray0;
      intArray1[4] = intArray0;
      int[] intArray2 = new int[8];
      assertFalse(intArray2.equals((Object)intArray0));
      
      intArray2[0] = 0;
      intArray2[1] = (-1356);
      intArray2[2] = (-1356);
      intArray2[3] = (-1147);
      intArray2[4] = (-126);
      intArray2[5] = (-1356);
      intArray2[6] = (-568);
      intArray2[7] = (-184);
      intArray1[5] = intArray2;
      CharClass charClass2 = charClass1.appendNegatedTable(intArray1);
      assertFalse(intArray0.equals((Object)intArray2));
      assertNotSame(intArray0, intArray2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertNotNull(charClass2);
      assertArrayEquals(new int[] {0, (-196), 118, (-1356), 0, 1304, 94, (-1147)}, intArray0);
      assertEquals(8, intArray0.length);
      assertEquals(6, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.negateClass();
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      
      int[] intArray0 = new int[6];
      intArray0[0] = 1114111;
      intArray0[1] = (-3566);
      intArray0[2] = 7983;
      intArray0[3] = (-1545);
      intArray0[4] = (-3219);
      intArray0[5] = 13;
      CharClass charClass2 = charClass1.appendClass(intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertNotNull(charClass2);
      assertArrayEquals(new int[] {1114111, (-3566), 7983, (-1545), (-3219), 13}, intArray0);
      assertEquals(6, intArray0.length);
      
      int[][] intArray1 = new int[4][4];
      intArray1[0] = intArray0;
      int[] intArray2 = new int[5];
      assertFalse(intArray2.equals((Object)intArray0));
      
      intArray2[0] = (-3219);
      intArray2[1] = 1114111;
      intArray2[2] = 1114111;
      intArray2[3] = 1114111;
      intArray2[4] = (-1545);
      intArray1[1] = intArray2;
      int[] intArray3 = new int[6];
      assertFalse(intArray3.equals((Object)intArray0));
      assertFalse(intArray3.equals((Object)intArray2));
      
      intArray3[0] = 7983;
      intArray3[1] = (-3219);
      intArray3[2] = 2997;
      intArray3[3] = 12;
      intArray3[4] = 1114111;
      intArray3[5] = 1;
      intArray1[2] = intArray3;
      intArray1[3] = intArray0;
      CharClass charClass3 = charClass2.appendNegatedTable(intArray1);
      assertFalse(intArray0.equals((Object)intArray3));
      assertFalse(intArray0.equals((Object)intArray2));
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass3);
      assertNotSame(intArray0, intArray3);
      assertNotSame(intArray0, intArray2);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass2);
      assertNotNull(charClass3);
      assertArrayEquals(new int[] {1114111, (-3566), 7983, (-1545), (-3219), 13}, intArray0);
      assertEquals(6, intArray0.length);
      assertEquals(4, intArray1.length);
      
      // Undeclared exception!
      try { 
        CharClass.charClassToString(intArray0, 755);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[] intArray0 = new int[4];
      intArray0[0] = 190;
      intArray0[1] = 0;
      intArray0[2] = 3177;
      intArray0[3] = (-1654);
      CharClass charClass1 = charClass0.appendNegatedClass(intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      assertArrayEquals(new int[] {190, 0, 3177, (-1654)}, intArray0);
      assertEquals(4, intArray0.length);
      
      int[] intArray1 = new int[6];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 0;
      intArray1[1] = (-1654);
      intArray1[2] = (-1654);
      intArray1[3] = 190;
      intArray1[4] = (-1654);
      intArray1[5] = 0;
      CharClass charClass2 = charClass1.appendClass(intArray1);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertNotSame(intArray0, intArray1);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertNotSame(intArray1, intArray0);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertNotNull(charClass2);
      assertArrayEquals(new int[] {190, 0, 3177, (-1654)}, intArray0);
      assertArrayEquals(new int[] {0, (-1654), (-1654), 190, (-1654), 0}, intArray1);
      assertEquals(4, intArray0.length);
      assertEquals(6, intArray1.length);
      
      int[][] intArray2 = new int[1][7];
      intArray2[0] = intArray1;
      CharClass charClass3 = charClass2.appendNegatedTable(intArray2);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass0);
      assertNotSame(intArray0, intArray1);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass0);
      assertNotSame(intArray1, intArray0);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass1);
      assertNotNull(charClass3);
      assertArrayEquals(new int[] {190, 0, 3177, (-1654)}, intArray0);
      assertArrayEquals(new int[] {0, (-1654), (-1654), 190, (-1654), 0}, intArray1);
      assertEquals(4, intArray0.length);
      assertEquals(6, intArray1.length);
      assertEquals(1, intArray2.length);
      
      CharClass charClass4 = charClass3.appendRange(0, (-613));
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass3);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass0);
      assertNotSame(intArray0, intArray1);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass3);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass0);
      assertNotSame(intArray1, intArray0);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass1);
      assertNotNull(charClass4);
      assertArrayEquals(new int[] {190, 0, 3177, (-1654)}, intArray0);
      assertArrayEquals(new int[] {0, (-1654), (-1654), 190, (-1654), 0}, intArray1);
      assertEquals(4, intArray0.length);
      assertEquals(6, intArray1.length);
      assertEquals(1, intArray2.length);
      
      CharClass charClass5 = charClass3.appendTableWithSign(intArray2, (-619));
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass3);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass5);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass0);
      assertNotSame(intArray0, intArray1);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass0);
      assertNotSame(intArray1, intArray0);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass5);
      assertNotNull(charClass5);
      assertArrayEquals(new int[] {190, 0, 3177, (-1654)}, intArray0);
      assertArrayEquals(new int[] {0, (-1654), (-1654), 190, (-1654), 0}, intArray1);
      assertEquals(4, intArray0.length);
      assertEquals(6, intArray1.length);
      assertEquals(1, intArray2.length);
      
      CharClass charClass6 = charClass5.appendFoldedRange(320, (-1654));
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass3);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass5);
      assertSame(charClass3, charClass6);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass0);
      assertNotSame(intArray0, intArray1);
      assertSame(charClass5, charClass6);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass0);
      assertSame(charClass6, charClass2);
      assertSame(charClass6, charClass1);
      assertSame(charClass6, charClass5);
      assertSame(charClass6, charClass4);
      assertSame(charClass6, charClass3);
      assertSame(charClass6, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass6);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass0);
      assertNotSame(intArray1, intArray0);
      assertSame(charClass2, charClass6);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass5);
      assertNotNull(charClass6);
      assertArrayEquals(new int[] {190, 0, 3177, (-1654)}, intArray0);
      assertArrayEquals(new int[] {0, (-1654), (-1654), 190, (-1654), 0}, intArray1);
      assertEquals(4, intArray0.length);
      assertEquals(6, intArray1.length);
      assertEquals(1, intArray2.length);
      
      CharClass charClass7 = charClass3.appendRange((-613), 4);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass3);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass5);
      assertSame(charClass3, charClass6);
      assertSame(charClass3, charClass7);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass0);
      assertNotSame(intArray0, intArray1);
      assertSame(charClass7, charClass1);
      assertSame(charClass7, charClass6);
      assertSame(charClass7, charClass5);
      assertSame(charClass7, charClass4);
      assertSame(charClass7, charClass2);
      assertSame(charClass7, charClass3);
      assertSame(charClass7, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass6);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass7);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass0);
      assertNotSame(intArray1, intArray0);
      assertSame(charClass2, charClass6);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass7);
      assertSame(charClass2, charClass5);
      assertNotNull(charClass7);
      assertArrayEquals(new int[] {190, 0, 3177, (-1654)}, intArray0);
      assertArrayEquals(new int[] {0, (-1654), (-1654), 190, (-1654), 0}, intArray1);
      assertEquals(4, intArray0.length);
      assertEquals(6, intArray1.length);
      assertEquals(1, intArray2.length);
      
      CharClass charClass8 = charClass6.appendTable(intArray2);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass8);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass3);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass5);
      assertSame(charClass3, charClass8);
      assertSame(charClass3, charClass6);
      assertSame(charClass3, charClass7);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass0);
      assertNotSame(intArray0, intArray1);
      assertSame(charClass5, charClass6);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass8);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass7);
      assertSame(charClass6, charClass2);
      assertSame(charClass6, charClass1);
      assertSame(charClass6, charClass7);
      assertSame(charClass6, charClass5);
      assertSame(charClass6, charClass8);
      assertSame(charClass6, charClass4);
      assertSame(charClass6, charClass3);
      assertSame(charClass6, charClass0);
      assertSame(charClass8, charClass7);
      assertSame(charClass8, charClass0);
      assertSame(charClass8, charClass6);
      assertSame(charClass8, charClass5);
      assertSame(charClass8, charClass1);
      assertSame(charClass8, charClass3);
      assertSame(charClass8, charClass2);
      assertSame(charClass8, charClass4);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass6);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass7);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass8);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass0);
      assertNotSame(intArray1, intArray0);
      assertSame(charClass2, charClass6);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass8);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass7);
      assertSame(charClass2, charClass5);
      assertNotNull(charClass8);
      assertArrayEquals(new int[] {190, 0, 3177, (-1654)}, intArray0);
      assertArrayEquals(new int[] {0, (-1654), (-1654), 190, (-1654), 0}, intArray1);
      assertEquals(4, intArray0.length);
      assertEquals(6, intArray1.length);
      assertEquals(1, intArray2.length);
      
      CharClass charClass9 = charClass4.appendFoldedClass(intArray0);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass8);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass9);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass5);
      assertSame(charClass3, charClass8);
      assertSame(charClass3, charClass6);
      assertSame(charClass3, charClass7);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass9);
      assertSame(charClass3, charClass0);
      assertNotSame(intArray0, intArray1);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass9);
      assertSame(charClass4, charClass6);
      assertSame(charClass4, charClass5);
      assertSame(charClass4, charClass7);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass8);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass6);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass7);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass8);
      assertSame(charClass1, charClass9);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass0);
      assertSame(charClass9, charClass2);
      assertSame(charClass9, charClass0);
      assertSame(charClass9, charClass6);
      assertSame(charClass9, charClass7);
      assertSame(charClass9, charClass5);
      assertSame(charClass9, charClass3);
      assertSame(charClass9, charClass4);
      assertSame(charClass9, charClass1);
      assertSame(charClass9, charClass8);
      assertNotSame(intArray1, intArray0);
      assertSame(charClass2, charClass6);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass9);
      assertSame(charClass2, charClass8);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass7);
      assertSame(charClass2, charClass5);
      assertNotNull(charClass9);
      assertArrayEquals(new int[] {190, 0, 3177, (-1654)}, intArray0);
      assertArrayEquals(new int[] {0, (-1654), (-1654), 190, (-1654), 0}, intArray1);
      assertEquals(4, intArray0.length);
      assertEquals(6, intArray1.length);
      assertEquals(1, intArray2.length);
      
      String string0 = CharClass.charClassToString(intArray1, (-1654));
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray1, intArray0);
      assertEquals("[]", string0);
      assertNotNull(string0);
      assertArrayEquals(new int[] {0, (-1654), (-1654), 190, (-1654), 0}, intArray1);
      assertEquals(6, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = (-493);
      CharClass charClass0 = new CharClass(intArray0);
      assertNotNull(charClass0);
      assertArrayEquals(new int[] {(-493)}, intArray0);
      assertEquals(1, intArray0.length);
      
      // Undeclared exception!
      try { 
        charClass0.appendTableWithSign((int[][]) null, (-1));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.appendFoldedRange(65, 65);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      
      CharClass charClass2 = charClass1.cleanClass();
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertNotNull(charClass2);
      
      CharClass charClass3 = charClass2.appendLiteral(65, 42888);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass1);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass2);
      assertNotNull(charClass3);
      
      CharClass charClass4 = charClass1.appendFoldedRange(65, 33);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass4);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass0);
      assertNotNull(charClass4);
      
      int[] intArray0 = new int[0];
      CharClass charClass5 = charClass0.appendFoldedClass(intArray0);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass3);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass4);
      assertNotNull(charClass5);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      int[] intArray0 = new int[1];
      int int0 = 1887;
      intArray0[0] = 1887;
      CharClass charClass0 = new CharClass(intArray0);
      assertNotNull(charClass0);
      assertArrayEquals(new int[] {1887}, intArray0);
      assertEquals(1, intArray0.length);
      
      int int1 = 119154;
      // Undeclared exception!
      charClass0.appendFoldedRange(1887, 119154);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int int0 = 9185;
      CharClass charClass1 = charClass0.appendRange(9185, 9185);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      
      CharClass charClass2 = charClass1.negateClass();
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertNotNull(charClass2);
      
      CharClass charClass3 = charClass0.appendRange(9185, 9185);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass0);
      assertNotNull(charClass3);
      
      int int1 = 1597;
      CharClass charClass4 = charClass0.appendRange(1597, 1597);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass3);
      assertNotNull(charClass4);
      
      int int2 = 0;
      // Undeclared exception!
      charClass4.appendFoldedRange(0, 1597);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.negateClass();
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      
      int[] intArray0 = new int[8];
      int int0 = 1042;
      intArray0[0] = 1042;
      // Undeclared exception!
      try { 
        charClass0.appendGroup((CharGroup) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      // Undeclared exception!
      try { 
        charClass0.appendNegatedTable((int[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 7380;
      intArray0[1] = 1848;
      intArray0[2] = 66639;
      intArray0[3] = (-756);
      intArray0[4] = (-1928);
      intArray0[5] = 2383;
      CharClass charClass0 = new CharClass(intArray0);
      assertNotNull(charClass0);
      assertArrayEquals(new int[] {7380, 1848, 66639, (-756), (-1928), 2383}, intArray0);
      assertEquals(6, intArray0.length);
      
      CharClass charClass1 = charClass0.appendFoldedRange((-1928), (-1696));
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      assertArrayEquals(new int[] {7380, 1848, 66639, (-756), (-1928), 2383}, intArray0);
      assertEquals(6, intArray0.length);
      
      CharClass charClass2 = charClass1.cleanClass();
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertNotNull(charClass2);
      assertArrayEquals(new int[] {(-1928), 2383, 7380, 1848, 66639, (-756)}, intArray0);
      assertEquals(6, intArray0.length);
      
      String string0 = charClass1.toString();
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertEquals("[0xfffff878-0x94f 0x1cd4-0x738 0x1044f-0xfffffd0c]", string0);
      assertNotNull(string0);
      assertArrayEquals(new int[] {(-1928), 2383, 7380, 1848, 66639, (-756)}, intArray0);
      assertEquals(6, intArray0.length);
      
      CharClass charClass3 = charClass0.negateClass();
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      assertNotNull(charClass3);
      assertArrayEquals(new int[] {2384, 7379, 1849, 66638, (-755), 1114111}, intArray0);
      assertEquals(6, intArray0.length);
      
      CharClass charClass4 = charClass0.appendNegatedClass(intArray0);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass3);
      assertNotNull(charClass4);
      assertArrayEquals(new int[] {2384, 7379, 1849, 66638, (-755), 1114111}, intArray0);
      assertEquals(6, intArray0.length);
      
      String string1 = charClass4.toString();
      assertFalse(string1.equals((Object)string0));
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass3);
      assertEquals("[0x950-0x1cd3 0x739-0x1044e 0xfffffd0d-0x10ffff]", string1);
      assertNotNull(string1);
      assertArrayEquals(new int[] {2384, 7379, 1849, 66638, (-755), 1114111}, intArray0);
      assertEquals(6, intArray0.length);
      
      int[][] intArray1 = new int[4][6];
      intArray1[0] = intArray0;
      CharClass charClass5 = charClass0.appendClass(intArray0);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass1);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertNotNull(charClass5);
      assertArrayEquals(new int[] {2384, 7379, 1849, 66638, (-755), 1114111}, intArray0);
      assertEquals(6, intArray0.length);
      
      // Undeclared exception!
      charClass3.appendNegatedTable(intArray1);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[][] intArray0 = new int[0][1];
      CharClass charClass1 = charClass0.appendTableWithSign(intArray0, (-1));
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      assertEquals(0, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.negateClass();
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      
      int[] intArray0 = new int[3];
      intArray0[0] = 1;
      intArray0[1] = 283;
      intArray0[2] = 283;
      // Undeclared exception!
      try { 
        charClass0.appendNegatedClass(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[][] intArray0 = new int[3][9];
      int[] intArray1 = new int[3];
      int int0 = 32;
      intArray1[0] = 32;
      int int1 = 225;
      intArray1[1] = 225;
      int int2 = 4189;
      intArray1[2] = 4189;
      intArray0[0] = intArray1;
      int[] intArray2 = new int[5];
      assertFalse(intArray2.equals((Object)intArray1));
      
      intArray2[0] = 225;
      intArray2[1] = 32;
      intArray2[2] = 4189;
      intArray2[3] = 4189;
      intArray2[4] = 32;
      intArray0[1] = intArray2;
      // Undeclared exception!
      try { 
        charClass0.appendFoldedClass(intArray2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[][] intArray0 = new int[7][7];
      int[] intArray1 = new int[4];
      intArray1[0] = 2;
      intArray1[1] = 1039;
      intArray1[2] = (-1019);
      intArray1[3] = 74864;
      intArray0[0] = intArray1;
      int[] intArray2 = new int[6];
      assertFalse(intArray2.equals((Object)intArray1));
      
      intArray2[0] = 74864;
      intArray2[1] = 74864;
      intArray2[2] = 2;
      intArray2[3] = 1039;
      intArray2[4] = 74864;
      intArray2[5] = 2;
      intArray0[1] = intArray2;
      int[] intArray3 = new int[2];
      assertFalse(intArray3.equals((Object)intArray1));
      assertFalse(intArray3.equals((Object)intArray2));
      
      intArray3[0] = 2;
      intArray3[1] = (-1019);
      intArray0[2] = intArray3;
      int[] intArray4 = new int[3];
      assertFalse(intArray4.equals((Object)intArray3));
      assertFalse(intArray4.equals((Object)intArray1));
      assertFalse(intArray4.equals((Object)intArray2));
      
      intArray4[0] = (-1019);
      intArray4[1] = 0;
      intArray4[2] = 74864;
      intArray0[3] = intArray4;
      int[] intArray5 = new int[2];
      assertFalse(intArray5.equals((Object)intArray3));
      assertFalse(intArray5.equals((Object)intArray4));
      assertFalse(intArray5.equals((Object)intArray1));
      assertFalse(intArray5.equals((Object)intArray2));
      
      intArray5[0] = 2;
      intArray5[1] = 74864;
      intArray0[4] = intArray5;
      int[] intArray6 = new int[2];
      assertFalse(intArray6.equals((Object)intArray3));
      assertFalse(intArray6.equals((Object)intArray4));
      assertFalse(intArray6.equals((Object)intArray2));
      assertFalse(intArray6.equals((Object)intArray5));
      assertFalse(intArray6.equals((Object)intArray1));
      
      intArray6[0] = (-2168);
      intArray6[1] = 0;
      intArray0[5] = intArray6;
      int[] intArray7 = new int[2];
      assertFalse(intArray7.equals((Object)intArray4));
      assertFalse(intArray7.equals((Object)intArray3));
      assertFalse(intArray7.equals((Object)intArray2));
      assertFalse(intArray7.equals((Object)intArray5));
      assertFalse(intArray7.equals((Object)intArray6));
      assertFalse(intArray7.equals((Object)intArray1));
      
      intArray7[0] = (-2168);
      intArray7[1] = 2;
      intArray0[6] = intArray7;
      // Undeclared exception!
      charClass0.appendTableWithSign(intArray0, (-2168));
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      int[] intArray0 = new int[6];
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.negateClass();
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      
      CharClass charClass2 = charClass1.appendClass(intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertNotNull(charClass2);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(6, intArray0.length);
      
      CharClass charClass3 = charClass2.appendRange((-946), (-946));
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass3);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass2);
      assertNotNull(charClass3);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(6, intArray0.length);
      
      CharClass charClass4 = charClass2.appendFoldedRange(688, 0);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass3);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass3);
      assertNotNull(charClass4);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(6, intArray0.length);
      
      int[] intArray1 = charClass3.toArray();
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass3);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass2);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {0, 1114111, (-946), (-946)}, intArray1);
      assertEquals(6, intArray0.length);
      assertEquals(4, intArray1.length);
      
      CharClass charClass5 = charClass2.cleanClass();
      assertFalse(intArray0.equals((Object)intArray1));
      assertNotSame(intArray0, intArray1);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass5);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass3);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass4);
      assertNotNull(charClass5);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(6, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int int0 = 0;
      CharClass charClass1 = charClass0.appendRange(2084, 0);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      
      int[] intArray0 = new int[7];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 2084;
      intArray0[4] = (-1146);
      intArray0[5] = 0;
      intArray0[6] = 2084;
      // Undeclared exception!
      try { 
        charClass1.appendFoldedClass(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.negateClass();
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      
      CharClass charClass2 = charClass1.appendRange((-1499), (-3169));
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertNotNull(charClass2);
      
      CharClass charClass3 = charClass0.appendFoldedRange(749, (-9662882));
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass0);
      assertNotNull(charClass3);
      
      int[] intArray0 = charClass0.toArray();
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {0, 1114111, (-1499), (-3169), 749, (-9662882)}, intArray0);
      assertEquals(6, intArray0.length);
      
      CharClass charClass4 = charClass0.cleanClass();
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass1);
      assertNotNull(charClass4);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      int[] intArray0 = new int[6];
      // Undeclared exception!
      try { 
        CharClass.charClassToString(intArray0, 1554);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 0;
      intArray0[1] = 0;
      CharClass charClass0 = new CharClass(intArray0);
      assertNotNull(charClass0);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertEquals(2, intArray0.length);
      
      CharClass charClass1 = charClass0.appendFoldedRange(0, 29);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      assertArrayEquals(new int[] {0, 29}, intArray0);
      assertEquals(2, intArray0.length);
      
      CharClass charClass2 = charClass1.appendRange((-2314), 0);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertNotNull(charClass2);
      assertArrayEquals(new int[] {(-2314), 29}, intArray0);
      assertEquals(2, intArray0.length);
      
      CharClass charClass3 = charClass2.appendClassWithSign(intArray0, 2813);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass1);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass0);
      assertNotNull(charClass3);
      assertArrayEquals(new int[] {(-2314), 29}, intArray0);
      assertEquals(2, intArray0.length);
      
      CharClass charClass4 = charClass3.appendFoldedClass(intArray0);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass1);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass0);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass2);
      assertNotNull(charClass4);
      assertArrayEquals(new int[] {(-2314), 29}, intArray0);
      assertEquals(2, intArray0.length);
      
      CharClass charClass5 = charClass4.appendClassWithSign(intArray0, 0);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass5);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass1);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass5);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass0);
      assertSame(charClass4, charClass5);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass2);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass0);
      assertNotNull(charClass5);
      assertArrayEquals(new int[] {(-2314), 29}, intArray0);
      assertEquals(2, intArray0.length);
      
      String string0 = CharClass.charClassToString(intArray0, 0);
      assertEquals("[]", string0);
      assertNotNull(string0);
      assertArrayEquals(new int[] {(-2314), 29}, intArray0);
      assertEquals(2, intArray0.length);
      
      String string1 = CharClass.charClassToString(intArray0, (-661));
      assertTrue(string1.equals((Object)string0));
      assertEquals("[]", string1);
      assertNotNull(string1);
      assertArrayEquals(new int[] {(-2314), 29}, intArray0);
      assertEquals(2, intArray0.length);
      
      CharClass charClass6 = charClass4.appendLiteral(1847, 459);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass5);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass6);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass6);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass1);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass5);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass6);
      assertSame(charClass4, charClass5);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass6);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass2);
      assertSame(charClass6, charClass3);
      assertSame(charClass6, charClass4);
      assertSame(charClass6, charClass2);
      assertSame(charClass6, charClass0);
      assertSame(charClass6, charClass5);
      assertSame(charClass6, charClass1);
      assertNotNull(charClass6);
      assertArrayEquals(new int[] {(-2314), 29}, intArray0);
      assertEquals(2, intArray0.length);
      
      CharClass charClass7 = charClass4.appendLiteral((-2996), 0);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass5);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass7);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass6);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass7);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass6);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass1);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass5);
      assertSame(charClass3, charClass7);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass6);
      assertSame(charClass4, charClass5);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass6);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass7);
      assertSame(charClass4, charClass2);
      assertSame(charClass7, charClass3);
      assertSame(charClass7, charClass6);
      assertSame(charClass7, charClass4);
      assertSame(charClass7, charClass0);
      assertSame(charClass7, charClass1);
      assertSame(charClass7, charClass2);
      assertSame(charClass7, charClass5);
      assertNotNull(charClass7);
      assertArrayEquals(new int[] {(-2314), 29}, intArray0);
      assertEquals(2, intArray0.length);
      
      CharClass charClass8 = charClass7.appendClass(intArray0);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass8);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass5);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass7);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass6);
      assertSame(charClass1, charClass8);
      assertSame(charClass2, charClass8);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass7);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass6);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass1);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass5);
      assertSame(charClass3, charClass8);
      assertSame(charClass3, charClass7);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass6);
      assertSame(charClass4, charClass5);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass8);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass6);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass7);
      assertSame(charClass4, charClass2);
      assertSame(charClass7, charClass3);
      assertSame(charClass7, charClass6);
      assertSame(charClass7, charClass4);
      assertSame(charClass7, charClass0);
      assertSame(charClass7, charClass1);
      assertSame(charClass7, charClass8);
      assertSame(charClass7, charClass2);
      assertSame(charClass7, charClass5);
      assertSame(charClass8, charClass2);
      assertSame(charClass8, charClass0);
      assertSame(charClass8, charClass7);
      assertSame(charClass8, charClass6);
      assertSame(charClass8, charClass3);
      assertSame(charClass8, charClass1);
      assertSame(charClass8, charClass4);
      assertSame(charClass8, charClass5);
      assertNotNull(charClass8);
      assertArrayEquals(new int[] {(-2314), 29}, intArray0);
      assertEquals(2, intArray0.length);
      
      String string2 = CharClass.charClassToString(intArray0, 0);
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("[]", string2);
      assertNotNull(string2);
      assertArrayEquals(new int[] {(-2314), 29}, intArray0);
      assertEquals(2, intArray0.length);
      
      CharClass charClass9 = charClass0.appendClass(intArray0);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass9);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass8);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass5);
      assertSame(charClass9, charClass3);
      assertSame(charClass9, charClass1);
      assertSame(charClass9, charClass4);
      assertSame(charClass9, charClass2);
      assertSame(charClass9, charClass7);
      assertSame(charClass9, charClass0);
      assertSame(charClass9, charClass6);
      assertSame(charClass9, charClass8);
      assertSame(charClass9, charClass5);
      assertNotNull(charClass9);
      assertArrayEquals(new int[] {(-2314), 29}, intArray0);
      assertEquals(2, intArray0.length);
      
      int[][] intArray1 = new int[3][3];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      intArray1[2] = intArray0;
      // Undeclared exception!
      try { 
        charClass8.appendNegatedTable(intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[] intArray0 = charClass0.toArray();
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      CharClass charClass1 = charClass0.appendNegatedClass(intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 7380;
      intArray0[1] = 1848;
      intArray0[2] = 66639;
      intArray0[3] = (-756);
      intArray0[4] = (-1928);
      intArray0[5] = 2383;
      CharClass charClass0 = new CharClass(intArray0);
      assertNotNull(charClass0);
      assertArrayEquals(new int[] {7380, 1848, 66639, (-756), (-1928), 2383}, intArray0);
      assertEquals(6, intArray0.length);
      
      int[][] intArray1 = new int[0][1];
      CharClass charClass1 = charClass0.appendTable(intArray1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      assertArrayEquals(new int[] {7380, 1848, 66639, (-756), (-1928), 2383}, intArray0);
      assertEquals(6, intArray0.length);
      assertEquals(0, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[] intArray0 = new int[6];
      intArray0[0] = 407;
      intArray0[1] = (-233);
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 2703;
      intArray0[5] = 0;
      CharClass charClass1 = charClass0.appendNegatedClass(intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      assertArrayEquals(new int[] {407, (-233), 0, 0, 2703, 0}, intArray0);
      assertEquals(6, intArray0.length);
      
      int[][] intArray1 = new int[9][6];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      intArray1[2] = intArray0;
      intArray1[3] = intArray0;
      intArray1[4] = intArray0;
      intArray1[5] = intArray0;
      intArray1[6] = intArray0;
      intArray1[7] = intArray0;
      String string0 = charClass1.toString();
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertEquals("[0xffffff18-0x10ffff]", string0);
      assertNotNull(string0);
      assertArrayEquals(new int[] {407, (-233), 0, 0, 2703, 0}, intArray0);
      assertEquals(6, intArray0.length);
      
      intArray1[8] = intArray0;
      CharClass charClass2 = charClass1.appendTableWithSign(intArray1, 0);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertNotNull(charClass2);
      assertArrayEquals(new int[] {407, (-233), 0, 0, 2703, 0}, intArray0);
      assertEquals(6, intArray0.length);
      assertEquals(9, intArray1.length);
      
      CharClass charClass3 = charClass2.appendNegatedTable(intArray1);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass1);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertNotNull(charClass3);
      assertArrayEquals(new int[] {407, (-233), 0, 0, 2703, 0}, intArray0);
      assertEquals(6, intArray0.length);
      assertEquals(9, intArray1.length);
      
      CharClass charClass4 = charClass3.appendClass(intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass1);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass2);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass4);
      assertNotNull(charClass4);
      assertArrayEquals(new int[] {407, (-233), 0, 0, 2703, 0}, intArray0);
      assertEquals(6, intArray0.length);
      assertEquals(9, intArray1.length);
      
      CharClass charClass5 = charClass3.appendRange((-233), 0);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass1);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass5);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass2);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass0);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass4);
      assertNotNull(charClass5);
      assertArrayEquals(new int[] {407, (-233), 0, 0, 2703, 0}, intArray0);
      assertEquals(6, intArray0.length);
      assertEquals(9, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[] intArray0 = charClass0.toArray();
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      CharClass charClass1 = charClass0.appendFoldedClass(intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      int[][] intArray1 = new int[6][0];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      intArray1[2] = intArray0;
      intArray1[3] = intArray0;
      intArray1[4] = intArray0;
      intArray1[5] = intArray0;
      // Undeclared exception!
      try { 
        charClass0.appendTable(intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.cleanClass();
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      
      int[] intArray0 = new int[6];
      intArray0[0] = 1345;
      intArray0[1] = (-3993);
      intArray0[2] = 64;
      intArray0[3] = 244;
      int[][] intArray1 = new int[6][4];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      intArray1[2] = intArray0;
      intArray1[3] = intArray0;
      intArray1[4] = intArray0;
      intArray1[5] = intArray0;
      CharClass charClass2 = charClass1.appendTable(intArray1);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertNotNull(charClass2);
      assertEquals(6, intArray1.length);
      
      intArray0[4] = 0;
      intArray0[5] = 803;
      CharClass charClass3 = charClass1.appendFoldedClass(intArray0);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass0);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass3);
      assertArrayEquals(new int[] {1345, (-3993), 64, 244, 0, 803}, intArray0);
      assertEquals(6, intArray0.length);
      
      CharClass charClass4 = charClass3.appendClassWithSign(intArray0, (-2925));
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass4);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass0);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass2);
      assertNotNull(charClass4);
      assertArrayEquals(new int[] {1345, (-3993), 64, 244, 0, 803}, intArray0);
      assertEquals(6, intArray0.length);
      
      CharClass charClass5 = charClass4.negateClass();
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass4);
      assertSame(charClass3, charClass5);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass0);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass0);
      assertSame(charClass4, charClass5);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass2);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass0);
      assertNotNull(charClass5);
      assertArrayEquals(new int[] {1345, (-3993), 64, 244, 0, 803}, intArray0);
      assertEquals(6, intArray0.length);
      
      CharClass charClass6 = charClass5.cleanClass();
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass4);
      assertSame(charClass3, charClass5);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass6);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass6);
      assertSame(charClass4, charClass6);
      assertSame(charClass4, charClass5);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass2);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass6);
      assertSame(charClass6, charClass0);
      assertSame(charClass6, charClass4);
      assertSame(charClass6, charClass1);
      assertSame(charClass6, charClass2);
      assertSame(charClass6, charClass5);
      assertSame(charClass6, charClass3);
      assertNotNull(charClass6);
      assertArrayEquals(new int[] {1345, (-3993), 64, 244, 0, 803}, intArray0);
      assertEquals(6, intArray0.length);
      
      int[] intArray2 = charClass1.toArray();
      assertFalse(intArray2.equals((Object)intArray0));
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass4);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass6);
      assertNotSame(intArray2, intArray0);
      assertNotNull(intArray2);
      assertArrayEquals(new int[] {(-3992), 42892}, intArray2);
      assertEquals(2, intArray2.length);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 7380;
      intArray0[1] = 1848;
      intArray0[2] = 66639;
      intArray0[3] = (-756);
      intArray0[4] = (-1928);
      intArray0[5] = 2383;
      CharClass charClass0 = new CharClass(intArray0);
      assertNotNull(charClass0);
      assertArrayEquals(new int[] {7380, 1848, 66639, (-756), (-1928), 2383}, intArray0);
      assertEquals(6, intArray0.length);
      
      CharClass charClass1 = charClass0.appendFoldedRange((-1928), (-1696));
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      assertArrayEquals(new int[] {7380, 1848, 66639, (-756), (-1928), 2383}, intArray0);
      assertEquals(6, intArray0.length);
      
      CharClass charClass2 = charClass1.appendNegatedClass(intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertNotNull(charClass2);
      assertArrayEquals(new int[] {7380, 1848, 66639, (-756), (-1928), 1114111}, intArray0);
      assertEquals(6, intArray0.length);
      
      CharClass charClass3 = charClass1.cleanClass();
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass2);
      assertNotNull(charClass3);
      assertArrayEquals(new int[] {(-1928), 1114111, 7380, 1848, 66639, (-756)}, intArray0);
      assertEquals(6, intArray0.length);
      
      String string0 = charClass1.toString();
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertEquals("[0xfffff878-0x10ffff]", string0);
      assertNotNull(string0);
      assertArrayEquals(new int[] {(-1928), 1114111, 7380, 1848, 66639, (-756)}, intArray0);
      assertEquals(6, intArray0.length);
      
      CharClass charClass4 = charClass0.negateClass();
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass4);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass2);
      assertNotNull(charClass4);
      assertArrayEquals(new int[] {(-1928), 1114111, 7380, 1848, 66639, (-756)}, intArray0);
      assertEquals(6, intArray0.length);
      
      CharClass charClass5 = charClass0.appendNegatedClass(intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass5);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass0);
      assertNotNull(charClass5);
      assertArrayEquals(new int[] {(-755), 1114111, 7380, 1848, 66639, (-756)}, intArray0);
      assertEquals(6, intArray0.length);
      
      String string1 = charClass5.toString();
      assertFalse(string1.equals((Object)string0));
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass5);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass0);
      assertEquals("[0xfffffd0d-0x10ffff]", string1);
      assertNotNull(string1);
      assertArrayEquals(new int[] {(-755), 1114111, 7380, 1848, 66639, (-756)}, intArray0);
      assertEquals(6, intArray0.length);
      
      int[][] intArray1 = new int[4][6];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      intArray1[2] = intArray0;
      intArray1[3] = intArray0;
      CharClass charClass6 = charClass0.appendTableWithSign(intArray1, 66639);
      assertSame(charClass6, charClass3);
      assertSame(charClass6, charClass1);
      assertSame(charClass6, charClass0);
      assertSame(charClass6, charClass2);
      assertSame(charClass6, charClass4);
      assertSame(charClass6, charClass5);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass5);
      assertNotNull(charClass6);
      assertArrayEquals(new int[] {(-755), 1114111, 7380, 1848, 66639, (-756)}, intArray0);
      assertEquals(6, intArray0.length);
      assertEquals(4, intArray1.length);
      
      String string2 = CharClass.charClassToString(intArray0, (-1928));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("[]", string2);
      assertNotNull(string2);
      assertArrayEquals(new int[] {(-755), 1114111, 7380, 1848, 66639, (-756)}, intArray0);
      assertEquals(6, intArray0.length);
      
      CharClass charClass7 = charClass4.appendFoldedClass(intArray0);
      assertSame(charClass7, charClass0);
      assertSame(charClass7, charClass1);
      assertSame(charClass7, charClass2);
      assertSame(charClass7, charClass4);
      assertSame(charClass7, charClass5);
      assertSame(charClass7, charClass6);
      assertSame(charClass7, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass5);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass6);
      assertSame(charClass4, charClass5);
      assertSame(charClass4, charClass7);
      assertNotNull(charClass7);
      assertArrayEquals(new int[] {(-755), 1114111, 7380, 1848, 66639, (-756)}, intArray0);
      assertEquals(6, intArray0.length);
      
      CharClass charClass8 = charClass7.appendNegatedTable(intArray1);
      assertSame(charClass7, charClass0);
      assertSame(charClass7, charClass1);
      assertSame(charClass7, charClass2);
      assertSame(charClass7, charClass4);
      assertSame(charClass7, charClass5);
      assertSame(charClass7, charClass6);
      assertSame(charClass7, charClass8);
      assertSame(charClass7, charClass3);
      assertSame(charClass8, charClass1);
      assertSame(charClass8, charClass0);
      assertSame(charClass8, charClass2);
      assertSame(charClass8, charClass5);
      assertSame(charClass8, charClass3);
      assertSame(charClass8, charClass7);
      assertSame(charClass8, charClass4);
      assertSame(charClass8, charClass6);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass8);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass5);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass6);
      assertSame(charClass4, charClass8);
      assertSame(charClass4, charClass5);
      assertSame(charClass4, charClass7);
      assertNotNull(charClass8);
      assertArrayEquals(new int[] {(-755), 1114111, 7380, 1848, 66639, (-756)}, intArray0);
      assertEquals(6, intArray0.length);
      assertEquals(4, intArray1.length);
      
      CharClass charClass9 = charClass6.appendFoldedRange((-1696), 67862);
      assertSame(charClass6, charClass3);
      assertSame(charClass6, charClass1);
      assertSame(charClass6, charClass0);
      assertSame(charClass6, charClass7);
      assertSame(charClass6, charClass2);
      assertSame(charClass6, charClass4);
      assertSame(charClass6, charClass5);
      assertSame(charClass6, charClass8);
      assertSame(charClass6, charClass9);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass8);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass9);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass5);
      assertSame(charClass9, charClass4);
      assertSame(charClass9, charClass7);
      assertSame(charClass9, charClass5);
      assertSame(charClass9, charClass6);
      assertSame(charClass9, charClass8);
      assertSame(charClass9, charClass3);
      assertSame(charClass9, charClass0);
      assertSame(charClass9, charClass1);
      assertSame(charClass9, charClass2);
      assertNotNull(charClass9);
      assertArrayEquals(new int[] {(-1696), 1114111, 7380, 1848, 66639, (-756)}, intArray0);
      assertEquals(6, intArray0.length);
      assertEquals(4, intArray1.length);
      
      CharClass charClass10 = charClass6.appendClassWithSign(intArray0, (-668));
      assertSame(charClass6, charClass3);
      assertSame(charClass6, charClass1);
      assertSame(charClass6, charClass0);
      assertSame(charClass6, charClass7);
      assertSame(charClass6, charClass2);
      assertSame(charClass6, charClass4);
      assertSame(charClass6, charClass5);
      assertSame(charClass6, charClass8);
      assertSame(charClass6, charClass10);
      assertSame(charClass6, charClass9);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass10);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass8);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass9);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass5);
      assertSame(charClass10, charClass0);
      assertSame(charClass10, charClass1);
      assertSame(charClass10, charClass9);
      assertSame(charClass10, charClass6);
      assertSame(charClass10, charClass8);
      assertSame(charClass10, charClass7);
      assertSame(charClass10, charClass4);
      assertSame(charClass10, charClass2);
      assertSame(charClass10, charClass5);
      assertSame(charClass10, charClass3);
      assertNotNull(charClass10);
      assertArrayEquals(new int[] {(-1696), 1114111, 7380, 1848, 66639, (-756)}, intArray0);
      assertEquals(6, intArray0.length);
      assertEquals(4, intArray1.length);
      
      CharClass charClass11 = charClass4.appendTable(intArray1);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass10);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass8);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass9);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass11);
      assertSame(charClass0, charClass5);
      assertSame(charClass11, charClass0);
      assertSame(charClass11, charClass9);
      assertSame(charClass11, charClass1);
      assertSame(charClass11, charClass6);
      assertSame(charClass11, charClass5);
      assertSame(charClass11, charClass3);
      assertSame(charClass11, charClass8);
      assertSame(charClass11, charClass4);
      assertSame(charClass11, charClass7);
      assertSame(charClass11, charClass10);
      assertSame(charClass11, charClass2);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass9);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass10);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass11);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass6);
      assertSame(charClass4, charClass8);
      assertSame(charClass4, charClass5);
      assertSame(charClass4, charClass7);
      assertNotNull(charClass11);
      assertArrayEquals(new int[] {(-1696), 1114111, 7380, 1848, 66639, (-756)}, intArray0);
      assertEquals(6, intArray0.length);
      assertEquals(4, intArray1.length);
      
      CharClass charClass12 = charClass0.appendTable(intArray1);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass10);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass8);
      assertSame(charClass0, charClass12);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass9);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass11);
      assertSame(charClass0, charClass5);
      assertSame(charClass12, charClass7);
      assertSame(charClass12, charClass11);
      assertSame(charClass12, charClass1);
      assertSame(charClass12, charClass2);
      assertSame(charClass12, charClass3);
      assertSame(charClass12, charClass0);
      assertSame(charClass12, charClass10);
      assertSame(charClass12, charClass5);
      assertSame(charClass12, charClass9);
      assertSame(charClass12, charClass6);
      assertSame(charClass12, charClass8);
      assertSame(charClass12, charClass4);
      assertNotNull(charClass12);
      assertArrayEquals(new int[] {(-1696), 1114111, 7380, 1848, 66639, (-756)}, intArray0);
      assertEquals(6, intArray0.length);
      assertEquals(4, intArray1.length);
      
      CharClass charClass13 = charClass10.appendLiteral(6800, 1848);
      assertSame(charClass6, charClass3);
      assertSame(charClass6, charClass1);
      assertSame(charClass6, charClass0);
      assertSame(charClass6, charClass7);
      assertSame(charClass6, charClass4);
      assertSame(charClass6, charClass11);
      assertSame(charClass6, charClass8);
      assertSame(charClass6, charClass12);
      assertSame(charClass6, charClass9);
      assertSame(charClass6, charClass2);
      assertSame(charClass6, charClass5);
      assertSame(charClass6, charClass13);
      assertSame(charClass6, charClass10);
      assertSame(charClass0, charClass12);
      assertSame(charClass0, charClass11);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass10);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass8);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass9);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass13);
      assertSame(charClass10, charClass4);
      assertSame(charClass10, charClass11);
      assertSame(charClass10, charClass12);
      assertSame(charClass10, charClass0);
      assertSame(charClass10, charClass1);
      assertSame(charClass10, charClass9);
      assertSame(charClass10, charClass6);
      assertSame(charClass10, charClass8);
      assertSame(charClass10, charClass7);
      assertSame(charClass10, charClass5);
      assertSame(charClass10, charClass13);
      assertSame(charClass10, charClass2);
      assertSame(charClass10, charClass3);
      assertSame(charClass13, charClass4);
      assertSame(charClass13, charClass11);
      assertSame(charClass13, charClass12);
      assertSame(charClass13, charClass9);
      assertSame(charClass13, charClass1);
      assertSame(charClass13, charClass6);
      assertSame(charClass13, charClass8);
      assertSame(charClass13, charClass7);
      assertSame(charClass13, charClass0);
      assertSame(charClass13, charClass5);
      assertSame(charClass13, charClass2);
      assertSame(charClass13, charClass3);
      assertSame(charClass13, charClass10);
      assertNotNull(charClass13);
      assertArrayEquals(new int[] {(-1696), 1114111, 7380, 1848, 66639, (-756)}, intArray0);
      assertEquals(6, intArray0.length);
      assertEquals(4, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (-1084);
      intArray0[1] = 11554;
      CharClass charClass1 = charClass0.appendClass(intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      assertArrayEquals(new int[] {(-1084), 11554}, intArray0);
      assertEquals(2, intArray0.length);
      
      // Undeclared exception!
      try { 
        charClass0.appendClassWithSign((int[]) null, 4294);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[] intArray0 = new int[5];
      intArray0[0] = 10626;
      intArray0[1] = (-826);
      intArray0[2] = 66640;
      intArray0[3] = 4007;
      String string0 = charClass0.toString();
      assertEquals("[]", string0);
      assertNotNull(string0);
      
      intArray0[4] = 8485;
      // Undeclared exception!
      try { 
        charClass0.appendFoldedClass(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      int[] intArray0 = new int[1];
      CharClass charClass0 = new CharClass(intArray0);
      assertNotNull(charClass0);
      assertArrayEquals(new int[] {0}, intArray0);
      assertEquals(1, intArray0.length);
      
      CharClass charClass1 = charClass0.appendLiteral(119154, 119154);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      assertArrayEquals(new int[] {0}, intArray0);
      assertEquals(1, intArray0.length);
      
      int[][] intArray1 = new int[6][3];
      intArray1[0] = intArray0;
      intArray1[3] = intArray0;
      intArray1[2] = intArray0;
      intArray1[1] = intArray0;
      CharClass charClass2 = charClass1.cleanClass();
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertNotNull(charClass2);
      assertArrayEquals(new int[] {0}, intArray0);
      assertEquals(1, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      int[] intArray0 = new int[1];
      int int0 = (-3081);
      intArray0[0] = (-3081);
      CharClass charClass0 = new CharClass(intArray0);
      assertNotNull(charClass0);
      assertArrayEquals(new int[] {(-3081)}, intArray0);
      assertEquals(1, intArray0.length);
      
      // Undeclared exception!
      try { 
        charClass0.appendGroup((CharGroup) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 1887;
      CharClass charClass0 = new CharClass(intArray0);
      assertNotNull(charClass0);
      assertArrayEquals(new int[] {1887}, intArray0);
      assertEquals(1, intArray0.length);
      
      int int0 = 119154;
      // Undeclared exception!
      charClass0.appendFoldedRange(1887, 119154);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 0;
      intArray0[1] = (-1692);
      CharClass charClass0 = new CharClass(intArray0);
      assertNotNull(charClass0);
      assertArrayEquals(new int[] {0, (-1692)}, intArray0);
      assertEquals(2, intArray0.length);
      
      CharClass charClass1 = charClass0.appendNegatedClass(intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      assertArrayEquals(new int[] {(-1691), 1114111}, intArray0);
      assertEquals(2, intArray0.length);
      
      int[] intArray1 = new int[4];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 1740;
      intArray1[1] = 0;
      intArray1[2] = (-1692);
      intArray1[3] = (-1692);
      String string0 = CharClass.charClassToString(intArray1, (-2));
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray1, intArray0);
      assertEquals("[]", string0);
      assertNotNull(string0);
      assertArrayEquals(new int[] {1740, 0, (-1692), (-1692)}, intArray1);
      assertEquals(4, intArray1.length);
      
      int[] intArray2 = charClass0.toArray();
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray1));
      assertSame(intArray0, intArray2);
      assertNotSame(intArray0, intArray1);
      assertSame(charClass0, charClass1);
      assertSame(intArray2, intArray0);
      assertNotSame(intArray2, intArray1);
      assertNotNull(intArray2);
      assertArrayEquals(new int[] {(-1691), 1114111}, intArray0);
      assertArrayEquals(new int[] {(-1691), 1114111}, intArray2);
      assertEquals(2, intArray0.length);
      assertEquals(2, intArray2.length);
      
      CharClass charClass2 = charClass0.appendLiteral(1740, (-2331));
      assertFalse(intArray0.equals((Object)intArray1));
      assertSame(intArray0, intArray2);
      assertNotSame(intArray0, intArray1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertNotNull(charClass2);
      assertArrayEquals(new int[] {(-1691), 1114111}, intArray0);
      assertEquals(2, intArray0.length);
      
      CharClass charClass3 = charClass2.appendNegatedClass(intArray1);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(intArray1.equals((Object)intArray2));
      assertSame(intArray0, intArray2);
      assertNotSame(intArray0, intArray1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray1, intArray2);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass3);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass2);
      assertNotNull(charClass3);
      assertArrayEquals(new int[] {(-1691), 1114111}, intArray0);
      assertArrayEquals(new int[] {1740, 0, (-1692), (-1692)}, intArray1);
      assertEquals(2, intArray0.length);
      assertEquals(4, intArray1.length);
      
      CharClass charClass4 = charClass2.cleanClass();
      assertFalse(intArray0.equals((Object)intArray1));
      assertSame(intArray0, intArray2);
      assertNotSame(intArray0, intArray1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass3);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass2);
      assertNotNull(charClass4);
      assertArrayEquals(new int[] {(-1691), 1114111}, intArray0);
      assertEquals(2, intArray0.length);
      
      int[][] intArray3 = new int[9][9];
      intArray3[0] = intArray2;
      intArray3[1] = intArray1;
      int[] intArray4 = new int[9];
      assertFalse(intArray4.equals((Object)intArray0));
      assertFalse(intArray4.equals((Object)intArray2));
      assertFalse(intArray4.equals((Object)intArray1));
      
      intArray4[0] = (-2331);
      intArray4[1] = 0;
      intArray4[2] = 1740;
      intArray4[3] = 602;
      intArray4[4] = (-2331);
      intArray4[5] = (-1692);
      intArray4[6] = (-2);
      intArray4[7] = 0;
      intArray4[8] = (-2331);
      intArray3[2] = intArray4;
      intArray3[3] = intArray0;
      int[] intArray5 = new int[8];
      assertFalse(intArray5.equals((Object)intArray4));
      assertFalse(intArray5.equals((Object)intArray1));
      assertFalse(intArray5.equals((Object)intArray0));
      assertFalse(intArray5.equals((Object)intArray2));
      
      intArray5[0] = (-2169);
      intArray5[1] = 0;
      intArray5[2] = (-2331);
      intArray5[3] = (-2);
      intArray5[4] = 0;
      intArray5[5] = 1740;
      intArray5[6] = (-2331);
      intArray5[7] = (-1692);
      intArray3[4] = intArray5;
      intArray3[5] = intArray0;
      intArray3[6] = intArray0;
      intArray3[7] = intArray1;
      intArray3[8] = intArray0;
      // Undeclared exception!
      try { 
        charClass0.appendTable(intArray3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.cleanClass();
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      
      int[] intArray0 = new int[3];
      int int0 = 0;
      intArray0[0] = 0;
      int int1 = (-2271);
      intArray0[1] = (-2271);
      int int2 = 0;
      intArray0[2] = 0;
      // Undeclared exception!
      try { 
        charClass1.appendClass(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = 23;
      intArray0[1] = (-2159);
      intArray0[2] = 1;
      int int0 = (-851);
      intArray0[3] = (-851);
      intArray0[4] = (-3144);
      CharClass charClass0 = new CharClass(intArray0);
      assertNotNull(charClass0);
      assertArrayEquals(new int[] {23, (-2159), 1, (-851), (-3144)}, intArray0);
      assertEquals(5, intArray0.length);
      
      // Undeclared exception!
      try { 
        charClass0.appendClassWithSign(intArray0, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 363;
      int int0 = (-398);
      intArray0[1] = (-398);
      CharClass charClass0 = new CharClass(intArray0);
      int int1 = 0;
      CharClass charClass1 = charClass0.appendFoldedRange((-398), 0);
      int int2 = 1114111;
      CharClass charClass2 = charClass1.appendRange(1114111, (-573));
      CharClass charClass3 = charClass2.appendClassWithSign(intArray0, 0);
      charClass3.appendFoldedRange(570, 2037);
      int[][] intArray1 = new int[2][8];
      int[] intArray2 = new int[9];
      intArray2[0] = 2037;
      intArray2[1] = (-573);
      intArray2[2] = 1114111;
      intArray2[3] = (-398);
      intArray2[4] = 2037;
      intArray2[5] = (-573);
      intArray2[6] = 1114111;
      intArray2[7] = (-573);
      intArray2[8] = 1114111;
      intArray1[0] = intArray2;
      intArray1[1] = intArray0;
      // Undeclared exception!
      try { 
        charClass1.appendNegatedTable(intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      CharClass charClass1 = charClass0.appendFoldedRange(65, 39);
      CharClass charClass2 = charClass1.appendFoldedRange(39, 33);
      assertSame(charClass0, charClass2);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      int[][] intArray0 = new int[0][8];
      charClass0.appendLiteral(66639, 66639);
      CharClass charClass1 = charClass0.appendTable(intArray0);
      CharClass charClass2 = charClass1.appendRange(824, 824);
      assertSame(charClass0, charClass2);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      int[] intArray0 = new int[9];
      int int0 = (-2);
      intArray0[0] = (-2);
      intArray0[1] = 119834;
      int int1 = 517;
      intArray0[2] = 517;
      intArray0[3] = (-3856);
      intArray0[4] = 463;
      int int2 = 65077;
      intArray0[5] = 65077;
      intArray0[6] = 321;
      intArray0[7] = 546;
      intArray0[8] = 66639;
      CharClass charClass0 = new CharClass(intArray0);
      // Undeclared exception!
      charClass0.appendFoldedClass(intArray0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      int[] intArray0 = new int[8];
      intArray0[0] = 65474;
      intArray0[1] = 640;
      intArray0[2] = 0;
      intArray0[3] = 4;
      intArray0[4] = 0;
      intArray0[5] = 65;
      intArray0[3] = 3265;
      String string0 = CharClass.charClassToString(intArray0, (-3970));
      assertEquals("[]", string0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      int[] intArray0 = new int[8];
      intArray0[0] = 65474;
      intArray0[1] = 640;
      intArray0[2] = 0;
      intArray0[3] = 4;
      intArray0[4] = 0;
      intArray0[5] = 65;
      intArray0[6] = 3265;
      intArray0[7] = 0;
      CharClass charClass1 = charClass0.appendClass(intArray0);
      CharClass charClass2 = charClass1.appendClassWithSign(intArray0, 0);
      int[][] intArray1 = new int[3][5];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      intArray1[2] = intArray0;
      CharClass charClass3 = charClass2.appendNegatedTable(intArray1);
      CharClass charClass4 = charClass3.appendTableWithSign(intArray1, 4);
      CharClass charClass5 = charClass4.appendFoldedClass(intArray0);
      CharClass charClass6 = charClass5.appendFoldedClass(intArray0);
      assertSame(charClass6, charClass5);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        CharClass.charClassToString(intArray0, 2291);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      int[] intArray0 = new int[0];
      int int0 = 2291;
      // Undeclared exception!
      try { 
        CharClass.charClassToString(intArray0, 2291);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      int[] intArray0 = new int[6];
      CharClass.charClassToString(intArray0, 4);
      CharClass charClass0 = new CharClass(intArray0);
      CharClass charClass1 = charClass0.appendLiteral(2, (-1278));
      CharClass charClass2 = charClass1.cleanClass();
      CharClass charClass3 = charClass2.appendClass(intArray0);
      CharClass charClass4 = charClass3.appendNegatedClass(intArray0);
      CharClass charClass5 = charClass4.negateClass();
      // Undeclared exception!
      try { 
        charClass5.appendTableWithSign((int[][]) null, (-1278));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      charClass0.appendRange(66640, (-1062));
      int int0 = (-3169);
      CharClass charClass1 = charClass0.appendRange(921, (-1499));
      // Undeclared exception!
      try { 
        charClass1.appendFoldedClass((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      int[] intArray0 = new int[6];
      intArray0[0] = 407;
      intArray0[1] = (-233);
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 2703;
      intArray0[5] = 0;
      CharClass charClass1 = charClass0.appendNegatedClass(intArray0);
      int[][] intArray1 = new int[9][6];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      intArray1[2] = intArray0;
      intArray1[3] = intArray0;
      intArray1[4] = intArray0;
      intArray1[5] = intArray0;
      intArray1[6] = intArray0;
      intArray1[7] = intArray0;
      intArray1[8] = intArray0;
      CharClass charClass2 = charClass1.appendTableWithSign(intArray1, 0);
      CharClass charClass3 = charClass2.appendNegatedTable(intArray1);
      CharClass charClass4 = charClass3.appendRange((-233), 0);
      assertSame(charClass4, charClass1);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      int[] intArray0 = new int[0];
      CharClass charClass0 = new CharClass(intArray0);
      CharClass charClass1 = charClass0.appendClassWithSign(intArray0, 0);
      charClass1.appendClassWithSign(intArray0, 0);
      charClass1.negateClass();
      CharClass charClass2 = charClass1.appendNegatedClass(intArray0);
      CharClass.charClassToString(intArray0, 0);
      charClass1.negateClass();
      int[][] intArray1 = new int[5][2];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      intArray1[2] = intArray0;
      intArray1[3] = intArray0;
      intArray1[4] = intArray0;
      // Undeclared exception!
      try { 
        charClass2.appendTable(intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      int[] intArray0 = new int[9];
      intArray0[0] = 2622;
      intArray0[1] = 0;
      intArray0[2] = 3139;
      intArray0[3] = 3792;
      intArray0[4] = 0;
      intArray0[5] = 9115;
      intArray0[6] = 1750;
      intArray0[7] = (-1648);
      intArray0[8] = 2524;
      // Undeclared exception!
      charClass0.appendFoldedClass(intArray0);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      int[] intArray0 = new int[5];
      intArray0[0] = 32;
      intArray0[1] = (-540);
      intArray0[2] = (-298);
      intArray0[3] = 0;
      intArray0[4] = 0;
      // Undeclared exception!
      try { 
        charClass0.appendClass(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }
}
