/*
 * This file was automatically generated by EvoSuite
 * Mon Jul 16 20:47:44 GMT 2018
 */

package okhttp3.internal.http;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.net.URI;
import java.net.URISyntaxException;
import java.net.URL;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import okhttp3.Challenge;
import okhttp3.CookieJar;
import okhttp3.Headers;
import okhttp3.HttpUrl;
import okhttp3.Request;
import okhttp3.Response;
import okhttp3.internal.http.HttpHeaders;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class HttpHeaders_ESTest extends HttpHeaders_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      String string0 = "f>fu0Ztrc*l#";
      HttpHeaders.skipWhitespace("f>fu0Ztrc*l#", 0);
      HttpHeaders.skipUntil("([^ \"=]*)", 200, "J%v;EMHSW");
      String string1 = "";
      HttpHeaders.skipUntil("", 48, "([^ \"=]*)");
      String string2 = " must have a request body.";
      String string3 = "&QjxvjHbyH!E9d9u";
      HttpHeaders.skipUntil(" must have a request body.", 1654, "&QjxvjHbyH!E9d9u");
      CookieJar cookieJar0 = mock(CookieJar.class, new ViolatedAssumptionAnswer());
      try { 
        MockURI.URI("J%v;EMHSW", "f>fu0Ztrc*l#", " must have a request body.", "", "&QjxvjHbyH!E9d9u");
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Relative path in absolute URI: J%v;EMHSW://f%3Efu%7F0Ztrc*l%23%20must%20have%20a%20request%20body.?#&QjxvjHbyH!E9d9u
         //
         verifyException("java.net.URI", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      int int0 = HttpHeaders.skipUntil("1*]", 0, "1*]");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String string0 = "E~*zi<x4$%o/c{h-I&";
      HttpHeaders.skipWhitespace("E~*zi<x4$%o/c{h-I&", 0);
      String string1 = "tv^O\\6VFFV]$<`]";
      HttpHeaders.parseSeconds("tv^O\u0006VFFV]$<`]", 1586);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Headers headers0 = Headers.of((Map<String, String>) hashMap0);
      Headers headers1 = HttpHeaders.varyHeaders(headers0, headers0);
      Headers.of((Map<String, String>) hashMap0);
      headers0.toMultimap();
      headers0.names();
      HttpHeaders.parseChallenges(headers1, "");
      HttpHeaders.hasVaryAll(headers0);
      HttpHeaders.skipUntil("", 0, "");
      // Undeclared exception!
      try { 
        HttpHeaders.varyHeaders(headers0, (Headers) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.internal.http.HttpHeaders", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      String string0 = "WYoatWa";
      HttpHeaders.parseSeconds("WYoatWa", 0);
      String string1 = "builder.value == null";
      HttpHeaders.skipUntil("builder.value == null", 0, "WYoatWa");
      HttpHeaders.parseSeconds("builder.value == null", 6);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Headers headers0 = Headers.of((Map<String, String>) hashMap0);
      headers0.toMultimap();
      HttpHeaders.varyHeaders(headers0, headers0);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "WYoatWa";
      stringArray0[1] = "WYoatWa";
      stringArray0[2] = "builder.value == null";
      stringArray0[3] = "WYoatWa";
      stringArray0[4] = "builder.value == null";
      stringArray0[5] = "builder.value == null";
      stringArray0[6] = "M#P1_J&R";
      stringArray0[7] = "WYoatWa";
      stringArray0[8] = "WYoatWa";
      // Undeclared exception!
      try { 
        Headers.of(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Expected alternating header names and values
         //
         verifyException("okhttp3.Headers", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Response response0 = null;
      // Undeclared exception!
      try { 
        HttpHeaders.contentLength((Response) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.internal.http.HttpHeaders", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      // Undeclared exception!
      try { 
        HttpHeaders.varyHeaders((Response) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.internal.http.HttpHeaders", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Headers headers0 = Headers.of((Map<String, String>) hashMap0);
      Headers headers1 = HttpHeaders.varyHeaders(headers0, headers0);
      HttpHeaders.receiveHeaders((CookieJar) null, (HttpUrl) null, headers0);
      assertNotSame(headers0, headers1);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      HttpHeaders.skipUntil("3>.H[dA\"", 20, "");
      String[] stringArray0 = new String[0];
      Headers headers0 = Headers.of(stringArray0);
      headers0.toMultimap();
      HttpHeaders.varyFields(headers0);
      HttpHeaders.hasVaryAll(headers0);
      headers0.getDate("");
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put("hlnt}4bK/I0gi,#", "3>.H[dA\"");
      hashMap0.put("*?tJ:59[-M@xLt", "3>.H[dA\"");
      hashMap0.put("r._AgIG}X&@6|", "realm");
      Headers headers1 = Headers.of((Map<String, String>) hashMap0);
      hashMap0.put((String) null, "*");
      HttpHeaders.parseChallenges(headers0, "encodedUsername == null");
      HttpHeaders.skipUntil("3>.H[dA\"", 20, (String) null);
      HttpHeaders.contentLength(headers1);
      CookieJar cookieJar0 = mock(CookieJar.class, new ViolatedAssumptionAnswer());
      HttpUrl.parse("unexpected path segment: ");
      HttpHeaders.receiveHeaders(cookieJar0, (HttpUrl) null, headers1);
      assertFalse(headers1.equals((Object)headers0));
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put("PfsKhToU}+J>q", "PfsKhToU}+J>q");
      Headers headers0 = Headers.of((Map<String, String>) hashMap0);
      boolean boolean0 = HttpHeaders.hasVaryAll(headers0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      HttpHeaders.parseSeconds("", 19);
      HttpHeaders.parseSeconds("", (-1227));
      HttpHeaders.skipUntil("", 19, "");
      String string0 = "W`";
      HttpHeaders.parseSeconds("W`", 0);
      int int0 = 1833;
      HttpHeaders.skipUntil("W`", 1833, "F|[5]");
      Response response0 = null;
      // Undeclared exception!
      try { 
        HttpHeaders.hasVaryAll((Response) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.internal.http.HttpHeaders", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put("Vary", "Vary");
      Headers headers0 = Headers.of((Map<String, String>) hashMap0);
      List<Challenge> list0 = HttpHeaders.parseChallenges(headers0, "Vary");
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      System.setCurrentTimeMillis((-652L));
      String[] stringArray0 = new String[8];
      stringArray0[0] = "realm";
      stringArray0[1] = " +([^ \"=]*)=(:?\"([^\"]*)\"|([^ \"=]*)) *(:?,|$)";
      stringArray0[2] = "|V~J.|3O2&<hU,V1?Q ";
      stringArray0[3] = " +([^ \"=]*)=(:?\"([^\"]*)\"|([^ \"=]*)) *(:?,|$)";
      stringArray0[4] = "Content-Length";
      stringArray0[5] = "0drfkr7:g:duMz";
      stringArray0[6] = "-9223372036854775808";
      stringArray0[7] = " +([^ \"=]*)=(:?\"([^\"]*)\"|([^ \"=]*)) *(:?,|$)";
      Headers headers0 = Headers.of(stringArray0);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Headers.of((Map<String, String>) hashMap0);
      long long0 = HttpHeaders.contentLength(headers0);
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Response response0 = null;
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Headers headers0 = Headers.of((Map<String, String>) hashMap0);
      // Undeclared exception!
      try { 
        HttpHeaders.varyMatches((Response) null, headers0, (Request) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.internal.http.HttpHeaders", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CookieJar cookieJar0 = mock(CookieJar.class, new ViolatedAssumptionAnswer());
      HttpUrl.parse(" +([^ \"=]*)=(:?\"([^\"]*)\"|([^ \"=]*)) *(:?,|$)");
      int int0 = HttpHeaders.parseSeconds("-9223372036854775808", 200);
      int int1 = HttpHeaders.skipWhitespace("-9223372036854775808", 0);
      assertTrue(int1 == int0);
      assertEquals(0, int1);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      int int0 = HttpHeaders.parseSeconds("9", 0);
      assertEquals(9, int0);
      
      int int1 = HttpHeaders.parseSeconds("1pW}7", 471);
      assertEquals(471, int1);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      int int0 = HttpHeaders.skipWhitespace("s == null", 1);
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put("Vary", "Vary");
      hashMap0.put("no-store", "6A;xBu");
      Headers headers0 = Headers.of((Map<String, String>) hashMap0);
      HttpHeaders.varyHeaders(headers0, headers0);
      System.setCurrentTimeMillis(0L);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      HttpHeaders.skipWhitespace("; charset=utf-8", 131);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "; charset=utf-8";
      stringArray0[1] = "; charset=utf-8";
      Headers headers0 = Headers.of(stringArray0);
      headers0.values("bHl]V.+*dZ");
      headers0.values("*");
      headers0.toString();
      HttpHeaders.varyFields(headers0);
      headers0.toString();
      Headers headers1 = HttpHeaders.varyHeaders(headers0, headers0);
      headers0.getDate("; charset=utf-8");
      HttpHeaders.parseChallenges(headers0, "; charset=utf-8");
      Headers.of(stringArray0);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put("; charset=utf-8: ; charset=utf-8\n", "; charset=utf-8");
      Headers.of((Map<String, String>) hashMap0);
      HttpHeaders.parseSeconds("; charset=utf-8", 131);
      headers0.values("(<d(g8lsCh'2yI");
      HttpHeaders.parseSeconds("; charset=utf-8", (-3209));
      HttpHeaders.hasVaryAll(headers1);
      HttpHeaders.contentLength(headers0);
      // Undeclared exception!
      try { 
        HttpHeaders.skipWhitespace("; charset=utf-8", (-176));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put("vary", "wss:");
      hashMap0.put("Vary", "Vary");
      Headers headers0 = Headers.of((Map<String, String>) hashMap0);
      headers0.names();
      Headers headers1 = HttpHeaders.varyHeaders(headers0, headers0);
      assertEquals(1, headers1.size());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      CookieJar cookieJar0 = mock(CookieJar.class, new ViolatedAssumptionAnswer());
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "D`#/lm[a~w=";
      stringArray0[1] = "; realmset=*utf8";
      stringArray0[2] = ")'''";
      stringArray0[3] = "&`$6 %i^pj&cyC:";
      stringArray0[4] = "Content-Length";
      stringArray0[5] = "FN.}~P1dLZh;";
      Headers headers0 = Headers.of(stringArray0);
      HttpHeaders.parseChallenges(headers0, "D`#/lm[a~w=");
      // Undeclared exception!
      try { 
        HttpHeaders.hasBody((Response) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.internal.http.HttpHeaders", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "D`#/lD[a~w=";
      stringArray0[1] = "; realmset=*utf8";
      stringArray0[2] = "; realmset=*utf8";
      stringArray0[3] = "&`$6 %i^pj&cyC:";
      stringArray0[4] = "Content-Length";
      stringArray0[5] = "FN.}~P1dLZh;";
      Headers headers0 = Headers.of(stringArray0);
      List<Challenge> list0 = HttpHeaders.parseChallenges(headers0, "D`#/lD[a~w=");
      assertTrue(list0.isEmpty());
  }
}
