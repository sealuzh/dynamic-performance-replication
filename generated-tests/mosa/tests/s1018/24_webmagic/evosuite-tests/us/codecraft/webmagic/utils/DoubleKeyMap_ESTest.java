/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 09:39:35 GMT 2018
 */

package us.codecraft.webmagic.utils;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiFunction;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import us.codecraft.webmagic.utils.DoubleKeyMap;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DoubleKeyMap_ESTest extends DoubleKeyMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      DoubleKeyMap<Map<String, String>, Map<String, String>, String> doubleKeyMap0 = new DoubleKeyMap<Map<String, String>, Map<String, String>, String>();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      DoubleKeyMap<String, Integer, String> doubleKeyMap1 = new DoubleKeyMap<String, Integer, String>();
      Map<Map<String, String>, String> map0 = doubleKeyMap1.newMap();
      // Undeclared exception!
      try { 
        doubleKeyMap0.put((Map<String, String>) hashMap0, map0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      HashMap<String, Map<String, Object>> hashMap0 = new HashMap<String, Map<String, Object>>();
      HashMap<String, Map<Object, Object>> hashMap1 = new HashMap<String, Map<Object, Object>>();
      DoubleKeyMap<String, Object, Object> doubleKeyMap0 = new DoubleKeyMap<String, Object, Object>(hashMap1);
      Map<String, Object> map0 = doubleKeyMap0.newMap();
      hashMap0.put("L5", map0);
      Class<Map> class0 = Map.class;
      DoubleKeyMap<String, String, Object> doubleKeyMap1 = new DoubleKeyMap<String, String, Object>(hashMap0, class0);
      HashMap<Object, Map<Object, Integer>> hashMap2 = new HashMap<Object, Map<Object, Integer>>();
      DoubleKeyMap<Object, Object, Integer> doubleKeyMap2 = new DoubleKeyMap<Object, Object, Integer>(hashMap2);
      HashMap<String, String> hashMap3 = new HashMap<String, String>();
      HashMap<Object, Map<Integer, Integer>> hashMap4 = new HashMap<Object, Map<Integer, Integer>>();
      DoubleKeyMap<Object, Integer, Integer> doubleKeyMap3 = new DoubleKeyMap<Object, Integer, Integer>(hashMap4);
      Map<Object, Integer> map1 = doubleKeyMap3.newMap();
      hashMap2.put(hashMap3, map1);
      Integer integer0 = new Integer((-220));
      doubleKeyMap2.remove((Object) null, (Object) integer0);
      Object object0 = doubleKeyMap1.put("L5", "xJjot", (Object) "L5");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      DoubleKeyMap<Object, Map<String, String>, String> doubleKeyMap0 = new DoubleKeyMap<Object, Map<String, String>, String>();
      Object object0 = new Object();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      DoubleKeyMap<String, Object, Object> doubleKeyMap1 = new DoubleKeyMap<String, Object, Object>();
      HashMap<String, String> hashMap1 = new HashMap<String, String>();
      DoubleKeyMap<String, Object, Object> doubleKeyMap2 = new DoubleKeyMap<String, Object, Object>();
      Integer integer0 = new Integer(0);
      doubleKeyMap2.remove("MSBF", (Object) integer0);
      doubleKeyMap2.get("");
      Object object1 = new Object();
      doubleKeyMap2.put("1@5yM'F15nm", object1, (Object) null);
      HashMap<String, Map<Object, Map<String, String>>> hashMap2 = new HashMap<String, Map<Object, Map<String, String>>>();
      Class<Map> class0 = Map.class;
      DoubleKeyMap<Object, Integer, Object> doubleKeyMap3 = new DoubleKeyMap<Object, Integer, Object>();
      Map<Object, Map<String, String>> map0 = doubleKeyMap3.newMap();
      hashMap2.put("MSBF", map0);
      DoubleKeyMap<String, Object, Map<String, String>> doubleKeyMap4 = new DoubleKeyMap<String, Object, Map<String, String>>(hashMap2, class0);
      doubleKeyMap4.remove("Q");
      doubleKeyMap4.get("MSBF", (Object) class0);
      HashMap<Object, Map<Object, Integer>> hashMap3 = new HashMap<Object, Map<Object, Integer>>();
      HashMap<String, String> hashMap4 = new HashMap<String, String>();
      HashMap<Map<String, String>, String> hashMap5 = new HashMap<Map<String, String>, String>();
      DoubleKeyMap<Integer, String, Object> doubleKeyMap5 = null;
      try {
        doubleKeyMap5 = new DoubleKeyMap<Integer, String, Object>(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      HashMap<Object, Map<Object, Integer>> hashMap0 = new HashMap<Object, Map<Object, Integer>>();
      HashMap<String, String> hashMap1 = new HashMap<String, String>();
      Class<Map> class0 = Map.class;
      DoubleKeyMap<Object, Object, Integer> doubleKeyMap0 = new DoubleKeyMap<Object, Object, Integer>(hashMap0, class0);
      doubleKeyMap0.remove((Object) hashMap0);
      HashMap<String, Map<Object, Map<String, String>>> hashMap2 = new HashMap<String, Map<Object, Map<String, String>>>();
      DoubleKeyMap<String, Object, Map<String, String>> doubleKeyMap1 = new DoubleKeyMap<String, Object, Map<String, String>>(hashMap2);
      doubleKeyMap1.put((String) null, (Object) hashMap2, (Map<String, String>) hashMap1);
      doubleKeyMap1.newMap();
      doubleKeyMap1.put("", (Object) "[9", (Map<String, String>) hashMap1);
      Object object0 = new Object();
      doubleKeyMap1.remove((String) null, object0);
      DoubleKeyMap<Object, String, Object> doubleKeyMap2 = new DoubleKeyMap<Object, String, Object>();
      Map<String, Map<String, String>> map0 = doubleKeyMap2.newMap();
      DoubleKeyMap<String, String, String> doubleKeyMap3 = new DoubleKeyMap<String, String, String>(map0);
      doubleKeyMap3.get("", (String) null);
      Object object1 = new Object();
      String string0 = doubleKeyMap3.get("", (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      HashMap<Map<String, String>, Map<Integer, Object>> hashMap0 = new HashMap<Map<String, String>, Map<Integer, Object>>();
      DoubleKeyMap<Map<String, String>, Integer, Object> doubleKeyMap0 = new DoubleKeyMap<Map<String, String>, Integer, Object>(hashMap0);
      HashMap<String, String> hashMap1 = new HashMap<String, String>();
      Integer integer0 = new Integer((-1265));
      doubleKeyMap0.put((Map<String, String>) hashMap1, integer0, (Object) hashMap0);
      HashMap<String, String> hashMap2 = new HashMap<String, String>();
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doubleKeyMap0.get((Map<String, String>) hashMap2);
      DoubleKeyMap<Integer, Integer, Object> doubleKeyMap1 = new DoubleKeyMap<Integer, Integer, Object>();
      Integer integer1 = new Integer((-1265));
      doubleKeyMap1.remove(integer1, integer1);
      DoubleKeyMap<String, Object, Object> doubleKeyMap2 = new DoubleKeyMap<String, Object, Object>();
      doubleKeyMap2.remove("9e]U8ig.nq=;7(=P4");
      HashMap<String, String> hashMap3 = new HashMap<String, String>();
      doubleKeyMap2.put("us.codecraft.webmagic.utils.MultiKeyMapBase", (Object) hashMap3, (Object) "us.codecraft.webmagic.utils.MultiKeyMapBase");
      doubleKeyMap2.get("");
      doubleKeyMap2.put("", (Object) hashMap1, (Object) null);
      HashMap<String, Map<Object, Map<String, String>>> hashMap4 = new HashMap<String, Map<Object, Map<String, String>>>();
      Class<Map> class0 = Map.class;
      DoubleKeyMap<String, Object, Map<String, String>> doubleKeyMap3 = new DoubleKeyMap<String, Object, Map<String, String>>();
      doubleKeyMap0.remove((Map<String, String>) hashMap1, integer0);
      doubleKeyMap3.get("wrong proto type map ", (Object) "");
      HashMap<Object, Map<Object, Integer>> hashMap5 = new HashMap<Object, Map<Object, Integer>>();
      DoubleKeyMap<String, String, Object> doubleKeyMap4 = null;
      try {
        doubleKeyMap4 = new DoubleKeyMap<String, String, Object>(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }
}
