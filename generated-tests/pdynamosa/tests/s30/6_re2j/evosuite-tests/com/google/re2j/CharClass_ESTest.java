/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 23 17:33:04 GMT 2019
 */

package com.google.re2j;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.re2j.CharClass;
import com.google.re2j.CharGroup;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CharClass_ESTest extends CharClass_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[][] intArray0 = new int[0][3];
      CharClass charClass1 = charClass0.appendNegatedTable(intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      assertEquals(0, intArray0.length);
      
      CharClass charClass2 = charClass0.appendLiteral(0, 0);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertNotNull(charClass2);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 0;
      intArray0[1] = (-2842);
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 1715;
      intArray0[5] = (-810);
      CharClass charClass0 = new CharClass(intArray0);
      assertNotNull(charClass0);
      assertEquals(6, intArray0.length);
      assertArrayEquals(new int[] {0, (-2842), 0, 0, 1715, (-810)}, intArray0);
      
      String string0 = charClass0.toString();
      assertNotNull(string0);
      assertEquals(6, intArray0.length);
      assertEquals("[0x0-0xfffff4e6 0x0 0x6b3-0xfffffcd6]", string0);
      assertArrayEquals(new int[] {0, (-2842), 0, 0, 1715, (-810)}, intArray0);
      
      int[][] intArray1 = new int[6][7];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      intArray1[2] = intArray0;
      intArray1[3] = intArray0;
      intArray1[4] = intArray0;
      intArray1[5] = intArray0;
      CharClass charClass1 = charClass0.appendTableWithSign(intArray1, 0);
      assertSame(charClass1, charClass0);
      assertSame(charClass0, charClass1);
      assertNotNull(charClass1);
      assertEquals(6, intArray0.length);
      assertEquals(6, intArray1.length);
      assertArrayEquals(new int[] {0, (-2842), 0, 0, 1715, (-810)}, intArray0);
      
      CharClass charClass2 = charClass0.appendFoldedRange(0, 1715);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertNotNull(charClass2);
      assertEquals(6, intArray0.length);
      assertArrayEquals(new int[] {0, (-2842), 0, 65, 1715, (-810)}, intArray0);
      
      CharClass charClass3 = charClass1.negateClass();
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass3);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass0);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertNotNull(charClass3);
      assertEquals(6, intArray0.length);
      assertEquals(6, intArray1.length);
      assertArrayEquals(new int[] {0, (-2842), 0, 65, 1715, (-810)}, intArray0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[] intArray0 = new int[7];
      intArray0[0] = 1841;
      intArray0[1] = (-3860);
      intArray0[2] = 616;
      intArray0[3] = 2649;
      intArray0[4] = 1853;
      intArray0[5] = (-2529);
      intArray0[6] = 32;
      // Undeclared exception!
      try { 
        charClass0.appendNegatedClass(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[] intArray0 = charClass0.toArray();
      assertNotNull(intArray0);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      
      CharClass charClass1 = charClass0.appendClass(intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      
      // Undeclared exception!
      try { 
        charClass0.appendClass((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 93;
      intArray0[3] = 378;
      intArray0[4] = 32;
      CharClass charClass0 = new CharClass(intArray0);
      assertNotNull(charClass0);
      assertEquals(5, intArray0.length);
      assertArrayEquals(new int[] {0, 0, 93, 378, 32}, intArray0);
      
      CharClass charClass1 = charClass0.appendLiteral(2662, 1172);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      assertEquals(5, intArray0.length);
      assertArrayEquals(new int[] {0, 0, 93, 378, 32}, intArray0);
      
      int[][] intArray1 = new int[7][0];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      intArray1[2] = intArray0;
      intArray1[3] = intArray0;
      intArray1[4] = intArray0;
      intArray1[5] = intArray0;
      intArray1[6] = intArray0;
      CharClass charClass2 = charClass1.appendTable(intArray1);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertNotNull(charClass2);
      assertEquals(5, intArray0.length);
      assertEquals(7, intArray1.length);
      assertArrayEquals(new int[] {0, 0, 93, 378, 32}, intArray0);
      
      CharClass charClass3 = charClass1.appendRange(32, 66640);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass2);
      assertNotNull(charClass3);
      assertEquals(5, intArray0.length);
      assertArrayEquals(new int[] {0, 0, 93, 378, 32}, intArray0);
      
      CharClass charClass4 = charClass3.appendRange(0, 32);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass2);
      assertNotNull(charClass4);
      assertEquals(5, intArray0.length);
      assertArrayEquals(new int[] {0, 0, 93, 378, 32}, intArray0);
      
      // Undeclared exception!
      try { 
        charClass1.appendFoldedClass(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.appendFoldedRange((-30), 825);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      
      CharClass charClass2 = charClass1.cleanClass();
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertNotNull(charClass2);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      int[] intArray0 = new int[0];
      CharClass charClass0 = new CharClass(intArray0);
      assertNotNull(charClass0);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      
      int[][] intArrayArray0 = null;
      // Undeclared exception!
      try { 
        charClass0.appendNegatedTable((int[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[] intArray0 = new int[0];
      CharClass charClass1 = charClass0.appendNegatedClass(intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      
      int[][] intArray1 = new int[3][5];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      intArray1[2] = intArray0;
      // Undeclared exception!
      try { 
        charClass1.appendTable(intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 498;
      intArray0[1] = 282;
      intArray0[2] = 303;
      int int0 = (-3303);
      intArray0[3] = (-3303);
      CharClass charClass0 = new CharClass(intArray0);
      assertNotNull(charClass0);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {498, 282, 303, (-3303)}, intArray0);
      
      int[][] intArray1 = new int[2][6];
      int[] intArray2 = new int[6];
      assertFalse(intArray2.equals((Object)intArray0));
      
      intArray2[0] = (-3303);
      intArray2[1] = 282;
      intArray2[2] = 498;
      intArray2[3] = 282;
      intArray2[4] = 282;
      intArray2[5] = 303;
      intArray1[0] = intArray2;
      int[] intArray3 = new int[0];
      assertFalse(intArray3.equals((Object)intArray2));
      assertFalse(intArray3.equals((Object)intArray0));
      
      intArray1[1] = intArray3;
      // Undeclared exception!
      try { 
        charClass0.appendTableWithSign(intArray1, (-3303));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.appendLiteral(66639, 66639);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 2564;
      intArray0[1] = 0;
      intArray0[2] = 120545;
      CharClass charClass0 = new CharClass(intArray0);
      assertNotNull(charClass0);
      assertEquals(3, intArray0.length);
      assertArrayEquals(new int[] {2564, 0, 120545}, intArray0);
      
      // Undeclared exception!
      try { 
        charClass0.appendGroup((CharGroup) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[] intArray0 = new int[4];
      CharClass charClass1 = charClass0.appendNegatedClass(intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray0);
      
      CharClass charClass2 = charClass1.cleanClass();
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertNotNull(charClass2);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray0);
      
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 2445;
      CharClass charClass3 = new CharClass(intArray0);
      assertNotNull(charClass3);
      assertEquals(4, intArray0.length);
      assertFalse(charClass3.equals((Object)charClass0));
      assertFalse(charClass3.equals((Object)charClass1));
      assertFalse(charClass3.equals((Object)charClass2));
      assertArrayEquals(new int[] {0, 0, 2445, 0}, intArray0);
      
      CharClass charClass4 = charClass1.appendClassWithSign(intArray0, (-2521));
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass4);
      assertNotSame(charClass0, charClass3);
      assertNotSame(charClass1, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass4);
      assertSame(charClass4, charClass1);
      assertNotSame(charClass4, charClass3);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass2);
      assertNotNull(charClass4);
      assertEquals(4, intArray0.length);
      assertFalse(charClass0.equals((Object)charClass3));
      assertFalse(charClass1.equals((Object)charClass3));
      assertFalse(charClass4.equals((Object)charClass3));
      assertArrayEquals(new int[] {0, 0, 2445, 0}, intArray0);
      
      CharClass charClass5 = charClass4.appendLiteral(0, 2445);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass4);
      assertNotSame(charClass0, charClass3);
      assertNotSame(charClass1, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass4);
      assertSame(charClass4, charClass1);
      assertNotSame(charClass4, charClass3);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass5);
      assertSame(charClass4, charClass2);
      assertNotSame(charClass5, charClass3);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass1);
      assertNotNull(charClass5);
      assertEquals(4, intArray0.length);
      assertFalse(charClass0.equals((Object)charClass3));
      assertFalse(charClass1.equals((Object)charClass3));
      assertFalse(charClass4.equals((Object)charClass3));
      assertFalse(charClass5.equals((Object)charClass3));
      assertArrayEquals(new int[] {0, 0, 2445, 0}, intArray0);
      
      int[][] intArray1 = new int[4][5];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      intArray1[2] = intArray0;
      CharClass charClass6 = charClass0.appendRange(1230, 0);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass4);
      assertNotSame(charClass0, charClass3);
      assertSame(charClass6, charClass4);
      assertSame(charClass6, charClass0);
      assertNotSame(charClass6, charClass3);
      assertSame(charClass6, charClass5);
      assertSame(charClass6, charClass2);
      assertSame(charClass6, charClass1);
      assertNotNull(charClass6);
      assertFalse(charClass0.equals((Object)charClass3));
      assertFalse(charClass6.equals((Object)charClass3));
      
      intArray1[3] = intArray0;
      CharClass charClass7 = charClass1.appendTable(intArray1);
      assertSame(charClass7, charClass6);
      assertSame(charClass7, charClass2);
      assertSame(charClass7, charClass0);
      assertNotSame(charClass7, charClass3);
      assertSame(charClass7, charClass5);
      assertSame(charClass7, charClass1);
      assertSame(charClass7, charClass4);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass4);
      assertNotSame(charClass0, charClass3);
      assertNotSame(charClass1, charClass3);
      assertSame(charClass1, charClass7);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass6);
      assertNotNull(charClass7);
      assertEquals(4, intArray0.length);
      assertEquals(4, intArray1.length);
      assertFalse(charClass7.equals((Object)charClass3));
      assertFalse(charClass0.equals((Object)charClass3));
      assertFalse(charClass1.equals((Object)charClass3));
      assertArrayEquals(new int[] {0, 0, 2445, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[][] intArray0 = new int[4][7];
      int[] intArray1 = new int[8];
      intArray1[0] = 3954;
      intArray1[1] = 291;
      intArray1[2] = 1;
      intArray1[3] = (-2169);
      intArray1[4] = 8584;
      intArray1[5] = 4360;
      intArray1[6] = 300;
      intArray1[7] = 731;
      intArray0[0] = intArray1;
      int[] intArray2 = new int[2];
      assertFalse(intArray2.equals((Object)intArray1));
      
      intArray2[0] = 31;
      intArray2[1] = 8584;
      intArray0[1] = intArray2;
      int[] intArray3 = new int[2];
      assertFalse(intArray3.equals((Object)intArray2));
      assertFalse(intArray3.equals((Object)intArray1));
      
      intArray3[0] = 3954;
      intArray3[1] = 31;
      intArray0[2] = intArray3;
      int[] intArray4 = new int[3];
      assertFalse(intArray4.equals((Object)intArray1));
      assertFalse(intArray4.equals((Object)intArray2));
      assertFalse(intArray4.equals((Object)intArray3));
      
      intArray4[0] = 300;
      intArray4[1] = 31;
      intArray4[2] = (-365);
      intArray0[3] = intArray4;
      // Undeclared exception!
      try { 
        charClass0.appendTableWithSign(intArray0, 4360);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.appendRange(0, (-893));
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (-893);
      intArray0[1] = (-893);
      intArray0[2] = 0;
      intArray0[3] = (-893);
      intArray0[4] = 0;
      intArray0[5] = (-893);
      CharClass charClass2 = charClass1.appendClassWithSign(intArray0, (-893));
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertNotNull(charClass2);
      assertEquals(6, intArray0.length);
      assertArrayEquals(new int[] {(-893), (-893), 0, (-893), 0, (-893)}, intArray0);
      
      int[] intArray1 = charClass0.toArray();
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertEquals(2, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {(-892), 1114111}, intArray1);
      
      int[] intArray2 = charClass0.toArray();
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(intArray2, intArray1);
      assertNotSame(intArray2, intArray0);
      assertNotNull(intArray2);
      assertEquals(2, intArray2.length);
      assertFalse(intArray2.equals((Object)intArray0));
      assertArrayEquals(new int[] {(-892), 1114111}, intArray2);
      
      String string0 = CharClass.charClassToString(intArray2, (-316));
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(intArray2, intArray1);
      assertNotSame(intArray2, intArray0);
      assertNotNull(string0);
      assertEquals(2, intArray2.length);
      assertFalse(intArray2.equals((Object)intArray0));
      assertEquals("[]", string0);
      assertArrayEquals(new int[] {(-892), 1114111}, intArray2);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      int[] intArray0 = new int[6];
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.appendLiteral(0, 0);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      
      int[][] intArray1 = new int[5][4];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      intArray1[2] = intArray0;
      intArray1[3] = intArray0;
      intArray1[4] = intArray0;
      CharClass charClass2 = new CharClass(intArray0);
      assertNotNull(charClass2);
      assertEquals(6, intArray0.length);
      assertFalse(charClass2.equals((Object)charClass1));
      assertFalse(charClass2.equals((Object)charClass0));
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = 0;
      int int0 = 0;
      intArray0[1] = 0;
      intArray0[2] = (-2051);
      intArray0[3] = 1233;
      intArray0[4] = 0;
      int int1 = (-2021);
      intArray0[5] = (-2021);
      intArray0[6] = 0;
      CharClass charClass0 = new CharClass(intArray0);
      assertNotNull(charClass0);
      assertEquals(7, intArray0.length);
      assertArrayEquals(new int[] {0, 0, (-2051), 1233, 0, (-2021), 0}, intArray0);
      
      int int2 = (-516);
      CharClass charClass1 = charClass0.appendFoldedRange(42921, (-516));
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      assertEquals(7, intArray0.length);
      assertArrayEquals(new int[] {0, 0, (-2051), 1233, 0, (-2021), 0}, intArray0);
      
      CharClass charClass2 = charClass1.negateClass();
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertNotNull(charClass2);
      assertEquals(7, intArray0.length);
      assertArrayEquals(new int[] {0, 0, (-2051), 1233, 0, (-2021), 0}, intArray0);
      
      // Undeclared exception!
      try { 
        charClass2.appendNegatedClass(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[][] intArray0 = new int[6][9];
      int[] intArray1 = new int[4];
      intArray1[0] = (-557);
      intArray1[1] = (-417);
      intArray1[2] = 65;
      intArray1[3] = 2;
      intArray0[0] = intArray1;
      int[] intArray2 = new int[6];
      assertFalse(intArray2.equals((Object)intArray1));
      
      intArray2[0] = (-417);
      intArray2[1] = 65;
      intArray2[2] = 2;
      intArray2[3] = 263;
      intArray2[4] = 1;
      intArray2[5] = (-557);
      intArray0[1] = intArray2;
      int[] intArray3 = new int[9];
      assertFalse(intArray3.equals((Object)intArray2));
      assertFalse(intArray3.equals((Object)intArray1));
      
      intArray3[0] = (-417);
      intArray3[1] = 263;
      intArray3[2] = (-417);
      intArray3[3] = (-557);
      intArray3[4] = 1;
      intArray3[5] = (-417);
      intArray3[6] = (-417);
      intArray3[7] = (-417);
      intArray3[8] = 65;
      intArray0[2] = intArray3;
      int[] intArray4 = new int[2];
      assertFalse(intArray4.equals((Object)intArray3));
      assertFalse(intArray4.equals((Object)intArray1));
      assertFalse(intArray4.equals((Object)intArray2));
      
      intArray4[0] = 65;
      intArray4[1] = 2;
      intArray0[3] = intArray4;
      int[] intArray5 = new int[9];
      assertFalse(intArray5.equals((Object)intArray2));
      assertFalse(intArray5.equals((Object)intArray1));
      assertFalse(intArray5.equals((Object)intArray3));
      assertFalse(intArray5.equals((Object)intArray4));
      
      intArray5[0] = 65;
      intArray5[1] = 2546;
      intArray5[2] = (-557);
      intArray5[3] = 3612;
      intArray5[4] = (-557);
      intArray5[5] = 263;
      intArray5[6] = 263;
      intArray5[7] = (-557);
      intArray5[8] = 1;
      intArray0[4] = intArray5;
      int[] intArray6 = new int[1];
      assertFalse(intArray6.equals((Object)intArray2));
      assertFalse(intArray6.equals((Object)intArray4));
      assertFalse(intArray6.equals((Object)intArray1));
      assertFalse(intArray6.equals((Object)intArray5));
      assertFalse(intArray6.equals((Object)intArray3));
      
      intArray6[0] = 3612;
      intArray0[5] = intArray6;
      // Undeclared exception!
      charClass0.appendNegatedTable(intArray0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[] intArray0 = new int[9];
      intArray0[0] = 901;
      intArray0[1] = 0;
      intArray0[2] = (-1);
      intArray0[3] = 436;
      intArray0[4] = 0;
      intArray0[5] = 0;
      intArray0[6] = 1002;
      intArray0[7] = 852;
      intArray0[8] = 1114111;
      // Undeclared exception!
      try { 
        charClass0.appendClassWithSign(intArray0, 3238);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 9
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (-188);
      intArray0[1] = 6071;
      int int0 = 65;
      intArray0[2] = 65;
      // Undeclared exception!
      try { 
        charClass0.appendClass(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 0;
      intArray0[1] = (-2842);
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 1715;
      intArray0[5] = (-810);
      CharClass charClass0 = new CharClass(intArray0);
      assertNotNull(charClass0);
      assertEquals(6, intArray0.length);
      assertArrayEquals(new int[] {0, (-2842), 0, 0, 1715, (-810)}, intArray0);
      
      String string0 = charClass0.toString();
      assertNotNull(string0);
      assertEquals(6, intArray0.length);
      assertEquals("[0x0-0xfffff4e6 0x0 0x6b3-0xfffffcd6]", string0);
      assertArrayEquals(new int[] {0, (-2842), 0, 0, 1715, (-810)}, intArray0);
      
      int[][] intArray1 = new int[6][7];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      intArray1[2] = intArray0;
      intArray1[3] = intArray0;
      intArray1[4] = intArray0;
      intArray1[5] = intArray0;
      CharClass charClass1 = charClass0.appendTableWithSign(intArray1, 0);
      assertSame(charClass1, charClass0);
      assertSame(charClass0, charClass1);
      assertNotNull(charClass1);
      assertEquals(6, intArray0.length);
      assertEquals(6, intArray1.length);
      assertArrayEquals(new int[] {0, (-2842), 0, 0, 1715, (-810)}, intArray0);
      
      String string1 = CharClass.charClassToString(intArray0, (-1607));
      assertNotNull(string1);
      assertEquals(6, intArray0.length);
      assertFalse(string1.equals((Object)string0));
      assertEquals("[]", string1);
      assertArrayEquals(new int[] {0, (-2842), 0, 0, 1715, (-810)}, intArray0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[] intArray0 = null;
      // Undeclared exception!
      try { 
        charClass0.appendFoldedClass((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = (-600);
      intArray0[1] = 1;
      intArray0[2] = 91;
      intArray0[3] = 306;
      intArray0[4] = 2838;
      intArray0[5] = (-1875);
      CharClass charClass0 = new CharClass(intArray0);
      assertNotNull(charClass0);
      assertEquals(6, intArray0.length);
      assertArrayEquals(new int[] {(-600), 1, 91, 306, 2838, (-1875)}, intArray0);
      
      int[][] intArray1 = new int[5][5];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      intArray1[2] = intArray0;
      intArray1[3] = intArray0;
      int[] intArray2 = new int[9];
      assertFalse(intArray2.equals((Object)intArray0));
      
      intArray2[0] = 306;
      intArray2[1] = 306;
      intArray2[2] = 1;
      intArray2[3] = (-903);
      intArray2[4] = 1;
      intArray2[5] = 1;
      intArray2[6] = 1;
      intArray2[7] = 91;
      intArray2[8] = 2838;
      intArray1[4] = intArray2;
      CharClass charClass1 = charClass0.appendNegatedTable(intArray1);
      assertNotSame(intArray0, intArray2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      assertEquals(6, intArray0.length);
      assertEquals(5, intArray1.length);
      assertFalse(intArray0.equals((Object)intArray2));
      assertArrayEquals(new int[] {(-600), 1, 91, 306, 2838, (-1875)}, intArray0);
      
      CharClass charClass2 = charClass0.appendFoldedClass(intArray0);
      assertNotSame(intArray0, intArray2);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertNotNull(charClass2);
      assertEquals(6, intArray0.length);
      assertFalse(intArray0.equals((Object)intArray2));
      assertArrayEquals(new int[] {(-600), 1, 91, 306, 2838, (-1875)}, intArray0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (-1259);
      intArray0[1] = 12348;
      CharClass charClass1 = charClass0.appendNegatedClass(intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {(-1259), 12348}, intArray0);
      
      int[][] intArray1 = new int[0][8];
      CharClass charClass2 = charClass0.appendTable(intArray1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertNotNull(charClass2);
      assertEquals(0, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      String string0 = charClass0.toString();
      assertNotNull(string0);
      assertEquals("[]", string0);
      
      CharClass charClass1 = charClass0.appendFoldedRange(69, 69);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      
      int[][] intArray0 = new int[3][8];
      int[] intArray1 = new int[2];
      intArray1[0] = 69;
      intArray1[1] = 80;
      intArray0[0] = intArray1;
      int[] intArray2 = new int[2];
      assertFalse(intArray2.equals((Object)intArray1));
      
      intArray2[0] = 69;
      intArray2[1] = 69;
      intArray0[1] = intArray2;
      int[] intArray3 = new int[1];
      assertFalse(intArray3.equals((Object)intArray1));
      assertFalse(intArray3.equals((Object)intArray2));
      
      intArray3[0] = 69;
      intArray0[2] = intArray3;
      // Undeclared exception!
      try { 
        charClass0.appendNegatedTable(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[] intArray0 = new int[3];
      intArray0[0] = 1;
      intArray0[1] = 1114112;
      intArray0[2] = (-141);
      CharClass charClass1 = new CharClass(intArray0);
      assertNotNull(charClass1);
      assertEquals(3, intArray0.length);
      assertFalse(charClass1.equals((Object)charClass0));
      assertArrayEquals(new int[] {1, 1114112, (-141)}, intArray0);
      
      // Undeclared exception!
      try { 
        charClass0.appendNegatedClass(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[] intArray0 = new int[0];
      CharClass charClass1 = charClass0.appendClass(intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      
      CharClass charClass2 = charClass0.appendClassWithSign(intArray0, 569);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertNotNull(charClass2);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.appendFoldedRange(1114111, 65);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      
      int[] intArray0 = charClass1.toArray();
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(intArray0);
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {1114111, 65}, intArray0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[] intArray0 = new int[5];
      intArray0[0] = 2899;
      int int0 = 0;
      intArray0[1] = 0;
      intArray0[2] = 11265;
      intArray0[3] = 1830;
      intArray0[4] = 625;
      // Undeclared exception!
      try { 
        charClass0.appendClassWithSign(intArray0, 397);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = (-697);
      intArray0[1] = 908;
      intArray0[2] = 1550;
      intArray0[3] = (-1);
      CharClass charClass0 = new CharClass(intArray0);
      assertNotNull(charClass0);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {(-697), 908, 1550, (-1)}, intArray0);
      
      int[][] intArray1 = new int[0][0];
      CharClass charClass1 = charClass0.appendTable(intArray1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      assertEquals(4, intArray0.length);
      assertEquals(0, intArray1.length);
      assertArrayEquals(new int[] {(-697), 908, 1550, (-1)}, intArray0);
      
      CharClass charClass2 = charClass1.appendFoldedClass(intArray0);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertNotNull(charClass2);
      assertEquals(4, intArray0.length);
      assertEquals(0, intArray1.length);
      assertArrayEquals(new int[] {(-697), 908, 1550, (-1)}, intArray0);
      
      CharClass charClass3 = charClass2.appendFoldedRange(1550, (-1));
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass0);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass2);
      assertNotNull(charClass3);
      assertEquals(4, intArray0.length);
      assertEquals(0, intArray1.length);
      assertArrayEquals(new int[] {(-697), 908, 1550, (-1)}, intArray0);
      
      CharClass charClass4 = charClass3.appendClassWithSign(intArray0, 66639);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass4);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass0);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass4);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass0);
      assertNotNull(charClass4);
      assertEquals(4, intArray0.length);
      assertEquals(0, intArray1.length);
      assertArrayEquals(new int[] {(-697), 908, 1550, (-1)}, intArray0);
      
      CharClass charClass5 = charClass4.appendRange((-2061330987), 66639);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass4);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass5);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass5);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass4);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass5);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass3);
      assertNotNull(charClass5);
      assertEquals(4, intArray0.length);
      assertEquals(0, intArray1.length);
      assertArrayEquals(new int[] {(-697), 908, 1550, (-1)}, intArray0);
      
      int[] intArray2 = charClass5.toArray();
      assertNotSame(intArray0, intArray2);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass4);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass5);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass5);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass4);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass5);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass3);
      assertNotSame(intArray2, intArray0);
      assertNotNull(intArray2);
      assertEquals(4, intArray0.length);
      assertEquals(0, intArray1.length);
      assertEquals(262, intArray2.length);
      assertFalse(intArray2.equals((Object)intArray0));
      assertArrayEquals(new int[] {(-697), 908, 1550, (-1)}, intArray0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      int[] intArray0 = new int[0];
      CharClass charClass0 = new CharClass(intArray0);
      assertNotNull(charClass0);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      
      CharClass charClass1 = charClass0.appendFoldedRange(2540, (-3035));
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      
      int[][] intArray1 = new int[1][0];
      int[] intArray2 = new int[8];
      assertFalse(intArray2.equals((Object)intArray0));
      
      intArray2[0] = 2540;
      intArray2[1] = 4;
      intArray2[2] = (-327);
      intArray2[3] = 4;
      intArray2[4] = 4;
      intArray2[5] = 2540;
      intArray2[6] = 4;
      intArray2[7] = 4;
      intArray1[0] = intArray2;
      CharClass charClass2 = charClass0.appendTable(intArray1);
      assertNotSame(intArray0, intArray2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertNotNull(charClass2);
      assertEquals(0, intArray0.length);
      assertEquals(1, intArray1.length);
      assertFalse(intArray0.equals((Object)intArray2));
      assertArrayEquals(new int[] {}, intArray0);
      
      CharClass charClass3 = charClass1.appendFoldedRange(2540, 4);
      assertNotSame(intArray0, intArray2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      assertNotNull(charClass3);
      assertEquals(0, intArray0.length);
      assertFalse(intArray0.equals((Object)intArray2));
      assertArrayEquals(new int[] {}, intArray0);
      
      int[] intArray3 = charClass0.toArray();
      assertNotSame(intArray3, intArray2);
      assertNotSame(intArray3, intArray0);
      assertNotSame(intArray0, intArray3);
      assertNotSame(intArray0, intArray2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertNotNull(intArray3);
      assertEquals(4, intArray3.length);
      assertEquals(0, intArray0.length);
      assertFalse(intArray3.equals((Object)intArray2));
      assertFalse(intArray3.equals((Object)intArray0));
      assertFalse(intArray0.equals((Object)intArray2));
      assertArrayEquals(new int[] {2540, (-3035), 2540, 4}, intArray3);
      assertArrayEquals(new int[] {}, intArray0);
      
      // Undeclared exception!
      charClass3.appendFoldedRange(1152, 66640);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 65909;
      intArray0[1] = 2722;
      intArray0[2] = 260;
      intArray0[3] = (-1810);
      CharClass charClass0 = new CharClass(intArray0);
      assertNotNull(charClass0);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {65909, 2722, 260, (-1810)}, intArray0);
      
      CharClass charClass1 = charClass0.appendClass(intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {65909, 2722, 260, (-1810)}, intArray0);
      
      int[][] intArray1 = new int[5][0];
      intArray1[0] = intArray0;
      int[] intArray2 = new int[8];
      assertFalse(intArray2.equals((Object)intArray0));
      
      intArray2[0] = 65909;
      intArray2[1] = 65909;
      intArray2[2] = 2722;
      intArray2[3] = (-2669);
      intArray2[4] = (-4087);
      intArray2[5] = 65909;
      intArray2[6] = 65909;
      intArray2[7] = 260;
      intArray1[1] = intArray2;
      intArray1[2] = intArray0;
      intArray1[3] = intArray0;
      intArray1[4] = intArray0;
      CharClass charClass2 = charClass1.appendNegatedTable(intArray1);
      assertNotSame(intArray0, intArray2);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertNotNull(charClass2);
      assertEquals(4, intArray0.length);
      assertEquals(5, intArray1.length);
      assertFalse(intArray0.equals((Object)intArray2));
      assertArrayEquals(new int[] {65909, 2722, 260, (-1810)}, intArray0);
      
      CharClass charClass3 = charClass2.appendTableWithSign(intArray1, 2447);
      assertNotSame(intArray0, intArray2);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass2);
      assertNotNull(charClass3);
      assertEquals(4, intArray0.length);
      assertEquals(5, intArray1.length);
      assertFalse(intArray0.equals((Object)intArray2));
      assertArrayEquals(new int[] {65909, 2722, 260, (-1810)}, intArray0);
      
      CharClass charClass4 = charClass3.appendFoldedClass(intArray0);
      assertNotSame(intArray0, intArray2);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass4);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass2);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass4);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass0);
      assertNotNull(charClass4);
      assertEquals(4, intArray0.length);
      assertEquals(5, intArray1.length);
      assertFalse(intArray0.equals((Object)intArray2));
      assertArrayEquals(new int[] {65909, 2722, 260, (-1810)}, intArray0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = (-3854);
      // Undeclared exception!
      try { 
        CharClass.charClassToString(intArray0, 66640);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      CharClass charClass1 = new CharClass();
      assertNotNull(charClass1);
      assertFalse(charClass1.equals((Object)charClass0));
      
      int[] intArray0 = new int[6];
      intArray0[0] = (-893);
      intArray0[1] = (-893);
      intArray0[2] = 0;
      intArray0[3] = (-893);
      intArray0[4] = 0;
      intArray0[5] = (-893);
      CharClass charClass2 = charClass1.appendClassWithSign(intArray0, (-893));
      assertSame(charClass1, charClass2);
      assertNotSame(charClass1, charClass0);
      assertSame(charClass2, charClass1);
      assertNotSame(charClass2, charClass0);
      assertNotNull(charClass2);
      assertEquals(6, intArray0.length);
      assertFalse(charClass1.equals((Object)charClass0));
      assertFalse(charClass2.equals((Object)charClass0));
      assertArrayEquals(new int[] {(-893), (-893), 0, (-893), 0, (-893)}, intArray0);
      
      int[] intArray1 = charClass0.toArray();
      assertNotSame(charClass0, charClass1);
      assertNotSame(charClass0, charClass2);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertEquals(0, intArray1.length);
      assertFalse(charClass0.equals((Object)charClass1));
      assertFalse(charClass0.equals((Object)charClass2));
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {}, intArray1);
      
      int[] intArray2 = charClass0.toArray();
      assertNotSame(charClass0, charClass1);
      assertNotSame(charClass0, charClass2);
      assertNotSame(intArray2, intArray0);
      assertSame(intArray2, intArray1);
      assertNotNull(intArray2);
      assertEquals(0, intArray2.length);
      assertFalse(charClass0.equals((Object)charClass1));
      assertFalse(charClass0.equals((Object)charClass2));
      assertFalse(intArray2.equals((Object)intArray0));
      assertArrayEquals(new int[] {}, intArray2);
      
      String string0 = CharClass.charClassToString(intArray2, (-316));
      assertNotSame(charClass0, charClass1);
      assertNotSame(charClass0, charClass2);
      assertNotSame(intArray2, intArray0);
      assertSame(intArray2, intArray1);
      assertNotNull(string0);
      assertEquals(0, intArray2.length);
      assertFalse(charClass0.equals((Object)charClass1));
      assertFalse(charClass0.equals((Object)charClass2));
      assertFalse(intArray2.equals((Object)intArray0));
      assertEquals("[]", string0);
      assertArrayEquals(new int[] {}, intArray2);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[] intArray0 = new int[9];
      intArray0[0] = 901;
      intArray0[1] = 0;
      intArray0[2] = (-1);
      int[] intArray1 = null;
      // Undeclared exception!
      try { 
        charClass0.appendClassWithSign((int[]) null, (-1));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 60;
      CharClass charClass0 = new CharClass(intArray0);
      assertNotNull(charClass0);
      assertEquals(5, intArray0.length);
      assertArrayEquals(new int[] {0, 0, 60, 0, 0}, intArray0);
      
      int[][] intArray1 = new int[1][5];
      intArray1[0] = intArray0;
      CharClass charClass1 = charClass0.appendTableWithSign(intArray1, 0);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      assertEquals(5, intArray0.length);
      assertEquals(1, intArray1.length);
      assertArrayEquals(new int[] {0, 0, 60, 0, 0}, intArray0);
      
      // Undeclared exception!
      try { 
        charClass1.appendFoldedClass(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      String string0 = charClass0.toString();
      assertNotNull(string0);
      assertEquals("[]", string0);
      
      String string1 = charClass0.toString();
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("[]", string1);
      
      int int0 = (-1016);
      int int1 = (-94);
      CharClass charClass1 = charClass0.appendFoldedRange((-1016), (-94));
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      
      String string2 = charClass1.toString();
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("[0xfffffc08-0xffffffa2]", string2);
      
      int[] intArray0 = new int[8];
      int[][] intArray1 = new int[4][2];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      intArray1[2] = intArray0;
      intArray1[3] = intArray0;
      // Undeclared exception!
      charClass1.appendTableWithSign(intArray1, (-2775));
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = (-1);
      intArray0[1] = 1127;
      CharClass charClass0 = new CharClass(intArray0);
      assertNotNull(charClass0);
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {(-1), 1127}, intArray0);
      
      CharClass charClass1 = charClass0.appendClassWithSign(intArray0, 1127);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {(-1), 1127}, intArray0);
      
      CharClass charClass2 = charClass1.appendClassWithSign(intArray0, (-3802));
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertNotNull(charClass2);
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {(-1), 1114111}, intArray0);
      
      int[][] intArray1 = new int[4][7];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      intArray1[2] = intArray0;
      CharClass charClass3 = charClass2.appendNegatedClass(intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass2);
      assertNotNull(charClass3);
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {(-1), 1114111}, intArray0);
      
      CharClass charClass4 = charClass3.appendFoldedClass(intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass4);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass4);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass2);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass3);
      assertNotNull(charClass4);
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {(-1), 1114111}, intArray0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[] intArray0 = new int[9];
      int int0 = 65;
      intArray0[0] = 65;
      intArray0[1] = (-4344);
      intArray0[2] = 44007;
      int int1 = (-2410);
      intArray0[3] = (-2410);
      int int2 = 68119;
      intArray0[4] = 68119;
      intArray0[5] = (-188);
      int int3 = 3173;
      intArray0[6] = 3173;
      intArray0[7] = (-2087);
      intArray0[8] = (-6);
      // Undeclared exception!
      try { 
        charClass0.appendFoldedClass(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 9
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 2311;
      intArray0[1] = 0;
      intArray0[2] = (-782);
      intArray0[3] = 1298;
      intArray0[4] = (-4920);
      intArray0[5] = 4;
      CharClass charClass0 = new CharClass(intArray0);
      assertNotNull(charClass0);
      assertEquals(6, intArray0.length);
      assertArrayEquals(new int[] {2311, 0, (-782), 1298, (-4920), 4}, intArray0);
      
      int[][] intArray1 = new int[2][3];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      CharClass charClass1 = charClass0.appendTable(intArray1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      assertEquals(6, intArray0.length);
      assertEquals(2, intArray1.length);
      assertArrayEquals(new int[] {2311, 0, (-782), 1298, (-4920), 4}, intArray0);
      
      CharClass charClass2 = charClass0.appendClass(intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertNotNull(charClass2);
      assertEquals(6, intArray0.length);
      assertArrayEquals(new int[] {2311, 0, (-782), 1298, (-4920), 4}, intArray0);
      
      CharClass charClass3 = charClass1.negateClass();
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass0);
      assertNotNull(charClass3);
      assertEquals(6, intArray0.length);
      assertEquals(2, intArray1.length);
      assertArrayEquals(new int[] {2311, 0, (-782), 1298, (-4920), 4}, intArray0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 0;
      intArray0[1] = (-1873);
      intArray0[2] = (-371);
      intArray0[3] = 1538;
      CharClass charClass0 = new CharClass(intArray0);
      assertNotNull(charClass0);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {0, (-1873), (-371), 1538}, intArray0);
      
      CharClass charClass1 = charClass0.appendClassWithSign(intArray0, (-1873));
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {0, (-1873), (-1872), 1114111}, intArray0);
      
      int[] intArray1 = charClass0.toArray();
      assertSame(intArray0, intArray1);
      assertSame(charClass0, charClass1);
      assertSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertEquals(4, intArray0.length);
      assertEquals(4, intArray1.length);
      assertArrayEquals(new int[] {0, (-1873), (-1872), 1114111}, intArray0);
      assertArrayEquals(new int[] {0, (-1873), (-1872), 1114111}, intArray1);
      
      CharClass charClass2 = charClass0.negateClass();
      assertSame(intArray0, intArray1);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertNotNull(charClass2);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {0, (-1873), (-1872), 1114111}, intArray0);
      
      CharClass charClass3 = charClass2.appendClass(intArray0);
      assertSame(intArray0, intArray1);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass2);
      assertNotNull(charClass3);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {(-1872), 1114111, (-1872), 1114111}, intArray0);
      
      int[] intArray2 = charClass1.toArray();
      assertSame(intArray0, intArray1);
      assertNotSame(intArray0, intArray2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass0);
      assertNotSame(intArray2, intArray1);
      assertNotSame(intArray2, intArray0);
      assertNotNull(intArray2);
      assertEquals(4, intArray0.length);
      assertEquals(2, intArray2.length);
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      assertArrayEquals(new int[] {(-1872), 1114111, (-1872), 1114111}, intArray0);
      assertArrayEquals(new int[] {(-1872), 1114111}, intArray2);
      
      CharClass charClass4 = charClass0.cleanClass();
      assertSame(intArray0, intArray1);
      assertNotSame(intArray0, intArray2);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass1);
      assertNotNull(charClass4);
      assertEquals(4, intArray0.length);
      assertFalse(intArray0.equals((Object)intArray2));
      assertArrayEquals(new int[] {(-1872), 1114111, (-1872), 1114111}, intArray0);
      
      CharClass charClass5 = charClass1.appendRange((-371), 1105);
      assertSame(intArray0, intArray1);
      assertNotSame(intArray0, intArray2);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass5);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass4);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass3);
      assertNotNull(charClass5);
      assertEquals(4, intArray0.length);
      assertFalse(intArray0.equals((Object)intArray2));
      assertArrayEquals(new int[] {(-1872), 1114111, (-1872), 1114111}, intArray0);
      
      CharClass charClass6 = charClass3.appendLiteral((-1872), (-4305));
      assertSame(intArray0, intArray1);
      assertNotSame(intArray0, intArray2);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass5);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass6);
      assertSame(charClass2, charClass1);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass5);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass6);
      assertSame(charClass3, charClass2);
      assertSame(charClass6, charClass1);
      assertSame(charClass6, charClass3);
      assertSame(charClass6, charClass4);
      assertSame(charClass6, charClass2);
      assertSame(charClass6, charClass5);
      assertSame(charClass6, charClass0);
      assertNotNull(charClass6);
      assertEquals(4, intArray0.length);
      assertFalse(intArray0.equals((Object)intArray2));
      assertArrayEquals(new int[] {(-1872), 1114111, (-1872), 1114111}, intArray0);
      
      CharClass charClass7 = charClass4.appendFoldedRange(0, 0);
      assertSame(intArray0, intArray1);
      assertNotSame(intArray0, intArray2);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass5);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass6);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass5);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass7);
      assertSame(charClass4, charClass1);
      assertSame(charClass7, charClass3);
      assertSame(charClass7, charClass0);
      assertSame(charClass7, charClass4);
      assertSame(charClass7, charClass5);
      assertSame(charClass7, charClass1);
      assertSame(charClass7, charClass2);
      assertSame(charClass7, charClass6);
      assertNotNull(charClass7);
      assertEquals(4, intArray0.length);
      assertFalse(intArray0.equals((Object)intArray2));
      assertArrayEquals(new int[] {(-1872), 1114111, (-1872), 1114111}, intArray0);
      
      int[][] intArray3 = new int[6][4];
      intArray3[0] = intArray2;
      intArray3[1] = intArray0;
      intArray3[2] = intArray1;
      intArray3[3] = intArray1;
      intArray3[4] = intArray2;
      intArray3[5] = intArray0;
      // Undeclared exception!
      try { 
        charClass1.appendTable(intArray3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[] intArray0 = new int[7];
      intArray0[0] = 1399;
      intArray0[1] = 4185;
      intArray0[2] = 2313;
      intArray0[3] = 3426;
      intArray0[4] = 0;
      intArray0[5] = 0;
      intArray0[6] = 9985;
      String string0 = CharClass.charClassToString(intArray0, (-1164));
      assertNotNull(string0);
      assertEquals(7, intArray0.length);
      assertEquals("[]", string0);
      assertArrayEquals(new int[] {1399, 4185, 2313, 3426, 0, 0, 9985}, intArray0);
      
      CharClass charClass1 = charClass0.negateClass();
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      
      CharClass charClass2 = charClass1.negateClass();
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertNotNull(charClass2);
      
      // Undeclared exception!
      charClass2.appendFoldedClass(intArray0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      int[] intArray0 = new int[1];
      int int0 = 93;
      intArray0[0] = 93;
      CharClass charClass0 = new CharClass(intArray0);
      assertNotNull(charClass0);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {93}, intArray0);
      
      CharClass charClass1 = charClass0.appendFoldedRange(93, 93);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {93}, intArray0);
      
      // Undeclared exception!
      try { 
        charClass1.appendFoldedClass(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.appendLiteral(0, 0);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      
      String string0 = CharClass.charClassToString((int[]) null, 0);
      assertNotNull(string0);
      assertEquals("[]", string0);
      
      CharClass charClass2 = charClass1.appendLiteral(0, 1768);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertNotNull(charClass2);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      int[] intArray0 = new int[6];
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      CharClass charClass1 = new CharClass(intArray0);
      assertNotNull(charClass1);
      assertEquals(6, intArray0.length);
      assertFalse(charClass1.equals((Object)charClass0));
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0}, intArray0);
      
      CharClass charClass2 = charClass1.cleanClass();
      assertSame(charClass1, charClass2);
      assertNotSame(charClass1, charClass0);
      assertNotSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertNotNull(charClass2);
      assertEquals(6, intArray0.length);
      assertFalse(charClass1.equals((Object)charClass0));
      assertFalse(charClass2.equals((Object)charClass0));
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0}, intArray0);
      
      CharClass charClass3 = charClass1.appendLiteral(0, 1538);
      assertSame(charClass1, charClass2);
      assertNotSame(charClass1, charClass0);
      assertSame(charClass1, charClass3);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass1);
      assertNotSame(charClass3, charClass0);
      assertNotNull(charClass3);
      assertEquals(6, intArray0.length);
      assertFalse(charClass1.equals((Object)charClass0));
      assertFalse(charClass3.equals((Object)charClass0));
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0}, intArray0);
      
      CharClass charClass4 = charClass1.appendClass(intArray0);
      assertSame(charClass1, charClass2);
      assertNotSame(charClass1, charClass0);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass4);
      assertNotSame(charClass4, charClass0);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass1);
      assertNotNull(charClass4);
      assertEquals(6, intArray0.length);
      assertFalse(charClass1.equals((Object)charClass0));
      assertFalse(charClass4.equals((Object)charClass0));
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0}, intArray0);
      
      CharClass charClass5 = charClass4.appendClassWithSign(intArray0, 569);
      assertSame(charClass1, charClass2);
      assertNotSame(charClass1, charClass0);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass5);
      assertNotSame(charClass4, charClass0);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass5);
      assertSame(charClass4, charClass1);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass1);
      assertNotSame(charClass5, charClass0);
      assertSame(charClass5, charClass3);
      assertNotNull(charClass5);
      assertEquals(6, intArray0.length);
      assertFalse(charClass1.equals((Object)charClass0));
      assertFalse(charClass4.equals((Object)charClass0));
      assertFalse(charClass5.equals((Object)charClass0));
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      int[] intArray0 = new int[2];
      int int0 = (-667);
      intArray0[0] = (-667);
      int int1 = 0;
      intArray0[1] = 0;
      CharClass charClass0 = new CharClass(intArray0);
      assertNotNull(charClass0);
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {(-667), 0}, intArray0);
      
      int[][] intArrayArray0 = null;
      int int2 = 139;
      // Undeclared exception!
      try { 
        charClass0.appendTableWithSign((int[][]) null, 139);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[] intArray0 = new int[4];
      CharClass charClass1 = charClass0.appendNegatedClass(intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray0);
      
      CharClass charClass2 = charClass1.cleanClass();
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertNotNull(charClass2);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray0);
      
      int int0 = 0;
      intArray0[0] = 0;
      int int1 = 0;
      intArray0[1] = 0;
      intArray0[2] = 2445;
      int int2 = 0;
      intArray0[3] = 0;
      CharClass charClass3 = charClass0.appendFoldedClass(intArray0);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass1);
      assertNotNull(charClass3);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {0, 0, 2445, 0}, intArray0);
      
      // Undeclared exception!
      try { 
        charClass3.appendGroup((CharGroup) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = (-1390);
      int int0 = 780;
      intArray0[1] = 780;
      intArray0[2] = 482;
      intArray0[3] = 673;
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[][] intArray1 = new int[8][3];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      intArray1[2] = intArray0;
      intArray1[3] = intArray0;
      intArray1[4] = intArray0;
      intArray1[5] = intArray0;
      intArray1[6] = intArray0;
      intArray1[7] = intArray0;
      CharClass charClass1 = charClass0.appendTable(intArray1);
      assertSame(charClass1, charClass0);
      assertSame(charClass0, charClass1);
      assertNotNull(charClass1);
      assertEquals(8, intArray1.length);
      
      CharClass charClass2 = charClass1.cleanClass();
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertNotNull(charClass2);
      assertEquals(8, intArray1.length);
      
      CharClass charClass3 = charClass2.appendLiteral((-327), (-1390));
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass1);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass2);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertNotNull(charClass3);
      assertEquals(8, intArray1.length);
      
      CharClass charClass4 = charClass3.appendFoldedRange((-1390), 780);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass1);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass4);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass4);
      assertNotNull(charClass4);
      assertEquals(8, intArray1.length);
      
      // Undeclared exception!
      try { 
        charClass4.appendClassWithSign(intArray0, (-94));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      int[] intArray0 = new int[0];
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      String string0 = charClass0.toString();
      assertNotNull(string0);
      assertEquals("[]", string0);
      
      CharClass charClass1 = charClass0.cleanClass();
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      
      int int0 = 120467;
      CharClass charClass2 = charClass1.appendFoldedRange((-3000), 120467);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertNotNull(charClass2);
      
      String string1 = charClass2.toString();
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("[0xfffff448-0x1d693]", string1);
      
      int[][] intArray1 = new int[4][0];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      int[] intArray2 = new int[1];
      assertFalse(intArray2.equals((Object)intArray0));
      
      int int1 = 1189;
      intArray2[0] = 1189;
      intArray1[2] = intArray2;
      intArray1[3] = intArray0;
      // Undeclared exception!
      try { 
        charClass1.appendTableWithSign(intArray1, (-2775));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = 0;
      int int0 = 0;
      intArray0[1] = 0;
      intArray0[2] = 93;
      intArray0[3] = 378;
      intArray0[4] = 32;
      CharClass charClass0 = new CharClass(intArray0);
      assertNotNull(charClass0);
      assertEquals(5, intArray0.length);
      assertArrayEquals(new int[] {0, 0, 93, 378, 32}, intArray0);
      
      int int1 = 1172;
      int[][] intArray1 = new int[6][8];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      intArray1[2] = intArray0;
      intArray1[3] = intArray0;
      intArray1[4] = intArray0;
      intArray1[5] = intArray0;
      CharClass charClass1 = charClass0.appendTable(intArray1);
      assertSame(charClass1, charClass0);
      assertSame(charClass0, charClass1);
      assertNotNull(charClass1);
      assertEquals(5, intArray0.length);
      assertEquals(6, intArray1.length);
      assertArrayEquals(new int[] {0, 0, 93, 378, 32}, intArray0);
      
      int[] intArray2 = null;
      // Undeclared exception!
      try { 
        charClass0.appendNegatedClass((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      int[][] intArray0 = new int[9][8];
      int[] intArray1 = new int[6];
      intArray1[0] = (-2404);
      intArray1[1] = 93;
      intArray1[2] = 0;
      intArray1[3] = (-2038);
      intArray1[4] = 0;
      intArray1[5] = (-1822);
      intArray0[0] = intArray1;
      int[] intArray2 = new int[5];
      intArray2[0] = (-2404);
      intArray2[1] = 91;
      intArray2[2] = 0;
      intArray2[3] = 0;
      intArray2[4] = (-2404);
      intArray0[1] = intArray2;
      int[] intArray3 = new int[7];
      intArray3[0] = (-2404);
      intArray3[1] = 0;
      intArray3[2] = 93;
      intArray3[3] = 93;
      intArray3[4] = 91;
      intArray3[5] = (-1822);
      intArray3[6] = (-2404);
      intArray0[2] = intArray3;
      int[] intArray4 = new int[8];
      intArray4[0] = (-1822);
      intArray4[1] = 0;
      intArray4[2] = 93;
      intArray4[3] = 93;
      intArray4[4] = (-1822);
      intArray4[5] = (-1822);
      intArray4[6] = 93;
      intArray4[7] = 0;
      intArray0[3] = intArray4;
      int[] intArray5 = new int[1];
      intArray5[0] = (-2038);
      intArray0[4] = intArray5;
      int[] intArray6 = new int[2];
      intArray6[0] = 0;
      intArray6[1] = 0;
      intArray0[5] = intArray6;
      int[] intArray7 = new int[7];
      intArray7[0] = (-2);
      intArray7[1] = 93;
      intArray7[2] = (-2038);
      intArray7[3] = 0;
      intArray7[4] = 93;
      intArray7[5] = (-2404);
      intArray7[6] = 0;
      intArray0[6] = intArray7;
      int[] intArray8 = new int[7];
      intArray8[0] = 93;
      intArray8[1] = 0;
      intArray8[2] = 0;
      intArray8[3] = 0;
      intArray8[4] = (-1822);
      intArray8[5] = 93;
      intArray8[6] = (-2038);
      intArray0[7] = intArray8;
      int[] intArray9 = new int[1];
      intArray9[0] = 91;
      intArray0[8] = intArray9;
      // Undeclared exception!
      charClass0.appendNegatedTable(intArray0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = (-2336);
      intArray0[1] = 4347;
      int int0 = 2801;
      intArray0[2] = 2801;
      int int1 = 5999;
      intArray0[3] = 5999;
      intArray0[4] = 0;
      intArray0[5] = (-2681);
      CharClass charClass0 = new CharClass(intArray0);
      charClass0.appendClass(intArray0);
      CharClass charClass1 = charClass0.appendClassWithSign(intArray0, 0);
      int[] intArray1 = charClass0.toArray();
      CharClass.charClassToString(intArray1, (-1174));
      charClass0.negateClass();
      // Undeclared exception!
      charClass1.appendFoldedClass(intArray1);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = (-1390);
      intArray0[1] = 780;
      intArray0[2] = 482;
      intArray0[3] = 673;
      intArray0[4] = 569;
      CharClass charClass0 = new CharClass(intArray0);
      int[][] intArray1 = new int[5][0];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      int[] intArray2 = new int[6];
      intArray2[0] = (-1390);
      intArray2[1] = 780;
      intArray2[2] = 569;
      intArray2[3] = 2;
      intArray2[4] = (-1390);
      intArray2[5] = (-1390);
      intArray1[2] = intArray2;
      intArray1[3] = intArray0;
      intArray1[4] = intArray0;
      charClass0.appendNegatedTable(intArray1);
      assertArrayEquals(new int[] {(-1390), 780, 482, 673, 569}, intArray0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      CharClass charClass1 = charClass0.appendRange(1114111, 1114111);
      charClass0.negateClass();
      int[] intArray0 = new int[6];
      intArray0[0] = 1114111;
      intArray0[1] = (-2);
      intArray0[2] = (-2);
      intArray0[3] = 1114111;
      intArray0[4] = (-2);
      intArray0[5] = 1114111;
      charClass1.appendNegatedClass(intArray0);
      CharClass charClass2 = charClass1.appendFoldedRange((-2), (-2));
      CharClass charClass3 = charClass2.cleanClass();
      assertSame(charClass3, charClass1);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      int[] intArray0 = new int[0];
      CharClass charClass0 = new CharClass(intArray0);
      int int0 = 2540;
      int int1 = (-3035);
      CharClass charClass1 = charClass0.appendFoldedRange(2540, (-3035));
      int[][] intArray1 = new int[1][0];
      int[] intArray2 = new int[8];
      int int2 = 0;
      charClass1.appendFoldedClass(intArray0);
      // Undeclared exception!
      try { 
        charClass1.appendTable(intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 93;
      intArray0[3] = 378;
      intArray0[4] = 32;
      CharClass charClass0 = new CharClass(intArray0);
      charClass0.appendLiteral(2662, 1172);
      // Undeclared exception!
      try { 
        charClass0.appendNegatedClass(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      int[] intArray0 = new int[0];
      CharClass charClass0 = new CharClass(intArray0);
      int[][] intArray1 = new int[6][2];
      intArray1[0] = intArray0;
      int[] intArray2 = new int[9];
      intArray2[0] = (-678);
      intArray2[1] = 8474;
      intArray2[2] = 771;
      intArray2[3] = 706;
      intArray2[4] = 1;
      intArray2[5] = (-2133);
      intArray2[6] = 99;
      intArray2[7] = (-190);
      intArray2[8] = 0;
      intArray1[1] = intArray2;
      intArray1[2] = intArray0;
      intArray1[3] = intArray0;
      int[] intArray3 = new int[4];
      intArray3[0] = (-2133);
      intArray3[1] = 706;
      intArray3[2] = (-972);
      intArray3[3] = 99;
      intArray1[4] = intArray3;
      intArray1[5] = intArray0;
      // Undeclared exception!
      try { 
        charClass0.appendTableWithSign(intArray1, (-678));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      int[] intArray0 = new int[7];
      intArray0[0] = 2892;
      int int0 = 64296;
      intArray0[1] = 64296;
      intArray0[2] = 4151;
      intArray0[3] = 0;
      intArray0[4] = 1291;
      intArray0[5] = (-1352);
      int int1 = 0;
      intArray0[6] = 0;
      // Undeclared exception!
      charClass0.appendFoldedClass(intArray0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      int[] intArray0 = new int[4];
      CharClass charClass1 = charClass0.appendNegatedClass(intArray0);
      CharClass charClass2 = charClass1.cleanClass();
      intArray0[0] = 0;
      intArray0[1] = (-5);
      intArray0[2] = 2445;
      CharClass charClass3 = new CharClass(intArray0);
      CharClass charClass4 = charClass3.cleanClass();
      charClass4.appendLiteral((-5), 2445);
      charClass2.appendClass(intArray0);
      charClass3.appendClassWithSign(intArray0, 0);
      assertArrayEquals(new int[] {0, (-5), 2445, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      int[] intArray0 = new int[7];
      int int0 = (-1987);
      intArray0[0] = (-1987);
      intArray0[1] = (-1);
      int int1 = 0;
      intArray0[2] = 0;
      int int2 = 0;
      intArray0[3] = 0;
      int int3 = 0;
      intArray0[4] = 0;
      intArray0[5] = 1380;
      intArray0[6] = 1070;
      CharClass charClass0 = new CharClass(intArray0);
      int[][] intArrayArray0 = null;
      // Undeclared exception!
      try { 
        charClass0.appendTable((int[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      int[] intArray0 = new int[4];
      CharClass charClass1 = charClass0.appendNegatedClass(intArray0);
      charClass1.cleanClass();
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 2445;
      intArray0[3] = 0;
      CharClass charClass2 = new CharClass(intArray0);
      CharClass charClass3 = new CharClass();
      int[] intArray1 = new int[3];
      intArray1[0] = 0;
      intArray1[1] = 0;
      int int0 = 252;
      intArray1[2] = 252;
      // Undeclared exception!
      try { 
        charClass3.appendClass(intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[1] = 2204;
      int int0 = 2801;
      intArray0[2] = 2801;
      int int1 = 5999;
      intArray0[3] = 5999;
      intArray0[4] = 0;
      intArray0[5] = (-2681);
      CharClass charClass0 = new CharClass(intArray0);
      charClass0.appendClass(intArray0);
      CharClass charClass1 = charClass0.appendClassWithSign(intArray0, 0);
      int[] intArray1 = charClass0.toArray();
      CharClass.charClassToString(intArray1, (-1174));
      charClass0.negateClass();
      // Undeclared exception!
      charClass1.appendFoldedClass(intArray1);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      String string0 = charClass0.toString();
      assertEquals("[]", string0);
      
      CharClass charClass1 = charClass0.cleanClass();
      int[][] intArray0 = new int[0][8];
      charClass1.appendTableWithSign(intArray0, 1715);
      int[] intArray1 = charClass0.toArray();
      assertEquals(0, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 2311;
      intArray0[1] = 0;
      intArray0[2] = (-782);
      intArray0[3] = 1298;
      intArray0[4] = (-4920);
      intArray0[5] = 4;
      CharClass charClass0 = new CharClass(intArray0);
      CharClass charClass1 = charClass0.appendRange((-782), (-4920));
      int[][] intArray1 = new int[9][1];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      intArray1[2] = intArray0;
      intArray1[3] = intArray0;
      intArray1[4] = intArray0;
      intArray1[5] = intArray0;
      intArray1[6] = intArray0;
      intArray1[7] = intArray0;
      intArray1[8] = intArray0;
      charClass1.appendNegatedTable(intArray1);
      int[][] intArray2 = new int[2][3];
      intArray2[0] = intArray0;
      intArray2[1] = intArray0;
      charClass0.appendClass(intArray0);
      charClass0.negateClass();
      assertArrayEquals(new int[] {0, 2310, (-782), 1298, (-4920), 1114111}, intArray0);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 0;
      intArray0[1] = (-2842);
      intArray0[2] = 0;
      int int0 = 0;
      intArray0[3] = 0;
      intArray0[4] = 1715;
      int int1 = (-810);
      intArray0[5] = (-810);
      CharClass charClass0 = new CharClass(intArray0);
      int[] intArray1 = new int[0];
      CharClass charClass1 = charClass0.appendClassWithSign(intArray1, 3195);
      CharClass charClass2 = charClass1.appendNegatedClass(intArray0);
      // Undeclared exception!
      charClass2.appendFoldedClass(intArray0);
  }
}
