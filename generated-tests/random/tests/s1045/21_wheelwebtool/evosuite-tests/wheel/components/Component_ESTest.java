/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 24 17:16:08 GMT 2019
 */

package wheel.components;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import wheel.ErrorPage;
import wheel.components.ActionExpression;
import wheel.components.Any;
import wheel.components.Block;
import wheel.components.Checkbox;
import wheel.components.CheckboxGroup;
import wheel.components.Component;
import wheel.components.DateInput;
import wheel.components.ElExpression;
import wheel.components.FileInput;
import wheel.components.Form;
import wheel.components.FormElement;
import wheel.components.Hidden;
import wheel.components.ISelectModel;
import wheel.components.Image;
import wheel.components.Label;
import wheel.components.Link;
import wheel.components.NumberInput;
import wheel.components.Radio;
import wheel.components.RadioGroup;
import wheel.components.RenderableComponent;
import wheel.components.Select;
import wheel.components.StandaloneComponent;
import wheel.components.Submit;
import wheel.components.Table;
import wheel.components.TableBlock;
import wheel.components.TableRow;
import wheel.components.Text;
import wheel.components.TextArea;
import wheel.components.TextInput;
import wheel.components.XmlEntityRef;
import wheel.util.DynamicSelectModel;
import wheel.util.InitialFieldValue;
import wheel.util.StringSelectModel;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Component_ESTest extends Component_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      String[] stringArray0 = new String[8];
      stringArray0[2] = "UiT&v\",|.}8/~|";
      Component component0 = errorPage0.attributes(stringArray0);
      assertEquals("wheel_ErrorPage", component0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      List<CharSequence> list0 = errorPage0._getRenderHints();
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertNotNull(list0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Table table0 = new Table(errorPage0, "");
      TableBlock tableBlock0 = table0.tfoot();
      TableRow tableRow0 = tableBlock0.tr();
      Component component0 = tableRow0.td();
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("Block_1", component0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      TableBlock tableBlock0 = new TableBlock(errorPage0);
      TableRow tableRow0 = tableBlock0.tr();
      Block block0 = tableRow0.id("$;mO ");
      block0.nbsp();
      assertTrue(tableBlock0._isGeneratedId());
      assertFalse(tableRow0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Checkbox checkbox0 = new Checkbox(errorPage0, "", "");
      TableRow tableRow0 = new TableRow(checkbox0);
      tableRow0.label();
      tableRow0.getComponents();
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(checkbox0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Table table0 = new Table(errorPage0, "");
      table0.eval(table0);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("Table_1", table0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Object object0 = new Object();
      Label label0 = new Label(errorPage0, object0);
      Table table0 = new Table(label0, "Fh?Af3&Aq%XXf");
      TableBlock tableBlock0 = table0.colgroup();
      tableBlock0.create();
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(tableBlock0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.actionBinding("Fh?Af3&Aq%XXf");
      assertEquals("wheel_ErrorPage", component0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      TableBlock tableBlock0 = new TableBlock(errorPage0);
      Checkbox checkbox0 = new Checkbox(tableBlock0, "null", "TextInput_1");
      checkbox0._getXhtmlAttributes();
      assertTrue(tableBlock0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Link link0 = new Link(errorPage0, errorPage0);
      Submit submit0 = new Submit(link0, "9kG$TEqu<-(vH9", ")Bh() X C'.");
      Checkbox checkbox0 = new Checkbox(submit0, "{", "{");
      StandaloneComponent standaloneComponent0 = checkbox0._getTopLevelComponent(false);
      assertTrue(link0._isGeneratedId());
      assertEquals("wheel_ErrorPage", standaloneComponent0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      // Undeclared exception!
      try { 
        errorPage0.find((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Could not find component with id null on the page.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Hidden hidden0 = new Hidden((Component) null, "*((]nKL}B{~(qy.s-;7", "E,/AX1S^");
      hidden0._setParent((Component) null);
      assertTrue(hidden0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Radio radio0 = new Radio((Component) null, "B\"l-8?xII*.|J", "B\"l-8?xII*.|J");
      radio0._setComponentId("");
      assertEquals("B\"l-8?xII*.|J", radio0.getFormElementName());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("VW'bL'/' dL/S");
      // Undeclared exception!
      try { 
        xmlEntityRef0.wrapSelf();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No top level component found.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Checkbox checkbox0 = new Checkbox((Component) null, "W", "W");
      // Undeclared exception!
      try { 
        checkbox0.var();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Form form0 = new Form("Block_1");
      // Undeclared exception!
      try { 
        form0.textInput("Block_1");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      DateInput dateInput0 = new DateInput((Component) null, (String) null, ", {", (CharSequence) null);
      // Undeclared exception!
      try { 
        dateInput0.sub((Object) "Expression ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Submit submit0 = new Submit((Component) null, "[x-BlO>,Q#I/my46", "[x-BlO>,Q#I/my46");
      StringSelectModel stringSelectModel0 = new StringSelectModel();
      ElExpression elExpression0 = new ElExpression("[x-BlO>,Q#I/my46");
      RadioGroup radioGroup0 = new RadioGroup(submit0, "[x-BlO>,Q#I/my46", "3]", stringSelectModel0, elExpression0);
      Checkbox checkbox0 = new Checkbox(radioGroup0, "address", "[x-BlO>,Q#I/my46");
      Radio radio0 = new Radio(checkbox0, "address", "address");
      // Undeclared exception!
      try { 
        radio0.sub();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Form form0 = new Form("java.lang.String@0000000017");
      // Undeclared exception!
      try { 
        form0.strike();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Form form0 = new Form("java.lang.String@0000000017");
      // Undeclared exception!
      try { 
        form0.span();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Form form0 = new Form("");
      ElExpression elExpression0 = new ElExpression("AK[{=|D[A'?rS;}i");
      // Undeclared exception!
      try { 
        form0.small((Object) elExpression0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      NumberInput numberInput0 = new NumberInput((Component) null, "Block_1", "_");
      // Undeclared exception!
      try { 
        numberInput0.samp((Object) "Block_1");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Radio radio0 = new Radio((Component) null, "B\"l-8?xII*.|J", "B\"l-8?xII*.|J");
      // Undeclared exception!
      try { 
        radio0.param("B\"l-8?xII*.|J", "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Hidden hidden0 = new Hidden(errorPage0, "U'Q,)(4]\"Wc'3lRK", "U'Q,)(4]\"Wc'3lRK");
      // Undeclared exception!
      try { 
        hidden0.ol();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Form form0 = new Form("Block_1");
      // Undeclared exception!
      try { 
        form0.noscript();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Form form0 = new Form("jZ*J }GW~Pd");
      // Undeclared exception!
      try { 
        form0.noframes();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Form form0 = new Form("");
      // Undeclared exception!
      try { 
        form0.link();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Form form0 = new Form("java.lang.String@0000000017");
      Checkbox checkbox0 = new Checkbox(form0, "onsubmit", "onsubmit");
      // Undeclared exception!
      try { 
        form0.li((Object) checkbox0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Form form0 = new Form("<?xml encoding name expected to start with [A-Za-z] not ");
      // Undeclared exception!
      try { 
        form0.img("D+w^(&u", "D+w^(&u");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Link link0 = new Link(errorPage0, errorPage0);
      // Undeclared exception!
      try { 
        link0.imageSubmit("Zn<#", "Zn<#");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("Mp");
      // Undeclared exception!
      try { 
        xmlEntityRef0.i((Object) "Mp");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("M");
      // Undeclared exception!
      try { 
        xmlEntityRef0.i();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Form form0 = new Form((String) null);
      // Undeclared exception!
      try { 
        form0.hr();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Form form0 = new Form("Xtn>k");
      // Undeclared exception!
      try { 
        form0.h5();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Form form0 = new Form("2(U!k]W0K_,@/YQ");
      // Undeclared exception!
      try { 
        form0.h4((Object) "2(U!k]W0K_,@/YQ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Checkbox checkbox0 = new Checkbox(errorPage0, "Block_1", "");
      // Undeclared exception!
      try { 
        checkbox0.h4();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Form form0 = new Form("Could not find component with id ");
      // Undeclared exception!
      try { 
        form0.h3();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("hnmr:u0dXNH,L5/");
      // Undeclared exception!
      try { 
        xmlEntityRef0.h2((Object) "hnmr:u0dXNH,L5/");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Checkbox checkbox0 = new Checkbox(errorPage0, "", "");
      TableRow tableRow0 = new TableRow(checkbox0);
      TextArea textArea0 = new TextArea(tableRow0, "", "");
      ActionExpression actionExpression0 = new ActionExpression("");
      // Undeclared exception!
      try { 
        textArea0.form("", actionExpression0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A Form must always have a given componentId.
         //
         verifyException("wheel.components.Form", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      TextInput textInput0 = new TextInput((Component) null, "RuntimeInvisibleAnnotations", "body");
      // Undeclared exception!
      try { 
        textInput0.fieldset();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Form form0 = new Form("Could not find component with id '");
      // Undeclared exception!
      try { 
        form0.em();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Form form0 = new Form("Block_1");
      TextArea textArea0 = new TextArea(form0, "Block_1", "Block_1");
      // Undeclared exception!
      try { 
        textArea0.em();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Table table0 = new Table(errorPage0, "TK");
      FileInput fileInput0 = new FileInput(table0, "java.lang.String@0000000007", "No top level component found.");
      Checkbox checkbox0 = new Checkbox(fileInput0, "TK", ";81D7{O%j3F");
      // Undeclared exception!
      try { 
        checkbox0.dfn();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("");
      // Undeclared exception!
      try { 
        xmlEntityRef0.del();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Form form0 = new Form(") in: ");
      Checkbox checkbox0 = new Checkbox(form0, ") in: ", "java.lang.String@0000000017");
      // Undeclared exception!
      try { 
        checkbox0.dd();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Form form0 = new Form("(56eOY#)Q~=krwpVxX");
      StringSelectModel stringSelectModel0 = new StringSelectModel();
      Select select0 = new Select(form0, "(56eOY#)Q~=krwpVxX", "w>#@C5CJj^%K", stringSelectModel0, "(56eOY#)Q~=krwpVxX");
      TextInput textInput0 = new TextInput(select0, "wmc%", "wmc%");
      // Undeclared exception!
      try { 
        textInput0.big();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Checkbox checkbox0 = new Checkbox((Component) null, "`P8B ViD?SA$", "/#\"YCu8^yylyT");
      // Undeclared exception!
      try { 
        checkbox0.add(checkbox0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("");
      // Undeclared exception!
      try { 
        xmlEntityRef0.acronym();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Form form0 = new Form("6U@lR0z+");
      // Undeclared exception!
      try { 
        form0.abbr();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Form form0 = new Form("");
      Radio radio0 = new Radio(form0, "bR9j|Pv`84>LO*.", "bR9j|Pv`84>LO*.");
      // Undeclared exception!
      try { 
        radio0.a();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Checkbox checkbox0 = new Checkbox(errorPage0, "kHGwA/|@}06b5", "kHGwA/|@}06b5");
      Hidden hidden0 = new Hidden(checkbox0, "kHGwA/|@}06b5", "Zk3p6@B");
      ActionExpression actionExpression0 = new ActionExpression("object");
      Form form0 = new Form(errorPage0, "][1`gnLy?lMb", actionExpression0);
      form0.addFormElement(hidden0);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      FileInput fileInput0 = new FileInput(errorPage0, (String) null, "Gl=H.hQC`A");
      Table table0 = new Table(fileInput0, "No top level component found.");
      TableBlock tableBlock0 = table0.thead();
      DynamicSelectModel dynamicSelectModel0 = new DynamicSelectModel();
      dynamicSelectModel0.enumeration(";c&>cX@VV:");
      ElExpression elExpression0 = new ElExpression((String) null);
      RadioGroup radioGroup0 = new RadioGroup(tableBlock0, "No top level component found.", "ljM0cq`g", dynamicSelectModel0, elExpression0);
      // Undeclared exception!
      try { 
        radioGroup0.submit(")<8");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      errorPage0._setGeneratedId(false);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertFalse(errorPage0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      String string0 = errorPage0.getComponentName();
      assertEquals("ErrorPage", string0);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      errorPage0.getParent();
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      NumberInput numberInput0 = new NumberInput((Component) null, "pre", "java.lang.String@0000000017");
      // Undeclared exception!
      try { 
        numberInput0._applyFormat((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      ActionExpression actionExpression0 = new ActionExpression("null");
      Form form0 = new Form(errorPage0, "null", actionExpression0);
      form0.actionBinding(actionExpression0);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Checkbox checkbox0 = new Checkbox((Component) null, "reset", "reset");
      // Undeclared exception!
      try { 
        checkbox0.end();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Could not end compoennt, already at root.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Table table0 = new Table(errorPage0, "TK");
      FileInput fileInput0 = new FileInput(table0, "java.lang.String@0000000007", "No top level component found.");
      Checkbox checkbox0 = new Checkbox(fileInput0, "TK", ";81D7{O%j3F");
      checkbox0.end();
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Submit submit0 = new Submit(errorPage0, "java.nio.StringCharBuffer@0000000007", "(z:hI=#");
      Checkbox checkbox0 = new Checkbox(submit0, "(z:hI=#", "java.nio.StringCharBuffer@0000000007");
      // Undeclared exception!
      try { 
        checkbox0.end("<div id=\"(z:hI=#\"/>");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No corresponding component found for end expression '<div id=\"(z:hI=#\"/>'.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Form form0 = new Form("java.lang.StringBuilder@0000000007");
      Submit submit0 = new Submit(form0, "{X*<Wc3x>y", "{X*<Wc3x>y");
      Component component0 = submit0.end("java.lang.StringBuilder@0000000007");
      assertNull(component0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      TextInput textInput0 = new TextInput(errorPage0, "2)mav^oC0G4xxJ,tC", (String) null);
      Table table0 = new Table(textInput0, "2)mav^oC0G4xxJ,tC");
      TableBlock tableBlock0 = table0.tbody();
      Checkbox checkbox0 = new Checkbox(tableBlock0, (String) null, (String) null);
      // Undeclared exception!
      try { 
        checkbox0.end("dl");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No corresponding component found for end expression 'dl'.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Form form0 = new Form("{wH2&(");
      FileInput fileInput0 = new FileInput(form0, "tt", "WinbXE|P(");
      // Undeclared exception!
      try { 
        form0.dateFormat("{wH2&(", fileInput0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unsupported type given for dateFormat. Supported types are: Date, Calendar, Long/long .
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("|+]WwejBQ)X^|Z{");
      ElExpression elExpression0 = new ElExpression("!v&ej/f");
      List<Component> list0 = xmlEntityRef0.findAll(elExpression0);
      assertNotNull(list0);
      assertEquals("|+]WwejBQ)X^|Z{", xmlEntityRef0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.address((Object) errorPage0);
      component0.h3();
      // Undeclared exception!
      try { 
        errorPage0.find("TextInput_1");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Could not find component with id TextInput_1 on the page.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      // Undeclared exception!
      try { 
        errorPage0.get("No top level component found.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Could not find component with id 'No top level component found.'.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      // Undeclared exception!
      try { 
        errorPage0.up(74);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Form form0 = new Form("h3");
      Component component0 = form0.up((-1138));
      assertEquals("h3", component0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Checkbox checkbox0 = new Checkbox(errorPage0, "", "");
      TableRow tableRow0 = new TableRow(checkbox0);
      TextArea textArea0 = new TextArea(tableRow0, "", "");
      boolean boolean0 = tableRow0.equals(textArea0);
      assertFalse(boolean0);
      assertTrue(textArea0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.fieldset();
      boolean boolean0 = component0.equals((Object) null);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("Block_1", component0.getComponentId());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.span((Object) null);
      assertTrue(component0._isGeneratedId());
      
      errorPage0._clear();
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      ActionExpression actionExpression0 = new ActionExpression("kf1{/ssBavzKt*");
      Form form0 = new Form(errorPage0, "Block_1", actionExpression0);
      form0.attribute("The list of prefixes must not be null", "tion");
      form0._clear();
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Form form0 = new Form("<&i");
      Component component0 = form0.clasS("<&i");
      component0._clear();
      assertEquals("<&i", component0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Table table0 = new Table(errorPage0, "<iv;J^R");
      Component component0 = table0.dt();
      assertEquals("Block_1", component0.getComponentId());
      
      table0._clear();
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = ((Component)errorPage0).addInternalRenderHint("null");
      assertEquals("wheel_ErrorPage", component0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Submit submit0 = new Submit(errorPage0, "http://www.w3.org/2001/XMLSchema-instance", "http://www.w3.org/2001/XMLSchema-instance");
      // Undeclared exception!
      try { 
        errorPage0.addFirst(submit0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot add a form element. No surrounding form found.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      // Undeclared exception!
      try { 
        errorPage0._getTopLevelComponent(false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No top level component found.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      DateInput dateInput0 = new DateInput((Component) null, (String) null, ", {", (CharSequence) null);
      Form form0 = dateInput0._getVisibleForm(true);
      assertNull(form0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Block block0 = new Block(errorPage0);
      block0._getVisibleForm(false);
      assertTrue(block0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      errorPage0.placeholder("");
      Table table0 = new Table(errorPage0, "");
      assertEquals("Table_1", table0.getComponentId());
      
      table0.id("zbD%PEvb{");
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Select select0 = new Select(errorPage0, "^%.]4YPDfwu", "^%.]4YPDfwu", "^%.]4YPDfwu", (ISelectModel) null, true);
      Component component0 = errorPage0.sup((Object) select0);
      assertTrue(component0._isGeneratedId());
      
      Hidden hidden0 = new Hidden(errorPage0, "radio", "^%.]4YPDfwu");
      Table table0 = new Table(hidden0, "radio");
      table0.id("^%.]4YPDfwu");
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      ActionExpression actionExpression0 = new ActionExpression("null");
      Form form0 = new Form(errorPage0, "null", actionExpression0);
      // Undeclared exception!
      try { 
        form0.id("h1");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      TableRow tableRow0 = new TableRow(errorPage0);
      Checkbox checkbox0 = new Checkbox(tableRow0, " o.,9yVjgAJu~[", (String) null);
      // Undeclared exception!
      try { 
        checkbox0.id((String) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      TableBlock tableBlock0 = new TableBlock(errorPage0, (String) null);
      Any any0 = tableBlock0.col();
      any0.toString();
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("Any_1", any0.getComponentId());
      assertEquals("TableBlock_1", tableBlock0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Block block0 = new Block(errorPage0, "LBMl,4>7~ZU");
      ActionExpression actionExpression0 = new ActionExpression("t%u.xB]!kU%:c3+pEu");
      Component component0 = block0.form("java.lang.String@0000000017", actionExpression0);
      List<RenderableComponent> list0 = component0._getRenderableChildren();
      assertNotNull(list0);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("[C");
      List<RenderableComponent> list0 = xmlEntityRef0._getRenderableChildren();
      assertEquals("[C", xmlEntityRef0.getComponentId());
      assertNotNull(list0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.span((Object) null);
      component0._getAction();
      assertTrue(component0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      TableBlock tableBlock0 = new TableBlock(errorPage0);
      DateInput dateInput0 = new DateInput(tableBlock0, "null", "9C<7HFBY/C<%^^R,<", "9C<7HFBY/C<%^^R,<");
      String[] stringArray0 = new String[8];
      dateInput0.attributes(stringArray0);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(tableBlock0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Form form0 = new Form("Block_1");
      String[] stringArray0 = new String[0];
      TextArea textArea0 = new TextArea(form0, "Block_1", "Block_1");
      textArea0.attributes(stringArray0);
      assertEquals("Block_1", form0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      TextInput textInput0 = new TextInput(errorPage0, "unterminated block comment", "unterminated block comment");
      DateInput dateInput0 = new DateInput(textInput0, "tF)J", "unterminated block comment", "tF)J");
      StringSelectModel stringSelectModel0 = new StringSelectModel();
      ElExpression elExpression0 = new ElExpression("r1kO-_)44ZmsP3P");
      CheckboxGroup checkboxGroup0 = new CheckboxGroup(dateInput0, (String) null, (String) null, stringSelectModel0, elExpression0);
      TableBlock tableBlock0 = new TableBlock(checkboxGroup0);
      Any any0 = tableBlock0.col();
      String[] stringArray0 = new String[1];
      // Undeclared exception!
      try { 
        any0.attributes(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Attributes must be given in name, value pairs.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Table table0 = new Table(errorPage0, "value");
      Table table1 = table0.renderHint((CharSequence) null);
      table1.renderHint("value");
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Table table0 = new Table(errorPage0, "");
      Block block0 = new Block(table0);
      block0.code();
      assertEquals("Table_1", table0.getComponentId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Hidden hidden0 = new Hidden((Component) null, "*((]nKL}B{~(qy.s-;7", "E,/AX1S^");
      // Undeclared exception!
      try { 
        hidden0.em((Object) "*((]nKL}B{~(qy.s-;7");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Submit submit0 = new Submit((Component) null, "gi", "gi");
      // Undeclared exception!
      try { 
        submit0.h1();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Block block0 = new Block(errorPage0, "LBMl,4>7~ZU");
      TableRow tableRow0 = new TableRow(block0);
      Component component0 = block0.cite((Object) tableRow0);
      assertTrue(component0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("character reference (with decimal value) may not contain ");
      // Undeclared exception!
      try { 
        xmlEntityRef0.del((Object) "character reference (with decimal value) may not contain ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Form form0 = new Form("");
      // Undeclared exception!
      try { 
        form0.h5((Object) "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Block block0 = new Block(errorPage0, (String) null);
      block0.dfn();
      assertEquals("Block_1", block0.getComponentId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Hidden hidden0 = new Hidden(errorPage0, "X,F+F/uBR", "");
      // Undeclared exception!
      try { 
        hidden0.sup();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Link link0 = new Link(errorPage0, errorPage0);
      Submit submit0 = new Submit(link0, "9kG$TEqu<-(vH9", ")Bh() X C'.");
      Checkbox checkbox0 = new Checkbox(submit0, "{", "{");
      ActionExpression actionExpression0 = new ActionExpression(")Bh() X C'.");
      Form form0 = new Form(errorPage0, ")Bh() X C'.", actionExpression0);
      Text text0 = new Text(form0, checkbox0);
      Component component0 = errorPage0.big((Object) text0);
      Component component1 = component0.noscript();
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(component1._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Select select0 = new Select((Component) null, "vA u", ")", (ISelectModel) null, ")");
      // Undeclared exception!
      try { 
        select0.q();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.span();
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("Block_1", component0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("iF^UV!");
      // Undeclared exception!
      try { 
        xmlEntityRef0.pre((Object) "iF^UV!");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      TextInput textInput0 = new TextInput((Component) null, "uqPIYE4K NBd", "uqPIYE4K NBd");
      // Undeclared exception!
      try { 
        textInput0.td();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Td component can be added only to a TableRow.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      DynamicSelectModel dynamicSelectModel0 = new DynamicSelectModel();
      // Undeclared exception!
      try { 
        errorPage0.select("iframe", dynamicSelectModel0, "iframe");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Form form0 = new Form("mvel.optimizer");
      TextArea textArea0 = new TextArea(form0, "mvel.optimizer", "mvel.optimizer");
      Hidden hidden0 = new Hidden(textArea0, (String) null, "dt");
      // Undeclared exception!
      try { 
        hidden0.body();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Form form0 = new Form("");
      // Undeclared exception!
      try { 
        form0.p((Object) "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Object object0 = new Object();
      Label label0 = new Label(errorPage0, object0);
      Table table0 = new Table(label0, "@FhmFB_O?Z'R|");
      TableBlock tableBlock0 = table0.colgroup();
      Component component0 = tableBlock0.a((Object) "@FhmFB_O?Z'R|");
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(component0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.label((Object) "");
      assertTrue(component0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.span((Object) null);
      // Undeclared exception!
      try { 
        component0.caption();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Thead component can be added only to a Table.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.small();
      ActionExpression actionExpression0 = new ActionExpression("#LirWtJE/g&*");
      Component component1 = component0.param(actionExpression0, actionExpression0);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("Any_1", component1.getComponentId());
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Form form0 = new Form("The filter must not be null");
      // Undeclared exception!
      try { 
        form0.reset("The filter must not be null");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.ol();
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("Block_1", component0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Form form0 = new Form((String) null);
      // Undeclared exception!
      try { 
        form0.strong((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("");
      // Undeclared exception!
      try { 
        xmlEntityRef0.thead();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Thead component can be added only to a Table.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.fieldset();
      component0._setParent(component0);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("Block_1", component0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Hidden hidden0 = new Hidden((Component) null, "INVOKEINTERFACE: ", "INVOKEINTERFACE: ");
      TextArea textArea0 = new TextArea(hidden0, "Block_1", "Block_1");
      List<ActionExpression> list0 = textArea0._getActions();
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.style();
      assertTrue(component0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Table table0 = new Table(errorPage0, "kdb");
      TableRow tableRow0 = table0.tr();
      // Undeclared exception!
      try { 
        tableRow0.textarea("kdb");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Hidden hidden0 = new Hidden((Component) null, "Y}", "%oaI/##qzd/~}j");
      TextInput textInput0 = new TextInput(hidden0, "%oaI/##qzd/~}j", "Tq0Y{#^)(Ue:X:|;w(W");
      // Undeclared exception!
      try { 
        hidden0.u((Object) textInput0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Object object0 = new Object();
      Label label0 = new Label(errorPage0, object0);
      Table table0 = new Table(label0, "Fh?Af3&Aq%XXf");
      Component component0 = table0.br();
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("Any_1", component0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Hidden hidden0 = new Hidden((Component) null, "<?xml encoding value expected to be in ([A-Za-z0-9._] | '-') not ", "&");
      // Undeclared exception!
      try { 
        hidden0.table();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Object object0 = new Object();
      Label label0 = new Label(errorPage0, object0);
      Table table0 = new Table(label0, "@FhmFB_O?Z'R|");
      TableBlock tableBlock0 = table0.colgroup();
      // Undeclared exception!
      try { 
        tableBlock0.textInput("@FhmFB_O?Z'R|");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Form form0 = new Form((String) null);
      // Undeclared exception!
      try { 
        form0.th();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Th component can be added only to a TableRow.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      NumberInput numberInput0 = new NumberInput(errorPage0, "[] from ", "");
      numberInput0.action("XMLDecl must have xml name in lowercase");
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(numberInput0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("|+]WwejBQ)X^|Z{");
      ElExpression elExpression0 = new ElExpression("!v&ej/f");
      // Undeclared exception!
      try { 
        xmlEntityRef0.rawText(elExpression0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      DynamicSelectModel dynamicSelectModel0 = new DynamicSelectModel();
      ElExpression elExpression0 = new ElExpression("Component with id ");
      // Undeclared exception!
      try { 
        errorPage0.radioGroup("1Zg)ho PB)43%(R", dynamicSelectModel0, elExpression0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Table table0 = new Table(errorPage0, "java.lang.String@0000000007");
      TableBlock tableBlock0 = table0.thead();
      Component component0 = tableBlock0.wrapSelf();
      assertTrue(component0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Checkbox checkbox0 = new Checkbox(errorPage0, ",jw*l]nh?X", "/E/RhNz !t\"7&F");
      Text text0 = new Text(errorPage0, checkbox0);
      ActionExpression actionExpression0 = new ActionExpression("wheel.components.Component");
      Form form0 = new Form(text0, "body", actionExpression0);
      Table table0 = new Table(form0, "v=m?_7@!5QKe)S");
      TableRow tableRow0 = table0.tr();
      tableRow0.submit("v=m?_7@!5QKe)S");
      assertFalse(actionExpression0.isSubmissible());
      assertTrue(tableRow0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.link();
      component0.afterAdd();
      assertTrue(component0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Checkbox checkbox0 = new Checkbox(errorPage0, "Block_1", "`c71Gb<qoK*Ow6Rg");
      TextArea textArea0 = new TextArea(checkbox0, "ACC_PRIVATE p", "`c71Gb<qoK*Ow6Rg");
      // Undeclared exception!
      try { 
        textArea0.cite();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      TableBlock tableBlock0 = new TableBlock(errorPage0);
      Text text0 = new Text(errorPage0, tableBlock0);
      Table table0 = new Table(text0, "W6SS?$|axg/B&");
      Component component0 = table0.big();
      assertTrue(component0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Checkbox checkbox0 = new Checkbox((Component) null, "Component ", "frameset");
      // Undeclared exception!
      try { 
        checkbox0.isInt();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No top level component found.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Block block0 = new Block(errorPage0, (String) null);
      Table table0 = new Table(block0, "UiT&v\",|.}8/~|");
      table0.strike();
      assertEquals("Block_1", block0.getComponentId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      TextArea textArea0 = new TextArea((Component) null, "h4", ";G_,[TQukw]EOZE<8y");
      // Undeclared exception!
      try { 
        textArea0.h1((Object) ";G_,[TQukw]EOZE<8y");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.small();
      Component component1 = component0.noframes();
      assertTrue(component1._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("Block_3", component1.getComponentId());
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      TableRow tableRow0 = new TableRow(errorPage0);
      ElExpression elExpression0 = new ElExpression(":");
      Image image0 = new Image(tableRow0, elExpression0, ":");
      Table table0 = new Table(image0, (String) null);
      table0.i();
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("Table_1", table0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Table table0 = new Table(errorPage0, "");
      FileInput fileInput0 = new FileInput(table0, "tXX9t", "8Vo9RQ$");
      table0.dd((Object) fileInput0);
      assertEquals("Table_1", table0.getComponentId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Form form0 = new Form("3.5pl#^EXp");
      // Undeclared exception!
      try { 
        form0.head();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Checkbox checkbox0 = new Checkbox((Component) null, "frameset", "frameset");
      // Undeclared exception!
      try { 
        checkbox0.tt();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("java.lang.String@0000000017");
      // Undeclared exception!
      try { 
        xmlEntityRef0.u();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Form form0 = new Form("&Z^,EbSKd|+F+");
      // Undeclared exception!
      try { 
        form0.script();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef(".-G fCLn{B$^");
      // Undeclared exception!
      try { 
        xmlEntityRef0.hidden("null");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      InitialFieldValue initialFieldValue0 = new InitialFieldValue("[&y,!QitfH^w\"4");
      Component component0 = errorPage0.small((Object) initialFieldValue0);
      Component component1 = component0.iframe();
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("Any_1", component1.getComponentId());
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("blockquote");
      TextArea textArea0 = new TextArea(xmlEntityRef0, "\"/rVAX6N", "Col component can be added only to a TableBlock.");
      // Undeclared exception!
      try { 
        textArea0.h2();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.sub((Object) null);
      assertTrue(component0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      TextArea textArea0 = new TextArea((Component) null, "name", "x>PX+Y");
      Checkbox checkbox0 = new Checkbox(textArea0, "x>PX+Y", "x>PX+Y");
      // Undeclared exception!
      try { 
        checkbox0.htmlText((Object) null);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      TableBlock tableBlock0 = new TableBlock(errorPage0);
      Component component0 = tableBlock0.li((Object) "W6SS?$|axg/B&");
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(component0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.h5();
      assertTrue(component0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Form form0 = new Form("null");
      // Undeclared exception!
      try { 
        form0.bdo("null");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      TextArea textArea0 = new TextArea((Component) null, "sn}+&V+", "sn}+&V+");
      // Undeclared exception!
      try { 
        textArea0.h3((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.code((Object) null);
      assertTrue(component0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("h4");
      // Undeclared exception!
      try { 
        xmlEntityRef0.numberInput("h4", (CharSequence) "h4");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Form form0 = new Form(",R><sT^Qvjx ^o");
      InitialFieldValue initialFieldValue0 = new InitialFieldValue("FYXz_x bZ");
      // Undeclared exception!
      try { 
        form0.text(initialFieldValue0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Checkbox checkbox0 = new Checkbox(errorPage0, "", "");
      TableRow tableRow0 = new TableRow(checkbox0);
      tableRow0.h4((Object) "");
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(checkbox0._isGeneratedId());
      assertEquals("Checkbox_1", checkbox0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.abbr();
      assertTrue(component0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Object object0 = new Object();
      Link link0 = new Link(errorPage0, object0);
      Label label0 = new Label(link0, object0);
      TableBlock tableBlock0 = new TableBlock(label0, "2)mav^oC0G4xxJ,tC");
      Select select0 = new Select(tableBlock0, "P)E", "P)E", "org.mvel.OptimizationFailure", (ISelectModel) null, false);
      Component component0 = select0.h4();
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(component0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      TextArea textArea0 = new TextArea((Component) null, "mEZl\u0001)(5qkYvd(KlS", "~A}1$tY");
      Short short0 = new Short((short) (-110));
      // Undeclared exception!
      try { 
        textArea0.span((Object) short0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      TableBlock tableBlock0 = new TableBlock(errorPage0);
      Component component0 = tableBlock0.b();
      assertTrue(component0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      DynamicSelectModel dynamicSelectModel0 = new DynamicSelectModel();
      NumberInput numberInput0 = new NumberInput((Component) null, "EEpp1-a.", "EEpp1-a.");
      // Undeclared exception!
      try { 
        numberInput0.b((Object) dynamicSelectModel0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Form form0 = new Form("");
      // Undeclared exception!
      try { 
        form0.buttonInput("ny_`ew>iU(pf3OMag");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.entity("LBMl,4>7~ZU");
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("LBMl,4>7~ZU", component0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      FileInput fileInput0 = new FileInput((Component) null, "JI3^9q\"i3", "Block_1");
      // Undeclared exception!
      try { 
        fileInput0.passwordInput("Block_1");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Table table0 = new Table(errorPage0, "dt");
      TableBlock tableBlock0 = table0.tfoot();
      // Undeclared exception!
      try { 
        tableBlock0.encode("dt");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Object object0 = new Object();
      Link link0 = new Link(errorPage0, object0);
      Label label0 = new Label(link0, object0);
      Component component0 = label0.var((Object) null);
      assertTrue(component0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Checkbox checkbox0 = new Checkbox((Component) null, "Component container: ", "Component container: ");
      // Undeclared exception!
      try { 
        checkbox0.pre();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Form form0 = new Form(":ah");
      // Undeclared exception!
      try { 
        form0.ins();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Radio radio0 = new Radio((Component) null, "Ej'uJgX^d>3FBJJ0", "Ej'uJgX^d>3FBJJ0");
      TextArea textArea0 = new TextArea(radio0, "null", "f1Nl]");
      DateInput dateInput0 = new DateInput(textArea0, "null", "lang", "lang");
      Checkbox checkbox0 = new Checkbox(dateInput0, "lang", "NmNkwS;a");
      // Undeclared exception!
      try { 
        checkbox0.object();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Object object0 = new Object();
      Label label0 = new Label(errorPage0, object0);
      Table table0 = new Table(label0, "Fh?Af3&Aq%XXf");
      TableBlock tableBlock0 = table0.colgroup();
      // Undeclared exception!
      try { 
        tableBlock0.colgroup();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Colgroup component can be added only to a Table.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      InitialFieldValue initialFieldValue0 = new InitialFieldValue("r+G:AqwPrW}FjNa.aP`");
      Component component0 = errorPage0.tt((Object) initialFieldValue0);
      Component component1 = component0.hr();
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("Any_1", component1.getComponentId());
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Table table0 = new Table(errorPage0, "");
      TableRow tableRow0 = table0.tr();
      // Undeclared exception!
      try { 
        tableRow0.radio("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Checkbox checkbox0 = new Checkbox(errorPage0, "kHGwA/|@}06b5", "kHGwA/|@}06b5");
      ActionExpression actionExpression0 = new ActionExpression("object");
      Form form0 = new Form(errorPage0, "][1`gnLy?lMb", actionExpression0);
      // Undeclared exception!
      try { 
        form0.remove((Component) checkbox0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.ul();
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("Block_1", component0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      TextArea textArea0 = new TextArea((Component) null, "src", "src");
      Checkbox checkbox0 = new Checkbox(textArea0, "src", "src");
      // Undeclared exception!
      try { 
        checkbox0.abbr((Object) null);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Table table0 = new Table(errorPage0, "");
      table0.div();
      assertEquals("Table_1", table0.getComponentId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("(p+:kY|4+t");
      // Undeclared exception!
      try { 
        xmlEntityRef0.col();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Col component can be added only to a TableBlock.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Table table0 = new Table(errorPage0, "kdb");
      TableRow tableRow0 = table0.tr();
      tableRow0.date();
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(tableRow0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.em();
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(component0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Object object0 = new Object();
      Label label0 = new Label(errorPage0, object0);
      Component component0 = label0.nbsp();
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(component0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      ErrorPage errorPage1 = new ErrorPage();
      Component component0 = errorPage0.sub();
      // Undeclared exception!
      try { 
        component0.addFirst(errorPage1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.StandaloneComponent", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.fieldset();
      Component component1 = component0.acronym();
      boolean boolean0 = component0.equals(component1);
      assertFalse(boolean0);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("Block_1", component0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      TableBlock tableBlock0 = new TableBlock(errorPage0);
      Link link0 = new Link(tableBlock0, tableBlock0);
      Checkbox checkbox0 = new Checkbox(link0, "null", "null");
      // Undeclared exception!
      try { 
        checkbox0.base("null");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      Form form0 = new Form("strike");
      // Undeclared exception!
      try { 
        form0.q((Object) "strike");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.kbd((Object) null);
      Component component1 = component0.a();
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(component1._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      TableBlock tableBlock0 = new TableBlock(errorPage0);
      Component component0 = tableBlock0.del();
      assertTrue(component0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      TableBlock tableBlock0 = new TableBlock(errorPage0);
      Text text0 = new Text(errorPage0, tableBlock0);
      Table table0 = new Table(text0, "W6SS?$|axg/B&");
      Component component0 = table0.s((Object) null);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(component0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      TableBlock tableBlock0 = new TableBlock(errorPage0);
      Text text0 = new Text(errorPage0, tableBlock0);
      // Undeclared exception!
      try { 
        text0.address();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      Form form0 = new Form("<&i");
      // Undeclared exception!
      try { 
        form0.imageSubmit("org.apache.commons.io.filefilter.DelegateFileFilter", "<&i");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      Submit submit0 = new Submit((Component) null, "Tried to access a submit target, but no form was submitted.", "Tried to access a submit target, but no form was submitted.");
      // Undeclared exception!
      try { 
        submit0.tr();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Tr component can be added only to a TableBlock.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      ActionExpression actionExpression0 = new ActionExpression("null");
      Form form0 = new Form(errorPage0, "null", actionExpression0);
      form0.form("null");
      Component component0 = form0.a();
      assertFalse(form0._isBuilt());
      assertTrue(component0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Table table0 = new Table(errorPage0, "value");
      TableBlock tableBlock0 = table0.tbody();
      TableRow tableRow0 = tableBlock0.tr();
      Component component0 = table0.legend((Object) tableRow0);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(component0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("$");
      // Undeclared exception!
      try { 
        xmlEntityRef0.dl();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      ElExpression elExpression0 = new ElExpression("");
      Component component0 = errorPage0.samp((Object) elExpression0);
      Component component1 = component0.wBlock("r;l|DmBqxv");
      assertEquals("Block_1", component1.getComponentId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Table table0 = new Table(errorPage0, "kdb");
      Component component0 = table0.img("kdb", (String) null);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(component0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      // Undeclared exception!
      try { 
        errorPage0.numberInput("nbsp");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      DynamicSelectModel dynamicSelectModel0 = errorPage0.selectModel();
      Table table0 = new Table(errorPage0, "");
      ElExpression elExpression0 = new ElExpression("tXX9t");
      // Undeclared exception!
      try { 
        table0.checkboxGroup("tXX9t", dynamicSelectModel0, elExpression0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      Checkbox checkbox0 = new Checkbox((Component) null, "hSw$SQ 'moO*.E<mGW", "Hp{");
      ElExpression elExpression0 = new ElExpression("hSw$SQ 'moO*.E<mGW");
      // Undeclared exception!
      try { 
        checkbox0.fileInput("hSw$SQ 'moO*.E<mGW", elExpression0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      TableRow tableRow0 = new TableRow(errorPage0);
      ElExpression elExpression0 = new ElExpression(":");
      Image image0 = new Image(tableRow0, elExpression0, ":");
      Table table0 = new Table(image0, (String) null);
      TableBlock tableBlock0 = table0.tfoot();
      tableBlock0.i((Object) image0);
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("Table_1", table0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Link link0 = new Link(errorPage0, errorPage0);
      Submit submit0 = new Submit(link0, "h1", "null");
      // Undeclared exception!
      try { 
        submit0.fileInput("area");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Object object0 = new Object();
      Link link0 = new Link(errorPage0, object0);
      Label label0 = new Label(link0, object0);
      label0._setComponentId("2)mav^oC0G4xxJ,tC");
      assertTrue(label0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("dl");
      Checkbox checkbox0 = new Checkbox(xmlEntityRef0, "wheel_ErrorPage", "wheel_ErrorPage");
      TextArea textArea0 = new TextArea(checkbox0, "wheel_ErrorPage", "wheel_ErrorPage");
      textArea0.getAttributes();
      assertEquals("dl", xmlEntityRef0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      TextArea textArea0 = new TextArea((Component) null, (String) null, "Block_1");
      FileInput fileInput0 = new FileInput(textArea0, "bFj&.+", "bFj&.+");
      // Undeclared exception!
      try { 
        fileInput0.button();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      FileInput fileInput0 = new FileInput(errorPage0, "", "cn#%<yWsc]l");
      Table table0 = new Table(fileInput0, "=e5l]H^OPU,0uM-?f#9");
      TableRow tableRow0 = table0.tr();
      DateInput dateInput0 = new DateInput(tableRow0, "=e5l]H^OPU,0uM-?f#9", ";=qZw6>", "cn#%<yWsc]l");
      // Undeclared exception!
      try { 
        dateInput0.checkbox("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      Form form0 = new Form("6g&r|");
      // Undeclared exception!
      try { 
        form0.tbody();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Tbody component can be added only to a Table.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Hidden hidden0 = new Hidden(errorPage0, "hr", "null");
      // Undeclared exception!
      try { 
        hidden0.blockquote();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      TextInput textInput0 = new TextInput((Component) null, "Block_1", "Block_1");
      // Undeclared exception!
      try { 
        textInput0.strong();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      Form form0 = new Form((String) null);
      // Undeclared exception!
      try { 
        form0.ins((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Block block0 = errorPage0.placeholder("");
      Component component0 = block0.li();
      assertEquals("Block_2", component0.getComponentId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      Checkbox checkbox0 = new Checkbox((Component) null, "W", "W");
      FormElement formElement0 = checkbox0.fieldBinding("W");
      assertEquals("W", formElement0.getFormElementName());
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      Form form0 = new Form("s3Zv16cYqt)RZw5=");
      // Undeclared exception!
      try { 
        form0.p();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Hidden hidden0 = new Hidden(errorPage0, "radio", "^%.]4YPDfwu");
      Table table0 = new Table(hidden0, "radio");
      Component component0 = table0.area((String[]) null);
      assertEquals("Any_1", component0.getComponentId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("radio", table0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      FileInput fileInput0 = new FileInput(errorPage0, "null", "null");
      Component component0 = errorPage0.acronym((Object) fileInput0);
      assertTrue(component0._isGeneratedId());
      assertEquals("null", fileInput0.getComponentId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      DateInput dateInput0 = new DateInput((Component) null, "5A],SD6.^qn(ek;;X3", "5A],SD6.^qn(ek;;X3", "5A],SD6.^qn(ek;;X3");
      // Undeclared exception!
      try { 
        dateInput0.h6();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      Form form0 = new Form("!NElStpYX?_=|LASRv");
      // Undeclared exception!
      try { 
        form0.s();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      Form form0 = new Form("Cannot add a form element. No surrounding form found.");
      // Undeclared exception!
      try { 
        form0.requestFocus();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("%DoZo>/kRwvY]Edu<");
      // Undeclared exception!
      try { 
        xmlEntityRef0.dateInput("%DoZo>/kRwvY]Edu<", "%DoZo>/kRwvY]Edu<");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Object object0 = new Object();
      Link link0 = new Link(errorPage0, object0);
      Label label0 = new Label(link0, object0);
      TableBlock tableBlock0 = new TableBlock(label0, "2)mav^oC0G4xxJ,tC");
      Select select0 = new Select(tableBlock0, "P)E", "P)E", "org.mvel.OptimizationFailure", (ISelectModel) null, false);
      Component component0 = select0.var();
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("P)E", select0.getComponentId());
      assertTrue(component0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.small();
      Table table0 = new Table(errorPage0, "");
      component0.strike((Object) table0);
      assertEquals("Table_1", table0.getComponentId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      // Undeclared exception!
      try { 
        errorPage0.frame("0' R@Zu8s_t8bN{yg");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.components.StandaloneComponent", e);
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Select select0 = new Select(errorPage0, "^%.]4YPDfwu", "^%.]4YPDfwu", "^%.]4YPDfwu", (ISelectModel) null, true);
      Component component0 = errorPage0.sup((Object) select0);
      Component component1 = component0.samp();
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(component1._isGeneratedId());
      assertEquals("^%.]4YPDfwu", select0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      NumberInput numberInput0 = new NumberInput(errorPage0, "[] from ", "");
      // Undeclared exception!
      try { 
        numberInput0.label();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Object object0 = new Object();
      Link link0 = new Link(errorPage0, object0);
      Component component0 = link0.map("2)mav^oC0G4xxJ,tC");
      assertTrue(link0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("2)mav^oC0G4xxJ,tC", component0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      Form form0 = new Form(" kdL1m/>Ll+7bR*i");
      // Undeclared exception!
      try { 
        form0.dfn((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Table table0 = new Table(errorPage0, "");
      Component component0 = table0.actionBinding("8~");
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("Table_1", component0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Label label0 = new Label(errorPage0, errorPage0);
      // Undeclared exception!
      try { 
        label0.tfoot();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Tfoot component can be added only to a Table.
         //
         verifyException("wheel.components.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      Form form0 = new Form((String) null);
      // Undeclared exception!
      try { 
        form0.h6((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      TableBlock tableBlock0 = new TableBlock(errorPage0);
      Component component0 = errorPage0.h2((Object) tableBlock0);
      assertTrue(component0._isGeneratedId());
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      XmlEntityRef xmlEntityRef0 = new XmlEntityRef("_,");
      DynamicSelectModel dynamicSelectModel0 = xmlEntityRef0.selectModel();
      // Undeclared exception!
      try { 
        xmlEntityRef0.multiSelect("_,", dynamicSelectModel0, "_,");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Form elements can be created only by compoents that are attached to a form component.
         //
         verifyException("wheel.components.ComponentCreator", e);
      }
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Table table0 = new Table(errorPage0, "dt");
      TableBlock tableBlock0 = table0.tfoot();
      Component component0 = tableBlock0.legend();
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertEquals("dt", table0.getComponentId());
      assertTrue(component0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      Component component0 = errorPage0.kbd();
      assertEquals("wheel_ErrorPage", errorPage0.getComponentId());
      assertTrue(component0._isGeneratedId());
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      Form form0 = new Form("_0=j^mA6 %9!");
      DateInput dateInput0 = new DateInput(form0, "b", "b", "b");
      // Undeclared exception!
      try { 
        dateInput0.dt((Object) "_0=j^mA6 %9!");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      ErrorPage errorPage0 = new ErrorPage();
      TableRow tableRow0 = new TableRow(errorPage0);
      ElExpression elExpression0 = new ElExpression(":");
      Image image0 = new Image(tableRow0, elExpression0, ":");
      // Undeclared exception!
      try { 
        image0.dd();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't add components to a component that is not an instance of IContainer.
         //
         verifyException("wheel.components.Component", e);
      }
  }
}
