/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 14:14:32 GMT 2018
 */

package org.la4j.matrix.sparse;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedList;
import java.util.Locale;
import java.util.Random;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;
import org.la4j.LinearAlgebra;
import org.la4j.Matrix;
import org.la4j.Vector;
import org.la4j.matrix.DenseMatrix;
import org.la4j.matrix.MatrixFactory;
import org.la4j.matrix.RowMajorSparseMatrix;
import org.la4j.matrix.SparseMatrix;
import org.la4j.matrix.functor.MatrixAccumulator;
import org.la4j.matrix.functor.MatrixFunction;
import org.la4j.matrix.functor.MatrixPredicate;
import org.la4j.matrix.functor.MatrixProcedure;
import org.la4j.matrix.sparse.CRSMatrix;
import org.la4j.operation.ooplace.OoPlaceMatricesMultiplication;
import org.la4j.operation.ooplace.OoPlaceVectorsSubtraction;
import org.la4j.vector.DenseVector;
import org.la4j.vector.SparseVector;
import org.la4j.vector.functor.VectorAccumulator;
import org.la4j.vector.functor.VectorFunction;
import org.la4j.vector.functor.VectorProcedure;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CRSMatrix_ESTest extends CRSMatrix_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix(471, 13);
      MatrixFactory<CRSMatrix> matrixFactory0 = (MatrixFactory<CRSMatrix>) mock(MatrixFactory.class, new ViolatedAssumptionAnswer());
      doReturn((Matrix) null).when(matrixFactory0).apply(anyInt() , anyInt());
      // Undeclared exception!
      try { 
        cRSMatrix0.to(matrixFactory0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.RowMajorSparseMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(23);
      cRSMatrix0.blank();
      double[][] doubleArray0 = new double[0][8];
      CRSMatrix.from2DArray(doubleArray0);
      byte[] byteArray0 = null;
      CRSMatrix cRSMatrix1 = CRSMatrix.fromBinary(byteArray0);
      cRSMatrix1.iteratorOfNonZeroRows();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[3] = (double) 2470;
      doubleArray0[6] = (double) 2470;
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(2470, 2470, 2470);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cRSMatrix0.updateAt(6, 3947, matrixFunction0);
      MockRandom mockRandom0 = new MockRandom((-58L));
      mockRandom0.setSeed(6);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.eachInRow(3947, vectorProcedure0);
      int int0 = 2449;
      int int1 = 2470;
      int int2 = 1404;
      cRSMatrix0.nonZeroAt(int1, int2);
      int int3 = (-183);
      int int4 = (-146);
      CRSMatrix cRSMatrix1 = CRSMatrix.random(int0, int4, (double) int3, (Random) mockRandom0);
      cRSMatrix1.rowMajorIterator();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      double[][] doubleArray0 = new double[2][4];
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = (-1640.9);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[8];
      doubleArray2[0] = 0.0;
      doubleArray2[1] = 0.0;
      doubleArray2[2] = (-1435.118557888619);
      doubleArray2[3] = 0.0;
      doubleArray2[4] = (-1640.9);
      doubleArray2[5] = 0.0;
      doubleArray2[6] = 0.0;
      doubleArray2[7] = (-1640.9);
      doubleArray0[1] = doubleArray2;
      CRSMatrix cRSMatrix0 = CRSMatrix.from2DArray(doubleArray0);
      cRSMatrix0.rowMajorIterator();
      assertEquals(1, cRSMatrix0.cardinality());
      assertEquals((-1640.9), cRSMatrix0.min(), 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      byte[] byteArray0 = new byte[21];
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      // Undeclared exception!
      try { 
        CRSMatrix.fromBinary(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can not decode CRSMatrix from the given byte array.
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(13);
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      double double0 = cRSMatrix0.min();
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.07692307692307693, cRSMatrix0.density(), 0.01);
      assertEquals(1.0, cRSMatrix0.max(), 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      int int0 = 187;
      double[] doubleArray0 = new double[7];
      doubleArray0[2] = (double) 187;
      doubleArray0[5] = (double) 2494;
      int int1 = 848;
      CRSMatrix cRSMatrix0 = CRSMatrix.from1DArray(848, 187, doubleArray0);
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.is(matrixPredicate0);
      cRSMatrix0.min();
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.block(cRSMatrix0, cRSMatrix0, cRSMatrix0, cRSMatrix0);
      int int2 = 2439;
      Matrix matrix0 = cRSMatrix0.subtract((Matrix) rowMajorSparseMatrix0);
      int int3 = 1934;
      SparseMatrix.from1DArray(int2, int3, doubleArray0);
      RowMajorSparseMatrix rowMajorSparseMatrix1 = RowMajorSparseMatrix.zero(int0, int0);
      CRSMatrix.block(matrix0, cRSMatrix0, rowMajorSparseMatrix0, rowMajorSparseMatrix1);
      String string0 = ":";
      CRSMatrix.fromMatrixMarket(string0);
      cRSMatrix0.setAll(int1);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      try { 
        CRSMatrix.random(2, 7, (double) 2, (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The density value should be between 0 and 1.0
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      CRSMatrix cRSMatrix0 = CRSMatrix.randomSymmetric(0, (double) 0, (Random) mockRandom0);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.update(matrixFunction0);
      int int0 = (-2268);
      // Undeclared exception!
      try { 
        CRSMatrix.diagonal((-2268), 0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      CRSMatrix.from1DArray(13, 450, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      int int0 = 4;
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 4;
      // Undeclared exception!
      try { 
        CRSMatrix.from1DArray(4, 4, doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(0);
      CRSMatrix cRSMatrix0 = CRSMatrix.randomSymmetric(0, (double) 0, (Random) mockRandom0);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.eachInColumn(0, vectorProcedure0);
      cRSMatrix0.infinityNorm();
      cRSMatrix0.equals((Object) mockRandom0);
      // Undeclared exception!
      try { 
        cRSMatrix0.getOrElse(2474, 0, (-1.0));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '2474' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      int int0 = 187;
      double double0 = (-1.0);
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(187, (-1.0));
      int int1 = 180;
      double double1 = 50.0;
      cRSMatrix0.norm();
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(double1, double0, (double)int0, (double)int1, (double)int0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      Matrix matrix0 = cRSMatrix0.transformColumn(int1, vectorFunction0);
      matrix0.removeFirstColumn();
      int int2 = 0;
      cRSMatrix0.maxInRow(int2);
      int int3 = 113;
      CRSMatrix.zero(int3, int0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      // Undeclared exception!
      try { 
        CRSMatrix.fromCSV("49hR?RU@Ula!'%");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(1515);
      // Undeclared exception!
      try { 
        CRSMatrix.random((-40), 1515, (double) (-40), (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The density value should be between 0 and 1.0
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(2, 7, 7);
      cRSMatrix0.iteratorOfNonZeroRows();
      // Undeclared exception!
      try { 
        CRSMatrix.random((-2147372158), (-2147372158), (double) 7, (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The density value should be between 0 and 1.0
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix(1107, 10);
      cRSMatrix0.nonZeroIteratorOfRow(10);
      cRSMatrix0.iteratorOfNonZeroRows();
      // Undeclared exception!
      try { 
        cRSMatrix0.nonZeroAt(1107, 1107);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1108
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      byte[] byteArray0 = new byte[21];
      byte byte0 = (byte)34;
      byteArray0[0] = (byte)34;
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      OoPlaceVectorsSubtraction ooPlaceVectorsSubtraction0 = new OoPlaceVectorsSubtraction();
      int int0 = 1691;
      Matrix.constant(1691, (byte)34, (byte)34);
      cRSMatrix0.toMatrixMarket();
      cRSMatrix0.eachNonZeroInColumn((byte)34, (VectorProcedure) null);
      // Undeclared exception!
      try { 
        ooPlaceVectorsSubtraction0.apply((SparseVector) null, (SparseVector) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.operation.ooplace.OoPlaceVectorsSubtraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[2] = (double) 187;
      doubleArray0[5] = (double) 2475;
      CRSMatrix cRSMatrix0 = new CRSMatrix(187, 9);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.eachInRow(9, vectorProcedure0);
      CRSMatrix cRSMatrix1 = CRSMatrix.diagonal(187, (-402.079));
      int[] intArray0 = new int[3];
      intArray0[0] = 9;
      intArray0[1] = 5;
      intArray0[2] = 187;
      cRSMatrix1.select(intArray0, intArray0);
      int int0 = (-1388);
      int int1 = (-1);
      int int2 = (-1248);
      CRSMatrix cRSMatrix2 = CRSMatrix.zero(int0, int1, int2);
      String string0 = "Given coefficient matrix can not be used with this solver.";
      CRSMatrix.fromMatrixMarket(string0);
      String string1 = "x7Vm^C$uW5K{1";
      SparseMatrix.fromCSV(string1);
      cRSMatrix2.toBinary();
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      int int0 = 2854;
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(187, 2854);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      int int1 = 1908874353;
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.transformColumn(1908874353, vectorFunction0);
      OoPlaceVectorsSubtraction ooPlaceVectorsSubtraction0 = new OoPlaceVectorsSubtraction();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      SparseVector.fromCollection(linkedList0);
      int int2 = (-3811);
      SparseMatrix.zero(int2, int2);
      int int3 = 994;
      CRSMatrix.diagonal(int1, int0);
      cRSMatrix0.multiplyByItsTranspose();
      int int4 = 37;
      CRSMatrix.zero(int4, int3);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      int int0 = 1;
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 13;
      doubleArray0[1] = (double) 13;
      doubleArray0[2] = (double) 13;
      doubleArray0[3] = (double) 1;
      doubleArray0[4] = (double) 1;
      int int1 = 10;
      CRSMatrix.from1DArray(1, 1, doubleArray0);
      // Undeclared exception!
      try { 
        CRSMatrix.fromMatrixMarket((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.StringTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[5] = (double) 2475;
      doubleArray0[2] = (double) 187;
      doubleArray0[5] = (double) 2475;
      CRSMatrix cRSMatrix0 = new CRSMatrix(187, 9);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.eachInRow(9, vectorProcedure0);
      CRSMatrix cRSMatrix1 = CRSMatrix.identity(9);
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(matrixPredicate0).test(anyInt() , anyInt());
      cRSMatrix0.is(matrixPredicate0);
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(232.43).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cRSMatrix1.updateAt(3, 2, matrixFunction0);
      CRSMatrix cRSMatrix2 = CRSMatrix.diagonal(3550, 0.02099029901541733);
      cRSMatrix2.max();
      cRSMatrix0.maxInRow(361);
      double[][] doubleArrayArray0 = null;
      CRSMatrix.from2DArray(doubleArrayArray0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix(187, 9);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.eachInRow(9, vectorProcedure0);
      CRSMatrix cRSMatrix1 = CRSMatrix.diagonal(187, (-402.079));
      cRSMatrix1.nonZeroIteratorOfColumn(9);
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      cRSMatrix0.min();
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      int int0 = 0;
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(0, 0);
      CRSMatrix.block(cRSMatrix0, cRSMatrix0, cRSMatrix0, cRSMatrix0);
      int int1 = 89;
      CRSMatrix cRSMatrix1 = CRSMatrix.zero(89, 16);
      // Undeclared exception!
      try { 
        cRSMatrix1.foldNonZeroInColumns((VectorAccumulator) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.SparseMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix(57, 187);
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        cRSMatrix0.select(intArray0, intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No rows or columns selected.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 187;
      doubleArray0[1] = (double) 2475;
      doubleArray0[2] = (double) 187;
      doubleArray0[2] = (double) 187;
      doubleArray0[5] = (double) 2475;
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(187, 187);
      cRSMatrix0.min();
      CRSMatrix.zero(2475, 6);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.eachNonZeroInRow(6, vectorProcedure0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      int int0 = 187;
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(187, (-1.0));
      int int1 = 180;
      cRSMatrix0.isZeroAt(13, 13);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn((-220.0), 294.1, 870.5543869598033, 294.1, (double)180).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      Matrix matrix0 = cRSMatrix0.transformColumn(180, vectorFunction0);
      OoPlaceVectorsSubtraction ooPlaceVectorsSubtraction0 = new OoPlaceVectorsSubtraction();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      SparseVector.fromCollection(linkedList0);
      SparseMatrix.zero(int0, int1);
      int int2 = 994;
      double double0 = 2660.957;
      CRSMatrix cRSMatrix1 = CRSMatrix.diagonal(int2, double0);
      cRSMatrix1.multiplyByItsTranspose();
      matrix0.iteratorOfRow(int0);
      double double1 = (-966.0);
      cRSMatrix1.setAll(double1);
      int int3 = 10;
      CRSMatrix.zero(int3, int3);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 187;
      doubleArray0[1] = (double) 2475;
      doubleArray0[2] = (double) 187;
      doubleArray0[3] = (double) 187;
      doubleArray0[4] = (double) 187;
      doubleArray0[5] = (double) 2475;
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(187);
      cRSMatrix0.toRowVector();
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.eachInColumn(127, vectorProcedure0);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn((double)44).when(vectorAccumulator0).accumulate();
      cRSMatrix0.foldNonZeroInColumn(44, vectorAccumulator0);
      cRSMatrix0.equals((Object) doubleArray0);
      int int0 = 1301;
      cRSMatrix0.getOrElse(127, 1301, (-1762.057));
      int int1 = (-633);
      double double0 = 1.0;
      MockRandom mockRandom0 = new MockRandom();
      CRSMatrix cRSMatrix1 = CRSMatrix.randomSymmetric(int1, double0, (Random) mockRandom0);
      int int2 = 27;
      CRSMatrix.diagonal(int2, double0);
      cRSMatrix1.nonZeroIteratorOfRow(int0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      int int0 = 187;
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(4);
      cRSMatrix0.add((double) 4);
      // Undeclared exception!
      try { 
        cRSMatrix0.is((MatrixPredicate) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      int int0 = 7;
      MockRandom mockRandom0 = new MockRandom();
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(37, 7, 7);
      cRSMatrix0.iteratorOfNonZeroRows();
      int int1 = Integer.MAX_VALUE;
      // Undeclared exception!
      try { 
        CRSMatrix.block(cRSMatrix0, cRSMatrix0, cRSMatrix0, cRSMatrix0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '8' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      int int0 = (-17);
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(2031, 2031, 2031);
      cRSMatrix0.multiplyByItsTranspose();
      cRSMatrix0.maxInRow((-3));
      int int1 = (-780);
      CRSMatrix.zero(int0, int1);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[3] = (double) 2470;
      doubleArray0[6] = (double) 2470;
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      RowMajorSparseMatrix.identity(11);
      cRSMatrix0.nonZeroRowMajorIterator();
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      cRSMatrix0.min();
      MockRandom mockRandom0 = new MockRandom();
      MockRandom mockRandom1 = new MockRandom((-557L));
      cRSMatrix0.setAll(2470.0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 13;
      doubleArray0[1] = (double) 13;
      doubleArray0[3] = (double) 1;
      doubleArray0[4] = (double) 1;
      doubleArray0[5] = (-240.256359291797);
      doubleArray0[6] = (double) 1;
      doubleArray0[7] = (-1.0);
      int[] intArray0 = new int[9];
      intArray0[0] = 13;
      intArray0[1] = 1;
      intArray0[3] = 13;
      intArray0[4] = 13;
      intArray0[5] = 1;
      intArray0[6] = 1;
      intArray0[7] = 1;
      intArray0[8] = 1;
      CRSMatrix cRSMatrix0 = new CRSMatrix(13, 1, 1, doubleArray0, intArray0, intArray0);
      cRSMatrix0.copyOfShape(3, 1);
      // Undeclared exception!
      try { 
        CRSMatrix.zero((-2545), 1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: -2545x1
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      int int0 = 495;
      org.evosuite.runtime.Random.setNextRandom(495);
      int int1 = 35;
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(495, 35);
      cRSMatrix0.copyOfRows(35);
      SparseMatrix.fromMatrixMarket("syF$");
      double double0 = 4124.0;
      byte byte0 = (byte) (-89);
      int int2 = 1913;
      int int3 = 13;
      int int4 = 580;
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) int1;
      doubleArray0[1] = (double) int0;
      doubleArray0[2] = double0;
      doubleArray0[3] = (double) int2;
      double double1 = (-3360.87179988);
      doubleArray0[1] = double1;
      doubleArray0[5] = (double) int3;
      doubleArray0[6] = (double) int4;
      double double2 = (-782.0178492798855);
      doubleArray0[7] = double2;
      doubleArray0[8] = (double) byte0;
      int[] intArray0 = null;
      CRSMatrix cRSMatrix1 = new CRSMatrix(int0, int0, int4, doubleArray0, intArray0, intArray0);
      int int5 = (-305);
      int int6 = 494;
      cRSMatrix1.copyOfShape(int5, int6);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      int int0 = 1138;
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(1138, 1138);
      int int1 = 167;
      cRSMatrix0.copyOfShape(1138, 167);
      int int2 = (-3460);
      CRSMatrix cRSMatrix1 = CRSMatrix.diagonal((-3460), 2.0);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) int2;
      doubleArray0[1] = (double) int0;
      doubleArray0[2] = (double) int1;
      doubleArray0[3] = (double) int0;
      int int3 = 7;
      Matrix.unit(int0, int3);
      doubleArray0[4] = (double) int1;
      CRSMatrix cRSMatrix2 = CRSMatrix.from1DArray(int1, int2, doubleArray0);
      double[][] doubleArray1 = new double[2][5];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      Matrix.from2DArray(doubleArray1);
      int int4 = 156;
      int int5 = 169;
      cRSMatrix1.nonZeroAt(int4, int5);
      int int6 = (-4267);
      int int7 = 3880;
      double double0 = (-4292.04496053223);
      cRSMatrix0.set(int6, int7, double0);
      cRSMatrix2.maxInRow(int6);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[3] = (double) 26;
      doubleArray0[1] = (double) 26;
      doubleArray0[4] = (double) 26;
      doubleArray0[5] = (double) (-17);
      int int0 = 1;
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(1, 5284.0980519);
      cRSMatrix0.multiplyByItsTranspose();
      // Undeclared exception!
      try { 
        cRSMatrix0.maxInRow(26);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 26
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.block(cRSMatrix0, cRSMatrix0, cRSMatrix0, cRSMatrix0);
      Vector vector0 = cRSMatrix0.getColumn(37);
      rowMajorSparseMatrix0.multiply(vector0);
      // Undeclared exception!
      try { 
        rowMajorSparseMatrix0.removeColumn(1286);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..-1
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      CRSMatrix.randomSymmetric(0, (double) 0, (Random) mockRandom0);
      int int0 = 8;
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(8, 8);
      cRSMatrix0.toColumnVector();
      cRSMatrix0.copyOfRows(8);
      // Undeclared exception!
      try { 
        Matrix.constant((-6029), 15, (-2704.1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(35, 4935.344056);
      CRSMatrix.diagonal(173, 4935.344056);
      cRSMatrix0.getColumn(8);
      CRSMatrix cRSMatrix1 = CRSMatrix.zero(8, (-959), (-685));
      VectorFunction vectorFunction0 = null;
      byte[] byteArray0 = new byte[8];
      byte byte0 = (byte)19;
      byteArray0[0] = byte0;
      byte byte1 = (byte)8;
      byteArray0[1] = byte1;
      byte byte2 = (byte) (-90);
      byteArray0[2] = byte2;
      byte byte3 = (byte)29;
      byteArray0[3] = byte3;
      byte byte4 = (byte)16;
      byteArray0[4] = byte4;
      byte byte5 = (byte) (-41);
      byteArray0[5] = byte5;
      byte byte6 = (byte) (-23);
      byteArray0[6] = byte6;
      byte byte7 = (byte)123;
      byteArray0[7] = byte7;
      CRSMatrix cRSMatrix2 = CRSMatrix.fromBinary(byteArray0);
      cRSMatrix2.updateRow(byteArray0[1], vectorFunction0);
      int[] intArray0 = null;
      cRSMatrix1.select(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.eachNonZero(matrixProcedure0);
      CRSMatrix.identity(1802);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      CRSMatrix cRSMatrix1 = CRSMatrix.block(cRSMatrix0, cRSMatrix0, cRSMatrix0, cRSMatrix0);
      Matrix matrix0 = cRSMatrix1.power(0);
      Matrix.diagonal(0, 0);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      matrix0.updateRow(0, vectorFunction0);
      org.evosuite.runtime.Random.setNextRandom(0);
      cRSMatrix0.each((MatrixProcedure) null);
      cRSMatrix1.eachNonZero((MatrixProcedure) null);
      String string0 = null;
      // Undeclared exception!
      try { 
        CRSMatrix.fromMatrixMarket((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.StringTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[5] = (double) 2475;
      doubleArray0[2] = (double) 187;
      doubleArray0[5] = (double) 2475;
      CRSMatrix cRSMatrix0 = new CRSMatrix(187, 9);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.eachInRow(9, vectorProcedure0);
      CRSMatrix cRSMatrix1 = CRSMatrix.diagonal(187, (-402.079));
      CRSMatrix cRSMatrix2 = CRSMatrix.identity(2475);
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(matrixPredicate0).test(anyInt() , anyInt());
      cRSMatrix2.is(matrixPredicate0);
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cRSMatrix2.updateAt(770, 770, matrixFunction0);
      cRSMatrix1.max();
      cRSMatrix0.maxInRow((-1314));
      double[][] doubleArrayArray0 = null;
      CRSMatrix.from2DArray(doubleArrayArray0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      MatrixFactory<CRSMatrix> matrixFactory0 = (MatrixFactory<CRSMatrix>) mock(MatrixFactory.class, new ViolatedAssumptionAnswer());
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.block(cRSMatrix0, cRSMatrix0, cRSMatrix0, cRSMatrix0);
      ((CRSMatrix) rowMajorSparseMatrix0).getColumn((-1398));
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      cRSMatrix0.max();
      // Undeclared exception!
      try { 
        cRSMatrix0.maxInRow(29);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 29
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[2] = (double) 213;
      doubleArray0[5] = (double) 17;
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(17);
      Matrix matrix0 = cRSMatrix0.add(1229.880472715834);
      // Undeclared exception!
      try { 
        RowMajorSparseMatrix.block(matrix0, cRSMatrix0, matrix0, matrix0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '18' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 13;
      doubleArray0[1] = (double) 12;
      doubleArray0[2] = (double) 13;
      doubleArray0[5] = (double) 12;
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(3, 5284.0980519);
      Matrix matrix0 = cRSMatrix0.multiplyByItsTranspose();
      CRSMatrix cRSMatrix1 = CRSMatrix.identity(3);
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(matrixPredicate0).test(anyInt() , anyInt());
      doReturn(true, true, true, true, true).when(matrixPredicate0).test(anyInt() , anyInt() , anyDouble());
      cRSMatrix1.is(matrixPredicate0);
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      matrix0.min();
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(187, (-1.0));
      cRSMatrix0.maxInRow(0);
      CRSMatrix.zero(113, 187);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      int int0 = 2475;
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 2475;
      doubleArray0[1] = (double) 2475;
      doubleArray0[4] = (double) 2475;
      doubleArray0[5] = (double) 2475;
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(2475, 2475);
      CRSMatrix cRSMatrix1 = CRSMatrix.zero(2475, 2475, 2475);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      int[] intArray0 = new int[2];
      intArray0[0] = 2475;
      intArray0[1] = 2475;
      int int1 = 37;
      Matrix matrix0 = Matrix.zero(2475, 37);
      cRSMatrix1.add(617.971);
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(matrixPredicate0).test(anyInt() , anyInt());
      cRSMatrix1.is(matrixPredicate0);
      cRSMatrix0.updateRow(1000, (VectorFunction) null);
      CRSMatrix cRSMatrix2 = CRSMatrix.zero(intArray0[1], int1);
      CRSMatrix cRSMatrix3 = CRSMatrix.block(matrix0, cRSMatrix2, cRSMatrix1, cRSMatrix0);
      cRSMatrix1.nonZeroAt(int0, intArray0[1]);
      CRSMatrix.block(matrix0, cRSMatrix0, cRSMatrix1, cRSMatrix3);
      cRSMatrix1.nonZeroRowMajorIterator();
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      CRSMatrix.identity(4);
      CRSMatrix cRSMatrix0 = new CRSMatrix(187, 9, 3);
      cRSMatrix0.add((double) 4);
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(matrixPredicate0).test(anyInt() , anyInt());
      cRSMatrix0.is(matrixPredicate0);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      cRSMatrix0.updateRow(9, vectorFunction0);
      // Undeclared exception!
      try { 
        CRSMatrix.zero(187, (-5318));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: 187x-5318
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      double[][] doubleArray0 = new double[7][6];
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(526, 0);
      cRSMatrix0.eachNonZeroInRow(187, vectorProcedure0);
      CRSMatrix.block(cRSMatrix0, cRSMatrix0, cRSMatrix0, cRSMatrix0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      int int0 = 187;
      double[] doubleArray0 = new double[7];
      doubleArray0[2] = (double) 187;
      doubleArray0[5] = (double) 2475;
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(2475);
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(matrixPredicate0).test(anyInt() , anyInt());
      doReturn(false).when(matrixPredicate0).test(anyInt() , anyInt() , anyDouble());
      cRSMatrix0.is(matrixPredicate0);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)9, 187.0, 0.0707070707070707, (double)2475, (double)2475).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      cRSMatrix0.updateRow(9, vectorFunction0);
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      double[][] doubleArray1 = new double[0][1];
      CRSMatrix.from2DArray(doubleArray1);
      CRSMatrix cRSMatrix1 = CRSMatrix.from2DArray(doubleArray1);
      cRSMatrix1.add((double) int0);
      String string0 = "c8?xz(|E7w{N|'Xr9(y";
      DenseMatrix.fromMatrixMarket(string0);
      CRSMatrix.from2DArray(doubleArray1);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      CRSMatrix cRSMatrix0 = CRSMatrix.randomSymmetric(0, (double) 0, (Random) mockRandom0);
      CRSMatrix cRSMatrix1 = CRSMatrix.diagonal(8, 8);
      Matrix matrix0 = cRSMatrix1.copyOfRows(8);
      CRSMatrix cRSMatrix2 = CRSMatrix.zero(180, 180, 0);
      CRSMatrix cRSMatrix3 = CRSMatrix.identity(0);
      cRSMatrix2.add((-1826.569766));
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      matrix0.updateRow(0, vectorFunction0);
      CRSMatrix.zero(1508, 142);
      CRSMatrix.block(cRSMatrix3, cRSMatrix1, cRSMatrix1, cRSMatrix0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      int int0 = 2990;
      cRSMatrix0.toRowMajorSparseMatrix();
      int int1 = (-3971);
      // Undeclared exception!
      try { 
        cRSMatrix0.slice(140, 140, (-1056), (-3971));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong slice range: [140..-1056][140..-3971].
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[5] = (double) 2475;
      doubleArray0[2] = (double) 187;
      doubleArray0[5] = (double) 2475;
      CRSMatrix cRSMatrix0 = new CRSMatrix(187, 9);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.eachInRow(9, vectorProcedure0);
      CRSMatrix cRSMatrix1 = CRSMatrix.diagonal(187, (-402.079));
      int int0 = (-1314);
      CRSMatrix cRSMatrix2 = CRSMatrix.identity(2475);
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(matrixPredicate0).test(anyInt() , anyInt());
      doReturn(false).when(matrixPredicate0).test(anyInt() , anyInt() , anyDouble());
      cRSMatrix2.is(matrixPredicate0);
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      cRSMatrix2.toRowMajorSparseMatrix();
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)9).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cRSMatrix2.updateAt(770, 770, matrixFunction0);
      cRSMatrix1.max();
      MockRandom mockRandom0 = new MockRandom();
      CRSMatrix.randomSymmetric(294, 2475.0, (Random) mockRandom0);
      cRSMatrix0.maxInRow(int0);
      double[][] doubleArrayArray0 = null;
      CRSMatrix.from2DArray(doubleArrayArray0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      org.evosuite.runtime.Random.setNextRandom(495);
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.nextBoolean();
      int int0 = 31;
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(31, 9.970392032323232);
      cRSMatrix0.diagonalProduct();
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn((-1357.7450693)).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cRSMatrix0.updateAt(13, 47, matrixFunction0);
      cRSMatrix0.removeRow(13);
      CRSMatrix cRSMatrix1 = CRSMatrix.zero(47, 47, 31);
      org.evosuite.runtime.Random.setNextRandom(495);
      int[] intArray0 = new int[1];
      intArray0[0] = 47;
      int[] intArray1 = new int[0];
      cRSMatrix1.select(intArray0, intArray1);
      int int1 = (-2892);
      CRSMatrix.identity(int1);
      int int2 = (-1091);
      CRSMatrix.identity(int2);
      int int3 = 4;
      Integer integer0 = new Integer(int3);
      int int4 = 5;
      CRSMatrix cRSMatrix2 = CRSMatrix.zero(int4, int0);
      int int5 = (-2544);
      cRSMatrix2.blankOfShape(int5, int1);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      double[][] doubleArray0 = new double[7][6];
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(187, 2475);
      cRSMatrix0.maxInRow(0);
      CRSMatrix.zero(526, 0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      int int0 = 9;
      CRSMatrix.identity(9);
      double double0 = 1229.880472715834;
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      CRSMatrix.randomSymmetric(187, 1.0, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[5] = (double) 2475;
      doubleArray0[2] = (double) 187;
      doubleArray0[5] = (double) 2475;
      int int0 = 9;
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(187, (-402.079));
      double[][] doubleArray1 = new double[3][1];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      double[] doubleArray2 = new double[9];
      doubleArray2[0] = (-947.0);
      doubleArray2[1] = (double) 187;
      doubleArray2[2] = (double) 9;
      doubleArray2[3] = 1.0;
      doubleArray2[4] = (double) 2475;
      doubleArray2[5] = (double) 2475;
      doubleArray2[6] = 2475.0;
      doubleArray2[7] = (double) 187;
      doubleArray2[8] = (double) 9;
      doubleArray1[2] = doubleArray2;
      Matrix matrix0 = Matrix.from2DArray(doubleArray1);
      Matrix matrix1 = cRSMatrix0.insert(matrix0);
      CRSMatrix cRSMatrix1 = CRSMatrix.diagonal(187, (-402.079));
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(matrixPredicate0).test(anyInt() , anyInt());
      cRSMatrix1.is(matrixPredicate0);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)2475, (-316.574070902272), (-316.574070902272), (-316.574070902272), 575.679712069).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      cRSMatrix1.updateRow(9, vectorFunction0);
      int int1 = 161;
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      cRSMatrix1.updateAt(int1, int0, matrixFunction0);
      matrix1.rowMajorIterator();
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      int int0 = 184;
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(184, 184);
      byte[] byteArray0 = new byte[16];
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 232.43, (-2958.450345514), (double)184, 232.43).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cRSMatrix0.update(matrixFunction0);
      byte byte0 = (byte) (-24);
      byteArray0[0] = byte0;
      CRSMatrix cRSMatrix1 = CRSMatrix.fromBinary(byteArray0);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) byteArray0[0];
      cRSMatrix1.removeLastRow();
      int int1 = (-715);
      cRSMatrix1.copyOfShape(byteArray0[0], int1);
      int int2 = 2637;
      int int3 = 4;
      Matrix.from1DArray(int2, int3, doubleArray0);
      doubleArray0[1] = (double) byte0;
      cRSMatrix0.copyOfRows(byteArray0[0]);
      doubleArray0[2] = (double) byte0;
      cRSMatrix1.blankOfColumns(byteArray0[0]);
      doubleArray0[3] = (double) byte0;
      SparseMatrix.from1DArray(byteArray0[0], byteArray0[0], doubleArray0);
      SparseMatrix.block(cRSMatrix1, cRSMatrix0, cRSMatrix1, cRSMatrix1);
      cRSMatrix0.getRow(int0);
      MockRandom mockRandom0 = new MockRandom(int0);
      long long0 = 0L;
      mockRandom0.setSeed(long0);
      CRSMatrix cRSMatrix2 = CRSMatrix.randomSymmetric((int) byte0, doubleArray0[2], (Random) mockRandom0);
      int int4 = 4;
      MatrixFunction matrixFunction1 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      cRSMatrix2.updateAt(int4, byteArray0[0], matrixFunction1);
      LinearAlgebra.InverterFactory linearAlgebra_InverterFactory0 = LinearAlgebra.InverterFactory.NO_PIVOT_GAUSS;
      cRSMatrix2.withInverter(linearAlgebra_InverterFactory0);
      cRSMatrix2.toBinary();
      cRSMatrix2.minInRow(int4);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[5] = (double) 2475;
      doubleArray0[2] = (double) 187;
      doubleArray0[5] = (double) 2475;
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      CRSMatrix.diagonal(187, (-402.079));
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(187, (-402.079));
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(matrixPredicate0).test(anyInt() , anyInt());
      cRSMatrix0.is(matrixPredicate0);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)2475, (-316.574070902272), (-316.574070902272), (-316.574070902272), 575.679712069).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      cRSMatrix0.updateRow(9, vectorFunction0);
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication1 = new OoPlaceMatricesMultiplication();
      cRSMatrix0.max();
      int int0 = (-76);
      int int1 = 1076;
      cRSMatrix0.maxInRow(int1);
      int int2 = 7;
      CRSMatrix.zero(int0, int2);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      int int0 = 2470;
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 2470;
      doubleArray0[2] = (double) 2470;
      doubleArray0[3] = (double) 2470;
      doubleArray0[6] = (double) 2470;
      CRSMatrix cRSMatrix0 = new CRSMatrix(2470, 2470, 2470);
      cRSMatrix0.nonZeroRowMajorIterator();
      int[] intArray0 = new int[1];
      Matrix matrix0 = cRSMatrix0.select(intArray0, intArray0);
      // Undeclared exception!
      try { 
        CRSMatrix.block(cRSMatrix0, cRSMatrix0, cRSMatrix0, matrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Sides of blocks are incompatible!
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      int int0 = 2475;
      int int1 = 196;
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 196;
      doubleArray0[1] = (double) 2475;
      doubleArray0[5] = (double) 196;
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(196, 196);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      Matrix.zero(2475, 1326);
      double[][] doubleArray1 = new double[14][6];
      doubleArray1[4] = doubleArray0;
      MatrixAccumulator matrixAccumulator0 = mock(MatrixAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(matrixAccumulator0).accumulate();
      cRSMatrix0.foldNonZero(matrixAccumulator0);
      cRSMatrix0.setAll((-1.0));
      int int2 = (-1157);
      cRSMatrix0.copyOfShape(int0, int2);
      cRSMatrix0.minInRow(int1);
      int int3 = 32;
      int int4 = 331;
      double double0 = 1578.07753;
      Matrix.constant(int3, int4, double0);
      cRSMatrix0.nonZeroAt(int1, int1);
      int int5 = 1218;
      cRSMatrix0.eachNonZeroInRow(int5, vectorProcedure0);
      cRSMatrix0.getColumn(int1);
      CRSMatrix cRSMatrix1 = CRSMatrix.from2DArray(doubleArray1);
      doubleArray1[4] = doubleArray0;
      doubleArray1[5] = doubleArray0;
      doubleArray1[6] = doubleArray0;
      int int6 = 2124;
      int[] intArray0 = new int[5];
      intArray0[0] = int1;
      intArray0[1] = int6;
      intArray0[2] = int0;
      intArray0[3] = int1;
      intArray0[4] = int0;
      cRSMatrix0.select(intArray0, intArray0);
      cRSMatrix1.maxInRow(int6);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[1] = (double) 2475;
      doubleArray0[5] = (double) 196;
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(196, 196);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      double[][] doubleArray1 = new double[19][6];
      doubleArray1[4] = doubleArray0;
      cRSMatrix0.setAll(0.0);
      cRSMatrix0.iteratorOfRow(50);
      MatrixFactory<Matrix> matrixFactory0 = (MatrixFactory<Matrix>) mock(MatrixFactory.class, new ViolatedAssumptionAnswer());
      doReturn((Matrix) null).when(matrixFactory0).apply(anyInt() , anyInt());
      cRSMatrix0.to(matrixFactory0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix((byte)34, (byte)34);
      cRSMatrix0.nonZeroRowMajorIterator();
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      cRSMatrix0.min();
      MockRandom mockRandom0 = new MockRandom();
      MockRandom mockRandom1 = new MockRandom(42L);
      CRSMatrix.random(2242, (int) (byte)34, 0.0, (Random) mockRandom1);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      int int0 = 1047;
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(1047);
      byte[] byteArray0 = cRSMatrix0.toBinary();
      double double0 = 1691.50779715996;
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.longs();
      CRSMatrix cRSMatrix1 = CRSMatrix.random(1047, 1047, 1691.50779715996, (Random) mockRandom0);
      Vector vector0 = cRSMatrix1.toColumnVector();
      mockRandom0.ints();
      mockRandom0.doubles((double) int0, double0);
      cRSMatrix0.getColumn(int0);
      int int1 = 288;
      int int2 = 3424;
      Matrix.zero(int1, int2);
      MatrixFactory<Matrix> matrixFactory0 = (MatrixFactory<Matrix>) mock(MatrixFactory.class, new ViolatedAssumptionAnswer());
      cRSMatrix1.to(matrixFactory0);
      MatrixProcedure matrixProcedure0 = null;
      String string0 = cRSMatrix1.toString();
      cRSMatrix1.eachNonZero(matrixProcedure0);
      cRSMatrix1.setColumn(int1, vector0);
      double double1 = 1.0;
      cRSMatrix1.toColumnMajorSparseMatrix();
      cRSMatrix0.setAll(double1);
      cRSMatrix1.setAll(int0);
      cRSMatrix1.getRow(int0);
      cRSMatrix1.max();
      CRSMatrix cRSMatrix2 = CRSMatrix.fromCSV(string0);
      int int3 = 16;
      CRSMatrix.randomSymmetric(int3, (double) int3, (Random) mockRandom0);
      CRSMatrix.fromBinary(byteArray0);
      cRSMatrix0.each(matrixProcedure0);
      MatrixFactory<CRSMatrix> matrixFactory1 = null;
      cRSMatrix2.to(matrixFactory1);
      int[] intArray0 = new int[5];
      intArray0[0] = int1;
      intArray0[1] = int3;
      intArray0[2] = int2;
      intArray0[3] = int3;
      int int4 = 321;
      intArray0[4] = int4;
      cRSMatrix2.select(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix((byte)34, (byte)34);
      cRSMatrix0.nonZeroRowMajorIterator();
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      double double0 = Locale.LanguageRange.MAX_WEIGHT;
      MockRandom mockRandom0 = new MockRandom();
      MockRandom mockRandom1 = new MockRandom(42L);
      // Undeclared exception!
      CRSMatrix.random(2242, (int) (byte)34, 1.0, (Random) mockRandom1);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      int[] intArray0 = new int[1];
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      double[][] doubleArray1 = new double[2][2];
      double[] doubleArray2 = new double[2];
      doubleArray2[0] = (double) (-3111);
      doubleArray2[1] = (double) 638;
      doubleArray1[0] = doubleArray2;
      double[] doubleArray3 = new double[3];
      doubleArray3[1] = 2095.86;
      doubleArray3[2] = (double) 638;
      doubleArray1[1] = doubleArray3;
      CRSMatrix.from2DArray(doubleArray1);
      CRSMatrix cRSMatrix1 = CRSMatrix.from2DArray(doubleArray1);
      cRSMatrix1.min();
      cRSMatrix1.iteratorOfNonZeroRows();
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      CRSMatrix.zero(32, 32, 32);
      MockRandom mockRandom0 = new MockRandom();
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(657, 0);
      cRSMatrix0.minInRow(0);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      int int0 = 1;
      int int1 = 329;
      CRSMatrix cRSMatrix0 = new CRSMatrix(1, 329, 329);
      cRSMatrix0.add((double) 1);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      double double0 = (-24.0);
      CRSMatrix cRSMatrix1 = CRSMatrix.diagonal(1, 1);
      cRSMatrix0.getColumn(2777);
      // Undeclared exception!
      try { 
        CRSMatrix.block(cRSMatrix0, cRSMatrix0, cRSMatrix1, cRSMatrix1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Sides of blocks are incompatible!
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      int int0 = 187;
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(187, (-1.0));
      int int1 = 180;
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)187, (-1.0), (double)187, (-107.0), (double)187).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cRSMatrix0.update(matrixFunction0);
      cRSMatrix0.add((double) int0);
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.is(matrixPredicate0);
      byte[] byteArray0 = null;
      CRSMatrix.fromBinary(byteArray0);
      MockRandom mockRandom0 = new MockRandom();
      double double0 = (-1006.2361730531304);
      CRSMatrix.random(int1, int1, double0, (Random) mockRandom0);
      int int2 = 70;
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.updateRow(int1, vectorFunction0);
      int int3 = 2823;
      int[] intArray0 = new int[8];
      intArray0[0] = int2;
      intArray0[1] = int1;
      intArray0[2] = int3;
      intArray0[3] = int1;
      intArray0[4] = int1;
      intArray0[5] = int3;
      intArray0[6] = int3;
      intArray0[7] = int1;
      cRSMatrix0.select(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      int int0 = 187;
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(187, (-1.0));
      int int1 = 180;
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cRSMatrix0.update(matrixFunction0);
      cRSMatrix0.add((double) int0);
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.is(matrixPredicate0);
      byte[] byteArray0 = null;
      CRSMatrix.fromBinary(byteArray0);
      MockRandom mockRandom0 = new MockRandom();
      double double0 = (-1006.2361730531304);
      CRSMatrix.random(int1, int1, double0, (Random) mockRandom0);
      int int2 = 70;
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.updateRow(int1, vectorFunction0);
      int int3 = 2823;
      int[] intArray0 = new int[8];
      intArray0[0] = int2;
      intArray0[1] = int1;
      intArray0[2] = int3;
      intArray0[3] = int1;
      intArray0[4] = int1;
      intArray0[5] = int3;
      intArray0[6] = int3;
      intArray0[7] = int1;
      cRSMatrix0.select(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      int int0 = 2486;
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 2486;
      doubleArray0[1] = (double) 2486;
      doubleArray0[2] = (double) 2486;
      doubleArray0[4] = (double) 2486;
      int int1 = 2403;
      int[] intArray0 = new int[5];
      doubleArray0[1] = (double) 2486;
      intArray0[1] = 2486;
      intArray0[3] = 2486;
      intArray0[4] = 2486;
      CRSMatrix cRSMatrix0 = new CRSMatrix(2486, 2486, 2403, doubleArray0, intArray0, intArray0);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(2486.0, (-966.0)).when(vectorAccumulator0).accumulate();
      double[] doubleArray1 = cRSMatrix0.foldRows(vectorAccumulator0);
      double[][] doubleArray2 = new double[8][2];
      doubleArray2[0] = doubleArray1;
      doubleArray2[1] = doubleArray0;
      doubleArray2[2] = doubleArray0;
      doubleArray2[3] = doubleArray1;
      doubleArray2[4] = doubleArray0;
      doubleArray2[5] = doubleArray0;
      doubleArray2[6] = doubleArray0;
      doubleArray2[7] = doubleArray1;
      CRSMatrix.from2DArray(doubleArray2);
      cRSMatrix0.divide(int0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      int int2 = 15;
      cRSMatrix0.getColumn(int2);
      DenseVector denseVector0 = DenseVector.fromCollection(linkedList0);
      Matrix matrix0 = denseVector0.toDiagonalMatrix();
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication1 = new OoPlaceMatricesMultiplication();
      Matrix matrix1 = ooPlaceMatricesMultiplication1.apply((RowMajorSparseMatrix) cRSMatrix0, (RowMajorSparseMatrix) cRSMatrix0);
      CRSMatrix.block(matrix0, cRSMatrix0, matrix1, matrix0);
      int int3 = 0;
      int int4 = 956;
      CRSMatrix cRSMatrix1 = new CRSMatrix(int4, int1);
      int int5 = 2;
      int int6 = (-1393);
      CRSMatrix cRSMatrix2 = CRSMatrix.zero(int3, int5, int6);
      int int7 = (-1788);
      cRSMatrix2.maxInRow(int7);
      int int8 = 299;
      CRSMatrix.zero(int3, int8);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(1, 1, 1);
      cRSMatrix0.add((double) 1);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      CRSMatrix cRSMatrix1 = new CRSMatrix(1, 1);
      CRSMatrix.block(cRSMatrix0, cRSMatrix0, cRSMatrix1, cRSMatrix1);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer((-1577));
      linkedList0.add(integer0);
      LinkedList<Object> linkedList1 = new LinkedList<Object>();
      linkedList0.containsAll(linkedList1);
      LinkedList<Integer> linkedList2 = new LinkedList<Integer>();
      SparseVector.fromCollection(linkedList2);
      int int0 = (-3477);
      // Undeclared exception!
      try { 
        SparseMatrix.zero(1, (-3477));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: 1x-3477
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[2] = (double) 187;
      doubleArray0[5] = (double) 2494;
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(2494);
      Matrix matrix0 = cRSMatrix0.add(1229.880472715834);
      CRSMatrix cRSMatrix1 = CRSMatrix.zero(2494, 26, 2643);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      cRSMatrix1.updateRow(187, vectorFunction0);
      CRSMatrix.zero(2643, 26);
      Matrix matrix1 = cRSMatrix1.subtract(Double.NEGATIVE_INFINITY);
      CRSMatrix.block(cRSMatrix0, matrix1, matrix0, cRSMatrix0);
  }
}
