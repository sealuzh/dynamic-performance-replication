/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 23 05:19:06 GMT 2019
 */

package com.alibaba.fastjson.parser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.alibaba.fastjson.parser.Feature;
import com.alibaba.fastjson.parser.JSONLexerBase;
import com.alibaba.fastjson.parser.JSONReaderScanner;
import com.alibaba.fastjson.parser.JSONScanner;
import com.alibaba.fastjson.parser.SymbolTable;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.StringReader;
import java.time.ZoneId;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Locale;
import java.util.Set;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONLexerBase_ESTest extends JSONLexerBase_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("b(8%0t%]");
      jSONScanner0.scanBoolean('0');
      Feature feature0 = Feature.CustomMapDeserializer;
      char[] charArray0 = new char[1];
      charArray0[0] = '0';
      jSONScanner0.scanFieldSymbol(charArray0);
      jSONScanner0.nextToken(14);
      jSONScanner0.config(feature0, false);
      jSONScanner0.scanISO8601DateIfMatch();
      jSONScanner0.scanBoolean('=');
      Class<Object> class0 = Object.class;
      SymbolTable symbolTable0 = new SymbolTable(14);
      // Undeclared exception!
      try { 
        symbolTable0.addSymbol("b(8%0t%]", 1263, 14, 14, false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      int int0 = 114;
      JSONScanner jSONScanner0 = new JSONScanner("scan null error", 114);
      jSONScanner0.scanSymbolUnQuoted((SymbolTable) null);
      jSONScanner0.scanType("scan null error");
      jSONScanner0.intValue();
      Feature feature0 = Feature.SupportAutoType;
      jSONScanner0.isEnabled(feature0);
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldString(charArray0);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("75GF4(09_N:lFZ1uZp");
      // Undeclared exception!
      try { 
        jSONReaderScanner0.addSymbol((-1), 72652, 1371, (SymbolTable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONReaderScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      String string0 = "o";
      StringReader stringReader0 = new StringReader("o");
      int int0 = 3;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0, 3);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) jSONReaderScanner0;
      objectArray0[1] = (Object) jSONReaderScanner0;
      objectArray0[2] = (Object) jSONReaderScanner0;
      objectArray0[3] = (Object) "o";
      jSONReaderScanner0.nextToken(3);
      char[] charArray0 = new char[9];
      charArray0[0] = ' ';
      charArray0[1] = 'M';
      charArray0[2] = 'b';
      charArray0[3] = ']';
      charArray0[4] = '1';
      charArray0[5] = '@';
      charArray0[6] = 'r';
      charArray0[7] = '`';
      charArray0[8] = '|';
      // Undeclared exception!
      try { 
        stringReader0.read(charArray0, 42, 8);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = '\\';
      charArray0[1] = '&';
      charArray0[2] = '?';
      charArray0[3] = 'x';
      charArray0[4] = '/';
      charArray0[5] = 'X';
      charArray0[6] = 'C';
      charArray0[7] = '&';
      // Undeclared exception!
      try { 
        JSONLexerBase.readString(charArray0, 102);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed.str.lit
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = 'n';
      charArray0[1] = '9';
      charArray0[2] = 'Y';
      charArray0[3] = '=';
      charArray0[4] = 'r';
      charArray0[5] = 'V';
      charArray0[6] = 's';
      charArray0[7] = 'n';
      int int0 = 1124;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 1124, 1124);
      int int1 = Integer.MAX_VALUE;
      jSONReaderScanner0.scanString('8');
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextTokenWithChar('u');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match u - n, info : 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = '1';
      charArray0[1] = '1';
      charArray0[2] = 'w';
      charArray0[3] = '4';
      charArray0[4] = 'p';
      charArray0[5] = '_';
      int int0 = 1188;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 1188);
      jSONReaderScanner0.scanFieldDouble(charArray0);
      jSONReaderScanner0.scanDate(')');
      int int1 = 18;
      SimpleTimeZone simpleTimeZone0 = null;
      try {
        simpleTimeZone0 = new SimpleTimeZone((-146), "Set", 1325, 1943, 4096, (-1), 1943, 1943, 1325, 18, 123);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal start month 1325
         //
         verifyException("java.util.SimpleTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = 'e';
      charArray0[1] = ' ';
      char char0 = '8';
      charArray0[2] = '8';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 88);
      jSONReaderScanner0.pos = 88;
      Feature feature0 = Feature.CustomMapDeserializer;
      jSONReaderScanner0.sub_chars(88, 88);
      jSONReaderScanner0.isEnabled(feature0);
      jSONReaderScanner0.scanNumber();
      jSONReaderScanner0.scanInt('e');
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'C';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 68, (-3570));
      Class<Object> class0 = Object.class;
      jSONReaderScanner0.scanFieldStringArray(charArray0, class0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = '6';
      charArray0[1] = 'S';
      charArray0[2] = '7';
      charArray0[3] = ' ';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 36, 79);
      jSONReaderScanner0.charArrayCompare(charArray0);
      jSONReaderScanner0.scanFieldDate(charArray0);
      jSONReaderScanner0.scanFieldBigInteger(charArray0);
      jSONReaderScanner0.hasSpecial = true;
      jSONReaderScanner0.nextToken();
      jSONReaderScanner0.isEnabled((-2684), (-2823));
      Feature feature0 = Feature.AllowSingleQuotes;
      jSONReaderScanner0.isEnabled(feature0);
      JSONScanner jSONScanner0 = new JSONScanner("z\"p");
      jSONScanner0.scanString();
      jSONScanner0.scanDate(']');
      jSONScanner0.scanFieldInt(charArray0);
      jSONScanner0.scanDecimal(']');
      jSONScanner0.skipWhitespace();
      jSONReaderScanner0.decimalValue(true);
      jSONScanner0.scanDate('7');
      jSONReaderScanner0.isBlankInput();
      assertEquals((-2), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = '}';
      charArray0[1] = 'x';
      charArray0[2] = '}';
      charArray0[3] = '|';
      charArray0[4] = ')';
      charArray0[5] = 'F';
      charArray0[6] = '!';
      charArray0[7] = '+';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 46, 68);
      jSONReaderScanner0.matchStat = 46;
      jSONReaderScanner0.nextToken();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.matchField2(charArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = '7';
      charArray0[1] = '$';
      charArray0[2] = ')';
      charArray0[3] = 's';
      charArray0[4] = '6';
      charArray0[5] = '<';
      charArray0[6] = '<';
      charArray0[7] = 's';
      charArray0[8] = 'b';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 116, 116);
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      jSONReaderScanner0.scanDate('p');
      assertEquals(116, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = '9';
      charArray0[1] = 'U';
      char char0 = 'u';
      charArray0[2] = 'u';
      charArray0[3] = 'b';
      char char1 = 'i';
      charArray0[4] = 'i';
      char char2 = 'C';
      charArray0[5] = 'C';
      char char3 = 'S';
      charArray0[6] = 'S';
      charArray0[7] = 'j';
      char char4 = '8';
      charArray0[8] = '8';
      int int0 = 70;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 70);
      jSONReaderScanner0.scanFieldFloatArray2(charArray0);
      jSONReaderScanner0.scanFieldFloatArray(charArray0);
      jSONReaderScanner0.scanFieldInt(charArray0);
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner(charArray0, 92, (-2));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("-+c\"6{>o");
      char[] charArray0 = new char[1];
      charArray0[0] = 'c';
      jSONReaderScanner0.scanFieldString(charArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      
      jSONReaderScanner0.scanString('c');
      jSONReaderScanner0.scanDecimal(' ');
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("i");
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldDecimal(charArray0);
      jSONScanner0.stringVal();
      char[] charArray1 = new char[5];
      charArray1[0] = '\\';
      charArray1[1] = '+';
      int int0 = 41;
      SymbolTable symbolTable0 = null;
      try {
        symbolTable0 = new SymbolTable((-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.SymbolTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("not support : ");
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldDouble(charArray0);
      jSONScanner0.scanFieldDouble(charArray0);
      // Undeclared exception!
      try { 
        jSONScanner0.decimalValue(true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      JSONLexerBase.isWhitespace('N');
      JSONScanner jSONScanner0 = new JSONScanner("new");
      Class<String> class0 = String.class;
      SymbolTable symbolTable0 = new SymbolTable(705);
      jSONScanner0.scanEnum(class0, symbolTable0, 'N');
      jSONScanner0.token = 705;
      assertEquals((-1), jSONScanner0.matchStat());
      
      jSONScanner0.scanDecimal('^');
      jSONScanner0.tokenName();
      assertEquals(989, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("m$D!MUf#]$lk\"*", 34);
      jSONScanner0.scanIdent();
      jSONScanner0.scanString();
      // Undeclared exception!
      try { 
        jSONScanner0.nextTokenWithChar('1');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match 1 - *, info : pos 13, json : m$D!MUf#]$lk\"*
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("syntax error");
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldBigInteger(charArray0);
      jSONScanner0.scanInt('p');
      PipedReader pipedReader0 = new PipedReader();
      JSONReaderScanner jSONReaderScanner0 = null;
      try {
        jSONReaderScanner0 = new JSONReaderScanner(pipedReader0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Pipe not connected
         //
         verifyException("com.alibaba.fastjson.parser.JSONReaderScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      int int0 = 15;
      JSONScanner jSONScanner0 = new JSONScanner("null", 15);
      jSONScanner0.nextToken();
      char[] charArray0 = new char[5];
      charArray0[0] = '3';
      char char0 = 's';
      charArray0[1] = 's';
      ArrayList<String> arrayList0 = new ArrayList<String>();
      jSONScanner0.scanStringArray(arrayList0, '=');
      // Undeclared exception!
      try { 
        jSONScanner0.numberString();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 9);
      jSONReaderScanner0.stringVal();
      jSONReaderScanner0.longValue();
      char char0 = '^';
      jSONReaderScanner0.scanFloat('^');
      jSONReaderScanner0.bytesValue();
      Class<Locale.LanguageRange> class0 = Locale.LanguageRange.class;
      SymbolTable symbolTable0 = new SymbolTable(1523);
      jSONReaderScanner0.scanLong('^');
      String string0 = "^R^vP/DL";
      int int0 = 2417;
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFieldStringArray(charArray0, class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.util.Locale$LanguageRange
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("toString");
      jSONScanner0.charAt(2048);
      jSONScanner0.nextIdent();
      jSONScanner0.intValue();
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldBigInteger(charArray0);
      jSONScanner0.isEOF();
      assertEquals(18, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 13);
      jSONReaderScanner0.scanInt('{');
      jSONReaderScanner0.scanFieldDecimal(charArray0);
      jSONReaderScanner0.putChar('f');
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner(charArray0, 1085, 1000);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = '';
      charArray0[1] = '_';
      int int0 = 489;
      int int1 = 89;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 489, 89);
      String string0 = null;
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) null;
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanSymbol((SymbolTable) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("fq");
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFalse();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      int int0 = 11;
      JSONScanner jSONScanner0 = new JSONScanner(" -> ", 11);
      char[] charArray0 = new char[8];
      charArray0[0] = '%';
      charArray0[1] = '';
      charArray0[2] = ')';
      jSONScanner0.nextIdent();
      charArray0[3] = 'Z';
      try { 
        jSONScanner0.integerValue();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // -
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("null");
      char char0 = ']';
      jSONReaderScanner0.scanDouble(']');
      // Undeclared exception!
      try { 
        jSONReaderScanner0.floatValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = '(';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 82, (-1846));
      jSONReaderScanner0.scanFieldIntArray(charArray0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanHex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal state. (
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("");
      jSONScanner0.isBlankInput();
      char char0 = 'A';
      jSONScanner0.scanUUID('A');
      // Undeclared exception!
      try { 
        jSONScanner0.nextTokenWithColon();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - \u001A, info : pos 0, json : 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = '.';
      charArray0[1] = 'Q';
      charArray0[2] = '6';
      charArray0[3] = 'r';
      charArray0[4] = '/';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 6, 56);
      jSONReaderScanner0.scanNumber();
      jSONReaderScanner0.close();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextIdent();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      String string0 = ".K1ZFO_3FH3";
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(".K1ZFO_3FH3");
      char[] charArray0 = new char[1];
      jSONReaderScanner0.nextToken(200);
      jSONReaderScanner0.scanFieldIntArray(charArray0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanTrue();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse true
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("U[.eD*3`wROARGVg-", (-3785));
      char[] charArray0 = new char[3];
      charArray0[0] = 'd';
      charArray0[1] = 'G';
      charArray0[2] = 'R';
      jSONReaderScanner0.scanFieldDecimal(charArray0);
      jSONReaderScanner0.features = 49;
      char[] charArray1 = new char[0];
      jSONReaderScanner0.scanFieldLong(charArray1);
      jSONReaderScanner0.indexOf('G', 49);
      JSONScanner jSONScanner0 = new JSONScanner("gumP~");
      jSONScanner0.scanFieldBoolean(charArray1);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanNullOrNew();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse null or new
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(", json : ");
      jSONScanner0.getLocale();
      jSONScanner0.nextToken();
      jSONScanner0.isEOF();
      char[] charArray0 = new char[6];
      charArray0[0] = '>';
      charArray0[1] = '>';
      charArray0[2] = '?';
      charArray0[3] = '&';
      charArray0[4] = '_';
      charArray0[5] = '~';
      // Undeclared exception!
      try { 
        jSONScanner0.arrayCopy(40, charArray0, 40, 40);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 424);
      jSONReaderScanner0.scanFieldSymbol(charArray0);
      jSONReaderScanner0.close();
      Object[] objectArray0 = new Object[0];
      jSONReaderScanner0.lexError((String) null, objectArray0);
      jSONReaderScanner0.nextToken(424);
      jSONReaderScanner0.scanFieldLong(charArray0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.skipComment();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid comment
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("0Qp<~q");
      jSONReaderScanner0.setToken(18);
      jSONReaderScanner0.scanLong('\"');
      jSONReaderScanner0.scanInt('>');
      char[] charArray0 = new char[8];
      charArray0[0] = '>';
      charArray0[1] = '>';
      charArray0[2] = '>';
      charArray0[3] = '>';
      charArray0[4] = '>';
      charArray0[5] = '>';
      charArray0[6] = '>';
      charArray0[7] = '>';
      jSONReaderScanner0.scanFieldFloat(charArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("ww");
      jSONScanner0.scanDecimal('T');
      boolean boolean0 = jSONScanner0.isEnabled(8192, (-1109948065));
      assertEquals(989, jSONScanner0.getFeatures());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = 'e';
      charArray0[1] = '8';
      charArray0[2] = 'Q';
      charArray0[3] = ']';
      charArray0[4] = '3';
      charArray0[5] = 'O';
      charArray0[6] = ')';
      charArray0[7] = '{';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 53);
      jSONReaderScanner0.scanIdent();
      jSONReaderScanner0.longValue();
      jSONReaderScanner0.close();
      int int0 = 1469;
      SymbolTable symbolTable0 = new SymbolTable(1469);
      // Undeclared exception!
      try { 
        JSONLexerBase.readString(charArray0, 31);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = 'd';
      charArray0[1] = '\\';
      int int0 = (-226);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 40, (-226));
      jSONReaderScanner0.scanInt('2');
      jSONReaderScanner0.scanFieldDate(charArray0);
      jSONReaderScanner0.getLocale();
      String string0 = " G";
      jSONReaderScanner0.info();
      JSONScanner jSONScanner0 = new JSONScanner(" G", (-226));
      // Undeclared exception!
      try { 
        jSONScanner0.copyTo(40, (-226), charArray0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      String string0 = "unclosed.str.lit";
      JSONScanner jSONScanner0 = new JSONScanner("unclosed.str.lit", 50900);
      jSONScanner0.bytesValue();
      jSONScanner0.hasSpecial = false;
      // Undeclared exception!
      try { 
        jSONScanner0.scanSymbol((SymbolTable) null, '}');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed.str
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("uL", 76);
      jSONReaderScanner0.nextToken(47);
      char char0 = 'H';
      jSONReaderScanner0.intValue();
      jSONReaderScanner0.scanDecimal('H');
      jSONReaderScanner0.isRef();
      jSONReaderScanner0.close();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.isBlankInput();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONReaderScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("undefined");
      char[] charArray0 = new char[3];
      jSONScanner0.scanBoolean('m');
      charArray0[0] = '/';
      jSONScanner0.scanFloat('/');
      jSONScanner0.matchField(charArray0);
      charArray0[1] = '(';
      jSONScanner0.scanInt('s');
      jSONScanner0.scanIdent();
      jSONScanner0.np = 1242;
      jSONScanner0.skipWhitespace();
      jSONScanner0.scanDouble('(');
      charArray0[2] = 'Z';
      jSONScanner0.scanFieldString(charArray0);
      jSONScanner0.nextIdent();
      SymbolTable symbolTable0 = new SymbolTable(1242);
      jSONScanner0.scanFieldStringArray(charArray0, (-95), symbolTable0);
      assertEquals(20, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      char[] charArray0 = new char[1];
      char char0 = 'H';
      charArray0[0] = 'H';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 3303);
      jSONReaderScanner0.scanFieldUUID(charArray0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.matchField2(charArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("FFVa$O1", (-1721262316));
      char[] charArray0 = new char[5];
      charArray0[0] = '0';
      charArray0[1] = 'M';
      charArray0[2] = '2';
      charArray0[3] = 'y';
      charArray0[4] = ')';
      jSONReaderScanner0.scanFieldSymbol(charArray0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.numberString();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      int int0 = 99;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("]GJ fX|", 99);
      jSONReaderScanner0.nextToken();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextTokenWithColon(99);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - G, info : 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("fieldName");
      char char0 = 'f';
      jSONReaderScanner0.nextTokenWithChar('f');
      char char1 = '1';
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextTokenWithChar('1');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match 1 - e, info : 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      char[] charArray0 = new char[0];
      int int0 = 83;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 83);
      jSONReaderScanner0.scanNumber();
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 0);
      jSONScanner0.scanFieldInt(charArray0);
      jSONReaderScanner0.getCurrent();
      jSONScanner0.scanFloat('\u0000');
      int int1 = 63;
      SymbolTable symbolTable0 = new SymbolTable(512);
      int int2 = 117;
      char[] charArray1 = new char[8];
      charArray1[0] = '\u0000';
      charArray1[1] = '\u0000';
      charArray1[2] = '\u0000';
      charArray1[3] = '\u0000';
      charArray1[4] = '5';
      charArray1[5] = '\u0000';
      charArray1[6] = '\u0000';
      // Undeclared exception!
      try { 
        symbolTable0.addSymbol(charArray1, (-151), 117, (-392));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = '\'';
      charArray0[1] = 'b';
      charArray0[2] = 'G';
      charArray0[3] = 'D';
      charArray0[4] = 'm';
      charArray0[5] = 'h';
      charArray0[6] = '3';
      charArray0[7] = '.';
      int int0 = 1325;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 1325);
      jSONReaderScanner0.skipWhitespace();
      Class<Object> class0 = Object.class;
      SymbolTable symbolTable0 = new SymbolTable(1325);
      int int1 = 116;
      int int2 = (-272);
      String string0 = ", ";
      // Undeclared exception!
      try { 
        symbolTable0.addSymbol("RWQ('VY@/!6PE)g", 1, 1325, 70);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      StringReader stringReader0 = new StringReader("null");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0, 3667);
      char[] charArray0 = new char[8];
      jSONReaderScanner0.scanFieldDate(charArray0);
      charArray0[0] = 'O';
      charArray0[1] = 'n';
      charArray0[2] = '2';
      charArray0[3] = 's';
      charArray0[4] = 'c';
      jSONReaderScanner0.scanUUID('y');
      jSONReaderScanner0.scanFieldFloatArray(charArray0);
      stringReader0.skip((-2));
      charArray0[5] = '\\';
      charArray0[6] = 'W';
      charArray0[7] = 'U';
      jSONReaderScanner0.scanFieldDouble(charArray0);
      jSONReaderScanner0.token();
      jSONReaderScanner0.resetStringPosition();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.skipComment();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid comment
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = '.';
      charArray0[1] = 'T';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 10);
      jSONReaderScanner0.intValue();
      jSONReaderScanner0.scanFieldFloat(charArray0);
      jSONReaderScanner0.scanFieldLong(charArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 0);
      Feature feature0 = Feature.UseObjectArray;
      Locale locale0 = Locale.FRENCH;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
      jSONScanner0.calendar = (Calendar) mockGregorianCalendar0;
      jSONScanner0.ch = '.';
      jSONScanner0.scanLong('.');
      jSONScanner0.config(feature0, true);
      jSONScanner0.scanFieldInt(charArray0);
      jSONScanner0.getCurrent();
      JSONLexerBase.isWhitespace('G');
      jSONScanner0.scanFieldDecimal(charArray0);
      assertEquals(66525, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      int int0 = (-441);
      JSONScanner jSONScanner0 = new JSONScanner("scan null error", (-441));
      jSONScanner0.putChar('[');
      char[] charArray0 = new char[4];
      Feature feature0 = Feature.IgnoreAutoType;
      jSONScanner0.config(feature0, true);
      charArray0[0] = 'F';
      jSONScanner0.stringDefaultValue = "scan null error";
      jSONScanner0.isRef();
      charArray0[1] = 'T';
      charArray0[2] = 'X';
      jSONScanner0.timeZone = null;
      charArray0[3] = 'q';
      SymbolTable symbolTable0 = null;
      try {
        symbolTable0 = new SymbolTable(0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1185263
         //
         verifyException("com.alibaba.fastjson.parser.SymbolTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = 'W';
      charArray0[1] = 'W';
      charArray0[2] = '*';
      charArray0[3] = '3';
      charArray0[4] = 'l';
      charArray0[5] = 'G';
      charArray0[6] = 'k';
      charArray0[7] = 'D';
      charArray0[8] = 't';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 21, (-79));
      jSONReaderScanner0.scanFieldString(charArray0);
      jSONReaderScanner0.scanIdent();
      jSONReaderScanner0.integerValue();
      jSONReaderScanner0.charArrayCompare(charArray0);
      jSONReaderScanner0.scanFieldFloatArray2(charArray0);
      jSONReaderScanner0.stringDefaultValue();
      jSONReaderScanner0.isEOF();
      jSONReaderScanner0.charAt(123);
      char char0 = jSONReaderScanner0.getCurrent();
      assertEquals('*', char0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = 'm';
      char char0 = '\\';
      charArray0[1] = '\\';
      charArray0[2] = 'O';
      charArray0[3] = '<';
      char char1 = '#';
      charArray0[4] = '#';
      int int0 = 16;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 16);
      int int1 = 95;
      jSONReaderScanner0.sub_chars(95, 16);
      Class<String> class0 = String.class;
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFieldStringArray(charArray0, class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.String cannot be cast to java.util.Collection
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(" - ", (-135));
      char[] charArray0 = new char[3];
      char char0 = 'c';
      charArray0[0] = 'c';
      char char1 = 'j';
      charArray0[1] = 'j';
      char char2 = '4';
      charArray0[2] = '4';
      jSONScanner0.scanFieldFloat(charArray0);
      JSONLexerBase.readString(charArray0, 1);
      jSONScanner0.nextIdent();
      jSONScanner0.scanISO8601DateIfMatch();
      // Undeclared exception!
      try { 
        jSONScanner0.scanFalse();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = 'M';
      char char0 = '#';
      charArray0[1] = '#';
      charArray0[2] = 'n';
      charArray0[3] = 'X';
      int int0 = 847;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 847);
      jSONReaderScanner0.hasSpecial = true;
      Class<Object> class0 = Object.class;
      jSONReaderScanner0.newCollectionByType(class0);
      jSONReaderScanner0.close();
      jSONReaderScanner0.setToken(847);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanUUID('i');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("new");
      jSONReaderScanner0.scanDate('}');
      jSONReaderScanner0.eofPos = (-183);
      jSONReaderScanner0.longValue();
      long long0 = jSONReaderScanner0.longValue();
      assertEquals(0L, long0);
      
      Feature feature0 = Feature.InternFieldNames;
      boolean boolean0 = jSONReaderScanner0.isEnabled(feature0);
      assertTrue(boolean0);
      
      jSONReaderScanner0.eofPos = 8192;
      jSONReaderScanner0.scanDouble('}');
      jSONReaderScanner0.isEOF();
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("true");
      jSONReaderScanner0.close();
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFieldLong(charArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      int int0 = (-730);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("\u0000", (-730));
      jSONReaderScanner0.pos();
      char char0 = ';';
      jSONReaderScanner0.putChar(';');
      char char1 = '6';
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextTokenWithChar('6');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match 6 - \u0000, info : 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("-+c\"6{>o");
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      jSONReaderScanner0.scanString('c');
      jSONReaderScanner0.scanDecimal(' ');
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("k6^;b'BzjTpxyc`U%EI", (-1467959947));
      char[] charArray0 = new char[9];
      charArray0[0] = 'n';
      charArray0[1] = ']';
      jSONReaderScanner0.scanDate('N');
      jSONReaderScanner0.pos = (-1467959947);
      charArray0[2] = ';';
      charArray0[3] = '+';
      charArray0[4] = '/';
      charArray0[5] = '\\';
      charArray0[6] = 'z';
      charArray0[7] = 'c';
      charArray0[8] = 'p';
      jSONReaderScanner0.scanFieldDecimal(charArray0);
      TimeZone timeZone0 = jSONReaderScanner0.getTimeZone();
      timeZone0.setRawOffset(921);
      jSONReaderScanner0.setTimeZone(timeZone0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("not match ", (-1513));
      jSONScanner0.next();
      char[] charArray0 = new char[6];
      charArray0[0] = 'x';
      charArray0[1] = ':';
      charArray0[2] = 'x';
      charArray0[3] = 'i';
      charArray0[4] = '&';
      charArray0[5] = 'i';
      jSONScanner0.scanFieldFloat(charArray0);
      jSONScanner0.scanNumber();
      jSONScanner0.indexOf('_', (-1513));
      jSONScanner0.scanFieldSymbol(charArray0);
      SymbolTable symbolTable0 = new SymbolTable(1998);
      jSONScanner0.scanSymbol(symbolTable0);
      assertEquals(18, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("sw)UW<");
      jSONReaderScanner0.isRef();
      float float0 = jSONReaderScanner0.scanFloat('J');
      assertEquals(0.0F, float0, 0.01F);
      
      long long0 = jSONReaderScanner0.scanLong('6');
      assertEquals(0L, long0);
      
      jSONReaderScanner0.isRef();
      JSONLexerBase.isWhitespace('p');
      char[] charArray0 = new char[2];
      charArray0[0] = 'p';
      charArray0[1] = 'p';
      jSONReaderScanner0.matchField(charArray0);
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'U';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 52429);
      int int0 = jSONReaderScanner0.matchStat();
      assertEquals(0, int0);
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("TzW(w_.,EO[((");
      char[] charArray0 = new char[7];
      charArray0[0] = '\\';
      charArray0[1] = 'H';
      jSONScanner0.features = 1877;
      charArray0[2] = 'm';
      charArray0[3] = 'T';
      charArray0[4] = '_';
      charArray0[5] = '-';
      charArray0[6] = '(';
      jSONScanner0.scanFieldBigInteger(charArray0);
      jSONScanner0.stringDefaultValue = "TzW(w_.,EO[((";
      char[] charArray1 = new char[0];
      jSONScanner0.scanFieldFloat(charArray1);
      jSONScanner0.isRef();
      Feature feature0 = Feature.InitStringFieldAsEmpty;
      jSONScanner0.config(feature0, false);
      jSONScanner0.scanBoolean('8');
      jSONScanner0.getLocale();
      PipedReader pipedReader0 = null;
      try {
        pipedReader0 = new PipedReader((PipedWriter) null, 81);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("Q9ne", 125);
      char[] charArray0 = new char[0];
      jSONReaderScanner0.scanFieldDouble(charArray0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.matchField2(charArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{3POG.e@.-6SV^H47Z^", 120);
      char[] charArray0 = new char[9];
      charArray0[0] = '2';
      charArray0[1] = 'b';
      charArray0[2] = 'D';
      charArray0[3] = 'y';
      charArray0[4] = 'q';
      charArray0[5] = ']';
      jSONScanner0.scanBoolean(';');
      ArrayList<String> arrayList0 = new ArrayList<String>();
      jSONScanner0.scanStringArray(arrayList0, '\"');
      charArray0[6] = 'S';
      charArray0[7] = '\"';
      charArray0[8] = '}';
      jSONScanner0.scanFieldSymbol(charArray0);
      char[] charArray1 = new char[0];
      jSONScanner0.scanFieldFloatArray(charArray1);
      Feature feature0 = Feature.AllowArbitraryCommas;
      jSONScanner0.config(feature0, false);
      assertEquals((-2), jSONScanner0.matchStat);
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("{3POG.e@.-6SV^H47Z^", 120);
      jSONReaderScanner0.close();
      assertEquals(120, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("Z:r|1c%u%");
      Locale locale0 = Locale.ENGLISH;
      jSONReaderScanner0.setLocale(locale0);
      SymbolTable symbolTable0 = new SymbolTable(115);
      jSONReaderScanner0.addSymbol(115, 26, 115, symbolTable0);
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("true", 3392903);
      char[] charArray0 = new char[6];
      charArray0[0] = '';
      charArray0[1] = 'x';
      charArray0[2] = 'y';
      charArray0[3] = 'a';
      charArray0[4] = '3';
      charArray0[5] = 'n';
      jSONReaderScanner0.scanFieldUUID(charArray0);
      jSONReaderScanner0.getCalendar();
      assertEquals((-2), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("rw2W2Jh");
      jSONScanner0.nextIdent();
      jSONScanner0.tokenName();
      char[] charArray0 = new char[9];
      char char0 = 'Q';
      charArray0[0] = 'Q';
      charArray0[1] = 'Y';
      charArray0[2] = '9';
      charArray0[3] = ')';
      char char1 = '_';
      charArray0[4] = '_';
      jSONScanner0.hasSpecial = false;
      charArray0[5] = '&';
      charArray0[6] = 'l';
      int int0 = 114;
      jSONScanner0.sp = 114;
      charArray0[7] = 'T';
      charArray0[8] = '4';
      // Undeclared exception!
      try { 
        jSONScanner0.arrayCopy((-769), charArray0, (-769), (-769));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("\"\"s{th\u0007", 4096);
      jSONReaderScanner0.scanDouble(')');
      char[] charArray0 = new char[9];
      charArray0[0] = 'Q';
      charArray0[1] = ')';
      charArray0[2] = ')';
      charArray0[3] = ')';
      charArray0[4] = ')';
      charArray0[5] = ')';
      charArray0[6] = ')';
      charArray0[7] = ')';
      charArray0[8] = ')';
      jSONReaderScanner0.scanFieldFloatArray(charArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("syntax error");
      assertEquals(0, jSONScanner0.matchStat);
      
      jSONScanner0.scanDate('9');
      jSONScanner0.getTimeZone();
      char[] charArray0 = new char[9];
      charArray0[0] = '9';
      charArray0[1] = '9';
      charArray0[2] = '9';
      charArray0[3] = '9';
      charArray0[4] = 'u';
      charArray0[5] = '9';
      charArray0[6] = '9';
      charArray0[7] = '9';
      Class<Object> class0 = Object.class;
      jSONScanner0.scanFieldStringArray(charArray0, class0);
      jSONScanner0.scanISO8601DateIfMatch(false);
      charArray0[8] = '9';
      jSONScanner0.scanFieldInt(charArray0);
      Feature feature0 = Feature.NonStringKeyAsString;
      boolean boolean0 = jSONScanner0.isEnabled(feature0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("qy?6Jsq+Dl3Tpx", 2288);
      char[] charArray0 = new char[6];
      charArray0[0] = 'h';
      jSONReaderScanner0.tokenName();
      charArray0[1] = '@';
      jSONReaderScanner0.scanNumber();
      charArray0[2] = 'q';
      charArray0[3] = 'o';
      charArray0[4] = 'B';
      charArray0[5] = '4';
      jSONReaderScanner0.scanFieldLong(charArray0);
      jSONReaderScanner0.next();
      JSONScanner jSONScanner0 = new JSONScanner("qy?6Jsq+Dl3Tpx", (-2));
      jSONScanner0.scanUUID('|');
      jSONScanner0.scanISO8601DateIfMatch(false);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed string : \u001A
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      StringReader stringReader0 = new StringReader("iCh");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      boolean boolean0 = jSONReaderScanner0.scanBoolean(';');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      String string0 = "true";
      int int0 = 123;
      JSONScanner jSONScanner0 = new JSONScanner("true", 123);
      jSONScanner0.scanNumber();
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldFloatArray2(charArray0);
      jSONScanner0.matchField2(charArray0);
      Class<Object> class0 = Object.class;
      // Undeclared exception!
      try { 
        JSONLexerBase.readString(charArray0, 40);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      String string0 = "Set";
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("Set");
      // Undeclared exception!
      try { 
        jSONReaderScanner0.integerValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("=NSxx");
      jSONScanner0.intValue();
      char char0 = '\'';
      char[] charArray0 = new char[0];
      jSONScanner0.sbuf = charArray0;
      jSONScanner0.setToken(2962);
      int int0 = 47;
      jSONScanner0.pos = 47;
      jSONScanner0.isRef();
      jSONScanner0.scanUUID('\'');
      jSONScanner0.scanISO8601DateIfMatch();
      char[] charArray1 = new char[0];
      jSONScanner0.isBlankInput();
      jSONScanner0.scanFieldString(charArray1);
      jSONScanner0.scanFieldLong(charArray1);
      jSONScanner0.scanFieldInt(charArray1);
      jSONScanner0.info();
      // Undeclared exception!
      try { 
        jSONScanner0.decimalValue(true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("`rxbKjrN,");
      Feature feature0 = Feature.SupportArrayToBean;
      jSONReaderScanner0.config(feature0, false);
      JSONScanner jSONScanner0 = new JSONScanner("`rxbKjrN,");
      int int0 = 13;
      SymbolTable symbolTable0 = new SymbolTable(26);
      // Undeclared exception!
      try { 
        jSONScanner0.addSymbol(13, 683, 51, symbolTable0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("[G)zz1+7vEhCw_l[N#", 2118);
      jSONReaderScanner0.getFeatures();
      jSONReaderScanner0.bytesValue();
      SymbolTable symbolTable0 = new SymbolTable(127);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanSymbol(symbolTable0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal identifier : [
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("2 QfN7'fVZ~H7pHNh");
      char[] charArray0 = new char[1];
      charArray0[0] = 'f';
      jSONScanner0.scanFieldLong(charArray0);
      jSONScanner0.nextToken();
      jSONScanner0.bytesValue();
      jSONScanner0.scanType("2 QfN7'fVZ~H7pHNh");
      char char0 = ' ';
      // Undeclared exception!
      try { 
        jSONScanner0.setTimeZone('y', ' ', 'c');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      int int0 = (-1843987232);
      JSONScanner jSONScanner0 = new JSONScanner("]Tf+Na )3\"N>,f|\"", (-1843987232));
      jSONScanner0.longValue();
      char char0 = '\\';
      char char1 = '#';
      // Undeclared exception!
      try { 
        jSONScanner0.setTimeZone('\\', '\\', '\\', '#', '#');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = '3';
      charArray0[1] = 'g';
      char char0 = 'Z';
      charArray0[2] = 'Z';
      charArray0[3] = 'C';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 8192, 8192);
      jSONReaderScanner0.scanFieldInt(charArray0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFalse();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = 'M';
      charArray0[1] = '`';
      charArray0[2] = 'K';
      charArray0[3] = '~';
      charArray0[4] = 'l';
      charArray0[5] = '.';
      charArray0[6] = 'p';
      int int0 = 27;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 27, 27);
      jSONReaderScanner0.ch = 'M';
      jSONReaderScanner0.scanFieldSymbol(charArray0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanHex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal state. M
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      String string0 = "i*ZFS!";
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("i*ZFS!", 93);
      char[] charArray0 = new char[2];
      char char0 = '4';
      charArray0[0] = '4';
      charArray0[1] = 'w';
      jSONReaderScanner0.scanFieldFloatArray2(charArray0);
      jSONReaderScanner0.tokenName();
      jSONReaderScanner0.close();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanDecimal('p');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      int int0 = (-1513);
      JSONScanner jSONScanner0 = new JSONScanner("not match ", (-1513));
      char char0 = 'x';
      char char1 = ':';
      char char2 = 'i';
      char[] charArray0 = new char[6];
      charArray0[0] = 'x';
      charArray0[1] = ':';
      charArray0[2] = 'x';
      charArray0[3] = 'i';
      charArray0[4] = '&';
      charArray0[5] = 'i';
      jSONScanner0.scanFieldFloat(charArray0);
      // Undeclared exception!
      try { 
        jSONScanner0.setTime('t', 'x', ':', 'x', ':', 'i');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("Si+K9<[O");
      jSONReaderScanner0.scanType("Si+K9<[O");
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextTokenWithColon(48);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - S, info : 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("null");
      int int0 = jSONScanner0.token();
      assertEquals(0, int0);
      assertEquals(989, jSONScanner0.getFeatures());
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("null", 0);
      char[] charArray0 = new char[7];
      charArray0[0] = 'o';
      charArray0[1] = '(';
      charArray0[2] = 'Z';
      charArray0[3] = 'c';
      charArray0[4] = '6';
      charArray0[5] = '`';
      charArray0[6] = '*';
      jSONReaderScanner0.charArrayCompare(charArray0);
      assertEquals(0, jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = '}';
      charArray0[1] = 'K';
      charArray0[2] = 'u';
      charArray0[3] = 'v';
      charArray0[4] = '7';
      charArray0[5] = 'w';
      charArray0[6] = 's';
      charArray0[7] = ' ';
      int int0 = 48;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 48, 48);
      SymbolTable symbolTable0 = new SymbolTable(48);
      jSONReaderScanner0.scanFieldBoolean(charArray0);
      String string0 = "TreeSet";
      int int1 = 259;
      int int2 = 26;
      // Undeclared exception!
      try { 
        symbolTable0.addSymbol(charArray0, 259, 1718);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 259
         //
         verifyException("com.alibaba.fastjson.parser.SymbolTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("t%BZ>#");
      jSONReaderScanner0.token = (-1477);
      char char0 = 'F';
      jSONReaderScanner0.scanDate('F');
      jSONReaderScanner0.sp = (-1);
      jSONReaderScanner0.isEOF();
      JSONLexerBase.isWhitespace('@');
      int int0 = 14;
      int int1 = 2184;
      int int2 = 1060;
      SimpleTimeZone simpleTimeZone0 = null;
      try {
        simpleTimeZone0 = new SimpleTimeZone((-1), "t%BZ>#", 14, (-1), 50, 14, 9969, (-24), 2184, (-231), 1060);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal start month 14
         //
         verifyException("java.util.SimpleTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("");
      char[] charArray0 = new char[8];
      charArray0[0] = '%';
      charArray0[1] = 'Y';
      charArray0[2] = 'G';
      charArray0[3] = 'I';
      charArray0[4] = 'z';
      jSONScanner0.stringDefaultValue = "";
      charArray0[5] = '~';
      charArray0[6] = '#';
      charArray0[7] = 'l';
      jSONScanner0.scanFieldDouble(charArray0);
      // Undeclared exception!
      try { 
        jSONScanner0.nextTokenWithColon((-2147483647));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - \u001A, info : pos 0, json : 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("L&-A4t(Wp9EX.d", 51);
      char[] charArray0 = new char[6];
      charArray0[0] = '5';
      charArray0[1] = 'M';
      jSONScanner0.scanString('v');
      charArray0[2] = '\"';
      charArray0[3] = '%';
      jSONScanner0.token = 9974;
      char char0 = 'b';
      // Undeclared exception!
      try { 
        jSONScanner0.scanNullOrNew();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse null or new
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("0", (-1175));
      char[] charArray0 = new char[2];
      charArray0[0] = 'h';
      charArray0[1] = '_';
      jSONScanner0.scanISO8601DateIfMatch(true);
      jSONScanner0.bp = 493;
      jSONScanner0.scanFieldDate(charArray0);
      // Undeclared exception!
      jSONScanner0.scanString();
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("");
      char[] charArray0 = new char[2];
      charArray0[0] = 'W';
      jSONReaderScanner0.bp = (-529);
      charArray0[1] = 'n';
      jSONReaderScanner0.nextToken(3669);
      Class<String> class0 = String.class;
      jSONReaderScanner0.scanFieldStringArray(charArray0, class0);
      jSONReaderScanner0.scanFieldDate(charArray0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.doubleValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      int int0 = 692;
      JSONScanner jSONScanner0 = new JSONScanner("R=l3'cNZxam&9", 692);
      jSONScanner0.nextToken(692);
      jSONScanner0.nextToken(692);
      jSONScanner0.resetStringPosition();
      char[] charArray0 = null;
      // Undeclared exception!
      try { 
        jSONScanner0.matchField2((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = 'A';
      charArray0[1] = 'l';
      charArray0[2] = 'y';
      charArray0[3] = 'a';
      charArray0[4] = 'y';
      charArray0[5] = '=';
      charArray0[6] = '}';
      charArray0[7] = '%';
      charArray0[8] = '@';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 15);
      int int0 = jSONReaderScanner0.intValue();
      assertEquals(0, int0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("", 44);
      char[] charArray0 = new char[5];
      charArray0[0] = '>';
      charArray0[1] = 'D';
      charArray0[2] = 'J';
      charArray0[3] = 'F';
      charArray0[4] = '0';
      jSONScanner0.scanFieldUUID(charArray0);
      jSONScanner0.scanDecimal('M');
      // Undeclared exception!
      try { 
        jSONScanner0.nextTokenWithColon((-1));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - \u001A, info : pos 0, json : 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      String string0 = "Set";
      JSONScanner jSONScanner0 = new JSONScanner("Set", 44);
      // Undeclared exception!
      try { 
        jSONScanner0.scanNullOrNew();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse null or new
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      int int0 = 74;
      JSONScanner jSONScanner0 = new JSONScanner("undefined", 74);
      Class<Object> class0 = Object.class;
      char char0 = 'R';
      jSONScanner0.scanEnum(class0, (SymbolTable) null, 'R');
      jSONScanner0.resetStringPosition();
      // Undeclared exception!
      try { 
        jSONScanner0.numberString();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = '}';
      charArray0[1] = 'l';
      charArray0[2] = 'E';
      charArray0[3] = '|';
      charArray0[4] = ')';
      charArray0[5] = 'F';
      charArray0[6] = '!';
      charArray0[7] = '+';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 46, 68);
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      jSONReaderScanner0.scanDecimal('k');
      assertEquals(68, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("new");
      char[] charArray0 = new char[8];
      charArray0[0] = '.';
      charArray0[1] = 'B';
      charArray0[2] = 'n';
      charArray0[3] = '}';
      charArray0[4] = 'J';
      charArray0[5] = 'N';
      charArray0[6] = 'Q';
      charArray0[7] = 'h';
      SymbolTable symbolTable0 = new SymbolTable(996);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFieldStringArray(charArray0, 996, symbolTable0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 19);
      boolean boolean0 = true;
      jSONReaderScanner0.hasSpecial = true;
      jSONReaderScanner0.charAt(48);
      jSONReaderScanner0.setToken(19);
      jSONReaderScanner0.scanUUID('x');
      Feature feature0 = Feature.SupportNonPublicField;
      // Undeclared exception!
      try { 
        jSONReaderScanner0.matchField2(charArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("null");
      char char0 = 't';
      jSONReaderScanner0.putChar('t');
      char char1 = '';
      jSONReaderScanner0.scanInt('');
      jSONReaderScanner0.numberString();
      int int0 = 4096;
      JSONScanner jSONScanner0 = new JSONScanner("$7$aE3x\"p<<.Q", 4096);
      // Undeclared exception!
      try { 
        jSONScanner0.scanFalse();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("BG");
      char[] charArray0 = new char[8];
      charArray0[0] = 'c';
      charArray0[1] = '}';
      charArray0[2] = 'g';
      charArray0[3] = 'L';
      charArray0[4] = '~';
      charArray0[5] = '5';
      charArray0[6] = '_';
      charArray0[7] = 'J';
      boolean boolean0 = jSONReaderScanner0.matchField(charArray0);
      boolean boolean1 = jSONReaderScanner0.isEnabled((-426));
      assertFalse(boolean1 == boolean0);
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      String string0 = "F";
      int int0 = (-1548);
      JSONScanner jSONScanner0 = new JSONScanner("F", (-1548));
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-1548), "F");
      jSONScanner0.setTimeZone(simpleTimeZone0);
      jSONScanner0.putChar('I');
      char char0 = '[';
      // Undeclared exception!
      try { 
        jSONScanner0.nextTokenWithChar('[');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match [ - F, info : pos 0, json : F
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      JSONLexerBase.isWhitespace('C');
      char[] charArray0 = new char[7];
      charArray0[0] = '&';
      charArray0[1] = 'C';
      charArray0[2] = 'C';
      charArray0[3] = 'C';
      charArray0[4] = 'C';
      charArray0[5] = 'C';
      charArray0[6] = 'C';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 20);
      jSONReaderScanner0.scanDate(':');
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner(charArray0, 20, 48);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      StringReader stringReader0 = new StringReader("V!) Y0X;J.>O\"c2Z");
      int int0 = 7;
      stringReader0.markSupported();
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0, 7);
      char[] charArray0 = new char[1];
      stringReader0.ready();
      charArray0[0] = ']';
      SymbolTable symbolTable0 = new SymbolTable(26);
      jSONReaderScanner0.addSymbol(7, 7, 46, symbolTable0);
      stringReader0.ready();
      stringReader0.ready();
      jSONReaderScanner0.scanFieldBoolean(charArray0);
      // Undeclared exception!
      try { 
        stringReader0.read(charArray0, 123, 26);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      char[] charArray0 = new char[2];
      char char0 = 's';
      charArray0[0] = 's';
      charArray0[1] = '\'';
      int int0 = 123;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 123, 123);
      jSONReaderScanner0.scanDouble('s');
      Feature feature0 = Feature.IgnoreNotMatch;
      jSONReaderScanner0.matchField(charArray0);
      jSONReaderScanner0.scanFieldIntArray(charArray0);
      jSONReaderScanner0.sp = 123;
      jSONReaderScanner0.isEnabled(feature0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextToken(123);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // EOF error
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\":\"");
      jSONScanner0.scanUUID('C');
      char[] charArray0 = new char[5];
      charArray0[0] = 'C';
      charArray0[1] = 'C';
      charArray0[2] = 'C';
      charArray0[3] = '#';
      charArray0[4] = 'C';
      jSONScanner0.scanFieldFloatArray2(charArray0);
      jSONScanner0.indexOf('C', (-489));
      char[] charArray1 = new char[2];
      charArray1[0] = 'C';
      charArray1[1] = 'C';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray1, 94);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.copyTo((-2), (-2), charArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = '3';
      charArray0[1] = '*';
      charArray0[2] = 'x';
      charArray0[3] = '_';
      charArray0[4] = 'A';
      charArray0[5] = 's';
      charArray0[6] = '{';
      charArray0[7] = 'f';
      charArray0[8] = 'n';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 2447, 2447);
      SymbolTable symbolTable0 = new SymbolTable(91);
      jSONReaderScanner0.scanSymbol(symbolTable0, 'A');
      assertEquals('s', jSONReaderScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = '{';
      char char0 = ';';
      charArray0[1] = ';';
      charArray0[2] = 'm';
      int int0 = 54;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 54);
      jSONReaderScanner0.skipWhitespace();
      int int1 = 3110;
      jSONReaderScanner0.subString(54, 3110);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.numberString();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("", 44);
      jSONScanner0.scanDecimal('M');
      // Undeclared exception!
      try { 
        jSONScanner0.nextTokenWithColon((-1));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - \u001A, info : pos 0, json : 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("AOR{ 6v6o?U~8]Q4*", 847);
      jSONScanner0.sp = 65;
      jSONScanner0.features = 247;
      Feature feature0 = Feature.SupportAutoType;
      jSONScanner0.isEnabled(feature0);
      char[] charArray0 = new char[5];
      ArrayList<String> arrayList0 = new ArrayList<String>();
      jSONScanner0.scanStringArray(arrayList0, '9');
      charArray0[0] = 'H';
      charArray0[1] = '*';
      charArray0[2] = 'S';
      charArray0[3] = '9';
      charArray0[4] = 'a';
      jSONScanner0.scanFieldDate(charArray0);
      jSONScanner0.setTimeZone((TimeZone) null);
      jSONScanner0.scanNumber();
      StringReader stringReader0 = new StringReader("AOR{ 6v6o?U~8]Q4*");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0);
      Class<Object> class0 = Object.class;
      SymbolTable symbolTable0 = new SymbolTable(65);
      jSONReaderScanner0.scanEnum(class0, symbolTable0, 'S');
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextTokenWithColon();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - A, info : 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      int int0 = 12;
      JSONScanner jSONScanner0 = new JSONScanner("fastjson.parser.deny", 12);
      char char0 = 'j';
      jSONScanner0.scanDate('j');
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 12, 12);
      int int1 = 13;
      // Undeclared exception!
      try { 
        jSONScanner0.skipComment();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid comment
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("", 44);
      // Undeclared exception!
      try { 
        jSONScanner0.nextTokenWithColon((-2147483647));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - \u001A, info : pos 0, json : 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("");
      jSONScanner0.setToken(51);
      assertEquals(51, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 2291);
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      jSONReaderScanner0.scanInt('}');
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      String string0 = "";
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("");
      char[] charArray0 = new char[0];
      jSONReaderScanner0.scanFieldString(charArray0);
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      char char0 = 'R';
      jSONReaderScanner0.scanStringArray(set0, 'R');
      jSONReaderScanner0.sub_chars(68, 68);
      int int0 = 538;
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextTokenWithChar('^');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match ^ - \u0000, info : 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'J';
      int int0 = 0;
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 0);
      jSONScanner0.ch = 'J';
      // Undeclared exception!
      try { 
        jSONScanner0.decimalValue(true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("E7cFP1~#", (-199));
      // Undeclared exception!
      try { 
        jSONReaderScanner0.numberString();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("AOR{ 6v6o?U~8]Q4*", 847);
      jSONScanner0.sp = 65;
      jSONScanner0.features = 247;
      Feature feature0 = Feature.SupportAutoType;
      jSONScanner0.isEnabled(feature0);
      char[] charArray0 = new char[5];
      ArrayList<String> arrayList0 = new ArrayList<String>();
      jSONScanner0.scanStringArray(arrayList0, '9');
      charArray0[0] = 'H';
      charArray0[1] = '*';
      charArray0[2] = 'S';
      charArray0[3] = '~';
      charArray0[4] = 'a';
      jSONScanner0.scanFieldDate(charArray0);
      jSONScanner0.setTimeZone((TimeZone) null);
      jSONScanner0.scanNumber();
      StringReader stringReader0 = new StringReader("AOR{ 6v6o?U~8]Q4*");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextTokenWithColon();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - A, info : 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("Tj-m}Ih~Ss?(4rc");
      char[] charArray0 = new char[1];
      char char0 = '&';
      jSONScanner0.matchField2(charArray0);
      jSONScanner0.scanUUID('&');
      char char1 = 'f';
      charArray0[0] = 'f';
      // Undeclared exception!
      try { 
        jSONScanner0.scanTrue();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse true
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("quLPr*fy@R\"b2");
      jSONReaderScanner0.next();
      JSONScanner jSONScanner0 = new JSONScanner("quLPr*fy@R\"b2");
      char[] charArray0 = new char[1];
      jSONScanner0.scanISO8601DateIfMatch(false);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1026, "quLPr*fy@R\"b2");
      jSONScanner0.timeZone = (TimeZone) simpleTimeZone0;
      int int0 = 118;
      jSONReaderScanner0.nextToken(118);
      jSONReaderScanner0.scanDouble('u');
      charArray0[0] = 'u';
      jSONScanner0.scanFieldIntArray(charArray0);
      jSONReaderScanner0.scanInt('u');
      jSONScanner0.scanFieldBoolean(charArray0);
      jSONReaderScanner0.scanNumber();
      jSONReaderScanner0.scanNumber();
      // Undeclared exception!
      try { 
        jSONScanner0.setTime('u', '<', '<', '<', '?', '?');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      char[] charArray0 = new char[13];
      charArray0[0] = '1';
      charArray0[1] = ';';
      charArray0[2] = 'w';
      charArray0[3] = '4';
      charArray0[4] = 'p';
      charArray0[5] = '_';
      int int0 = 1188;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 1188);
      jSONReaderScanner0.scanFieldDouble(charArray0);
      jSONReaderScanner0.scanDate(')');
      int int1 = 18;
      SimpleTimeZone simpleTimeZone0 = null;
      try {
        simpleTimeZone0 = new SimpleTimeZone((-146), "Set", 1325, 1943, 4096, (-1), 1943, 1943, 1325, 18, 123);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal start month 1325
         //
         verifyException("java.util.SimpleTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = 'J';
      charArray0[1] = 'B';
      charArray0[2] = '!';
      charArray0[3] = '=';
      charArray0[4] = '1';
      charArray0[5] = '6';
      charArray0[6] = 'Z';
      charArray0[7] = 'n';
      charArray0[8] = 'a';
      JSONReaderScanner jSONReaderScanner0 = null;
      try {
        jSONReaderScanner0 = new JSONReaderScanner(charArray0, (-744), (-4505));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.CharArrayReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = 'y';
      charArray0[1] = 'J';
      charArray0[2] = 'u';
      charArray0[3] = 'y';
      charArray0[4] = '\\';
      charArray0[5] = '`';
      int int0 = 3284;
      // Undeclared exception!
      try { 
        JSONLexerBase.readString(charArray0, 3284);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed.str.lit
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }
}
