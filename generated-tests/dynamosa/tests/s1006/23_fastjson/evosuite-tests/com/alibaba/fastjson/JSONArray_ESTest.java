/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 03 05:59:22 GMT 2019
 */

package com.alibaba.fastjson;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.TypeReference;
import com.alibaba.fastjson.serializer.SerializerFeature;
import com.alibaba.fastjson.util.ParameterizedTypeImpl;
import java.io.ByteArrayInputStream;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PushbackInputStream;
import java.io.SequenceInputStream;
import java.lang.annotation.Annotation;
import java.lang.reflect.Type;
import java.time.chrono.HijrahEra;
import java.util.Collection;
import java.util.Enumeration;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.ListIterator;
import java.util.stream.Stream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONArray_ESTest extends JSONArray_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(0);
      jSONArray0.fluentSet(0, jSONArray0);
      Class<JSONArray> class0 = JSONArray.class;
      jSONArray0.toJavaList(class0);
      assertEquals(1, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(1868);
      JSONArray jSONArray1 = jSONArray0.fluentSet(1868, 0);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      jSONArray1.addAll((Collection<?>) jSONArray0);
      jSONArray1.relatedArray = (Object) classLoader0;
      jSONArray0.getTimestamp(3089);
      assertEquals(3738, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(1862);
      jSONArray0.fluentSet(1862, 0);
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl((Type[]) null, (Type) null, (Type) null);
      jSONArray0.getObject(0, (Type) parameterizedTypeImpl0);
      assertEquals(1863, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(0);
      jSONArray0.hashCode();
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentSet(3089, (Object) null);
      Annotation[] annotationArray0 = new Annotation[0];
      jSONArray1.toArray(annotationArray0);
      assertEquals(3090, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(0);
      jSONArray0.set(3350, jSONArray0.DEFAULT_GENERATE_FEATURE);
      jSONArray0.toArray();
      assertEquals(3351, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      int int0 = jSONArray0.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(1868);
      JSONArray jSONArray1 = jSONArray0.fluentSet(1868, 0);
      int int0 = jSONArray1.size();
      assertEquals(1869, int0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(pipedInputStream0, pipedInputStream0);
      JSONArray jSONArray1 = jSONArray0.fluentAdd((Object) sequenceInputStream0);
      LinkedHashSet<SequenceInputStream> linkedHashSet0 = new LinkedHashSet<SequenceInputStream>();
      boolean boolean0 = jSONArray1.retainAll(linkedHashSet0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentSet(3089, (Object) null);
      boolean boolean0 = jSONArray1.removeAll(jSONArray0);
      assertEquals(0, jSONArray1.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Stream<Object> stream0 = jSONArray0.stream();
      jSONArray0.fluentSet(647, stream0);
      int int0 = jSONArray0.lastIndexOf(stream0);
      assertEquals(648, jSONArray0.size());
      assertEquals(647, int0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentSet(3089, (Object) null);
      jSONArray1.indexOf((Object) null);
      assertEquals(3090, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.fluentSet(3089, (Object) null);
      jSONArray0.getString(3089);
      assertEquals(3090, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(1868);
      jSONArray0.fluentSet(1868, 0);
      jSONArray0.getString(1868);
      assertEquals(1869, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentSet(1868, 0);
      jSONArray1.getSqlDate(0);
      assertEquals(1869, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(1868);
      JSONArray jSONArray1 = jSONArray0.fluentSet(1868, 0);
      jSONArray1.getShort(1868);
      assertEquals(1869, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(1868);
      jSONArray0.fluentSet(1868, 0);
      jSONArray0.getShort(106);
      assertEquals(1869, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(1868);
      jSONArray0.fluentSet(1868, 0);
      Class<String> class0 = String.class;
      jSONArray0.getObject(0, class0);
      assertEquals(1869, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Stream<Object> stream0 = jSONArray0.stream();
      JSONArray jSONArray1 = jSONArray0.fluentSet(1845, stream0);
      Class<Object> class0 = Object.class;
      jSONArray1.getObject(1845, class0);
      assertEquals(1846, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(1868);
      jSONArray0.fluentSet(1868, 0);
      jSONArray0.getLong(196);
      assertEquals(1869, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Stream<Object> stream0 = jSONArray0.stream();
      jSONArray0.fluentSet(0, stream0);
      jSONArray0.getJSONObject(0);
      assertEquals(1, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      JSONArray jSONArray1 = jSONArray0.fluentSet(1847, linkedHashSet0);
      jSONArray1.getJSONArray(1847);
      assertEquals(1848, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(1868);
      jSONArray0.fluentSet(1868, 0);
      jSONArray0.getInteger(1868);
      assertEquals(1869, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(1868);
      jSONArray0.fluentSet(1868, 0);
      jSONArray0.getInteger(184);
      assertEquals(1869, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(1868);
      JSONArray jSONArray1 = jSONArray0.fluentSet(1868, 0);
      jSONArray1.getFloat(1868);
      assertEquals(1869, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.fluentSet(1868, 0);
      jSONArray0.getFloat(1081);
      assertEquals(1869, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(1868);
      JSONArray jSONArray1 = jSONArray0.fluentSet(1868, 0);
      jSONArray1.getDouble(1868);
      assertEquals(1869, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(1862);
      JSONArray jSONArray1 = jSONArray0.fluentSet(1862, 0);
      jSONArray1.getDouble(0);
      assertEquals(1863, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(1868);
      JSONArray jSONArray1 = jSONArray0.fluentSet(1868, 0);
      jSONArray1.getDate(1146);
      assertEquals(1869, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(1868);
      JSONArray jSONArray1 = jSONArray0.fluentSet(1868, 0);
      jSONArray1.getDate(1868);
      assertEquals(1869, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(1868);
      JSONArray jSONArray1 = jSONArray0.fluentSet(1868, 0);
      jSONArray1.getByte(184);
      assertEquals(1869, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(1868);
      JSONArray jSONArray1 = jSONArray0.fluentSet(1868, 0);
      jSONArray1.getBigInteger(512);
      assertEquals(1869, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(1866);
      JSONArray jSONArray1 = jSONArray0.fluentSet(1866, (Object) null);
      jSONArray1.getBigDecimal(1857);
      assertEquals(1867, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(1868);
      JSONArray jSONArray1 = jSONArray0.fluentSet(1868, 0);
      jSONArray1.get(144);
      assertEquals(1869, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(1862);
      JSONArray jSONArray1 = jSONArray0.fluentSet(1862, 0);
      jSONArray1.fluentRetainAll(jSONArray0);
      assertEquals(1863, jSONArray0.size());
      assertFalse(jSONArray0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedHashSet<HijrahEra> linkedHashSet0 = new LinkedHashSet<HijrahEra>();
      JSONArray jSONArray1 = jSONArray0.fluentRemoveAll(linkedHashSet0);
      assertSame(jSONArray1, jSONArray0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(0);
      JSONArray jSONArray1 = new JSONArray(0);
      JSONArray jSONArray2 = jSONArray1.fluentAdd(0, (Object) jSONArray0);
      jSONArray2.fluentRemoveAll(jSONArray0);
      assertFalse(jSONArray1.isEmpty());
      assertFalse(jSONArray0.equals((Object)jSONArray2));
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(1868);
      JSONArray jSONArray1 = jSONArray0.fluentSet(1868, (Object) null);
      jSONArray1.fluentRemove((Object) null);
      assertEquals(1868, jSONArray1.size());
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(1868);
      jSONArray0.fluentSet(1868, 0);
      jSONArray0.fluentRemove(0);
      assertEquals(1868, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(1868);
      JSONArray jSONArray1 = jSONArray0.fluentSet(1868, 0);
      jSONArray0.fluentAddAll(328, (Collection<?>) jSONArray1);
      assertEquals(3738, jSONArray1.size());
      assertEquals(3738, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentSet(1868, 0);
      jSONArray0.addAll(0, (Collection<?>) jSONArray1);
      assertEquals(3738, jSONArray1.size());
      assertEquals(3738, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      List<JSONArray> list0 = jSONArray0.toJavaList((Class<JSONArray>) null);
      assertFalse(list0.contains(jSONArray0));
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Class<Annotation> class0 = Annotation.class;
      List<Annotation> list0 = jSONArray0.toJavaList(class0);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(984);
      Class<HijrahEra> class0 = HijrahEra.class;
      List<HijrahEra> list0 = jSONArray0.toJavaList(class0);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(0);
      List<Object> list0 = jSONArray0.subList(0, 0);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(0);
      // Undeclared exception!
      try { 
        jSONArray0.subList((-934), (-1));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // fromIndex = -934
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(1868);
      jSONArray0.setRelatedArray((Object) null);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      PipedInputStream pipedInputStream0 = new PipedInputStream(3089);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(pipedInputStream0, pipedInputStream0);
      jSONArray0.setRelatedArray(sequenceInputStream0);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      jSONArray0.setComponentType(parameterizedTypeImpl0);
      assertEquals(0, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      boolean boolean0 = jSONArray0.remove((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(1866);
      // Undeclared exception!
      try { 
        jSONArray0.listIterator((-590));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -590
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      int int0 = jSONArray0.lastIndexOf((Object) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      int int0 = jSONArray0.indexOf((Object) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(0);
      // Undeclared exception!
      try { 
        jSONArray0.getTimestamp(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(0);
      // Undeclared exception!
      try { 
        jSONArray0.getString(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getSqlDate(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getShortValue(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(1868);
      // Undeclared exception!
      try { 
        jSONArray0.getShortValue((-667));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(0);
      // Undeclared exception!
      try { 
        jSONArray0.getShort(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(1862);
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl((Type[]) null, (Type) null, (Type) null);
      // Undeclared exception!
      try { 
        jSONArray0.getObject(0, (Type) parameterizedTypeImpl0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(1868);
      Class<String> class0 = String.class;
      // Undeclared exception!
      try { 
        jSONArray0.getObject(0, class0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getLongValue(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(0);
      // Undeclared exception!
      try { 
        jSONArray0.getLong(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(1868);
      // Undeclared exception!
      try { 
        jSONArray0.getJSONArray(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getJSONArray((-1287));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(4801);
      // Undeclared exception!
      try { 
        jSONArray0.getInteger(4801);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 4801, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(0);
      // Undeclared exception!
      try { 
        jSONArray0.getFloat(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(1868);
      // Undeclared exception!
      try { 
        jSONArray0.getDate(1146);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1146, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(1868);
      // Undeclared exception!
      try { 
        jSONArray0.getByte(184);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 184, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getBooleanValue((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(1868);
      // Undeclared exception!
      try { 
        jSONArray0.getBigInteger(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(1868);
      // Undeclared exception!
      try { 
        jSONArray0.fluentRemove(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(1859);
      // Undeclared exception!
      try { 
        jSONArray0.fluentAddAll(1856, (Collection<?>) null);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1856, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.fluentAddAll((-3544), (Collection<?>) jSONArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -3544, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentAdd((Object) null);
      assertSame(jSONArray1, jSONArray0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      HijrahEra hijrahEra0 = HijrahEra.AH;
      // Undeclared exception!
      try { 
        jSONArray0.fluentAdd(1002, (Object) hijrahEra0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1002, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(0);
      JSONArray jSONArray1 = jSONArray0.fluentAdd(0, (Object) jSONArray0);
      JSONArray jSONArray2 = jSONArray0.fluentAddAll((Collection<?>) jSONArray1);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.fluentAdd((-214748364), (Object) "]\"kkvS");
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -214748364, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      boolean boolean0 = jSONArray0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = new JSONObject(false);
      Collection<Object> collection0 = jSONObject0.values();
      boolean boolean0 = jSONArray0.containsAll(collection0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(1868);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      boolean boolean0 = jSONArray0.contains(classLoader0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      boolean boolean0 = jSONArray0.addAll(0, (Collection<?>) jSONArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(1868);
      // Undeclared exception!
      try { 
        jSONArray0.addAll(1868, (Collection<?>) jSONArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1868, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(1862);
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      boolean boolean0 = jSONArray0.add((Object) sequenceInputStream0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      LinkedHashSet<JSONArray> linkedHashSet0 = new LinkedHashSet<JSONArray>();
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.add(0, (Object) linkedHashSet0);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.add(2184, (Object) null);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2184, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(1868);
      JSONArray jSONArray1 = jSONArray0.fluentSet(1868, 0);
      Class<JSONArray> class0 = JSONArray.class;
      // Undeclared exception!
      try { 
        jSONArray1.toJavaList(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : com.alibaba.fastjson.JSONArray
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentSet(0, jSONArray0);
      String[] stringArray0 = new String[1];
      // Undeclared exception!
      try { 
        jSONArray1.toArray(stringArray0);
        fail("Expecting exception: ArrayStoreException");
      
      } catch(ArrayStoreException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.subList(3071, 3071);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // toIndex = 3071
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.retainAll((Collection<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.removeAll((Collection<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(3052);
      // Undeclared exception!
      try { 
        jSONArray0.remove(293);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 293, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray((List<Object>) null);
      // Undeclared exception!
      try { 
        jSONArray0.iterator();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getSqlDate((-1392));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(1871);
      // Undeclared exception!
      try { 
        jSONArray0.getShortValue(1871);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1871, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(1868);
      // Undeclared exception!
      try { 
        jSONArray0.getShort((-2225));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getObject(0, (Type) null);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getObject((-2710), (Type) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.fluentSet(1868, 0);
      Class<MockFileInputStream> class0 = MockFileInputStream.class;
      // Undeclared exception!
      try { 
        jSONArray0.getObject(1868, class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : org.evosuite.runtime.mock.java.io.MockFileInputStream
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getLongValue(343);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 343, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(0);
      // Undeclared exception!
      try { 
        jSONArray0.getLongValue((-1434));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray((List<Object>) null);
      // Undeclared exception!
      try { 
        jSONArray0.getLong((-461));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(1868);
      // Undeclared exception!
      try { 
        jSONArray0.getLong((-422));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getJSONObject(1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getJSONObject((-2015));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray((List<Object>) null);
      // Undeclared exception!
      try { 
        jSONArray0.getJSONArray(713);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      HijrahEra hijrahEra0 = HijrahEra.AH;
      JSONArray jSONArray1 = jSONArray0.fluentSet(3089, hijrahEra0);
      // Undeclared exception!
      try { 
        jSONArray1.getJSONArray(3089);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to com.alibaba.fastjson.JSONArray
         //
         verifyException("com.alibaba.fastjson.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      JSONArray jSONArray1 = jSONArray0.fluentSet(0, pipedInputStream0);
      // Undeclared exception!
      try { 
        jSONArray1.getInteger(0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : java.io.PipedInputStream@251515e0
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(0);
      // Undeclared exception!
      try { 
        jSONArray0.getInteger((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray((List<Object>) null);
      // Undeclared exception!
      try { 
        jSONArray0.getIntValue(52);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getIntValue(3049);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3049, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getIntValue((-2154));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getFloatValue(1868);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1868, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getFloatValue((-2978));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getDoubleValue(1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getDoubleValue((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentAdd((Object) classLoader0);
      // Undeclared exception!
      try { 
        jSONArray1.getDouble(0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to double, value : sun.misc.Launcher$AppClassLoader@3d4eac69
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getDouble((-2147483647));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getDate(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(0);
      // Undeclared exception!
      try { 
        jSONArray0.getByteValue((-968));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(1759);
      jSONArray0.fluentSet(0, jSONArray0);
      // Undeclared exception!
      try { 
        jSONArray0.getByte(0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to byte, value : [{\"$ref\":\"@\"}]
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getByte((-1877));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getBooleanValue(3089);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3089, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray((List<Object>) null);
      // Undeclared exception!
      try { 
        jSONArray0.getBoolean(3076);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getBoolean(3089);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3089, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(1868);
      // Undeclared exception!
      try { 
        jSONArray0.getBoolean((-6335));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.fluentSet(1868, "yaqSA]Uw");
      // Undeclared exception!
      try { 
        jSONArray0.getBigInteger(1868);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"java.lang\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray((List<Object>) null);
      // Undeclared exception!
      try { 
        jSONArray0.getBigInteger(3089);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getBigDecimal((-1803));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.get(3741);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3741, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      jSONArray0.fluentSet(1509950721, (Object) null);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray((List<Object>) null);
      // Undeclared exception!
      try { 
        jSONArray0.fluentSet(3089, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.fluentSet((-297), jSONArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.fluentRetainAll((Collection<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray((List<Object>) null);
      // Undeclared exception!
      try { 
        jSONArray0.fluentRemove((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(0);
      // Undeclared exception!
      try { 
        jSONArray0.fluentRemove((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray((List<Object>) null);
      // Undeclared exception!
      try { 
        jSONArray0.fluentClear();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray((List<Object>) null);
      // Undeclared exception!
      try { 
        jSONArray0.fluentAddAll((Collection<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      int int0 = 0;
      JSONArray jSONArray0 = new JSONArray(0);
      JSONArray jSONArray1 = new JSONArray((List<Object>) null);
      // Undeclared exception!
      try { 
        jSONArray0.fluentAddAll(int0, (Collection<?>) jSONArray1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.containsAll((Collection<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.addAll((Collection<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray((-1333));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal Capacity: -1333
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(0);
      jSONArray0.set(3350, jSONArray0.DEFAULT_PARSER_FEATURE);
      jSONArray0.remove(149);
      assertEquals(3350, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentSet(3089, (Object) null);
      boolean boolean0 = jSONArray1.contains((Object) null);
      assertEquals(3090, jSONArray0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.get((-266));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedHashSet<MockFileInputStream> linkedHashSet0 = new LinkedHashSet<MockFileInputStream>();
      boolean boolean0 = jSONArray0.equals(linkedHashSet0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray((List<Object>) null);
      // Undeclared exception!
      try { 
        jSONArray0.fluentAdd(1836, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(1868);
      Iterator<Object> iterator0 = jSONArray0.iterator();
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Object[] objectArray0 = jSONArray0.toArray();
      assertEquals(0, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(1852);
      JSONArray jSONArray1 = jSONArray0.fluentSet(1852, "");
      Class<JSONArray> class0 = JSONArray.class;
      jSONArray1.toJavaList(class0);
      assertEquals(1853, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.fluentSet(3089, (Object) null);
      double double0 = jSONArray0.getDoubleValue(0);
      assertEquals(3090, jSONArray0.size());
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(1868);
      JSONArray jSONArray1 = jSONArray0.fluentSet(1868, 0);
      jSONArray1.getDoubleValue(1868);
      assertEquals(1869, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.fluentSet(3089, (Object) null);
      float float0 = jSONArray0.getFloatValue(3089);
      assertEquals(3090, jSONArray0.size());
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(0);
      JSONArray jSONArray1 = jSONArray0.fluentSet(0, jSONArray0);
      // Undeclared exception!
      try { 
        jSONArray1.getFloatValue(0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to float, value : [{\"$ref\":\"@\"}]
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentSet(3089, (Object) null);
      long long0 = jSONArray1.getLongValue(3089);
      assertEquals(3090, jSONArray0.size());
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(1862);
      JSONArray jSONArray1 = jSONArray0.fluentSet(1862, 0);
      jSONArray1.getLongValue(1862);
      assertEquals(1863, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentSet(1868, 0);
      int int0 = jSONArray1.getIntValue(0);
      assertEquals(1869, jSONArray0.size());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.fluentSet(1868, 0);
      jSONArray0.getIntValue(1868);
      assertEquals(1869, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.fluentSet(1868, 0);
      short short0 = jSONArray0.getShortValue(1);
      assertEquals(1869, jSONArray0.size());
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentSet(1863, 0);
      jSONArray1.getShortValue(1863);
      assertEquals(1864, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentSet(3089, (Object) null);
      byte byte0 = jSONArray1.getByteValue(3089);
      assertEquals(3090, jSONArray0.size());
      assertEquals((byte)0, byte0);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.add((Object) jSONArray0);
      // Undeclared exception!
      try { 
        jSONArray0.getByteValue(0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to byte, value : [{\"$ref\":\"@\"}]
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentSet(1868, 0);
      boolean boolean0 = jSONArray1.getBooleanValue(80);
      assertEquals(1869, jSONArray0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(0);
      JSONArray jSONArray1 = jSONArray0.fluentSet(0, jSONArray0);
      // Undeclared exception!
      try { 
        jSONArray1.getBooleanValue(0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to boolean, value : [{\"$ref\":\"@\"}]
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(1868);
      jSONArray0.fluentSet(1868, 0);
      jSONArray0.getBoolean(0);
      assertEquals(1869, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(1868);
      JSONArray jSONArray1 = jSONArray0.fluentSet(1868, 0);
      jSONArray1.getBoolean(1868);
      assertEquals(1869, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.fluentSet(1868, 0);
      Class<JSONArray> class0 = JSONArray.class;
      // Undeclared exception!
      try { 
        jSONArray0.getObject(1868, (Type) class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : com.alibaba.fastjson.JSONArray
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.fluentSet(3089, (Object) null);
      jSONArray0.getJSONArray(619);
      assertEquals(3090, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(1894);
      JSONArray jSONArray1 = jSONArray0.fluentSet(1894, 0);
      jSONArray1.getJSONObject(0);
      assertEquals(1895, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      SerializerFeature serializerFeature0 = SerializerFeature.WriteNullListAsEmpty;
      // Undeclared exception!
      try { 
        jSONArray0.set((-4794), serializerFeature0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      Object object0 = jSONArray0.set((-1), linkedHashSet0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentSet(3089, (Object) null);
      boolean boolean0 = jSONArray0.retainAll(jSONArray1);
      assertFalse(jSONArray0.isEmpty());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      boolean boolean0 = jSONArray0.isEmpty();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Stream<Object> stream0 = jSONArray0.stream();
      JSONArray jSONArray1 = jSONArray0.fluentSet(3089, stream0);
      boolean boolean0 = jSONArray1.isEmpty();
      assertEquals(3090, jSONArray0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentRetainAll(jSONArray0);
      assertTrue(jSONArray1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Object object0 = jSONArray0.getRelatedArray();
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getSqlDate(2524);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2524, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getFloat((-1418));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      boolean boolean0 = jSONArray0.add((Object) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getTimestamp((-438));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(1852);
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      JSONArray jSONArray1 = jSONArray0.fluentAddAll(0, (Collection<?>) linkedHashSet0);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Type type0 = jSONArray0.getComponentType();
      assertNull(type0);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedHashSet<JSONArray> linkedHashSet0 = new LinkedHashSet<JSONArray>();
      linkedHashSet0.add(jSONArray0);
      boolean boolean0 = jSONArray0.containsAll(linkedHashSet0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.setComponentType((Type) null);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getString((-206));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.addAll((-534), (Collection<?>) null);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -534, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Class<PushbackInputStream> class0 = PushbackInputStream.class;
      List<PushbackInputStream> list0 = jSONArray0.toJavaList(class0);
      boolean boolean0 = jSONArray0.removeAll(list0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getBigDecimal(999999999);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 999999999, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.subList(2183, (-2177));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fromIndex(2183) > toIndex(-2177)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      byte[] byteArray0 = new byte[7];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      // Undeclared exception!
      try { 
        jSONArray0.add((-378), (Object) byteArrayInputStream0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -378, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      JSONArray jSONArray1 = jSONArray0.fluentAddAll((Collection<?>) linkedHashSet0);
      assertTrue(jSONArray1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      byte[] byteArray0 = new byte[6];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, byteArrayInputStream0);
      boolean boolean0 = jSONArray0.remove((Object) sequenceInputStream0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getDate((-2007));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      ListIterator<Object> listIterator0 = jSONArray0.listIterator();
      assertFalse(listIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.listIterator(3070);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3070
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentClear();
      assertSame(jSONArray1, jSONArray0);
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedHashSet<JSONArray> linkedHashSet0 = new LinkedHashSet<JSONArray>();
      JSONArray jSONArray1 = jSONArray0.fluentRemove((Object) linkedHashSet0);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      boolean boolean0 = jSONArray0.addAll((Collection<?>) jSONArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = (JSONArray)jSONArray0.clone();
      assertEquals(0, jSONArray1.size());
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.clear();
      assertEquals(0, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getDouble(1868);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1868, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.fluentRemove(1868);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1868, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentSet(1868, 0);
      int int0 = jSONArray1.indexOf(jSONArray0);
      assertEquals(1869, jSONArray0.size());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.remove((-1578));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.fluentRemoveAll((Collection<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      HijrahEra[] hijrahEraArray0 = new HijrahEra[0];
      HijrahEra[] hijrahEraArray1 = jSONArray0.toArray(hijrahEraArray0);
      assertSame(hijrahEraArray0, hijrahEraArray1);
  }
}
