/*
 * This file was automatically generated by EvoSuite
 * Tue Jul 23 20:16:18 GMT 2019
 */

package org.la4j.decomposition;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;
import org.la4j.Matrix;
import org.la4j.decomposition.EigenDecompositor;
import org.la4j.matrix.ColumnMajorSparseMatrix;
import org.la4j.matrix.DenseMatrix;
import org.la4j.matrix.RowMajorSparseMatrix;
import org.la4j.operation.inplace.InPlaceCopyMatrixToMatrix;
import org.la4j.vector.DenseVector;
import org.la4j.vector.SparseVector;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class EigenDecompositor_ESTest extends EigenDecompositor_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Matrix matrix0 = Matrix.constant(18, 18, 18);
      EigenDecompositor eigenDecompositor0 = new EigenDecompositor(matrix0);
      // Undeclared exception!
      eigenDecompositor0.decompose();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Random.setNextRandom(27);
      MockRandom mockRandom0 = new MockRandom(27);
      DenseMatrix denseMatrix0 = DenseMatrix.randomSymmetric(27, mockRandom0);
      EigenDecompositor eigenDecompositor0 = new EigenDecompositor(denseMatrix0);
      // Undeclared exception!
      eigenDecompositor0.decompose();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Matrix matrix0 = Matrix.constant(1, 1, 1);
      EigenDecompositor eigenDecompositor0 = new EigenDecompositor(matrix0);
      Matrix[] matrixArray0 = eigenDecompositor0.decompose();
      assertEquals(2, matrixArray0.length);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.zero(51, 2992, 0);
      EigenDecompositor eigenDecompositor0 = null;
      try {
        eigenDecompositor0 = new EigenDecompositor(columnMajorSparseMatrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Given matrix can not be used with this decompositor.
         //
         verifyException("org.la4j.decomposition.AbstractDecompositor", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      double[][] doubleArray0 = new double[6][8];
      double[] doubleArray1 = new double[2];
      doubleArray0[0] = doubleArray1;
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.from2DArray(doubleArray0);
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.identity(448);
      EigenDecompositor eigenDecompositor0 = new EigenDecompositor(rowMajorSparseMatrix0);
      eigenDecompositor0.matrix = (Matrix) columnMajorSparseMatrix0;
      // Undeclared exception!
      try { 
        eigenDecompositor0.decompose();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can't decompose rectangle matrix
         //
         verifyException("org.la4j.decomposition.EigenDecompositor", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DenseVector denseVector0 = DenseVector.zero(0);
      Matrix matrix0 = denseVector0.toColumnMatrix();
      EigenDecompositor eigenDecompositor0 = new EigenDecompositor(matrix0);
      boolean boolean0 = eigenDecompositor0.applicableTo(matrix0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      Matrix matrix0 = Matrix.randomSymmetric(1, mockRandom0);
      EigenDecompositor eigenDecompositor0 = new EigenDecompositor(matrix0);
      // Undeclared exception!
      try { 
        eigenDecompositor0.applicableTo((Matrix) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.decomposition.EigenDecompositor", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      EigenDecompositor eigenDecompositor0 = null;
      try {
        eigenDecompositor0 = new EigenDecompositor((Matrix) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.decomposition.EigenDecompositor", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      double[][] doubleArray0 = new double[6][1];
      DenseMatrix denseMatrix0 = DenseMatrix.from2DArray(doubleArray0);
      EigenDecompositor eigenDecompositor0 = null;
      try {
        eigenDecompositor0 = new EigenDecompositor(denseMatrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Given matrix can not be used with this decompositor.
         //
         verifyException("org.la4j.decomposition.AbstractDecompositor", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new InPlaceCopyMatrixToMatrix();
      double[][] doubleArray0 = new double[6][8];
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = (-1286.25127417016);
      doubleArray1[1] = (-1286.25127417016);
      doubleArray0[0] = doubleArray1;
      doubleArray0[2] = doubleArray1;
      double[] doubleArray2 = new double[9];
      doubleArray2[0] = (-1286.25127417016);
      doubleArray0[3] = doubleArray2;
      double[] doubleArray3 = new double[14];
      doubleArray3[1] = (-1286.25127417016);
      doubleArray0[4] = doubleArray3;
      double[] doubleArray4 = new double[3];
      doubleArray4[0] = (-1286.25127417016);
      doubleArray4[1] = 1373.577;
      doubleArray0[5] = doubleArray4;
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.from2DArray(doubleArray0);
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.identity(7);
      Matrix matrix0 = inPlaceCopyMatrixToMatrix0.apply(columnMajorSparseMatrix0, rowMajorSparseMatrix0);
      EigenDecompositor eigenDecompositor0 = new EigenDecompositor(matrix0);
      Matrix[] matrixArray0 = eigenDecompositor0.decompose();
      assertEquals(2, matrixArray0.length);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new InPlaceCopyMatrixToMatrix();
      double[][] doubleArray0 = new double[6][8];
      double[] doubleArray1 = new double[2];
      doubleArray1[1] = (-1278.546431949731);
      doubleArray0[0] = doubleArray1;
      doubleArray0[1] = doubleArray1;
      double[] doubleArray2 = new double[5];
      doubleArray2[0] = (-1278.546431949731);
      doubleArray2[1] = (-1278.546431949731);
      doubleArray0[2] = doubleArray2;
      doubleArray0[3] = doubleArray2;
      double[] doubleArray3 = new double[6];
      doubleArray3[0] = (-1278.546431949731);
      doubleArray3[1] = 1373.577;
      doubleArray0[5] = doubleArray3;
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.from2DArray(doubleArray0);
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.identity(11);
      Matrix matrix0 = inPlaceCopyMatrixToMatrix0.apply(columnMajorSparseMatrix0, rowMajorSparseMatrix0);
      EigenDecompositor eigenDecompositor0 = new EigenDecompositor(matrix0);
      Matrix[] matrixArray0 = eigenDecompositor0.decompose();
      assertEquals(2, matrixArray0.length);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new InPlaceCopyMatrixToMatrix();
      double[][] doubleArray0 = new double[6][8];
      double[] doubleArray1 = new double[2];
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[8];
      doubleArray2[0] = (-0.9172931515277775);
      doubleArray2[1] = (-0.9172931515277775);
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[5];
      doubleArray3[0] = (-1286.25127417016);
      doubleArray0[2] = doubleArray3;
      doubleArray0[5] = doubleArray3;
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.from2DArray(doubleArray0);
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.identity(7);
      Matrix matrix0 = inPlaceCopyMatrixToMatrix0.apply(columnMajorSparseMatrix0, rowMajorSparseMatrix0);
      EigenDecompositor eigenDecompositor0 = new EigenDecompositor(matrix0);
      eigenDecompositor0.decompose();
      assertEquals(0.20408163265306123, rowMajorSparseMatrix0.density(), 0.01);
      assertEquals(10, rowMajorSparseMatrix0.cardinality());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new InPlaceCopyMatrixToMatrix();
      double[][] doubleArray0 = new double[6][8];
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = (-1286.25127417016);
      doubleArray1[1] = (-0.9172931515277775);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[8];
      doubleArray2[0] = (-0.9172931515277775);
      doubleArray2[1] = (-0.9172931515277775);
      doubleArray0[1] = doubleArray2;
      doubleArray0[2] = doubleArray1;
      double[] doubleArray3 = new double[9];
      doubleArray3[0] = (-0.9172931515277775);
      doubleArray3[1] = (-1286.25127417016);
      doubleArray0[3] = doubleArray3;
      double[] doubleArray4 = new double[3];
      doubleArray4[0] = (-1286.25127417016);
      doubleArray4[1] = 1373.577;
      doubleArray0[5] = doubleArray4;
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.from2DArray(doubleArray0);
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.identity(7);
      Matrix matrix0 = inPlaceCopyMatrixToMatrix0.apply(columnMajorSparseMatrix0, rowMajorSparseMatrix0);
      EigenDecompositor eigenDecompositor0 = new EigenDecompositor(matrix0);
      eigenDecompositor0.decompose();
      assertEquals(0.30612244897959184, rowMajorSparseMatrix0.density(), 0.01);
      assertEquals((-1286.25127417016), rowMajorSparseMatrix0.min(), 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new InPlaceCopyMatrixToMatrix();
      double[][] doubleArray0 = new double[6][8];
      double[] doubleArray1 = new double[2];
      doubleArray1[1] = (-0.9172931515277775);
      doubleArray0[0] = doubleArray1;
      doubleArray0[2] = doubleArray0[0];
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.from2DArray(doubleArray0);
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.identity(7);
      Matrix matrix0 = inPlaceCopyMatrixToMatrix0.apply(columnMajorSparseMatrix0, rowMajorSparseMatrix0);
      EigenDecompositor eigenDecompositor0 = new EigenDecompositor(matrix0);
      Matrix[] matrixArray0 = eigenDecompositor0.decompose();
      assertEquals(2, matrixArray0.length);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new InPlaceCopyMatrixToMatrix();
      double[][] doubleArray0 = new double[6][8];
      double[] doubleArray1 = new double[2];
      doubleArray1[1] = (-1286.25127417016);
      doubleArray0[0] = doubleArray1;
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.from2DArray(doubleArray0);
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(7, 7, 7);
      inPlaceCopyMatrixToMatrix0.apply(columnMajorSparseMatrix0, rowMajorSparseMatrix0);
      EigenDecompositor eigenDecompositor0 = new EigenDecompositor(rowMajorSparseMatrix0);
      Matrix[] matrixArray0 = eigenDecompositor0.decompose();
      assertEquals(2, matrixArray0.length);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Matrix matrix0 = Matrix.constant(1, 1, 1);
      EigenDecompositor eigenDecompositor0 = new EigenDecompositor(matrix0);
      SparseVector sparseVector0 = SparseVector.zero(16, 9);
      Matrix matrix1 = sparseVector0.toColumnMatrix();
      boolean boolean0 = eigenDecompositor0.applicableTo(matrix1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      double[][] doubleArray0 = new double[6][8];
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.from2DArray(doubleArray0);
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.identity(448);
      EigenDecompositor eigenDecompositor0 = new EigenDecompositor(rowMajorSparseMatrix0);
      eigenDecompositor0.matrix = (Matrix) columnMajorSparseMatrix0;
      // Undeclared exception!
      try { 
        eigenDecompositor0.decompose();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can't decompose rectangle matrix
         //
         verifyException("org.la4j.decomposition.EigenDecompositor", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Matrix matrix0 = Matrix.constant(2, 2, 2);
      EigenDecompositor eigenDecompositor0 = new EigenDecompositor(matrix0);
      Matrix[] matrixArray0 = eigenDecompositor0.decompose();
      assertEquals(2, matrixArray0.length);
  }
}
