/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 06 20:55:54 GMT 2018
 */

package okio;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.DataInputStream;
import java.io.EOFException;
import java.io.File;
import java.io.FileDescriptor;
import java.io.FileNotFoundException;
import java.io.FilterInputStream;
import java.io.FilterOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectInputStream;
import java.io.ObjectStreamConstants;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.SequenceInputStream;
import java.nio.charset.Charset;
import java.nio.charset.UnsupportedCharsetException;
import java.util.Enumeration;
import java.util.LinkedList;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import java.util.zip.Deflater;
import java.util.zip.Inflater;
import okio.Buffer;
import okio.BufferedSink;
import okio.BufferedSource;
import okio.ByteString;
import okio.DeflaterSink;
import okio.HashingSink;
import okio.HashingSource;
import okio.InflaterSource;
import okio.Options;
import okio.Pipe;
import okio.RealBufferedSink;
import okio.RealBufferedSource;
import okio.Segment;
import okio.SegmentPool;
import okio.SegmentedByteString;
import okio.Sink;
import okio.Source;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Buffer_ESTest extends Buffer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.readByteString();
      // Undeclared exception!
      try { 
        buffer0.writeString("byteCount > Integer.MAX_VALUE: ", (Charset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // charset == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Pipe pipe0 = new Pipe(8192L);
      Buffer buffer0 = pipe0.buffer;
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      Buffer buffer1 = buffer_UnsafeCursor0.buffer;
      boolean boolean0 = buffer1.exhausted();
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertFalse(buffer_UnsafeCursor0.readWrite);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSink hashingSink0 = HashingSink.sha1(buffer0);
      ByteString byteString0 = hashingSink0.hash();
      buffer0.hmacSha512(byteString0);
      buffer0.buffer();
      try { 
        buffer0.skip(100000000000L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[5];
      int int0 = buffer0.read(byteArray0);
      assertEquals((-1), int0);
      
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertFalse(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.readUtf8Line();
      buffer0.writeDecimalLong(1000000000L);
      assertEquals(10L, buffer0.size());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      ByteString byteString0 = buffer0.readByteString();
      buffer0.rangeEquals(0L, byteString0);
      try { 
        buffer0.require(280375465082880L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Buffer buffer1 = realBufferedSource0.buffer;
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer1.readUnsafe();
      Buffer buffer2 = buffer_UnsafeCursor0.buffer;
      HashingSink hashingSink0 = HashingSink.sha256(realBufferedSource0.buffer);
      ByteString byteString0 = hashingSink0.hash();
      boolean boolean0 = buffer2.rangeEquals(0L, byteString0);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertFalse(boolean0);
      assertFalse(buffer_UnsafeCursor0.readWrite);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.clear();
      byte[] byteArray0 = new byte[1];
      OutputStream outputStream0 = buffer0.outputStream();
      assertNotNull(outputStream0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      
      int int0 = buffer_UnsafeCursor0.next();
      assertEquals(0L, buffer_UnsafeCursor0.offset);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "#|\"av*>S(#_@;OtkoYij");
      FileSystemHandling.shouldAllThrowIOExceptions();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("#|\"av*>S(#_@;OtkoYij");
      Buffer buffer1 = buffer0.copyTo((OutputStream) mockFileOutputStream0);
      // Undeclared exception!
      try { 
        buffer1.write((byte[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // source == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      Buffer buffer1 = buffer_UnsafeCursor0.buffer;
      buffer0.require((-1));
      buffer_UnsafeCursor0.buffer.completeSegmentByteCount();
      buffer_UnsafeCursor0.buffer.writeUtf8CodePoint(51);
      ByteString byteString0 = new ByteString((byte[]) null);
      byte[] byteArray0 = new byte[18];
      byteArray0[0] = (byte)30;
      try { 
        buffer_UnsafeCursor0.buffer.readFully(byteArray0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = buffer0.readAndWriteUnsafe(buffer_UnsafeCursor0);
      // Undeclared exception!
      try { 
        buffer0.readUnsafe(buffer_UnsafeCursor1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // already attached to a buffe
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      ByteString[] byteStringArray0 = new ByteString[0];
      Options options0 = Options.of(byteStringArray0);
      buffer0.select(options0);
      realBufferedSource0.buffer.completeSegmentByteCount();
      buffer0.writeUtf8("");
      Charset charset0 = Charset.defaultCharset();
      // Undeclared exception!
      try { 
        buffer0.writeString("", 597, 597, charset0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endIndex > string.length: 597 > 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.snapshot();
      Charset charset0 = Charset.defaultCharset();
      // Undeclared exception!
      try { 
        buffer0.writeString("", (-461), (-461), charset0);
        fail("Expecting exception: IllegalAccessError");
      
      } catch(IllegalAccessError e) {
         //
         // beginIndex < 0: -461
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      realBufferedSource0.buffer();
      // Undeclared exception!
      try { 
        buffer0.copyTo((OutputStream) null, 100000L, (-2945L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // out == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      Buffer buffer0 = new Buffer();
      buffer0.readUnsafe();
      buffer0.readUtf8Line();
      buffer0.writeIntLe((-4838));
      assertFalse(buffer0.exhausted());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.readByteString();
      Segment segment0 = new Segment();
      Charset charset0 = Charset.defaultCharset();
      buffer0.writeString("B),j.)x B\u0001A'&V=", charset0);
      buffer0.flush();
      // Undeclared exception!
      try { 
        buffer0.readFully(buffer0, 524L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // source == this
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.readByteString();
      SegmentPool.byteCount = (long) (byte)0;
      buffer0.indexOf((byte)0);
      Buffer buffer1 = buffer0.writeUtf8("byteCount > Integer.MAX_VALUE: ", (int) (byte)0, 0);
      buffer1.writeLongLe(0L);
      buffer0.readByte();
      buffer1.flush();
      buffer1.writeInt(655);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      boolean boolean0 = realBufferedSink0.closed;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "#|\"av*>S(#_@;OtkoYij");
      realBufferedSink0.writeHexadecimalUnsignedLong((byte)22);
      realBufferedSink0.buffer.md5();
      FileSystemHandling.shouldAllThrowIOExceptions();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("#|\"av*>S(#_@;OtkoYij");
      try { 
        realBufferedSink0.buffer.copyTo((OutputStream) mockFileOutputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Charset.defaultCharset();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      // Undeclared exception!
      try { 
        buffer0.readAndWriteUnsafe(buffer_UnsafeCursor0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // already attached to a buffer
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Buffer buffer0 = new Buffer();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      SegmentPool.byteCount = (-2579L);
      // Undeclared exception!
      try { 
        buffer0.writeUtf8("size < 8: ", 1497, 1497);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endIndex > string.length: 1497 > 10
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer1 = realBufferedSink0.buffer();
      realBufferedSink0.emitCompleteSegments();
      try { 
        buffer0.write((Source) buffer1, 1728L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      Pipe pipe0 = new Pipe(1815L);
      Buffer buffer0 = pipe0.buffer;
      try { 
        buffer0.readUtf8LineStrict();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // \\n not found: limit=0 content=\u2026
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      boolean boolean0 = realBufferedSink0.closed;
      realBufferedSink0.writeHexadecimalUnsignedLong(2);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "f,BLW");
      try { 
        realBufferedSink0.buffer.readUtf8LineStrict((long) 2);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // \\n not found: limit=1 content=32\u2026
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.emitCompleteSegments();
      buffer1.inputStream();
      // Undeclared exception!
      try { 
        buffer0.readShort();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size < 2: 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeDecimalLong(1869L);
      // Undeclared exception!
      try { 
        buffer1.write(buffer0, 259722L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // source == this
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.readByteString();
      Charset charset0 = Charset.defaultCharset();
      buffer0.writeString("B),j.)x B\u0001A'&V=", charset0);
      buffer0.flush();
      Buffer buffer1 = new Buffer();
      try { 
        buffer0.readFully(buffer1, 524L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)126;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)18;
      try { 
        buffer0.readFully(byteArray0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      ByteString byteString0 = buffer0.readByteString();
      SegmentPool.byteCount = (long) (byte)0;
      buffer0.indexOf((byte)0);
      Buffer buffer1 = buffer0.writeLongLe(0L);
      // Undeclared exception!
      try { 
        buffer1.indexOfElement(byteString0, (-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fromIndex < 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte byte0 = (byte)37;
      buffer0.indexOf((byte)37);
      // Undeclared exception!
      try { 
        buffer0.writeUtf8("byteCount > Integer.MAX_VALUE: ", (-2147483647), 2112278998);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // beginIndex < 0: -2147483647
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.snapshot();
      Charset charset0 = Charset.defaultCharset();
      // Undeclared exception!
      try { 
        buffer0.writeString("", 0, 111, charset0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endIndex > string.length: 111 > 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("byteCount > Integer.MAX_VALUE: ");
      Charset.defaultCharset();
      Segment segment0 = new Segment();
      Buffer buffer0 = new Buffer();
      buffer0.indexOf((byte)109, (long) (byte)109);
      Buffer buffer1 = buffer0.clone();
      buffer1.writeInt((byte)109);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSink hashingSink0 = HashingSink.sha1(buffer0);
      buffer0.sha256();
      hashingSink0.hash();
      Segment segment0 = buffer0.writableSegment(11);
      buffer0.head = segment0;
      Charset charset0 = Charset.defaultCharset();
      Buffer buffer1 = buffer0.writeString("&E|>I", charset0);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)22;
      byteArray0[1] = (byte)22;
      byteArray0[2] = (byte)22;
      buffer1.readFully(byteArray0);
      // Undeclared exception!
      try { 
        buffer0.readByteString((long) (byte)38);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=2 offset=0 byteCount=38
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSink hashingSink0 = HashingSink.sha1(buffer0);
      buffer0.sha256();
      hashingSink0.hash();
      // Undeclared exception!
      try { 
        buffer0.writableSegment((-350));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSource hashingSource0 = HashingSource.md5(buffer0);
      ByteString byteString0 = hashingSource0.hash();
      buffer0.write(byteString0);
      buffer0.readUtf8Line();
      // Undeclared exception!
      try { 
        buffer0.readLong();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size < 8: 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeIntLe(14);
      HashingSink hashingSink0 = HashingSink.md5(buffer0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(hashingSink0);
      Buffer buffer1 = realBufferedSink0.buffer();
      realBufferedSink0.writeLong(14);
      realBufferedSink0.buffer.indexOf((byte)23, (long) (byte)23);
      // Undeclared exception!
      try { 
        buffer1.snapshot((-20));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=8 offset=0 byteCount=-20
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Buffer buffer0 = new Buffer();
      buffer0.toString();
      Buffer buffer1 = buffer0.writeShortLe((-21267));
      try { 
        buffer1.skip(4294967295L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Buffer buffer1 = realBufferedSource0.buffer;
      byte byte0 = (byte)0;
      buffer0.completeSegmentByteCount();
      Buffer buffer2 = buffer1.writeInt(16);
      try { 
        buffer2.readUtf8LineStrict((long) (byte)0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // \\n not found: limit=0 content=00000010\u2026
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Charset.defaultCharset();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Buffer buffer1 = buffer0.writeShort((-185));
      byte[] byteArray0 = new byte[0];
      ByteString byteString0 = new ByteString(byteArray0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      buffer0.readUtf8CodePoint();
      ByteString byteString1 = buffer1.md5();
      buffer0.indexOfElement(byteString1, (long) (byte)8);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "kGE.t<H.[\u0000");
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      ByteString byteString0 = realBufferedSource0.readByteString();
      buffer0.indexOfElement(byteString0, 2450L);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Pipe pipe0 = new Pipe(10000000L);
      Buffer buffer0 = pipe0.buffer;
      buffer0.completeSegmentByteCount();
      // Undeclared exception!
      try { 
        buffer0.readIntLe();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size < 4: 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.readByteString();
      MockPrintStream mockPrintStream0 = new MockPrintStream("byteCount > Integer.MAX_VALUE: ");
      Pipe pipe0 = new Pipe(2147483647L);
      Buffer buffer1 = pipe0.buffer;
      Buffer buffer2 = buffer1.writeTo((OutputStream) mockPrintStream0);
      buffer2.emitCompleteSegments();
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_1;
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.readByteString();
      buffer0.indexOf((byte)0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      int int0 = 1000;
      int int1 = (-3467);
      // Undeclared exception!
      try { 
        buffer0.writeUtf8("byteCount > Integer.MAX_VALUE: ", 1000, (-3467));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endIndex < beginIndex: -3467 < 1000
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      HashingSink hashingSink0 = HashingSink.sha1(buffer0);
      ByteString byteString0 = hashingSink0.hash();
      buffer0.hmacSha512(byteString0);
      buffer0.buffer();
      // Undeclared exception!
      try { 
        buffer0.writeUtf8((String) null, (-201), (-201));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // string == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSink hashingSink0 = HashingSink.sha1(buffer0);
      ByteString byteString0 = buffer0.sha256();
      ByteString byteString1 = hashingSink0.hash();
      Segment segment0 = new Segment();
      buffer0.head = segment0;
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      HashingSink hashingSink1 = HashingSink.hmacSha256(buffer0, byteString1);
      hashingSink1.hash();
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.buffer.hmacSha512(byteString0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      ByteString byteString0 = buffer0.readByteString();
      SegmentPool.byteCount = (long) (byte)0;
      buffer0.indexOf((byte)0);
      Buffer buffer1 = buffer0.writeUtf8("byteCount > Integer.MAX_VALUE: ", (int) (byte)0, 0);
      Buffer buffer2 = buffer1.writeLongLe((byte)0);
      buffer0.readLong();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer2.readUnsafe();
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.buffer.hmacSha512(byteString0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Empty key
         //
         verifyException("javax.crypto.spec.SecretKeySpec", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeShort(73);
      buffer0.readUtf8();
      Charset.defaultCharset();
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Buffer buffer0 = new Buffer();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Charset.defaultCharset();
      Charset.defaultCharset();
      buffer0.emitCompleteSegments();
      buffer0.timeout();
      buffer0.readUtf8();
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      realBufferedSink0.buffer.readAndWriteUnsafe();
      buffer0.writeDecimalLong((-1L));
      realBufferedSink0.emitCompleteSegments();
      Buffer buffer1 = realBufferedSink0.buffer();
      // Undeclared exception!
      try { 
        buffer1.readUtf8LineStrict((-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // limit < 0: -1
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Charset.defaultCharset();
      ByteString[] byteStringArray0 = new ByteString[9];
      Options.of(byteStringArray0);
      Buffer buffer0 = new Buffer();
      // Undeclared exception!
      try { 
        buffer0.indexOf((byte) (-99), (long) (byte) (-99));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // size=0 fromIndex=-99 toIndex=9223372036854775807
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Pipe pipe0 = new Pipe(20L);
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      Buffer buffer1 = buffer_UnsafeCursor0.buffer;
      buffer1.snapshot();
      // Undeclared exception!
      try { 
        buffer1.readDecimalLong();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size == 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.indexOf((byte)60, (long) (byte)60);
      HashingSource hashingSource0 = HashingSource.sha256(buffer0);
      ByteString byteString0 = hashingSource0.hash();
      buffer0.indexOf(byteString0, (long) (byte)60);
      buffer0.sha256();
      HashingSink hashingSink0 = HashingSink.sha512(buffer0);
      ByteString byteString1 = hashingSink0.hash();
      buffer0.writableSegment((byte)60);
      buffer0.readUnsafe();
      buffer0.hmacSha512(byteString1);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.clone();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)100;
      ByteString byteString0 = new ByteString(byteArray0);
      // Undeclared exception!
      try { 
        buffer0.indexOf(byteString0, (-1737L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fromIndex < 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Pipe pipe0 = new Pipe(4278190080L);
      Buffer buffer0 = pipe0.buffer;
      Charset charset0 = Charset.defaultCharset();
      buffer0.writeString("m&,tW&s;G%", charset0);
      buffer0.readShortLe();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      try { 
        realBufferedSource0.readByteString((long) (short)9837);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.indexOf((byte)78, (long) (byte)78);
      buffer0.writableSegment((byte)78);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Buffer buffer1 = buffer0.writeUtf8(":t");
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      realBufferedSource0.readByteString();
      buffer1.flush();
      buffer0.writeInt((byte)78);
      // Undeclared exception!
      try { 
        realBufferedSource0.buffer.readShortLe();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size < 2: 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSink hashingSink0 = HashingSink.sha1(buffer0);
      ByteString byteString0 = buffer0.sha256();
      hashingSink0.hash();
      HashingSource hashingSource0 = HashingSource.hmacSha1(buffer0, byteString0);
      buffer0.write((Source) hashingSource0, (-922337203685477580L));
      Segment segment0 = buffer0.writableSegment(11);
      buffer0.head = segment0;
      byte[] byteArray0 = new byte[3];
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      byteArray0[0] = (byte)22;
      byteArray0[1] = (byte)22;
      byteArray0[2] = (byte)22;
      // Undeclared exception!
      try { 
        buffer0.readByteString((long) (byte)22);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=0 byteCount=22
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      Buffer buffer0 = new Buffer();
      try { 
        buffer0.require(2591L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Pipe pipe0 = new Pipe(2147483647L);
      Pipe.PipeSource pipe_PipeSource0 = pipe0.new PipeSource();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(pipe_PipeSource0);
      Buffer buffer0 = realBufferedSource0.buffer;
      pipe_PipeSource0.close();
      Buffer buffer1 = buffer0.emitCompleteSegments();
      pipe0.sinkClosed = true;
      String string0 = "2, gTZ7+`]gqZ+ow\\u";
      buffer1.writeUtf8(string0);
      realBufferedSource0.buffer.sha256();
      buffer0.exhausted();
      long long0 = 100000L;
      // Undeclared exception!
      try { 
        buffer1.copyTo(realBufferedSource0.buffer, 2147483647L, 100000L);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=19 offset=2147483647 byteCount=100000
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.clear();
      buffer0.writableSegment(57);
      ByteString[] byteStringArray0 = new ByteString[6];
      buffer0.writeShortLe(57);
      Options options0 = Options.of(byteStringArray0);
      // Undeclared exception!
      try { 
        buffer0.select(options0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.readByteString();
      SegmentPool.byteCount = (long) (byte)0;
      buffer0.indexOf((byte)0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Buffer buffer1 = buffer0.writeUtf8("byteCount > Integer.MAX_AUE: ", (int) (byte)0, 0);
      Buffer buffer2 = buffer1.writeLongLe((byte)0);
      HashingSource hashingSource0 = HashingSource.sha1(buffer2);
      hashingSource0.hash();
      buffer1.close();
      buffer0.buffer();
      buffer2.hashCode();
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.readUtf8Line();
      buffer0.readByteArray();
      buffer0.sha1();
      buffer0.outputStream();
      // Undeclared exception!
      try { 
        buffer0.readLong();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size < 8: 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Pipe pipe0 = new Pipe(24L);
      pipe0.sourceClosed = false;
      Buffer buffer0 = pipe0.buffer;
      Segment segment0 = buffer0.head;
      buffer0.head = null;
      Buffer buffer1 = buffer0.buffer();
      ByteString byteString0 = buffer0.sha1();
      buffer1.indexOf(byteString0);
      buffer0.request(1415L);
      buffer1.close();
      pipe0.sinkClosed = false;
      buffer1.timeout();
      buffer0.indexOfElement(byteString0);
      ByteString[] byteStringArray0 = new ByteString[5];
      byteStringArray0[0] = byteString0;
      byteStringArray0[1] = byteString0;
      byteStringArray0[2] = byteString0;
      byteStringArray0[3] = byteString0;
      byteStringArray0[4] = byteString0;
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.indexOf((byte)78, (long) (byte)78);
      buffer0.sha256();
      buffer0.writableSegment((byte)78);
      Inflater inflater0 = new Inflater();
      InflaterSource inflaterSource0 = new InflaterSource((BufferedSource) buffer0, inflater0);
      buffer0.request((byte)78);
      ByteString byteString0 = new ByteString((byte[]) null);
      // Undeclared exception!
      try { 
        buffer0.readShortLe();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size < 2: 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.sha256();
      Segment segment0 = buffer0.writableSegment(11);
      buffer0.head = segment0;
      Charset charset0 = Charset.defaultCharset();
      Buffer buffer1 = buffer0.writeString("&E>I", charset0);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)22;
      buffer0.flush();
      buffer1.flush();
      buffer1.writeUtf8("Fu):.<YfjLaJZy)");
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      realBufferedSource0.readByteString();
      // Undeclared exception!
      try { 
        realBufferedSource0.buffer.write((ByteString) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // byteString == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSink hashingSink0 = HashingSink.sha1(buffer0);
      buffer0.sha256();
      hashingSink0.hash();
      Segment segment0 = buffer0.writableSegment(11);
      buffer0.head = segment0;
      Charset charset0 = Charset.defaultCharset();
      Buffer buffer1 = buffer0.writeString("&E|>I", charset0);
      Buffer buffer2 = buffer1.writeLongLe(99999999996L);
      buffer0.readByte();
      buffer0.flush();
      buffer1.writeInt(11);
      buffer2.readInt();
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      buffer0.indexOf((byte)60, (long) (byte)60);
      HashingSink hashingSink0 = HashingSink.sha512(buffer0);
      ByteString byteString0 = hashingSink0.hash();
      buffer0.writableSegment((byte)60);
      buffer0.readUnsafe();
      buffer0.hmacSha512(byteString0);
      Buffer buffer1 = buffer0.writeLongLe((-1));
      buffer0.writeUtf8CodePoint((-1));
      // Undeclared exception!
      try { 
        buffer1.read(buffer0, (-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // byteCount < 0: -1
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      buffer0.completeSegmentByteCount();
      ByteString byteString0 = realBufferedSink0.buffer.snapshot();
      String string0 = byteString0.utf8;
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        realBufferedSink0.buffer.indexOf(byteString0, 0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // bytes is empty
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Pipe pipe0 = new Pipe(8192L);
      Pipe.PipeSource pipe_PipeSource0 = pipe0.new PipeSource();
      HashingSource hashingSource0 = HashingSource.sha256(pipe_PipeSource0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(hashingSource0);
      Buffer buffer0 = realBufferedSource0.buffer;
      buffer0.writeShort(8);
      // Undeclared exception!
      try { 
        buffer0.readAll(realBufferedSource0.buffer);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // source == this
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.segmentSizes();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.seek((-867L));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // offset=-867 > size=0
         //
         verifyException("okio.Buffer$UnsafeCursor", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Buffer buffer1 = realBufferedSource0.buffer;
      Buffer buffer2 = realBufferedSource0.buffer;
      buffer2.writableSegment(10);
      Inflater inflater0 = new Inflater();
      InflaterSource inflaterSource0 = new InflaterSource((BufferedSource) buffer1, inflater0);
      buffer0.request((-214L));
      buffer1.close();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(realBufferedSource0.buffer);
      Buffer buffer3 = realBufferedSink0.buffer();
      buffer3.timeout();
      // Undeclared exception!
      try { 
        realBufferedSource0.readByteString((-214L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // byteCount < 0: -214
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      long long0 = 24L;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Pipe pipe0 = new Pipe(24L);
      pipe0.sourceClosed = false;
      Buffer buffer0 = pipe0.buffer;
      Segment segment0 = new Segment();
      buffer0.head = segment0;
      buffer0.buffer();
      segment0.sharedCopy();
      // Undeclared exception!
      try { 
        buffer0.sha1();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      // Undeclared exception!
      try { 
        buffer0.readFully((Buffer) null, (-1L));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Pipe pipe0 = new Pipe(1L);
      Buffer buffer0 = pipe0.buffer;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Buffer buffer1 = realBufferedSource0.buffer;
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer1.readUnsafe();
      buffer_UnsafeCursor0.next();
      ByteString[] byteStringArray0 = new ByteString[1];
      ByteString byteString0 = realBufferedSource0.readByteString();
      byteStringArray0[0] = byteString0;
      Options options0 = Options.of(byteStringArray0);
      buffer_UnsafeCursor0.buffer.select(options0);
      buffer1.writeHexadecimalUnsignedLong(767L);
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.buffer.write((byte[]) null, 0, (-1496));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // source == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Buffer buffer1 = realBufferedSource0.buffer;
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer1.readUnsafe();
      Buffer buffer2 = buffer_UnsafeCursor0.buffer;
      HashingSink hashingSink0 = HashingSink.sha256(realBufferedSource0.buffer);
      ByteString byteString0 = hashingSink0.hash();
      buffer2.rangeEquals((-24L), byteString0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      RealBufferedSink realBufferedSink1 = (RealBufferedSink)realBufferedSink0.writeHexadecimalUnsignedLong(259L);
      Buffer buffer1 = realBufferedSink1.buffer;
      realBufferedSink1.buffer.completeSegmentByteCount();
      Buffer buffer2 = realBufferedSink0.buffer();
      buffer2.outputStream();
      SegmentedByteString segmentedByteString0 = (SegmentedByteString)realBufferedSink0.buffer.snapshot();
      Segment segment0 = new Segment();
      Buffer buffer3 = buffer0.writeUtf8("Z>[<`Y%`D+2o");
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      buffer3.write((ByteString) segmentedByteString0);
      realBufferedSink0.buffer.readShortLe();
      buffer3.close();
      try { 
        realBufferedSink1.buffer.readFully(buffer3, 1278L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.indexOf((byte)60, (long) (byte)60);
      HashingSink hashingSink0 = HashingSink.sha512(buffer0);
      ByteString byteString0 = hashingSink0.hash();
      buffer0.writableSegment((byte)60);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      buffer0.hmacSha512(byteString0);
      buffer0.writeLongLe((-1));
      buffer0.writeUtf8CodePoint((-1));
      buffer_UnsafeCursor0.buffer.readLongLe();
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Buffer buffer1 = buffer0.writeDecimalLong(534L);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-30);
      ByteString byteString0 = new ByteString(byteArray0);
      buffer1.indexOfElement(byteString0);
      buffer1.writeShort((byte) (-30));
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      BufferedSink bufferedSink0 = realBufferedSink0.writeHexadecimalUnsignedLong(259L);
      Buffer buffer1 = buffer0.clone();
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(realBufferedSink0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Buffer buffer2 = realBufferedSource0.buffer();
      buffer0.completeSegmentByteCount();
      buffer2.outputStream();
      ByteString byteString0 = realBufferedSink0.buffer.snapshot();
      Segment segment0 = new Segment();
      realBufferedSink0.buffer.timeout();
      ((RealBufferedSink) bufferedSink0).buffer.indexOfElement(byteString0);
      buffer1.segmentSizes();
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Buffer buffer1 = realBufferedSource0.buffer;
      Buffer buffer2 = realBufferedSource0.buffer;
      // Undeclared exception!
      try { 
        buffer1.writableSegment(1073741824);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte byte0 = (byte)60;
      buffer0.indexOf((byte)60, (long) (byte)60);
      HashingSource hashingSource0 = HashingSource.sha256(buffer0);
      ByteString byteString0 = hashingSource0.hash();
      buffer0.indexOf(byteString0, (long) (byte)60);
      buffer0.sha256();
      HashingSink hashingSink0 = HashingSink.sha512(buffer0);
      hashingSink0.hash();
      MockFile mockFile0 = new MockFile("", "");
      Charset charset0 = Charset.defaultCharset();
      buffer0.readString(charset0);
      mockFile0.setWritable(false, true);
      MockFileInputStream mockFileInputStream0 = null;
      try {
        mockFileInputStream0 = new MockFileInputStream(mockFile0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Charset.defaultCharset();
      ByteString[] byteStringArray0 = new ByteString[1];
      HashingSource hashingSource0 = HashingSource.sha1(buffer0);
      ByteString byteString0 = hashingSource0.hash();
      byteStringArray0[0] = byteString0;
      Options options0 = Options.of(byteStringArray0);
      buffer0.selectPrefix(options0);
      // Undeclared exception!
      try { 
        buffer0.readDecimalLong();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size == 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Buffer buffer1 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer1.readUnsafe();
      realBufferedSink0.buffer.writeInt(2569);
      realBufferedSink0.buffer.readUtf8Line();
      buffer0.sha1();
      buffer_UnsafeCursor0.buffer.inputStream();
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.buffer.readLong();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size < 8: 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Inflater inflater0 = new Inflater();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      buffer_UnsafeCursor0.close();
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.close();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // not attached to a buffer
         //
         verifyException("okio.Buffer$UnsafeCursor", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer1 = realBufferedSink0.buffer.writeDecimalLong(1564L);
      realBufferedSink0.buffer.clone();
      realBufferedSink0.buffer.completeSegmentByteCount();
      ByteString byteString0 = buffer0.snapshot();
      realBufferedSink0.buffer.writeDecimalLong(1564L);
      buffer1.readByteArray();
      // Undeclared exception!
      try { 
        buffer1.hmacSha1(byteString0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Empty key
         //
         verifyException("javax.crypto.spec.SecretKeySpec", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.emit();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      long long0 = 259L;
      BufferedSink bufferedSink0 = realBufferedSink0.writeHexadecimalUnsignedLong(259L);
      Buffer buffer1 = realBufferedSink0.buffer.clone();
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(bufferedSink0);
      buffer1.completeSegmentByteCount();
      buffer1.snapshot();
      // Undeclared exception!
      try { 
        buffer0.readLongLe();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size < 8: 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.readByteString();
      HashingSink hashingSink0 = HashingSink.sha1(buffer0);
      ByteString byteString0 = hashingSink0.hash();
      Segment segment0 = new Segment();
      Charset.defaultCharset();
      buffer0.md5();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Buffer buffer1 = realBufferedSource0.buffer();
      buffer1.size();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      Buffer buffer2 = buffer1.copyTo((OutputStream) byteArrayOutputStream0);
      buffer2.rangeEquals((long) 5, byteString0, (-1), 1952257861);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer1 = realBufferedSink0.buffer();
      realBufferedSink0.toString();
      ByteString byteString0 = realBufferedSink0.buffer.snapshot();
      String string0 = "|8l79~xi7/`Z&rIK|\"";
      Buffer buffer2 = buffer1.writeUtf8("|8l79~xi7/`Z&rIK|\"");
      buffer2.readInt();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      Buffer buffer3 = realBufferedSink0.buffer.write(byteString0);
      buffer3.segmentSizes();
      // Undeclared exception!
      try { 
        buffer0.readIntLe();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size < 4: 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      ByteString byteString0 = buffer0.sha256();
      Charset charset0 = Charset.defaultCharset();
      buffer0.writeString("&E>I", charset0);
      ByteString[] byteStringArray0 = new ByteString[9];
      byteStringArray0[0] = byteString0;
      Options options0 = Options.of(byteStringArray0);
      // Undeclared exception!
      try { 
        buffer0.selectPrefix(options0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Buffer buffer1 = realBufferedSource0.buffer.writeInt(62);
      realBufferedSource0.buffer.completeSegmentByteCount();
      ByteString byteString0 = buffer1.snapshot();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = realBufferedSource0.buffer.readAndWriteUnsafe();
      buffer_UnsafeCursor0.next();
      HashingSink hashingSink0 = HashingSink.hmacSha256(buffer1, byteString0);
      hashingSink0.hash();
      HashingSource.sha1(buffer0);
      realBufferedSource0.buffer();
      realBufferedSource0.buffer.rangeEquals(13L, byteString0);
      buffer_UnsafeCursor0.buffer.readInt();
      hashingSink0.hash();
      try { 
        realBufferedSource0.buffer.readFully(buffer_UnsafeCursor0.data);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      ByteString byteString0 = buffer0.readByteString();
      FileSystemHandling.shouldAllThrowIOExceptions();
      byteString0.base64Url();
      byte[] byteArray0 = new byte[1];
      Buffer buffer1 = buffer0.writeShort((byte)8);
      Buffer buffer2 = buffer0.write(byteString0);
      byteArray0[0] = (byte)8;
      ByteString byteString1 = new ByteString(byteArray0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      int int1 = ObjectStreamConstants.baseWireHandle;
      ByteString byteString2 = buffer0.md5();
      byteString2.toString();
      buffer1.indexOfElement(byteString2, (long) 1);
      buffer1.buffer();
      DataInputStream dataInputStream0 = new DataInputStream((InputStream) null);
      buffer1.equals(dataInputStream0);
      // Undeclared exception!
      try { 
        buffer2.readByteArray((long) 8257536);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=2 offset=0 byteCount=8257536
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      long long0 = 0L;
      RealBufferedSink realBufferedSink1 = (RealBufferedSink)realBufferedSink0.writeHexadecimalUnsignedLong(0L);
      realBufferedSink0.buffer.clone();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(realBufferedSink0.buffer);
      realBufferedSource0.buffer();
      realBufferedSink1.buffer();
      String string0 = "J-kI[[XJ:<?y3Mmc";
      // Undeclared exception!
      try { 
        Charset.forName("id9gWmb");
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // id9gWmb
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Charset charset0 = Charset.defaultCharset();
      buffer0.writeString(",<y*9\"SN", charset0);
      ByteString[] byteStringArray0 = new ByteString[1];
      HashingSource hashingSource0 = HashingSource.sha1(buffer0);
      ByteString byteString0 = hashingSource0.hash();
      byteStringArray0[0] = byteString0;
      Options options0 = Options.of(byteStringArray0);
      buffer0.selectPrefix(options0);
      // Undeclared exception!
      try { 
        buffer0.readDecimalLong();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Expected leading [0-9] or '-' character but was 0x2c
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Pipe pipe0 = new Pipe(24L);
      pipe0.sourceClosed = false;
      Buffer buffer0 = pipe0.buffer;
      Segment segment0 = buffer0.head;
      buffer0.head = null;
      Buffer buffer1 = buffer0.buffer();
      ByteString byteString0 = buffer0.sha1();
      buffer1.indexOf(byteString0);
      buffer0.request(1415L);
      buffer1.close();
      pipe0.sinkClosed = false;
      Buffer buffer2 = buffer1.writeUtf8("qZ1MOjHZgJ:/9");
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      Deflater deflater0 = new Deflater();
      deflater0.finished();
      buffer2.flush();
      buffer1.writeInt(2192);
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(buffer1);
      realBufferedSource0.buffer.rangeEquals(1415L, byteString0, 11, (-588));
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      BufferedSink bufferedSink0 = realBufferedSink0.writeHexadecimalUnsignedLong(259L);
      buffer0.clone();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      ByteString byteString0 = realBufferedSource0.readByteString();
      ((RealBufferedSink) bufferedSink0).buffer.rangeEquals(259L, byteString0);
      try { 
        buffer0.write((Source) ((RealBufferedSink) bufferedSink0).buffer, 656L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(realBufferedSink0);
      realBufferedSink0.buffer.writeShort(50);
      Buffer buffer1 = realBufferedSink0.buffer.writeLongLe(50);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Buffer buffer2 = realBufferedSource0.buffer();
      buffer0.sha512();
      buffer2.write((Source) realBufferedSink0.buffer, (long) 2);
      realBufferedSource0.buffer();
      buffer2.flush();
      // Undeclared exception!
      try { 
        buffer1.readFully(realBufferedSink0.buffer, (long) 50);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // source == this
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Charset charset0 = Charset.defaultCharset();
      buffer0.writeString("&E>I", charset0);
      Buffer buffer1 = realBufferedSink0.buffer.writeInt((byte)22);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      Buffer buffer2 = buffer1.copyTo((OutputStream) byteArrayOutputStream0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer2);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Pipe pipe0 = new Pipe(10L);
      Buffer buffer0 = pipe0.buffer;
      try { 
        buffer0.readUtf8CodePoint();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Buffer buffer0 = new Buffer();
      Segment segment0 = new Segment();
      byte byte0 = (byte)80;
      Charset.defaultCharset();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      try { 
        buffer0.readFrom((InputStream) pipedInputStream0, (long) (byte)80);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeDecimalLong(2147483647L);
      FileSystemHandling.shouldAllThrowIOExceptions();
      int int0 = ObjectStreamConstants.baseWireHandle;
      // Undeclared exception!
      try { 
        buffer1.writeUtf8CodePoint(1073741824);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected code point: 40000000
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      ByteString byteString0 = buffer0.readByteString();
      MockPrintStream mockPrintStream0 = new MockPrintStream("byteCount > Integer.MAX_VALUE: ");
      Segment segment0 = new Segment();
      Charset.defaultCharset();
      Pipe pipe0 = new Pipe(10000000000000L);
      Buffer buffer1 = pipe0.buffer;
      Buffer buffer2 = buffer1.writeUtf8CodePoint(520);
      Charset.defaultCharset();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      // Undeclared exception!
      try { 
        buffer2.indexOf(byteString0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // bytes is empty
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      realBufferedSink0.writeHexadecimalUnsignedLong((byte)22);
      realBufferedSink0.buffer.md5();
      Pipe pipe0 = new Pipe((byte)22);
      realBufferedSink0.buffer();
      realBufferedSink0.buffer.readUtf8Line(1L);
      realBufferedSink0.buffer.buffer();
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Pipe pipe0 = new Pipe(8192L);
      Pipe.PipeSource pipe_PipeSource0 = pipe0.new PipeSource();
      HashingSource hashingSource0 = HashingSource.sha256(pipe_PipeSource0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(hashingSource0);
      Buffer buffer0 = realBufferedSource0.buffer;
      buffer0.readAll(realBufferedSource0.buffer);
      Charset charset0 = Charset.defaultCharset();
      // Undeclared exception!
      try { 
        buffer0.writeString((String) null, 1508, 1508, charset0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // string == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.segmentSizes();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      // Undeclared exception!
      try { 
        buffer0.writeTo((OutputStream) null, 16L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // out == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "wz&i6EE");
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      buffer0.readUtf8Line();
      Buffer buffer1 = realBufferedSink0.buffer.writeShort(585);
      // Undeclared exception!
      try { 
        buffer1.readHexadecimalUnsignedLong();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Expected leading [0-9a-fA-F] character but was 0x2
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeDecimalLong((-581L));
      buffer0.hashCode();
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.resizeBuffer(144997L);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // not acquired
         //
         verifyException("okio.Buffer$UnsafeCursor", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Pipe pipe0 = new Pipe(1584L);
      Buffer buffer0 = pipe0.buffer;
      buffer0.writeUtf8("byteString == null");
      // Undeclared exception!
      try { 
        buffer0.readDecimalLong();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Expected leading [0-9] or '-' character but was 0x62
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      ByteString byteString0 = buffer0.readByteString();
      byteString0.base64Url();
      byte[] byteArray0 = new byte[1];
      Buffer buffer1 = buffer0.writeShort((byte)8);
      byteArray0[0] = (byte)8;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      ByteString byteString1 = new ByteString(byteArray0);
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      buffer0.readUtf8CodePoint();
      ByteString byteString2 = buffer0.md5();
      buffer1.indexOfElement(byteString2, (long) 1);
      // Undeclared exception!
      try { 
        buffer0.readShortLe();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size < 2: 1
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.clear();
      ByteString byteString0 = buffer0.snapshot();
      buffer0.writableSegment(57);
      ByteString[] byteStringArray0 = new ByteString[6];
      byteStringArray0[0] = byteString0;
      byteStringArray0[1] = byteString0;
      byteStringArray0[2] = byteString0;
      byteStringArray0[3] = byteString0;
      byteStringArray0[4] = byteString0;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byteStringArray0[5] = byteString0;
      Options options0 = Options.of(byteStringArray0);
      buffer0.select(options0);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      buffer_UnsafeCursor0.offset = (long) 0;
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.seek(16L);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // offset=16 > size=0
         //
         verifyException("okio.Buffer$UnsafeCursor", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      RealBufferedSink realBufferedSink1 = (RealBufferedSink)realBufferedSink0.writeHexadecimalUnsignedLong(2);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Buffer buffer1 = realBufferedSink1.buffer;
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer1.readUnsafe();
      buffer_UnsafeCursor0.next();
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      realBufferedSink1.buffer.readDecimalLong();
      String string0 = "";
      // Undeclared exception!
      try { 
        realBufferedSink1.buffer.readByteString(1190L);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=0 byteCount=1190
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer1 = realBufferedSink0.buffer();
      realBufferedSink0.writeHexadecimalUnsignedLong(9223372036854775807L);
      realBufferedSink0.buffer.readUtf8Line();
      Buffer buffer2 = buffer1.writeShort(708);
      buffer2.readByte();
      buffer1.readByte();
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      Buffer buffer0 = new Buffer();
      buffer0.readUnsafe();
      Buffer buffer1 = buffer0.writeDecimalLong((-1));
      buffer0.readUtf8Line();
      buffer1.writeIntLe((-4838));
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      RealBufferedSink realBufferedSink1 = (RealBufferedSink)realBufferedSink0.writeHexadecimalUnsignedLong(2);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Buffer buffer1 = realBufferedSink1.buffer;
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer1.readUnsafe();
      buffer_UnsafeCursor0.next();
      HashingSink hashingSink0 = HashingSink.sha512(realBufferedSink1);
      ByteString byteString0 = hashingSink0.hash();
      HashingSink hashingSink1 = HashingSink.hmacSha512(realBufferedSink1, byteString0);
      hashingSink1.hash();
      buffer0.hmacSha256(byteString0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Buffer buffer2 = new Buffer();
      buffer_UnsafeCursor0.buffer.writeDecimalLong(32L);
      realBufferedSink1.buffer.indexOf((byte) (-57), (long) 2);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      Buffer buffer3 = realBufferedSink0.buffer;
      buffer3.completeSegmentByteCount();
      try { 
        realBufferedSink1.buffer.readUtf8LineStrict();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // \\n not found: limit=3 content=323332\u2026
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSink hashingSink0 = HashingSink.sha1(buffer0);
      ByteString byteString0 = hashingSink0.hash();
      hashingSink0.hash();
      Buffer buffer1 = buffer0.buffer();
      buffer1.hmacSha256(byteString0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
          Buffer buffer0 = new Buffer();
          Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
          buffer_UnsafeCursor0.resizeBuffer(100L);
          Buffer buffer1 = buffer_UnsafeCursor0.buffer;
          FileDescriptor fileDescriptor0 = new FileDescriptor();
          FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
          MockFileOutputStream mockFileOutputStream0 = null;
          try {
            mockFileOutputStream0 = new MockFileOutputStream(fileDescriptor0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.lang.RuntimePermission\" \"writeFileDescriptor\")
             // java.lang.Thread.getStackTrace(Thread.java:1556)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:434)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:954)
             // java.io.FileOutputStream.<init>(FileOutputStream.java:245)
             // org.evosuite.runtime.mock.java.io.MockFileOutputStream.<init>(MockFileOutputStream.java:114)
             // sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
             // sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)
             // sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
             // java.lang.reflect.Constructor.newInstance(Constructor.java:423)
             // org.evosuite.testcase.statements.ConstructorStatement$1.execute(ConstructorStatement.java:233)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:169)
             // org.evosuite.testcase.statements.ConstructorStatement.execute(ConstructorStatement.java:188)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:307)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:213)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:55)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
             // java.lang.Thread.run(Thread.java:745)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "bU");
      buffer0.snapshot();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = realBufferedSource0.buffer.readUnsafe();
      Buffer buffer1 = buffer_UnsafeCursor0.buffer;
      buffer1.writeDecimalLong((-1L));
      buffer_UnsafeCursor0.buffer.readShort();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer_UnsafeCursor0.buffer);
      // Undeclared exception!
      try { 
        Options.of((ByteString[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Options", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      RealBufferedSink realBufferedSink1 = (RealBufferedSink)realBufferedSink0.writeHexadecimalUnsignedLong(2);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Buffer buffer1 = realBufferedSink1.buffer;
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer1.readUnsafe();
      buffer_UnsafeCursor0.next();
      long long0 = 965L;
      // Undeclared exception!
      try { 
        realBufferedSink1.buffer.readFrom((InputStream) null, 965L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // in == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      Buffer buffer1 = buffer_UnsafeCursor0.buffer;
      HashingSource.sha256(buffer_UnsafeCursor0.buffer);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(buffer1);
      RealBufferedSink realBufferedSink2 = new RealBufferedSink(buffer1);
      realBufferedSink1.buffer.writeDecimalLong(60L);
      realBufferedSink2.buffer.readByteString();
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      long long0 = (-72057594037927936L);
      // Undeclared exception!
      try { 
        buffer0.indexOf((byte)15, (long) (byte)15, (-72057594037927936L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // size=0 fromIndex=15 toIndex=-72057594037927936
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      realBufferedSource0.buffer.sha512();
      long long0 = (-1028L);
      // Undeclared exception!
      try { 
        buffer0.readInt();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size < 4: 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer1 = realBufferedSink0.buffer;
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(buffer1);
      Buffer buffer2 = realBufferedSink1.buffer();
      buffer2.snapshot();
      buffer2.writableSegment(57);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ByteString[] byteStringArray0 = new ByteString[0];
      Options options0 = Options.of(byteStringArray0);
      buffer2.select(options0);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = realBufferedSink1.buffer.readAndWriteUnsafe(buffer_UnsafeCursor0);
      buffer0.sha512();
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor1.buffer.readUtf8LineStrict((long) (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // limit < 0: -1
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      ByteString byteString0 = buffer0.sha256();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      ByteString byteString1 = realBufferedSource0.readByteString();
      byteString0.lastIndexOf(byteString1, (-695));
      Charset charset0 = Charset.defaultCharset();
      Buffer buffer1 = buffer0.writeString("&E>I", charset0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ByteString[] byteStringArray0 = new ByteString[3];
      byteStringArray0[0] = byteString0;
      byteStringArray0[1] = byteString1;
      byteStringArray0[2] = byteString0;
      Options.of(byteStringArray0);
      Options options0 = Options.of(byteStringArray0);
      buffer1.select(options0);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      buffer1.readAndWriteUnsafe(buffer_UnsafeCursor0);
      realBufferedSource0.buffer.clear();
      realBufferedSource0.buffer.request((-1807L));
      Buffer buffer2 = new Buffer();
      buffer2.sha1();
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Charset charset0 = Charset.defaultCharset();
      Buffer buffer1 = buffer0.writeString("i)*+mE", charset0);
      ByteString[] byteStringArray0 = new ByteString[0];
      Options options0 = Options.of(byteStringArray0);
      realBufferedSink0.buffer.selectPrefix(options0);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer1.readAndWriteUnsafe();
      buffer_UnsafeCursor0.next();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(realBufferedSink0.buffer);
      realBufferedSource0.readByteString();
      realBufferedSource0.buffer.writeUtf8("i)*+mE");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "sy{(<-wMf");
      // Undeclared exception!
      try { 
        realBufferedSink0.buffer.readShortLe();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size < 2: 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      ByteString byteString0 = buffer0.sha256();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ".inputStream()");
      Charset charset0 = Charset.defaultCharset();
      Buffer buffer1 = buffer0.writeString("&E>I", charset0);
      ByteString[] byteStringArray0 = new ByteString[9];
      byteStringArray0[0] = byteString0;
      byteStringArray0[3] = byteString0;
      Options.of(byteStringArray0);
      buffer1.completeSegmentByteCount();
      buffer0.snapshot();
      Buffer buffer2 = buffer1.writeDecimalLong(0L);
      buffer2.readByteArray();
      buffer1.hmacSha1(byteString0);
      // Undeclared exception!
      try { 
        buffer1.readDecimalLong();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size == 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Charset charset0 = Charset.defaultCharset();
      Buffer buffer1 = realBufferedSink0.buffer.writeString(",<y*9\"SN", charset0);
      HashingSource hashingSource0 = HashingSource.sha1(buffer0);
      ByteString byteString0 = hashingSource0.hash();
      HashingSink hashingSink0 = HashingSink.sha1(buffer0);
      HashingSource.hmacSha1(hashingSource0, byteString0);
      buffer1.indexOf(byteString0, 5381L);
      hashingSink0.hash();
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      // Undeclared exception!
      try { 
        realBufferedSink0.buffer.readDecimalLong();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Expected leading [0-9] or '-' character but was 0x2c
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      ByteString byteString0 = buffer0.readByteString();
      buffer0.rangeEquals(0L, byteString0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(realBufferedSink0);
      BufferedSink bufferedSink0 = realBufferedSink0.writeHexadecimalUnsignedLong((-3277L));
      buffer0.writeShort((-3385));
      ((RealBufferedSink) bufferedSink0).buffer.md5();
      Pipe pipe0 = new Pipe(10000000000000001L);
      Buffer buffer1 = pipe0.buffer;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = ((RealBufferedSink) bufferedSink0).buffer.readAndWriteUnsafe();
      buffer_UnsafeCursor0.resizeBuffer(16L);
      realBufferedSink1.buffer();
      // Undeclared exception!
      try { 
        buffer0.readByteString(65280L);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=2 offset=0 byteCount=65280
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      BufferedSink bufferedSink0 = realBufferedSink0.writeHexadecimalUnsignedLong((-176L));
      Buffer buffer1 = new Buffer();
      HashingSource.sha1(buffer1);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      MockPrintStream mockPrintStream0 = new MockPrintStream(" content=");
      Buffer buffer2 = ((RealBufferedSink) bufferedSink0).buffer.writeTo((OutputStream) mockPrintStream0);
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(buffer2);
      Charset charset0 = Charset.defaultCharset();
      Buffer buffer3 = realBufferedSink0.buffer.writeString(" content=", charset0);
      HashingSource hashingSource0 = HashingSource.sha1(buffer1);
      hashingSource0.hash();
      HashingSink.sha1(realBufferedSink1);
      RealBufferedSink realBufferedSink2 = new RealBufferedSink(buffer3);
      realBufferedSink1.outputStream();
      // Undeclared exception!
      try { 
        buffer2.snapshot((-1023));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=9 offset=0 byteCount=-1023
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Buffer buffer0 = new Buffer();
      Charset charset0 = Charset.defaultCharset();
      // Undeclared exception!
      try { 
        buffer0.writeString("f%qa3V", 1908874353, 6, charset0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endIndex < beginIndex: 6 < 1908874353
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Inflater inflater0 = new Inflater(true);
      InflaterSource inflaterSource0 = new InflaterSource((BufferedSource) buffer0, inflater0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(inflaterSource0);
      InputStream inputStream0 = realBufferedSource0.buffer.inputStream();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(realBufferedSource0.buffer);
      Buffer buffer1 = realBufferedSink0.buffer;
      buffer1.readFrom(inputStream0);
      realBufferedSource0.buffer.equals(buffer1);
      realBufferedSource0.buffer.buffer();
      // Undeclared exception!
      try { 
        buffer0.readUtf8Line(1000000000000L);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=999999999999 byteCount=1
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(realBufferedSink0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Buffer buffer1 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      buffer_UnsafeCursor0.next();
      realBufferedSink0.buffer.writeInt((-457));
      realBufferedSink0.buffer.readUtf8Line();
      Buffer buffer2 = realBufferedSink0.buffer;
      HashingSource.sha1(buffer2);
      buffer1.writeUtf8("\uFFFD\uFFFD\uFFFD7");
      buffer1.readByteArray();
      ByteString byteString0 = new ByteString((byte[]) null);
      // Undeclared exception!
      try { 
        buffer0.write(byteString0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(realBufferedSink0);
      BufferedSink bufferedSink0 = realBufferedSink0.writeHexadecimalUnsignedLong((-3277L));
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Buffer buffer1 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      buffer_UnsafeCursor0.next();
      realBufferedSink0.buffer.writeInt((-457));
      realBufferedSink0.buffer.readUtf8Line();
      Buffer buffer2 = realBufferedSink0.buffer;
      HashingSource.sha1(buffer2);
      buffer1.writeUtf8("fffffffffffff333\uFFFD\uFFFD\uFFFD7");
      buffer1.readByteArray();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(((RealBufferedSink) bufferedSink0).buffer);
      ByteString byteString0 = new ByteString((byte[]) null);
      // Undeclared exception!
      try { 
        buffer0.write(byteString0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      int int0 = 62;
      Buffer buffer1 = realBufferedSource0.buffer.writeInt(62);
      realBufferedSource0.buffer.completeSegmentByteCount();
      buffer1.snapshot();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = realBufferedSource0.buffer.readAndWriteUnsafe();
      buffer_UnsafeCursor0.next();
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.resizeBuffer((-9L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // newSize < 0: -9
         //
         verifyException("okio.Buffer$UnsafeCursor", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSink hashingSink0 = HashingSink.sha512(buffer0);
      hashingSink0.timeout();
      ByteString byteString0 = hashingSink0.hash();
      buffer0.hmacSha1(byteString0);
      buffer0.writeUtf8("");
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(realBufferedSink0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Buffer buffer1 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      buffer_UnsafeCursor0.next();
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.next();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer$UnsafeCursor", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(realBufferedSink0);
      Buffer buffer1 = buffer0.writeDecimalLong(2147483647L);
      realBufferedSink0.emitCompleteSegments();
      FileSystemHandling.shouldAllThrowIOExceptions();
      RealBufferedSink realBufferedSink2 = new RealBufferedSink(realBufferedSink0);
      realBufferedSink2.writeShort(1780);
      HashingSink.sha1(buffer1);
      int int0 = ObjectStreamConstants.baseWireHandle;
      realBufferedSink2.buffer.writeUtf8CodePoint(8192);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      Buffer buffer2 = realBufferedSource0.buffer();
      buffer2.read(realBufferedSource0.buffer, 1915L);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(realBufferedSink0);
      Buffer buffer1 = realBufferedSink1.buffer.writeShort(576);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Buffer buffer2 = buffer1.writeLongLe((-6409L));
      buffer2.sha1();
      buffer1.readLong();
      HashingSource hashingSource0 = HashingSource.sha1(buffer1);
      ByteString byteString0 = hashingSource0.hash();
      Buffer buffer3 = realBufferedSink0.buffer;
      byteString0.hex();
      buffer1.readUtf8CodePoint();
      Buffer buffer4 = buffer3.writeUtf8CodePoint(65533);
      buffer3.readUtf8CodePoint();
      Inflater inflater0 = new Inflater();
      // Undeclared exception!
      try { 
        buffer4.readUnsafe((Buffer.UnsafeCursor) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      BufferedSink bufferedSink0 = realBufferedSink0.writeHexadecimalUnsignedLong(259L);
      Buffer buffer1 = new Buffer();
      BufferedSink bufferedSink1 = bufferedSink0.writeUtf8("fromIndex < 0");
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = ((RealBufferedSink) bufferedSink1).buffer.readUnsafe();
      Pipe pipe0 = new Pipe(700L);
      pipe0.source();
      Buffer buffer2 = new Buffer();
      realBufferedSink0.buffer.readUtf8CodePoint();
      buffer_UnsafeCursor0.buffer.readShortLe();
      // Undeclared exception!
      try { 
        ((RealBufferedSink) bufferedSink0).buffer.readFrom((InputStream) null, (-389L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // byteCount < 0: -389
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Deflater deflater0 = new Deflater(1);
      DeflaterSink deflaterSink0 = new DeflaterSink((BufferedSink) buffer0, deflater0);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-34);
      byteArray0[1] = (byte)48;
      byteArray0[2] = (byte)32;
      byteArray0[3] = (byte)6;
      byteArray0[4] = (byte)102;
      byteArray0[5] = (byte)107;
      ByteString byteString0 = new ByteString(byteArray0);
      HashingSink hashingSink0 = HashingSink.hmacSha256(deflaterSink0, byteString0);
      Sink sink0 = hashingSink0.delegate();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(sink0);
      Buffer buffer1 = realBufferedSink0.buffer();
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 1, (byte)6);
      try { 
        buffer1.readFrom((InputStream) byteArrayInputStream0, 245L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Pipe pipe0 = new Pipe(8L);
      Buffer buffer0 = pipe0.buffer;
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      Buffer buffer1 = buffer_UnsafeCursor0.buffer;
      // Undeclared exception!
      try { 
        buffer0.copyTo((Buffer) null, (-1L), (long) (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // out == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      RealBufferedSink realBufferedSink1 = (RealBufferedSink)realBufferedSink0.writeHexadecimalUnsignedLong(2);
      realBufferedSink1.writeByte(2);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Buffer buffer1 = realBufferedSink1.buffer;
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = realBufferedSink0.buffer.readAndWriteUnsafe();
      buffer_UnsafeCursor0.next();
      FileSystemHandling.shouldAllThrowIOExceptions();
      realBufferedSink0.write(buffer_UnsafeCursor0.data);
      HashingSink hashingSink0 = HashingSink.sha1(buffer_UnsafeCursor0.buffer);
      ByteString byteString0 = hashingSink0.hash();
      byteString0.hex();
      int int0 = ObjectStreamConstants.baseWireHandle;
      realBufferedSink0.buffer.writeUtf8CodePoint((-679));
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-27);
      byteArray0[2] = (byte) (-27);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Buffer buffer1 = new Buffer();
      Buffer buffer2 = buffer0.writeDecimalLong(16711680L);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      try { 
        buffer2.readUtf8LineStrict();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // \\n not found: limit=8 content=3136373131363830\u2026
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/25_okio");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer1 = buffer0.writeLongLe(225L);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(realBufferedSink0.buffer);
      Buffer buffer2 = buffer0.writeShort((byte)8);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)8;
      byteArray0[1] = (byte)8;
      byteArray0[2] = (byte)8;
      ByteString byteString0 = new ByteString(byteArray0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      buffer1.readUtf8CodePoint();
      buffer1.md5();
      buffer2.indexOfElement(byteString0, (long) (byte)8);
      buffer1.readShortLe();
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      Buffer buffer0 = new Buffer();
      buffer0.readUnsafe();
      Buffer buffer1 = buffer0.writeDecimalLong(999999999999997L);
      buffer0.readUtf8Line();
      buffer1.writeIntLe((-4838));
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Buffer buffer1 = buffer0.writeDecimalLong((-72057594037927936L));
      short short0 = ObjectStreamConstants.STREAM_VERSION;
      int int0 = 2596;
      // Undeclared exception!
      try { 
        buffer1.snapshot(2596);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=18 offset=0 byteCount=2596
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Buffer buffer0 = new Buffer();
      FileSystemHandling.shouldAllThrowIOExceptions();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      realBufferedSink0.buffer();
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(realBufferedSink0);
      long long0 = 9223372036854775807L;
      RealBufferedSink realBufferedSink2 = new RealBufferedSink(buffer0);
      realBufferedSink2.buffer.clear();
      byte[] byteArray0 = new byte[7];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      realBufferedSink1.writeDecimalLong(9223372036854775807L);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      try { 
        realBufferedSink2.buffer.readFully(byteArray0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      long long0 = 163L;
      Pipe pipe0 = new Pipe(163L);
      Buffer buffer0 = pipe0.buffer;
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)16;
      byteArray0[1] = (byte)32;
      byteArray0[2] = (byte)43;
      byteArray0[3] = (byte)2;
      byteArray0[4] = (byte) (-108);
      byteArray0[5] = (byte) (-102);
      byteArray0[6] = (byte)2;
      byteArray0[7] = (byte) (-108);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)2, (byte)16);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      Buffer buffer1 = buffer0.readFrom((InputStream) dataInputStream0);
      // Undeclared exception!
      try { 
        buffer1.write(buffer0, 1000000000L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // source == this
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      realBufferedSink0.writeHexadecimalUnsignedLong(259L);
      Buffer buffer1 = new Buffer();
      realBufferedSink0.buffer.writeLongLe(35);
      realBufferedSink0.buffer.readDecimalLong();
      Pipe pipe0 = new Pipe(2391L);
      Buffer buffer2 = pipe0.buffer;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      // Undeclared exception!
      try { 
        buffer0.readShortLe();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size < 2: 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Buffer buffer0 = new Buffer();
      FileSystemHandling.shouldAllThrowIOExceptions();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      realBufferedSink0.buffer();
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(realBufferedSink0);
      buffer0.sha256();
      int int0 = (-2145);
      Buffer buffer1 = realBufferedSink0.buffer.writeShort((-2145));
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)8;
      byteArray0[1] = (byte) (-88);
      byteArray0[2] = (byte)8;
      byteArray0[3] = (byte)8;
      byteArray0[3] = (byte)8;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      ByteString byteString0 = new ByteString(byteArray0);
      int int1 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      try { 
        buffer1.readUtf8CodePoint();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // size < 4: 2 (to read code point prefixed 0xfffffff7)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer1 = new Buffer();
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(realBufferedSink0);
      RealBufferedSink realBufferedSink2 = new RealBufferedSink(buffer1);
      Buffer buffer2 = realBufferedSink1.buffer.writeDecimalLong(1000000L);
      realBufferedSink1.emitCompleteSegments();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      buffer2.readUtf8Line();
      buffer0.writeLongLe(1253L);
      // Undeclared exception!
      try { 
        realBufferedSink1.buffer.readFully((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)89;
      byteArray0[1] = (byte)31;
      byteArray0[2] = (byte) (-74);
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte) (-35);
      byteArray0[5] = (byte) (-95);
      byteArray0[6] = (byte)55;
      byteArray0[7] = (byte) (-78);
      realBufferedSink0.write(byteArray0);
      Segment segment0 = new Segment();
      realBufferedSink0.buffer.head = segment0;
      Buffer buffer1 = realBufferedSink0.buffer();
      buffer1.readLong();
      int int0 = 2145586577;
      // Undeclared exception!
      try { 
        realBufferedSink0.buffer.writeInt(2145586577);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(realBufferedSink0);
      Buffer buffer1 = realBufferedSink1.buffer.writeShort(576);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Buffer buffer2 = buffer1.writeLongLe(576);
      ByteString byteString0 = buffer2.sha1();
      buffer1.readLong();
      HashingSource hashingSource0 = HashingSource.sha1(buffer1);
      ByteString byteString1 = hashingSource0.hash();
      Buffer buffer3 = realBufferedSink0.buffer;
      byteString1.hex();
      int int0 = new Integer(576);
      buffer3.writeUtf8CodePoint(576);
      buffer3.readUtf8CodePoint();
      Inflater inflater0 = new Inflater();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      buffer2.indexOf(byteString0);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer2.readUnsafe();
      // Undeclared exception!
      try { 
        buffer2.readUnsafe(buffer_UnsafeCursor0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // already attached to a buffe
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      BufferedSink bufferedSink0 = realBufferedSink0.writeHexadecimalUnsignedLong((-176L));
      Buffer buffer1 = new Buffer();
      HashingSource hashingSource0 = HashingSource.sha1(buffer1);
      HashingSource.md5(((RealBufferedSink) bufferedSink0).buffer);
      realBufferedSink0.buffer.readHexadecimalUnsignedLong();
      hashingSource0.hash();
      String string0 = ":j(q,U\"YyTXYG";
      int int0 = 45;
      bufferedSink0.buffer();
      // Undeclared exception!
      try { 
        realBufferedSink0.buffer.readByteString(10L);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=0 byteCount=10
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      BufferedSink bufferedSink0 = realBufferedSink0.writeHexadecimalUnsignedLong(238L);
      buffer0.completeSegmentByteCount();
      ByteString byteString0 = realBufferedSink0.buffer.snapshot();
      Segment segment0 = ((RealBufferedSink) bufferedSink0).buffer.head;
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      HashingSource.md5(realBufferedSink0.buffer);
      HashingSink hashingSink0 = HashingSink.hmacSha512(buffer0, byteString0);
      ByteString byteString1 = hashingSink0.hash();
      ByteString[] byteStringArray0 = new ByteString[3];
      byteStringArray0[0] = byteString1;
      byteStringArray0[1] = byteString0;
      byteStringArray0[2] = byteString1;
      Options options0 = Options.of(byteStringArray0);
      realBufferedSink0.buffer.selectPrefix(options0);
      // Undeclared exception!
      try { 
        realBufferedSink0.buffer.readDecimalLong();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Expected leading [0-9] or '-' character but was 0x65
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      BufferedSink bufferedSink0 = realBufferedSink0.writeHexadecimalUnsignedLong(245L);
      buffer0.completeSegmentByteCount();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      HashingSource.md5(realBufferedSink0.buffer);
      Integer integer0 = new Integer(16);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      realBufferedSink0.buffer.readFrom((InputStream) pipedInputStream0, 0L);
      realBufferedSink0.buffer.writeShort((-2489));
      Buffer buffer1 = new Buffer();
      BufferedSink bufferedSink1 = bufferedSink0.writeIntLe((-2489));
      ((RealBufferedSink) bufferedSink1).buffer.writeUtf8("ai'/[1wV[-ND^mn5/");
      ((RealBufferedSink) bufferedSink0).buffer.readHexadecimalUnsignedLong();
      buffer0.buffer();
      try { 
        realBufferedSink0.buffer.readFully(buffer1, 1434L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Charset.defaultCharset();
      Buffer buffer1 = realBufferedSink0.buffer.writeDecimalLong(100000000000000000L);
      realBufferedSink0.emitCompleteSegments();
      FileSystemHandling.shouldAllThrowIOExceptions();
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(realBufferedSink0);
      realBufferedSink0.writeShort((-365));
      HashingSink hashingSink0 = HashingSink.sha1(realBufferedSink0);
      hashingSink0.hash();
      HashingSource hashingSource0 = HashingSource.sha1(realBufferedSink1.buffer);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(realBufferedSink0.buffer);
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(realBufferedSource0);
      realBufferedSource0.buffer();
      hashingSource0.hash();
      // Undeclared exception!
      try { 
        buffer1.readFully((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer1 = buffer0.writeShort(2);
      buffer1.readByteArray((long) 2);
      buffer1.writeLongLe(1000000L);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      HashingSource.md5(buffer0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      Buffer buffer2 = new Buffer();
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(realBufferedSource0);
      Buffer buffer3 = realBufferedSource0.buffer();
      buffer0.writeDecimalLong(99999L);
      realBufferedSource0.buffer.readUtf8Line();
      // Undeclared exception!
      try { 
        buffer3.readByte();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size == 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer1 = buffer0.writeShort(2);
      buffer1.readByteArray((long) 2);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      HashingSource.sha256(buffer0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Buffer buffer2 = realBufferedSink0.buffer;
      buffer2.outputStream();
      buffer2.writableSegment(2);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      buffer_UnsafeCursor0.offset = 194186L;
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = buffer1.readUnsafe(buffer_UnsafeCursor0);
      Buffer buffer3 = buffer_UnsafeCursor1.buffer;
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(realBufferedSource0);
      realBufferedSource0.buffer();
      ByteString byteString0 = buffer3.sha512();
      buffer_UnsafeCursor1.buffer.writeLongLe(10L);
      Buffer buffer4 = realBufferedSink0.buffer;
      buffer_UnsafeCursor0.buffer.hmacSha256(byteString0);
      buffer3.readUtf8LineStrict();
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.resizeBuffer(144997L);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // resizeBuffer() only permitted for read/write buffers
         //
         verifyException("okio.Buffer$UnsafeCursor", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "#|\"av*>S(#_@;OtkoYij");
      Buffer buffer1 = new Buffer();
      realBufferedSink0.writeInt((byte)22);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      Buffer buffer2 = realBufferedSource0.buffer;
      Pipe pipe0 = new Pipe((byte)22);
      Buffer buffer3 = pipe0.buffer;
      int int0 = 56319;
      Buffer buffer4 = buffer3.writeShort(56319);
      buffer1.readUnsafe();
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(buffer3);
      realBufferedSource1.buffer();
      buffer4.readUtf8CodePoint();
      try { 
        buffer2.skip((byte)22);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      realBufferedSink0.writeHexadecimalUnsignedLong((-176L));
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(realBufferedSink0.buffer);
      HashingSource hashingSource0 = HashingSource.md5(buffer0);
      ByteString byteString0 = hashingSource0.hash();
      realBufferedSource0.indexOf(byteString0, (long) (byte)9);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      Buffer buffer1 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = buffer0.readUnsafe(buffer_UnsafeCursor0);
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(buffer_UnsafeCursor0.buffer);
      Buffer buffer2 = realBufferedSource1.buffer();
      buffer2.segmentSizes();
      realBufferedSource0.buffer.writeLongLe(2147483647L);
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor1.buffer.readUnsafe(buffer_UnsafeCursor0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // already attached to a buffe
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/25_okio");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Buffer buffer1 = realBufferedSink0.buffer.writeDecimalLong((-1L));
      buffer1.readShort();
      Charset charset0 = Charset.defaultCharset();
      realBufferedSink0.writeString("E4:~Gj7RGc:{", charset0);
      Pipe pipe0 = new Pipe(632L);
      Buffer buffer2 = pipe0.buffer;
      Buffer buffer3 = realBufferedSink0.buffer.clone();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      buffer1.md5();
      pipe0.sinkClosed = true;
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      realBufferedSink0.buffer.readAndWriteUnsafe(buffer_UnsafeCursor0);
      buffer0.writeShort((-1));
      Buffer buffer4 = new Buffer();
      Buffer buffer5 = new Buffer();
      Buffer buffer6 = buffer3.writeDecimalLong((-1));
      try { 
        buffer6.readUtf8LineStrict();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // \\n not found: limit=14 content=45343a7e476a375247633a7b2d31\u2026
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      realBufferedSink0.writeHexadecimalUnsignedLong(245L);
      buffer0.completeSegmentByteCount();
      ByteString byteString0 = realBufferedSink0.buffer.snapshot();
      FileSystemHandling.shouldAllThrowIOExceptions();
      realBufferedSink0.buffer.indexOfElement(byteString0, 245L);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      HashingSource hashingSource0 = HashingSource.hmacSha1(buffer0, byteString0);
      HashingSource.md5(realBufferedSink0.buffer);
      hashingSource0.hash();
      Integer integer0 = new Integer(16);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      Buffer buffer1 = realBufferedSink0.buffer.readFrom((InputStream) pipedInputStream0, 0L);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)65;
      buffer1.readFully(byteArray0);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.close();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // not attached to a buffer
         //
         verifyException("okio.Buffer$UnsafeCursor", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Integer integer0 = new Integer(55296);
      realBufferedSink0.writeLong(268528L);
      Buffer buffer2 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = realBufferedSink0.buffer.readAndWriteUnsafe();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      Buffer buffer3 = realBufferedSource0.buffer;
      Buffer buffer4 = new Buffer();
      buffer_UnsafeCursor0.resizeBuffer(1L);
      int int0 = ObjectStreamConstants.baseWireHandle;
      ByteString byteString0 = new ByteString((byte[]) null);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer1 = realBufferedSink0.buffer();
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(buffer1);
      realBufferedSink0.toString();
      Buffer buffer2 = buffer1.writeDecimalLong(9999995L);
      RealBufferedSink realBufferedSink2 = new RealBufferedSink(buffer2);
      buffer2.writeShortLe((-190));
      HashingSource hashingSource0 = HashingSource.sha1(realBufferedSink2.buffer);
      ByteString byteString0 = hashingSource0.hash();
      ByteString[] byteStringArray0 = new ByteString[3];
      byteStringArray0[0] = byteString0;
      byteStringArray0[1] = byteString0;
      byteStringArray0[2] = byteString0;
      Options options0 = Options.of(byteStringArray0);
      realBufferedSink0.buffer.select(options0);
      buffer2.sha1();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "buffer([size=0])");
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = realBufferedSink1.buffer.readAndWriteUnsafe();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer_UnsafeCursor0.buffer);
      Buffer buffer3 = realBufferedSource0.buffer;
      Buffer buffer4 = new Buffer();
      buffer_UnsafeCursor0.resizeBuffer(9999995L);
      realBufferedSink1.buffer();
      FileSystemHandling.shouldAllThrowIOExceptions();
      buffer0.outputStream();
      buffer_UnsafeCursor0.resizeBuffer(10000L);
      // Undeclared exception!
      try { 
        buffer2.writeUtf8(" ~)WHB&[|KsW5Lzq", (-1), 2147474514);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // beginIndex < 0: -1
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      BufferedSink bufferedSink0 = realBufferedSink0.writeHexadecimalUnsignedLong(245L);
      buffer0.completeSegmentByteCount();
      ByteString byteString0 = realBufferedSink0.buffer.snapshot();
      FileSystemHandling.shouldAllThrowIOExceptions();
      realBufferedSink0.buffer.indexOfElement(byteString0, 245L);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      HashingSource hashingSource0 = HashingSource.hmacSha1(buffer0, byteString0);
      ByteString byteString1 = hashingSource0.hash();
      Integer integer0 = new Integer(16);
      Buffer buffer1 = ((RealBufferedSink) bufferedSink0).buffer.writeShortLe(102);
      HashingSource.hmacSha1(((RealBufferedSink) bufferedSink0).buffer, byteString1);
      hashingSource0.hash();
      bufferedSink0.writeHexadecimalUnsignedLong(16);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer1.readAndWriteUnsafe();
      FileSystemHandling.shouldAllThrowIOExceptions();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer_UnsafeCursor0.buffer);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      realBufferedSource0.buffer.segmentSizes();
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(buffer_UnsafeCursor0.buffer);
      Pipe pipe0 = new Pipe(2044L);
      realBufferedSink1.close();
      Buffer buffer2 = pipe0.buffer;
      buffer1.writeDecimalLong(382610L);
      realBufferedSink1.buffer.writeUtf8("endIndex < beginIndex: ");
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      ByteString byteString0 = buffer0.snapshot();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      BufferedSink bufferedSink0 = realBufferedSink0.emitCompleteSegments();
      Buffer buffer1 = new Buffer();
      Buffer buffer2 = buffer1.writeDecimalLong(1000000000000036L);
      realBufferedSink0.buffer.size();
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(buffer2);
      Buffer buffer3 = realBufferedSink1.buffer;
      buffer0.read(buffer2, 99999999999L);
      ((RealBufferedSink) bufferedSink0).buffer.readUtf8Line();
      buffer3.readUtf8();
      // Undeclared exception!
      try { 
        ((RealBufferedSink) bufferedSink0).buffer.hmacSha256(byteString0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Empty key
         //
         verifyException("javax.crypto.spec.SecretKeySpec", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(realBufferedSink0);
      realBufferedSink1.buffer.writeDecimalLong(48);
      ByteString byteString0 = buffer0.sha256();
      BufferedSink bufferedSink0 = realBufferedSink1.emitCompleteSegments();
      byte[] byteArray0 = new byte[6];
      BufferedSink bufferedSink1 = bufferedSink0.write(byteString0);
      byteArray0[3] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[5] = (byte)8;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(realBufferedSink0.buffer);
      Buffer buffer1 = realBufferedSource0.buffer;
      HashingSink hashingSink0 = HashingSink.sha256(realBufferedSink1);
      hashingSink0.hash();
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(((RealBufferedSink) bufferedSink0).buffer);
      Buffer buffer2 = realBufferedSource1.buffer();
      ((RealBufferedSink) bufferedSink1).buffer.writeLongLe((byte) (-1));
      realBufferedSource0.buffer();
      realBufferedSink1.buffer.writeDecimalLong(720575940L);
      buffer0.write(byteString0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      // Undeclared exception!
      try { 
        buffer2.readHexadecimalUnsignedLong();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size == 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      BufferedSink bufferedSink0 = realBufferedSink0.writeHexadecimalUnsignedLong(245L);
      buffer0.completeSegmentByteCount();
      ByteString byteString0 = realBufferedSink0.buffer.snapshot();
      FileSystemHandling.shouldAllThrowIOExceptions();
      realBufferedSink0.buffer.indexOfElement(byteString0, 245L);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      HashingSource hashingSource0 = HashingSource.hmacSha1(buffer0, byteString0);
      hashingSource0.hash();
      Integer integer0 = new Integer(16);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      realBufferedSink0.buffer.readFrom((InputStream) pipedInputStream0, 0L);
      Buffer buffer1 = realBufferedSink0.buffer.clone();
      buffer1.writeShort((-2489));
      Buffer buffer2 = new Buffer();
      RealBufferedSink realBufferedSink1 = (RealBufferedSink)bufferedSink0.writeIntLe((-2489));
      ((RealBufferedSink) bufferedSink0).buffer.readHexadecimalUnsignedLong();
      Buffer buffer3 = realBufferedSink1.buffer;
      try { 
        realBufferedSink0.buffer.readFully(buffer2, 1434L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      ByteString byteString0 = buffer0.snapshot();
      buffer0.writableSegment(57);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      BufferedSink bufferedSink0 = realBufferedSink0.writeUtf8("f{I8dex9< ");
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(buffer0);
      ((RealBufferedSink) bufferedSink0).buffer.readAndWriteUnsafe();
      RealBufferedSink realBufferedSink2 = new RealBufferedSink(buffer0);
      realBufferedSink2.buffer.writeShortLe(172);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(realBufferedSink1.buffer);
      realBufferedSource0.buffer();
      HashingSink hashingSink0 = HashingSink.sha256(buffer0);
      hashingSink0.hash();
      int int1 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(realBufferedSource0);
      realBufferedSource0.buffer();
      Buffer buffer1 = realBufferedSink0.buffer.writeLongLe((-57L));
      realBufferedSource1.buffer();
      realBufferedSink2.buffer.writeDecimalLong(579L);
      Buffer buffer2 = realBufferedSink1.buffer();
      buffer2.write(byteString0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      buffer1.readHexadecimalUnsignedLong();
      realBufferedSource1.buffer.readByteString();
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      int int0 = 50;
      Segment segment0 = new Segment();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Buffer buffer0 = new Buffer();
      // Undeclared exception!
      try { 
        buffer0.write((Buffer) null, 4294967295L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // source == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(realBufferedSink0);
      Buffer buffer1 = realBufferedSink1.buffer.writeShort(576);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Buffer buffer2 = buffer1.writeLongLe(576);
      buffer2.sha1();
      buffer1.readLong();
      HashingSource hashingSource0 = HashingSource.sha1(buffer1);
      ByteString byteString0 = hashingSource0.hash();
      Buffer buffer3 = realBufferedSink0.buffer;
      byteString0.hex();
      buffer1.readUtf8CodePoint();
      Buffer buffer4 = buffer3.writeUtf8CodePoint(0);
      buffer3.readUtf8CodePoint();
      Inflater inflater0 = new Inflater();
      hashingSource0.toString();
      buffer4.equals(buffer1);
      realBufferedSink0.outputStream();
      Charset.defaultCharset();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(hashingSource0);
      realBufferedSource0.readByteString();
      // Undeclared exception!
      try { 
        buffer2.readShort();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size < 2: 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      BufferedSink bufferedSink0 = realBufferedSink0.writeHexadecimalUnsignedLong(245L);
      ByteString byteString0 = realBufferedSink0.buffer.snapshot();
      realBufferedSink0.buffer.indexOfElement(byteString0, 245L);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      Integer integer0 = new Integer(16);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      Buffer buffer1 = realBufferedSink0.buffer.clone();
      Buffer buffer2 = buffer1.writeShort((-2489));
      ((RealBufferedSink) bufferedSink0).buffer.readHexadecimalUnsignedLong();
      ((RealBufferedSink) bufferedSink0).buffer.size();
      buffer2.readUtf8CodePoint();
      buffer1.readUtf8Line();
      buffer2.indexOf((byte) (-9), 528L);
      buffer1.writeLongLe(32L);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      boolean boolean0 = realBufferedSink0.closed;
      BufferedSink bufferedSink0 = realBufferedSink0.writeHexadecimalUnsignedLong(2);
      HashingSource hashingSource0 = HashingSource.sha1(buffer0);
      ByteString byteString0 = hashingSource0.hash();
      Buffer buffer1 = realBufferedSink0.buffer.write(byteString0);
      ByteString[] byteStringArray0 = new ByteString[2];
      byteStringArray0[0] = byteString0;
      byteStringArray0[1] = byteString0;
      Options options0 = Options.of(byteStringArray0);
      Buffer buffer2 = realBufferedSink0.buffer;
      buffer2.select(options0);
      buffer2.sha1();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "OgWc;Y9");
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer1.readAndWriteUnsafe();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(((RealBufferedSink) bufferedSink0).buffer);
      Buffer buffer3 = realBufferedSource0.buffer;
      Buffer buffer4 = new Buffer();
      buffer_UnsafeCursor0.resizeBuffer(65536L);
      // Undeclared exception!
      try { 
        buffer3.readShort();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size < 2: 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      realBufferedSink0.buffer.readAndWriteUnsafe();
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(buffer0);
      buffer0.writeDecimalLong((-755L));
      BufferedSink bufferedSink0 = realBufferedSink1.emitCompleteSegments();
      RealBufferedSink realBufferedSink2 = new RealBufferedSink(bufferedSink0);
      BufferedSink bufferedSink1 = realBufferedSink2.writeShort(102);
      HashingSink hashingSink0 = HashingSink.sha1(realBufferedSink1);
      hashingSink0.hash();
      HashingSource hashingSource0 = HashingSource.sha1(realBufferedSink2.buffer);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(hashingSource0);
      realBufferedSource0.buffer.clear();
      Buffer buffer1 = realBufferedSource0.buffer();
      hashingSink0.hash();
      byte[] byteArray0 = new byte[0];
      ((RealBufferedSink) bufferedSink1).buffer.readFully(byteArray0);
      buffer1.writeDecimalLong(99999999999999L);
      try { 
        realBufferedSink2.buffer.readUtf8LineStrict(0L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // \\n not found: limit=0 content=0066\u2026
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer1 = realBufferedSink0.buffer();
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(buffer1);
      realBufferedSink0.toString();
      Buffer buffer2 = buffer1.writeDecimalLong(10000010L);
      RealBufferedSink realBufferedSink2 = new RealBufferedSink(buffer2);
      buffer2.writeShortLe((-190));
      buffer1.readLong();
      HashingSource hashingSource0 = HashingSource.sha1(realBufferedSink2.buffer);
      ByteString byteString0 = hashingSource0.hash();
      ByteString[] byteStringArray0 = new ByteString[3];
      realBufferedSink0.writeByte((-190));
      hashingSource0.hash();
      byteStringArray0[0] = byteString0;
      byteStringArray0[2] = byteString0;
      Buffer buffer3 = new Buffer();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "buffer([size=0])");
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = realBufferedSink1.buffer.readAndWriteUnsafe();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer_UnsafeCursor0.buffer);
      Buffer buffer4 = realBufferedSource0.buffer;
      HashingSink hashingSink0 = HashingSink.hmacSha1(buffer2, byteString0);
      ByteString byteString1 = hashingSink0.hash();
      byteString1.hex();
      buffer1.readHexadecimalUnsignedLong();
      buffer2.buffer();
      try { 
        realBufferedSink2.buffer.readFully(realBufferedSource0.buffer, 5381L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Buffer buffer1 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = realBufferedSink0.buffer.readUnsafe();
      buffer_UnsafeCursor0.next();
      Buffer buffer2 = buffer_UnsafeCursor0.buffer.writeInt((-1));
      Buffer buffer3 = buffer2.writeLongLe(1705L);
      buffer3.sha1();
      buffer2.readLong();
      FileSystemHandling.shouldAllThrowIOExceptions();
      buffer_UnsafeCursor0.next();
      HashingSink hashingSink0 = HashingSink.sha256(buffer0);
      hashingSink0.hash();
      HashingSource.sha1(buffer3);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer3);
      realBufferedSource0.buffer();
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(buffer3);
      realBufferedSource1.buffer();
      // Undeclared exception!
      try { 
        realBufferedSource0.readUtf8((-268L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // byteCount < 0: -268
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeShort(2);
      buffer1.readByteArray((long) 2);
      Buffer buffer2 = buffer1.writeLongLe(999964L);
      ByteString byteString0 = buffer1.snapshot();
      Buffer buffer3 = buffer2.writeUtf8("|8l79~xi7/`Z&rIK|\"");
      buffer0.readInt();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      buffer1.write(byteString0);
      buffer3.segmentSizes();
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      buffer2.readUtf8Line();
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(buffer3);
      Buffer buffer4 = realBufferedSource1.buffer();
      buffer0.indexOf(byteString0);
      buffer4.segmentSizes();
      realBufferedSource1.buffer.request((-1L));
      Integer integer0 = new Integer(474091264);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      realBufferedSink0.buffer.readAndWriteUnsafe();
      buffer0.writeDecimalLong((-1));
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(realBufferedSink0);
      BufferedSink bufferedSink0 = realBufferedSink1.emitCompleteSegments();
      realBufferedSink1.writeShort(2494);
      realBufferedSink1.buffer.clone();
      RealBufferedSink realBufferedSink2 = new RealBufferedSink(bufferedSink0);
      HashingSink hashingSink0 = HashingSink.sha512(realBufferedSink0);
      hashingSink0.hash();
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      buffer0.readDecimalLong();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(realBufferedSink2.buffer);
      realBufferedSource0.buffer();
      Buffer buffer1 = realBufferedSource0.buffer();
      buffer1.readByteArray();
      // Undeclared exception!
      try { 
        realBufferedSource0.readUtf8((long) (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // byteCount < 0: -1
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer1 = realBufferedSink0.buffer();
      realBufferedSink0.toString();
      Buffer buffer2 = buffer1.writeDecimalLong(10000010L);
      FileSystemHandling.shouldAllThrowIOExceptions();
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(buffer2);
      buffer1.readLong();
      RealBufferedSink realBufferedSink2 = new RealBufferedSink(buffer1);
      Buffer buffer3 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = realBufferedSink0.buffer.readAndWriteUnsafe();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer_UnsafeCursor0.buffer);
      Buffer buffer4 = realBufferedSource0.buffer;
      buffer_UnsafeCursor0.resizeBuffer(10000010L);
      realBufferedSink0.buffer();
      boolean boolean0 = buffer_UnsafeCursor0.readWrite;
      buffer0.outputStream();
      FileSystemHandling.shouldAllThrowIOExceptions();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      Buffer buffer5 = buffer1.buffer();
      ByteString byteString0 = realBufferedSource0.readByteString(1203L);
      buffer5.rangeEquals(3544385890265608496L, byteString0, (-50), (-1));
      Charset charset0 = Charset.defaultCharset();
      Buffer buffer6 = buffer5.writeString("buffer([size=0])", charset0);
      buffer6.writeInt((-1));
      buffer_UnsafeCursor0.buffer.completeSegmentByteCount();
      realBufferedSource0.buffer.flush();
      buffer1.readUtf8Line(100000L);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      ByteString byteString0 = buffer0.readByteString();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      Buffer buffer1 = buffer_UnsafeCursor0.buffer;
      byteString0.write(buffer1);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer1);
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(buffer_UnsafeCursor0.buffer);
      realBufferedSink0.flush();
      Buffer buffer2 = realBufferedSink0.buffer.writeDecimalLong(99999999999L);
      // Undeclared exception!
      try { 
        buffer2.writableSegment((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = realBufferedSink0.buffer.readAndWriteUnsafe();
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(buffer0);
      buffer0.writeDecimalLong((-1L));
      realBufferedSink1.emitCompleteSegments();
      realBufferedSink1.writeShort(102);
      Buffer buffer1 = buffer0.clone();
      Buffer buffer2 = buffer1.writeShort(102);
      RealBufferedSink realBufferedSink2 = new RealBufferedSink(buffer2);
      HashingSink hashingSink0 = HashingSink.sha512(buffer_UnsafeCursor0.buffer);
      hashingSink0.hash();
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      buffer2.readDecimalLong();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(realBufferedSink2.buffer);
      realBufferedSource0.buffer();
      Buffer buffer3 = realBufferedSource0.buffer();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      // Undeclared exception!
      try { 
        buffer3.readString((Charset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // charset == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(realBufferedSink0);
      Buffer buffer1 = realBufferedSink1.buffer.writeShort(576);
      Buffer buffer2 = buffer1.writeLongLe(576);
      ByteString byteString0 = buffer2.sha1();
      buffer1.readLong();
      HashingSource hashingSource0 = HashingSource.sha1(buffer1);
      ByteString byteString1 = hashingSource0.hash();
      Pipe pipe0 = new Pipe(576);
      Pipe.PipeSource pipe_PipeSource0 = pipe0.new PipeSource();
      HashingSource hashingSource1 = HashingSource.sha256(pipe_PipeSource0);
      Buffer buffer3 = realBufferedSink0.buffer;
      byteString1.hex();
      buffer1.readUtf8CodePoint();
      buffer3.writeUtf8CodePoint(0);
      Inflater inflater0 = new Inflater();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      buffer2.indexOf(byteString0);
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(hashingSource1);
      Charset charset0 = Charset.defaultCharset();
      realBufferedSink1.writeString("da39a3ee5e6b4b0d3255bfef95601890afd80709", charset0);
      RealBufferedSink realBufferedSink2 = new RealBufferedSink(realBufferedSource1.buffer);
      realBufferedSink2.buffer();
      realBufferedSink0.outputStream();
      Charset.defaultCharset();
      RealBufferedSource realBufferedSource2 = new RealBufferedSource(realBufferedSink1.buffer);
      Inflater inflater1 = new Inflater();
      Buffer buffer4 = realBufferedSource1.buffer;
      RealBufferedSource realBufferedSource3 = new RealBufferedSource(hashingSource0);
      buffer1.indexOf(byteString1);
      realBufferedSource2.buffer.flush();
      Buffer buffer5 = new Buffer();
      Buffer buffer6 = realBufferedSink1.buffer;
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer1 = realBufferedSink0.buffer();
      realBufferedSink0.toString();
      Buffer buffer2 = buffer1.writeDecimalLong(10000010L);
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(buffer2);
      buffer1.readLong();
      RealBufferedSink realBufferedSink2 = new RealBufferedSink(buffer1);
      Buffer buffer3 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = realBufferedSink0.buffer.readAndWriteUnsafe();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer_UnsafeCursor0.buffer);
      Buffer buffer4 = realBufferedSource0.buffer;
      buffer_UnsafeCursor0.resizeBuffer(10000010L);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Charset charset0 = Charset.forName("UTF-8");
      buffer4.writeString("buffer([size=0])", charset0);
      HashingSource.sha1(realBufferedSink0.buffer);
      buffer1.writeDecimalLong(1095216660480L);
      realBufferedSink0.buffer.readByteArray(2330L);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Buffer buffer1 = realBufferedSource0.buffer.writeInt(62);
      ByteString byteString0 = buffer1.snapshot();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = realBufferedSource0.buffer.readAndWriteUnsafe();
      buffer_UnsafeCursor0.next();
      buffer_UnsafeCursor0.resizeBuffer(62);
      HashingSink hashingSink0 = HashingSink.hmacSha256(realBufferedSource0.buffer, byteString0);
      ByteString byteString1 = hashingSink0.hash();
      HashingSource.sha1(buffer1);
      Buffer buffer2 = realBufferedSource0.buffer();
      buffer2.rangeEquals(0L, byteString1);
      // Undeclared exception!
      try { 
        buffer0.readInt();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size < 4: 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      BufferedSink bufferedSink0 = realBufferedSink0.writeHexadecimalUnsignedLong(207L);
      buffer0.completeSegmentByteCount();
      ByteString byteString0 = realBufferedSink0.buffer.snapshot();
      String string0 = byteString0.utf8;
      FileSystemHandling.shouldAllThrowIOExceptions();
      ((RealBufferedSink) bufferedSink0).buffer.outputStream();
      realBufferedSink0.buffer.indexOf(byteString0, 0L);
      HashingSource.sha1(buffer0);
      Buffer buffer1 = ((RealBufferedSink) bufferedSink0).buffer.writeUtf8("}1r2pI7SC'#dT<.L}%");
      buffer0.readUtf8();
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(bufferedSink0);
      realBufferedSink1.writeShort(60);
      buffer1.write((Source) realBufferedSink1.buffer, 1L);
      EvoSuiteFile evoSuiteFile0 = null;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      Buffer buffer2 = realBufferedSource0.buffer;
      // Undeclared exception!
      try { 
        buffer0.readUnsafe((Buffer.UnsafeCursor) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }
}
