/*
 * This file was automatically generated by EvoSuite
 * Mon Jul 16 18:54:24 GMT 2018
 */

package okio;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.IOException;
import java.io.PipedOutputStream;
import java.io.PrintWriter;
import java.util.concurrent.TimeUnit;
import okio.AsyncTimeout;
import okio.Buffer;
import okio.ByteString;
import okio.HashingSink;
import okio.Pipe;
import okio.RealBufferedSink;
import okio.RealBufferedSource;
import okio.Sink;
import okio.Source;
import okio.Timeout;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.io.MockIOException;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AsyncTimeout_ESTest extends AsyncTimeout_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      AsyncTimeout asyncTimeout0 = new AsyncTimeout();
      asyncTimeout0.clearTimeout();
      asyncTimeout0.exit(true);
      asyncTimeout0.exit();
      MockIOException mockIOException0 = new MockIOException();
      MockThrowable mockThrowable0 = new MockThrowable(mockIOException0);
      MockIOException mockIOException1 = new MockIOException(mockThrowable0);
      mockIOException1.getCause();
      asyncTimeout0.newTimeoutException(mockIOException1);
      AsyncTimeout asyncTimeout1 = new AsyncTimeout();
      Pipe pipe0 = new Pipe(2381L);
      Pipe.PipeSource pipe_PipeSource0 = pipe0.new PipeSource();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(pipe_PipeSource0);
      Buffer buffer0 = realBufferedSource0.buffer;
      Source source0 = asyncTimeout1.source(buffer0);
      Source source1 = asyncTimeout0.source(source0);
      assertNotSame(source0, source1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      AsyncTimeout asyncTimeout0 = new AsyncTimeout();
      asyncTimeout0.exit(true);
      asyncTimeout0.timedOut();
      assertFalse(asyncTimeout0.hasDeadline());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      AsyncTimeout asyncTimeout0 = new AsyncTimeout();
      asyncTimeout0.exit(true);
      IOException iOException0 = asyncTimeout0.exit((IOException) null);
      assertNull(iOException0);
      
      IOException iOException1 = asyncTimeout0.newTimeoutException((IOException) null);
      assertEquals("timeout", iOException1.getMessage());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      AsyncTimeout asyncTimeout0 = new AsyncTimeout();
      asyncTimeout0.exit((IOException) null);
      MockIOException mockIOException0 = new MockIOException("out == null", (Throwable) null);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      pipedOutputStream0.close();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
      Buffer buffer0 = new Buffer();
      HashingSink hashingSink0 = HashingSink.sha1(buffer0);
      ByteString byteString0 = hashingSink0.hash();
      HashingSink hashingSink1 = HashingSink.sha512(hashingSink0);
      HashingSink.hmacSha256(hashingSink1, byteString0);
      HashingSink hashingSink2 = HashingSink.hmacSha512(hashingSink0, byteString0);
      asyncTimeout0.sink(hashingSink0);
      mockPrintWriter0.println(0);
      mockPrintWriter0.println((Object) hashingSink2);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "out == null");
      mockIOException0.getStackTrace();
      mockIOException0.printStackTrace(printWriter0);
      IOException iOException0 = asyncTimeout0.newTimeoutException(mockIOException0);
      asyncTimeout0.timedOut();
      asyncTimeout0.timedOut();
      MockIOException mockIOException1 = new MockIOException(iOException0);
      asyncTimeout0.newTimeoutException(mockIOException1);
      asyncTimeout0.newTimeoutException(mockIOException0);
      asyncTimeout0.enter();
      boolean boolean0 = false;
      asyncTimeout0.exit(false);
      // Undeclared exception!
      try { 
        AsyncTimeout.awaitTimeout();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      AsyncTimeout asyncTimeout0 = new AsyncTimeout();
      AsyncTimeout.head = asyncTimeout0;
      AsyncTimeout.head.clearTimeout();
      // Undeclared exception!
      try { 
        AsyncTimeout.awaitTimeout();
        fail("Expecting exception: IllegalMonitorStateException");
      
      } catch(IllegalMonitorStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.Object", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      AsyncTimeout asyncTimeout0 = new AsyncTimeout();
      AsyncTimeout.head = asyncTimeout0;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      MockThrowable mockThrowable0 = new MockThrowable("");
      MockIOException mockIOException0 = new MockIOException(mockThrowable0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      MockThrowable mockThrowable1 = new MockThrowable(mockIOException0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "endIndex > string.length: ");
      MockIOException mockIOException1 = new MockIOException("7&~LR12J8yj", mockThrowable1);
      IOException iOException0 = asyncTimeout0.exit((IOException) mockIOException1);
      System.setCurrentTimeMillis(2459L);
      TimeUnit timeUnit0 = TimeUnit.DAYS;
      asyncTimeout0.deadline(2459L, timeUnit0);
      asyncTimeout0.enter();
      asyncTimeout0.newTimeoutException(iOException0);
      AsyncTimeout.head.timedOut();
      IOException iOException1 = AsyncTimeout.head.exit((IOException) mockIOException1);
      asyncTimeout0.exit((IOException) mockIOException0);
      System.setCurrentTimeMillis(2459L);
      asyncTimeout0.exit(iOException1);
      asyncTimeout0.exit((IOException) mockIOException0);
      System.setCurrentTimeMillis(9223372036854775807L);
      AsyncTimeout.head.timedOut();
      assertTrue(AsyncTimeout.head.hasDeadline());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      AsyncTimeout asyncTimeout0 = new AsyncTimeout();
      asyncTimeout0.deadlineNanoTime(2424L);
      asyncTimeout0.enter();
      boolean boolean0 = asyncTimeout0.exit();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      AsyncTimeout asyncTimeout0 = new AsyncTimeout();
      MockIOException mockIOException0 = new MockIOException();
      MockIOException mockIOException1 = new MockIOException(mockIOException0);
      asyncTimeout0.newTimeoutException(mockIOException1);
      asyncTimeout0.exit((IOException) mockIOException0);
      System.setCurrentTimeMillis((-1L));
      long long0 = 4245L;
      TimeUnit timeUnit0 = TimeUnit.MINUTES;
      asyncTimeout0.deadline(4245L, timeUnit0);
      asyncTimeout0.enter();
      // Undeclared exception!
      try { 
        AsyncTimeout.awaitTimeout();
        fail("Expecting exception: IllegalMonitorStateException");
      
      } catch(IllegalMonitorStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.Object", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      AsyncTimeout asyncTimeout0 = new AsyncTimeout();
      AsyncTimeout.head = asyncTimeout0;
      System.setCurrentTimeMillis(1000000000000000L);
      TimeUnit timeUnit0 = TimeUnit.DAYS;
      asyncTimeout0.deadline(1000000000000000L, timeUnit0);
      AsyncTimeout.head.enter();
      asyncTimeout0.timedOut();
      MockIOException mockIOException0 = new MockIOException();
      System.setCurrentTimeMillis((-1856L));
      AsyncTimeout.awaitTimeout();
      MockIOException mockIOException1 = new MockIOException("~C&yp~(&{oAPdQL R");
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      AsyncTimeout asyncTimeout0 = new AsyncTimeout();
      AsyncTimeout asyncTimeout1 = (AsyncTimeout)asyncTimeout0.deadlineNanoTime(2424L);
      TimeUnit timeUnit0 = TimeUnit.DAYS;
      asyncTimeout1.timeout(2147483647L, timeUnit0);
      asyncTimeout0.enter();
      Pipe pipe0 = null;
      try {
        pipe0 = new Pipe((-1392409281321000L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // maxBufferSize < 1: -1392409281321000
         //
         verifyException("okio.Pipe", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      AsyncTimeout asyncTimeout0 = new AsyncTimeout();
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Timeout timeout0 = asyncTimeout0.timeout(100L, timeUnit0);
      asyncTimeout0.enter();
      Pipe pipe0 = new Pipe(100L);
      Sink sink0 = pipe0.sink();
      asyncTimeout0.sink(sink0);
      asyncTimeout0.timedOut();
      assertSame(asyncTimeout0, timeout0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      AsyncTimeout asyncTimeout0 = new AsyncTimeout();
      MockIOException mockIOException0 = new MockIOException();
      MockIOException mockIOException1 = new MockIOException(mockIOException0);
      IOException iOException0 = asyncTimeout0.newTimeoutException(mockIOException1);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "AsyncTimeout.source(");
      MockIOException mockIOException2 = new MockIOException("", iOException0);
      AsyncTimeout asyncTimeout1 = new AsyncTimeout();
      IOException iOException1 = asyncTimeout1.exit((IOException) mockIOException1);
      System.setCurrentTimeMillis(0);
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      asyncTimeout0.deadline(1487L, timeUnit0);
      asyncTimeout0.enter();
      asyncTimeout0.newTimeoutException(mockIOException2);
      asyncTimeout1.timedOut();
      AsyncTimeout asyncTimeout2 = AsyncTimeout.head;
      assertNotNull(asyncTimeout2);
      
      asyncTimeout2.exit((IOException) mockIOException2);
      assertEquals("timeout", iOException0.getMessage());
      
      asyncTimeout2.exit((IOException) mockIOException0);
      MockIOException mockIOException3 = new MockIOException();
      System.setCurrentTimeMillis(2459L);
      MockIOException mockIOException4 = new MockIOException();
      asyncTimeout2.exit((IOException) mockIOException4);
      AsyncTimeout asyncTimeout3 = AsyncTimeout.awaitTimeout();
      AsyncTimeout asyncTimeout4 = AsyncTimeout.head;
      asyncTimeout4.exit(iOException1);
      AsyncTimeout asyncTimeout5 = AsyncTimeout.head;
      assertNotNull(asyncTimeout5);
      
      asyncTimeout2.enter();
      assertNotSame(asyncTimeout2, asyncTimeout3);
  }
}
