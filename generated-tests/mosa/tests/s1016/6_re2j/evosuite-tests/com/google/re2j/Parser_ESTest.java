/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 07:06:46 GMT 2018
 */

package com.google.re2j;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.re2j.Parser;
import com.google.re2j.Regexp;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Parser_ESTest extends Parser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Regexp regexp0 = Parser.parse("B", 1232);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Regexp regexp0 = Parser.parse("Ph*YlBrK$Sd}V6", 2529);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Regexp regexp0 = Parser.parse("MvV@>%yL{ ", 2529);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Regexp regexp0 = Parser.parse("'{N<t:Gi", 33);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Regexp regexp0 = Parser.parse("E?kZ.bC", 120);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Regexp regexp0 = Parser.parse("I0^oR09>MtO.", 764);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Regexp regexp0 = Parser.parse("Lk}fVn~_0/D8\u0003h_", 2736);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Regexp regexp0 = Parser.parse("fbP2k\"l6&vUDv74`^@", (-2452));
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Regexp regexp0 = Parser.parse("Other_ID_Continue", 3953);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Regexp regexp0 = Parser.parse("PD", 2529);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Regexp regexp0 = Parser.parse("TP'l|S?K\"A", (-608));
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Regexp regexp0 = Parser.parse(">mV\b@ynyHUUI/Rzn2x", (-1008));
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Regexp regexp0 = Parser.parse("M\r>h$", (-1008));
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Regexp regexp0 = Parser.parse("[:digit:]", (-1008));
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      try { 
        Parser.parse("n\" U2%?{8;NqA[", 52);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      try { 
        Parser.parse("[:", (-1008));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[:`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Regexp regexp0 = Parser.parse("H=okZ B`2\u0007qX^-{>", 2533);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Regexp regexp0 = Parser.parse("\n", (-1063));
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Regexp regexp0 = Parser.parse("\u0007", 56);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      try { 
        Parser.parse("x(dY+]", 120);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ): `x(dY+]`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Regexp regexp0 = Parser.parse("S{", (-1788));
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      try { 
        Parser.parse("*P`.O<oh$vOa\"CV7", 256);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing argument to repetition operator: `*`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      try { 
        Parser.parse(")Q|-pp", 1232);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: regexp/syntax: internal error: `stack underflow`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Regexp regexp0 = Parser.parse("|ntck", (-1788));
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Regexp regexp0 = Parser.parse("|!", 8);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Regexp regexp0 = Parser.parse("s", 2529);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      try { 
        Parser.parse("5pb0(,n+I4*?5;!nI", 216);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ): `5pb0(,n+I4*?5;!nI`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      try { 
        Parser.parse("X*4h+(]-QR@&#g0", (-1008));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ): `X*4h+(]-QR@&#g0`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Regexp regexp0 = Parser.parse("q];|r08", 2529);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Regexp regexp0 = Parser.parse("(?:)", 3953);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Regexp regexp0 = Parser.parse(">X($MG).\" Enk2q", (-199));
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      try { 
        Parser.parse("n U2?{8;qA[", (-423));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Regexp regexp0 = Parser.parse("[::x00-x{10FFFF}]", 3953);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Regexp regexp0 = Parser.parse("x", (-1008));
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Regexp regexp0 = Parser.parse("[::]", 1761);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Regexp regexp0 = Parser.parse("8@'wRod@_WBv.+", (-1027));
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      try { 
        Parser.parse("Gt|p9)RRpTAnQ_o", (-2099));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: regexp/syntax: internal error: `stack underflow`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      try { 
        Parser.parse("(?s:.`", 961);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ): `(?s:.``
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      try { 
        Parser.parse("(?P<", 764);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid named capture: `(?P<`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Regexp regexp0 = Parser.parse("p\u0007qX^-{>", 764);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Regexp regexp0 = Parser.parse("PD", 3953);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Regexp regexp0 = Parser.parse("C", 2529);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      try { 
        Parser.parse("8[^]BR-Hi{E", 616);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid character class range: `R-H`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Regexp regexp0 = Parser.parse("[^x00-x{10FFFF}]", 120);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      try { 
        Parser.parse("fbP2k\"l6&vUDv74[^@", (-2452));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[^@`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      try { 
        Parser.parse("(?)", 1428);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing argument to repetition operator: `?`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Regexp regexp0 = Parser.parse("pZd", 2508);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      try { 
        Parser.parse("}T&W(fvq>", 105);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ): `}T&W(fvq>`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Regexp regexp0 = Parser.parse(">mV\b@yn!yUUI/Rzn2", (-1031));
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Regexp regexp0 = Parser.parse("<|!", (-1032));
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Regexp regexp0 = Parser.parse("D", (-2452));
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      try { 
        Parser.parse("(?", 2508);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid or unsupported Perl syntax: `(?`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Regexp regexp0 = Parser.parse("d", 1105);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Regexp regexp0 = Parser.parse("\u0000", 2736);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Regexp regexp0 = Parser.parse(":", 764);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Regexp regexp0 = Parser.parse("!SS2", 33);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Regexp regexp0 = Parser.parse("YBA/v%I#^{0", 2224);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      try { 
        Parser.parse("(?(?s:.`", 8289);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid or unsupported Perl syntax: `(?(`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      try { 
        Parser.parse("[:1-Sp9T-", 81);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[:1-Sp9T-`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Regexp regexp0 = Parser.parse("::x00-x{10FFFF}]", 961);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Regexp regexp0 = Parser.parse("[:::0-x{10FFFF}]", 109);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Regexp regexp0 = Parser.parse("\fB", 2508);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Regexp regexp0 = Parser.parse("(?)", 3953);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Regexp regexp0 = Parser.parse("\u0002", 3941);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Regexp regexp0 = Parser.parse("8[B]BR-H{E", 2147483645);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      try { 
        Parser.parse("[:5 i,", (-2587));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[:5 i,`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Regexp regexp0 = Parser.parse("a", 641);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      try { 
        Parser.parse("=.P&g`q[h-GNvZ", 2084);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid character class range: `h-G`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Regexp regexp0 = Parser.parse("HzkMYA/y|hFI'f@e", 2147483645);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Regexp regexp0 = Parser.parse(":x0-\b{FFFF}]", (-1319));
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      try { 
        Parser.parse("4W5(S*7N+*\",/xMgU", (-2452));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid nested repetition operator: `+*`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Regexp regexp0 = Parser.parse("UQJkJ\u0001cz+Xf@/", 8);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Regexp regexp0 = Parser.parse(":x00-x{TFFF}]", 8);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Regexp regexp0 = Parser.parse("p{4ux-Il~zC", 3776);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Regexp regexp0 = Parser.parse("3bOL2T8\"sb{338Bb2fd", 1772);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Regexp regexp0 = Parser.parse("$pZ\\d", 44025);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      String string0 = "5[&y30\\s #Qk,UcQ";
      try { 
        Parser.parse("5[&y30s #Qk,UcQ", 8189);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[&y30s #Qk,UcQ`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      try { 
        Parser.parse("(?i:", 2124);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ): `(?i:`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Regexp regexp0 = Parser.parse("3Yo2MM,a}Z[/]H", 1985);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Regexp regexp0 = Parser.parse("a8[B]5Rfl`{-qE", 37);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      try { 
        Parser.parse(".-(|", 236);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ): `.-(|`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Regexp regexp0 = Parser.parse(":x00-x{FFFF", (-1032));
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Regexp regexp0 = Parser.parse("\u0005{4Ix-l9DP~20", (-1067));
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Regexp regexp0 = Parser.parse("|.|J", 24);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      try { 
        Parser.parse("Q5(^95]|!RBza", 109);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ): `Q5(^95]|!RBza`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Regexp regexp0 = Parser.parse("X,sVB6u~\tn", 2480);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Regexp regexp0 = Parser.parse("T}XwHZOAo`SP", 1348);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Regexp regexp0 = Parser.parse("@[::]", 1985);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Regexp regexp0 = Parser.parse("[:::00-x{10FFFF}]", (-395));
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Regexp regexp0 = Parser.parse("[:::00-x{10FFFF}]", 80);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Regexp regexp0 = Parser.parse("cx}I6;lPRz;NDsu", 4);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Regexp regexp0 = Parser.parse("(?-m:$)", 236);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      try { 
        Parser.parse("prax'{9/[-/Q", (-7));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[-/Q`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      try { 
        Parser.parse("prax-{9/[-/Q", (-71));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[-/Q`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Regexp regexp0 = Parser.parse("Q_-%-ycA&", 120);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Parser parser0 = new Parser("&.'8:mx|&=jhH&Im@A", 4923);
      assertNotNull(parser0);
      
      Regexp regexp0 = Parser.parse("&.'8:mx|&=jhH&Im@A", 4923);
      assertNotNull(regexp0);
      
      Regexp regexp1 = Parser.parse("&.'8:mx|&=jhH&Im@A", 124);
      assertNotNull(regexp1);
      assertNotSame(regexp1, regexp0);
      assertFalse(regexp1.equals((Object)regexp0));
      
      Regexp.Op regexp_Op0 = Regexp.Op.ALTERNATE;
      Regexp regexp2 = new Regexp(regexp_Op0);
      assertNotNull(regexp2);
      assertFalse(regexp2.equals((Object)regexp0));
      assertFalse(regexp2.equals((Object)regexp1));
      
      Regexp regexp3 = Parser.parse("&.'8:mx|&=jhH&Im@A", 17);
      assertNotNull(regexp3);
      assertNotSame(regexp3, regexp0);
      assertNotSame(regexp3, regexp1);
      assertNotSame(regexp3, regexp2);
      assertFalse(regexp3.equals((Object)regexp0));
      assertFalse(regexp3.equals((Object)regexp1));
      assertFalse(regexp3.equals((Object)regexp2));
      
      Regexp regexp4 = Parser.parse("&.'8:mx|&=jhH&Im@A", 4923);
      assertNotNull(regexp4);
      assertNotSame(regexp4, regexp3);
      assertNotSame(regexp4, regexp2);
      assertNotSame(regexp4, regexp1);
      assertNotSame(regexp4, regexp0);
      assertFalse(regexp4.equals((Object)regexp3));
      assertFalse(regexp4.equals((Object)regexp2));
      assertFalse(regexp4.equals((Object)regexp1));
      assertTrue(regexp4.equals((Object)regexp0));
      
      Regexp regexp5 = Parser.parse("[:FFF}]", 68);
      assertNotNull(regexp5);
      assertNotSame(regexp5, regexp4);
      assertNotSame(regexp5, regexp0);
      assertNotSame(regexp5, regexp3);
      assertNotSame(regexp5, regexp1);
      assertNotSame(regexp5, regexp2);
      assertFalse(regexp5.equals((Object)regexp4));
      assertFalse(regexp5.equals((Object)regexp0));
      assertFalse(regexp5.equals((Object)regexp3));
      assertFalse(regexp5.equals((Object)regexp1));
      assertFalse(regexp5.equals((Object)regexp2));
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      String string0 = "[::d\\600-\\x{D0FFFF}]";
      Regexp regexp0 = Parser.parse("[::d00-x{D0FFFF}]", 1005);
      assertNotNull(regexp0);
      
      int int0 = 2048;
      Parser parser0 = new Parser(string0, int0);
      assertNotNull(parser0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Regexp regexp0 = Parser.parse("Ui0|Ux42#6!Z?+:ry", 57);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      try { 
        Parser.parse("(?-:. ", 1985);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid or unsupported Perl syntax: `(?-:`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      String string0 = "9yIg\\3GAM9^D";
      int int0 = 49;
      Regexp regexp0 = Parser.parse("9yIg\u0003GAM9^D", 49);
      assertNotNull(regexp0);
      
      Parser parser0 = new Parser(string0, int0);
      assertNotNull(parser0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Regexp regexp0 = Parser.parse(":x00-x{68}", 240);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Regexp regexp0 = Parser.parse("X*bk0\u0004,o#C", 6468);
      assertNotNull(regexp0);
  }
}
