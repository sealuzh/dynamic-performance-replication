/*
 * This file was automatically generated by EvoSuite
 * Mon Jul 22 02:05:45 GMT 2019
 */

package us.codecraft.webmagic.utils;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.HashMap;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import us.codecraft.webmagic.utils.DoubleKeyMap;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DoubleKeyMap_ESTest extends DoubleKeyMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      HashMap<Integer, Map<Integer, HashMap<String, Integer>>> hashMap0 = new HashMap<Integer, Map<Integer, HashMap<String, Integer>>>();
      DoubleKeyMap<Integer, Integer, HashMap<String, Integer>> doubleKeyMap0 = new DoubleKeyMap<Integer, Integer, HashMap<String, Integer>>(hashMap0);
      Integer integer0 = new Integer((-791));
      HashMap<String, Integer> hashMap1 = new HashMap<String, Integer>();
      Integer integer1 = new Integer(2573);
      doubleKeyMap0.put(integer0, integer1, hashMap1);
      doubleKeyMap0.remove(integer0, integer1);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Class<HashMap> class0 = HashMap.class;
      DoubleKeyMap<HashMap<Object, Object>, HashMap<Object, String>, String> doubleKeyMap0 = new DoubleKeyMap<HashMap<Object, Object>, HashMap<Object, String>, String>(class0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      HashMap<String, Map<HashMap<String, Object>, Object>> hashMap0 = new HashMap<String, Map<HashMap<String, Object>, Object>>();
      DoubleKeyMap<Object, HashMap<Object, String>, Integer> doubleKeyMap0 = new DoubleKeyMap<Object, HashMap<Object, String>, Integer>();
      Map<HashMap<String, Object>, Object> map0 = doubleKeyMap0.newMap();
      hashMap0.put("P\")", map0);
      Class<Map> class0 = Map.class;
      DoubleKeyMap<String, HashMap<String, Object>, Object> doubleKeyMap1 = new DoubleKeyMap<String, HashMap<String, Object>, Object>(hashMap0, class0);
      Map<HashMap<String, Object>, Object> map1 = doubleKeyMap1.remove("P\")");
      assertEquals(0, map1.size());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DoubleKeyMap<String, String, Integer> doubleKeyMap0 = new DoubleKeyMap<String, String, Integer>();
      Integer integer0 = new Integer(2569);
      doubleKeyMap0.put("", "", integer0);
      Map<String, Integer> map0 = doubleKeyMap0.remove("");
      assertEquals(1, map0.size());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      HashMap<Map<String, Integer>, Map<Map<Object, Integer>, String>> hashMap0 = new HashMap<Map<String, Integer>, Map<Map<Object, Integer>, String>>(2285);
      Class<Map> class0 = Map.class;
      HashMap<String, Integer> hashMap1 = new HashMap<String, Integer>();
      DoubleKeyMap<String, Integer, String> doubleKeyMap0 = new DoubleKeyMap<String, Integer, String>();
      Map<Map<Object, Integer>, String> map0 = doubleKeyMap0.newMap();
      hashMap0.put(hashMap1, map0);
      DoubleKeyMap<Map<String, Integer>, Map<Object, Integer>, String> doubleKeyMap1 = new DoubleKeyMap<Map<String, Integer>, Map<Object, Integer>, String>(hashMap0, class0);
      Map<Map<Object, Integer>, String> map1 = doubleKeyMap1.get((Map<String, Integer>) hashMap1);
      assertEquals(0, map1.size());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      DoubleKeyMap<HashMap<Integer, Object>, Object, Integer> doubleKeyMap0 = new DoubleKeyMap<HashMap<Integer, Object>, Object, Integer>();
      Integer integer0 = new Integer(835);
      doubleKeyMap0.put(hashMap0, (Object) hashMap0, integer0);
      Map<Object, Integer> map0 = doubleKeyMap0.get(hashMap0);
      assertEquals(1, map0.size());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      HashMap<String, Map<HashMap<String, Object>, Object>> hashMap0 = new HashMap<String, Map<HashMap<String, Object>, Object>>();
      Class<Map> class0 = Map.class;
      DoubleKeyMap<String, HashMap<String, Object>, Object> doubleKeyMap0 = new DoubleKeyMap<String, HashMap<String, Object>, Object>(hashMap0, class0);
      HashMap<String, Map<Object, Map<String, Map<Object, Map<Integer, Object>>>>> hashMap1 = new HashMap<String, Map<Object, Map<String, Map<Object, Map<Integer, Object>>>>>();
      DoubleKeyMap<String, Object, Map<String, Map<Object, Map<Integer, Object>>>> doubleKeyMap1 = new DoubleKeyMap<String, Object, Map<String, Map<Object, Map<Integer, Object>>>>(hashMap1);
      Map<String, Map<Object, Map<Integer, Object>>> map0 = doubleKeyMap1.newMap();
      DoubleKeyMap<String, Object, Map<Integer, Object>> doubleKeyMap2 = new DoubleKeyMap<String, Object, Map<Integer, Object>>(map0, class0);
      Map<Integer, Object> map1 = doubleKeyMap2.remove("us.codecraft.webmagic.utils.DoubleKeyMap", (Object) doubleKeyMap0);
      assertNull(map1);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DoubleKeyMap<HashMap<String, Object>, HashMap<Object, Object>, Integer> doubleKeyMap0 = new DoubleKeyMap<HashMap<String, Object>, HashMap<Object, Object>, Integer>();
      Map<String, Map<HashMap<String, Object>, Object>> map0 = doubleKeyMap0.newMap();
      DoubleKeyMap<String, HashMap<String, Object>, Object> doubleKeyMap1 = new DoubleKeyMap<String, HashMap<String, Object>, Object>(map0);
      Object object0 = doubleKeyMap1.remove((String) null, (HashMap<String, Object>) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DoubleKeyMap<String, Object, Object> doubleKeyMap0 = new DoubleKeyMap<String, Object, Object>();
      Map<Object, Map<String, Integer>> map0 = doubleKeyMap0.newMap();
      Class<HashMap> class0 = HashMap.class;
      DoubleKeyMap<Object, String, Integer> doubleKeyMap1 = new DoubleKeyMap<Object, String, Integer>(map0, class0);
      Integer integer0 = doubleKeyMap1.remove((Object) doubleKeyMap0, "Z=");
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      HashMap<Integer, Map<String, Object>> hashMap0 = new HashMap<Integer, Map<String, Object>>();
      Class<HashMap> class0 = HashMap.class;
      DoubleKeyMap<Integer, String, Object> doubleKeyMap0 = new DoubleKeyMap<Integer, String, Object>(hashMap0, class0);
      Map<Integer, Map<Object, Object>> map0 = doubleKeyMap0.newMap();
      DoubleKeyMap<Integer, Object, Object> doubleKeyMap1 = new DoubleKeyMap<Integer, Object, Object>(map0);
      Map<Object, Object> map1 = doubleKeyMap1.remove((Integer) null);
      assertNull(map1);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DoubleKeyMap<Object, String, Object> doubleKeyMap0 = new DoubleKeyMap<Object, String, Object>();
      Map<Object, Map<Integer, Integer>> map0 = doubleKeyMap0.newMap();
      Class<HashMap> class0 = HashMap.class;
      DoubleKeyMap<Object, Integer, Integer> doubleKeyMap1 = new DoubleKeyMap<Object, Integer, Integer>(map0, class0);
      DoubleKeyMap<Object, String, HashMap<Object, Integer>> doubleKeyMap2 = new DoubleKeyMap<Object, String, HashMap<Object, Integer>>((Map<Object, Map<String, HashMap<Object, Integer>>>) null);
      Map<String, HashMap<Object, Integer>> map1 = doubleKeyMap2.remove((Object) doubleKeyMap1);
      assertNull(map1);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DoubleKeyMap<String, String, Integer> doubleKeyMap0 = new DoubleKeyMap<String, String, Integer>();
      DoubleKeyMap<Object, Object, String> doubleKeyMap1 = new DoubleKeyMap<Object, Object, String>();
      Map<Object, Map<Object, Integer>> map0 = doubleKeyMap1.newMap();
      DoubleKeyMap<Object, Object, Integer> doubleKeyMap2 = new DoubleKeyMap<Object, Object, Integer>(map0);
      Integer integer0 = new Integer((-38));
      Integer integer1 = doubleKeyMap2.put((Object) integer0, (Object) doubleKeyMap0, integer0);
      assertNull(integer1);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DoubleKeyMap<String, String, Integer> doubleKeyMap0 = new DoubleKeyMap<String, String, Integer>();
      Integer integer0 = new Integer(0);
      Integer integer1 = doubleKeyMap0.put((String) null, (String) null, integer0);
      assertNull(integer1);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DoubleKeyMap<Object, String, Object> doubleKeyMap0 = new DoubleKeyMap<Object, String, Object>();
      Map<Object, Map<HashMap<Object, Object>, Object>> map0 = doubleKeyMap0.newMap();
      DoubleKeyMap<Object, HashMap<Object, Object>, Object> doubleKeyMap1 = new DoubleKeyMap<Object, HashMap<Object, Object>, Object>(map0);
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      Object object0 = doubleKeyMap1.put((Object) doubleKeyMap0, hashMap0, (Object) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DoubleKeyMap<HashMap<String, Object>, HashMap<Object, Object>, Integer> doubleKeyMap0 = new DoubleKeyMap<HashMap<String, Object>, HashMap<Object, Object>, Integer>();
      Map<String, Map<HashMap<String, Object>, Object>> map0 = doubleKeyMap0.newMap();
      DoubleKeyMap<String, HashMap<String, Object>, Object> doubleKeyMap1 = new DoubleKeyMap<String, HashMap<String, Object>, Object>(map0);
      Object object0 = doubleKeyMap1.get("", (HashMap<String, Object>) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DoubleKeyMap<Integer, String, Object> doubleKeyMap0 = new DoubleKeyMap<Integer, String, Object>();
      HashMap<Map<Integer, Object>, Map<Object, Object>> hashMap0 = new HashMap<Map<Integer, Object>, Map<Object, Object>>();
      Class<Map> class0 = Map.class;
      DoubleKeyMap<Map<Integer, Object>, Object, Object> doubleKeyMap1 = new DoubleKeyMap<Map<Integer, Object>, Object, Object>(hashMap0, class0);
      HashMap<Integer, Object> hashMap1 = new HashMap<Integer, Object>();
      Object object0 = doubleKeyMap1.get((Map<Integer, Object>) hashMap1, (Object) doubleKeyMap0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Integer integer0 = new Integer(1);
      DoubleKeyMap<Object, Integer, Object> doubleKeyMap0 = new DoubleKeyMap<Object, Integer, Object>();
      Object object0 = new Object();
      Object object1 = doubleKeyMap0.get(object0, integer0);
      assertNull(object1);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      HashMap<Object, Map<Integer, String>> hashMap0 = new HashMap<Object, Map<Integer, String>>();
      DoubleKeyMap<Object, Integer, String> doubleKeyMap0 = new DoubleKeyMap<Object, Integer, String>(hashMap0);
      Map<Integer, String> map0 = doubleKeyMap0.get((Object) null);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DoubleKeyMap<Object, Map<Integer, Object>, HashMap<Integer, Object>> doubleKeyMap0 = new DoubleKeyMap<Object, Map<Integer, Object>, HashMap<Integer, Object>>();
      Object object0 = new Object();
      Map<Map<Integer, Object>, HashMap<Integer, Object>> map0 = doubleKeyMap0.get(object0);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Class<Map> class0 = Map.class;
      HashMap<Integer, Map<Integer, HashMap<String, Integer>>> hashMap0 = new HashMap<Integer, Map<Integer, HashMap<String, Integer>>>();
      DoubleKeyMap<Integer, Integer, HashMap<String, Integer>> doubleKeyMap0 = new DoubleKeyMap<Integer, Integer, HashMap<String, Integer>>(hashMap0);
      HashMap<Integer, Object> hashMap1 = new HashMap<Integer, Object>();
      HashMap<Map<Integer, Object>, Map<Object, Object>> hashMap2 = new HashMap<Map<Integer, Object>, Map<Object, Object>>(2573);
      DoubleKeyMap<Map<Integer, Object>, Object, Object> doubleKeyMap1 = new DoubleKeyMap<Map<Integer, Object>, Object, Object>(hashMap2, class0);
      // Undeclared exception!
      try { 
        doubleKeyMap1.put((Map<Integer, Object>) hashMap1, (Object) hashMap2, (Object) doubleKeyMap0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Class<Map> class0 = Map.class;
      DoubleKeyMap<Integer, String, Map<Integer, Object>> doubleKeyMap0 = null;
      try {
        doubleKeyMap0 = new DoubleKeyMap<Integer, String, Map<Integer, Object>>((Map<Integer, Map<String, Map<Integer, Object>>>) null, class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      HashMap<Integer, Map<Integer, HashMap<String, Integer>>> hashMap0 = new HashMap<Integer, Map<Integer, HashMap<String, Integer>>>();
      DoubleKeyMap<Integer, Integer, HashMap<String, Integer>> doubleKeyMap0 = new DoubleKeyMap<Integer, Integer, HashMap<String, Integer>>(hashMap0);
      Integer integer0 = new Integer(2573);
      HashMap<String, Integer> hashMap1 = new HashMap<String, Integer>();
      Integer integer1 = new Integer(3997);
      doubleKeyMap0.put(integer0, integer1, hashMap1);
      doubleKeyMap0.remove(integer0, integer0);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      HashMap<Integer, Map<Integer, HashMap<String, Integer>>> hashMap0 = new HashMap<Integer, Map<Integer, HashMap<String, Integer>>>();
      DoubleKeyMap<Integer, Integer, HashMap<String, Integer>> doubleKeyMap0 = new DoubleKeyMap<Integer, Integer, HashMap<String, Integer>>(hashMap0);
      Integer integer0 = new Integer(2573);
      HashMap<String, Integer> hashMap1 = new HashMap<String, Integer>();
      doubleKeyMap0.put(integer0, integer0, hashMap1);
      HashMap<String, Integer> hashMap2 = doubleKeyMap0.put(integer0, integer0, hashMap1);
      assertSame(hashMap1, hashMap2);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      DoubleKeyMap<String, HashMap<String, Object>, Object> doubleKeyMap0 = new DoubleKeyMap<String, HashMap<String, Object>, Object>();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      Object object0 = doubleKeyMap0.get((String) null, hashMap0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      HashMap<Integer, Map<Integer, HashMap<String, Integer>>> hashMap0 = new HashMap<Integer, Map<Integer, HashMap<String, Integer>>>();
      Class<HashMap> class0 = HashMap.class;
      HashMap<Object, Object> hashMap1 = new HashMap<Object, Object>();
      HashMap<Object, String> hashMap2 = new HashMap<Object, String>();
      HashMap<Map<Object, Object>, Map<Object, String>> hashMap3 = new HashMap<Map<Object, Object>, Map<Object, String>>();
      hashMap3.put(hashMap1, hashMap2);
      DoubleKeyMap<Map<Object, Object>, Object, String> doubleKeyMap0 = new DoubleKeyMap<Map<Object, Object>, Object, String>(hashMap3, class0);
      String string0 = doubleKeyMap0.get((Map<Object, Object>) hashMap1, (Object) hashMap0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Class<Map> class0 = Map.class;
      DoubleKeyMap<Map<Integer, Object>, String, Object> doubleKeyMap0 = null;
      try {
        doubleKeyMap0 = new DoubleKeyMap<Map<Integer, Object>, String, Object>(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }
}
