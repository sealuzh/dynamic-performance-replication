/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 11:40:09 GMT 2018
 */

package org.la4j.matrix.sparse;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.Random;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import java.util.function.BiFunction;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;
import org.la4j.LinearAlgebra;
import org.la4j.Matrix;
import org.la4j.iterator.MatrixIterator;
import org.la4j.iterator.RowMajorMatrixIterator;
import org.la4j.iterator.VectorIterator;
import org.la4j.matrix.ColumnMajorSparseMatrix;
import org.la4j.matrix.MatrixFactory;
import org.la4j.matrix.RowMajorSparseMatrix;
import org.la4j.matrix.SparseMatrix;
import org.la4j.matrix.functor.MatrixAccumulator;
import org.la4j.matrix.functor.MatrixFunction;
import org.la4j.matrix.functor.MatrixPredicate;
import org.la4j.matrix.functor.MatrixProcedure;
import org.la4j.matrix.sparse.CCSMatrix;
import org.la4j.matrix.sparse.CRSMatrix;
import org.la4j.operation.ooplace.OoPlaceMatricesAddition;
import org.la4j.operation.ooplace.OoPlaceOuterProduct;
import org.la4j.vector.DenseVector;
import org.la4j.vector.SparseVector;
import org.la4j.vector.functor.VectorAccumulator;
import org.la4j.vector.functor.VectorFunction;
import org.la4j.vector.functor.VectorProcedure;
import org.la4j.vector.sparse.CompressedVector;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CRSMatrix_ESTest extends CRSMatrix_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      cRSMatrix0.min();
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.0;
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.setSeed(486L);
      RowMajorSparseMatrix.random(446, 446, 0.0, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      cRSMatrix0.min();
      cRSMatrix0.toBinary();
      // Undeclared exception!
      try { 
        cRSMatrix0.add((Matrix) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.RowMajorSparseMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)13;
      // Undeclared exception!
      try { 
        CRSMatrix.fromBinary(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can not decode CRSMatrix from the given byte array.
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      // Undeclared exception!
      try { 
        CRSMatrix.fromMatrixMarket("SWEEP");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong input file format: can not read header '%%MatrixMarket'.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      // Undeclared exception!
      try { 
        CRSMatrix.random((-262), 2084, Double.NEGATIVE_INFINITY, (Random) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The density value should be between 0 and 1.0
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(2877);
      OoPlaceMatricesAddition ooPlaceMatricesAddition0 = new OoPlaceMatricesAddition();
      cRSMatrix0.set(530, 2849, 13);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      double[][] doubleArray0 = new double[8][2];
      CRSMatrix cRSMatrix0 = CRSMatrix.from2DArray(doubleArray0);
      // Undeclared exception!
      try { 
        cRSMatrix0.each((MatrixProcedure) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      OoPlaceMatricesAddition ooPlaceMatricesAddition0 = new OoPlaceMatricesAddition();
      CRSMatrix cRSMatrix0 = new CRSMatrix(4, 4);
      cRSMatrix0.norm();
      VectorIterator vectorIterator0 = cRSMatrix0.iteratorOfRow(4);
      assertNotNull(vectorIterator0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      CRSMatrix cRSMatrix0 = CRSMatrix.randomSymmetric(0, (double) 0, (Random) mockRandom0);
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(0, cRSMatrix0.rows());
      assertTrue(cRSMatrix0.isRowMajor());
      assertNotNull(cRSMatrix0);
      
      // Undeclared exception!
      try { 
        cRSMatrix0.getRow(1792);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1793
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.fromCSV("");
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.rows());
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0, cRSMatrix0.columns());
      assertNotNull(cRSMatrix0);
      
      double double0 = cRSMatrix0.norm();
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.rows());
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(0.0, double0, 0.01);
      
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.eachNonZero(matrixProcedure0);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.rows());
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0, cRSMatrix0.columns());
      
      CompressedVector compressedVector0 = (CompressedVector)cRSMatrix0.getColumn(1271);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.rows());
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(0, compressedVector0.length());
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      assertNotNull(compressedVector0);
      
      // Undeclared exception!
      try { 
        cRSMatrix0.iteratorOfRow(1271);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1271
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix$5", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(1132, 2068, 2);
      cRSMatrix0.copyOfColumns(1132);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      double[][] doubleArray0 = new double[8][2];
      double[] doubleArray1 = new double[2];
      doubleArray1[1] = 0.0;
      doubleArray0[0] = doubleArray1;
      CRSMatrix cRSMatrix0 = new CRSMatrix(910, 910, 910);
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(910, cRSMatrix0.columns());
      assertEquals(910, cRSMatrix0.rows());
      assertNotNull(cRSMatrix0);
      
      RowMajorMatrixIterator rowMajorMatrixIterator0 = cRSMatrix0.nonZeroRowMajorIterator();
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(910, cRSMatrix0.columns());
      assertEquals(910, cRSMatrix0.rows());
      assertNotNull(rowMajorMatrixIterator0);
      
      cRSMatrix0.copyOfShape(910, 910);
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.eachNonZero(matrixProcedure0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Matrix matrix0 = Matrix.constant(0, 0, 0);
      assertEquals(0, matrix0.columns());
      assertEquals(0, matrix0.rows());
      assertNotNull(matrix0);
      
      CRSMatrix cRSMatrix0 = CRSMatrix.block(matrix0, matrix0, matrix0, matrix0);
      assertEquals(0, matrix0.columns());
      assertEquals(0, matrix0.rows());
      assertEquals(0, cRSMatrix0.cardinality());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.rows());
      assertNotNull(cRSMatrix0);
      
      cRSMatrix0.iteratorOfNonZeroRows();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix(0, 13);
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.rows());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(13, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertNotNull(cRSMatrix0);
      
      CRSMatrix cRSMatrix1 = (CRSMatrix)cRSMatrix0.copyOfShape(0, 0);
      assertFalse(cRSMatrix1.equals((Object)cRSMatrix0));
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.rows());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(13, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(0.0, cRSMatrix1.min(), 0.01);
      assertEquals(0, cRSMatrix1.cardinality());
      assertTrue(cRSMatrix1.isRowMajor());
      assertEquals(0.0, cRSMatrix1.max(), 0.01);
      assertEquals(0, cRSMatrix1.columns());
      assertEquals(Double.NaN, cRSMatrix1.density(), 0.01);
      assertEquals(0, cRSMatrix1.rows());
      assertNotSame(cRSMatrix0, cRSMatrix1);
      assertNotSame(cRSMatrix1, cRSMatrix0);
      assertNotNull(cRSMatrix1);
      
      CCSMatrix cCSMatrix0 = (CCSMatrix)cRSMatrix0.rotate();
      assertFalse(cRSMatrix0.equals((Object)cRSMatrix1));
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.rows());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(13, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertEquals(13, cCSMatrix0.rows());
      assertEquals(0, cCSMatrix0.columns());
      assertEquals(Double.NaN, cCSMatrix0.density(), 0.01);
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertNotSame(cRSMatrix0, cRSMatrix1);
      assertNotNull(cCSMatrix0);
      
      // Undeclared exception!
      try { 
        CRSMatrix.from2DArray((double[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(0, 0);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0, cRSMatrix0.columns());
      assertNotNull(cRSMatrix0);
      
      double double0 = cRSMatrix0.product();
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(1.0, double0, 0.01);
      
      Matrix matrix0 = cRSMatrix0.subtract(1558.66410839);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(0, matrix0.columns());
      assertEquals(0, matrix0.rows());
      assertNotNull(matrix0);
      
      CRSMatrix cRSMatrix1 = (CRSMatrix)cRSMatrix0.kroneckerProduct(cRSMatrix0);
      assertTrue(cRSMatrix1.equals((Object)cRSMatrix0));
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(0, cRSMatrix1.rows());
      assertEquals(Double.NaN, cRSMatrix1.density(), 0.01);
      assertTrue(cRSMatrix1.isRowMajor());
      assertEquals(0, cRSMatrix1.cardinality());
      assertEquals(0.0, cRSMatrix1.max(), 0.01);
      assertEquals(0, cRSMatrix1.columns());
      assertEquals(0.0, cRSMatrix1.min(), 0.01);
      assertNotSame(cRSMatrix0, cRSMatrix1);
      assertNotSame(cRSMatrix1, cRSMatrix0);
      assertNotNull(cRSMatrix1);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 8;
      int[] intArray0 = new int[7];
      intArray0[4] = 8;
      double[][] doubleArray1 = new double[2][9];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      CRSMatrix cRSMatrix0 = CRSMatrix.from2DArray(doubleArray1);
      assertEquals(1, cRSMatrix0.columns());
      assertEquals(8.0, cRSMatrix0.max(), 0.01);
      assertEquals(2, cRSMatrix0.cardinality());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(1.0, cRSMatrix0.density(), 0.01);
      assertEquals(2, cRSMatrix0.rows());
      assertNotNull(cRSMatrix0);
      
      // Undeclared exception!
      try { 
        cRSMatrix0.each((MatrixProcedure) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix(332, 1);
      assertEquals(1, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(332, cRSMatrix0.rows());
      assertEquals(0, cRSMatrix0.cardinality());
      assertNotNull(cRSMatrix0);
      
      cRSMatrix0.copyOfShape(13, 710);
      cRSMatrix0.rotate();
      int int0 = 2899;
      int int1 = (-1365);
      CRSMatrix cRSMatrix1 = new CRSMatrix((-1365), (-1365), (-2577));
      cRSMatrix1.nonZeroRowMajorIterator();
      int int2 = 7;
      MockRandom mockRandom0 = new MockRandom();
      CRSMatrix cRSMatrix2 = CRSMatrix.random(int0, int2, (double) int1, (Random) mockRandom0);
      int int3 = 32;
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      cRSMatrix2.foldRow(int3, vectorAccumulator0);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(4, 4);
      assertEquals(4.0, cRSMatrix0.max(), 0.01);
      assertEquals(4, cRSMatrix0.rows());
      assertEquals(4, cRSMatrix0.columns());
      assertEquals(0.25, cRSMatrix0.density(), 0.01);
      assertEquals(4, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertNotNull(cRSMatrix0);
      
      CompressedVector compressedVector0 = (CompressedVector)cRSMatrix0.getColumn(4);
      assertEquals(4.0, cRSMatrix0.max(), 0.01);
      assertEquals(4, cRSMatrix0.rows());
      assertEquals(4, cRSMatrix0.columns());
      assertEquals(0.25, cRSMatrix0.density(), 0.01);
      assertEquals(4, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(4, compressedVector0.length());
      assertNotNull(compressedVector0);
      
      int int0 = 2687;
      MatrixIterator matrixIterator0 = cRSMatrix0.iterator();
      assertEquals(4.0, cRSMatrix0.max(), 0.01);
      assertEquals(4, cRSMatrix0.rows());
      assertEquals(4, cRSMatrix0.columns());
      assertEquals(0.25, cRSMatrix0.density(), 0.01);
      assertEquals(4, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertNotNull(matrixIterator0);
      
      cRSMatrix0.swapRows(910, 910);
      assertEquals(4.0, cRSMatrix0.max(), 0.01);
      assertEquals(4, cRSMatrix0.rows());
      assertEquals(4, cRSMatrix0.columns());
      assertEquals(0.25, cRSMatrix0.density(), 0.01);
      assertEquals(4, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      
      CompressedVector compressedVector1 = (CompressedVector)cRSMatrix0.getColumn(783);
      assertTrue(compressedVector1.equals((Object)compressedVector0));
      assertEquals(4.0, cRSMatrix0.max(), 0.01);
      assertEquals(4, cRSMatrix0.rows());
      assertEquals(4, cRSMatrix0.columns());
      assertEquals(0.25, cRSMatrix0.density(), 0.01);
      assertEquals(4, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0, compressedVector1.cardinality());
      assertEquals(0.0, compressedVector1.density(), 0.01);
      assertEquals(4, compressedVector1.length());
      assertNotSame(compressedVector1, compressedVector0);
      assertNotNull(compressedVector1);
      
      // Undeclared exception!
      try { 
        cRSMatrix0.maxInColumn(2687);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '2687' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      int int0 = 1;
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (double) 1;
      doubleArray0[2] = (double) 1;
      doubleArray0[3] = (double) 1;
      doubleArray0[4] = (double) 1;
      doubleArray0[5] = (double) 1;
      doubleArray0[6] = (double) 1;
      CRSMatrix cRSMatrix0 = CRSMatrix.from1DArray(1, 1, doubleArray0);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(1, cRSMatrix0.cardinality());
      assertEquals(1.0, cRSMatrix0.density(), 0.01);
      assertEquals(1, cRSMatrix0.rows());
      assertEquals(1, cRSMatrix0.columns());
      assertEquals(1.0, cRSMatrix0.max(), 0.01);
      assertArrayEquals(new double[] {1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0}, doubleArray0, 0.01);
      assertNotNull(cRSMatrix0);
      
      // Undeclared exception!
      try { 
        cRSMatrix0.copyOfShape((-1699), (-1699));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: -1699x-1699
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.fromCSV("");
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0, cRSMatrix0.rows());
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertNotNull(cRSMatrix0);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.0;
      int int0 = 2383;
      int int1 = 3187;
      Matrix matrix0 = Matrix.constant(2383, 3187, (-1.0));
      assertEquals(2383, matrix0.rows());
      assertEquals(3187, matrix0.columns());
      assertNotNull(matrix0);
      
      // Undeclared exception!
      try { 
        CRSMatrix.block(matrix0, matrix0, matrix0, cRSMatrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Sides of blocks are incompatible!
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.fromCSV("");
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0, cRSMatrix0.rows());
      assertNotNull(cRSMatrix0);
      
      double double0 = cRSMatrix0.min();
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0, cRSMatrix0.rows());
      assertEquals(0.0, double0, 0.01);
      
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      double[] doubleArray0 = cRSMatrix0.foldColumns(vectorAccumulator0);
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0, cRSMatrix0.rows());
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertNotNull(doubleArray0);
      
      MatrixFactory<Matrix> matrixFactory0 = (MatrixFactory<Matrix>) mock(MatrixFactory.class, new ViolatedAssumptionAnswer());
      doReturn(cRSMatrix0).when(matrixFactory0).apply(anyInt() , anyInt());
      CRSMatrix cRSMatrix1 = (CRSMatrix)cRSMatrix0.to(matrixFactory0);
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0, cRSMatrix0.rows());
      assertEquals(0, cRSMatrix1.columns());
      assertEquals(0.0, cRSMatrix1.min(), 0.01);
      assertEquals(0, cRSMatrix1.rows());
      assertEquals(Double.NaN, cRSMatrix1.density(), 0.01);
      assertEquals(0, cRSMatrix1.cardinality());
      assertTrue(cRSMatrix1.isRowMajor());
      assertEquals(0.0, cRSMatrix1.max(), 0.01);
      assertSame(cRSMatrix0, cRSMatrix1);
      assertSame(cRSMatrix1, cRSMatrix0);
      assertNotNull(cRSMatrix1);
      
      RowMajorMatrixIterator rowMajorMatrixIterator0 = cRSMatrix1.nonZeroRowMajorIterator();
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0, cRSMatrix0.rows());
      assertEquals(0, cRSMatrix1.columns());
      assertEquals(0.0, cRSMatrix1.min(), 0.01);
      assertEquals(0, cRSMatrix1.rows());
      assertEquals(Double.NaN, cRSMatrix1.density(), 0.01);
      assertEquals(0, cRSMatrix1.cardinality());
      assertTrue(cRSMatrix1.isRowMajor());
      assertEquals(0.0, cRSMatrix1.max(), 0.01);
      assertSame(cRSMatrix0, cRSMatrix1);
      assertSame(cRSMatrix1, cRSMatrix0);
      assertNotNull(rowMajorMatrixIterator0);
      
      byte[] byteArray0 = cRSMatrix0.toBinary();
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0, cRSMatrix0.rows());
      assertSame(cRSMatrix0, cRSMatrix1);
      assertNotNull(byteArray0);
      
      CRSMatrix cRSMatrix2 = CRSMatrix.fromBinary(byteArray0);
      assertTrue(cRSMatrix2.equals((Object)cRSMatrix0));
      assertTrue(cRSMatrix2.equals((Object)cRSMatrix1));
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0, cRSMatrix0.rows());
      assertEquals(0, cRSMatrix2.cardinality());
      assertEquals(Double.NaN, cRSMatrix2.density(), 0.01);
      assertEquals(0, cRSMatrix2.rows());
      assertEquals(0.0, cRSMatrix2.min(), 0.01);
      assertEquals(0, cRSMatrix2.columns());
      assertEquals(0.0, cRSMatrix2.max(), 0.01);
      assertTrue(cRSMatrix2.isRowMajor());
      assertNotSame(cRSMatrix0, cRSMatrix2);
      assertSame(cRSMatrix0, cRSMatrix1);
      assertNotSame(cRSMatrix2, cRSMatrix1);
      assertNotSame(cRSMatrix2, cRSMatrix0);
      assertNotNull(cRSMatrix2);
      
      // Undeclared exception!
      try { 
        SparseMatrix.fromCSV("TAKEN_FROM_THESE");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      int int0 = 12;
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(12, 12, 12);
      cRSMatrix0.norm();
      MockRandom mockRandom0 = new MockRandom(12);
      Matrix matrix0 = Matrix.randomSymmetric(12, mockRandom0);
      // Undeclared exception!
      try { 
        CRSMatrix.block(matrix0, cRSMatrix0, cRSMatrix0, cRSMatrix0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '13' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(12);
      cRSMatrix0.norm();
      // Undeclared exception!
      try { 
        CRSMatrix.block(cRSMatrix0, cRSMatrix0, cRSMatrix0, cRSMatrix0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '13' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(13, 13);
      CRSMatrix cRSMatrix1 = CRSMatrix.identity(13);
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(matrixPredicate0).test(anyInt() , anyInt());
      cRSMatrix1.non(matrixPredicate0);
      cRSMatrix0.maxInColumn(8);
      cRSMatrix0.nonZeroAt(8, 13);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(13, 13);
      CRSMatrix cRSMatrix1 = new CRSMatrix();
      cRSMatrix1.manhattanNorm();
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(matrixPredicate0).test(anyInt() , anyInt());
      cRSMatrix1.non(matrixPredicate0);
      double double0 = new Integer(13);
      cRSMatrix0.nonZeroAt(9, 13);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(12);
      CRSMatrix cRSMatrix1 = CRSMatrix.diagonal(1323, (-21.8251899775366));
      cRSMatrix1.set(530, 9, 12);
      cRSMatrix0.minInRow(12);
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.eachNonZero(matrixProcedure0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      double[][] doubleArray0 = new double[8][2];
      double[] doubleArray1 = new double[2];
      doubleArray1[1] = 0.0;
      doubleArray0[0] = doubleArray1;
      int int0 = 910;
      int int1 = 1029;
      CRSMatrix cRSMatrix0 = new CRSMatrix(910, 1029, 1029);
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        cRSMatrix0.select(intArray0, intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No rows or columns selected.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(2877);
      MatrixAccumulator matrixAccumulator0 = mock(MatrixAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn((double)2877).when(matrixAccumulator0).accumulate();
      cRSMatrix0.foldNonZero(matrixAccumulator0);
      OoPlaceMatricesAddition ooPlaceMatricesAddition0 = new OoPlaceMatricesAddition();
      cRSMatrix0.set(530, 2849, 2877);
      DenseVector denseVector0 = DenseVector.fromMatrixMarket("bP>2rUiLIs4k2ZPgL");
      cRSMatrix0.equals((Object) denseVector0);
      OoPlaceMatricesAddition ooPlaceMatricesAddition1 = new OoPlaceMatricesAddition();
      OoPlaceOuterProduct ooPlaceOuterProduct0 = new OoPlaceOuterProduct();
      SparseVector sparseVector0 = null;
      Matrix matrix0 = ooPlaceOuterProduct0.apply(sparseVector0, denseVector0);
      CRSMatrix.block(cRSMatrix0, cRSMatrix0, cRSMatrix0, matrix0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      int int0 = 12;
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(12);
      cRSMatrix0.iteratorOfNonZeroRows();
      double[] doubleArray0 = new double[12];
      doubleArray0[0] = (double) 12;
      doubleArray0[1] = (double) 3;
      CRSMatrix.from1DArray(3, 3, doubleArray0);
      byte[] byteArray0 = cRSMatrix0.toBinary();
      CRSMatrix.fromBinary(byteArray0);
      // Undeclared exception!
      try { 
        SparseMatrix.fromCSV("No rows or columns selected.");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      int int0 = 13;
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(13, 13);
      // Undeclared exception!
      try { 
        cRSMatrix0.transform((MatrixFunction) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
          CRSMatrix cRSMatrix0 = CRSMatrix.identity(12);
          cRSMatrix0.iteratorOfNonZeroRows();
          SparseMatrix sparseMatrix0 = cRSMatrix0.toSparseMatrix();
          sparseMatrix0.toColumnVector();
          LinearAlgebra.DecompositorFactory linearAlgebra_DecompositorFactory0 = LinearAlgebra.DecompositorFactory.RAW_QR;
          sparseMatrix0.withDecompositor(linearAlgebra_DecompositorFactory0);
          CRSMatrix cRSMatrix1 = new CRSMatrix();
          cRSMatrix0.maxInRow(3);
          byte[] byteArray0 = new byte[7];
          byteArray0[0] = (byte)116;
          OoPlaceMatricesAddition ooPlaceMatricesAddition0 = new OoPlaceMatricesAddition();
          int int0 = (-67);
          double[] doubleArray0 = new double[0];
          MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
          doReturn(0.0).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
          ((CRSMatrix) sparseMatrix0).updateAt(9, (-1752), matrixFunction0);
          // Undeclared exception!
          try { 
            CRSMatrix.from1DArray(12, (-67), doubleArray0);
            fail("Expecting exception: IllegalArgumentException");
          
          } catch(IllegalArgumentException e) {
             //
             // Wrong matrix dimensions: 12x-67
             //
             verifyException("org.la4j.Matrix", e);
          }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      int int0 = 3;
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      int int1 = 7;
      MockRandom mockRandom0 = new MockRandom();
      CRSMatrix.identity(3);
      CRSMatrix cRSMatrix1 = CRSMatrix.diagonal(3, 1580.53618);
      LinearAlgebra.SolverFactory linearAlgebra_SolverFactory0 = LinearAlgebra.SolverFactory.SMART;
      cRSMatrix1.withSolver(linearAlgebra_SolverFactory0);
      CRSMatrix cRSMatrix2 = null;
      try {
        cRSMatrix2 = new CRSMatrix((-723), 2863);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: -723x2863
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      int int0 = 12;
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(12);
      SparseMatrix sparseMatrix0 = cRSMatrix0.toSparseMatrix();
      CRSMatrix cRSMatrix1 = new CRSMatrix();
      cRSMatrix0.iteratorOfNonZeroRows();
      double double0 = new Integer(12);
      int int1 = 3;
      // Undeclared exception!
      try { 
        CRSMatrix.block(sparseMatrix0, cRSMatrix1, cRSMatrix0, cRSMatrix1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Sides of blocks are incompatible!
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(12, 12, 12);
      cRSMatrix0.setAll(12);
      cRSMatrix0.iteratorOfNonZeroRows();
      // Undeclared exception!
      try { 
        cRSMatrix0.nonZeroAt(27, 27);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 27
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      double[] doubleArray0 = new double[1];
      MockRandom mockRandom0 = new MockRandom();
      Matrix.randomSymmetric(59, mockRandom0);
      MockRandom mockRandom1 = new MockRandom();
      mockRandom1.setSeed(486L);
      cRSMatrix0.copyOfShape(446, 37);
      cRSMatrix0.setAll((-1642.31));
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
          CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(13, 13);
          CRSMatrix cRSMatrix1 = CRSMatrix.identity(13);
          MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
          cRSMatrix0.maxInColumn(8);
          cRSMatrix1.nonZeroIteratorOfRow(8);
          cRSMatrix0.copyOfShape(13, 4);
          // Undeclared exception!
          try { 
            cRSMatrix1.blankOfShape(13, (-2418));
            fail("Expecting exception: IllegalArgumentException");
          
          } catch(IllegalArgumentException e) {
             //
             // Wrong matrix dimensions: 13x-2418
             //
             verifyException("org.la4j.Matrix", e);
          }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(12);
      cRSMatrix0.iteratorOfNonZeroRows();
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 12;
      doubleArray0[1] = (double) 12;
      double[][] doubleArray1 = new double[7][8];
      doubleArray1[0] = doubleArray0;
      doubleArray1[6] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      double[] doubleArray2 = new double[6];
      doubleArray2[0] = 12.0;
      doubleArray0[0] = 0.0;
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(matrixPredicate0).test(anyInt() , anyInt());
      doReturn(true, true, false).when(matrixPredicate0).test(anyInt() , anyInt() , anyDouble());
      cRSMatrix0.non(matrixPredicate0);
      // Undeclared exception!
      try { 
        cRSMatrix0.maxInColumn(12);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '12' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      int int0 = 37;
      int[] intArray0 = new int[12];
      intArray0[0] = 37;
      intArray0[1] = 2861;
      intArray0[3] = 37;
      intArray0[4] = 37;
      intArray0[5] = 2861;
      intArray0[6] = 37;
      CRSMatrix cRSMatrix0 = new CRSMatrix(2861, 37, 37, doubleArray0, intArray0, intArray0);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(Double.NEGATIVE_INFINITY).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      // Undeclared exception!
      try { 
        cRSMatrix0.update(matrixFunction0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix(12, 12);
      cRSMatrix0.setAll(12);
      cRSMatrix0.nonZeroAt(0, 0);
      int int0 = 0;
      // Undeclared exception!
      try { 
        CRSMatrix.block(cRSMatrix0, cRSMatrix0, cRSMatrix0, cRSMatrix0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '13' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(13, 13);
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.removeLastColumn();
      cRSMatrix0.maxInColumn(8);
      cRSMatrix0.nonZeroAt(8, (-2326));
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        cRSMatrix0.eachNonZeroInRow(13, vectorProcedure0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 14
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      double[][] doubleArray0 = new double[8][2];
      double[] doubleArray1 = new double[2];
      doubleArray1[1] = 0.0;
      doubleArray0[0] = doubleArray1;
      int int0 = 8;
      CRSMatrix cRSMatrix0 = new CRSMatrix(2899, 2899, 8);
      cRSMatrix0.nonZeroRowMajorIterator();
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(Double.POSITIVE_INFINITY).when(vectorAccumulator0).accumulate();
      cRSMatrix0.foldRow(7, vectorAccumulator0);
      cRSMatrix0.nonZeroIteratorOfRow(0);
      int[] intArray0 = new int[5];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 8;
      intArray0[3] = 7;
      intArray0[4] = 2899;
      // Undeclared exception!
      try { 
        cRSMatrix0.select(intArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '2899' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(12, 12, 12);
      cRSMatrix0.iteratorOfNonZeroRows();
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 12;
      doubleArray0[1] = (double) 12;
      MatrixAccumulator matrixAccumulator0 = mock(MatrixAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(matrixAccumulator0).accumulate();
      cRSMatrix0.fold(matrixAccumulator0);
      CRSMatrix.identity(12);
      cRSMatrix0.max();
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      int int0 = 2112;
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(2112, (-952.160746));
      cRSMatrix0.max();
      int[] intArray0 = new int[8];
      intArray0[0] = 2112;
      cRSMatrix0.removeRow(2112);
      intArray0[1] = int0;
      intArray0[2] = int0;
      intArray0[3] = int0;
      intArray0[4] = int0;
      intArray0[5] = int0;
      intArray0[6] = int0;
      intArray0[7] = int0;
      cRSMatrix0.select(intArray0, intArray0);
      int int1 = 1858;
      CRSMatrix.zero(int1, int1, intArray0[5]);
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.each(matrixProcedure0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(13, 13);
      CRSMatrix cRSMatrix1 = CRSMatrix.identity(13);
      cRSMatrix1.product();
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      double[][] doubleArray0 = new double[2][1];
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = (double) 13;
      doubleArray1[1] = (double) 8;
      doubleArray1[2] = (double) 8;
      doubleArray1[3] = (double) 218;
      doubleArray1[4] = (double) 13;
      doubleArray1[5] = (double) 218;
      doubleArray1[6] = (double) 8;
      doubleArray1[7] = (double) 218;
      doubleArray1[8] = (double) 218;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[7];
      doubleArray2[0] = (double) 13;
      cRSMatrix0.max();
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      int int0 = 13;
      CRSMatrix cRSMatrix0 = new CRSMatrix(0, 13);
      Matrix matrix0 = cRSMatrix0.blankOfShape(380, 0);
      CRSMatrix cRSMatrix1 = (CRSMatrix)matrix0.multiplyByItsTranspose();
      cRSMatrix0.setAll((-1368.3733657226035));
      cRSMatrix0.norm();
      CRSMatrix cRSMatrix2 = CRSMatrix.block(cRSMatrix1, cRSMatrix1, matrix0, cRSMatrix0);
      cRSMatrix1.iteratorOfNonZeroRows();
      int int1 = 7;
      cRSMatrix1.maxInRow(int1);
      int int2 = 1;
      int int3 = 3341;
      int int4 = 13;
      cRSMatrix2.slice(int3, int2, int4, int0);
      matrix0.getRow(int4);
      int int5 = (-2433);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      cRSMatrix1.updateRow(int5, vectorFunction0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      double[][] doubleArray0 = new double[8][2];
      double[] doubleArray1 = new double[19];
      double double0 = 0.0;
      doubleArray1[1] = 0.0;
      doubleArray0[0] = doubleArray1;
      int int0 = 2899;
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      DenseVector denseVector0 = DenseVector.fromCollection(linkedList0);
      Matrix matrix0 = denseVector0.toRowMatrix();
      CRSMatrix cRSMatrix0 = CRSMatrix.block(matrix0, matrix0, matrix0, matrix0);
      MatrixFactory<Matrix> matrixFactory0 = (MatrixFactory<Matrix>) mock(MatrixFactory.class, new ViolatedAssumptionAnswer());
      int int1 = 3561;
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        cRSMatrix0.updateAt(2899, 3561, matrixFunction0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2899
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(2, 0.0);
      int int0 = 218;
      cRSMatrix0.multiplyByItsTranspose();
      cRSMatrix0.setAll(2);
      // Undeclared exception!
      try { 
        cRSMatrix0.getRow(218);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 219
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
          CRSMatrix cRSMatrix0 = CRSMatrix.zero(12, 12, 12);
          cRSMatrix0.iteratorOfNonZeroRows();
          double[] doubleArray0 = new double[2];
          doubleArray0[0] = (double) 12;
          doubleArray0[1] = (double) 12;
          CRSMatrix.identity(12);
          Integer integer0 = new Integer(12);
          HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
          hashMap0.keySet();
          BiFunction<Object, Object, Integer> biFunction0 = (BiFunction<Object, Object, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
          hashMap0.replaceAll(biFunction0);
          DenseVector.fromMap(hashMap0, 12);
          CRSMatrix cRSMatrix1 = new CRSMatrix(871, 871, 876);
          cRSMatrix0.nonZeroRowMajorIterator();
          cRSMatrix1.eachNonZeroInRow(12, (VectorProcedure) null);
          VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
          double[][] doubleArray1 = new double[2][8];
          doubleArray1[0] = doubleArray0;
          CRSMatrix cRSMatrix2 = new CRSMatrix();
          OoPlaceMatricesAddition ooPlaceMatricesAddition0 = new OoPlaceMatricesAddition();
          ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.from2DArray(doubleArray1);
          // Undeclared exception!
          try { 
            ooPlaceMatricesAddition0.applySymmetric((RowMajorSparseMatrix) cRSMatrix2, columnMajorSparseMatrix0);
            fail("Expecting exception: ArithmeticException");
          
          } catch(ArithmeticException e) {
             //
             // / by zero
             //
             verifyException("org.la4j.iterator.CursorToRowMajorMatrixIterator", e);
          }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(2877);
      int[] intArray0 = new int[1];
      intArray0[0] = 13;
      Matrix matrix0 = cRSMatrix0.select(intArray0, intArray0);
      cRSMatrix0.set((-882), (-252), 13);
      cRSMatrix0.iteratorOfNonZeroRows();
      CRSMatrix cRSMatrix1 = new CRSMatrix();
      cRSMatrix1.equals((Object) matrix0);
      OoPlaceMatricesAddition ooPlaceMatricesAddition0 = new OoPlaceMatricesAddition();
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      int int0 = 1430;
      CRSMatrix cRSMatrix0 = new CRSMatrix(369, 369, 1430);
      cRSMatrix0.nonZeroRowMajorIterator();
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      CRSMatrix cRSMatrix1 = CRSMatrix.zero(369, 369);
      cRSMatrix1.iteratorOfColumn(1430);
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      Matrix matrix0 = cRSMatrix0.select(intArray0, intArray0);
      cRSMatrix0.set(125, 0, (-1511.328672923));
      matrix0.minInRow(2);
      int int1 = 0;
      CRSMatrix.zero(int0, int1);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(12);
      cRSMatrix0.iteratorOfNonZeroRows();
      int int0 = 3;
      cRSMatrix0.toSparseMatrix();
      CRSMatrix cRSMatrix1 = new CRSMatrix();
      cRSMatrix0.maxInRow(3);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.setSeed(7);
      int int1 = 3;
      // Undeclared exception!
      try { 
        RowMajorSparseMatrix.random(3, 3, Double.POSITIVE_INFINITY, (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The density value should be between 0 and 1.0
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(12, 12);
      cRSMatrix0.iteratorOfNonZeroRows();
      CRSMatrix cRSMatrix1 = new CRSMatrix();
      cRSMatrix0.iteratorOfNonZeroRows();
      cRSMatrix0.maxInRow(3);
      int int0 = 1;
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        cRSMatrix1.eachNonZeroInRow(1, vectorProcedure0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(2877);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorAccumulator0).accumulate();
      cRSMatrix0.foldRow(2837, vectorAccumulator0);
      CRSMatrix cRSMatrix1 = CRSMatrix.zero(2849, 16);
      cRSMatrix1.iteratorOfColumn((-85));
      int[] intArray0 = new int[9];
      intArray0[0] = 0;
      intArray0[1] = 917;
      intArray0[2] = 2849;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 0;
      intArray0[6] = 0;
      intArray0[7] = 2877;
      intArray0[8] = (-85);
      cRSMatrix0.select(intArray0, intArray0);
      cRSMatrix0.removeLastColumn();
      int int0 = (-1);
      CRSMatrix.identity(int0);
      CRSMatrix.identity(intArray0[6]);
      cRSMatrix0.nonZeroRowMajorIterator();
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      int int0 = 2112;
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(2112, (-952.160746));
      int[] intArray0 = new int[8];
      cRSMatrix0.spliterator();
      intArray0[2] = 2112;
      intArray0[2] = 2112;
      intArray0[3] = 2112;
      cRSMatrix0.select(intArray0, intArray0);
      intArray0[4] = int0;
      intArray0[5] = int0;
      intArray0[6] = int0;
      intArray0[7] = int0;
      cRSMatrix0.select(intArray0, intArray0);
      int int1 = 1858;
      CRSMatrix.zero(int1, int1, intArray0[5]);
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.each(matrixProcedure0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(2877);
      Integer integer0 = new Integer(2877);
      CRSMatrix cRSMatrix1 = CRSMatrix.zero(2865, 32);
      cRSMatrix1.equals((Matrix) cRSMatrix0, (double) 2877);
      CRSMatrix.diagonal(2865, 2877);
      cRSMatrix0.set(13, 13, 13);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(2877);
      OoPlaceMatricesAddition ooPlaceMatricesAddition0 = new OoPlaceMatricesAddition();
      MockRandom mockRandom0 = new MockRandom();
      MockRandom mockRandom1 = new MockRandom();
      cRSMatrix0.min();
      MockRandom mockRandom2 = new MockRandom();
      mockRandom1.setSeed(486L);
      MockRandom mockRandom3 = new MockRandom(446);
      RowMajorSparseMatrix.random(446, Integer.MAX_VALUE, (double) Integer.MAX_VALUE, (Random) mockRandom3);
      int int0 = 2211;
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.updateAt(int0, int0, matrixFunction0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(2877);
      OoPlaceMatricesAddition ooPlaceMatricesAddition0 = new OoPlaceMatricesAddition();
      cRSMatrix0.set(530, 2849, 2877);
      cRSMatrix0.minInRow(2);
      cRSMatrix0.iteratorOfRow(2);
      cRSMatrix0.iteratorOfNonZeroRows();
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(12);
      cRSMatrix0.iteratorOfNonZeroRows();
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cRSMatrix0.update(matrixFunction0);
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.longs();
      mockRandom0.setSeed(9973L);
      mockRandom0.setSeed((-17L));
      MockRandom mockRandom1 = new MockRandom();
      // Undeclared exception!
      try { 
        RowMajorSparseMatrix.random(9, (-339), 1422.299780762, (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The density value should be between 0 and 1.0
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      int int0 = 369;
      CRSMatrix cRSMatrix0 = new CRSMatrix(369, 369, 5096);
      cRSMatrix0.nonZeroRowMajorIterator();
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(2.0).when(vectorAccumulator0).accumulate();
      cRSMatrix0.foldRow(28, vectorAccumulator0);
      CRSMatrix cRSMatrix1 = CRSMatrix.diagonal(5096, 2.0);
      int int1 = 0;
      cRSMatrix1.iteratorOfColumn(5096);
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      Matrix matrix0 = cRSMatrix0.select(intArray0, intArray0);
      Matrix matrix1 = matrix0.removeLastColumn();
      int int2 = 2869;
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 369;
      doubleArray0[2] = (double) 2869;
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(Double.NEGATIVE_INFINITY, 369.0, (-2460.68914368)).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cRSMatrix1.update(matrixFunction0);
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.longs();
      int int3 = 32;
      CRSMatrix.identity(int3);
      matrix1.set(int0, int1, int2);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      MockRandom mockRandom0 = new MockRandom();
      OoPlaceMatricesAddition ooPlaceMatricesAddition0 = new OoPlaceMatricesAddition();
      CRSMatrix.randomSymmetric(4, 1.0, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(12);
      cRSMatrix0.setAll(12);
      cRSMatrix0.iteratorOfNonZeroRows();
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      try { 
        CRSMatrix.block(cRSMatrix0, cRSMatrix0, cRSMatrix0, cRSMatrix0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '13' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(12, 12, 12);
      cRSMatrix0.iteratorOfNonZeroRows();
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 12;
      doubleArray0[1] = (double) 12;
      CRSMatrix cRSMatrix1 = CRSMatrix.identity(12);
      cRSMatrix1.determinant();
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      hashMap0.keySet();
      BiFunction<Object, Object, Integer> biFunction0 = (BiFunction<Object, Object, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      hashMap0.replaceAll(biFunction0);
      DenseVector.fromMap(hashMap0, 12);
      CRSMatrix cRSMatrix2 = new CRSMatrix(880, 880, 876);
      cRSMatrix0.nonZeroRowMajorIterator();
      cRSMatrix1.eachNonZeroInRow(2, (VectorProcedure) null);
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cRSMatrix2.each(matrixProcedure0);
      OoPlaceMatricesAddition ooPlaceMatricesAddition0 = new OoPlaceMatricesAddition();
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = null;
      ooPlaceMatricesAddition0.applySymmetric((RowMajorSparseMatrix) cRSMatrix2, columnMajorSparseMatrix0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(12, 12, 12);
      CRSMatrix cRSMatrix1 = CRSMatrix.diagonal(12, 0.0);
      CRSMatrix.identity(12);
      cRSMatrix1.determinant();
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      hashMap0.keySet();
      Integer integer0 = new Integer(12);
      int int0 = 3839;
      Integer integer1 = new Integer(3839);
      Integer integer2 = new Integer(12);
      hashMap0.put(integer1, integer2);
      LinearAlgebra.InverterFactory linearAlgebra_InverterFactory0 = LinearAlgebra.InverterFactory.NO_PIVOT_GAUSS;
      cRSMatrix0.withInverter(linearAlgebra_InverterFactory0);
      hashMap0.replaceAll((BiFunction<? super Integer, ? super Integer, ? extends Integer>) null);
      DenseVector.fromMap(hashMap0, int0);
      int int1 = 871;
      int int2 = 435;
      int int3 = 99458;
      CRSMatrix cRSMatrix2 = new CRSMatrix(int1, int2, int3);
      cRSMatrix2.nonZeroRowMajorIterator();
      int int4 = (-711);
      int int5 = (-2008);
      cRSMatrix2.set(int4, int5, int2);
      int int6 = (-2287);
      int int7 = (-995);
      CRSMatrix.zero(int6, int7);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      CRSMatrix.identity(2877);
      OoPlaceMatricesAddition ooPlaceMatricesAddition0 = new OoPlaceMatricesAddition();
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(1323, 1.1102230246251565E-14);
      cRSMatrix0.minInRow(530);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      cRSMatrix0.updateColumn(186, vectorFunction0);
      Integer integer0 = new Integer(186);
      cRSMatrix0.minInRow(530);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(12);
      cRSMatrix0.iteratorOfNonZeroRows();
      SparseMatrix sparseMatrix0 = cRSMatrix0.toSparseMatrix();
      CRSMatrix cRSMatrix1 = new CRSMatrix();
      cRSMatrix0.maxInRow(3);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      cRSMatrix1.update(matrixFunction0);
      MockRandom mockRandom0 = new MockRandom(3);
      mockRandom0.setSeed(1374L);
      sparseMatrix0.infinityNorm();
      cRSMatrix0.transpose();
      CRSMatrix cRSMatrix2 = CRSMatrix.diagonal(9, (-824.51089865));
      cRSMatrix2.add((-824.51089865));
      cRSMatrix2.minInRow(8);
      int int0 = (-3375);
      int int1 = (-2160);
      CRSMatrix cRSMatrix3 = CRSMatrix.zero(9, 12);
      cRSMatrix3.iterator();
      CRSMatrix cRSMatrix4 = new CRSMatrix(3, 8, 8);
      // Undeclared exception!
      try { 
        cRSMatrix4.fold((MatrixAccumulator) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.Matrices$33", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(12, 12, 12);
      cRSMatrix0.norm();
      cRSMatrix0.iteratorOfNonZeroRows();
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(218.0, 1422.299780762, (-3935.239749), Double.POSITIVE_INFINITY, (-3935.239749)).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cRSMatrix0.update(matrixFunction0);
      MockRandom mockRandom0 = new MockRandom(12);
      mockRandom0.setSeed(1374L);
      cRSMatrix0.transpose();
      CRSMatrix cRSMatrix1 = CRSMatrix.diagonal(9, (-1485.791186616));
      cRSMatrix1.min();
      cRSMatrix0.nonZeroAt(9, 139);
      cRSMatrix0.setAll(0.0);
      // Undeclared exception!
      try { 
        cRSMatrix1.updateAt(127, 1069, (MatrixFunction) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 127
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }
}
