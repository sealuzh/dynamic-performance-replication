/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 06:33:35 GMT 2018
 */

package weka.classifiers.bayes.net.search.ci;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.Properties;
import java.util.Spliterator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.util.SystemInUtil;
import org.junit.runner.RunWith;
import weka.classifiers.bayes.BayesNet;
import weka.classifiers.bayes.net.search.ci.ICSSearchAlgorithm;
import weka.classifiers.lazy.kstar.KStarConstants;
import weka.classifiers.meta.RegressionByDiscretization;
import weka.classifiers.rules.DecisionTable;
import weka.core.Attribute;
import weka.core.Instances;
import weka.core.ProtectedProperties;
import weka.core.tokenizers.AlphabeticTokenizer;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ICSSearchAlgorithm_ESTest extends ICSSearchAlgorithm_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      String[] stringArray0 = new String[3];
      ICSSearchAlgorithm.main(stringArray0);
      BayesNet bayesNet0 = new BayesNet();
      assertEquals("Set the name of a file in BIF XML format. A Bayes network learned from data can be compared with the Bayes network represented by the BIF file. Statistics calculated are o.a. the number of missing and extra arcs.", bayesNet0.BIFFileTipText());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ICSSearchAlgorithm iCSSearchAlgorithm0 = new ICSSearchAlgorithm();
      iCSSearchAlgorithm0.listOptions();
      ICSSearchAlgorithm.SeparationSet iCSSearchAlgorithm_SeparationSet0 = iCSSearchAlgorithm0.new SeparationSet();
      boolean boolean0 = iCSSearchAlgorithm_SeparationSet0.contains(0);
      assertEquals(2, iCSSearchAlgorithm0.getMaxCardinality());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ICSSearchAlgorithm iCSSearchAlgorithm0 = new ICSSearchAlgorithm();
      ICSSearchAlgorithm.SeparationSet iCSSearchAlgorithm_SeparationSet0 = iCSSearchAlgorithm0.new SeparationSet();
      String[] stringArray0 = iCSSearchAlgorithm0.getOptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      iCSSearchAlgorithm0.setOptions(stringArray0);
      assertEquals(2, iCSSearchAlgorithm0.getMaxCardinality());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ICSSearchAlgorithm iCSSearchAlgorithm0 = new ICSSearchAlgorithm();
      boolean[][] booleanArray0 = new boolean[0][1];
      // Undeclared exception!
      try { 
        iCSSearchAlgorithm0.existsSepSet(1, (-1438), 1, booleanArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.bayes.net.search.ci.ICSSearchAlgorithm", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ICSSearchAlgorithm iCSSearchAlgorithm0 = new ICSSearchAlgorithm();
      Instances instances0 = iCSSearchAlgorithm0.m_instances;
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances1 = new Instances("@relation", arrayList0, 122);
      BayesNet bayesNet0 = iCSSearchAlgorithm0.m_BayesNet;
      String[] stringArray0 = new String[1];
      BayesNet.main(stringArray0);
      iCSSearchAlgorithm0.search((BayesNet) null, instances1);
      SystemInUtil.addInputLine(".bsi");
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Attribute attribute0 = new Attribute("@data", instances1, 122);
      arrayList0.add(attribute0);
      arrayList0.add(attribute0);
      attribute0.indexOfValue(".arff");
      System.setCurrentTimeMillis(1);
      int int0 = DecisionTable.EVAL_ACCURACY;
      iCSSearchAlgorithm0.globalInfo();
      ICSSearchAlgorithm iCSSearchAlgorithm1 = new ICSSearchAlgorithm();
      boolean[][] booleanArray0 = new boolean[0][7];
      // Undeclared exception!
      try { 
        iCSSearchAlgorithm0.calcArcDirections(booleanArray0, booleanArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.classifiers.bayes.net.search.ci.ICSSearchAlgorithm", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SystemInUtil.addInputLine("");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ICSSearchAlgorithm iCSSearchAlgorithm0 = new ICSSearchAlgorithm();
      Instances instances0 = iCSSearchAlgorithm0.m_instances;
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances1 = new Instances("@relation", arrayList0, 122);
      BayesNet bayesNet0 = iCSSearchAlgorithm0.m_BayesNet;
      iCSSearchAlgorithm0.search((BayesNet) null, instances1);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Attribute attribute0 = new Attribute(".bsi", linkedList0, 122);
      FileSystemHandling.shouldAllThrowIOExceptions();
      arrayList0.add(attribute0);
      attribute0.indexOfValue(".arff");
      linkedList0.remove((Object) null);
      boolean[][] booleanArray0 = new boolean[7][9];
      System.setCurrentTimeMillis((-1));
      iCSSearchAlgorithm0.calcArcDirections(booleanArray0, booleanArray0);
      iCSSearchAlgorithm0.maxn();
      iCSSearchAlgorithm0.listOptions();
      iCSSearchAlgorithm0.maxCardinalityTipText();
      assertEquals(2, iCSSearchAlgorithm0.getMaxCardinality());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ICSSearchAlgorithm iCSSearchAlgorithm0 = new ICSSearchAlgorithm();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Instances instances0 = iCSSearchAlgorithm0.m_instances;
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances1 = new Instances((String) null, arrayList0, 0);
      BayesNet bayesNet0 = new BayesNet();
      ICSSearchAlgorithm iCSSearchAlgorithm1 = new ICSSearchAlgorithm();
      instances1.setRelationName((String) null);
      ICSSearchAlgorithm.SeparationSet iCSSearchAlgorithm_SeparationSet0 = iCSSearchAlgorithm0.new SeparationSet();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      arrayList0.add((Attribute) null);
      Attribute attribute0 = new Attribute(".arff", linkedList0, (-93));
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      arrayList1.clone();
      ICSSearchAlgorithm iCSSearchAlgorithm2 = new ICSSearchAlgorithm();
      bayesNet0.searchAlgorithmTipText();
      iCSSearchAlgorithm2.getOptions();
      try { 
        iCSSearchAlgorithm0.search(bayesNet0, instances1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.bayes.net.search.ci.ICSSearchAlgorithm", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ICSSearchAlgorithm iCSSearchAlgorithm0 = new ICSSearchAlgorithm();
      Instances instances0 = iCSSearchAlgorithm0.m_instances;
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances1 = new Instances("@relation", arrayList0, 127);
      iCSSearchAlgorithm0.maxNrOfParentsTipText();
      Attribute attribute0 = new Attribute(".bsi", instances1, 127);
      arrayList0.add(attribute0);
      BayesNet bayesNet0 = iCSSearchAlgorithm0.m_BayesNet;
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      try { 
        iCSSearchAlgorithm0.search((BayesNet) null, instances1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.bayes.net.search.ci.ICSSearchAlgorithm", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ICSSearchAlgorithm iCSSearchAlgorithm0 = new ICSSearchAlgorithm();
      assertNotNull(iCSSearchAlgorithm0);
      assertEquals("This Bayes Network learning algorithm uses conditional independence tests to find a skeleton, finds V-nodes and applies a set of rules to find the directions of the remaining arrows.", iCSSearchAlgorithm0.globalInfo());
      assertEquals("When determining whether an edge exists a search is performed for a set Z that separates the nodes. MaxCardinality determines the maximum size of the set Z. This greatly influences the length of the search. Default value is 2.", iCSSearchAlgorithm0.maxCardinalityTipText());
      assertEquals("When set to true (default is false), after a network structure is learned a Markov Blanket correction is applied to the network structure. This ensures that all nodes in the network are part of the Markov blanket of the classifier node.", iCSSearchAlgorithm0.markovBlanketClassifierTipText());
      assertEquals("SearchAlgorithm\n", iCSSearchAlgorithm0.toString());
      assertEquals("When set to true (default), the initial network used for structure learning is a Naive Bayes Network, that is, a network with an arrow from the classifier node to each other node. When set to false, an empty network is used as initial network structure", iCSSearchAlgorithm0.initAsNaiveBayesTipText());
      assertEquals("Set the maximum number of parents a node in the Bayes net can have. When initialized as Naive Bayes, setting this parameter to 1 results in a Naive Bayes classifier. When set to 2, a Tree Augmented Bayes Network (TAN) is learned, and when set >2, a Bayes Net Augmented Bayes Network (BAN) is learned. By setting it to a value much larger than the number of nodes in the network (the default of 100000 pretty much guarantees this), no restriction on the number of parents is enforced", iCSSearchAlgorithm0.maxNrOfParentsTipText());
      assertEquals("The score type determines the measure used to judge the quality of a network structure. It can be one of Bayes, BDeu, Minimum Description Length (MDL), Akaike Information Criterion (AIC), and Entropy.", iCSSearchAlgorithm0.scoreTypeTipText());
      assertFalse(iCSSearchAlgorithm0.getMarkovBlanketClassifier());
      assertEquals(2, iCSSearchAlgorithm0.getMaxCardinality());
      
      Instances instances0 = iCSSearchAlgorithm0.m_instances;
      assertNull(instances0);
      
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      assertNotNull(arrayList1);
      assertTrue(arrayList1.equals((Object)arrayList0));
      assertEquals(0, arrayList1.size());
      assertTrue(arrayList1.isEmpty());
      
      Instances instances1 = new Instances("@relation", arrayList1, 83);
      assertNotNull(instances1);
      assertTrue(arrayList1.equals((Object)arrayList0));
      assertEquals(0, arrayList1.size());
      assertTrue(arrayList1.isEmpty());
      assertFalse(instances1.checkForStringAttributes());
      assertEquals("@relation", instances1.relationName());
      assertEquals((-1), instances1.classIndex());
      assertEquals(0, instances1.numInstances());
      assertEquals(0, instances1.size());
      assertEquals(0.0, instances1.sumOfWeights(), 0.01);
      assertEquals(0, instances1.numAttributes());
      
      BayesNet bayesNet0 = new BayesNet();
      assertNotNull(bayesNet0);
      assertEquals(2, bayesNet0.graphType());
      assertEquals("When ADTree (the data structure for increasing speed on counts, not to be confused with the classifier under the same name) is used learning time goes down typically. However, because ADTrees are memory intensive, memory problems may occur. Switching this option off makes the structure learning algorithms slower, and run with less memory. By default, ADTrees are used.", bayesNet0.useADTreeTipText());
      assertEquals("If set to true, classifier may output additional info to the console.", bayesNet0.debugTipText());
      assertEquals("Bayes Network learning using various search algorithms and quality measures.\nBase class for a Bayes Network classifier. Provides datastructures (network structure, conditional probability distributions, etc.) and facilities common to Bayes Network learning algorithms like K2 and B.\n\nFor more information see:\n\nhttp://www.cs.waikato.ac.nz/~remco/weka.pdf", bayesNet0.globalInfo());
      assertEquals("Set the name of a file in BIF XML format. A Bayes network learned from data can be compared with the Bayes network represented by the BIF file. Statistics calculated are o.a. the number of missing and extra arcs.", bayesNet0.BIFFileTipText());
      assertFalse(bayesNet0.getUseADTree());
      assertFalse(bayesNet0.getDebug());
      assertEquals("Select Estimator algorithm for finding the conditional probability tables of the Bayes Network.", bayesNet0.estimatorTipText());
      assertEquals("Select method used for searching network structures.", bayesNet0.searchAlgorithmTipText());
      
      iCSSearchAlgorithm0.search(bayesNet0, instances1);
      assertNotSame(arrayList1, arrayList0);
      assertTrue(arrayList1.equals((Object)arrayList0));
      assertEquals("This Bayes Network learning algorithm uses conditional independence tests to find a skeleton, finds V-nodes and applies a set of rules to find the directions of the remaining arrows.", iCSSearchAlgorithm0.globalInfo());
      assertEquals("When determining whether an edge exists a search is performed for a set Z that separates the nodes. MaxCardinality determines the maximum size of the set Z. This greatly influences the length of the search. Default value is 2.", iCSSearchAlgorithm0.maxCardinalityTipText());
      assertEquals("When set to true (default is false), after a network structure is learned a Markov Blanket correction is applied to the network structure. This ensures that all nodes in the network are part of the Markov blanket of the classifier node.", iCSSearchAlgorithm0.markovBlanketClassifierTipText());
      assertEquals("SearchAlgorithm\n", iCSSearchAlgorithm0.toString());
      assertEquals("When set to true (default), the initial network used for structure learning is a Naive Bayes Network, that is, a network with an arrow from the classifier node to each other node. When set to false, an empty network is used as initial network structure", iCSSearchAlgorithm0.initAsNaiveBayesTipText());
      assertEquals("Set the maximum number of parents a node in the Bayes net can have. When initialized as Naive Bayes, setting this parameter to 1 results in a Naive Bayes classifier. When set to 2, a Tree Augmented Bayes Network (TAN) is learned, and when set >2, a Bayes Net Augmented Bayes Network (BAN) is learned. By setting it to a value much larger than the number of nodes in the network (the default of 100000 pretty much guarantees this), no restriction on the number of parents is enforced", iCSSearchAlgorithm0.maxNrOfParentsTipText());
      assertEquals("The score type determines the measure used to judge the quality of a network structure. It can be one of Bayes, BDeu, Minimum Description Length (MDL), Akaike Information Criterion (AIC), and Entropy.", iCSSearchAlgorithm0.scoreTypeTipText());
      assertFalse(iCSSearchAlgorithm0.getMarkovBlanketClassifier());
      assertEquals(2, iCSSearchAlgorithm0.getMaxCardinality());
      assertEquals(0, arrayList1.size());
      assertTrue(arrayList1.isEmpty());
      assertFalse(instances1.checkForStringAttributes());
      assertEquals("@relation", instances1.relationName());
      assertEquals((-1), instances1.classIndex());
      assertEquals(0, instances1.numInstances());
      assertEquals(0, instances1.size());
      assertEquals(0.0, instances1.sumOfWeights(), 0.01);
      assertEquals(0, instances1.numAttributes());
      assertEquals(2, bayesNet0.graphType());
      assertEquals("When ADTree (the data structure for increasing speed on counts, not to be confused with the classifier under the same name) is used learning time goes down typically. However, because ADTrees are memory intensive, memory problems may occur. Switching this option off makes the structure learning algorithms slower, and run with less memory. By default, ADTrees are used.", bayesNet0.useADTreeTipText());
      assertEquals("If set to true, classifier may output additional info to the console.", bayesNet0.debugTipText());
      assertEquals("Bayes Network learning using various search algorithms and quality measures.\nBase class for a Bayes Network classifier. Provides datastructures (network structure, conditional probability distributions, etc.) and facilities common to Bayes Network learning algorithms like K2 and B.\n\nFor more information see:\n\nhttp://www.cs.waikato.ac.nz/~remco/weka.pdf", bayesNet0.globalInfo());
      assertEquals("Set the name of a file in BIF XML format. A Bayes network learned from data can be compared with the Bayes network represented by the BIF file. Statistics calculated are o.a. the number of missing and extra arcs.", bayesNet0.BIFFileTipText());
      assertFalse(bayesNet0.getUseADTree());
      assertFalse(bayesNet0.getDebug());
      assertEquals("Select Estimator algorithm for finding the conditional probability tables of the Bayes Network.", bayesNet0.estimatorTipText());
      assertEquals("Select method used for searching network structures.", bayesNet0.searchAlgorithmTipText());
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Properties properties0 = new Properties();
      assertNotNull(properties0);
      assertTrue(properties0.isEmpty());
      assertEquals(0, properties0.size());
      
      double double0 = bayesNet0.measureDivergence();
      assertEquals(0.0, double0, 0.01);
      assertEquals(2, bayesNet0.graphType());
      assertEquals("When ADTree (the data structure for increasing speed on counts, not to be confused with the classifier under the same name) is used learning time goes down typically. However, because ADTrees are memory intensive, memory problems may occur. Switching this option off makes the structure learning algorithms slower, and run with less memory. By default, ADTrees are used.", bayesNet0.useADTreeTipText());
      assertEquals("If set to true, classifier may output additional info to the console.", bayesNet0.debugTipText());
      assertEquals("Bayes Network learning using various search algorithms and quality measures.\nBase class for a Bayes Network classifier. Provides datastructures (network structure, conditional probability distributions, etc.) and facilities common to Bayes Network learning algorithms like K2 and B.\n\nFor more information see:\n\nhttp://www.cs.waikato.ac.nz/~remco/weka.pdf", bayesNet0.globalInfo());
      assertEquals("Set the name of a file in BIF XML format. A Bayes network learned from data can be compared with the Bayes network represented by the BIF file. Statistics calculated are o.a. the number of missing and extra arcs.", bayesNet0.BIFFileTipText());
      assertFalse(bayesNet0.getUseADTree());
      assertFalse(bayesNet0.getDebug());
      assertEquals("Select Estimator algorithm for finding the conditional probability tables of the Bayes Network.", bayesNet0.estimatorTipText());
      assertEquals("Select method used for searching network structures.", bayesNet0.searchAlgorithmTipText());
      
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      assertNotNull(protectedProperties0);
      assertTrue(properties0.isEmpty());
      assertEquals(0, properties0.size());
      assertTrue(protectedProperties0.isEmpty());
      assertEquals(0, protectedProperties0.size());
      
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      assertNotNull(protectedProperties1);
      assertTrue(protectedProperties1.equals((Object)protectedProperties0));
      assertTrue(properties0.isEmpty());
      assertEquals(0, properties0.size());
      assertTrue(protectedProperties0.isEmpty());
      assertEquals(0, protectedProperties0.size());
      assertEquals(0, protectedProperties1.size());
      assertTrue(protectedProperties1.isEmpty());
      
      Attribute attribute0 = new Attribute(". ", linkedList0, protectedProperties1);
      assertNotNull(attribute0);
      assertTrue(protectedProperties0.equals((Object)protectedProperties1));
      assertTrue(protectedProperties1.equals((Object)protectedProperties0));
      assertEquals(0, linkedList0.size());
      assertTrue(properties0.isEmpty());
      assertEquals(0, properties0.size());
      assertTrue(protectedProperties0.isEmpty());
      assertEquals(0, protectedProperties0.size());
      assertEquals(0, protectedProperties1.size());
      assertTrue(protectedProperties1.isEmpty());
      assertEquals(1.0, attribute0.weight(), 0.01);
      assertEquals(0, attribute0.ordering());
      assertFalse(attribute0.upperNumericBoundIsOpen());
      assertEquals(1, attribute0.type());
      assertFalse(attribute0.isNumeric());
      assertFalse(attribute0.isString());
      assertFalse(attribute0.isRelationValued());
      assertTrue(attribute0.isNominal());
      assertFalse(attribute0.isDate());
      assertFalse(attribute0.lowerNumericBoundIsOpen());
      assertFalse(attribute0.isAveragable());
      assertEquals(0, attribute0.numValues());
      assertFalse(attribute0.isRegular());
      assertEquals(0.0, attribute0.getUpperNumericBound(), 0.01);
      assertEquals(0.0, attribute0.getLowerNumericBound(), 0.01);
      assertEquals("", attribute0.getDateFormat());
      assertFalse(attribute0.hasZeropoint());
      assertEquals((-1), attribute0.index());
      assertEquals(1, Attribute.NOMINAL);
      assertEquals(4, Attribute.RELATIONAL);
      assertEquals(2, Attribute.ORDERING_MODULO);
      assertEquals(2, Attribute.STRING);
      assertEquals(1, Attribute.ORDERING_ORDERED);
      assertEquals(3, Attribute.DATE);
      assertEquals(0, Attribute.ORDERING_SYMBOLIC);
      assertEquals(0, Attribute.NUMERIC);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      AlphabeticTokenizer alphabeticTokenizer0 = new AlphabeticTokenizer();
      assertNotNull(alphabeticTokenizer0);
      assertEquals("Alphabetic string tokenizer, tokens are to be formed only from contiguous alphabetic sequences.", alphabeticTokenizer0.globalInfo());
      
      attribute0.setWeight(0.0);
      assertNotSame(protectedProperties0, protectedProperties1);
      assertNotSame(protectedProperties1, protectedProperties0);
      assertTrue(protectedProperties0.equals((Object)protectedProperties1));
      assertTrue(protectedProperties1.equals((Object)protectedProperties0));
      assertEquals(0, linkedList0.size());
      assertTrue(properties0.isEmpty());
      assertEquals(0, properties0.size());
      assertTrue(protectedProperties0.isEmpty());
      assertEquals(0, protectedProperties0.size());
      assertEquals(0, protectedProperties1.size());
      assertTrue(protectedProperties1.isEmpty());
      assertEquals(0, attribute0.ordering());
      assertFalse(attribute0.upperNumericBoundIsOpen());
      assertEquals(1, attribute0.type());
      assertFalse(attribute0.isNumeric());
      assertFalse(attribute0.isString());
      assertFalse(attribute0.isRelationValued());
      assertTrue(attribute0.isNominal());
      assertFalse(attribute0.isDate());
      assertFalse(attribute0.lowerNumericBoundIsOpen());
      assertFalse(attribute0.isAveragable());
      assertEquals(0, attribute0.numValues());
      assertFalse(attribute0.isRegular());
      assertEquals(0.0, attribute0.getUpperNumericBound(), 0.01);
      assertEquals(0.0, attribute0.weight(), 0.01);
      assertEquals(0.0, attribute0.getLowerNumericBound(), 0.01);
      assertEquals("", attribute0.getDateFormat());
      assertFalse(attribute0.hasZeropoint());
      assertEquals((-1), attribute0.index());
      assertEquals(1, Attribute.NOMINAL);
      assertEquals(4, Attribute.RELATIONAL);
      assertEquals(2, Attribute.ORDERING_MODULO);
      assertEquals(2, Attribute.STRING);
      assertEquals(1, Attribute.ORDERING_ORDERED);
      assertEquals(3, Attribute.DATE);
      assertEquals(0, Attribute.ORDERING_SYMBOLIC);
      assertEquals(0, Attribute.NUMERIC);
      
      boolean boolean1 = arrayList0.add(attribute0);
      assertNotSame(arrayList0, arrayList1);
      assertNotSame(protectedProperties0, protectedProperties1);
      assertNotSame(protectedProperties1, protectedProperties0);
      assertTrue(boolean1 == boolean0);
      assertFalse(arrayList0.equals((Object)arrayList1));
      assertTrue(protectedProperties0.equals((Object)protectedProperties1));
      assertTrue(protectedProperties1.equals((Object)protectedProperties0));
      assertTrue(boolean1);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertEquals(0, linkedList0.size());
      assertTrue(properties0.isEmpty());
      assertEquals(0, properties0.size());
      assertTrue(protectedProperties0.isEmpty());
      assertEquals(0, protectedProperties0.size());
      assertEquals(0, protectedProperties1.size());
      assertTrue(protectedProperties1.isEmpty());
      assertEquals(0, attribute0.ordering());
      assertFalse(attribute0.upperNumericBoundIsOpen());
      assertEquals(1, attribute0.type());
      assertFalse(attribute0.isNumeric());
      assertFalse(attribute0.isString());
      assertFalse(attribute0.isRelationValued());
      assertTrue(attribute0.isNominal());
      assertFalse(attribute0.isDate());
      assertFalse(attribute0.lowerNumericBoundIsOpen());
      assertFalse(attribute0.isAveragable());
      assertEquals(0, attribute0.numValues());
      assertFalse(attribute0.isRegular());
      assertEquals(0.0, attribute0.getUpperNumericBound(), 0.01);
      assertEquals(0.0, attribute0.weight(), 0.01);
      assertEquals(0.0, attribute0.getLowerNumericBound(), 0.01);
      assertEquals("", attribute0.getDateFormat());
      assertFalse(attribute0.hasZeropoint());
      assertEquals((-1), attribute0.index());
      assertEquals(1, Attribute.NOMINAL);
      assertEquals(4, Attribute.RELATIONAL);
      assertEquals(2, Attribute.ORDERING_MODULO);
      assertEquals(2, Attribute.STRING);
      assertEquals(1, Attribute.ORDERING_ORDERED);
      assertEquals(3, Attribute.DATE);
      assertEquals(0, Attribute.ORDERING_SYMBOLIC);
      assertEquals(0, Attribute.NUMERIC);
      
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      assertNotNull(fileSystemHandling1);
      assertFalse(fileSystemHandling1.equals((Object)fileSystemHandling0));
      
      String string0 = bayesNet0.debugTipText();
      assertNotNull(string0);
      assertEquals("If set to true, classifier may output additional info to the console.", string0);
      assertEquals(2, bayesNet0.graphType());
      assertEquals("When ADTree (the data structure for increasing speed on counts, not to be confused with the classifier under the same name) is used learning time goes down typically. However, because ADTrees are memory intensive, memory problems may occur. Switching this option off makes the structure learning algorithms slower, and run with less memory. By default, ADTrees are used.", bayesNet0.useADTreeTipText());
      assertEquals("If set to true, classifier may output additional info to the console.", bayesNet0.debugTipText());
      assertEquals("Bayes Network learning using various search algorithms and quality measures.\nBase class for a Bayes Network classifier. Provides datastructures (network structure, conditional probability distributions, etc.) and facilities common to Bayes Network learning algorithms like K2 and B.\n\nFor more information see:\n\nhttp://www.cs.waikato.ac.nz/~remco/weka.pdf", bayesNet0.globalInfo());
      assertEquals("Set the name of a file in BIF XML format. A Bayes network learned from data can be compared with the Bayes network represented by the BIF file. Statistics calculated are o.a. the number of missing and extra arcs.", bayesNet0.BIFFileTipText());
      assertFalse(bayesNet0.getUseADTree());
      assertFalse(bayesNet0.getDebug());
      assertEquals("Select Estimator algorithm for finding the conditional probability tables of the Bayes Network.", bayesNet0.estimatorTipText());
      assertEquals("Select method used for searching network structures.", bayesNet0.searchAlgorithmTipText());
      
      boolean[][] booleanArray0 = new boolean[1][0];
      ICSSearchAlgorithm.SeparationSet iCSSearchAlgorithm_SeparationSet0 = iCSSearchAlgorithm0.existsSepSet(2, 2375, 2, booleanArray0);
      assertNull(iCSSearchAlgorithm_SeparationSet0);
      assertEquals("This Bayes Network learning algorithm uses conditional independence tests to find a skeleton, finds V-nodes and applies a set of rules to find the directions of the remaining arrows.", iCSSearchAlgorithm0.globalInfo());
      assertEquals("When determining whether an edge exists a search is performed for a set Z that separates the nodes. MaxCardinality determines the maximum size of the set Z. This greatly influences the length of the search. Default value is 2.", iCSSearchAlgorithm0.maxCardinalityTipText());
      assertEquals("When set to true (default is false), after a network structure is learned a Markov Blanket correction is applied to the network structure. This ensures that all nodes in the network are part of the Markov blanket of the classifier node.", iCSSearchAlgorithm0.markovBlanketClassifierTipText());
      assertEquals("SearchAlgorithm\n", iCSSearchAlgorithm0.toString());
      assertEquals("When set to true (default), the initial network used for structure learning is a Naive Bayes Network, that is, a network with an arrow from the classifier node to each other node. When set to false, an empty network is used as initial network structure", iCSSearchAlgorithm0.initAsNaiveBayesTipText());
      assertEquals("Set the maximum number of parents a node in the Bayes net can have. When initialized as Naive Bayes, setting this parameter to 1 results in a Naive Bayes classifier. When set to 2, a Tree Augmented Bayes Network (TAN) is learned, and when set >2, a Bayes Net Augmented Bayes Network (BAN) is learned. By setting it to a value much larger than the number of nodes in the network (the default of 100000 pretty much guarantees this), no restriction on the number of parents is enforced", iCSSearchAlgorithm0.maxNrOfParentsTipText());
      assertEquals("The score type determines the measure used to judge the quality of a network structure. It can be one of Bayes, BDeu, Minimum Description Length (MDL), Akaike Information Criterion (AIC), and Entropy.", iCSSearchAlgorithm0.scoreTypeTipText());
      assertFalse(iCSSearchAlgorithm0.getMarkovBlanketClassifier());
      assertEquals(2, iCSSearchAlgorithm0.getMaxCardinality());
      
      String string1 = iCSSearchAlgorithm0.maxCardinalityTipText();
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("When determining whether an edge exists a search is performed for a set Z that separates the nodes. MaxCardinality determines the maximum size of the set Z. This greatly influences the length of the search. Default value is 2.", string1);
      assertEquals("This Bayes Network learning algorithm uses conditional independence tests to find a skeleton, finds V-nodes and applies a set of rules to find the directions of the remaining arrows.", iCSSearchAlgorithm0.globalInfo());
      assertEquals("When determining whether an edge exists a search is performed for a set Z that separates the nodes. MaxCardinality determines the maximum size of the set Z. This greatly influences the length of the search. Default value is 2.", iCSSearchAlgorithm0.maxCardinalityTipText());
      assertEquals("When set to true (default is false), after a network structure is learned a Markov Blanket correction is applied to the network structure. This ensures that all nodes in the network are part of the Markov blanket of the classifier node.", iCSSearchAlgorithm0.markovBlanketClassifierTipText());
      assertEquals("SearchAlgorithm\n", iCSSearchAlgorithm0.toString());
      assertEquals("When set to true (default), the initial network used for structure learning is a Naive Bayes Network, that is, a network with an arrow from the classifier node to each other node. When set to false, an empty network is used as initial network structure", iCSSearchAlgorithm0.initAsNaiveBayesTipText());
      assertEquals("Set the maximum number of parents a node in the Bayes net can have. When initialized as Naive Bayes, setting this parameter to 1 results in a Naive Bayes classifier. When set to 2, a Tree Augmented Bayes Network (TAN) is learned, and when set >2, a Bayes Net Augmented Bayes Network (BAN) is learned. By setting it to a value much larger than the number of nodes in the network (the default of 100000 pretty much guarantees this), no restriction on the number of parents is enforced", iCSSearchAlgorithm0.maxNrOfParentsTipText());
      assertEquals("The score type determines the measure used to judge the quality of a network structure. It can be one of Bayes, BDeu, Minimum Description Length (MDL), Akaike Information Criterion (AIC), and Entropy.", iCSSearchAlgorithm0.scoreTypeTipText());
      assertFalse(iCSSearchAlgorithm0.getMarkovBlanketClassifier());
      assertEquals(2, iCSSearchAlgorithm0.getMaxCardinality());
      
      iCSSearchAlgorithm0.setMaxCardinality(4);
      assertEquals("This Bayes Network learning algorithm uses conditional independence tests to find a skeleton, finds V-nodes and applies a set of rules to find the directions of the remaining arrows.", iCSSearchAlgorithm0.globalInfo());
      assertEquals("When determining whether an edge exists a search is performed for a set Z that separates the nodes. MaxCardinality determines the maximum size of the set Z. This greatly influences the length of the search. Default value is 2.", iCSSearchAlgorithm0.maxCardinalityTipText());
      assertEquals("When set to true (default is false), after a network structure is learned a Markov Blanket correction is applied to the network structure. This ensures that all nodes in the network are part of the Markov blanket of the classifier node.", iCSSearchAlgorithm0.markovBlanketClassifierTipText());
      assertEquals("SearchAlgorithm\n", iCSSearchAlgorithm0.toString());
      assertEquals(4, iCSSearchAlgorithm0.getMaxCardinality());
      assertEquals("When set to true (default), the initial network used for structure learning is a Naive Bayes Network, that is, a network with an arrow from the classifier node to each other node. When set to false, an empty network is used as initial network structure", iCSSearchAlgorithm0.initAsNaiveBayesTipText());
      assertEquals("Set the maximum number of parents a node in the Bayes net can have. When initialized as Naive Bayes, setting this parameter to 1 results in a Naive Bayes classifier. When set to 2, a Tree Augmented Bayes Network (TAN) is learned, and when set >2, a Bayes Net Augmented Bayes Network (BAN) is learned. By setting it to a value much larger than the number of nodes in the network (the default of 100000 pretty much guarantees this), no restriction on the number of parents is enforced", iCSSearchAlgorithm0.maxNrOfParentsTipText());
      assertEquals("The score type determines the measure used to judge the quality of a network structure. It can be one of Bayes, BDeu, Minimum Description Length (MDL), Akaike Information Criterion (AIC), and Entropy.", iCSSearchAlgorithm0.scoreTypeTipText());
      assertFalse(iCSSearchAlgorithm0.getMarkovBlanketClassifier());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ICSSearchAlgorithm iCSSearchAlgorithm0 = new ICSSearchAlgorithm();
      assertNotNull(iCSSearchAlgorithm0);
      assertEquals("When determining whether an edge exists a search is performed for a set Z that separates the nodes. MaxCardinality determines the maximum size of the set Z. This greatly influences the length of the search. Default value is 2.", iCSSearchAlgorithm0.maxCardinalityTipText());
      assertEquals("This Bayes Network learning algorithm uses conditional independence tests to find a skeleton, finds V-nodes and applies a set of rules to find the directions of the remaining arrows.", iCSSearchAlgorithm0.globalInfo());
      assertEquals("When set to true (default is false), after a network structure is learned a Markov Blanket correction is applied to the network structure. This ensures that all nodes in the network are part of the Markov blanket of the classifier node.", iCSSearchAlgorithm0.markovBlanketClassifierTipText());
      assertEquals("SearchAlgorithm\n", iCSSearchAlgorithm0.toString());
      assertEquals("When set to true (default), the initial network used for structure learning is a Naive Bayes Network, that is, a network with an arrow from the classifier node to each other node. When set to false, an empty network is used as initial network structure", iCSSearchAlgorithm0.initAsNaiveBayesTipText());
      assertEquals("Set the maximum number of parents a node in the Bayes net can have. When initialized as Naive Bayes, setting this parameter to 1 results in a Naive Bayes classifier. When set to 2, a Tree Augmented Bayes Network (TAN) is learned, and when set >2, a Bayes Net Augmented Bayes Network (BAN) is learned. By setting it to a value much larger than the number of nodes in the network (the default of 100000 pretty much guarantees this), no restriction on the number of parents is enforced", iCSSearchAlgorithm0.maxNrOfParentsTipText());
      assertEquals(2, iCSSearchAlgorithm0.getMaxCardinality());
      assertFalse(iCSSearchAlgorithm0.getMarkovBlanketClassifier());
      assertEquals("The score type determines the measure used to judge the quality of a network structure. It can be one of Bayes, BDeu, Minimum Description Length (MDL), Akaike Information Criterion (AIC), and Entropy.", iCSSearchAlgorithm0.scoreTypeTipText());
      
      Instances instances0 = iCSSearchAlgorithm0.m_instances;
      assertNull(instances0);
      
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      Spliterator<Attribute> spliterator0 = arrayList0.spliterator();
      assertNotNull(spliterator0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      Instances instances1 = new Instances("@relation", arrayList0, 10);
      assertNotNull(instances1);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals(0, instances1.numAttributes());
      assertEquals(0, instances1.numInstances());
      assertEquals((-1), instances1.classIndex());
      assertFalse(instances1.checkForStringAttributes());
      assertEquals("@relation", instances1.relationName());
      assertEquals(0, instances1.size());
      assertEquals(0.0, instances1.sumOfWeights(), 0.01);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Attribute attribute0 = new Attribute("@relation");
      assertNotNull(attribute0);
      assertFalse(attribute0.upperNumericBoundIsOpen());
      assertEquals(1, attribute0.ordering());
      assertEquals(Double.NEGATIVE_INFINITY, attribute0.getLowerNumericBound(), 0.01);
      assertEquals(1.0, attribute0.weight(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, attribute0.getUpperNumericBound(), 0.01);
      assertTrue(attribute0.isNumeric());
      assertEquals("", attribute0.getDateFormat());
      assertTrue(attribute0.isRegular());
      assertEquals(0, attribute0.numValues());
      assertTrue(attribute0.hasZeropoint());
      assertFalse(attribute0.lowerNumericBoundIsOpen());
      assertEquals(0, attribute0.type());
      assertEquals((-1), attribute0.index());
      assertFalse(attribute0.isNominal());
      assertTrue(attribute0.isAveragable());
      assertFalse(attribute0.isDate());
      assertFalse(attribute0.isString());
      assertFalse(attribute0.isRelationValued());
      assertEquals(1, Attribute.ORDERING_ORDERED);
      assertEquals(0, Attribute.NUMERIC);
      assertEquals(0, Attribute.ORDERING_SYMBOLIC);
      assertEquals(2, Attribute.STRING);
      assertEquals(3, Attribute.DATE);
      assertEquals(4, Attribute.RELATIONAL);
      assertEquals(2, Attribute.ORDERING_MODULO);
      assertEquals(1, Attribute.NOMINAL);
      
      boolean boolean0 = arrayList0.add(attribute0);
      assertTrue(boolean0);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertFalse(attribute0.upperNumericBoundIsOpen());
      assertEquals(1, attribute0.ordering());
      assertEquals(Double.NEGATIVE_INFINITY, attribute0.getLowerNumericBound(), 0.01);
      assertEquals(1.0, attribute0.weight(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, attribute0.getUpperNumericBound(), 0.01);
      assertTrue(attribute0.isNumeric());
      assertEquals("", attribute0.getDateFormat());
      assertTrue(attribute0.isRegular());
      assertEquals(0, attribute0.numValues());
      assertTrue(attribute0.hasZeropoint());
      assertFalse(attribute0.lowerNumericBoundIsOpen());
      assertEquals(0, attribute0.type());
      assertEquals((-1), attribute0.index());
      assertFalse(attribute0.isNominal());
      assertTrue(attribute0.isAveragable());
      assertFalse(attribute0.isDate());
      assertFalse(attribute0.isString());
      assertFalse(attribute0.isRelationValued());
      assertEquals(1, Attribute.ORDERING_ORDERED);
      assertEquals(0, Attribute.NUMERIC);
      assertEquals(0, Attribute.ORDERING_SYMBOLIC);
      assertEquals(2, Attribute.STRING);
      assertEquals(3, Attribute.DATE);
      assertEquals(4, Attribute.RELATIONAL);
      assertEquals(2, Attribute.ORDERING_MODULO);
      assertEquals(1, Attribute.NOMINAL);
      
      boolean boolean1 = arrayList0.add(attribute0);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(2, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertFalse(attribute0.upperNumericBoundIsOpen());
      assertEquals(1, attribute0.ordering());
      assertEquals(Double.NEGATIVE_INFINITY, attribute0.getLowerNumericBound(), 0.01);
      assertEquals(1.0, attribute0.weight(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, attribute0.getUpperNumericBound(), 0.01);
      assertTrue(attribute0.isNumeric());
      assertEquals("", attribute0.getDateFormat());
      assertTrue(attribute0.isRegular());
      assertEquals(0, attribute0.numValues());
      assertTrue(attribute0.hasZeropoint());
      assertFalse(attribute0.lowerNumericBoundIsOpen());
      assertEquals(0, attribute0.type());
      assertEquals((-1), attribute0.index());
      assertFalse(attribute0.isNominal());
      assertTrue(attribute0.isAveragable());
      assertFalse(attribute0.isDate());
      assertFalse(attribute0.isString());
      assertFalse(attribute0.isRelationValued());
      assertEquals(1, Attribute.ORDERING_ORDERED);
      assertEquals(0, Attribute.NUMERIC);
      assertEquals(0, Attribute.ORDERING_SYMBOLIC);
      assertEquals(2, Attribute.STRING);
      assertEquals(3, Attribute.DATE);
      assertEquals(4, Attribute.RELATIONAL);
      assertEquals(2, Attribute.ORDERING_MODULO);
      assertEquals(1, Attribute.NOMINAL);
      
      int int0 = KStarConstants.M_DELETE;
      assertEquals(1, int0);
      
      boolean boolean2 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2);
      
      System.setCurrentTimeMillis(844L);
      boolean boolean3 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3);
      
      ICSSearchAlgorithm.SeparationSet iCSSearchAlgorithm_SeparationSet0 = iCSSearchAlgorithm0.new SeparationSet();
      assertNotNull(iCSSearchAlgorithm_SeparationSet0);
      assertEquals("When determining whether an edge exists a search is performed for a set Z that separates the nodes. MaxCardinality determines the maximum size of the set Z. This greatly influences the length of the search. Default value is 2.", iCSSearchAlgorithm0.maxCardinalityTipText());
      assertEquals("This Bayes Network learning algorithm uses conditional independence tests to find a skeleton, finds V-nodes and applies a set of rules to find the directions of the remaining arrows.", iCSSearchAlgorithm0.globalInfo());
      assertEquals("When set to true (default is false), after a network structure is learned a Markov Blanket correction is applied to the network structure. This ensures that all nodes in the network are part of the Markov blanket of the classifier node.", iCSSearchAlgorithm0.markovBlanketClassifierTipText());
      assertEquals("SearchAlgorithm\n", iCSSearchAlgorithm0.toString());
      assertEquals("When set to true (default), the initial network used for structure learning is a Naive Bayes Network, that is, a network with an arrow from the classifier node to each other node. When set to false, an empty network is used as initial network structure", iCSSearchAlgorithm0.initAsNaiveBayesTipText());
      assertEquals("Set the maximum number of parents a node in the Bayes net can have. When initialized as Naive Bayes, setting this parameter to 1 results in a Naive Bayes classifier. When set to 2, a Tree Augmented Bayes Network (TAN) is learned, and when set >2, a Bayes Net Augmented Bayes Network (BAN) is learned. By setting it to a value much larger than the number of nodes in the network (the default of 100000 pretty much guarantees this), no restriction on the number of parents is enforced", iCSSearchAlgorithm0.maxNrOfParentsTipText());
      assertEquals(2, iCSSearchAlgorithm0.getMaxCardinality());
      assertFalse(iCSSearchAlgorithm0.getMarkovBlanketClassifier());
      assertEquals("The score type determines the measure used to judge the quality of a network structure. It can be one of Bayes, BDeu, Minimum Description Length (MDL), Akaike Information Criterion (AIC), and Entropy.", iCSSearchAlgorithm0.scoreTypeTipText());
      
      BayesNet bayesNet0 = new BayesNet();
      assertNotNull(bayesNet0);
      assertFalse(bayesNet0.getDebug());
      assertEquals("Bayes Network learning using various search algorithms and quality measures.\nBase class for a Bayes Network classifier. Provides datastructures (network structure, conditional probability distributions, etc.) and facilities common to Bayes Network learning algorithms like K2 and B.\n\nFor more information see:\n\nhttp://www.cs.waikato.ac.nz/~remco/weka.pdf", bayesNet0.globalInfo());
      assertEquals("Select method used for searching network structures.", bayesNet0.searchAlgorithmTipText());
      assertEquals(2, bayesNet0.graphType());
      assertFalse(bayesNet0.getUseADTree());
      assertEquals("When ADTree (the data structure for increasing speed on counts, not to be confused with the classifier under the same name) is used learning time goes down typically. However, because ADTrees are memory intensive, memory problems may occur. Switching this option off makes the structure learning algorithms slower, and run with less memory. By default, ADTrees are used.", bayesNet0.useADTreeTipText());
      assertEquals("Set the name of a file in BIF XML format. A Bayes network learned from data can be compared with the Bayes network represented by the BIF file. Statistics calculated are o.a. the number of missing and extra arcs.", bayesNet0.BIFFileTipText());
      assertEquals("If set to true, classifier may output additional info to the console.", bayesNet0.debugTipText());
      assertEquals("Select Estimator algorithm for finding the conditional probability tables of the Bayes Network.", bayesNet0.estimatorTipText());
      
      try { 
        iCSSearchAlgorithm0.search(bayesNet0, instances1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.bayes.BayesNet", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      ICSSearchAlgorithm iCSSearchAlgorithm0 = new ICSSearchAlgorithm();
      assertNotNull(iCSSearchAlgorithm0);
      assertFalse(iCSSearchAlgorithm0.getMarkovBlanketClassifier());
      assertEquals("When set to true (default), the initial network used for structure learning is a Naive Bayes Network, that is, a network with an arrow from the classifier node to each other node. When set to false, an empty network is used as initial network structure", iCSSearchAlgorithm0.initAsNaiveBayesTipText());
      assertEquals(2, iCSSearchAlgorithm0.getMaxCardinality());
      assertEquals("The score type determines the measure used to judge the quality of a network structure. It can be one of Bayes, BDeu, Minimum Description Length (MDL), Akaike Information Criterion (AIC), and Entropy.", iCSSearchAlgorithm0.scoreTypeTipText());
      assertEquals("When determining whether an edge exists a search is performed for a set Z that separates the nodes. MaxCardinality determines the maximum size of the set Z. This greatly influences the length of the search. Default value is 2.", iCSSearchAlgorithm0.maxCardinalityTipText());
      assertEquals("Set the maximum number of parents a node in the Bayes net can have. When initialized as Naive Bayes, setting this parameter to 1 results in a Naive Bayes classifier. When set to 2, a Tree Augmented Bayes Network (TAN) is learned, and when set >2, a Bayes Net Augmented Bayes Network (BAN) is learned. By setting it to a value much larger than the number of nodes in the network (the default of 100000 pretty much guarantees this), no restriction on the number of parents is enforced", iCSSearchAlgorithm0.maxNrOfParentsTipText());
      assertEquals("This Bayes Network learning algorithm uses conditional independence tests to find a skeleton, finds V-nodes and applies a set of rules to find the directions of the remaining arrows.", iCSSearchAlgorithm0.globalInfo());
      assertEquals("When set to true (default is false), after a network structure is learned a Markov Blanket correction is applied to the network structure. This ensures that all nodes in the network are part of the Markov blanket of the classifier node.", iCSSearchAlgorithm0.markovBlanketClassifierTipText());
      assertEquals("SearchAlgorithm\n", iCSSearchAlgorithm0.toString());
      
      Instances instances0 = iCSSearchAlgorithm0.m_instances;
      assertNull(instances0);
      
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      Instances instances1 = new Instances("@relation", arrayList0, 122);
      assertNotNull(instances1);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, instances1.size());
      assertEquals(0.0, instances1.sumOfWeights(), 0.01);
      assertEquals("@relation", instances1.relationName());
      assertEquals(0, instances1.numAttributes());
      assertEquals(0, instances1.numInstances());
      assertEquals((-1), instances1.classIndex());
      assertFalse(instances1.checkForStringAttributes());
      
      BayesNet bayesNet0 = new BayesNet();
      assertNotNull(bayesNet0);
      assertEquals("Select method used for searching network structures.", bayesNet0.searchAlgorithmTipText());
      assertEquals(2, bayesNet0.graphType());
      assertFalse(bayesNet0.getDebug());
      assertEquals("Set the name of a file in BIF XML format. A Bayes network learned from data can be compared with the Bayes network represented by the BIF file. Statistics calculated are o.a. the number of missing and extra arcs.", bayesNet0.BIFFileTipText());
      assertFalse(bayesNet0.getUseADTree());
      assertEquals("When ADTree (the data structure for increasing speed on counts, not to be confused with the classifier under the same name) is used learning time goes down typically. However, because ADTrees are memory intensive, memory problems may occur. Switching this option off makes the structure learning algorithms slower, and run with less memory. By default, ADTrees are used.", bayesNet0.useADTreeTipText());
      assertEquals("Select Estimator algorithm for finding the conditional probability tables of the Bayes Network.", bayesNet0.estimatorTipText());
      assertEquals("If set to true, classifier may output additional info to the console.", bayesNet0.debugTipText());
      assertEquals("Bayes Network learning using various search algorithms and quality measures.\nBase class for a Bayes Network classifier. Provides datastructures (network structure, conditional probability distributions, etc.) and facilities common to Bayes Network learning algorithms like K2 and B.\n\nFor more information see:\n\nhttp://www.cs.waikato.ac.nz/~remco/weka.pdf", bayesNet0.globalInfo());
      
      bayesNet0.setSearchAlgorithm(iCSSearchAlgorithm0);
      assertFalse(iCSSearchAlgorithm0.getMarkovBlanketClassifier());
      assertEquals("When set to true (default), the initial network used for structure learning is a Naive Bayes Network, that is, a network with an arrow from the classifier node to each other node. When set to false, an empty network is used as initial network structure", iCSSearchAlgorithm0.initAsNaiveBayesTipText());
      assertEquals(2, iCSSearchAlgorithm0.getMaxCardinality());
      assertEquals("The score type determines the measure used to judge the quality of a network structure. It can be one of Bayes, BDeu, Minimum Description Length (MDL), Akaike Information Criterion (AIC), and Entropy.", iCSSearchAlgorithm0.scoreTypeTipText());
      assertEquals("When determining whether an edge exists a search is performed for a set Z that separates the nodes. MaxCardinality determines the maximum size of the set Z. This greatly influences the length of the search. Default value is 2.", iCSSearchAlgorithm0.maxCardinalityTipText());
      assertEquals("Set the maximum number of parents a node in the Bayes net can have. When initialized as Naive Bayes, setting this parameter to 1 results in a Naive Bayes classifier. When set to 2, a Tree Augmented Bayes Network (TAN) is learned, and when set >2, a Bayes Net Augmented Bayes Network (BAN) is learned. By setting it to a value much larger than the number of nodes in the network (the default of 100000 pretty much guarantees this), no restriction on the number of parents is enforced", iCSSearchAlgorithm0.maxNrOfParentsTipText());
      assertEquals("This Bayes Network learning algorithm uses conditional independence tests to find a skeleton, finds V-nodes and applies a set of rules to find the directions of the remaining arrows.", iCSSearchAlgorithm0.globalInfo());
      assertEquals("When set to true (default is false), after a network structure is learned a Markov Blanket correction is applied to the network structure. This ensures that all nodes in the network are part of the Markov blanket of the classifier node.", iCSSearchAlgorithm0.markovBlanketClassifierTipText());
      assertEquals("SearchAlgorithm\n", iCSSearchAlgorithm0.toString());
      assertEquals("Select method used for searching network structures.", bayesNet0.searchAlgorithmTipText());
      assertEquals(2, bayesNet0.graphType());
      assertFalse(bayesNet0.getDebug());
      assertEquals("Set the name of a file in BIF XML format. A Bayes network learned from data can be compared with the Bayes network represented by the BIF file. Statistics calculated are o.a. the number of missing and extra arcs.", bayesNet0.BIFFileTipText());
      assertFalse(bayesNet0.getUseADTree());
      assertEquals("When ADTree (the data structure for increasing speed on counts, not to be confused with the classifier under the same name) is used learning time goes down typically. However, because ADTrees are memory intensive, memory problems may occur. Switching this option off makes the structure learning algorithms slower, and run with less memory. By default, ADTrees are used.", bayesNet0.useADTreeTipText());
      assertEquals("Select Estimator algorithm for finding the conditional probability tables of the Bayes Network.", bayesNet0.estimatorTipText());
      assertEquals("If set to true, classifier may output additional info to the console.", bayesNet0.debugTipText());
      assertEquals("Bayes Network learning using various search algorithms and quality measures.\nBase class for a Bayes Network classifier. Provides datastructures (network structure, conditional probability distributions, etc.) and facilities common to Bayes Network learning algorithms like K2 and B.\n\nFor more information see:\n\nhttp://www.cs.waikato.ac.nz/~remco/weka.pdf", bayesNet0.globalInfo());
      
      iCSSearchAlgorithm0.search(bayesNet0, instances1);
      assertFalse(iCSSearchAlgorithm0.getMarkovBlanketClassifier());
      assertEquals("When set to true (default), the initial network used for structure learning is a Naive Bayes Network, that is, a network with an arrow from the classifier node to each other node. When set to false, an empty network is used as initial network structure", iCSSearchAlgorithm0.initAsNaiveBayesTipText());
      assertEquals(2, iCSSearchAlgorithm0.getMaxCardinality());
      assertEquals("The score type determines the measure used to judge the quality of a network structure. It can be one of Bayes, BDeu, Minimum Description Length (MDL), Akaike Information Criterion (AIC), and Entropy.", iCSSearchAlgorithm0.scoreTypeTipText());
      assertEquals("When determining whether an edge exists a search is performed for a set Z that separates the nodes. MaxCardinality determines the maximum size of the set Z. This greatly influences the length of the search. Default value is 2.", iCSSearchAlgorithm0.maxCardinalityTipText());
      assertEquals("Set the maximum number of parents a node in the Bayes net can have. When initialized as Naive Bayes, setting this parameter to 1 results in a Naive Bayes classifier. When set to 2, a Tree Augmented Bayes Network (TAN) is learned, and when set >2, a Bayes Net Augmented Bayes Network (BAN) is learned. By setting it to a value much larger than the number of nodes in the network (the default of 100000 pretty much guarantees this), no restriction on the number of parents is enforced", iCSSearchAlgorithm0.maxNrOfParentsTipText());
      assertEquals("This Bayes Network learning algorithm uses conditional independence tests to find a skeleton, finds V-nodes and applies a set of rules to find the directions of the remaining arrows.", iCSSearchAlgorithm0.globalInfo());
      assertEquals("When set to true (default is false), after a network structure is learned a Markov Blanket correction is applied to the network structure. This ensures that all nodes in the network are part of the Markov blanket of the classifier node.", iCSSearchAlgorithm0.markovBlanketClassifierTipText());
      assertEquals("SearchAlgorithm\n", iCSSearchAlgorithm0.toString());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, instances1.size());
      assertEquals(0.0, instances1.sumOfWeights(), 0.01);
      assertEquals("@relation", instances1.relationName());
      assertEquals(0, instances1.numAttributes());
      assertEquals(0, instances1.numInstances());
      assertEquals((-1), instances1.classIndex());
      assertFalse(instances1.checkForStringAttributes());
      assertEquals("Select method used for searching network structures.", bayesNet0.searchAlgorithmTipText());
      assertEquals(2, bayesNet0.graphType());
      assertFalse(bayesNet0.getDebug());
      assertEquals("Set the name of a file in BIF XML format. A Bayes network learned from data can be compared with the Bayes network represented by the BIF file. Statistics calculated are o.a. the number of missing and extra arcs.", bayesNet0.BIFFileTipText());
      assertFalse(bayesNet0.getUseADTree());
      assertEquals("When ADTree (the data structure for increasing speed on counts, not to be confused with the classifier under the same name) is used learning time goes down typically. However, because ADTrees are memory intensive, memory problems may occur. Switching this option off makes the structure learning algorithms slower, and run with less memory. By default, ADTrees are used.", bayesNet0.useADTreeTipText());
      assertEquals("Select Estimator algorithm for finding the conditional probability tables of the Bayes Network.", bayesNet0.estimatorTipText());
      assertEquals("If set to true, classifier may output additional info to the console.", bayesNet0.debugTipText());
      assertEquals("Bayes Network learning using various search algorithms and quality measures.\nBase class for a Bayes Network classifier. Provides datastructures (network structure, conditional probability distributions, etc.) and facilities common to Bayes Network learning algorithms like K2 and B.\n\nFor more information see:\n\nhttp://www.cs.waikato.ac.nz/~remco/weka.pdf", bayesNet0.globalInfo());
      
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Attribute attribute0 = new Attribute(".bsi", linkedList0, 122);
      assertNotNull(attribute0);
      assertEquals(0, linkedList0.size());
      assertFalse(attribute0.isDate());
      assertFalse(attribute0.isString());
      assertFalse(attribute0.lowerNumericBoundIsOpen());
      assertEquals(1, attribute0.type());
      assertEquals(1.0, attribute0.weight(), 0.01);
      assertEquals(0, attribute0.ordering());
      assertFalse(attribute0.isRelationValued());
      assertEquals(122, attribute0.index());
      assertFalse(attribute0.isNumeric());
      assertEquals(0.0, attribute0.getLowerNumericBound(), 0.01);
      assertEquals(0.0, attribute0.getUpperNumericBound(), 0.01);
      assertTrue(attribute0.isNominal());
      assertEquals("", attribute0.getDateFormat());
      assertEquals(0, attribute0.numValues());
      assertFalse(attribute0.hasZeropoint());
      assertFalse(attribute0.isRegular());
      assertFalse(attribute0.isAveragable());
      assertFalse(attribute0.upperNumericBoundIsOpen());
      assertEquals(3, Attribute.DATE);
      assertEquals(1, Attribute.ORDERING_ORDERED);
      assertEquals(0, Attribute.ORDERING_SYMBOLIC);
      assertEquals(0, Attribute.NUMERIC);
      assertEquals(1, Attribute.NOMINAL);
      assertEquals(2, Attribute.ORDERING_MODULO);
      assertEquals(4, Attribute.RELATIONAL);
      assertEquals(2, Attribute.STRING);
      
      int int0 = attribute0.addStringValue("");
      assertEquals((-1), int0);
      assertEquals(0, linkedList0.size());
      assertFalse(attribute0.isDate());
      assertFalse(attribute0.isString());
      assertFalse(attribute0.lowerNumericBoundIsOpen());
      assertEquals(1, attribute0.type());
      assertEquals(1.0, attribute0.weight(), 0.01);
      assertEquals(0, attribute0.ordering());
      assertFalse(attribute0.isRelationValued());
      assertEquals(122, attribute0.index());
      assertFalse(attribute0.isNumeric());
      assertEquals(0.0, attribute0.getLowerNumericBound(), 0.01);
      assertEquals(0.0, attribute0.getUpperNumericBound(), 0.01);
      assertTrue(attribute0.isNominal());
      assertEquals("", attribute0.getDateFormat());
      assertEquals(0, attribute0.numValues());
      assertFalse(attribute0.hasZeropoint());
      assertFalse(attribute0.isRegular());
      assertFalse(attribute0.isAveragable());
      assertFalse(attribute0.upperNumericBoundIsOpen());
      assertEquals(3, Attribute.DATE);
      assertEquals(1, Attribute.ORDERING_ORDERED);
      assertEquals(0, Attribute.ORDERING_SYMBOLIC);
      assertEquals(0, Attribute.NUMERIC);
      assertEquals(1, Attribute.NOMINAL);
      assertEquals(2, Attribute.ORDERING_MODULO);
      assertEquals(4, Attribute.RELATIONAL);
      assertEquals(2, Attribute.STRING);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Attribute attribute1 = new Attribute("@data", linkedList0);
      assertNotNull(attribute1);
      assertFalse(attribute1.equals((Object)attribute0));
      assertEquals(0, linkedList0.size());
      assertEquals((-1), attribute1.index());
      assertFalse(attribute1.hasZeropoint());
      assertFalse(attribute1.lowerNumericBoundIsOpen());
      assertEquals(1, attribute1.type());
      assertEquals(0, attribute1.numValues());
      assertEquals(0.0, attribute1.getUpperNumericBound(), 0.01);
      assertFalse(attribute1.isRegular());
      assertEquals(0.0, attribute1.getLowerNumericBound(), 0.01);
      assertFalse(attribute1.isDate());
      assertEquals(0, attribute1.ordering());
      assertFalse(attribute1.isNumeric());
      assertFalse(attribute1.isString());
      assertFalse(attribute1.isRelationValued());
      assertTrue(attribute1.isNominal());
      assertEquals(1.0, attribute1.weight(), 0.01);
      assertEquals("", attribute1.getDateFormat());
      assertFalse(attribute1.upperNumericBoundIsOpen());
      assertFalse(attribute1.isAveragable());
      assertEquals(0, Attribute.ORDERING_SYMBOLIC);
      assertEquals(0, Attribute.NUMERIC);
      assertEquals(1, Attribute.ORDERING_ORDERED);
      assertEquals(2, Attribute.STRING);
      assertEquals(3, Attribute.DATE);
      assertEquals(2, Attribute.ORDERING_MODULO);
      assertEquals(1, Attribute.NOMINAL);
      assertEquals(4, Attribute.RELATIONAL);
      
      boolean boolean1 = arrayList0.add(attribute1);
      assertNotSame(attribute1, attribute0);
      assertFalse(attribute1.equals((Object)attribute0));
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertEquals(0, linkedList0.size());
      assertEquals((-1), attribute1.index());
      assertFalse(attribute1.hasZeropoint());
      assertFalse(attribute1.lowerNumericBoundIsOpen());
      assertEquals(1, attribute1.type());
      assertEquals(0, attribute1.numValues());
      assertEquals(0.0, attribute1.getUpperNumericBound(), 0.01);
      assertFalse(attribute1.isRegular());
      assertEquals(0.0, attribute1.getLowerNumericBound(), 0.01);
      assertFalse(attribute1.isDate());
      assertEquals(0, attribute1.ordering());
      assertFalse(attribute1.isNumeric());
      assertFalse(attribute1.isString());
      assertFalse(attribute1.isRelationValued());
      assertTrue(attribute1.isNominal());
      assertEquals(1.0, attribute1.weight(), 0.01);
      assertEquals("", attribute1.getDateFormat());
      assertFalse(attribute1.upperNumericBoundIsOpen());
      assertFalse(attribute1.isAveragable());
      assertEquals(0, Attribute.ORDERING_SYMBOLIC);
      assertEquals(0, Attribute.NUMERIC);
      assertEquals(1, Attribute.ORDERING_ORDERED);
      assertEquals(2, Attribute.STRING);
      assertEquals(3, Attribute.DATE);
      assertEquals(2, Attribute.ORDERING_MODULO);
      assertEquals(1, Attribute.NOMINAL);
      assertEquals(4, Attribute.RELATIONAL);
      
      boolean boolean2 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      
      boolean boolean3 = arrayList0.add(attribute0);
      assertNotSame(attribute0, attribute1);
      assertFalse(attribute0.equals((Object)attribute1));
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3);
      assertFalse(arrayList0.isEmpty());
      assertEquals(2, arrayList0.size());
      assertEquals(0, linkedList0.size());
      assertFalse(attribute0.isDate());
      assertFalse(attribute0.isString());
      assertFalse(attribute0.lowerNumericBoundIsOpen());
      assertEquals(1, attribute0.type());
      assertEquals(1.0, attribute0.weight(), 0.01);
      assertEquals(0, attribute0.ordering());
      assertFalse(attribute0.isRelationValued());
      assertEquals(122, attribute0.index());
      assertFalse(attribute0.isNumeric());
      assertEquals(0.0, attribute0.getLowerNumericBound(), 0.01);
      assertEquals(0.0, attribute0.getUpperNumericBound(), 0.01);
      assertTrue(attribute0.isNominal());
      assertEquals("", attribute0.getDateFormat());
      assertEquals(0, attribute0.numValues());
      assertFalse(attribute0.hasZeropoint());
      assertFalse(attribute0.isRegular());
      assertFalse(attribute0.isAveragable());
      assertFalse(attribute0.upperNumericBoundIsOpen());
      assertEquals(3, Attribute.DATE);
      assertEquals(1, Attribute.ORDERING_ORDERED);
      assertEquals(0, Attribute.ORDERING_SYMBOLIC);
      assertEquals(0, Attribute.NUMERIC);
      assertEquals(1, Attribute.NOMINAL);
      assertEquals(2, Attribute.ORDERING_MODULO);
      assertEquals(4, Attribute.RELATIONAL);
      assertEquals(2, Attribute.STRING);
      
      boolean[][] booleanArray0 = new boolean[10][9];
      ICSSearchAlgorithm.SeparationSet iCSSearchAlgorithm_SeparationSet0 = iCSSearchAlgorithm0.new SeparationSet();
      assertNotNull(iCSSearchAlgorithm_SeparationSet0);
      assertFalse(iCSSearchAlgorithm0.getMarkovBlanketClassifier());
      assertEquals("When set to true (default), the initial network used for structure learning is a Naive Bayes Network, that is, a network with an arrow from the classifier node to each other node. When set to false, an empty network is used as initial network structure", iCSSearchAlgorithm0.initAsNaiveBayesTipText());
      assertEquals(2, iCSSearchAlgorithm0.getMaxCardinality());
      assertEquals("The score type determines the measure used to judge the quality of a network structure. It can be one of Bayes, BDeu, Minimum Description Length (MDL), Akaike Information Criterion (AIC), and Entropy.", iCSSearchAlgorithm0.scoreTypeTipText());
      assertEquals("When determining whether an edge exists a search is performed for a set Z that separates the nodes. MaxCardinality determines the maximum size of the set Z. This greatly influences the length of the search. Default value is 2.", iCSSearchAlgorithm0.maxCardinalityTipText());
      assertEquals("Set the maximum number of parents a node in the Bayes net can have. When initialized as Naive Bayes, setting this parameter to 1 results in a Naive Bayes classifier. When set to 2, a Tree Augmented Bayes Network (TAN) is learned, and when set >2, a Bayes Net Augmented Bayes Network (BAN) is learned. By setting it to a value much larger than the number of nodes in the network (the default of 100000 pretty much guarantees this), no restriction on the number of parents is enforced", iCSSearchAlgorithm0.maxNrOfParentsTipText());
      assertEquals("This Bayes Network learning algorithm uses conditional independence tests to find a skeleton, finds V-nodes and applies a set of rules to find the directions of the remaining arrows.", iCSSearchAlgorithm0.globalInfo());
      assertEquals("When set to true (default is false), after a network structure is learned a Markov Blanket correction is applied to the network structure. This ensures that all nodes in the network are part of the Markov blanket of the classifier node.", iCSSearchAlgorithm0.markovBlanketClassifierTipText());
      assertEquals("SearchAlgorithm\n", iCSSearchAlgorithm0.toString());
      
      ICSSearchAlgorithm.SeparationSet[][] iCSSearchAlgorithm_SeparationSetArray0 = new ICSSearchAlgorithm.SeparationSet[3][3];
      boolean boolean4 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean4 == boolean0);
      assertFalse(boolean4 == boolean3);
      assertFalse(boolean4 == boolean1);
      assertTrue(boolean4 == boolean2);
      assertFalse(boolean4);
      
      ICSSearchAlgorithm.SeparationSet[] iCSSearchAlgorithm_SeparationSetArray1 = new ICSSearchAlgorithm.SeparationSet[13];
      iCSSearchAlgorithm_SeparationSetArray1[1] = iCSSearchAlgorithm_SeparationSet0;
      iCSSearchAlgorithm_SeparationSetArray1[4] = iCSSearchAlgorithm_SeparationSet0;
      iCSSearchAlgorithm_SeparationSetArray1[1] = iCSSearchAlgorithm_SeparationSet0;
      iCSSearchAlgorithm_SeparationSetArray1[7] = iCSSearchAlgorithm_SeparationSet0;
      iCSSearchAlgorithm_SeparationSetArray0[0] = iCSSearchAlgorithm_SeparationSetArray1;
      iCSSearchAlgorithm_SeparationSetArray0[2] = iCSSearchAlgorithm_SeparationSetArray0[1];
      iCSSearchAlgorithm0.setOptions((String[]) null);
      assertFalse(iCSSearchAlgorithm0.getMarkovBlanketClassifier());
      assertEquals("When set to true (default), the initial network used for structure learning is a Naive Bayes Network, that is, a network with an arrow from the classifier node to each other node. When set to false, an empty network is used as initial network structure", iCSSearchAlgorithm0.initAsNaiveBayesTipText());
      assertEquals(2, iCSSearchAlgorithm0.getMaxCardinality());
      assertEquals("The score type determines the measure used to judge the quality of a network structure. It can be one of Bayes, BDeu, Minimum Description Length (MDL), Akaike Information Criterion (AIC), and Entropy.", iCSSearchAlgorithm0.scoreTypeTipText());
      assertEquals("When determining whether an edge exists a search is performed for a set Z that separates the nodes. MaxCardinality determines the maximum size of the set Z. This greatly influences the length of the search. Default value is 2.", iCSSearchAlgorithm0.maxCardinalityTipText());
      assertEquals("Set the maximum number of parents a node in the Bayes net can have. When initialized as Naive Bayes, setting this parameter to 1 results in a Naive Bayes classifier. When set to 2, a Tree Augmented Bayes Network (TAN) is learned, and when set >2, a Bayes Net Augmented Bayes Network (BAN) is learned. By setting it to a value much larger than the number of nodes in the network (the default of 100000 pretty much guarantees this), no restriction on the number of parents is enforced", iCSSearchAlgorithm0.maxNrOfParentsTipText());
      assertEquals("This Bayes Network learning algorithm uses conditional independence tests to find a skeleton, finds V-nodes and applies a set of rules to find the directions of the remaining arrows.", iCSSearchAlgorithm0.globalInfo());
      assertEquals("When set to true (default is false), after a network structure is learned a Markov Blanket correction is applied to the network structure. This ensures that all nodes in the network are part of the Markov blanket of the classifier node.", iCSSearchAlgorithm0.markovBlanketClassifierTipText());
      assertEquals("SearchAlgorithm\n", iCSSearchAlgorithm0.toString());
      
      iCSSearchAlgorithm0.calcVeeNodes(booleanArray0, booleanArray0, iCSSearchAlgorithm_SeparationSetArray0);
      assertFalse(iCSSearchAlgorithm0.getMarkovBlanketClassifier());
      assertEquals("When set to true (default), the initial network used for structure learning is a Naive Bayes Network, that is, a network with an arrow from the classifier node to each other node. When set to false, an empty network is used as initial network structure", iCSSearchAlgorithm0.initAsNaiveBayesTipText());
      assertEquals(2, iCSSearchAlgorithm0.getMaxCardinality());
      assertEquals("The score type determines the measure used to judge the quality of a network structure. It can be one of Bayes, BDeu, Minimum Description Length (MDL), Akaike Information Criterion (AIC), and Entropy.", iCSSearchAlgorithm0.scoreTypeTipText());
      assertEquals("When determining whether an edge exists a search is performed for a set Z that separates the nodes. MaxCardinality determines the maximum size of the set Z. This greatly influences the length of the search. Default value is 2.", iCSSearchAlgorithm0.maxCardinalityTipText());
      assertEquals("Set the maximum number of parents a node in the Bayes net can have. When initialized as Naive Bayes, setting this parameter to 1 results in a Naive Bayes classifier. When set to 2, a Tree Augmented Bayes Network (TAN) is learned, and when set >2, a Bayes Net Augmented Bayes Network (BAN) is learned. By setting it to a value much larger than the number of nodes in the network (the default of 100000 pretty much guarantees this), no restriction on the number of parents is enforced", iCSSearchAlgorithm0.maxNrOfParentsTipText());
      assertEquals("This Bayes Network learning algorithm uses conditional independence tests to find a skeleton, finds V-nodes and applies a set of rules to find the directions of the remaining arrows.", iCSSearchAlgorithm0.globalInfo());
      assertEquals("When set to true (default is false), after a network structure is learned a Markov Blanket correction is applied to the network structure. This ensures that all nodes in the network are part of the Markov blanket of the classifier node.", iCSSearchAlgorithm0.markovBlanketClassifierTipText());
      assertEquals("SearchAlgorithm\n", iCSSearchAlgorithm0.toString());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ICSSearchAlgorithm iCSSearchAlgorithm0 = new ICSSearchAlgorithm();
      assertNotNull(iCSSearchAlgorithm0);
      assertEquals("Set the maximum number of parents a node in the Bayes net can have. When initialized as Naive Bayes, setting this parameter to 1 results in a Naive Bayes classifier. When set to 2, a Tree Augmented Bayes Network (TAN) is learned, and when set >2, a Bayes Net Augmented Bayes Network (BAN) is learned. By setting it to a value much larger than the number of nodes in the network (the default of 100000 pretty much guarantees this), no restriction on the number of parents is enforced", iCSSearchAlgorithm0.maxNrOfParentsTipText());
      assertEquals("When determining whether an edge exists a search is performed for a set Z that separates the nodes. MaxCardinality determines the maximum size of the set Z. This greatly influences the length of the search. Default value is 2.", iCSSearchAlgorithm0.maxCardinalityTipText());
      assertEquals("When set to true (default is false), after a network structure is learned a Markov Blanket correction is applied to the network structure. This ensures that all nodes in the network are part of the Markov blanket of the classifier node.", iCSSearchAlgorithm0.markovBlanketClassifierTipText());
      assertEquals("This Bayes Network learning algorithm uses conditional independence tests to find a skeleton, finds V-nodes and applies a set of rules to find the directions of the remaining arrows.", iCSSearchAlgorithm0.globalInfo());
      assertEquals(2, iCSSearchAlgorithm0.getMaxCardinality());
      assertEquals("When set to true (default), the initial network used for structure learning is a Naive Bayes Network, that is, a network with an arrow from the classifier node to each other node. When set to false, an empty network is used as initial network structure", iCSSearchAlgorithm0.initAsNaiveBayesTipText());
      assertFalse(iCSSearchAlgorithm0.getMarkovBlanketClassifier());
      assertEquals("The score type determines the measure used to judge the quality of a network structure. It can be one of Bayes, BDeu, Minimum Description Length (MDL), Akaike Information Criterion (AIC), and Entropy.", iCSSearchAlgorithm0.scoreTypeTipText());
      assertEquals("SearchAlgorithm\n", iCSSearchAlgorithm0.toString());
      
      Instances instances0 = iCSSearchAlgorithm0.m_instances;
      assertNull(instances0);
      
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      Spliterator<Attribute> spliterator0 = arrayList0.spliterator();
      assertNotNull(spliterator0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      Instances instances1 = new Instances("@relation", arrayList0, 98);
      assertNotNull(instances1);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals("@relation", instances1.relationName());
      assertEquals(0, instances1.numAttributes());
      assertEquals((-1), instances1.classIndex());
      assertEquals(0, instances1.size());
      assertEquals(0.0, instances1.sumOfWeights(), 0.01);
      assertEquals(0, instances1.numInstances());
      assertFalse(instances1.checkForStringAttributes());
      
      BayesNet bayesNet0 = new BayesNet();
      assertNotNull(bayesNet0);
      assertFalse(bayesNet0.getDebug());
      assertEquals(2, bayesNet0.graphType());
      assertEquals("Bayes Network learning using various search algorithms and quality measures.\nBase class for a Bayes Network classifier. Provides datastructures (network structure, conditional probability distributions, etc.) and facilities common to Bayes Network learning algorithms like K2 and B.\n\nFor more information see:\n\nhttp://www.cs.waikato.ac.nz/~remco/weka.pdf", bayesNet0.globalInfo());
      assertEquals("If set to true, classifier may output additional info to the console.", bayesNet0.debugTipText());
      assertFalse(bayesNet0.getUseADTree());
      assertEquals("When ADTree (the data structure for increasing speed on counts, not to be confused with the classifier under the same name) is used learning time goes down typically. However, because ADTrees are memory intensive, memory problems may occur. Switching this option off makes the structure learning algorithms slower, and run with less memory. By default, ADTrees are used.", bayesNet0.useADTreeTipText());
      assertEquals("Set the name of a file in BIF XML format. A Bayes network learned from data can be compared with the Bayes network represented by the BIF file. Statistics calculated are o.a. the number of missing and extra arcs.", bayesNet0.BIFFileTipText());
      assertEquals("Select method used for searching network structures.", bayesNet0.searchAlgorithmTipText());
      assertEquals("Select Estimator algorithm for finding the conditional probability tables of the Bayes Network.", bayesNet0.estimatorTipText());
      
      iCSSearchAlgorithm0.search(bayesNet0, instances1);
      assertEquals("Set the maximum number of parents a node in the Bayes net can have. When initialized as Naive Bayes, setting this parameter to 1 results in a Naive Bayes classifier. When set to 2, a Tree Augmented Bayes Network (TAN) is learned, and when set >2, a Bayes Net Augmented Bayes Network (BAN) is learned. By setting it to a value much larger than the number of nodes in the network (the default of 100000 pretty much guarantees this), no restriction on the number of parents is enforced", iCSSearchAlgorithm0.maxNrOfParentsTipText());
      assertEquals("When determining whether an edge exists a search is performed for a set Z that separates the nodes. MaxCardinality determines the maximum size of the set Z. This greatly influences the length of the search. Default value is 2.", iCSSearchAlgorithm0.maxCardinalityTipText());
      assertEquals("When set to true (default is false), after a network structure is learned a Markov Blanket correction is applied to the network structure. This ensures that all nodes in the network are part of the Markov blanket of the classifier node.", iCSSearchAlgorithm0.markovBlanketClassifierTipText());
      assertEquals("This Bayes Network learning algorithm uses conditional independence tests to find a skeleton, finds V-nodes and applies a set of rules to find the directions of the remaining arrows.", iCSSearchAlgorithm0.globalInfo());
      assertEquals(2, iCSSearchAlgorithm0.getMaxCardinality());
      assertEquals("When set to true (default), the initial network used for structure learning is a Naive Bayes Network, that is, a network with an arrow from the classifier node to each other node. When set to false, an empty network is used as initial network structure", iCSSearchAlgorithm0.initAsNaiveBayesTipText());
      assertFalse(iCSSearchAlgorithm0.getMarkovBlanketClassifier());
      assertEquals("The score type determines the measure used to judge the quality of a network structure. It can be one of Bayes, BDeu, Minimum Description Length (MDL), Akaike Information Criterion (AIC), and Entropy.", iCSSearchAlgorithm0.scoreTypeTipText());
      assertEquals("SearchAlgorithm\n", iCSSearchAlgorithm0.toString());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals("@relation", instances1.relationName());
      assertEquals(0, instances1.numAttributes());
      assertEquals((-1), instances1.classIndex());
      assertEquals(0, instances1.size());
      assertEquals(0.0, instances1.sumOfWeights(), 0.01);
      assertEquals(0, instances1.numInstances());
      assertFalse(instances1.checkForStringAttributes());
      assertFalse(bayesNet0.getDebug());
      assertEquals(2, bayesNet0.graphType());
      assertEquals("Bayes Network learning using various search algorithms and quality measures.\nBase class for a Bayes Network classifier. Provides datastructures (network structure, conditional probability distributions, etc.) and facilities common to Bayes Network learning algorithms like K2 and B.\n\nFor more information see:\n\nhttp://www.cs.waikato.ac.nz/~remco/weka.pdf", bayesNet0.globalInfo());
      assertEquals("If set to true, classifier may output additional info to the console.", bayesNet0.debugTipText());
      assertFalse(bayesNet0.getUseADTree());
      assertEquals("When ADTree (the data structure for increasing speed on counts, not to be confused with the classifier under the same name) is used learning time goes down typically. However, because ADTrees are memory intensive, memory problems may occur. Switching this option off makes the structure learning algorithms slower, and run with less memory. By default, ADTrees are used.", bayesNet0.useADTreeTipText());
      assertEquals("Set the name of a file in BIF XML format. A Bayes network learned from data can be compared with the Bayes network represented by the BIF file. Statistics calculated are o.a. the number of missing and extra arcs.", bayesNet0.BIFFileTipText());
      assertEquals("Select method used for searching network structures.", bayesNet0.searchAlgorithmTipText());
      assertEquals("Select Estimator algorithm for finding the conditional probability tables of the Bayes Network.", bayesNet0.estimatorTipText());
      
      Attribute attribute0 = new Attribute("@data");
      assertNotNull(attribute0);
      assertTrue(attribute0.hasZeropoint());
      assertEquals((-1), attribute0.index());
      assertFalse(attribute0.lowerNumericBoundIsOpen());
      assertEquals(0, attribute0.numValues());
      assertEquals(0, attribute0.type());
      assertTrue(attribute0.isRegular());
      assertFalse(attribute0.upperNumericBoundIsOpen());
      assertEquals(Double.POSITIVE_INFINITY, attribute0.getUpperNumericBound(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, attribute0.getLowerNumericBound(), 0.01);
      assertEquals(1, attribute0.ordering());
      assertTrue(attribute0.isNumeric());
      assertFalse(attribute0.isDate());
      assertEquals("", attribute0.getDateFormat());
      assertFalse(attribute0.isRelationValued());
      assertFalse(attribute0.isNominal());
      assertTrue(attribute0.isAveragable());
      assertEquals(1.0, attribute0.weight(), 0.01);
      assertFalse(attribute0.isString());
      assertEquals(4, Attribute.RELATIONAL);
      assertEquals(1, Attribute.ORDERING_ORDERED);
      assertEquals(0, Attribute.NUMERIC);
      assertEquals(0, Attribute.ORDERING_SYMBOLIC);
      assertEquals(2, Attribute.STRING);
      assertEquals(3, Attribute.DATE);
      assertEquals(2, Attribute.ORDERING_MODULO);
      assertEquals(1, Attribute.NOMINAL);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      boolean boolean1 = arrayList0.add(attribute0);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(attribute0.hasZeropoint());
      assertEquals((-1), attribute0.index());
      assertFalse(attribute0.lowerNumericBoundIsOpen());
      assertEquals(0, attribute0.numValues());
      assertEquals(0, attribute0.type());
      assertTrue(attribute0.isRegular());
      assertFalse(attribute0.upperNumericBoundIsOpen());
      assertEquals(Double.POSITIVE_INFINITY, attribute0.getUpperNumericBound(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, attribute0.getLowerNumericBound(), 0.01);
      assertEquals(1, attribute0.ordering());
      assertTrue(attribute0.isNumeric());
      assertFalse(attribute0.isDate());
      assertEquals("", attribute0.getDateFormat());
      assertFalse(attribute0.isRelationValued());
      assertFalse(attribute0.isNominal());
      assertTrue(attribute0.isAveragable());
      assertEquals(1.0, attribute0.weight(), 0.01);
      assertFalse(attribute0.isString());
      assertEquals(4, Attribute.RELATIONAL);
      assertEquals(1, Attribute.ORDERING_ORDERED);
      assertEquals(0, Attribute.NUMERIC);
      assertEquals(0, Attribute.ORDERING_SYMBOLIC);
      assertEquals(2, Attribute.STRING);
      assertEquals(3, Attribute.DATE);
      assertEquals(2, Attribute.ORDERING_MODULO);
      assertEquals(1, Attribute.NOMINAL);
      
      boolean[][] booleanArray0 = new boolean[10][9];
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      iCSSearchAlgorithm0.m_BayesNet = bayesNet0;
      assertEquals("Set the maximum number of parents a node in the Bayes net can have. When initialized as Naive Bayes, setting this parameter to 1 results in a Naive Bayes classifier. When set to 2, a Tree Augmented Bayes Network (TAN) is learned, and when set >2, a Bayes Net Augmented Bayes Network (BAN) is learned. By setting it to a value much larger than the number of nodes in the network (the default of 100000 pretty much guarantees this), no restriction on the number of parents is enforced", iCSSearchAlgorithm0.maxNrOfParentsTipText());
      assertEquals("When determining whether an edge exists a search is performed for a set Z that separates the nodes. MaxCardinality determines the maximum size of the set Z. This greatly influences the length of the search. Default value is 2.", iCSSearchAlgorithm0.maxCardinalityTipText());
      assertEquals("When set to true (default is false), after a network structure is learned a Markov Blanket correction is applied to the network structure. This ensures that all nodes in the network are part of the Markov blanket of the classifier node.", iCSSearchAlgorithm0.markovBlanketClassifierTipText());
      assertEquals("This Bayes Network learning algorithm uses conditional independence tests to find a skeleton, finds V-nodes and applies a set of rules to find the directions of the remaining arrows.", iCSSearchAlgorithm0.globalInfo());
      assertEquals(2, iCSSearchAlgorithm0.getMaxCardinality());
      assertEquals("When set to true (default), the initial network used for structure learning is a Naive Bayes Network, that is, a network with an arrow from the classifier node to each other node. When set to false, an empty network is used as initial network structure", iCSSearchAlgorithm0.initAsNaiveBayesTipText());
      assertFalse(iCSSearchAlgorithm0.getMarkovBlanketClassifier());
      assertEquals("The score type determines the measure used to judge the quality of a network structure. It can be one of Bayes, BDeu, Minimum Description Length (MDL), Akaike Information Criterion (AIC), and Entropy.", iCSSearchAlgorithm0.scoreTypeTipText());
      assertEquals("SearchAlgorithm\n", iCSSearchAlgorithm0.toString());
      assertFalse(bayesNet0.getDebug());
      assertEquals(2, bayesNet0.graphType());
      assertEquals("Bayes Network learning using various search algorithms and quality measures.\nBase class for a Bayes Network classifier. Provides datastructures (network structure, conditional probability distributions, etc.) and facilities common to Bayes Network learning algorithms like K2 and B.\n\nFor more information see:\n\nhttp://www.cs.waikato.ac.nz/~remco/weka.pdf", bayesNet0.globalInfo());
      assertEquals("If set to true, classifier may output additional info to the console.", bayesNet0.debugTipText());
      assertFalse(bayesNet0.getUseADTree());
      assertEquals("When ADTree (the data structure for increasing speed on counts, not to be confused with the classifier under the same name) is used learning time goes down typically. However, because ADTrees are memory intensive, memory problems may occur. Switching this option off makes the structure learning algorithms slower, and run with less memory. By default, ADTrees are used.", bayesNet0.useADTreeTipText());
      assertEquals("Set the name of a file in BIF XML format. A Bayes network learned from data can be compared with the Bayes network represented by the BIF file. Statistics calculated are o.a. the number of missing and extra arcs.", bayesNet0.BIFFileTipText());
      assertEquals("Select method used for searching network structures.", bayesNet0.searchAlgorithmTipText());
      assertEquals("Select Estimator algorithm for finding the conditional probability tables of the Bayes Network.", bayesNet0.estimatorTipText());
      assertFalse(iCSSearchAlgorithm0.m_BayesNet.getDebug());
      assertEquals("Select method used for searching network structures.", iCSSearchAlgorithm0.m_BayesNet.searchAlgorithmTipText());
      assertFalse(iCSSearchAlgorithm0.m_BayesNet.getUseADTree());
      assertEquals("When ADTree (the data structure for increasing speed on counts, not to be confused with the classifier under the same name) is used learning time goes down typically. However, because ADTrees are memory intensive, memory problems may occur. Switching this option off makes the structure learning algorithms slower, and run with less memory. By default, ADTrees are used.", iCSSearchAlgorithm0.m_BayesNet.useADTreeTipText());
      assertEquals(2, iCSSearchAlgorithm0.m_BayesNet.graphType());
      assertEquals("Set the name of a file in BIF XML format. A Bayes network learned from data can be compared with the Bayes network represented by the BIF file. Statistics calculated are o.a. the number of missing and extra arcs.", iCSSearchAlgorithm0.m_BayesNet.BIFFileTipText());
      assertEquals("Select Estimator algorithm for finding the conditional probability tables of the Bayes Network.", iCSSearchAlgorithm0.m_BayesNet.estimatorTipText());
      assertEquals("If set to true, classifier may output additional info to the console.", iCSSearchAlgorithm0.m_BayesNet.debugTipText());
      assertEquals("Bayes Network learning using various search algorithms and quality measures.\nBase class for a Bayes Network classifier. Provides datastructures (network structure, conditional probability distributions, etc.) and facilities common to Bayes Network learning algorithms like K2 and B.\n\nFor more information see:\n\nhttp://www.cs.waikato.ac.nz/~remco/weka.pdf", iCSSearchAlgorithm0.m_BayesNet.globalInfo());
      
      iCSSearchAlgorithm0.setMarkovBlanketClassifier(true);
      assertEquals("Set the maximum number of parents a node in the Bayes net can have. When initialized as Naive Bayes, setting this parameter to 1 results in a Naive Bayes classifier. When set to 2, a Tree Augmented Bayes Network (TAN) is learned, and when set >2, a Bayes Net Augmented Bayes Network (BAN) is learned. By setting it to a value much larger than the number of nodes in the network (the default of 100000 pretty much guarantees this), no restriction on the number of parents is enforced", iCSSearchAlgorithm0.maxNrOfParentsTipText());
      assertEquals("When determining whether an edge exists a search is performed for a set Z that separates the nodes. MaxCardinality determines the maximum size of the set Z. This greatly influences the length of the search. Default value is 2.", iCSSearchAlgorithm0.maxCardinalityTipText());
      assertEquals("When set to true (default is false), after a network structure is learned a Markov Blanket correction is applied to the network structure. This ensures that all nodes in the network are part of the Markov blanket of the classifier node.", iCSSearchAlgorithm0.markovBlanketClassifierTipText());
      assertEquals("This Bayes Network learning algorithm uses conditional independence tests to find a skeleton, finds V-nodes and applies a set of rules to find the directions of the remaining arrows.", iCSSearchAlgorithm0.globalInfo());
      assertEquals(2, iCSSearchAlgorithm0.getMaxCardinality());
      assertEquals("When set to true (default), the initial network used for structure learning is a Naive Bayes Network, that is, a network with an arrow from the classifier node to each other node. When set to false, an empty network is used as initial network structure", iCSSearchAlgorithm0.initAsNaiveBayesTipText());
      assertEquals("The score type determines the measure used to judge the quality of a network structure. It can be one of Bayes, BDeu, Minimum Description Length (MDL), Akaike Information Criterion (AIC), and Entropy.", iCSSearchAlgorithm0.scoreTypeTipText());
      assertEquals("SearchAlgorithm\n", iCSSearchAlgorithm0.toString());
      assertTrue(iCSSearchAlgorithm0.getMarkovBlanketClassifier());
      
      boolean boolean2 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
      
      boolean boolean3 = arrayList0.add(attribute0);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3);
      assertEquals(2, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(attribute0.hasZeropoint());
      assertEquals((-1), attribute0.index());
      assertFalse(attribute0.lowerNumericBoundIsOpen());
      assertEquals(0, attribute0.numValues());
      assertEquals(0, attribute0.type());
      assertTrue(attribute0.isRegular());
      assertFalse(attribute0.upperNumericBoundIsOpen());
      assertEquals(Double.POSITIVE_INFINITY, attribute0.getUpperNumericBound(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, attribute0.getLowerNumericBound(), 0.01);
      assertEquals(1, attribute0.ordering());
      assertTrue(attribute0.isNumeric());
      assertFalse(attribute0.isDate());
      assertEquals("", attribute0.getDateFormat());
      assertFalse(attribute0.isRelationValued());
      assertFalse(attribute0.isNominal());
      assertTrue(attribute0.isAveragable());
      assertEquals(1.0, attribute0.weight(), 0.01);
      assertFalse(attribute0.isString());
      assertEquals(4, Attribute.RELATIONAL);
      assertEquals(1, Attribute.ORDERING_ORDERED);
      assertEquals(0, Attribute.NUMERIC);
      assertEquals(0, Attribute.ORDERING_SYMBOLIC);
      assertEquals(2, Attribute.STRING);
      assertEquals(3, Attribute.DATE);
      assertEquals(2, Attribute.ORDERING_MODULO);
      assertEquals(1, Attribute.NOMINAL);
      
      ICSSearchAlgorithm.SeparationSet iCSSearchAlgorithm_SeparationSet0 = iCSSearchAlgorithm0.new SeparationSet();
      assertNotNull(iCSSearchAlgorithm_SeparationSet0);
      assertEquals("Set the maximum number of parents a node in the Bayes net can have. When initialized as Naive Bayes, setting this parameter to 1 results in a Naive Bayes classifier. When set to 2, a Tree Augmented Bayes Network (TAN) is learned, and when set >2, a Bayes Net Augmented Bayes Network (BAN) is learned. By setting it to a value much larger than the number of nodes in the network (the default of 100000 pretty much guarantees this), no restriction on the number of parents is enforced", iCSSearchAlgorithm0.maxNrOfParentsTipText());
      assertEquals("When determining whether an edge exists a search is performed for a set Z that separates the nodes. MaxCardinality determines the maximum size of the set Z. This greatly influences the length of the search. Default value is 2.", iCSSearchAlgorithm0.maxCardinalityTipText());
      assertEquals("When set to true (default is false), after a network structure is learned a Markov Blanket correction is applied to the network structure. This ensures that all nodes in the network are part of the Markov blanket of the classifier node.", iCSSearchAlgorithm0.markovBlanketClassifierTipText());
      assertEquals("This Bayes Network learning algorithm uses conditional independence tests to find a skeleton, finds V-nodes and applies a set of rules to find the directions of the remaining arrows.", iCSSearchAlgorithm0.globalInfo());
      assertEquals(2, iCSSearchAlgorithm0.getMaxCardinality());
      assertEquals("When set to true (default), the initial network used for structure learning is a Naive Bayes Network, that is, a network with an arrow from the classifier node to each other node. When set to false, an empty network is used as initial network structure", iCSSearchAlgorithm0.initAsNaiveBayesTipText());
      assertEquals("The score type determines the measure used to judge the quality of a network structure. It can be one of Bayes, BDeu, Minimum Description Length (MDL), Akaike Information Criterion (AIC), and Entropy.", iCSSearchAlgorithm0.scoreTypeTipText());
      assertEquals("SearchAlgorithm\n", iCSSearchAlgorithm0.toString());
      assertTrue(iCSSearchAlgorithm0.getMarkovBlanketClassifier());
      
      boolean[][] booleanArray1 = new boolean[1][8];
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      boolean[] booleanArray2 = new boolean[10];
      iCSSearchAlgorithm_SeparationSet0.m_set = iCSSearchAlgorithm_SeparationSet0.m_set;
      assertEquals("Set the maximum number of parents a node in the Bayes net can have. When initialized as Naive Bayes, setting this parameter to 1 results in a Naive Bayes classifier. When set to 2, a Tree Augmented Bayes Network (TAN) is learned, and when set >2, a Bayes Net Augmented Bayes Network (BAN) is learned. By setting it to a value much larger than the number of nodes in the network (the default of 100000 pretty much guarantees this), no restriction on the number of parents is enforced", iCSSearchAlgorithm0.maxNrOfParentsTipText());
      assertEquals("When determining whether an edge exists a search is performed for a set Z that separates the nodes. MaxCardinality determines the maximum size of the set Z. This greatly influences the length of the search. Default value is 2.", iCSSearchAlgorithm0.maxCardinalityTipText());
      assertEquals("When set to true (default is false), after a network structure is learned a Markov Blanket correction is applied to the network structure. This ensures that all nodes in the network are part of the Markov blanket of the classifier node.", iCSSearchAlgorithm0.markovBlanketClassifierTipText());
      assertEquals("This Bayes Network learning algorithm uses conditional independence tests to find a skeleton, finds V-nodes and applies a set of rules to find the directions of the remaining arrows.", iCSSearchAlgorithm0.globalInfo());
      assertEquals(2, iCSSearchAlgorithm0.getMaxCardinality());
      assertEquals("When set to true (default), the initial network used for structure learning is a Naive Bayes Network, that is, a network with an arrow from the classifier node to each other node. When set to false, an empty network is used as initial network structure", iCSSearchAlgorithm0.initAsNaiveBayesTipText());
      assertEquals("The score type determines the measure used to judge the quality of a network structure. It can be one of Bayes, BDeu, Minimum Description Length (MDL), Akaike Information Criterion (AIC), and Entropy.", iCSSearchAlgorithm0.scoreTypeTipText());
      assertEquals("SearchAlgorithm\n", iCSSearchAlgorithm0.toString());
      assertTrue(iCSSearchAlgorithm0.getMarkovBlanketClassifier());
      
      booleanArray2[1] = true;
      booleanArray1[0] = booleanArray2;
      // Undeclared exception!
      try { 
        iCSSearchAlgorithm0.calcArcDirections(booleanArray1, booleanArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("weka.classifiers.bayes.net.search.ci.ICSSearchAlgorithm", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      ICSSearchAlgorithm iCSSearchAlgorithm0 = new ICSSearchAlgorithm();
      assertNotNull(iCSSearchAlgorithm0);
      assertEquals("SearchAlgorithm\n", iCSSearchAlgorithm0.toString());
      assertEquals("The score type determines the measure used to judge the quality of a network structure. It can be one of Bayes, BDeu, Minimum Description Length (MDL), Akaike Information Criterion (AIC), and Entropy.", iCSSearchAlgorithm0.scoreTypeTipText());
      assertEquals("When set to true (default is false), after a network structure is learned a Markov Blanket correction is applied to the network structure. This ensures that all nodes in the network are part of the Markov blanket of the classifier node.", iCSSearchAlgorithm0.markovBlanketClassifierTipText());
      assertEquals("This Bayes Network learning algorithm uses conditional independence tests to find a skeleton, finds V-nodes and applies a set of rules to find the directions of the remaining arrows.", iCSSearchAlgorithm0.globalInfo());
      assertEquals("When determining whether an edge exists a search is performed for a set Z that separates the nodes. MaxCardinality determines the maximum size of the set Z. This greatly influences the length of the search. Default value is 2.", iCSSearchAlgorithm0.maxCardinalityTipText());
      assertFalse(iCSSearchAlgorithm0.getMarkovBlanketClassifier());
      assertEquals("When set to true (default), the initial network used for structure learning is a Naive Bayes Network, that is, a network with an arrow from the classifier node to each other node. When set to false, an empty network is used as initial network structure", iCSSearchAlgorithm0.initAsNaiveBayesTipText());
      assertEquals("Set the maximum number of parents a node in the Bayes net can have. When initialized as Naive Bayes, setting this parameter to 1 results in a Naive Bayes classifier. When set to 2, a Tree Augmented Bayes Network (TAN) is learned, and when set >2, a Bayes Net Augmented Bayes Network (BAN) is learned. By setting it to a value much larger than the number of nodes in the network (the default of 100000 pretty much guarantees this), no restriction on the number of parents is enforced", iCSSearchAlgorithm0.maxNrOfParentsTipText());
      assertEquals(2, iCSSearchAlgorithm0.getMaxCardinality());
      
      Instances instances0 = iCSSearchAlgorithm0.m_instances;
      assertNull(instances0);
      
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      Instances instances1 = new Instances("@relation", arrayList0, 124);
      assertNotNull(instances1);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertFalse(instances1.checkForStringAttributes());
      assertEquals((-1), instances1.classIndex());
      assertEquals(0, instances1.size());
      assertEquals(0.0, instances1.sumOfWeights(), 0.01);
      assertEquals("@relation", instances1.relationName());
      assertEquals(0, instances1.numInstances());
      assertEquals(0, instances1.numAttributes());
      
      String string0 = instances1.toString();
      assertNotNull(string0);
      assertEquals("@relation @relation\n\n\n@data\n", string0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertFalse(instances1.checkForStringAttributes());
      assertEquals((-1), instances1.classIndex());
      assertEquals(0, instances1.size());
      assertEquals(0.0, instances1.sumOfWeights(), 0.01);
      assertEquals("@relation", instances1.relationName());
      assertEquals(0, instances1.numInstances());
      assertEquals(0, instances1.numAttributes());
      
      BayesNet bayesNet0 = iCSSearchAlgorithm0.m_BayesNet;
      assertNull(bayesNet0);
      
      iCSSearchAlgorithm0.search((BayesNet) null, instances1);
      assertEquals("SearchAlgorithm\n", iCSSearchAlgorithm0.toString());
      assertEquals("The score type determines the measure used to judge the quality of a network structure. It can be one of Bayes, BDeu, Minimum Description Length (MDL), Akaike Information Criterion (AIC), and Entropy.", iCSSearchAlgorithm0.scoreTypeTipText());
      assertEquals("When set to true (default is false), after a network structure is learned a Markov Blanket correction is applied to the network structure. This ensures that all nodes in the network are part of the Markov blanket of the classifier node.", iCSSearchAlgorithm0.markovBlanketClassifierTipText());
      assertEquals("This Bayes Network learning algorithm uses conditional independence tests to find a skeleton, finds V-nodes and applies a set of rules to find the directions of the remaining arrows.", iCSSearchAlgorithm0.globalInfo());
      assertEquals("When determining whether an edge exists a search is performed for a set Z that separates the nodes. MaxCardinality determines the maximum size of the set Z. This greatly influences the length of the search. Default value is 2.", iCSSearchAlgorithm0.maxCardinalityTipText());
      assertFalse(iCSSearchAlgorithm0.getMarkovBlanketClassifier());
      assertEquals("When set to true (default), the initial network used for structure learning is a Naive Bayes Network, that is, a network with an arrow from the classifier node to each other node. When set to false, an empty network is used as initial network structure", iCSSearchAlgorithm0.initAsNaiveBayesTipText());
      assertEquals("Set the maximum number of parents a node in the Bayes net can have. When initialized as Naive Bayes, setting this parameter to 1 results in a Naive Bayes classifier. When set to 2, a Tree Augmented Bayes Network (TAN) is learned, and when set >2, a Bayes Net Augmented Bayes Network (BAN) is learned. By setting it to a value much larger than the number of nodes in the network (the default of 100000 pretty much guarantees this), no restriction on the number of parents is enforced", iCSSearchAlgorithm0.maxNrOfParentsTipText());
      assertEquals(2, iCSSearchAlgorithm0.getMaxCardinality());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertFalse(instances1.checkForStringAttributes());
      assertEquals((-1), instances1.classIndex());
      assertEquals(0, instances1.size());
      assertEquals(0.0, instances1.sumOfWeights(), 0.01);
      assertEquals("@relation", instances1.relationName());
      assertEquals(0, instances1.numInstances());
      assertEquals(0, instances1.numAttributes());
      
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      assertNotNull(fileSystemHandling1);
      assertFalse(fileSystemHandling1.equals((Object)fileSystemHandling0));
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Attribute attribute0 = new Attribute((String) null, "", 124);
      assertNotNull(attribute0);
      assertFalse(attribute0.isRelationValued());
      assertEquals(0, attribute0.numValues());
      assertFalse(attribute0.hasZeropoint());
      assertFalse(attribute0.lowerNumericBoundIsOpen());
      assertEquals(3, attribute0.type());
      assertFalse(attribute0.isAveragable());
      assertTrue(attribute0.isRegular());
      assertTrue(attribute0.isDate());
      assertFalse(attribute0.upperNumericBoundIsOpen());
      assertEquals("", attribute0.getDateFormat());
      assertEquals(1.0, attribute0.weight(), 0.01);
      assertFalse(attribute0.isNominal());
      assertTrue(attribute0.isNumeric());
      assertEquals(1, attribute0.ordering());
      assertEquals(0.0, attribute0.getLowerNumericBound(), 0.01);
      assertEquals(124, attribute0.index());
      assertEquals(0.0, attribute0.getUpperNumericBound(), 0.01);
      assertFalse(attribute0.isString());
      assertEquals(1, Attribute.ORDERING_ORDERED);
      assertEquals(0, Attribute.ORDERING_SYMBOLIC);
      assertEquals(0, Attribute.NUMERIC);
      assertEquals(4, Attribute.RELATIONAL);
      assertEquals(2, Attribute.ORDERING_MODULO);
      assertEquals(3, Attribute.DATE);
      assertEquals(1, Attribute.NOMINAL);
      assertEquals(2, Attribute.STRING);
      
      boolean boolean1 = arrayList0.add(attribute0);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertFalse(attribute0.isRelationValued());
      assertEquals(0, attribute0.numValues());
      assertFalse(attribute0.hasZeropoint());
      assertFalse(attribute0.lowerNumericBoundIsOpen());
      assertEquals(3, attribute0.type());
      assertFalse(attribute0.isAveragable());
      assertTrue(attribute0.isRegular());
      assertTrue(attribute0.isDate());
      assertFalse(attribute0.upperNumericBoundIsOpen());
      assertEquals("", attribute0.getDateFormat());
      assertEquals(1.0, attribute0.weight(), 0.01);
      assertFalse(attribute0.isNominal());
      assertTrue(attribute0.isNumeric());
      assertEquals(1, attribute0.ordering());
      assertEquals(0.0, attribute0.getLowerNumericBound(), 0.01);
      assertEquals(124, attribute0.index());
      assertEquals(0.0, attribute0.getUpperNumericBound(), 0.01);
      assertFalse(attribute0.isString());
      assertEquals(1, Attribute.ORDERING_ORDERED);
      assertEquals(0, Attribute.ORDERING_SYMBOLIC);
      assertEquals(0, Attribute.NUMERIC);
      assertEquals(4, Attribute.RELATIONAL);
      assertEquals(2, Attribute.ORDERING_MODULO);
      assertEquals(3, Attribute.DATE);
      assertEquals(1, Attribute.NOMINAL);
      assertEquals(2, Attribute.STRING);
      
      Attribute attribute1 = new Attribute("@data");
      assertNotNull(attribute1);
      assertFalse(attribute1.equals((Object)attribute0));
      assertEquals(1.0, attribute1.weight(), 0.01);
      assertEquals("", attribute1.getDateFormat());
      assertFalse(attribute1.isNominal());
      assertTrue(attribute1.isNumeric());
      assertEquals(1, attribute1.ordering());
      assertTrue(attribute1.hasZeropoint());
      assertFalse(attribute1.isString());
      assertTrue(attribute1.isAveragable());
      assertFalse(attribute1.lowerNumericBoundIsOpen());
      assertEquals((-1), attribute1.index());
      assertEquals(0, attribute1.type());
      assertFalse(attribute1.isRelationValued());
      assertEquals(0, attribute1.numValues());
      assertFalse(attribute1.isDate());
      assertEquals(Double.NEGATIVE_INFINITY, attribute1.getLowerNumericBound(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, attribute1.getUpperNumericBound(), 0.01);
      assertTrue(attribute1.isRegular());
      assertFalse(attribute1.upperNumericBoundIsOpen());
      assertEquals(1, Attribute.ORDERING_ORDERED);
      assertEquals(0, Attribute.ORDERING_SYMBOLIC);
      assertEquals(0, Attribute.NUMERIC);
      assertEquals(2, Attribute.ORDERING_MODULO);
      assertEquals(3, Attribute.DATE);
      assertEquals(4, Attribute.RELATIONAL);
      assertEquals(1, Attribute.NOMINAL);
      assertEquals(2, Attribute.STRING);
      
      boolean boolean2 = arrayList0.add(attribute1);
      assertNotSame(attribute1, attribute0);
      assertFalse(attribute1.equals((Object)attribute0));
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2);
      assertEquals(2, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertEquals(1.0, attribute1.weight(), 0.01);
      assertEquals("", attribute1.getDateFormat());
      assertFalse(attribute1.isNominal());
      assertTrue(attribute1.isNumeric());
      assertEquals(1, attribute1.ordering());
      assertTrue(attribute1.hasZeropoint());
      assertFalse(attribute1.isString());
      assertTrue(attribute1.isAveragable());
      assertFalse(attribute1.lowerNumericBoundIsOpen());
      assertEquals((-1), attribute1.index());
      assertEquals(0, attribute1.type());
      assertFalse(attribute1.isRelationValued());
      assertEquals(0, attribute1.numValues());
      assertFalse(attribute1.isDate());
      assertEquals(Double.NEGATIVE_INFINITY, attribute1.getLowerNumericBound(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, attribute1.getUpperNumericBound(), 0.01);
      assertTrue(attribute1.isRegular());
      assertFalse(attribute1.upperNumericBoundIsOpen());
      assertEquals(1, Attribute.ORDERING_ORDERED);
      assertEquals(0, Attribute.ORDERING_SYMBOLIC);
      assertEquals(0, Attribute.NUMERIC);
      assertEquals(2, Attribute.ORDERING_MODULO);
      assertEquals(3, Attribute.DATE);
      assertEquals(4, Attribute.RELATIONAL);
      assertEquals(1, Attribute.NOMINAL);
      assertEquals(2, Attribute.STRING);
      
      boolean[][] booleanArray0 = new boolean[10][9];
      boolean boolean3 = arrayList0.add(attribute1);
      assertNotSame(attribute1, attribute0);
      assertFalse(attribute1.equals((Object)attribute0));
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3);
      assertEquals(3, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertEquals(1.0, attribute1.weight(), 0.01);
      assertEquals("", attribute1.getDateFormat());
      assertFalse(attribute1.isNominal());
      assertTrue(attribute1.isNumeric());
      assertEquals(1, attribute1.ordering());
      assertTrue(attribute1.hasZeropoint());
      assertFalse(attribute1.isString());
      assertTrue(attribute1.isAveragable());
      assertFalse(attribute1.lowerNumericBoundIsOpen());
      assertEquals((-1), attribute1.index());
      assertEquals(0, attribute1.type());
      assertFalse(attribute1.isRelationValued());
      assertEquals(0, attribute1.numValues());
      assertFalse(attribute1.isDate());
      assertEquals(Double.NEGATIVE_INFINITY, attribute1.getLowerNumericBound(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, attribute1.getUpperNumericBound(), 0.01);
      assertTrue(attribute1.isRegular());
      assertFalse(attribute1.upperNumericBoundIsOpen());
      assertEquals(1, Attribute.ORDERING_ORDERED);
      assertEquals(0, Attribute.ORDERING_SYMBOLIC);
      assertEquals(0, Attribute.NUMERIC);
      assertEquals(2, Attribute.ORDERING_MODULO);
      assertEquals(3, Attribute.DATE);
      assertEquals(4, Attribute.RELATIONAL);
      assertEquals(1, Attribute.NOMINAL);
      assertEquals(2, Attribute.STRING);
      
      iCSSearchAlgorithm0.m_BayesNet = null;
      assertEquals("SearchAlgorithm\n", iCSSearchAlgorithm0.toString());
      assertEquals("The score type determines the measure used to judge the quality of a network structure. It can be one of Bayes, BDeu, Minimum Description Length (MDL), Akaike Information Criterion (AIC), and Entropy.", iCSSearchAlgorithm0.scoreTypeTipText());
      assertEquals("When set to true (default is false), after a network structure is learned a Markov Blanket correction is applied to the network structure. This ensures that all nodes in the network are part of the Markov blanket of the classifier node.", iCSSearchAlgorithm0.markovBlanketClassifierTipText());
      assertEquals("This Bayes Network learning algorithm uses conditional independence tests to find a skeleton, finds V-nodes and applies a set of rules to find the directions of the remaining arrows.", iCSSearchAlgorithm0.globalInfo());
      assertEquals("When determining whether an edge exists a search is performed for a set Z that separates the nodes. MaxCardinality determines the maximum size of the set Z. This greatly influences the length of the search. Default value is 2.", iCSSearchAlgorithm0.maxCardinalityTipText());
      assertFalse(iCSSearchAlgorithm0.getMarkovBlanketClassifier());
      assertEquals("When set to true (default), the initial network used for structure learning is a Naive Bayes Network, that is, a network with an arrow from the classifier node to each other node. When set to false, an empty network is used as initial network structure", iCSSearchAlgorithm0.initAsNaiveBayesTipText());
      assertEquals("Set the maximum number of parents a node in the Bayes net can have. When initialized as Naive Bayes, setting this parameter to 1 results in a Naive Bayes classifier. When set to 2, a Tree Augmented Bayes Network (TAN) is learned, and when set >2, a Bayes Net Augmented Bayes Network (BAN) is learned. By setting it to a value much larger than the number of nodes in the network (the default of 100000 pretty much guarantees this), no restriction on the number of parents is enforced", iCSSearchAlgorithm0.maxNrOfParentsTipText());
      assertEquals(2, iCSSearchAlgorithm0.getMaxCardinality());
      
      iCSSearchAlgorithm0.setMarkovBlanketClassifier(true);
      assertEquals("SearchAlgorithm\n", iCSSearchAlgorithm0.toString());
      assertEquals("The score type determines the measure used to judge the quality of a network structure. It can be one of Bayes, BDeu, Minimum Description Length (MDL), Akaike Information Criterion (AIC), and Entropy.", iCSSearchAlgorithm0.scoreTypeTipText());
      assertEquals("When set to true (default is false), after a network structure is learned a Markov Blanket correction is applied to the network structure. This ensures that all nodes in the network are part of the Markov blanket of the classifier node.", iCSSearchAlgorithm0.markovBlanketClassifierTipText());
      assertTrue(iCSSearchAlgorithm0.getMarkovBlanketClassifier());
      assertEquals("This Bayes Network learning algorithm uses conditional independence tests to find a skeleton, finds V-nodes and applies a set of rules to find the directions of the remaining arrows.", iCSSearchAlgorithm0.globalInfo());
      assertEquals("When determining whether an edge exists a search is performed for a set Z that separates the nodes. MaxCardinality determines the maximum size of the set Z. This greatly influences the length of the search. Default value is 2.", iCSSearchAlgorithm0.maxCardinalityTipText());
      assertEquals("When set to true (default), the initial network used for structure learning is a Naive Bayes Network, that is, a network with an arrow from the classifier node to each other node. When set to false, an empty network is used as initial network structure", iCSSearchAlgorithm0.initAsNaiveBayesTipText());
      assertEquals("Set the maximum number of parents a node in the Bayes net can have. When initialized as Naive Bayes, setting this parameter to 1 results in a Naive Bayes classifier. When set to 2, a Tree Augmented Bayes Network (TAN) is learned, and when set >2, a Bayes Net Augmented Bayes Network (BAN) is learned. By setting it to a value much larger than the number of nodes in the network (the default of 100000 pretty much guarantees this), no restriction on the number of parents is enforced", iCSSearchAlgorithm0.maxNrOfParentsTipText());
      assertEquals(2, iCSSearchAlgorithm0.getMaxCardinality());
      
      System.setCurrentTimeMillis(1);
      boolean boolean4 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean4 == boolean0);
      assertFalse(boolean4 == boolean1);
      assertFalse(boolean4 == boolean3);
      assertFalse(boolean4 == boolean2);
      assertFalse(boolean4);
      
      boolean[][] booleanArray1 = new boolean[1][8];
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      boolean[] booleanArray2 = new boolean[12];
      booleanArray2[1] = true;
      booleanArray1[0] = booleanArray2;
      String string1 = iCSSearchAlgorithm0.getRevision();
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("8034", string1);
      assertEquals("SearchAlgorithm\n", iCSSearchAlgorithm0.toString());
      assertEquals("The score type determines the measure used to judge the quality of a network structure. It can be one of Bayes, BDeu, Minimum Description Length (MDL), Akaike Information Criterion (AIC), and Entropy.", iCSSearchAlgorithm0.scoreTypeTipText());
      assertEquals("When set to true (default is false), after a network structure is learned a Markov Blanket correction is applied to the network structure. This ensures that all nodes in the network are part of the Markov blanket of the classifier node.", iCSSearchAlgorithm0.markovBlanketClassifierTipText());
      assertTrue(iCSSearchAlgorithm0.getMarkovBlanketClassifier());
      assertEquals("This Bayes Network learning algorithm uses conditional independence tests to find a skeleton, finds V-nodes and applies a set of rules to find the directions of the remaining arrows.", iCSSearchAlgorithm0.globalInfo());
      assertEquals("When determining whether an edge exists a search is performed for a set Z that separates the nodes. MaxCardinality determines the maximum size of the set Z. This greatly influences the length of the search. Default value is 2.", iCSSearchAlgorithm0.maxCardinalityTipText());
      assertEquals("When set to true (default), the initial network used for structure learning is a Naive Bayes Network, that is, a network with an arrow from the classifier node to each other node. When set to false, an empty network is used as initial network structure", iCSSearchAlgorithm0.initAsNaiveBayesTipText());
      assertEquals("Set the maximum number of parents a node in the Bayes net can have. When initialized as Naive Bayes, setting this parameter to 1 results in a Naive Bayes classifier. When set to 2, a Tree Augmented Bayes Network (TAN) is learned, and when set >2, a Bayes Net Augmented Bayes Network (BAN) is learned. By setting it to a value much larger than the number of nodes in the network (the default of 100000 pretty much guarantees this), no restriction on the number of parents is enforced", iCSSearchAlgorithm0.maxNrOfParentsTipText());
      assertEquals(2, iCSSearchAlgorithm0.getMaxCardinality());
      
      // Undeclared exception!
      try { 
        iCSSearchAlgorithm0.calcArcDirections(booleanArray1, booleanArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("weka.classifiers.bayes.net.search.ci.ICSSearchAlgorithm", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ICSSearchAlgorithm iCSSearchAlgorithm0 = new ICSSearchAlgorithm();
      assertNotNull(iCSSearchAlgorithm0);
      assertEquals("This Bayes Network learning algorithm uses conditional independence tests to find a skeleton, finds V-nodes and applies a set of rules to find the directions of the remaining arrows.", iCSSearchAlgorithm0.globalInfo());
      assertEquals("Set the maximum number of parents a node in the Bayes net can have. When initialized as Naive Bayes, setting this parameter to 1 results in a Naive Bayes classifier. When set to 2, a Tree Augmented Bayes Network (TAN) is learned, and when set >2, a Bayes Net Augmented Bayes Network (BAN) is learned. By setting it to a value much larger than the number of nodes in the network (the default of 100000 pretty much guarantees this), no restriction on the number of parents is enforced", iCSSearchAlgorithm0.maxNrOfParentsTipText());
      assertFalse(iCSSearchAlgorithm0.getMarkovBlanketClassifier());
      assertEquals("When determining whether an edge exists a search is performed for a set Z that separates the nodes. MaxCardinality determines the maximum size of the set Z. This greatly influences the length of the search. Default value is 2.", iCSSearchAlgorithm0.maxCardinalityTipText());
      assertEquals("The score type determines the measure used to judge the quality of a network structure. It can be one of Bayes, BDeu, Minimum Description Length (MDL), Akaike Information Criterion (AIC), and Entropy.", iCSSearchAlgorithm0.scoreTypeTipText());
      assertEquals("SearchAlgorithm\n", iCSSearchAlgorithm0.toString());
      assertEquals(2, iCSSearchAlgorithm0.getMaxCardinality());
      assertEquals("When set to true (default), the initial network used for structure learning is a Naive Bayes Network, that is, a network with an arrow from the classifier node to each other node. When set to false, an empty network is used as initial network structure", iCSSearchAlgorithm0.initAsNaiveBayesTipText());
      assertEquals("When set to true (default is false), after a network structure is learned a Markov Blanket correction is applied to the network structure. This ensures that all nodes in the network are part of the Markov blanket of the classifier node.", iCSSearchAlgorithm0.markovBlanketClassifierTipText());
      
      Instances instances0 = iCSSearchAlgorithm0.m_instances;
      assertNull(instances0);
      
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      Instances instances1 = new Instances("@relation", arrayList0, 122);
      assertNotNull(instances1);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals("@relation", instances1.relationName());
      assertEquals((-1), instances1.classIndex());
      assertEquals(0, instances1.size());
      assertEquals(0.0, instances1.sumOfWeights(), 0.01);
      assertEquals(0, instances1.numInstances());
      assertFalse(instances1.checkForStringAttributes());
      assertEquals(0, instances1.numAttributes());
      
      BayesNet bayesNet0 = iCSSearchAlgorithm0.m_BayesNet;
      assertNull(bayesNet0);
      
      String[] stringArray0 = new String[0];
      BayesNet.main(stringArray0);
      iCSSearchAlgorithm0.search((BayesNet) null, instances1);
      assertEquals("This Bayes Network learning algorithm uses conditional independence tests to find a skeleton, finds V-nodes and applies a set of rules to find the directions of the remaining arrows.", iCSSearchAlgorithm0.globalInfo());
      assertEquals("Set the maximum number of parents a node in the Bayes net can have. When initialized as Naive Bayes, setting this parameter to 1 results in a Naive Bayes classifier. When set to 2, a Tree Augmented Bayes Network (TAN) is learned, and when set >2, a Bayes Net Augmented Bayes Network (BAN) is learned. By setting it to a value much larger than the number of nodes in the network (the default of 100000 pretty much guarantees this), no restriction on the number of parents is enforced", iCSSearchAlgorithm0.maxNrOfParentsTipText());
      assertFalse(iCSSearchAlgorithm0.getMarkovBlanketClassifier());
      assertEquals("When determining whether an edge exists a search is performed for a set Z that separates the nodes. MaxCardinality determines the maximum size of the set Z. This greatly influences the length of the search. Default value is 2.", iCSSearchAlgorithm0.maxCardinalityTipText());
      assertEquals("The score type determines the measure used to judge the quality of a network structure. It can be one of Bayes, BDeu, Minimum Description Length (MDL), Akaike Information Criterion (AIC), and Entropy.", iCSSearchAlgorithm0.scoreTypeTipText());
      assertEquals("SearchAlgorithm\n", iCSSearchAlgorithm0.toString());
      assertEquals(2, iCSSearchAlgorithm0.getMaxCardinality());
      assertEquals("When set to true (default), the initial network used for structure learning is a Naive Bayes Network, that is, a network with an arrow from the classifier node to each other node. When set to false, an empty network is used as initial network structure", iCSSearchAlgorithm0.initAsNaiveBayesTipText());
      assertEquals("When set to true (default is false), after a network structure is learned a Markov Blanket correction is applied to the network structure. This ensures that all nodes in the network are part of the Markov blanket of the classifier node.", iCSSearchAlgorithm0.markovBlanketClassifierTipText());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals("@relation", instances1.relationName());
      assertEquals((-1), instances1.classIndex());
      assertEquals(0, instances1.size());
      assertEquals(0.0, instances1.sumOfWeights(), 0.01);
      assertEquals(0, instances1.numInstances());
      assertFalse(instances1.checkForStringAttributes());
      assertEquals(0, instances1.numAttributes());
      
      SystemInUtil.addInputLine(".bsi");
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Attribute attribute0 = new Attribute("@data");
      assertNotNull(attribute0);
      assertFalse(attribute0.isString());
      assertFalse(attribute0.isDate());
      assertFalse(attribute0.isRelationValued());
      assertTrue(attribute0.isNumeric());
      assertEquals(0, attribute0.numValues());
      assertFalse(attribute0.lowerNumericBoundIsOpen());
      assertFalse(attribute0.upperNumericBoundIsOpen());
      assertEquals(0, attribute0.type());
      assertEquals(Double.NEGATIVE_INFINITY, attribute0.getLowerNumericBound(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, attribute0.getUpperNumericBound(), 0.01);
      assertTrue(attribute0.isRegular());
      assertFalse(attribute0.isNominal());
      assertEquals((-1), attribute0.index());
      assertEquals("", attribute0.getDateFormat());
      assertTrue(attribute0.isAveragable());
      assertEquals(1, attribute0.ordering());
      assertTrue(attribute0.hasZeropoint());
      assertEquals(1.0, attribute0.weight(), 0.01);
      assertEquals(2, Attribute.STRING);
      assertEquals(2, Attribute.ORDERING_MODULO);
      assertEquals(0, Attribute.ORDERING_SYMBOLIC);
      assertEquals(0, Attribute.NUMERIC);
      assertEquals(4, Attribute.RELATIONAL);
      assertEquals(3, Attribute.DATE);
      assertEquals(1, Attribute.NOMINAL);
      assertEquals(1, Attribute.ORDERING_ORDERED);
      
      boolean boolean1 = arrayList0.add(attribute0);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertFalse(attribute0.isString());
      assertFalse(attribute0.isDate());
      assertFalse(attribute0.isRelationValued());
      assertTrue(attribute0.isNumeric());
      assertEquals(0, attribute0.numValues());
      assertFalse(attribute0.lowerNumericBoundIsOpen());
      assertFalse(attribute0.upperNumericBoundIsOpen());
      assertEquals(0, attribute0.type());
      assertEquals(Double.NEGATIVE_INFINITY, attribute0.getLowerNumericBound(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, attribute0.getUpperNumericBound(), 0.01);
      assertTrue(attribute0.isRegular());
      assertFalse(attribute0.isNominal());
      assertEquals((-1), attribute0.index());
      assertEquals("", attribute0.getDateFormat());
      assertTrue(attribute0.isAveragable());
      assertEquals(1, attribute0.ordering());
      assertTrue(attribute0.hasZeropoint());
      assertEquals(1.0, attribute0.weight(), 0.01);
      assertEquals(2, Attribute.STRING);
      assertEquals(2, Attribute.ORDERING_MODULO);
      assertEquals(0, Attribute.ORDERING_SYMBOLIC);
      assertEquals(0, Attribute.NUMERIC);
      assertEquals(4, Attribute.RELATIONAL);
      assertEquals(3, Attribute.DATE);
      assertEquals(1, Attribute.NOMINAL);
      assertEquals(1, Attribute.ORDERING_ORDERED);
      
      boolean boolean2 = arrayList0.add(attribute0);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2);
      assertFalse(arrayList0.isEmpty());
      assertEquals(2, arrayList0.size());
      assertFalse(attribute0.isString());
      assertFalse(attribute0.isDate());
      assertFalse(attribute0.isRelationValued());
      assertTrue(attribute0.isNumeric());
      assertEquals(0, attribute0.numValues());
      assertFalse(attribute0.lowerNumericBoundIsOpen());
      assertFalse(attribute0.upperNumericBoundIsOpen());
      assertEquals(0, attribute0.type());
      assertEquals(Double.NEGATIVE_INFINITY, attribute0.getLowerNumericBound(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, attribute0.getUpperNumericBound(), 0.01);
      assertTrue(attribute0.isRegular());
      assertFalse(attribute0.isNominal());
      assertEquals((-1), attribute0.index());
      assertEquals("", attribute0.getDateFormat());
      assertTrue(attribute0.isAveragable());
      assertEquals(1, attribute0.ordering());
      assertTrue(attribute0.hasZeropoint());
      assertEquals(1.0, attribute0.weight(), 0.01);
      assertEquals(2, Attribute.STRING);
      assertEquals(2, Attribute.ORDERING_MODULO);
      assertEquals(0, Attribute.ORDERING_SYMBOLIC);
      assertEquals(0, Attribute.NUMERIC);
      assertEquals(4, Attribute.RELATIONAL);
      assertEquals(3, Attribute.DATE);
      assertEquals(1, Attribute.NOMINAL);
      assertEquals(1, Attribute.ORDERING_ORDERED);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      iCSSearchAlgorithm0.setMarkovBlanketClassifier(true);
      assertEquals("This Bayes Network learning algorithm uses conditional independence tests to find a skeleton, finds V-nodes and applies a set of rules to find the directions of the remaining arrows.", iCSSearchAlgorithm0.globalInfo());
      assertEquals("Set the maximum number of parents a node in the Bayes net can have. When initialized as Naive Bayes, setting this parameter to 1 results in a Naive Bayes classifier. When set to 2, a Tree Augmented Bayes Network (TAN) is learned, and when set >2, a Bayes Net Augmented Bayes Network (BAN) is learned. By setting it to a value much larger than the number of nodes in the network (the default of 100000 pretty much guarantees this), no restriction on the number of parents is enforced", iCSSearchAlgorithm0.maxNrOfParentsTipText());
      assertEquals("When determining whether an edge exists a search is performed for a set Z that separates the nodes. MaxCardinality determines the maximum size of the set Z. This greatly influences the length of the search. Default value is 2.", iCSSearchAlgorithm0.maxCardinalityTipText());
      assertEquals("The score type determines the measure used to judge the quality of a network structure. It can be one of Bayes, BDeu, Minimum Description Length (MDL), Akaike Information Criterion (AIC), and Entropy.", iCSSearchAlgorithm0.scoreTypeTipText());
      assertEquals("SearchAlgorithm\n", iCSSearchAlgorithm0.toString());
      assertEquals(2, iCSSearchAlgorithm0.getMaxCardinality());
      assertTrue(iCSSearchAlgorithm0.getMarkovBlanketClassifier());
      assertEquals("When set to true (default), the initial network used for structure learning is a Naive Bayes Network, that is, a network with an arrow from the classifier node to each other node. When set to false, an empty network is used as initial network structure", iCSSearchAlgorithm0.initAsNaiveBayesTipText());
      assertEquals("When set to true (default is false), after a network structure is learned a Markov Blanket correction is applied to the network structure. This ensures that all nodes in the network are part of the Markov blanket of the classifier node.", iCSSearchAlgorithm0.markovBlanketClassifierTipText());
      
      boolean boolean3 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3);
      
      boolean boolean4 = arrayList0.add(attribute0);
      assertTrue(boolean4 == boolean2);
      assertTrue(boolean4 == boolean1);
      assertFalse(boolean4 == boolean3);
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4);
      assertFalse(arrayList0.isEmpty());
      assertEquals(3, arrayList0.size());
      assertFalse(attribute0.isString());
      assertFalse(attribute0.isDate());
      assertFalse(attribute0.isRelationValued());
      assertTrue(attribute0.isNumeric());
      assertEquals(0, attribute0.numValues());
      assertFalse(attribute0.lowerNumericBoundIsOpen());
      assertFalse(attribute0.upperNumericBoundIsOpen());
      assertEquals(0, attribute0.type());
      assertEquals(Double.NEGATIVE_INFINITY, attribute0.getLowerNumericBound(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, attribute0.getUpperNumericBound(), 0.01);
      assertTrue(attribute0.isRegular());
      assertFalse(attribute0.isNominal());
      assertEquals((-1), attribute0.index());
      assertEquals("", attribute0.getDateFormat());
      assertTrue(attribute0.isAveragable());
      assertEquals(1, attribute0.ordering());
      assertTrue(attribute0.hasZeropoint());
      assertEquals(1.0, attribute0.weight(), 0.01);
      assertEquals(2, Attribute.STRING);
      assertEquals(2, Attribute.ORDERING_MODULO);
      assertEquals(0, Attribute.ORDERING_SYMBOLIC);
      assertEquals(0, Attribute.NUMERIC);
      assertEquals(4, Attribute.RELATIONAL);
      assertEquals(3, Attribute.DATE);
      assertEquals(1, Attribute.NOMINAL);
      assertEquals(1, Attribute.ORDERING_ORDERED);
      
      ICSSearchAlgorithm.SeparationSet iCSSearchAlgorithm_SeparationSet0 = iCSSearchAlgorithm0.new SeparationSet();
      assertNotNull(iCSSearchAlgorithm_SeparationSet0);
      assertEquals("This Bayes Network learning algorithm uses conditional independence tests to find a skeleton, finds V-nodes and applies a set of rules to find the directions of the remaining arrows.", iCSSearchAlgorithm0.globalInfo());
      assertEquals("Set the maximum number of parents a node in the Bayes net can have. When initialized as Naive Bayes, setting this parameter to 1 results in a Naive Bayes classifier. When set to 2, a Tree Augmented Bayes Network (TAN) is learned, and when set >2, a Bayes Net Augmented Bayes Network (BAN) is learned. By setting it to a value much larger than the number of nodes in the network (the default of 100000 pretty much guarantees this), no restriction on the number of parents is enforced", iCSSearchAlgorithm0.maxNrOfParentsTipText());
      assertEquals("When determining whether an edge exists a search is performed for a set Z that separates the nodes. MaxCardinality determines the maximum size of the set Z. This greatly influences the length of the search. Default value is 2.", iCSSearchAlgorithm0.maxCardinalityTipText());
      assertEquals("The score type determines the measure used to judge the quality of a network structure. It can be one of Bayes, BDeu, Minimum Description Length (MDL), Akaike Information Criterion (AIC), and Entropy.", iCSSearchAlgorithm0.scoreTypeTipText());
      assertEquals("SearchAlgorithm\n", iCSSearchAlgorithm0.toString());
      assertEquals(2, iCSSearchAlgorithm0.getMaxCardinality());
      assertTrue(iCSSearchAlgorithm0.getMarkovBlanketClassifier());
      assertEquals("When set to true (default), the initial network used for structure learning is a Naive Bayes Network, that is, a network with an arrow from the classifier node to each other node. When set to false, an empty network is used as initial network structure", iCSSearchAlgorithm0.initAsNaiveBayesTipText());
      assertEquals("When set to true (default is false), after a network structure is learned a Markov Blanket correction is applied to the network structure. This ensures that all nodes in the network are part of the Markov blanket of the classifier node.", iCSSearchAlgorithm0.markovBlanketClassifierTipText());
      
      int int0 = iCSSearchAlgorithm0.maxn();
      assertEquals(3, int0);
      assertEquals("This Bayes Network learning algorithm uses conditional independence tests to find a skeleton, finds V-nodes and applies a set of rules to find the directions of the remaining arrows.", iCSSearchAlgorithm0.globalInfo());
      assertEquals("Set the maximum number of parents a node in the Bayes net can have. When initialized as Naive Bayes, setting this parameter to 1 results in a Naive Bayes classifier. When set to 2, a Tree Augmented Bayes Network (TAN) is learned, and when set >2, a Bayes Net Augmented Bayes Network (BAN) is learned. By setting it to a value much larger than the number of nodes in the network (the default of 100000 pretty much guarantees this), no restriction on the number of parents is enforced", iCSSearchAlgorithm0.maxNrOfParentsTipText());
      assertEquals("When determining whether an edge exists a search is performed for a set Z that separates the nodes. MaxCardinality determines the maximum size of the set Z. This greatly influences the length of the search. Default value is 2.", iCSSearchAlgorithm0.maxCardinalityTipText());
      assertEquals("The score type determines the measure used to judge the quality of a network structure. It can be one of Bayes, BDeu, Minimum Description Length (MDL), Akaike Information Criterion (AIC), and Entropy.", iCSSearchAlgorithm0.scoreTypeTipText());
      assertEquals("SearchAlgorithm\n", iCSSearchAlgorithm0.toString());
      assertEquals(2, iCSSearchAlgorithm0.getMaxCardinality());
      assertTrue(iCSSearchAlgorithm0.getMarkovBlanketClassifier());
      assertEquals("When set to true (default), the initial network used for structure learning is a Naive Bayes Network, that is, a network with an arrow from the classifier node to each other node. When set to false, an empty network is used as initial network structure", iCSSearchAlgorithm0.initAsNaiveBayesTipText());
      assertEquals("When set to true (default is false), after a network structure is learned a Markov Blanket correction is applied to the network structure. This ensures that all nodes in the network are part of the Markov blanket of the classifier node.", iCSSearchAlgorithm0.markovBlanketClassifierTipText());
      
      boolean[][] booleanArray0 = new boolean[2][8];
      boolean[] booleanArray1 = new boolean[6];
      booleanArray1[0] = true;
      booleanArray1[1] = true;
      booleanArray1[2] = false;
      booleanArray1[3] = true;
      booleanArray1[4] = true;
      booleanArray1[5] = true;
      booleanArray0[0] = booleanArray1;
      boolean[] booleanArray2 = new boolean[0];
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      
      booleanArray0[1] = booleanArray2;
      // Undeclared exception!
      try { 
        iCSSearchAlgorithm0.calcArcDirections(booleanArray0, booleanArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("weka.classifiers.bayes.net.search.ci.ICSSearchAlgorithm", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      ICSSearchAlgorithm iCSSearchAlgorithm0 = new ICSSearchAlgorithm();
      assertNotNull(iCSSearchAlgorithm0);
      assertEquals("When determining whether an edge exists a search is performed for a set Z that separates the nodes. MaxCardinality determines the maximum size of the set Z. This greatly influences the length of the search. Default value is 2.", iCSSearchAlgorithm0.maxCardinalityTipText());
      assertEquals("Set the maximum number of parents a node in the Bayes net can have. When initialized as Naive Bayes, setting this parameter to 1 results in a Naive Bayes classifier. When set to 2, a Tree Augmented Bayes Network (TAN) is learned, and when set >2, a Bayes Net Augmented Bayes Network (BAN) is learned. By setting it to a value much larger than the number of nodes in the network (the default of 100000 pretty much guarantees this), no restriction on the number of parents is enforced", iCSSearchAlgorithm0.maxNrOfParentsTipText());
      assertEquals(2, iCSSearchAlgorithm0.getMaxCardinality());
      assertFalse(iCSSearchAlgorithm0.getMarkovBlanketClassifier());
      assertEquals("The score type determines the measure used to judge the quality of a network structure. It can be one of Bayes, BDeu, Minimum Description Length (MDL), Akaike Information Criterion (AIC), and Entropy.", iCSSearchAlgorithm0.scoreTypeTipText());
      assertEquals("When set to true (default), the initial network used for structure learning is a Naive Bayes Network, that is, a network with an arrow from the classifier node to each other node. When set to false, an empty network is used as initial network structure", iCSSearchAlgorithm0.initAsNaiveBayesTipText());
      assertEquals("This Bayes Network learning algorithm uses conditional independence tests to find a skeleton, finds V-nodes and applies a set of rules to find the directions of the remaining arrows.", iCSSearchAlgorithm0.globalInfo());
      assertEquals("SearchAlgorithm\n", iCSSearchAlgorithm0.toString());
      assertEquals("When set to true (default is false), after a network structure is learned a Markov Blanket correction is applied to the network structure. This ensures that all nodes in the network are part of the Markov blanket of the classifier node.", iCSSearchAlgorithm0.markovBlanketClassifierTipText());
      
      Instances instances0 = iCSSearchAlgorithm0.m_instances;
      assertNull(instances0);
      
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      Instances instances1 = new Instances("@relation", arrayList0, 122);
      assertNotNull(instances1);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertFalse(instances1.checkForStringAttributes());
      assertEquals("@relation", instances1.relationName());
      assertEquals((-1), instances1.classIndex());
      assertEquals(0, instances1.numInstances());
      assertEquals(0, instances1.size());
      assertEquals(0.0, instances1.sumOfWeights(), 0.01);
      assertEquals(0, instances1.numAttributes());
      
      BayesNet bayesNet0 = new BayesNet();
      assertNotNull(bayesNet0);
      assertEquals("Bayes Network learning using various search algorithms and quality measures.\nBase class for a Bayes Network classifier. Provides datastructures (network structure, conditional probability distributions, etc.) and facilities common to Bayes Network learning algorithms like K2 and B.\n\nFor more information see:\n\nhttp://www.cs.waikato.ac.nz/~remco/weka.pdf", bayesNet0.globalInfo());
      assertEquals("Select method used for searching network structures.", bayesNet0.searchAlgorithmTipText());
      assertEquals(2, bayesNet0.graphType());
      assertEquals("If set to true, classifier may output additional info to the console.", bayesNet0.debugTipText());
      assertFalse(bayesNet0.getDebug());
      assertFalse(bayesNet0.getUseADTree());
      assertEquals("When ADTree (the data structure for increasing speed on counts, not to be confused with the classifier under the same name) is used learning time goes down typically. However, because ADTrees are memory intensive, memory problems may occur. Switching this option off makes the structure learning algorithms slower, and run with less memory. By default, ADTrees are used.", bayesNet0.useADTreeTipText());
      assertEquals("Set the name of a file in BIF XML format. A Bayes network learned from data can be compared with the Bayes network represented by the BIF file. Statistics calculated are o.a. the number of missing and extra arcs.", bayesNet0.BIFFileTipText());
      assertEquals("Select Estimator algorithm for finding the conditional probability tables of the Bayes Network.", bayesNet0.estimatorTipText());
      
      bayesNet0.setSearchAlgorithm(iCSSearchAlgorithm0);
      assertEquals("When determining whether an edge exists a search is performed for a set Z that separates the nodes. MaxCardinality determines the maximum size of the set Z. This greatly influences the length of the search. Default value is 2.", iCSSearchAlgorithm0.maxCardinalityTipText());
      assertEquals("Set the maximum number of parents a node in the Bayes net can have. When initialized as Naive Bayes, setting this parameter to 1 results in a Naive Bayes classifier. When set to 2, a Tree Augmented Bayes Network (TAN) is learned, and when set >2, a Bayes Net Augmented Bayes Network (BAN) is learned. By setting it to a value much larger than the number of nodes in the network (the default of 100000 pretty much guarantees this), no restriction on the number of parents is enforced", iCSSearchAlgorithm0.maxNrOfParentsTipText());
      assertEquals(2, iCSSearchAlgorithm0.getMaxCardinality());
      assertFalse(iCSSearchAlgorithm0.getMarkovBlanketClassifier());
      assertEquals("The score type determines the measure used to judge the quality of a network structure. It can be one of Bayes, BDeu, Minimum Description Length (MDL), Akaike Information Criterion (AIC), and Entropy.", iCSSearchAlgorithm0.scoreTypeTipText());
      assertEquals("When set to true (default), the initial network used for structure learning is a Naive Bayes Network, that is, a network with an arrow from the classifier node to each other node. When set to false, an empty network is used as initial network structure", iCSSearchAlgorithm0.initAsNaiveBayesTipText());
      assertEquals("This Bayes Network learning algorithm uses conditional independence tests to find a skeleton, finds V-nodes and applies a set of rules to find the directions of the remaining arrows.", iCSSearchAlgorithm0.globalInfo());
      assertEquals("SearchAlgorithm\n", iCSSearchAlgorithm0.toString());
      assertEquals("When set to true (default is false), after a network structure is learned a Markov Blanket correction is applied to the network structure. This ensures that all nodes in the network are part of the Markov blanket of the classifier node.", iCSSearchAlgorithm0.markovBlanketClassifierTipText());
      assertEquals("Bayes Network learning using various search algorithms and quality measures.\nBase class for a Bayes Network classifier. Provides datastructures (network structure, conditional probability distributions, etc.) and facilities common to Bayes Network learning algorithms like K2 and B.\n\nFor more information see:\n\nhttp://www.cs.waikato.ac.nz/~remco/weka.pdf", bayesNet0.globalInfo());
      assertEquals("Select method used for searching network structures.", bayesNet0.searchAlgorithmTipText());
      assertEquals(2, bayesNet0.graphType());
      assertEquals("If set to true, classifier may output additional info to the console.", bayesNet0.debugTipText());
      assertFalse(bayesNet0.getDebug());
      assertFalse(bayesNet0.getUseADTree());
      assertEquals("When ADTree (the data structure for increasing speed on counts, not to be confused with the classifier under the same name) is used learning time goes down typically. However, because ADTrees are memory intensive, memory problems may occur. Switching this option off makes the structure learning algorithms slower, and run with less memory. By default, ADTrees are used.", bayesNet0.useADTreeTipText());
      assertEquals("Set the name of a file in BIF XML format. A Bayes network learned from data can be compared with the Bayes network represented by the BIF file. Statistics calculated are o.a. the number of missing and extra arcs.", bayesNet0.BIFFileTipText());
      assertEquals("Select Estimator algorithm for finding the conditional probability tables of the Bayes Network.", bayesNet0.estimatorTipText());
      
      iCSSearchAlgorithm0.search(bayesNet0, instances1);
      assertEquals("When determining whether an edge exists a search is performed for a set Z that separates the nodes. MaxCardinality determines the maximum size of the set Z. This greatly influences the length of the search. Default value is 2.", iCSSearchAlgorithm0.maxCardinalityTipText());
      assertEquals("Set the maximum number of parents a node in the Bayes net can have. When initialized as Naive Bayes, setting this parameter to 1 results in a Naive Bayes classifier. When set to 2, a Tree Augmented Bayes Network (TAN) is learned, and when set >2, a Bayes Net Augmented Bayes Network (BAN) is learned. By setting it to a value much larger than the number of nodes in the network (the default of 100000 pretty much guarantees this), no restriction on the number of parents is enforced", iCSSearchAlgorithm0.maxNrOfParentsTipText());
      assertEquals(2, iCSSearchAlgorithm0.getMaxCardinality());
      assertFalse(iCSSearchAlgorithm0.getMarkovBlanketClassifier());
      assertEquals("The score type determines the measure used to judge the quality of a network structure. It can be one of Bayes, BDeu, Minimum Description Length (MDL), Akaike Information Criterion (AIC), and Entropy.", iCSSearchAlgorithm0.scoreTypeTipText());
      assertEquals("When set to true (default), the initial network used for structure learning is a Naive Bayes Network, that is, a network with an arrow from the classifier node to each other node. When set to false, an empty network is used as initial network structure", iCSSearchAlgorithm0.initAsNaiveBayesTipText());
      assertEquals("This Bayes Network learning algorithm uses conditional independence tests to find a skeleton, finds V-nodes and applies a set of rules to find the directions of the remaining arrows.", iCSSearchAlgorithm0.globalInfo());
      assertEquals("SearchAlgorithm\n", iCSSearchAlgorithm0.toString());
      assertEquals("When set to true (default is false), after a network structure is learned a Markov Blanket correction is applied to the network structure. This ensures that all nodes in the network are part of the Markov blanket of the classifier node.", iCSSearchAlgorithm0.markovBlanketClassifierTipText());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertFalse(instances1.checkForStringAttributes());
      assertEquals("@relation", instances1.relationName());
      assertEquals((-1), instances1.classIndex());
      assertEquals(0, instances1.numInstances());
      assertEquals(0, instances1.size());
      assertEquals(0.0, instances1.sumOfWeights(), 0.01);
      assertEquals(0, instances1.numAttributes());
      assertEquals("Bayes Network learning using various search algorithms and quality measures.\nBase class for a Bayes Network classifier. Provides datastructures (network structure, conditional probability distributions, etc.) and facilities common to Bayes Network learning algorithms like K2 and B.\n\nFor more information see:\n\nhttp://www.cs.waikato.ac.nz/~remco/weka.pdf", bayesNet0.globalInfo());
      assertEquals("Select method used for searching network structures.", bayesNet0.searchAlgorithmTipText());
      assertEquals(2, bayesNet0.graphType());
      assertEquals("If set to true, classifier may output additional info to the console.", bayesNet0.debugTipText());
      assertFalse(bayesNet0.getDebug());
      assertFalse(bayesNet0.getUseADTree());
      assertEquals("When ADTree (the data structure for increasing speed on counts, not to be confused with the classifier under the same name) is used learning time goes down typically. However, because ADTrees are memory intensive, memory problems may occur. Switching this option off makes the structure learning algorithms slower, and run with less memory. By default, ADTrees are used.", bayesNet0.useADTreeTipText());
      assertEquals("Set the name of a file in BIF XML format. A Bayes network learned from data can be compared with the Bayes network represented by the BIF file. Statistics calculated are o.a. the number of missing and extra arcs.", bayesNet0.BIFFileTipText());
      assertEquals("Select Estimator algorithm for finding the conditional probability tables of the Bayes Network.", bayesNet0.estimatorTipText());
      
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Attribute attribute0 = new Attribute(".bsi", linkedList0, 122);
      assertNotNull(attribute0);
      assertEquals(0, linkedList0.size());
      assertFalse(attribute0.lowerNumericBoundIsOpen());
      assertFalse(attribute0.hasZeropoint());
      assertEquals(0, attribute0.numValues());
      assertFalse(attribute0.isDate());
      assertFalse(attribute0.isRegular());
      assertEquals(1, attribute0.type());
      assertEquals(0.0, attribute0.getLowerNumericBound(), 0.01);
      assertEquals(0, attribute0.ordering());
      assertEquals(0.0, attribute0.getUpperNumericBound(), 0.01);
      assertEquals(122, attribute0.index());
      assertFalse(attribute0.isNumeric());
      assertFalse(attribute0.isRelationValued());
      assertFalse(attribute0.isString());
      assertEquals(1.0, attribute0.weight(), 0.01);
      assertTrue(attribute0.isNominal());
      assertEquals("", attribute0.getDateFormat());
      assertFalse(attribute0.isAveragable());
      assertFalse(attribute0.upperNumericBoundIsOpen());
      assertEquals(0, Attribute.ORDERING_SYMBOLIC);
      assertEquals(0, Attribute.NUMERIC);
      assertEquals(1, Attribute.ORDERING_ORDERED);
      assertEquals(2, Attribute.ORDERING_MODULO);
      assertEquals(2, Attribute.STRING);
      assertEquals(3, Attribute.DATE);
      assertEquals(1, Attribute.NOMINAL);
      assertEquals(4, Attribute.RELATIONAL);
      
      int int0 = attribute0.addStringValue("");
      assertEquals((-1), int0);
      assertEquals(0, linkedList0.size());
      assertFalse(attribute0.lowerNumericBoundIsOpen());
      assertFalse(attribute0.hasZeropoint());
      assertEquals(0, attribute0.numValues());
      assertFalse(attribute0.isDate());
      assertFalse(attribute0.isRegular());
      assertEquals(1, attribute0.type());
      assertEquals(0.0, attribute0.getLowerNumericBound(), 0.01);
      assertEquals(0, attribute0.ordering());
      assertEquals(0.0, attribute0.getUpperNumericBound(), 0.01);
      assertEquals(122, attribute0.index());
      assertFalse(attribute0.isNumeric());
      assertFalse(attribute0.isRelationValued());
      assertFalse(attribute0.isString());
      assertEquals(1.0, attribute0.weight(), 0.01);
      assertTrue(attribute0.isNominal());
      assertEquals("", attribute0.getDateFormat());
      assertFalse(attribute0.isAveragable());
      assertFalse(attribute0.upperNumericBoundIsOpen());
      assertEquals(0, Attribute.ORDERING_SYMBOLIC);
      assertEquals(0, Attribute.NUMERIC);
      assertEquals(1, Attribute.ORDERING_ORDERED);
      assertEquals(2, Attribute.ORDERING_MODULO);
      assertEquals(2, Attribute.STRING);
      assertEquals(3, Attribute.DATE);
      assertEquals(1, Attribute.NOMINAL);
      assertEquals(4, Attribute.RELATIONAL);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      LinkedList<String> linkedList1 = new LinkedList<String>();
      assertNotNull(linkedList1);
      assertTrue(linkedList1.equals((Object)linkedList0));
      assertEquals(0, linkedList1.size());
      
      Attribute attribute1 = new Attribute("@data", linkedList1);
      assertNotNull(attribute1);
      assertTrue(linkedList1.equals((Object)linkedList0));
      assertFalse(attribute1.equals((Object)attribute0));
      assertEquals(0, linkedList1.size());
      assertFalse(attribute1.isRelationValued());
      assertFalse(attribute1.lowerNumericBoundIsOpen());
      assertFalse(attribute1.isString());
      assertEquals(1, attribute1.type());
      assertFalse(attribute1.isRegular());
      assertEquals(0, attribute1.ordering());
      assertFalse(attribute1.isAveragable());
      assertEquals(0.0, attribute1.getUpperNumericBound(), 0.01);
      assertFalse(attribute1.upperNumericBoundIsOpen());
      assertEquals((-1), attribute1.index());
      assertFalse(attribute1.hasZeropoint());
      assertEquals("", attribute1.getDateFormat());
      assertFalse(attribute1.isNumeric());
      assertEquals(0.0, attribute1.getLowerNumericBound(), 0.01);
      assertEquals(1.0, attribute1.weight(), 0.01);
      assertEquals(0, attribute1.numValues());
      assertTrue(attribute1.isNominal());
      assertFalse(attribute1.isDate());
      assertEquals(0, Attribute.ORDERING_SYMBOLIC);
      assertEquals(0, Attribute.NUMERIC);
      assertEquals(1, Attribute.ORDERING_ORDERED);
      assertEquals(2, Attribute.STRING);
      assertEquals(2, Attribute.ORDERING_MODULO);
      assertEquals(1, Attribute.NOMINAL);
      assertEquals(4, Attribute.RELATIONAL);
      assertEquals(3, Attribute.DATE);
      
      boolean boolean1 = arrayList0.add(attribute1);
      assertNotSame(linkedList1, linkedList0);
      assertNotSame(attribute1, attribute0);
      assertTrue(linkedList1.equals((Object)linkedList0));
      assertFalse(attribute1.equals((Object)attribute0));
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertEquals(0, linkedList1.size());
      assertFalse(attribute1.isRelationValued());
      assertFalse(attribute1.lowerNumericBoundIsOpen());
      assertFalse(attribute1.isString());
      assertEquals(1, attribute1.type());
      assertFalse(attribute1.isRegular());
      assertEquals(0, attribute1.ordering());
      assertFalse(attribute1.isAveragable());
      assertEquals(0.0, attribute1.getUpperNumericBound(), 0.01);
      assertFalse(attribute1.upperNumericBoundIsOpen());
      assertEquals((-1), attribute1.index());
      assertFalse(attribute1.hasZeropoint());
      assertEquals("", attribute1.getDateFormat());
      assertFalse(attribute1.isNumeric());
      assertEquals(0.0, attribute1.getLowerNumericBound(), 0.01);
      assertEquals(1.0, attribute1.weight(), 0.01);
      assertEquals(0, attribute1.numValues());
      assertTrue(attribute1.isNominal());
      assertFalse(attribute1.isDate());
      assertEquals(0, Attribute.ORDERING_SYMBOLIC);
      assertEquals(0, Attribute.NUMERIC);
      assertEquals(1, Attribute.ORDERING_ORDERED);
      assertEquals(2, Attribute.STRING);
      assertEquals(2, Attribute.ORDERING_MODULO);
      assertEquals(1, Attribute.NOMINAL);
      assertEquals(4, Attribute.RELATIONAL);
      assertEquals(3, Attribute.DATE);
      
      boolean boolean2 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      
      boolean boolean3 = arrayList0.add(attribute0);
      assertNotSame(linkedList0, linkedList1);
      assertNotSame(attribute0, attribute1);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertTrue(linkedList0.equals((Object)linkedList1));
      assertFalse(attribute0.equals((Object)attribute1));
      assertTrue(boolean3);
      assertEquals(2, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertEquals(0, linkedList0.size());
      assertFalse(attribute0.lowerNumericBoundIsOpen());
      assertFalse(attribute0.hasZeropoint());
      assertEquals(0, attribute0.numValues());
      assertFalse(attribute0.isDate());
      assertFalse(attribute0.isRegular());
      assertEquals(1, attribute0.type());
      assertEquals(0.0, attribute0.getLowerNumericBound(), 0.01);
      assertEquals(0, attribute0.ordering());
      assertEquals(0.0, attribute0.getUpperNumericBound(), 0.01);
      assertEquals(122, attribute0.index());
      assertFalse(attribute0.isNumeric());
      assertFalse(attribute0.isRelationValued());
      assertFalse(attribute0.isString());
      assertEquals(1.0, attribute0.weight(), 0.01);
      assertTrue(attribute0.isNominal());
      assertEquals("", attribute0.getDateFormat());
      assertFalse(attribute0.isAveragable());
      assertFalse(attribute0.upperNumericBoundIsOpen());
      assertEquals(0, Attribute.ORDERING_SYMBOLIC);
      assertEquals(0, Attribute.NUMERIC);
      assertEquals(1, Attribute.ORDERING_ORDERED);
      assertEquals(2, Attribute.ORDERING_MODULO);
      assertEquals(2, Attribute.STRING);
      assertEquals(3, Attribute.DATE);
      assertEquals(1, Attribute.NOMINAL);
      assertEquals(4, Attribute.RELATIONAL);
      
      boolean boolean4 = arrayList0.add(attribute0);
      assertNotSame(linkedList0, linkedList1);
      assertNotSame(attribute0, attribute1);
      assertTrue(boolean4 == boolean3);
      assertFalse(boolean4 == boolean2);
      assertTrue(boolean4 == boolean1);
      assertTrue(boolean4 == boolean0);
      assertTrue(linkedList0.equals((Object)linkedList1));
      assertFalse(attribute0.equals((Object)attribute1));
      assertTrue(boolean4);
      assertEquals(3, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertEquals(0, linkedList0.size());
      assertFalse(attribute0.lowerNumericBoundIsOpen());
      assertFalse(attribute0.hasZeropoint());
      assertEquals(0, attribute0.numValues());
      assertFalse(attribute0.isDate());
      assertFalse(attribute0.isRegular());
      assertEquals(1, attribute0.type());
      assertEquals(0.0, attribute0.getLowerNumericBound(), 0.01);
      assertEquals(0, attribute0.ordering());
      assertEquals(0.0, attribute0.getUpperNumericBound(), 0.01);
      assertEquals(122, attribute0.index());
      assertFalse(attribute0.isNumeric());
      assertFalse(attribute0.isRelationValued());
      assertFalse(attribute0.isString());
      assertEquals(1.0, attribute0.weight(), 0.01);
      assertTrue(attribute0.isNominal());
      assertEquals("", attribute0.getDateFormat());
      assertFalse(attribute0.isAveragable());
      assertFalse(attribute0.upperNumericBoundIsOpen());
      assertEquals(0, Attribute.ORDERING_SYMBOLIC);
      assertEquals(0, Attribute.NUMERIC);
      assertEquals(1, Attribute.ORDERING_ORDERED);
      assertEquals(2, Attribute.ORDERING_MODULO);
      assertEquals(2, Attribute.STRING);
      assertEquals(3, Attribute.DATE);
      assertEquals(1, Attribute.NOMINAL);
      assertEquals(4, Attribute.RELATIONAL);
      
      boolean[][] booleanArray0 = new boolean[10][9];
      ICSSearchAlgorithm.SeparationSet iCSSearchAlgorithm_SeparationSet0 = iCSSearchAlgorithm0.new SeparationSet();
      assertNotNull(iCSSearchAlgorithm_SeparationSet0);
      assertEquals("When determining whether an edge exists a search is performed for a set Z that separates the nodes. MaxCardinality determines the maximum size of the set Z. This greatly influences the length of the search. Default value is 2.", iCSSearchAlgorithm0.maxCardinalityTipText());
      assertEquals("Set the maximum number of parents a node in the Bayes net can have. When initialized as Naive Bayes, setting this parameter to 1 results in a Naive Bayes classifier. When set to 2, a Tree Augmented Bayes Network (TAN) is learned, and when set >2, a Bayes Net Augmented Bayes Network (BAN) is learned. By setting it to a value much larger than the number of nodes in the network (the default of 100000 pretty much guarantees this), no restriction on the number of parents is enforced", iCSSearchAlgorithm0.maxNrOfParentsTipText());
      assertEquals(2, iCSSearchAlgorithm0.getMaxCardinality());
      assertFalse(iCSSearchAlgorithm0.getMarkovBlanketClassifier());
      assertEquals("The score type determines the measure used to judge the quality of a network structure. It can be one of Bayes, BDeu, Minimum Description Length (MDL), Akaike Information Criterion (AIC), and Entropy.", iCSSearchAlgorithm0.scoreTypeTipText());
      assertEquals("When set to true (default), the initial network used for structure learning is a Naive Bayes Network, that is, a network with an arrow from the classifier node to each other node. When set to false, an empty network is used as initial network structure", iCSSearchAlgorithm0.initAsNaiveBayesTipText());
      assertEquals("This Bayes Network learning algorithm uses conditional independence tests to find a skeleton, finds V-nodes and applies a set of rules to find the directions of the remaining arrows.", iCSSearchAlgorithm0.globalInfo());
      assertEquals("SearchAlgorithm\n", iCSSearchAlgorithm0.toString());
      assertEquals("When set to true (default is false), after a network structure is learned a Markov Blanket correction is applied to the network structure. This ensures that all nodes in the network are part of the Markov blanket of the classifier node.", iCSSearchAlgorithm0.markovBlanketClassifierTipText());
      
      ICSSearchAlgorithm.SeparationSet[][] iCSSearchAlgorithm_SeparationSetArray0 = new ICSSearchAlgorithm.SeparationSet[3][3];
      boolean boolean5 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean5 == boolean0);
      assertFalse(boolean5 == boolean4);
      assertTrue(boolean5 == boolean2);
      assertFalse(boolean5 == boolean1);
      assertFalse(boolean5 == boolean3);
      assertFalse(boolean5);
      
      ICSSearchAlgorithm.SeparationSet[] iCSSearchAlgorithm_SeparationSetArray1 = new ICSSearchAlgorithm.SeparationSet[13];
      iCSSearchAlgorithm_SeparationSetArray1[1] = iCSSearchAlgorithm_SeparationSet0;
      iCSSearchAlgorithm_SeparationSetArray1[3] = iCSSearchAlgorithm_SeparationSet0;
      iCSSearchAlgorithm_SeparationSetArray1[1] = iCSSearchAlgorithm_SeparationSet0;
      iCSSearchAlgorithm_SeparationSetArray1[5] = iCSSearchAlgorithm_SeparationSetArray1[2];
      iCSSearchAlgorithm_SeparationSetArray1[7] = iCSSearchAlgorithm_SeparationSetArray1[4];
      iCSSearchAlgorithm_SeparationSetArray0[0] = iCSSearchAlgorithm_SeparationSetArray1;
      iCSSearchAlgorithm_SeparationSetArray0[2] = iCSSearchAlgorithm_SeparationSetArray0[1];
      iCSSearchAlgorithm0.setOptions((String[]) null);
      assertEquals("When determining whether an edge exists a search is performed for a set Z that separates the nodes. MaxCardinality determines the maximum size of the set Z. This greatly influences the length of the search. Default value is 2.", iCSSearchAlgorithm0.maxCardinalityTipText());
      assertEquals("Set the maximum number of parents a node in the Bayes net can have. When initialized as Naive Bayes, setting this parameter to 1 results in a Naive Bayes classifier. When set to 2, a Tree Augmented Bayes Network (TAN) is learned, and when set >2, a Bayes Net Augmented Bayes Network (BAN) is learned. By setting it to a value much larger than the number of nodes in the network (the default of 100000 pretty much guarantees this), no restriction on the number of parents is enforced", iCSSearchAlgorithm0.maxNrOfParentsTipText());
      assertEquals(2, iCSSearchAlgorithm0.getMaxCardinality());
      assertFalse(iCSSearchAlgorithm0.getMarkovBlanketClassifier());
      assertEquals("The score type determines the measure used to judge the quality of a network structure. It can be one of Bayes, BDeu, Minimum Description Length (MDL), Akaike Information Criterion (AIC), and Entropy.", iCSSearchAlgorithm0.scoreTypeTipText());
      assertEquals("When set to true (default), the initial network used for structure learning is a Naive Bayes Network, that is, a network with an arrow from the classifier node to each other node. When set to false, an empty network is used as initial network structure", iCSSearchAlgorithm0.initAsNaiveBayesTipText());
      assertEquals("This Bayes Network learning algorithm uses conditional independence tests to find a skeleton, finds V-nodes and applies a set of rules to find the directions of the remaining arrows.", iCSSearchAlgorithm0.globalInfo());
      assertEquals("SearchAlgorithm\n", iCSSearchAlgorithm0.toString());
      assertEquals("When set to true (default is false), after a network structure is learned a Markov Blanket correction is applied to the network structure. This ensures that all nodes in the network are part of the Markov blanket of the classifier node.", iCSSearchAlgorithm0.markovBlanketClassifierTipText());
      
      // Undeclared exception!
      try { 
        iCSSearchAlgorithm0.calcVeeNodes(booleanArray0, booleanArray0, iCSSearchAlgorithm_SeparationSetArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.bayes.net.search.ci.ICSSearchAlgorithm", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SystemInUtil.addInputLine("");
      ICSSearchAlgorithm iCSSearchAlgorithm0 = new ICSSearchAlgorithm();
      assertNotNull(iCSSearchAlgorithm0);
      assertEquals("This Bayes Network learning algorithm uses conditional independence tests to find a skeleton, finds V-nodes and applies a set of rules to find the directions of the remaining arrows.", iCSSearchAlgorithm0.globalInfo());
      assertEquals("When set to true (default), the initial network used for structure learning is a Naive Bayes Network, that is, a network with an arrow from the classifier node to each other node. When set to false, an empty network is used as initial network structure", iCSSearchAlgorithm0.initAsNaiveBayesTipText());
      assertEquals("SearchAlgorithm\n", iCSSearchAlgorithm0.toString());
      assertEquals("When set to true (default is false), after a network structure is learned a Markov Blanket correction is applied to the network structure. This ensures that all nodes in the network are part of the Markov blanket of the classifier node.", iCSSearchAlgorithm0.markovBlanketClassifierTipText());
      assertEquals(2, iCSSearchAlgorithm0.getMaxCardinality());
      assertEquals("Set the maximum number of parents a node in the Bayes net can have. When initialized as Naive Bayes, setting this parameter to 1 results in a Naive Bayes classifier. When set to 2, a Tree Augmented Bayes Network (TAN) is learned, and when set >2, a Bayes Net Augmented Bayes Network (BAN) is learned. By setting it to a value much larger than the number of nodes in the network (the default of 100000 pretty much guarantees this), no restriction on the number of parents is enforced", iCSSearchAlgorithm0.maxNrOfParentsTipText());
      assertEquals("The score type determines the measure used to judge the quality of a network structure. It can be one of Bayes, BDeu, Minimum Description Length (MDL), Akaike Information Criterion (AIC), and Entropy.", iCSSearchAlgorithm0.scoreTypeTipText());
      assertEquals("When determining whether an edge exists a search is performed for a set Z that separates the nodes. MaxCardinality determines the maximum size of the set Z. This greatly influences the length of the search. Default value is 2.", iCSSearchAlgorithm0.maxCardinalityTipText());
      assertFalse(iCSSearchAlgorithm0.getMarkovBlanketClassifier());
      
      Instances instances0 = iCSSearchAlgorithm0.m_instances;
      assertNull(instances0);
      
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      Instances instances1 = new Instances("@relation", arrayList0, 122);
      assertNotNull(instances1);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals("@relation", instances1.relationName());
      assertEquals(0, instances1.numInstances());
      assertEquals((-1), instances1.classIndex());
      assertEquals(0, instances1.size());
      assertEquals(0.0, instances1.sumOfWeights(), 0.01);
      assertFalse(instances1.checkForStringAttributes());
      assertEquals(0, instances1.numAttributes());
      
      BayesNet bayesNet0 = iCSSearchAlgorithm0.m_BayesNet;
      assertNull(bayesNet0);
      
      iCSSearchAlgorithm0.search((BayesNet) null, instances1);
      assertEquals("This Bayes Network learning algorithm uses conditional independence tests to find a skeleton, finds V-nodes and applies a set of rules to find the directions of the remaining arrows.", iCSSearchAlgorithm0.globalInfo());
      assertEquals("When set to true (default), the initial network used for structure learning is a Naive Bayes Network, that is, a network with an arrow from the classifier node to each other node. When set to false, an empty network is used as initial network structure", iCSSearchAlgorithm0.initAsNaiveBayesTipText());
      assertEquals("SearchAlgorithm\n", iCSSearchAlgorithm0.toString());
      assertEquals("When set to true (default is false), after a network structure is learned a Markov Blanket correction is applied to the network structure. This ensures that all nodes in the network are part of the Markov blanket of the classifier node.", iCSSearchAlgorithm0.markovBlanketClassifierTipText());
      assertEquals(2, iCSSearchAlgorithm0.getMaxCardinality());
      assertEquals("Set the maximum number of parents a node in the Bayes net can have. When initialized as Naive Bayes, setting this parameter to 1 results in a Naive Bayes classifier. When set to 2, a Tree Augmented Bayes Network (TAN) is learned, and when set >2, a Bayes Net Augmented Bayes Network (BAN) is learned. By setting it to a value much larger than the number of nodes in the network (the default of 100000 pretty much guarantees this), no restriction on the number of parents is enforced", iCSSearchAlgorithm0.maxNrOfParentsTipText());
      assertEquals("The score type determines the measure used to judge the quality of a network structure. It can be one of Bayes, BDeu, Minimum Description Length (MDL), Akaike Information Criterion (AIC), and Entropy.", iCSSearchAlgorithm0.scoreTypeTipText());
      assertEquals("When determining whether an edge exists a search is performed for a set Z that separates the nodes. MaxCardinality determines the maximum size of the set Z. This greatly influences the length of the search. Default value is 2.", iCSSearchAlgorithm0.maxCardinalityTipText());
      assertFalse(iCSSearchAlgorithm0.getMarkovBlanketClassifier());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals("@relation", instances1.relationName());
      assertEquals(0, instances1.numInstances());
      assertEquals((-1), instances1.classIndex());
      assertEquals(0, instances1.size());
      assertEquals(0.0, instances1.sumOfWeights(), 0.01);
      assertFalse(instances1.checkForStringAttributes());
      assertEquals(0, instances1.numAttributes());
      
      Attribute attribute0 = new Attribute("@data", instances1, 122);
      assertNotNull(attribute0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals("@relation", instances1.relationName());
      assertEquals(0, instances1.numInstances());
      assertEquals((-1), instances1.classIndex());
      assertEquals(0, instances1.size());
      assertEquals(0.0, instances1.sumOfWeights(), 0.01);
      assertFalse(instances1.checkForStringAttributes());
      assertEquals(0, instances1.numAttributes());
      assertFalse(attribute0.isNominal());
      assertEquals(1.0, attribute0.weight(), 0.01);
      assertEquals("", attribute0.getDateFormat());
      assertTrue(attribute0.isRelationValued());
      assertEquals(0.0, attribute0.getUpperNumericBound(), 0.01);
      assertEquals(122, attribute0.index());
      assertEquals(0.0, attribute0.getLowerNumericBound(), 0.01);
      assertEquals(0, attribute0.ordering());
      assertFalse(attribute0.isString());
      assertFalse(attribute0.isNumeric());
      assertFalse(attribute0.hasZeropoint());
      assertEquals(4, attribute0.type());
      assertFalse(attribute0.isDate());
      assertFalse(attribute0.lowerNumericBoundIsOpen());
      assertEquals(0, attribute0.numValues());
      assertFalse(attribute0.upperNumericBoundIsOpen());
      assertFalse(attribute0.isRegular());
      assertFalse(attribute0.isAveragable());
      assertEquals(0, Attribute.NUMERIC);
      assertEquals(0, Attribute.ORDERING_SYMBOLIC);
      assertEquals(1, Attribute.ORDERING_ORDERED);
      assertEquals(3, Attribute.DATE);
      assertEquals(2, Attribute.STRING);
      assertEquals(4, Attribute.RELATIONAL);
      assertEquals(2, Attribute.ORDERING_MODULO);
      assertEquals(1, Attribute.NOMINAL);
      
      boolean boolean0 = arrayList0.add(attribute0);
      assertTrue(boolean0);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertEquals("@relation", instances1.relationName());
      assertEquals(0, instances1.numInstances());
      assertEquals((-1), instances1.classIndex());
      assertEquals(0, instances1.size());
      assertEquals(0.0, instances1.sumOfWeights(), 0.01);
      assertFalse(instances1.checkForStringAttributes());
      assertEquals(1, instances1.numAttributes());
      assertFalse(attribute0.isNominal());
      assertEquals(1.0, attribute0.weight(), 0.01);
      assertEquals("", attribute0.getDateFormat());
      assertTrue(attribute0.isRelationValued());
      assertEquals(0.0, attribute0.getUpperNumericBound(), 0.01);
      assertEquals(122, attribute0.index());
      assertEquals(0.0, attribute0.getLowerNumericBound(), 0.01);
      assertEquals(0, attribute0.ordering());
      assertFalse(attribute0.isString());
      assertFalse(attribute0.isNumeric());
      assertFalse(attribute0.hasZeropoint());
      assertEquals(4, attribute0.type());
      assertFalse(attribute0.isDate());
      assertFalse(attribute0.lowerNumericBoundIsOpen());
      assertEquals(0, attribute0.numValues());
      assertFalse(attribute0.upperNumericBoundIsOpen());
      assertFalse(attribute0.isRegular());
      assertFalse(attribute0.isAveragable());
      assertEquals(0, Attribute.NUMERIC);
      assertEquals(0, Attribute.ORDERING_SYMBOLIC);
      assertEquals(1, Attribute.ORDERING_ORDERED);
      assertEquals(3, Attribute.DATE);
      assertEquals(2, Attribute.STRING);
      assertEquals(4, Attribute.RELATIONAL);
      assertEquals(2, Attribute.ORDERING_MODULO);
      assertEquals(1, Attribute.NOMINAL);
      
      boolean boolean1 = arrayList0.add(attribute0);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(2, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertEquals("@relation", instances1.relationName());
      assertEquals(0, instances1.numInstances());
      assertEquals(2, instances1.numAttributes());
      assertEquals((-1), instances1.classIndex());
      assertEquals(0, instances1.size());
      assertEquals(0.0, instances1.sumOfWeights(), 0.01);
      assertFalse(instances1.checkForStringAttributes());
      assertFalse(attribute0.isNominal());
      assertEquals(1.0, attribute0.weight(), 0.01);
      assertEquals("", attribute0.getDateFormat());
      assertTrue(attribute0.isRelationValued());
      assertEquals(0.0, attribute0.getUpperNumericBound(), 0.01);
      assertEquals(122, attribute0.index());
      assertEquals(0.0, attribute0.getLowerNumericBound(), 0.01);
      assertEquals(0, attribute0.ordering());
      assertFalse(attribute0.isString());
      assertFalse(attribute0.isNumeric());
      assertFalse(attribute0.hasZeropoint());
      assertEquals(4, attribute0.type());
      assertFalse(attribute0.isDate());
      assertFalse(attribute0.lowerNumericBoundIsOpen());
      assertEquals(0, attribute0.numValues());
      assertFalse(attribute0.upperNumericBoundIsOpen());
      assertFalse(attribute0.isRegular());
      assertFalse(attribute0.isAveragable());
      assertEquals(0, Attribute.NUMERIC);
      assertEquals(0, Attribute.ORDERING_SYMBOLIC);
      assertEquals(1, Attribute.ORDERING_ORDERED);
      assertEquals(3, Attribute.DATE);
      assertEquals(2, Attribute.STRING);
      assertEquals(4, Attribute.RELATIONAL);
      assertEquals(2, Attribute.ORDERING_MODULO);
      assertEquals(1, Attribute.NOMINAL);
      
      int int0 = attribute0.indexOfValue(".arff");
      assertEquals((-1), int0);
      assertEquals(2, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertEquals("@relation", instances1.relationName());
      assertEquals(0, instances1.numInstances());
      assertEquals(2, instances1.numAttributes());
      assertEquals((-1), instances1.classIndex());
      assertEquals(0, instances1.size());
      assertEquals(0.0, instances1.sumOfWeights(), 0.01);
      assertFalse(instances1.checkForStringAttributes());
      assertFalse(attribute0.isNominal());
      assertEquals(1.0, attribute0.weight(), 0.01);
      assertEquals("", attribute0.getDateFormat());
      assertTrue(attribute0.isRelationValued());
      assertEquals(0.0, attribute0.getUpperNumericBound(), 0.01);
      assertEquals(122, attribute0.index());
      assertEquals(0.0, attribute0.getLowerNumericBound(), 0.01);
      assertEquals(0, attribute0.ordering());
      assertFalse(attribute0.isString());
      assertFalse(attribute0.isNumeric());
      assertFalse(attribute0.hasZeropoint());
      assertEquals(4, attribute0.type());
      assertFalse(attribute0.isDate());
      assertFalse(attribute0.lowerNumericBoundIsOpen());
      assertEquals(0, attribute0.numValues());
      assertFalse(attribute0.upperNumericBoundIsOpen());
      assertFalse(attribute0.isRegular());
      assertFalse(attribute0.isAveragable());
      assertEquals(0, Attribute.NUMERIC);
      assertEquals(0, Attribute.ORDERING_SYMBOLIC);
      assertEquals(1, Attribute.ORDERING_ORDERED);
      assertEquals(3, Attribute.DATE);
      assertEquals(2, Attribute.STRING);
      assertEquals(4, Attribute.RELATIONAL);
      assertEquals(2, Attribute.ORDERING_MODULO);
      assertEquals(1, Attribute.NOMINAL);
      
      boolean[][] booleanArray0 = new boolean[10][9];
      boolean boolean2 = arrayList0.add(attribute0);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2);
      assertEquals(3, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertEquals("@relation", instances1.relationName());
      assertEquals(0, instances1.numInstances());
      assertEquals((-1), instances1.classIndex());
      assertEquals(3, instances1.numAttributes());
      assertEquals(0, instances1.size());
      assertEquals(0.0, instances1.sumOfWeights(), 0.01);
      assertFalse(instances1.checkForStringAttributes());
      assertFalse(attribute0.isNominal());
      assertEquals(1.0, attribute0.weight(), 0.01);
      assertEquals("", attribute0.getDateFormat());
      assertTrue(attribute0.isRelationValued());
      assertEquals(0.0, attribute0.getUpperNumericBound(), 0.01);
      assertEquals(122, attribute0.index());
      assertEquals(0.0, attribute0.getLowerNumericBound(), 0.01);
      assertEquals(0, attribute0.ordering());
      assertFalse(attribute0.isString());
      assertFalse(attribute0.isNumeric());
      assertFalse(attribute0.hasZeropoint());
      assertEquals(4, attribute0.type());
      assertFalse(attribute0.isDate());
      assertFalse(attribute0.lowerNumericBoundIsOpen());
      assertEquals(0, attribute0.numValues());
      assertFalse(attribute0.upperNumericBoundIsOpen());
      assertFalse(attribute0.isRegular());
      assertFalse(attribute0.isAveragable());
      assertEquals(0, Attribute.NUMERIC);
      assertEquals(0, Attribute.ORDERING_SYMBOLIC);
      assertEquals(1, Attribute.ORDERING_ORDERED);
      assertEquals(3, Attribute.DATE);
      assertEquals(2, Attribute.STRING);
      assertEquals(4, Attribute.RELATIONAL);
      assertEquals(2, Attribute.ORDERING_MODULO);
      assertEquals(1, Attribute.NOMINAL);
      
      System.setCurrentTimeMillis(122);
      boolean[] booleanArray1 = new boolean[11];
      booleanArray1[1] = true;
      booleanArray0[2] = booleanArray1;
      iCSSearchAlgorithm0.calcArcDirections(booleanArray0, booleanArray0);
      assertEquals("This Bayes Network learning algorithm uses conditional independence tests to find a skeleton, finds V-nodes and applies a set of rules to find the directions of the remaining arrows.", iCSSearchAlgorithm0.globalInfo());
      assertEquals("When set to true (default), the initial network used for structure learning is a Naive Bayes Network, that is, a network with an arrow from the classifier node to each other node. When set to false, an empty network is used as initial network structure", iCSSearchAlgorithm0.initAsNaiveBayesTipText());
      assertEquals("SearchAlgorithm\n", iCSSearchAlgorithm0.toString());
      assertEquals("When set to true (default is false), after a network structure is learned a Markov Blanket correction is applied to the network structure. This ensures that all nodes in the network are part of the Markov blanket of the classifier node.", iCSSearchAlgorithm0.markovBlanketClassifierTipText());
      assertEquals(2, iCSSearchAlgorithm0.getMaxCardinality());
      assertEquals("Set the maximum number of parents a node in the Bayes net can have. When initialized as Naive Bayes, setting this parameter to 1 results in a Naive Bayes classifier. When set to 2, a Tree Augmented Bayes Network (TAN) is learned, and when set >2, a Bayes Net Augmented Bayes Network (BAN) is learned. By setting it to a value much larger than the number of nodes in the network (the default of 100000 pretty much guarantees this), no restriction on the number of parents is enforced", iCSSearchAlgorithm0.maxNrOfParentsTipText());
      assertEquals("The score type determines the measure used to judge the quality of a network structure. It can be one of Bayes, BDeu, Minimum Description Length (MDL), Akaike Information Criterion (AIC), and Entropy.", iCSSearchAlgorithm0.scoreTypeTipText());
      assertEquals("When determining whether an edge exists a search is performed for a set Z that separates the nodes. MaxCardinality determines the maximum size of the set Z. This greatly influences the length of the search. Default value is 2.", iCSSearchAlgorithm0.maxCardinalityTipText());
      assertFalse(iCSSearchAlgorithm0.getMarkovBlanketClassifier());
      
      String string0 = iCSSearchAlgorithm0.name(2);
      assertNotNull(string0);
      assertEquals("@data", string0);
      assertEquals("This Bayes Network learning algorithm uses conditional independence tests to find a skeleton, finds V-nodes and applies a set of rules to find the directions of the remaining arrows.", iCSSearchAlgorithm0.globalInfo());
      assertEquals("When set to true (default), the initial network used for structure learning is a Naive Bayes Network, that is, a network with an arrow from the classifier node to each other node. When set to false, an empty network is used as initial network structure", iCSSearchAlgorithm0.initAsNaiveBayesTipText());
      assertEquals("SearchAlgorithm\n", iCSSearchAlgorithm0.toString());
      assertEquals("When set to true (default is false), after a network structure is learned a Markov Blanket correction is applied to the network structure. This ensures that all nodes in the network are part of the Markov blanket of the classifier node.", iCSSearchAlgorithm0.markovBlanketClassifierTipText());
      assertEquals(2, iCSSearchAlgorithm0.getMaxCardinality());
      assertEquals("Set the maximum number of parents a node in the Bayes net can have. When initialized as Naive Bayes, setting this parameter to 1 results in a Naive Bayes classifier. When set to 2, a Tree Augmented Bayes Network (TAN) is learned, and when set >2, a Bayes Net Augmented Bayes Network (BAN) is learned. By setting it to a value much larger than the number of nodes in the network (the default of 100000 pretty much guarantees this), no restriction on the number of parents is enforced", iCSSearchAlgorithm0.maxNrOfParentsTipText());
      assertEquals("The score type determines the measure used to judge the quality of a network structure. It can be one of Bayes, BDeu, Minimum Description Length (MDL), Akaike Information Criterion (AIC), and Entropy.", iCSSearchAlgorithm0.scoreTypeTipText());
      assertEquals("When determining whether an edge exists a search is performed for a set Z that separates the nodes. MaxCardinality determines the maximum size of the set Z. This greatly influences the length of the search. Default value is 2.", iCSSearchAlgorithm0.maxCardinalityTipText());
      assertFalse(iCSSearchAlgorithm0.getMarkovBlanketClassifier());
      
      int int1 = iCSSearchAlgorithm0.next(1, 4, 0, booleanArray0);
      assertFalse(int1 == int0);
      assertEquals(3, int1);
      assertEquals("This Bayes Network learning algorithm uses conditional independence tests to find a skeleton, finds V-nodes and applies a set of rules to find the directions of the remaining arrows.", iCSSearchAlgorithm0.globalInfo());
      assertEquals("When set to true (default), the initial network used for structure learning is a Naive Bayes Network, that is, a network with an arrow from the classifier node to each other node. When set to false, an empty network is used as initial network structure", iCSSearchAlgorithm0.initAsNaiveBayesTipText());
      assertEquals("SearchAlgorithm\n", iCSSearchAlgorithm0.toString());
      assertEquals("When set to true (default is false), after a network structure is learned a Markov Blanket correction is applied to the network structure. This ensures that all nodes in the network are part of the Markov blanket of the classifier node.", iCSSearchAlgorithm0.markovBlanketClassifierTipText());
      assertEquals(2, iCSSearchAlgorithm0.getMaxCardinality());
      assertEquals("Set the maximum number of parents a node in the Bayes net can have. When initialized as Naive Bayes, setting this parameter to 1 results in a Naive Bayes classifier. When set to 2, a Tree Augmented Bayes Network (TAN) is learned, and when set >2, a Bayes Net Augmented Bayes Network (BAN) is learned. By setting it to a value much larger than the number of nodes in the network (the default of 100000 pretty much guarantees this), no restriction on the number of parents is enforced", iCSSearchAlgorithm0.maxNrOfParentsTipText());
      assertEquals("The score type determines the measure used to judge the quality of a network structure. It can be one of Bayes, BDeu, Minimum Description Length (MDL), Akaike Information Criterion (AIC), and Entropy.", iCSSearchAlgorithm0.scoreTypeTipText());
      assertEquals("When determining whether an edge exists a search is performed for a set Z that separates the nodes. MaxCardinality determines the maximum size of the set Z. This greatly influences the length of the search. Default value is 2.", iCSSearchAlgorithm0.maxCardinalityTipText());
      assertFalse(iCSSearchAlgorithm0.getMarkovBlanketClassifier());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ICSSearchAlgorithm iCSSearchAlgorithm0 = new ICSSearchAlgorithm();
      assertNotNull(iCSSearchAlgorithm0);
      assertFalse(iCSSearchAlgorithm0.getMarkovBlanketClassifier());
      assertEquals("When set to true (default), the initial network used for structure learning is a Naive Bayes Network, that is, a network with an arrow from the classifier node to each other node. When set to false, an empty network is used as initial network structure", iCSSearchAlgorithm0.initAsNaiveBayesTipText());
      assertEquals("Set the maximum number of parents a node in the Bayes net can have. When initialized as Naive Bayes, setting this parameter to 1 results in a Naive Bayes classifier. When set to 2, a Tree Augmented Bayes Network (TAN) is learned, and when set >2, a Bayes Net Augmented Bayes Network (BAN) is learned. By setting it to a value much larger than the number of nodes in the network (the default of 100000 pretty much guarantees this), no restriction on the number of parents is enforced", iCSSearchAlgorithm0.maxNrOfParentsTipText());
      assertEquals("This Bayes Network learning algorithm uses conditional independence tests to find a skeleton, finds V-nodes and applies a set of rules to find the directions of the remaining arrows.", iCSSearchAlgorithm0.globalInfo());
      assertEquals("When set to true (default is false), after a network structure is learned a Markov Blanket correction is applied to the network structure. This ensures that all nodes in the network are part of the Markov blanket of the classifier node.", iCSSearchAlgorithm0.markovBlanketClassifierTipText());
      assertEquals(2, iCSSearchAlgorithm0.getMaxCardinality());
      assertEquals("SearchAlgorithm\n", iCSSearchAlgorithm0.toString());
      assertEquals("The score type determines the measure used to judge the quality of a network structure. It can be one of Bayes, BDeu, Minimum Description Length (MDL), Akaike Information Criterion (AIC), and Entropy.", iCSSearchAlgorithm0.scoreTypeTipText());
      assertEquals("When determining whether an edge exists a search is performed for a set Z that separates the nodes. MaxCardinality determines the maximum size of the set Z. This greatly influences the length of the search. Default value is 2.", iCSSearchAlgorithm0.maxCardinalityTipText());
      
      String string0 = iCSSearchAlgorithm0.maxCardinalityTipText();
      assertNotNull(string0);
      assertEquals("When determining whether an edge exists a search is performed for a set Z that separates the nodes. MaxCardinality determines the maximum size of the set Z. This greatly influences the length of the search. Default value is 2.", string0);
      assertFalse(iCSSearchAlgorithm0.getMarkovBlanketClassifier());
      assertEquals("When set to true (default), the initial network used for structure learning is a Naive Bayes Network, that is, a network with an arrow from the classifier node to each other node. When set to false, an empty network is used as initial network structure", iCSSearchAlgorithm0.initAsNaiveBayesTipText());
      assertEquals("Set the maximum number of parents a node in the Bayes net can have. When initialized as Naive Bayes, setting this parameter to 1 results in a Naive Bayes classifier. When set to 2, a Tree Augmented Bayes Network (TAN) is learned, and when set >2, a Bayes Net Augmented Bayes Network (BAN) is learned. By setting it to a value much larger than the number of nodes in the network (the default of 100000 pretty much guarantees this), no restriction on the number of parents is enforced", iCSSearchAlgorithm0.maxNrOfParentsTipText());
      assertEquals("This Bayes Network learning algorithm uses conditional independence tests to find a skeleton, finds V-nodes and applies a set of rules to find the directions of the remaining arrows.", iCSSearchAlgorithm0.globalInfo());
      assertEquals("When set to true (default is false), after a network structure is learned a Markov Blanket correction is applied to the network structure. This ensures that all nodes in the network are part of the Markov blanket of the classifier node.", iCSSearchAlgorithm0.markovBlanketClassifierTipText());
      assertEquals(2, iCSSearchAlgorithm0.getMaxCardinality());
      assertEquals("SearchAlgorithm\n", iCSSearchAlgorithm0.toString());
      assertEquals("The score type determines the measure used to judge the quality of a network structure. It can be one of Bayes, BDeu, Minimum Description Length (MDL), Akaike Information Criterion (AIC), and Entropy.", iCSSearchAlgorithm0.scoreTypeTipText());
      assertEquals("When determining whether an edge exists a search is performed for a set Z that separates the nodes. MaxCardinality determines the maximum size of the set Z. This greatly influences the length of the search. Default value is 2.", iCSSearchAlgorithm0.maxCardinalityTipText());
      
      ICSSearchAlgorithm.SeparationSet iCSSearchAlgorithm_SeparationSet0 = iCSSearchAlgorithm0.new SeparationSet();
      assertNotNull(iCSSearchAlgorithm_SeparationSet0);
      assertFalse(iCSSearchAlgorithm0.getMarkovBlanketClassifier());
      assertEquals("When set to true (default), the initial network used for structure learning is a Naive Bayes Network, that is, a network with an arrow from the classifier node to each other node. When set to false, an empty network is used as initial network structure", iCSSearchAlgorithm0.initAsNaiveBayesTipText());
      assertEquals("Set the maximum number of parents a node in the Bayes net can have. When initialized as Naive Bayes, setting this parameter to 1 results in a Naive Bayes classifier. When set to 2, a Tree Augmented Bayes Network (TAN) is learned, and when set >2, a Bayes Net Augmented Bayes Network (BAN) is learned. By setting it to a value much larger than the number of nodes in the network (the default of 100000 pretty much guarantees this), no restriction on the number of parents is enforced", iCSSearchAlgorithm0.maxNrOfParentsTipText());
      assertEquals("This Bayes Network learning algorithm uses conditional independence tests to find a skeleton, finds V-nodes and applies a set of rules to find the directions of the remaining arrows.", iCSSearchAlgorithm0.globalInfo());
      assertEquals("When set to true (default is false), after a network structure is learned a Markov Blanket correction is applied to the network structure. This ensures that all nodes in the network are part of the Markov blanket of the classifier node.", iCSSearchAlgorithm0.markovBlanketClassifierTipText());
      assertEquals(2, iCSSearchAlgorithm0.getMaxCardinality());
      assertEquals("SearchAlgorithm\n", iCSSearchAlgorithm0.toString());
      assertEquals("The score type determines the measure used to judge the quality of a network structure. It can be one of Bayes, BDeu, Minimum Description Length (MDL), Akaike Information Criterion (AIC), and Entropy.", iCSSearchAlgorithm0.scoreTypeTipText());
      assertEquals("When determining whether an edge exists a search is performed for a set Z that separates the nodes. MaxCardinality determines the maximum size of the set Z. This greatly influences the length of the search. Default value is 2.", iCSSearchAlgorithm0.maxCardinalityTipText());
      
      String string1 = iCSSearchAlgorithm_SeparationSet0.getRevision();
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("8034", string1);
      assertFalse(iCSSearchAlgorithm0.getMarkovBlanketClassifier());
      assertEquals("When set to true (default), the initial network used for structure learning is a Naive Bayes Network, that is, a network with an arrow from the classifier node to each other node. When set to false, an empty network is used as initial network structure", iCSSearchAlgorithm0.initAsNaiveBayesTipText());
      assertEquals("Set the maximum number of parents a node in the Bayes net can have. When initialized as Naive Bayes, setting this parameter to 1 results in a Naive Bayes classifier. When set to 2, a Tree Augmented Bayes Network (TAN) is learned, and when set >2, a Bayes Net Augmented Bayes Network (BAN) is learned. By setting it to a value much larger than the number of nodes in the network (the default of 100000 pretty much guarantees this), no restriction on the number of parents is enforced", iCSSearchAlgorithm0.maxNrOfParentsTipText());
      assertEquals("This Bayes Network learning algorithm uses conditional independence tests to find a skeleton, finds V-nodes and applies a set of rules to find the directions of the remaining arrows.", iCSSearchAlgorithm0.globalInfo());
      assertEquals("When set to true (default is false), after a network structure is learned a Markov Blanket correction is applied to the network structure. This ensures that all nodes in the network are part of the Markov blanket of the classifier node.", iCSSearchAlgorithm0.markovBlanketClassifierTipText());
      assertEquals(2, iCSSearchAlgorithm0.getMaxCardinality());
      assertEquals("SearchAlgorithm\n", iCSSearchAlgorithm0.toString());
      assertEquals("The score type determines the measure used to judge the quality of a network structure. It can be one of Bayes, BDeu, Minimum Description Length (MDL), Akaike Information Criterion (AIC), and Entropy.", iCSSearchAlgorithm0.scoreTypeTipText());
      assertEquals("When determining whether an edge exists a search is performed for a set Z that separates the nodes. MaxCardinality determines the maximum size of the set Z. This greatly influences the length of the search. Default value is 2.", iCSSearchAlgorithm0.maxCardinalityTipText());
      
      int[] intArray0 = new int[9];
      intArray0[0] = (-1);
      intArray0[1] = 35;
      intArray0[2] = (-126);
      intArray0[3] = (-3230);
      intArray0[4] = 1320;
      intArray0[5] = 48;
      intArray0[6] = (-771);
      intArray0[7] = 1;
      intArray0[8] = 42;
      iCSSearchAlgorithm_SeparationSet0.m_set = intArray0;
      assertFalse(iCSSearchAlgorithm0.getMarkovBlanketClassifier());
      assertEquals("When set to true (default), the initial network used for structure learning is a Naive Bayes Network, that is, a network with an arrow from the classifier node to each other node. When set to false, an empty network is used as initial network structure", iCSSearchAlgorithm0.initAsNaiveBayesTipText());
      assertEquals("Set the maximum number of parents a node in the Bayes net can have. When initialized as Naive Bayes, setting this parameter to 1 results in a Naive Bayes classifier. When set to 2, a Tree Augmented Bayes Network (TAN) is learned, and when set >2, a Bayes Net Augmented Bayes Network (BAN) is learned. By setting it to a value much larger than the number of nodes in the network (the default of 100000 pretty much guarantees this), no restriction on the number of parents is enforced", iCSSearchAlgorithm0.maxNrOfParentsTipText());
      assertEquals("This Bayes Network learning algorithm uses conditional independence tests to find a skeleton, finds V-nodes and applies a set of rules to find the directions of the remaining arrows.", iCSSearchAlgorithm0.globalInfo());
      assertEquals("When set to true (default is false), after a network structure is learned a Markov Blanket correction is applied to the network structure. This ensures that all nodes in the network are part of the Markov blanket of the classifier node.", iCSSearchAlgorithm0.markovBlanketClassifierTipText());
      assertEquals(2, iCSSearchAlgorithm0.getMaxCardinality());
      assertEquals("SearchAlgorithm\n", iCSSearchAlgorithm0.toString());
      assertEquals("The score type determines the measure used to judge the quality of a network structure. It can be one of Bayes, BDeu, Minimum Description Length (MDL), Akaike Information Criterion (AIC), and Entropy.", iCSSearchAlgorithm0.scoreTypeTipText());
      assertEquals("When determining whether an edge exists a search is performed for a set Z that separates the nodes. MaxCardinality determines the maximum size of the set Z. This greatly influences the length of the search. Default value is 2.", iCSSearchAlgorithm0.maxCardinalityTipText());
      
      boolean boolean0 = iCSSearchAlgorithm_SeparationSet0.contains(2524);
      assertFalse(boolean0);
      assertFalse(iCSSearchAlgorithm0.getMarkovBlanketClassifier());
      assertEquals("When set to true (default), the initial network used for structure learning is a Naive Bayes Network, that is, a network with an arrow from the classifier node to each other node. When set to false, an empty network is used as initial network structure", iCSSearchAlgorithm0.initAsNaiveBayesTipText());
      assertEquals("Set the maximum number of parents a node in the Bayes net can have. When initialized as Naive Bayes, setting this parameter to 1 results in a Naive Bayes classifier. When set to 2, a Tree Augmented Bayes Network (TAN) is learned, and when set >2, a Bayes Net Augmented Bayes Network (BAN) is learned. By setting it to a value much larger than the number of nodes in the network (the default of 100000 pretty much guarantees this), no restriction on the number of parents is enforced", iCSSearchAlgorithm0.maxNrOfParentsTipText());
      assertEquals("This Bayes Network learning algorithm uses conditional independence tests to find a skeleton, finds V-nodes and applies a set of rules to find the directions of the remaining arrows.", iCSSearchAlgorithm0.globalInfo());
      assertEquals("When set to true (default is false), after a network structure is learned a Markov Blanket correction is applied to the network structure. This ensures that all nodes in the network are part of the Markov blanket of the classifier node.", iCSSearchAlgorithm0.markovBlanketClassifierTipText());
      assertEquals(2, iCSSearchAlgorithm0.getMaxCardinality());
      assertEquals("SearchAlgorithm\n", iCSSearchAlgorithm0.toString());
      assertEquals("The score type determines the measure used to judge the quality of a network structure. It can be one of Bayes, BDeu, Minimum Description Length (MDL), Akaike Information Criterion (AIC), and Entropy.", iCSSearchAlgorithm0.scoreTypeTipText());
      assertEquals("When determining whether an edge exists a search is performed for a set Z that separates the nodes. MaxCardinality determines the maximum size of the set Z. This greatly influences the length of the search. Default value is 2.", iCSSearchAlgorithm0.maxCardinalityTipText());
  }
}
