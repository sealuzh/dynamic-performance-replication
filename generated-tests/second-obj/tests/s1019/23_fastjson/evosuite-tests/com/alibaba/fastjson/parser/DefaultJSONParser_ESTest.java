/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 06:14:40 GMT 2018
 */

package com.alibaba.fastjson.parser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.parser.DefaultJSONParser;
import com.alibaba.fastjson.parser.Feature;
import com.alibaba.fastjson.parser.JSONLexerBase;
import com.alibaba.fastjson.parser.JSONReaderScanner;
import com.alibaba.fastjson.parser.JSONScanner;
import com.alibaba.fastjson.parser.ParseContext;
import com.alibaba.fastjson.parser.ParserConfig;
import com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory;
import com.alibaba.fastjson.parser.deserializer.ExtraProcessor;
import com.alibaba.fastjson.parser.deserializer.FieldTypeResolver;
import com.alibaba.fastjson.parser.deserializer.PropertyProcessable;
import com.alibaba.fastjson.parser.deserializer.ResolveFieldDeserializer;
import com.alibaba.fastjson.parser.deserializer.ThrowableDeserializer;
import com.alibaba.fastjson.serializer.LongCodec;
import com.alibaba.fastjson.util.ASMClassLoader;
import com.alibaba.fastjson.util.ParameterizedTypeImpl;
import java.awt.BufferCapabilities;
import java.awt.Dimension;
import java.awt.GridBagConstraints;
import java.awt.ImageCapabilities;
import java.awt.Insets;
import java.awt.JobAttributes;
import java.awt.Point;
import java.awt.Rectangle;
import java.awt.RenderingHints;
import java.awt.geom.Point2D;
import java.lang.reflect.Field;
import java.lang.reflect.Method;
import java.lang.reflect.Type;
import java.math.BigInteger;
import java.net.HttpCookie;
import java.nio.ByteBuffer;
import java.sql.Date;
import java.sql.Timestamp;
import java.text.BreakIterator;
import java.text.ChoiceFormat;
import java.text.DateFormat;
import java.text.DateFormatSymbols;
import java.text.DecimalFormat;
import java.text.DecimalFormatSymbols;
import java.text.FieldPosition;
import java.text.Format;
import java.text.NumberFormat;
import java.text.StringCharacterIterator;
import java.time.ZoneOffset;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.BitSet;
import java.util.Collection;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Hashtable;
import java.util.IdentityHashMap;
import java.util.LinkedHashMap;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.SimpleTimeZone;
import java.util.Stack;
import java.util.TimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.text.MockDateFormat;
import org.evosuite.runtime.mock.java.text.MockSimpleDateFormat;
import org.evosuite.runtime.mock.java.time.chrono.MockHijrahDate;
import org.evosuite.runtime.mock.java.time.chrono.MockJapaneseDate;
import org.evosuite.runtime.mock.java.time.chrono.MockMinguoDate;
import org.evosuite.runtime.mock.java.time.chrono.MockThaiBuddhistDate;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DefaultJSONParser_ESTest extends DefaultJSONParser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("#99L/&o+niI'nXQgh");
      PropertyProcessable propertyProcessable0 = mock(PropertyProcessable.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse(propertyProcessable0, (Object) "#99L/&o+niI'nXQgh");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect [, actual error, pos 0, fieldName #99L/&o+niI'nXQgh
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("#99L/&o+niI'nXQgh");
      PropertyProcessable propertyProcessable0 = mock(PropertyProcessable.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse(propertyProcessable0, (Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect [, actual error, pos 0, fieldName null
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      ParserConfig parserConfig0 = new ParserConfig(aSMClassLoader0);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("K", parserConfig0);
      Feature feature0 = Feature.DisableFieldSmartMatch;
      defaultJSONParser0.config(feature0, false);
      assertEquals(0, defaultJSONParser0.resolveStatus);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("E*/ORyw05bT7T,)t", 25);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONScanner0);
      defaultJSONParser0.getConfig();
      assertEquals(1, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("Gl8Uox*h!nO7%qa");
      FieldTypeResolver fieldTypeResolver0 = defaultJSONParser0.fieldTypeResolver;
      defaultJSONParser0.setFieldTypeResolver((FieldTypeResolver) null);
      assertEquals(0, defaultJSONParser0.resolveStatus);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig(false);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("$can not cast to double, value : ", parserConfig0, 6);
      Class<MockMinguoDate> class0 = MockMinguoDate.class;
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect {, actual error, pos 0, fastjson-version 1.2.46
         //
         verifyException("com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("7hLv-#|Ng*sxqE");
      defaultJSONParser0.resolveReference("7hLv-#|Ng*sxqE");
      defaultJSONParser0.parseKey();
      DateFormat dateFormat0 = DateFormat.getTimeInstance();
      defaultJSONParser0.setDateFomrat(dateFormat0);
      Hashtable<DateFormatSymbols, Timestamp> hashtable0 = new Hashtable<DateFormatSymbols, Timestamp>();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Map) hashtable0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect {, actual error, pos 2, json : 7hLv-#|Ng*sxqE
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("uR", parserConfig0, 1172);
      Class<Insets> class0 = Insets.class;
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // default constructor not found. class java.awt.Insets
         //
         verifyException("com.alibaba.fastjson.util.JavaBeanInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{>T6hJq'U,]t", parserConfig0);
      Class<Short> class0 = Short.TYPE;
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArrayWithType(class0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Class cannot be cast to java.lang.reflect.ParameterizedType
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ArrayList<ExtraProcessor> arrayList0 = new ArrayList<ExtraProcessor>();
      Dimension dimension0 = new Dimension();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("vuR");
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, json : vuR
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(", property ", parserConfig0, 259);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse((Object) parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, json : , property 
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(".|z.kEP42zsBc>c?|", parserConfig0);
      LongCodec longCodec0 = new LongCodec();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseKey();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, json : .|z.kEP42zsBc>c?|
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("unclosed jsonArray");
      defaultJSONParser0.getExtraProcessors();
      defaultJSONParser0.resolveReference("syntax error, expect {, actual ");
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect {, actual ident, pos 8, json : unclosed jsonArray
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("ow:J&0[.xv", parserConfig0, 21);
      Class<MockThaiBuddhistDate> class0 = MockThaiBuddhistDate.class;
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArray(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // exepct '[', but error, pos 1, json : ow:J&0[.xv
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(", nae");
      JSONObject jSONObject0 = new JSONObject(1);
      DateFormat dateFormat0 = defaultJSONParser0.getDateFormat();
      assertNotNull(dateFormat0);
      assertEquals(0, defaultJSONParser0.resolveStatus);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      DefaultJSONParser defaultJSONParser0 = null;
      try {
        defaultJSONParser0 = new DefaultJSONParser((char[]) null, 68, parserConfig0, 68);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Dimension dimension0 = new Dimension();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("uR");
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Type) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 2, json : uR
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("2Gv^qfWZsO79C[~F:-V");
      defaultJSONParser0.getExtraTypeProviders();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect {, actual int, pos 1, json : 2Gv^qfWZsO79C[~F:-V
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("unclosed", parserConfig0);
      defaultJSONParser0.getSymbolTable();
      assertEquals(0, defaultJSONParser0.resolveStatus);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("unclosed jsonArray");
      List<ExtraProcessor> list0 = defaultJSONParser0.getExtraProcessors();
      defaultJSONParser0.checkListResolve(list0);
      assertEquals(0, defaultJSONParser0.resolveStatus);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      TimeZone.getDefault();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("k");
      defaultJSONParser0.getDateFomartPattern();
      // Undeclared exception!
      try { 
        defaultJSONParser0.close();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not close json text, token : error
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("exepct '[', but ");
      List<DefaultJSONParser.ResolveTask> list0 = defaultJSONParser0.getResolveTaskList();
      assertNotNull(list0);
      
      int int0 = defaultJSONParser0.getResolveStatus();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(";Ljava/lang/Object;Ljava/lang/String;Ljava/lang/Object;)Ljava/lang/String;", parserConfig0);
      // Undeclared exception!
      try { 
        defaultJSONParser0.accept(54);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect Unknown, actual ;
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("bNcyXE");
      defaultJSONParser0.setConfig((ParserConfig) null);
      Class<MockHijrahDate> class0 = MockHijrahDate.class;
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject(class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("", parserConfig0, (-759));
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Object) "");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect {, actual EOF
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(", nae");
      JSONObject jSONObject0 = new JSONObject(0);
      // Undeclared exception!
      try { 
        defaultJSONParser0.getLastResolveTask();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = ' ';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, ' ');
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONReaderScanner0);
      HashSet<BitSet> hashSet0 = new HashSet<BitSet>();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArray((Collection) hashSet0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect [, actual EOF, pos 0, fieldName null
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("}");
      defaultJSONParser0.getFieldTypeResolver();
      ClassLoader.getSystemClassLoader();
      Class<Byte> class0 = Byte.TYPE;
      DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser(defaultJSONParser0.lexer);
      defaultJSONParser1.close();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Map) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect {, actual EOF, pos 0, json : }
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("2Gv^qfWZsO79C[~F:-V");
      defaultJSONParser0.getExtraTypeProviders();
      // Undeclared exception!
      try { 
        defaultJSONParser0.throwException(2822);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect Unknown, actual int
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("");
      // Undeclared exception!
      try { 
        defaultJSONParser0.accept(0, 0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect Unknown, actual EOF
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ClassLoader.getSystemClassLoader();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Dimension dimension0 = new Dimension();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("");
      Object object0 = defaultJSONParser0.parse();
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("2Gv^qfWZsO79C[~F:-V");
      defaultJSONParser0.getExtraTypeProviders();
      String string0 = defaultJSONParser0.getInput();
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("[short");
      NumberFormat.getInstance();
      FieldPosition fieldPosition0 = new FieldPosition(1);
      DecimalFormat decimalFormat0 = new DecimalFormat();
      LinkedList<MockJapaneseDate> linkedList0 = new LinkedList<MockJapaneseDate>();
      LinkedHashSet<BreakIterator> linkedHashSet0 = new LinkedHashSet<BreakIterator>();
      Type[] typeArray0 = new Type[0];
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArray(typeArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("}");
      defaultJSONParser0.getFieldTypeResolver();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArray((Type[]) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error : }
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      ArrayList<ExtraProcessor> arrayList0 = new ArrayList<ExtraProcessor>();
      Dimension dimension0 = new Dimension();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("uR");
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 2, json : uR
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("[short");
      JSONArray jSONArray0 = new JSONArray(1);
      defaultJSONParser0.getInput();
      DecimalFormat decimalFormat0 = new DecimalFormat();
      JSON.setDefaultTypeKey("[short");
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 2, json : [short
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(", na:1");
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, position at 0, name na
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      PropertyProcessable propertyProcessable0 = mock(PropertyProcessable.class, new ViolatedAssumptionAnswer());
      ParserConfig parserConfig0 = new ParserConfig();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("[", parserConfig0, 3);
      Class<ImageCapabilities> class0 = ImageCapabilities.class;
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // default constructor not found. class java.awt.ImageCapabilities
         //
         verifyException("com.alibaba.fastjson.util.JavaBeanInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      String string0 = "[short";
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("[short");
      // Undeclared exception!
      try { 
        JSON.parseArray("[short");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 2, json : [short
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      parserConfig0.setDefaultClassLoader(classLoader0);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("[short", parserConfig0, 44);
      LinkedHashSet<BufferCapabilities> linkedHashSet0 = new LinkedHashSet<BufferCapabilities>(198);
      defaultJSONParser0.checkListResolve(linkedHashSet0);
      Dimension dimension0 = new Dimension();
      Dimension dimension1 = new Dimension();
      PropertyProcessable propertyProcessable0 = mock(PropertyProcessable.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse(propertyProcessable0, (Object) "[short");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 2, json : [short
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("NzGMW K02s", 12);
      ParserConfig parserConfig0 = ParserConfig.global;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONReaderScanner0, parserConfig0);
      defaultJSONParser0.parseKey();
      Class<Byte> class0 = Byte.class;
      // Undeclared exception!
      try { 
        parserConfig0.checkAutoType("", class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // autoType is not support. 
         //
         verifyException("com.alibaba.fastjson.parser.ParserConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("unclosed jsonArray");
      Object object0 = new Object();
      defaultJSONParser0.checkMapResolve((Map) null, (Object) null);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("syntax error, expect {, actual ");
      defaultJSONParser0.setResolveStatus(3722);
      GridBagConstraints gridBagConstraints0 = new GridBagConstraints();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Object) gridBagConstraints0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect {, actual ident
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      DecimalFormat decimalFormat0 = new DecimalFormat();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{>T6hJq'U=*t", parserConfig0);
      List<ExtraProcessor> list0 = defaultJSONParser0.getExtraProcessors();
      defaultJSONParser0.checkListResolve(list0);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Map) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal identifier : >pos 1, json : {>T6hJq'U=*t
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(", nae");
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expect ':' at 0, actual \u001A
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      FileSystemHandling.shouldAllThrowIOExceptions();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("[", parserConfig0, (-1166));
      Class<Byte> class0 = Byte.TYPE;
      defaultJSONParser0.popContext();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArray((Type) class0, (Collection) null, (Object) parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unterminated json string, pos 0, json : [
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 108, 108);
      ParserConfig parserConfig0 = new ParserConfig();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONReaderScanner0, parserConfig0);
      defaultJSONParser0.getLexer();
      assertEquals(20, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{>T6hJq'U=*t", parserConfig0);
      List<ExtraProcessor> list0 = defaultJSONParser0.getExtraProcessors();
      defaultJSONParser0.checkListResolve(list0);
      defaultJSONParser0.getExtraProcessors();
      defaultJSONParser0.getInput();
      ParserConfig parserConfig1 = ParserConfig.global;
      assertFalse(parserConfig1.compatibleWithJavaBean);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("zvT@LvQ1?d^r/#Z");
      defaultJSONParser0.fieldTypeResolver = null;
      ParserConfig parserConfig0 = new ParserConfig((ASMDeserializerFactory) null);
      ParserConfig.global = parserConfig0;
      defaultJSONParser0.setDateFormat("`9exsH'6R!w");
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect {, actual error, pos 1, json : zvT@LvQ1?d^r/#Z
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      parserConfig0.setDefaultClassLoader(classLoader0);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{>T6hJq'U=*t", parserConfig0);
      Class<Short> class0 = Short.TYPE;
      Object object0 = new Object();
      defaultJSONParser0.getContext();
      defaultJSONParser0.getResolveStatus();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Type) class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal identifier : >pos 1, json : {>T6hJq'U=*t
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("[short");
      JSONArray jSONArray0 = new JSONArray(1);
      JSON.defaultLocale = jSONArray0.defaultLocale;
      defaultJSONParser0.getDateFormat();
      LinkedHashSet<BreakIterator> linkedHashSet0 = new LinkedHashSet<BreakIterator>();
      Class<DefaultJSONParser.ResolveTask> class0 = DefaultJSONParser.ResolveTask.class;
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArray(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect {, actual error, pos 1, fastjson-version 1.2.46
         //
         verifyException("com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      ParserConfig parserConfig1 = new ParserConfig();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("[short", parserConfig0, 44);
      Class<Boolean> class0 = Boolean.TYPE;
      Class<Boolean> class1 = Boolean.TYPE;
      NumberFormat.getInstance();
      StringBuffer stringBuffer0 = new StringBuffer("fastjson.parser.autoTypeSupport");
      FieldPosition fieldPosition0 = new FieldPosition(0);
      DecimalFormat decimalFormat0 = new DecimalFormat();
      StringBuffer stringBuffer1 = decimalFormat0.format(0L, stringBuffer0, fieldPosition0);
      LinkedList<MockJapaneseDate> linkedList0 = new LinkedList<MockJapaneseDate>();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArray((Type) class1, (Collection) linkedList0, (Object) stringBuffer1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // parseBoolean error, field : 0
         //
         verifyException("com.alibaba.fastjson.serializer.BooleanCodec", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("TODO : ", parserConfig0, 1172);
      Class<Insets> class0 = Insets.class;
      defaultJSONParser0.close();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // default constructor not found. class java.awt.Insets
         //
         verifyException("com.alibaba.fastjson.util.JavaBeanInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("[short", parserConfig0, 36);
      classLoader0.setDefaultAssertionStatus(true);
      Class<Boolean> class0 = Boolean.TYPE;
      NumberFormat.getInstance();
      DecimalFormat decimalFormat0 = new DecimalFormat();
      LinkedList<MockJapaneseDate> linkedList0 = new LinkedList<MockJapaneseDate>();
      LinkedHashSet<BreakIterator> linkedHashSet0 = new LinkedHashSet<BreakIterator>();
      Double double0 = new Double(2350.46956);
      ParseContext parseContext0 = defaultJSONParser0.setContext((Object) double0, (Object) double0);
      DefaultJSONParser.ResolveTask defaultJSONParser_ResolveTask0 = new DefaultJSONParser.ResolveTask(parseContext0, "fastjson.parser.autoTypeSupport");
      defaultJSONParser0.addResolveTask(defaultJSONParser_ResolveTask0);
      char[] charArray0 = new char[0];
      JSONScanner jSONScanner0 = new JSONScanner("fastjson.parser.deny");
      defaultJSONParser0.handleResovleTask(classLoader0);
      Float float0 = new Float((float) 36);
      Class<Boolean> class1 = Boolean.TYPE;
      HashMap<MockDate, Method> hashMap0 = new HashMap<MockDate, Method>();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Map) hashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect {, actual [, pos 1, json : [short
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("(D");
      defaultJSONParser0.handleResovleTask("(D");
      Feature feature0 = Feature.IgnoreAutoType;
      boolean boolean0 = defaultJSONParser0.isEnabled(feature0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Class<Boolean> class0 = Boolean.TYPE;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      ParserConfig parserConfig0 = new ParserConfig(aSMClassLoader0);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("NaN", parserConfig0, 19);
      Class<Boolean> class1 = Boolean.TYPE;
      defaultJSONParser0.parseObject((Type) class0);
      HashSet<BreakIterator> hashSet0 = new HashSet<BreakIterator>();
      // Undeclared exception!
      try { 
        defaultJSONParser0.popContext();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Class<Boolean> class0 = Boolean.TYPE;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl((Type[]) null, class0, class0);
      Class<Byte> class1 = Byte.TYPE;
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("}", parserConfig0, 102);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, json : }
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      classLoader0.setDefaultAssertionStatus(true);
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      ParserConfig parserConfig1 = new ParserConfig();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("[short", parserConfig0, 44);
      Class<Boolean> class0 = Boolean.TYPE;
      Class<Boolean> class1 = Boolean.TYPE;
      NumberFormat.getInstance();
      StringBuffer stringBuffer0 = new StringBuffer("fastjson.parser.autoTypeSupport");
      FieldPosition fieldPosition0 = new FieldPosition((Format.Field) null);
      DecimalFormat decimalFormat0 = new DecimalFormat();
      decimalFormat0.format(0L, stringBuffer0, fieldPosition0);
      ParserConfig parserConfig2 = new ParserConfig((ASMDeserializerFactory) null);
      DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser(")GFuJHub9v Iwm\"Q.", parserConfig2, 1);
      // Undeclared exception!
      try { 
        defaultJSONParser1.parse();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, json : )GFuJHub9v Iwm\"Q.
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      FileSystemHandling.shouldAllThrowIOExceptions();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("[", parserConfig0, (-1166));
      Class<Byte> class0 = Byte.TYPE;
      Class<Float> class1 = Float.TYPE;
      Type[] typeArray0 = new Type[2];
      typeArray0[0] = (Type) class1;
      typeArray0[1] = (Type) class0;
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArray(typeArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // parseLong error, field : 0
         //
         verifyException("com.alibaba.fastjson.serializer.FloatCodec", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("illegal ref, ");
      defaultJSONParser0.setResolveStatus(11);
      assertEquals(11, defaultJSONParser0.resolveStatus);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      ArrayList<ExtraProcessor> arrayList0 = new ArrayList<ExtraProcessor>();
      Hashtable<RenderingHints, BigInteger> hashtable0 = new Hashtable<RenderingHints, BigInteger>();
      Class<ThrowableDeserializer> class0 = ThrowableDeserializer.class;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("]HD{");
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(", property ");
      Dimension dimension0 = new Dimension();
      Dimension dimension1 = new Dimension(dimension0);
      Rectangle rectangle0 = new Rectangle(dimension1);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-128);
      byteArray0[1] = (byte)54;
      byteArray0[2] = (byte) (-23);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      defaultJSONParser0.setContext((ParseContext) null, (Object) rectangle0, (Object) bigInteger0);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Type) class0, (Object) jSONReaderScanner0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - \u001A, info : pos 11, json : , property 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      ParserConfig parserConfig1 = new ParserConfig();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("[shIro", parserConfig0, 44);
      DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser("[shIro", parserConfig0, 1);
      Class<Boolean> class0 = Boolean.TYPE;
      NumberFormat.getInstance();
      FieldPosition fieldPosition0 = new FieldPosition(34);
      DecimalFormat decimalFormat0 = new DecimalFormat();
      LinkedList<MockJapaneseDate> linkedList0 = new LinkedList<MockJapaneseDate>();
      Class<Integer> class1 = Integer.TYPE;
      Class<MockJapaneseDate> class2 = MockJapaneseDate.class;
      ThrowableDeserializer throwableDeserializer0 = new ThrowableDeserializer(parserConfig1, class2);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArray((Type) class1, (Collection) linkedList0, (Object) throwableDeserializer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // parseInt error, field : null
         //
         verifyException("com.alibaba.fastjson.serializer.IntegerCodec", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("m-Sv!P5B#");
      DefaultJSONParser.ResolveTask defaultJSONParser_ResolveTask0 = new DefaultJSONParser.ResolveTask((ParseContext) null, "m-Sv!P5B#");
      defaultJSONParser0.addResolveTask(defaultJSONParser_ResolveTask0);
      // Undeclared exception!
      try { 
        defaultJSONParser0.accept(57);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect Unknown, actual error
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      ClassLoader.getSystemClassLoader();
      ArrayList<ExtraProcessor> arrayList0 = new ArrayList<ExtraProcessor>();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(", property ");
      Dimension dimension0 = new Dimension();
      dimension0.width = 0;
      Dimension dimension1 = new Dimension(dimension0);
      StringBuffer stringBuffer0 = new StringBuffer("%!GHTxBpEB[Oh61W>J");
      FieldPosition fieldPosition0 = new FieldPosition((Format.Field) null);
      ParserConfig parserConfig0 = new ParserConfig((ASMDeserializerFactory) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser(", property ", parserConfig0, 0);
      // Undeclared exception!
      try { 
        defaultJSONParser1.parseObject();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("com.alibaba.fastjson.serializer.EnumSerializer", (-16));
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONScanner0, parserConfig0);
      defaultJSONParser0.setConfig(parserConfig0);
      defaultJSONParser0.getConfig();
      defaultJSONParser0.popContext();
      assertEquals(1, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("[", parserConfig0, (-1166));
      Object object0 = new Object();
      defaultJSONParser0.getInput();
      DecimalFormat decimalFormat0 = new DecimalFormat();
      LinkedList<MockJapaneseDate> linkedList0 = new LinkedList<MockJapaneseDate>();
      LinkedHashSet<BreakIterator> linkedHashSet0 = new LinkedHashSet<BreakIterator>();
      FieldPosition fieldPosition0 = new FieldPosition(1);
      HashSet<HttpCookie> hashSet0 = new HashSet<HttpCookie>();
      NumberFormat.getInstance();
      defaultJSONParser0.popContext();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseKey();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed jsonArray
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      parserConfig0.setDefaultClassLoader(classLoader0);
      String string0 = "[short";
      classLoader0.clearAssertionStatus();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("[short", parserConfig0, 44);
      classLoader0.setPackageAssertionStatus("fastjson.parser.autoTypeSupport", false);
      NumberFormat.getInstance();
      FieldPosition fieldPosition0 = new FieldPosition((Format.Field) null);
      DecimalFormat decimalFormat0 = new DecimalFormat();
      LinkedList<MockJapaneseDate> linkedList0 = new LinkedList<MockJapaneseDate>();
      LinkedHashSet<BreakIterator> linkedHashSet0 = new LinkedHashSet<BreakIterator>();
      Type[] typeArray0 = new Type[1];
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArray(typeArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 2, json : [short
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-1));
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-1);
      char[] charArray0 = new char[3];
      charArray0[2] = '&';
      charArray0[0] = 'F';
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 0, (byte) (-1));
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(charArray0, jSONScanner0, parserConfig0);
      defaultJSONParser0.popContext();
      Stack<DefaultJSONParser.ResolveTask> stack0 = new Stack<DefaultJSONParser.ResolveTask>();
      String string0 = defaultJSONParser0.getInput();
      assertEquals("F\u0000&", string0);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Hashtable<RenderingHints, BigInteger> hashtable0 = new Hashtable<RenderingHints, BigInteger>();
      Hashtable<RenderingHints, BigInteger> hashtable1 = new Hashtable<RenderingHints, BigInteger>();
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("]HD{");
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(", property ");
      Dimension dimension0 = new Dimension();
      Dimension dimension1 = new Dimension(dimension0);
      Dimension dimension2 = new Dimension((-3281), 2);
      Rectangle rectangle0 = new Rectangle(dimension2);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-128);
      byteArray0[1] = (byte) (-128);
      byteArray0[2] = (byte) (-23);
      byteArray0[3] = (byte)54;
      byteArray0[4] = (byte) (-23);
      byteArray0[5] = (byte)54;
      byteArray0[6] = (byte)119;
      byteArray0[7] = (byte) (-23);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      bigInteger0.getLowestSetBit();
      ParserConfig parserConfig0 = ParserConfig.global;
      DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser(defaultJSONParser0, jSONReaderScanner0, parserConfig0);
      GridBagConstraints gridBagConstraints0 = new GridBagConstraints();
      defaultJSONParser1.setContext((ParseContext) null, (Object) hashtable0, (Object) gridBagConstraints0);
      // Undeclared exception!
      try { 
        defaultJSONParser1.parseObject((Type) null, (Object) defaultJSONParser0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, 
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("'T'W^!Vz_Z*Dy`DiD");
      ClassLoader.getSystemClassLoader();
      Hashtable<BufferCapabilities, Feature> hashtable0 = new Hashtable<BufferCapabilities, Feature>();
      Point point0 = new Point(0, 0);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect {, actual string, pos 3, json : 'T'W^!Vz_Z*Dy`DiD
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-1));
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-1);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(";X2El");
      Stack<Dimension> stack0 = new Stack<Dimension>();
      Class<Byte> class0 = Byte.TYPE;
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte)102;
      BigInteger bigInteger0 = new BigInteger(byteArray1);
      defaultJSONParser0.getContext();
      defaultJSONParser0.setContext((ParseContext) null, (Object) null, (Object) stack0);
      defaultJSONParser0.popContext();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 2, json : ;X2El
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{6Fi,<");
      ParseContext parseContext0 = defaultJSONParser0.setContext((Object) "{6Fi,<", (Object) "{6Fi,<");
      assertNotNull(parseContext0);
      
      String string0 = "\\ur*>~2?5hCh:";
      Object object0 = defaultJSONParser0.getObject(string0);
      assertNull(object0);
      
      int int0 = defaultJSONParser0.getResolveStatus();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      ArrayList<ExtraProcessor> arrayList0 = new ArrayList<ExtraProcessor>();
      // Undeclared exception!
      try { 
        JSON.parseObject("(C");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, json : (C
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{>T6hJq'U=*t", parserConfig0);
      IdentityHashMap<String, Field> identityHashMap0 = new IdentityHashMap<String, Field>();
      ParserConfig.getFieldFromCache("N8L", identityHashMap0);
      ClassLoader classLoader1 = classLoader0.getParent();
      classLoader0.setClassAssertionStatus("fastjson.parser.autoTypeAccept", false);
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader1);
      defaultJSONParser0.setConfig(parserConfig0);
      defaultJSONParser0.getExtraProcessors();
      Double double0 = new Double(0);
      PropertyProcessable propertyProcessable0 = mock(PropertyProcessable.class, new ViolatedAssumptionAnswer());
      Locale locale0 = Locale.CHINESE;
      Locale locale1 = Locale.FRENCH;
      locale0.getDisplayLanguage(locale1);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse(propertyProcessable0, (Object) locale0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal identifier : >pos 1, json : {>T6hJq'U=*t
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      ParserConfig parserConfig0 = ParserConfig.global;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(":W$&d:\"Ri]9\"UY&lw");
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, json : :W$&d:\"Ri]9\"UY&lw
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      int int0 = (-995);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("[short", parserConfig0, (-995));
      classLoader0.setDefaultAssertionStatus(true);
      Class<Boolean> class0 = Boolean.TYPE;
      NumberFormat.getInstance();
      DecimalFormat decimalFormat0 = new DecimalFormat();
      LinkedList<MockJapaneseDate> linkedList0 = new LinkedList<MockJapaneseDate>();
      LinkedHashSet<BreakIterator> linkedHashSet0 = new LinkedHashSet<BreakIterator>();
      Double double0 = new Double(2350.46956);
      defaultJSONParser0.setContext((Object) double0, (Object) double0);
      DefaultJSONParser.ResolveTask defaultJSONParser_ResolveTask0 = new DefaultJSONParser.ResolveTask((ParseContext) null, "fastjson.parser.autoTypeSupport");
      defaultJSONParser0.addResolveTask(defaultJSONParser_ResolveTask0);
      char[] charArray0 = new char[0];
      JSONScanner jSONScanner0 = new JSONScanner("fastjson.parser.deny");
      // Undeclared exception!
      try { 
        defaultJSONParser0.handleResovleTask(classLoader0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      parserConfig0.setDefaultClassLoader(classLoader0);
      classLoader0.clearAssertionStatus();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("'T'W^!Vz_Z*Dy`DiD", parserConfig0);
      Class<Short> class0 = Short.TYPE;
      int int0 = defaultJSONParser0.getResolveStatus();
      assertEquals(0, int0);
      
      defaultJSONParser0.parse((Object) class0);
      List<DefaultJSONParser.ResolveTask> list0 = defaultJSONParser0.getResolveTaskList();
      assertNotNull(list0);
      assertEquals(0, defaultJSONParser0.getResolveStatus());
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(":W$&d:\"Ri]9\"UY&lw", 1395);
      long long0 = JSONLexerBase.MULTMIN_RADIX_TEN;
      ParserConfig parserConfig0 = ParserConfig.global;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONReaderScanner0, parserConfig0);
      jSONReaderScanner0.scanString();
      Hashtable<BufferCapabilities, Feature> hashtable0 = new Hashtable<BufferCapabilities, Feature>();
      Rectangle rectangle0 = new Rectangle(0, 0, 45, 2096);
      Rectangle rectangle1 = new Rectangle(rectangle0);
      defaultJSONParser0.parse();
      // Undeclared exception!
      try { 
        defaultJSONParser0.popContext();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-1));
      Boolean boolean0 = new Boolean(true);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-1);
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-1);
      char[] charArray0 = new char[21];
      charArray0[2] = 'F';
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 0, (byte) (-1));
      ParserConfig parserConfig0 = new ParserConfig();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(charArray0, jSONScanner0, parserConfig0);
      Stack<DefaultJSONParser.ResolveTask> stack0 = new Stack<DefaultJSONParser.ResolveTask>();
      JSON.DEFAULT_GENERATE_FEATURE = 7;
      Hashtable<String, Field> hashtable0 = new Hashtable<String, Field>();
      // Undeclared exception!
      try { 
        defaultJSONParser0.accept(20);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // EOF error
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(", na:61");
      JSONObject jSONObject0 = new JSONObject();
      Point2D.Double point2D_Double0 = new Point2D.Double(0, 1.0);
      ParseContext parseContext0 = defaultJSONParser0.setContext((ParseContext) null, (Object) null, (Object) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "[e[s$SSPR9pO4%");
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      LinkedList<MockJapaneseDate> linkedList0 = new LinkedList<MockJapaneseDate>();
      LinkedHashSet<BreakIterator> linkedHashSet0 = new LinkedHashSet<BreakIterator>();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      defaultJSONParser0.resolveReference("T");
      Class<Float> class0 = Float.TYPE;
      parseContext0.toString();
      JSONObject jSONObject1 = jSONObject0.fluentClear();
      assertTrue(jSONObject1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("'T'W^!Vz_Z*Dy`DiD");
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      Class<Short> class0 = Short.TYPE;
      defaultJSONParser0.lastBeanContext = null;
      defaultJSONParser0.getContext();
      defaultJSONParser0.setContext((ParseContext) null);
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      defaultJSONParser0.setConfig(parserConfig0);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Type) class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // parseShort error, field : null
         //
         verifyException("com.alibaba.fastjson.parser.deserializer.NumberDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("}");
      defaultJSONParser0.getFieldTypeResolver();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "}");
      Point point0 = new Point((-2345), 0);
      defaultJSONParser0.parseObject();
      Hashtable<BufferCapabilities, Feature> hashtable0 = new Hashtable<BufferCapabilities, Feature>();
      ImageCapabilities imageCapabilities0 = new ImageCapabilities(true);
      BufferCapabilities.FlipContents bufferCapabilities_FlipContents0 = BufferCapabilities.FlipContents.COPIED;
      defaultJSONParser0.getExtraProcessors();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      defaultJSONParser0.setConfig(parserConfig0);
      defaultJSONParser0.getExtraProcessors();
      Double double0 = new Double(0);
      Locale locale0 = Locale.CHINESE;
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      ArrayDeque<Locale> arrayDeque0 = new ArrayDeque<Locale>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      Locale.filter((List<Locale.LanguageRange>) arrayList0, (Collection<Locale>) arrayDeque0, locale_FilteringMode0);
      defaultJSONParser0.getResolveTaskList();
      DefaultJSONParser defaultJSONParser1 = null;
      try {
        defaultJSONParser1 = new DefaultJSONParser(defaultJSONParser0.lexer);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // EOF error
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Dimension dimension0 = new Dimension();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("");
      Object object0 = new Object();
      ClassLoader classLoader1 = classLoader0.getParent();
      ClassLoader.getSystemClassLoader();
      ClassLoader classLoader2 = ClassLoader.getSystemClassLoader();
      classLoader1.setDefaultAssertionStatus(false);
      ClassLoader classLoader3 = classLoader2.getParent();
      LinkedList<MockJapaneseDate> linkedList0 = new LinkedList<MockJapaneseDate>();
      LinkedHashSet<BreakIterator> linkedHashSet0 = new LinkedHashSet<BreakIterator>();
      Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
      FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      defaultJSONParser0.parseKey();
      ClassLoader.getSystemClassLoader();
      defaultJSONParser0.getExtraTypeProviders();
      defaultJSONParser0.getExtraTypeProviders();
      String string0 = "_";
      try { 
        classLoader3.loadClass("_");
        fail("Expecting exception: ClassNotFoundException");
      
      } catch(ClassNotFoundException e) {
      }
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(":z");
      defaultJSONParser0.accept(17, 17);
      defaultJSONParser0.getLexer();
      DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser(":z");
      Stack<Dimension> stack0 = new Stack<Dimension>();
      Class<Byte> class0 = Byte.TYPE;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      RenderingHints.Key renderingHints_Key0 = mock(RenderingHints.Key.class, new ViolatedAssumptionAnswer());
      RenderingHints renderingHints0 = new RenderingHints(renderingHints_Key0, fileSystemHandling0);
      ClassLoader.getSystemClassLoader();
      ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      ParserConfig.global = parserConfig0;
      ImageCapabilities imageCapabilities0 = new ImageCapabilities(true);
      BufferCapabilities.FlipContents bufferCapabilities_FlipContents0 = BufferCapabilities.FlipContents.UNDEFINED;
      BufferCapabilities.FlipContents bufferCapabilities_FlipContents1 = BufferCapabilities.FlipContents.BACKGROUND;
      BufferCapabilities bufferCapabilities0 = new BufferCapabilities(imageCapabilities0, imageCapabilities0, bufferCapabilities_FlipContents1);
      Hashtable<BufferCapabilities, Feature> hashtable0 = new Hashtable<BufferCapabilities, Feature>();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "KAPomz'7OBQ#Wp>?+dL");
      Hashtable<DefaultJSONParser.ResolveTask, Date> hashtable1 = new Hashtable<DefaultJSONParser.ResolveTask, Date>();
      Locale locale0 = new Locale("S.xw$$W0S82tj{*}K{");
      DecimalFormatSymbols decimalFormatSymbols0 = new DecimalFormatSymbols(locale0);
      ZoneOffset zoneOffset0 = ZoneOffset.MIN;
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(0);
      BitSet.valueOf(byteBuffer0);
      // Undeclared exception!
      try { 
        defaultJSONParser1.parseExtra(":z", "nq<r'KIs|j#H}.(");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - z, info : pos 1, json : :z
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      parserConfig0.setDefaultClassLoader(classLoader0);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("[short", parserConfig0, 44);
      LinkedHashSet<BufferCapabilities> linkedHashSet0 = new LinkedHashSet<BufferCapabilities>(198);
      defaultJSONParser0.checkListResolve(linkedHashSet0);
      Dimension dimension0 = new Dimension();
      defaultJSONParser0.getContext();
      DefaultJSONParser.ResolveTask defaultJSONParser_ResolveTask0 = new DefaultJSONParser.ResolveTask((ParseContext) null, "$.byte");
      defaultJSONParser0.addResolveTask(defaultJSONParser_ResolveTask0);
      JSONScanner jSONScanner0 = new JSONScanner("[short");
      Object object0 = new Object();
      defaultJSONParser0.handleResovleTask(object0);
      defaultJSONParser0.getExtraTypeProviders();
      Float float0 = new Float(0.0F);
      Hashtable<DateFormatSymbols, DefaultJSONParser.ResolveTask> hashtable0 = new Hashtable<DateFormatSymbols, DefaultJSONParser.ResolveTask>();
      // Undeclared exception!
      try { 
        defaultJSONParser0.popContext();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("[short");
      JSONArray jSONArray0 = new JSONArray();
      FieldPosition fieldPosition0 = new FieldPosition(1);
      DecimalFormat decimalFormat0 = new DecimalFormat();
      JSON.setDefaultTypeKey("[short");
      defaultJSONParser0.getDateFormat();
      LinkedList<MockJapaneseDate> linkedList0 = new LinkedList<MockJapaneseDate>();
      LinkedHashSet<BreakIterator> linkedHashSet0 = new LinkedHashSet<BreakIterator>();
      Type[] typeArray0 = new Type[0];
      jSONArray0.toArray();
      defaultJSONParser0.getLexer();
      defaultJSONParser0.getDateFormat();
      defaultJSONParser0.getContext();
      defaultJSONParser0.getResolveTaskList();
      // Undeclared exception!
      try { 
        defaultJSONParser0.close();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not close json text, token : [
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(", r;pery6");
      HashMap<BitSet, MockJapaneseDate> hashMap0 = new HashMap<BitSet, MockJapaneseDate>();
      defaultJSONParser0.getFieldTypeResolver();
      Feature feature0 = Feature.DisableASM;
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Object) feature0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - ;, info : pos 3, json : , r;pery6
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(", r;pery6");
      Point point0 = new Point(1, 0);
      point0.x = 25;
      Point point1 = new Point();
      HashMap<BitSet, MockJapaneseDate> hashMap0 = new HashMap<BitSet, MockJapaneseDate>();
      defaultJSONParser0.getFieldTypeResolver();
      Feature feature0 = Feature.DisableASM;
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Object) ", r;pery6");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - ;, info : pos 3, json : , r;pery6
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      parserConfig0.defaultClassLoader = classLoader0;
      parserConfig0.setDefaultClassLoader(classLoader0);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{>T6hJq'U=*t", parserConfig0);
      Class<Short> class0 = Short.TYPE;
      Object object0 = new Object();
      defaultJSONParser0.getContext();
      Long.getLong("$.java.awt.Dimension[width=0,height=0].null", (long) 0);
      LinkedHashSet<BreakIterator> linkedHashSet0 = new LinkedHashSet<BreakIterator>();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      defaultJSONParser0.resolveReference("$.java.awt.Dimension[width=0,height=0].null");
      Stack<StringCharacterIterator> stack0 = new Stack<StringCharacterIterator>();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Class<Float> class1 = Float.TYPE;
      defaultJSONParser0.getExtraProcessors();
      Feature feature0 = Feature.DisableASM;
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Object) linkedHashSet0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal identifier : >pos 1, json : {>T6hJq'U=*t
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("[short", parserConfig0, 31);
      classLoader0.setDefaultAssertionStatus(true);
      Class<Boolean> class0 = Boolean.TYPE;
      DecimalFormat decimalFormat0 = new DecimalFormat();
      DecimalFormat decimalFormat1 = new DecimalFormat();
      LinkedList<MockJapaneseDate> linkedList0 = new LinkedList<MockJapaneseDate>();
      LinkedHashSet<BreakIterator> linkedHashSet0 = new LinkedHashSet<BreakIterator>();
      Double double0 = new Double(2348.26918579412);
      ParseContext parseContext0 = defaultJSONParser0.setContext((Object) double0, (Object) double0);
      parseContext0.toString();
      parseContext0.toString();
      classLoader0.setPackageAssertionStatus("fastjson.parser.deny", false);
      parseContext0.toString();
      DefaultJSONParser.ResolveTask defaultJSONParser_ResolveTask0 = new DefaultJSONParser.ResolveTask(parseContext0, "fastjson.parser.autoTypeSupport");
      defaultJSONParser_ResolveTask0.ownerContext = parseContext0;
      defaultJSONParser0.addResolveTask(defaultJSONParser_ResolveTask0);
      JSONScanner jSONScanner0 = new JSONScanner("fastjson.parser.deny");
      defaultJSONParser0.handleResovleTask(classLoader0);
      Float float0 = new Float((float) 31);
      defaultJSONParser0.getObject("@");
      Feature feature0 = Feature.AllowSingleQuotes;
      defaultJSONParser0.isEnabled(feature0);
      // Undeclared exception!
      try { 
        DateFormat.getTimeInstance((-1052));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style -1052
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("[short", parserConfig0, 36);
      classLoader0.setDefaultAssertionStatus(true);
      Class<Boolean> class0 = Boolean.TYPE;
      DecimalFormat decimalFormat0 = new DecimalFormat();
      DecimalFormat decimalFormat1 = new DecimalFormat();
      LinkedList<MockJapaneseDate> linkedList0 = new LinkedList<MockJapaneseDate>();
      LinkedHashSet<BreakIterator> linkedHashSet0 = new LinkedHashSet<BreakIterator>();
      Double double0 = new Double(1);
      HttpCookie httpCookie0 = new HttpCookie("[short", "fastjson.parser.deny");
      ParseContext parseContext0 = defaultJSONParser0.setContext((Object) httpCookie0, (Object) null);
      DefaultJSONParser.ResolveTask defaultJSONParser_ResolveTask0 = new DefaultJSONParser.ResolveTask(parseContext0, "$.[B@14a0baf2");
      defaultJSONParser0.addResolveTask(defaultJSONParser_ResolveTask0);
      JSONScanner jSONScanner0 = new JSONScanner("fastjson.parser.deny");
      defaultJSONParser0.addResolveTask(defaultJSONParser_ResolveTask0);
      JSONScanner jSONScanner1 = new JSONScanner("_{vSYd", 36);
      defaultJSONParser0.handleResovleTask(decimalFormat0);
      Float float0 = new Float((float) 0);
      DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser("_{vSYd", parserConfig0, 123);
      defaultJSONParser1.getObject("fastjson.parser.autoTypeSupport");
      Feature feature0 = Feature.UseBigDecimal;
      defaultJSONParser1.isEnabled(feature0);
      DefaultJSONParser defaultJSONParser2 = null;
      try {
        defaultJSONParser2 = new DefaultJSONParser("fastjson.parser.autoTypeSupport", parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("[short", parserConfig0, 31);
      classLoader0.setDefaultAssertionStatus(true);
      Class<Boolean> class0 = Boolean.TYPE;
      DecimalFormat decimalFormat0 = new DecimalFormat();
      DecimalFormat decimalFormat1 = new DecimalFormat();
      LinkedList<MockJapaneseDate> linkedList0 = new LinkedList<MockJapaneseDate>();
      MockHijrahDate mockHijrahDate0 = new MockHijrahDate();
      MockHijrahDate mockHijrahDate1 = new MockHijrahDate();
      MockHijrahDate mockHijrahDate2 = new MockHijrahDate();
      MockHijrahDate mockHijrahDate3 = new MockHijrahDate();
      MockHijrahDate mockHijrahDate4 = new MockHijrahDate();
      MockHijrahDate mockHijrahDate5 = new MockHijrahDate();
      LinkedHashSet<BreakIterator> linkedHashSet0 = new LinkedHashSet<BreakIterator>();
      Double double0 = new Double(0);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1, "fastjson.parser.autoTypeAccept");
      ParseContext parseContext0 = defaultJSONParser0.setContext((Object) decimalFormat1, (Object) simpleTimeZone0);
      parseContext0.toString();
      parseContext0.toString();
      DefaultJSONParser.ResolveTask defaultJSONParser_ResolveTask0 = new DefaultJSONParser.ResolveTask(parseContext0, "[EA.1\"`ymNaB<");
      ResolveFieldDeserializer resolveFieldDeserializer0 = new ResolveFieldDeserializer(linkedList0);
      defaultJSONParser0.addResolveTask(defaultJSONParser_ResolveTask0);
      JSONScanner jSONScanner0 = new JSONScanner("[EA.1\"`ymNaB<", 34);
      defaultJSONParser0.handleResovleTask(mockHijrahDate0);
      Float float0 = new Float((-911.678F));
      Class<DefaultJSONParser.ResolveTask> class1 = DefaultJSONParser.ResolveTask.class;
      defaultJSONParser0.getResolveTaskList();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Type) class1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect {, actual [, pos 0, fastjson-version 1.2.46
         //
         verifyException("com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("[", parserConfig0, (-1166));
      Class<Byte> class0 = Byte.TYPE;
      defaultJSONParser0.popContext();
      ParserConfig parserConfig1 = new ParserConfig();
      MockHijrahDate mockHijrahDate0 = new MockHijrahDate();
      FileSystemHandling.shouldAllThrowIOExceptions();
      defaultJSONParser0.setContext((Object) parserConfig1, (Object) mockHijrahDate0);
      defaultJSONParser0.getSymbolTable();
      Class<MockDate> class1 = MockDate.class;
      ThrowableDeserializer throwableDeserializer0 = new ThrowableDeserializer(parserConfig1, class1);
      defaultJSONParser0.setContext((ParseContext) null, (Object) throwableDeserializer0, (Object) mockHijrahDate0);
      LinkedHashSet<BreakIterator> linkedHashSet0 = new LinkedHashSet<BreakIterator>();
      defaultJSONParser0.checkMapResolve((Map) null, parserConfig0);
      // Undeclared exception!
      try { 
        BitSet.valueOf((long[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.BitSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      MockThaiBuddhistDate mockThaiBuddhistDate0 = new MockThaiBuddhistDate();
      ParserConfig.getGlobalInstance();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(", na:1");
      ParseContext parseContext0 = defaultJSONParser0.context;
      int int0 = 4084;
      IdentityHashMap<JSONScanner, ParameterizedTypeImpl> identityHashMap0 = new IdentityHashMap<JSONScanner, ParameterizedTypeImpl>();
      Rectangle rectangle0 = new Rectangle(4084, 7, 2, (-1458));
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Map) identityHashMap0, (Object) rectangle0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, position at 0, name na
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("'T'W^!Vz_Z*Dy`DiD");
      ClassLoader.getSystemClassLoader();
      MockHijrahDate mockHijrahDate0 = new MockHijrahDate();
      MockHijrahDate mockHijrahDate1 = new MockHijrahDate();
      MockHijrahDate mockHijrahDate2 = new MockHijrahDate();
      MockHijrahDate mockHijrahDate3 = new MockHijrahDate();
      LinkedHashSet<BreakIterator> linkedHashSet0 = new LinkedHashSet<BreakIterator>();
      Double double0 = new Double(Double.NaN);
      MockJapaneseDate mockJapaneseDate0 = new MockJapaneseDate();
      MockDate mockDate0 = new MockDate(2, 0, 0, 0, (-166));
      ParseContext parseContext0 = defaultJSONParser0.setContext((Object) mockJapaneseDate0, (Object) mockDate0);
      parseContext0.toString();
      parseContext0.toString();
      DefaultJSONParser.ResolveTask defaultJSONParser_ResolveTask0 = new DefaultJSONParser.ResolveTask(parseContext0, "$");
      ResolveFieldDeserializer resolveFieldDeserializer0 = new ResolveFieldDeserializer(linkedHashSet0);
      defaultJSONParser0.addResolveTask(defaultJSONParser_ResolveTask0);
      JSONScanner jSONScanner0 = new JSONScanner("fOyCE4fKuwh16@)N\"V^", 1);
      defaultJSONParser0.handleResovleTask(parseContext0);
      Float float0 = new Float(212.4822F);
      LinkedHashSet<BreakIterator> linkedHashSet1 = new LinkedHashSet<BreakIterator>();
      Class<DefaultJSONParser.ResolveTask> class0 = DefaultJSONParser.ResolveTask.class;
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArray(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // exepct '[', but string, pos 3, json : 'T'W^!Vz_Z*Dy`DiD
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test94()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(",Wa:r");
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 5, json : ,Wa:r
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }
}
