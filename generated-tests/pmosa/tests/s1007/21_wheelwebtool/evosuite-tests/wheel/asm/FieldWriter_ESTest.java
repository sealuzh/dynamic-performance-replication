/*
 * This file was automatically generated by EvoSuite
 * Tue Jul 17 09:30:00 GMT 2018
 */

package wheel.asm;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import wheel.asm.AnnotationVisitor;
import wheel.asm.Attribute;
import wheel.asm.ByteVector;
import wheel.asm.ClassWriter;
import wheel.asm.FieldWriter;
import wheel.asm.Frame;
import wheel.asm.Item;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class FieldWriter_ESTest extends FieldWriter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(2);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 1, "m>k,oQ!3 ^\"0}N", "m>k,oQ!3 ^\"0}N", "m>k,oQ!3 ^\"0}N", "m>k,oQ!3 ^\"0}N");
      fieldWriter0.getSize();
      AnnotationVisitor annotationVisitor0 = fieldWriter0.visitAnnotation("8GGjVjFe*", true);
      assertNotNull(annotationVisitor0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(1000);
      Item[] itemArray0 = new Item[7];
      Item item0 = classWriter0.key2;
      itemArray0[0] = item0;
      Item item1 = classWriter0.newInteger(1000);
      itemArray0[1] = item1;
      Item item2 = new Item();
      itemArray0[2] = item2;
      Item item3 = new Item((-1649));
      itemArray0[3] = item3;
      Item item4 = new Item();
      itemArray0[4] = item4;
      Item item5 = classWriter0.key;
      itemArray0[5] = item5;
      item2.strVal3 = "";
      Item item6 = new Item((-3089));
      itemArray0[6] = item6;
      classWriter0.typeTable = itemArray0;
      String string0 = "";
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-2218), "", "", "", "");
      fieldWriter0.visitAnnotation("xe(AI:vf^CWXXVS", false);
      fieldWriter0.visitAnnotation("", false);
      item1.strVal1 = "";
      // Undeclared exception!
      try { 
        fieldWriter0.visitAttribute((Attribute) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.FieldWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(2);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 1, "}[{6U0WL", "}[{6U0WL", "%_`mTTueN#Q?f", "%_`mTTueN#Q?f");
      fieldWriter0.visitAnnotation("8GGjVjFe*", true);
      fieldWriter0.visitEnd();
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(2);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 1, "}[{6U0WL", "}[{6U0WL", "%_`mTTueN#Q?f", "%_`mTTueN#Q?f");
      fieldWriter0.getSize();
      AnnotationVisitor annotationVisitor0 = fieldWriter0.visitAnnotation("8GGjVjFe*", true);
      assertNotNull(annotationVisitor0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-1324));
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-1324), "", "", "", "");
      ByteVector byteVector0 = classWriter0.pool;
      ByteVector byteVector1 = byteVector0.put11(2, 0);
      fieldWriter0.put(byteVector1);
      classWriter0.addType("`uj=xO8mY");
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)1;
      FieldWriter fieldWriter1 = classWriter0.firstField;
      int int0 = fieldWriter1.getSize();
      assertEquals(36, int0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(196);
      ClassWriter classWriter1 = new ClassWriter(1);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-2049), "R3&\"C8o;I)daB", "", (String) null, (Object) null);
      FieldWriter fieldWriter1 = classWriter0.firstField;
      int int0 = fieldWriter0.getSize();
      assertEquals(20, int0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-1324));
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-1324), "", "", "", "");
      byte[] byteArray0 = new byte[6];
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "Exceptions";
      stringArray0[4] = "I+dT.!QWOnF";
      classWriter0.visit((-1884), 12, "", "", "", stringArray0);
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      FieldWriter fieldWriter1 = null;
      try {
        fieldWriter1 = new FieldWriter(classWriter0, (byte)0, "", "@A&>93%TNly-/nQ:T1T", "@A&>93%TNly-/nQ:T1T", classWriter0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // value wheel.asm.ClassWriter@5
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-1324));
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-1324), "", "", "", "");
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)1;
      FieldWriter fieldWriter1 = classWriter0.firstField;
      String[] stringArray0 = new String[5];
      stringArray0[0] = "FcX";
      stringArray0[1] = "FcX";
      stringArray0[2] = "FcX";
      stringArray0[3] = "";
      stringArray0[4] = "";
      classWriter0.visit(923, (byte)0, "", "FcX", (String) null, stringArray0);
      fieldWriter1.getSize();
      int int0 = fieldWriter1.getSize();
      assertEquals(30, int0);
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-1324));
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 2, "(", "(", (String) null, (Object) null);
      ByteVector byteVector0 = classWriter0.pool;
      byteVector0.put11(2, 1);
      fieldWriter0.put(byteVector0);
      FieldWriter fieldWriter1 = classWriter0.firstField;
      int int0 = Frame.BASE;
      assertEquals(16777216, int0);
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-1320));
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-1320), "", "", "", "");
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "*dW~[FC>WCi7";
      classWriter0.visit((-1320), (-79), "", "", "", stringArray0);
      ByteVector byteVector0 = classWriter0.pool;
      fieldWriter0.put(byteVector0);
      int int0 = Frame.BASE;
      fieldWriter0.put(byteVector0);
      fieldWriter0.visitAnnotation("]0.bt^N5$W;", true);
      Attribute attribute0 = new Attribute("");
      fieldWriter0.visitAttribute(attribute0);
      assertTrue(attribute0.isUnknown());
  }
}
