/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 24 13:48:14 GMT 2019
 */

package org.apache.bcel.classfile;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayOutputStream;
import java.io.DataInput;
import java.io.EOFException;
import java.io.File;
import java.io.OutputStream;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.util.zip.ZipException;
import org.apache.bcel.classfile.Constant;
import org.apache.bcel.classfile.ConstantClass;
import org.apache.bcel.classfile.ConstantDouble;
import org.apache.bcel.classfile.ConstantFieldref;
import org.apache.bcel.classfile.ConstantFloat;
import org.apache.bcel.classfile.ConstantInteger;
import org.apache.bcel.classfile.ConstantInterfaceMethodref;
import org.apache.bcel.classfile.ConstantInvokeDynamic;
import org.apache.bcel.classfile.ConstantLong;
import org.apache.bcel.classfile.ConstantMethodHandle;
import org.apache.bcel.classfile.ConstantMethodType;
import org.apache.bcel.classfile.ConstantMethodref;
import org.apache.bcel.classfile.ConstantNameAndType;
import org.apache.bcel.classfile.ConstantPool;
import org.apache.bcel.classfile.ConstantString;
import org.apache.bcel.classfile.ConstantUtf8;
import org.apache.bcel.classfile.EmptyVisitor;
import org.apache.bcel.classfile.LocalVariable;
import org.apache.bcel.classfile.Utility;
import org.apache.bcel.util.ByteSequence;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.io.MockRandomAccessFile;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Utility_ESTest extends Utility_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Utility.fillup("!iF1f8_HCYd", 18, false, ',');
      Utility.getSignature("new");
      Utility.searchOpcode("!iF1f8_HCYd");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)16;
      byteArray0[1] = (byte) (-101);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)4;
      byteArray0[5] = (byte)63;
      byteArray0[6] = (byte) (-19);
      byteArray0[7] = (byte) (-86);
      byteArray0[8] = (byte)85;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, 64, (int) (byte)85, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      String string0 = "!HI)LG?.T9rtWZ";
      try { 
        Utility.typeOfSignature("!HI)LG?.T9rtWZ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: HI)LG?.T9rtWZ
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "ACC_SUPER flag\t\t");
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)87;
      byteArray0[1] = (byte)49;
      byteArray0[2] = (byte)91;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "ACC_SUPER flag\t\t");
      byteArray0[3] = (byte) (-10);
      byteArray0[4] = (byte)91;
      byteArray0[5] = (byte) (-117);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (-1676), (int) (byte) (-10), false);
      assertEquals("0:    pop\n1:    daload\n2:    dup_x2\n3:    <illegal opcode>\n4:    dup_x2\n5:    f2i\n", string0);
      
      String string1 = Utility.compactClassName("breakpoint", false);
      assertEquals("breakpoint", string1);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Utility.setBit((-904), 3283);
      Utility.clearBit(3283, (-1145));
      try { 
        Utility.typeOfSignature("3`kb\"7");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 3`kb\"7
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)126;
      byteArray0[1] = (byte) (-86);
      byteArray0[2] = (byte) (-108);
      byteArray0[3] = (byte) (-49);
      byteArray0[4] = (byte)110;
      byteArray0[5] = (byte)82;
      byteArray0[6] = (byte)123;
      byteArray0[7] = (byte) (-86);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string0 = Utility.codeToString(byteSequence0, constantPool0);
      assertEquals("iand", string0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Utility.compactClassName("java.lang.Class", true);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-4);
      byteArray0[1] = (byte) (-58);
      byteArray0[2] = (byte)90;
      byteArray0[3] = (byte) (-74);
      byteArray0[4] = (byte) (-99);
      byteArray0[5] = (byte)79;
      byteArray0[6] = (byte)123;
      byteArray0[7] = (byte)98;
      byteArray0[8] = (byte)42;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 177, 36);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      String string0 = "&DM";
      Utility.searchOpcode("&DM");
      try { 
        Utility.typeOfSignature("&DM");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: &DM
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String[] stringArray0 = new String[0];
      Utility.methodTypeToSignature("'|M#)^", stringArray0);
      String[] stringArray1 = Utility.methodSignatureArgumentTypes("()L'|M#)^;");
      assertEquals(0, stringArray1.length);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-120);
      byteArray0[1] = (byte)16;
      byteArray0[2] = (byte) (-39);
      byteArray0[3] = (byte)23;
      byteArray0[4] = (byte)90;
      byteArray0[5] = (byte)22;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      constantPool0.accept(emptyVisitor0);
      Utility.codeToString(byteSequence0, constantPool0, false);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)90, (int) (byte) (-120));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "ACC_SUPER flag\t\t");
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)87;
      byteArray0[1] = (byte)97;
      byteArray0[2] = (byte)107;
      byteArray0[3] = (byte) (-10);
      byteArray0[4] = (byte)86;
      byteArray0[5] = (byte) (-117);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (-1676), (-247), false);
      assertEquals("0:    pop\n1:    ladd\n2:    dmul\n3:    <illegal opcode>\n4:    sastore\n5:    f2i\n", string0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      boolean boolean0 = false;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-86);
      byteArray0[1] = (byte)66;
      byteArray0[2] = (byte)65;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-28);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      byteArray0[5] = (byte)70;
      byteArray0[6] = (byte)64;
      byteArray0[7] = (byte) (-103);
      byteArray0[8] = (byte)36;
      Utility.equals(byteArray0, byteArray0);
      Utility.encode(byteArray0, true);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[1];
      ConstantLong constantLong0 = new ConstantLong((byte)70);
      constantArray0[0] = (Constant) constantLong0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      try { 
        Utility.codeToString(byteSequence0, constantPool0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      String string0 = "newarray";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "newarray");
      try { 
        Utility.typeOfSignature("R]>%GkwCR7VQQ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: R]>%GkwCR7VQQ
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-35);
      byteArray0[1] = (byte)95;
      byteArray0[2] = (byte)95;
      byteArray0[3] = (byte) (-101);
      byteArray0[4] = (byte)43;
      byteArray0[5] = (byte)43;
      byteArray0[6] = (byte)43;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[3];
      ConstantFloat constantFloat0 = new ConstantFloat(2374.0F);
      constantArray0[0] = (Constant) constantFloat0;
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref(byteSequence0);
      constantArray0[2] = (Constant) constantInterfaceMethodref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Utility.codeToString(byteSequence0, constantPool0, false);
      Utility.getSignature("aload_1");
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)95, (int) (byte) (-35), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)107;
      byteArray0[1] = (byte) (-74);
      byteArray0[2] = (byte) (-86);
      byteArray0[3] = (byte) (-39);
      byteArray0[4] = (byte) (-35);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-39), (-3832));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("byte");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      PrintStream printStream0 = mockPrintStream0.append((CharSequence) "byte");
      mockPrintStream0.print((Object) null);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) printStream0;
      mockFileOutputStream0.release();
      Object object0 = new Object();
      objectArray0[1] = object0;
      Utility.printArray(printStream0, objectArray0);
      String string0 = "W_k#gVY3";
      try { 
        Utility.typeOfSignature("W_k#gVY3");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: W_k#gVY3
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)39;
      byteArray0[1] = (byte)4;
      byteArray0[2] = (byte) (-71);
      byteArray0[3] = (byte)77;
      byteArray0[4] = (byte) (-82);
      byteArray0[5] = (byte) (-82);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[5];
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(752, 4839);
      constantArray0[0] = (Constant) constantNameAndType0;
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(byteSequence0);
      constantArray0[1] = (Constant) constantMethodHandle0;
      ConstantMethodHandle constantMethodHandle1 = new ConstantMethodHandle(constantMethodHandle0);
      constantArray0[2] = (Constant) constantMethodHandle1;
      ConstantString constantString0 = new ConstantString((byte) (-82));
      constantArray0[3] = (Constant) constantString0;
      ConstantClass constantClass0 = new ConstantClass(byteSequence0);
      constantArray0[4] = (Constant) constantClass0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Utility.codeToString(byteSequence0, constantPool0);
      Utility.isSet(59, 4839);
      Utility.compactClassName("freturn", "8nNI*Lo1\")h", false);
      try { 
        Utility.typeOfMethodSignature("8nNI*Lo1\")h");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 8nNI*Lo1\")h
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Utility.compactClassName("K=W-.UkeZQ0n<]&2DI", false);
      Utility.compactClassName("K=W-.UkeZQ0n<]&2DI", "BXVv2s]", false);
      try { 
        Utility.typeOfSignature("K=W-.UkeZQ0n<]&2DI");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: K=W-.UkeZQ0n<]&2DI
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)30;
      byteArray0[1] = (byte)34;
      byteArray0[2] = (byte)8;
      byteArray0[3] = (byte) (-112);
      byteArray0[4] = (byte) (-20);
      byteArray0[5] = (byte)30;
      byteArray0[6] = (byte) (-29);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 10, 822);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      String string0 = Utility.accessToString(77, false);
      assertEquals("public protected static volatile", string0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)3;
      byteArray0[1] = (byte) (-62);
      byteArray0[2] = (byte)68;
      byteArray0[3] = (byte)13;
      byteArray0[4] = (byte)77;
      byteArray0[5] = (byte)91;
      byteArray0[6] = (byte)65;
      byteArray0[7] = (byte)41;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      String string1 = Utility.codeToString(byteArray0, constantPool1, (-45), 77);
      assertEquals("0:    iconst_0\n1:    monitorenter\n2:    fstore_1\n3:    fconst_2\n4:    astore_2\n5:    dup_x2\n6:    lstore_2\n7:    dload_3\n", string1);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.decode("Lorg/apache/bcel/classfile/Utility$1;V", false);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"1;\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Utility.typeOfSignature("V!b|=zRqBEIL");
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)12;
      byteArray0[1] = (byte)12;
      byteArray0[2] = (byte)12;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "fconst_1";
      byteSequence0.reset();
      stringArray0[1] = "cE`a1e";
      stringArray0[2] = "monitorexit";
      stringArray0[3] = "fconst_1";
      stringArray0[4] = "V!b|=zRqBEIL";
      stringArray0[5] = "fconst_1";
      stringArray0[6] = "V!b|=zRqBEIL";
      Utility.methodTypeToSignature("fconst_1", stringArray0);
      Utility.methodTypeToSignature("V!b|=zRqBEIL", stringArray0);
      Utility.setBit(269, 269);
      try { 
        Utility.typeOfSignature(")trGthrbYp");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: )trGthrbYp
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Utility.typeOfSignature("FJO=fW# ");
      Utility.convertString("FJO=fW# ");
      Utility.accessToString((int) (byte)6, false);
      Utility.classOrInterface((byte)6);
      // Undeclared exception!
      try { 
        Utility.signatureToString("\\", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `\\'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      Object object5 = new Object();
      objectArray0[5] = object5;
      Object object6 = new Object();
      objectArray0[6] = object6;
      Utility.printArray(objectArray0);
      try { 
        Utility.typeOfSignature(".^0dj64P--RqWNFk");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: .^0dj64P--RqWNFk
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-120);
      byteArray0[1] = (byte)16;
      byteArray0[2] = (byte) (-39);
      byteArray0[3] = (byte)23;
      byteArray0[4] = (byte)90;
      byteArray0[5] = (byte)22;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("l2i", string0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      int int0 = Utility.setBit((-3130), 1620);
      assertEquals((-3130), int0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-12);
      byteArray0[1] = (byte) (-42);
      byteArray0[2] = (byte) (-7);
      byteArray0[3] = (byte)72;
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-42), (-1590));
      assertEquals("0:    <illegal opcode>\n1:    <illegal opcode>\n2:    <illegal opcode>\n3:    dstore_1\n", string0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Utility.isJavaIdentifierPart('^');
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.compactClassName("\t\t%", true);
      Utility.searchOpcode("\t\t%");
      Utility.replace("\t\t%", "\t\t%", "\t\t%");
      Utility.searchOpcode("\t\t%");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = Utility.fillup("\t\t%", 1189, false, 'd');
      String string1 = Utility.fillup(string0, (short) (-1), true, 'B');
      Utility.classOrInterface(1189);
      Utility.accessToString(4096);
      String string2 = Utility.compactClassName(string1);
      String string3 = Utility.format(1189, (-1609), true, '}');
      String[] stringArray0 = new String[8];
      stringArray0[0] = " fields:\n";
      stringArray0[1] = string2;
      stringArray0[2] = "class";
      stringArray0[3] = "1189";
      stringArray0[4] = string0;
      stringArray0[5] = string0;
      stringArray0[6] = string0;
      stringArray0[7] = "synthetic";
      String string4 = Utility.methodTypeToSignature("\t\t%", stringArray0);
      assertFalse(string4.equals((Object)string3));
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)46;
      byteArray0[1] = (byte)99;
      byteArray0[2] = (byte)7;
      byteArray0[3] = (byte)84;
      byteArray0[4] = (byte)78;
      byteArray0[5] = (byte)69;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)7, (int) (byte)7, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-68);
      byteArray0[1] = (byte) (-79);
      byteArray0[2] = (byte) (-97);
      byteArray0[3] = (byte) (-84);
      byteArray0[4] = (byte) (-84);
      byteArray0[5] = (byte) (-59);
      byteArray0[6] = (byte) (-33);
      byteArray0[7] = (byte)123;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)123, (-2556), true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-81);
      byteArray0[1] = (byte)43;
      byteArray0[2] = (byte)81;
      byteArray0[3] = (byte)94;
      byteArray0[4] = (byte)11;
      byteArray0[5] = (byte) (-76);
      byteArray0[6] = (byte)98;
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte)2;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)94, (int) (byte)2, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Utility.accessToString(128, true);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)93;
      byteArray0[1] = (byte) (-4);
      byteArray0[2] = (byte)4;
      byteArray0[3] = (byte)80;
      byteArray0[4] = (byte)48;
      byteArray0[5] = (byte)109;
      byteArray0[6] = (byte) (-78);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)4, (-2817), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 4:    faload
         // 5:    ldiv
         // 6:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)57;
      byteArray0[1] = (byte)80;
      byteArray0[2] = (byte) (-113);
      byteArray0[3] = (byte)46;
      byteArray0[4] = (byte)87;
      byteArray0[5] = (byte) (-59);
      byteArray0[6] = (byte)81;
      byteArray0[7] = (byte)70;
      byteArray0[8] = (byte)118;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, (-426), 69, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 20806. Constant pool size is: 0
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-100);
      byteArray0[1] = (byte) (-26);
      byteArray0[2] = (byte)5;
      byteArray0[3] = (byte) (-110);
      byteArray0[4] = (byte)76;
      byteArray0[5] = (byte)10;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "T(ZwQ*}@-!");
      byteArray0[6] = (byte)32;
      byteArray0[7] = (byte) (-44);
      byteArray0[8] = (byte) (-41);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals("ifge\t\t#-6651", string0);
      
      String string1 = Utility.methodSignatureReturnType("Invalid method signature: ");
      assertEquals("int", string1);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      int int0 = 139;
      Utility.isSet(139, 173);
      String string0 = "*^|aS8`U~X";
      Utility.compactClassName("Warning: Padding byte != 0 in ", "*^|aS8`U~X", false);
      try { 
        Utility.typeOfSignature("*^|aS8`U~X");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ^|aS8`U~X
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      boolean boolean0 = false;
      Utility.format((-2890), 181, false, '7');
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-80);
      byteArray0[1] = (byte)97;
      byteArray0[2] = (byte)47;
      byteArray0[3] = (byte) (-99);
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 1892, 89, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)35;
      byteArray0[1] = (byte)65;
      Constant[] constantArray0 = new Constant[2];
      ConstantDouble constantDouble0 = new ConstantDouble((byte)65);
      Constant constant0 = constantDouble0.copy();
      constantArray0[0] = constant0;
      ConstantFieldref constantFieldref0 = new ConstantFieldref((byte)65, (byte)65);
      constantArray0[1] = (Constant) constantFieldref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 13, 13, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)122;
      byteArray0[1] = (byte) (-104);
      Utility.encode(byteArray0, false);
      String string0 = "/@5S\\|9ETE#l9p";
      String[] stringArray0 = new String[4];
      stringArray0[0] = "/@5S|9ETE#l9p";
      stringArray0[1] = "/@5S|9ETE#l9p";
      stringArray0[2] = "z$98";
      stringArray0[3] = ";KTy^7";
      Utility.methodTypeToSignature("/@5S|9ETE#l9p", stringArray0);
      Utility.isSet(3969, 2605);
      try { 
        Utility.typeOfSignature("/@5S|9ETE#l9p");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: /@5S|9ETE#l9p
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      String string0 = "\n     ";
      Utility.convertString("\n     ");
      Utility.isJavaIdentifierPart('h');
      OutputStream outputStream0 = null;
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter((OutputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Writer", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Utility.isJavaIdentifierPart('\"');
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-116);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      byteArray0[1] = (byte)115;
      byteArray0[2] = (byte)14;
      byteArray0[3] = (byte) (-60);
      byteArray0[4] = (byte)24;
      byteArray0[5] = (byte)0;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[2];
      ConstantString constantString0 = new ConstantString((-714));
      constantArray0[0] = (Constant) constantString0;
      ConstantMethodref constantMethodref0 = new ConstantMethodref((byte) (-116), (byte) (-116));
      constantArray0[1] = (Constant) constantMethodref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("f2l", string0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-113);
      byteArray0[1] = (byte)89;
      byteArray0[2] = (byte)76;
      byteArray0[3] = (byte)97;
      byteArray0[4] = (byte) (-8);
      byteArray0[5] = (byte) (-39);
      byteArray0[6] = (byte)22;
      byteArray0[7] = (byte)94;
      Constant[] constantArray0 = new Constant[2];
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic((-3489), 58);
      constantArray0[0] = (Constant) constantInvokeDynamic0;
      ConstantMethodType constantMethodType0 = new ConstantMethodType(78);
      ConstantMethodType constantMethodType1 = new ConstantMethodType(constantMethodType0);
      constantArray0[1] = (Constant) constantMethodType1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteArray0, constantPool0, (-1306), 524, false);
      assertEquals("0:    d2l\n1:    dup\n2:    astore_1\n3:    ladd\n4:    <illegal opcode>\n5:    <illegal opcode>\n6:    lload\t\t%94\n", string0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)20;
      byteArray0[1] = (byte)92;
      byte byte0 = (byte)91;
      byteArray0[2] = (byte)91;
      byteArray0[3] = (byte) (-13);
      byteArray0[4] = (byte)100;
      byteArray0[5] = (byte) (-63);
      byteArray0[6] = (byte)42;
      byteArray0[7] = (byte)80;
      boolean boolean0 = false;
      Utility.encode(byteArray0, false);
      Utility.decode("$U$5c$5b$f3d$c1$wP", false);
      Utility.fillup("$U$5c$5b$f3d$c1$wP", (byte)20, true, 'n');
      ByteArrayOutputStream byteArrayOutputStream0 = null;
      try {
        byteArrayOutputStream0 = new ByteArrayOutputStream((byte) (-13));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative initial size: -13
         //
         verifyException("java.io.ByteArrayOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)57;
      byteArray0[1] = (byte)115;
      byteArray0[2] = (byte) (-53);
      byteArray0[3] = (byte) (-45);
      byteArray0[4] = (byte) (-65);
      byteArray0[5] = (byte) (-85);
      byteArray0[6] = (byte) (-4);
      byteArray0[7] = (byte) (-42);
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-85), 14, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    dstore\t\t%115
         // 2:    <illegal opcode>
         // 3:    <illegal opcode>
         // 4:    athrow
         // 5:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Utility.isSet(88, 88);
      String string0 = "02CriXd$^";
      try { 
        Utility.typeOfSignature("02CriXd$^");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 02CriXd$^
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      boolean boolean0 = false;
      Utility.fillup("\"", 66, false, '3');
      String string0 = "!NmrGvoZ$Hf~:";
      try { 
        Utility.typeOfSignature("!NmrGvoZ$Hf~:");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: NmrGvoZ$Hf~:
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Utility.setBit(7, (-1430));
      Utility.isSet(7, (-1430));
      Utility.fillup("Invalid class name ", 1031, false, ',');
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-86);
      byteArray0[1] = (byte)11;
      byteArray0[2] = (byte)111;
      byteArray0[3] = (byte)97;
      byteArray0[4] = (byte) (-33);
      Utility.equals(byteArray0, byteArray0);
      Utility.methodSignatureReturnType("Invalid class name ");
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) (byte) (-33);
      objectArray0[1] = (Object) (byte)11;
      objectArray0[2] = (Object) (byte)97;
      Utility.printArray(objectArray0);
      Constant[] constantArray0 = new Constant[2];
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref(3052, (byte) (-86));
      constantArray0[0] = (Constant) constantInterfaceMethodref0;
      ConstantString constantString0 = new ConstantString(91);
      ConstantString constantString1 = new ConstantString(constantString0);
      constantArray0[1] = (Constant) constantString1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 3, (int) (byte)97);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)84;
      byteArray0[1] = (byte)20;
      byteArray0[2] = (byte)38;
      byteArray0[3] = (byte) (-86);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-128);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      String string0 = Utility.codeToString(byteSequence0, constantPool1);
      assertEquals("bastore", string0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)122;
      byteArray0[1] = (byte) (-74);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)67;
      byteArray0[4] = (byte)119;
      Constant[] constantArray0 = new Constant[1];
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType((byte)122, (byte)122);
      constantNameAndType0.copy();
      ConstantNameAndType constantNameAndType1 = new ConstantNameAndType(constantNameAndType0);
      constantArray0[0] = (Constant) constantNameAndType1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Utility.classOrInterface((byte)0);
      Object[] objectArray0 = new Object[15];
      objectArray0[0] = (Object) (byte) (-74);
      objectArray0[1] = (Object) (byte)119;
      objectArray0[2] = (Object) (byte)67;
      objectArray0[3] = (Object) constantPool0;
      objectArray0[4] = (Object) constantNameAndType1;
      objectArray0[5] = (Object) "class";
      Utility.printArray(objectArray0);
      Utility.printArray(objectArray0);
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte)0;
      byteArray1[1] = (byte) (-105);
      byteArray1[2] = (byte)67;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, constantPool0, 1422, (-1406));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)48;
      byteArray0[1] = (byte)34;
      byteArray0[2] = (byte)8;
      byteArray0[3] = (byte) (-112);
      byteArray0[4] = (byte) (-20);
      byteArray0[5] = (byte)65;
      byteArray0[6] = (byte) (-29);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 10, 822);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      String string0 = Utility.format(45, 45, true, '~');
      assertEquals("45~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~", string0);
      
      String string1 = Utility.classOrInterface(64);
      assertEquals("class", string1);
      
      Utility.fillup("45~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~", 64, true, '~');
      Utility.printArray((Object[]) null, false, true);
      Utility.printArray((Object[]) null);
      Utility.fillup(">", 45, true, '^');
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-61);
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean0);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string2 = Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-61), (int) (byte) (-61));
      assertEquals("0:    monitorexit\n", string2);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      boolean boolean0 = true;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      Utility.convertString("lsub");
      Utility.classOrInterface(609);
      try { 
        Utility.methodSignatureArgumentTypes("(class_index = ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `class_index = '
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      String string0 = "@rr\"yuy#I%HWNz";
      try { 
        Utility.typeOfSignature("@rr\"yuy#I%HWNz");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: @rr\"yuy#I%HWNz
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-35);
      byteArray0[1] = (byte)95;
      byteArray0[2] = (byte) (-70);
      byteArray0[3] = (byte) (-101);
      byteArray0[4] = (byte)43;
      byteArray0[5] = (byte)122;
      byteArray0[6] = (byte) (-118);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[3];
      ConstantFloat constantFloat0 = new ConstantFloat(2374.0F);
      constantArray0[0] = (Constant) constantFloat0;
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref(byteSequence0);
      constantArray0[2] = (Constant) constantInterfaceMethodref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Utility.codeToString(byteSequence0, constantPool0, false);
      Utility.getSignature("aload_1");
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)122, (int) (byte) (-70), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 39723. Constant pool size is: 3
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Utility.compactClassName("dBAk!|", true);
      String string0 = Utility.convertString(", npairs = ");
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)68;
      byteArray0[1] = (byte) (-16);
      byteArray0[2] = (byte) (-7);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      int int0 = 2299;
      Utility.isSet(2299, 2299);
      Utility.setBit(73, 123);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)100;
      Utility.codeToString(byteArray0, (ConstantPool) null, (-2285), (int) (byte)100, true);
      // Undeclared exception!
      try { 
        Utility.signatureToString("0:    isub\n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `0:    isub
         // '
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)81;
      byteArray0[1] = (byte)84;
      byteArray0[2] = (byte) (-70);
      byteArray0[3] = (byte) (-55);
      byteArray0[4] = (byte) (-9);
      byteArray0[5] = (byte)34;
      byteArray0[6] = (byte)63;
      byteArray0[7] = (byte) (-99);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      Object[] objectArray0 = new Object[7];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) (byte)63;
      objectArray0[2] = (Object) "fastore";
      objectArray0[3] = (Object) (byte) (-70);
      objectArray0[4] = (Object) (byte)34;
      objectArray0[5] = (Object) (byte) (-70);
      objectArray0[6] = (Object) (byte)84;
      String string1 = Utility.printArray(objectArray0, false);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Utility.convertString("wF1i1e");
      try { 
        Utility.typeOfSignature("'");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: '
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Utility.searchOpcode("P3y-xe92^\"");
      try { 
        Utility.typeOfSignature("P3y-xe92^\"");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: P3y-xe92^\"
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)113;
      byteArray0[1] = (byte)4;
      byteArray0[2] = (byte) (-44);
      byteArray0[3] = (byte) (-121);
      byteArray0[4] = (byte)103;
      byteArray0[5] = (byte) (-1);
      Constant[] constantArray0 = new Constant[7];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref(byteSequence0);
      constantArray0[0] = (Constant) constantInterfaceMethodref0;
      Constant constant0 = constantInterfaceMethodref0.copy();
      constantArray0[1] = constant0;
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic(62, (byte) (-121));
      constantArray0[2] = (Constant) constantInvokeDynamic0;
      ConstantInteger constantInteger0 = new ConstantInteger((byte)103);
      constantArray0[3] = (Constant) constantInteger0;
      ConstantString constantString0 = new ConstantString(196);
      ConstantString constantString1 = new ConstantString(constantString0);
      constantArray0[4] = (Constant) constantString1;
      ConstantClass constantClass0 = new ConstantClass(byteSequence0);
      constantArray0[5] = (Constant) constantClass0;
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle((-3547), (byte)4);
      constantArray0[6] = (Constant) constantMethodHandle0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)103, (int) (byte) (-44), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)87;
      byteArray0[1] = (byte) (-120);
      byteArray0[2] = (byte)108;
      byteArray0[3] = (byte)60;
      byteArray0[4] = (byte)73;
      byteArray0[5] = (byte) (-62);
      byteArray0[6] = (byte)102;
      byteArray0[7] = (byte) (-58);
      byteArray0[8] = (byte)109;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[7];
      ConstantInteger constantInteger0 = new ConstantInteger((byte) (-58));
      ConstantInteger constantInteger1 = new ConstantInteger(constantInteger0);
      constantArray0[0] = (Constant) constantInteger1;
      ConstantInteger constantInteger2 = new ConstantInteger(constantInteger1);
      constantArray0[1] = (Constant) constantInteger2;
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(1008, (byte)73);
      constantArray0[2] = (Constant) constantNameAndType0;
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic(byteSequence0);
      constantArray0[3] = (Constant) constantInvokeDynamic0;
      ConstantMethodType constantMethodType0 = new ConstantMethodType(89);
      constantArray0[4] = (Constant) constantMethodType0;
      ConstantInvokeDynamic constantInvokeDynamic1 = new ConstantInvokeDynamic((byte) (-58), (byte)87);
      constantArray0[5] = (Constant) constantInvokeDynamic1;
      ConstantDouble constantDouble0 = new ConstantDouble(1677.163488);
      constantArray0[6] = (Constant) constantDouble0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      String string0 = Utility.codeToString(byteSequence0, constantPool1, false);
      assertEquals("dstore_2", string0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-11);
      byteArray0[1] = (byte)117;
      byteArray0[2] = (byte)46;
      byteArray0[3] = (byte)77;
      byteArray0[4] = (byte) (-68);
      byteArray0[5] = (byte) (-70);
      byteArray0[6] = (byte)40;
      byteArray0[7] = (byte)89;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readUnsignedByte();
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("goto_w");
      Object[] objectArray0 = new Object[0];
      Utility.printArray((PrintWriter) mockPrintWriter0, objectArray0);
      assertEquals(0, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)91;
      byteArray0[1] = (byte) (-105);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.read();
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence1.close();
      String string1 = Utility.codeToString(byteSequence1, (ConstantPool) null, false);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Utility.compactClassName("\t(wide)", "\t(wide)", true);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)125;
      byteArray0[1] = (byte)77;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)125, (int) (byte)125);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Utility.accessToString(2312, false);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-2);
      byteArray0[1] = (byte)59;
      byteArray0[2] = (byte)43;
      byteArray0[3] = (byte)120;
      byteArray0[4] = (byte) (-59);
      byteArray0[5] = (byte) (-113);
      byteArray0[6] = (byte) (-63);
      byteArray0[7] = (byte)65;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-63), (int) (byte)59);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 36801. Constant pool size is: 0
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Utility.compactClassName("lsub", false);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-3);
      byteArray0[1] = (byte) (-108);
      byteArray0[2] = (byte) (-34);
      byteArray0[3] = (byte)26;
      byteArray0[4] = (byte)108;
      byteArray0[5] = (byte) (-95);
      byteArray0[6] = (byte) (-102);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 92, (int) (byte) (-95), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)12;
      byteArray0[1] = (byte) (-97);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byteArray0[2] = (byte) (-8);
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-97), (int) (byte) (-8));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    fconst_1
         // 1:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte byte0 = (byte)57;
      byteArray0[0] = (byte)57;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.reset();
      ConstantPool constantPool0 = null;
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)92;
      byteArray0[1] = (byte) (-102);
      byteArray0[2] = (byte) (-74);
      byteArray0[3] = (byte)26;
      Utility.encode(byteArray0, false);
      Utility.clearBit((byte) (-102), (byte) (-102));
      Utility.classOrInterface((byte) (-102));
      Utility.compactClassName("$5c$9a$b6$g", false);
      Utility.replace("$5c$9a$b6$g", "$5c$9a$b6$g", "/");
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, 56, 1112);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "I{,<hIjQ*?";
      stringArray0[1] = "I{,<hIjQ*?";
      Utility.methodTypeToSignature("I{,<hIjQ*?", stringArray0);
      Utility.compactClassName("I{,<hIjQ*?", "org.apache.bcel.classfile.Utility$1", true);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("(LI{,<hIjQ*?;LI{,<hIjQ*?;)LI{,<hIjQ*?;", "mD235_ ", "arraylength");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: LI{,<hIjQ*?;LI{,<hIjQ*?;)LI{,<hIjQ*?;
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Utility.convertString("W(A");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      Utility.accessToString((-2042));
      Utility.getSignature("W(A");
      Utility.getSignature("breakpoint");
      Utility.replace("LW(A;", "ID4Lq7<0C6", "W(A");
      Utility.classOrInterface((-2042));
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-85);
      byteArray0[1] = (byte)94;
      byteArray0[2] = (byte) (-111);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)99;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      try { 
        Utility.codeToString(byteSequence0, constantPool0, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      int int0 = (-653);
      boolean boolean0 = false;
      Utility.format((-1663), (-653), false, '');
      try { 
        Utility.typeOfSignature("-1663");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: -1663
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Object[] objectArray0 = new Object[8];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      Object object5 = new Object();
      objectArray0[5] = object5;
      Object object6 = new Object();
      objectArray0[6] = object6;
      Object object7 = new Object();
      objectArray0[7] = object7;
      String string0 = Utility.printArray(objectArray0, false);
      assertNotNull(string0);
      
      Utility.compactClassName("java.lang.Object@5179a527, java.lang.Object@5ef30ad1, java.lang.Object@694c8317, java.lang.Object@1155ee48, java.lang.Object@d9931d8, java.lang.Object@4b7a1738, java.lang.Object@4623717b, java.lang.Object@783af059", true);
      boolean boolean0 = Utility.isSet((-3128), (-3128));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-35);
      byteArray0[1] = (byte)95;
      byteArray0[2] = (byte) (-70);
      byteArray0[3] = (byte) (-96);
      byteArray0[4] = (byte)43;
      byteArray0[5] = (byte)122;
      byteArray0[6] = (byte) (-118);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[3];
      ConstantFloat constantFloat0 = new ConstantFloat(2374.0F);
      byteSequence0.readShort();
      constantArray0[0] = (Constant) constantFloat0;
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("A");
      constantArray0[1] = (Constant) constantUtf8_0;
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref(byteSequence0);
      constantArray0[2] = (Constant) constantInterfaceMethodref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("l2d", string0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)70;
      byteArray0[1] = (byte)5;
      byteArray0[2] = (byte)79;
      byteArray0[3] = (byte)9;
      byteArray0[4] = (byte)102;
      byteArray0[5] = (byte) (-8);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteArray0, constantPool0, (-263), (-5148));
      assertEquals("0:    fstore_3\n1:    iconst_2\n2:    iastore\n3:    lconst_0\n4:    fsub\n5:    <illegal opcode>\n", string0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      String string0 = ";bT/";
      try { 
        Utility.typeOfSignature(";bT/");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ;bT/
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Utility.getSignature("xt94*n$D");
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Lxt94*n$D;");
      String string0 = Utility.format(4096, 4096, true, 'S');
      try { 
        Utility.typeOfSignature(string0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Utility.setBit(2, 162);
      Utility.compactClassName("dcmpl", "dcmpl", false);
      Utility.compactClassName("l2f", "dcmpl", false);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("(?G}`#>Jj", "Illegal type: ", "(?G}`#>Jj");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `?G}`#>Jj'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      String string0 = "6)M=HG";
      try { 
        Utility.typeOfSignature("6)M=HG");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 6)M=HG
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Utility.isJavaIdentifierPart('N');
      String string0 = "9pasK[xO(.@&$OC";
      try { 
        Utility.typeOfSignature("9pasK[xO(.@&$OC");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 9pasK[xO(.@&$OC
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Utility.classOrInterface((-2476));
      byte[] byteArray0 = Utility.decode("interface", false);
      Utility.getSignature("interface");
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.toString();
      Utility.codeToString(byteArray0, constantPool0, (-503), 879);
      Utility.signatureToString("Linterface;");
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, constantPool0);
      Utility.printArray((Object[]) constantArray0, false);
      Utility.codeToString(byteSequence0, constantPool0);
      // Undeclared exception!
      try { 
        Utility.signatureToString("i7N5", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `i7N5'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      String string0 = "org.apache.bcel.classfile.AnnotationDefault";
      Utility.compactClassName("if_acmpeq", "org.apache.bcel.classfile.AnnotationDefault", true);
      String string1 = ":";
      try { 
        Utility.typeOfSignature(":");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: :
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Utility.searchOpcode("(Sqr(ZrQ^q<I");
      try { 
        Utility.typeOfMethodSignature("(Sqr(ZrQ^q<I");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: (Sqr(ZrQ^q<I
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Utility.compactClassName("java.lang.", "java.lang.", true);
      Utility.accessToString(0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-109);
      byteArray0[1] = (byte) (-31);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      byteArray0[2] = (byte)123;
      byteArray0[3] = (byte)68;
      byteArray0[4] = (byte) (-64);
      byteArray0[5] = (byte) (-54);
      byteArray0[6] = (byte)68;
      byteArray0[7] = (byte) (-57);
      Utility.toHexString(byteArray0);
      Utility.compactClassName("", true);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Utility.codeToString(byteSequence0, constantPool0);
      Utility.clearBit((byte) (-54), (byte)123);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("", "i2s", "goto_w");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "freturn");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)31;
      byteArray0[1] = (byte)99;
      byteArray0[2] = (byte) (-29);
      byteArray0[3] = (byte) (-17);
      byteArray0[4] = (byte)15;
      byteArray0[5] = (byte)25;
      byteArray0[6] = (byte)80;
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, 2, (int) (byte)31);
      assertEquals("2:    <illegal opcode>\n3:    <illegal opcode>\n4:    dconst_1\n5:    aload\t\t%80\n", string0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      int int0 = 512;
      Utility.accessToString(512);
      String string0 = "1";
      try { 
        Utility.typeOfSignature("1");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 1
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Utility.setBit(188, 188);
      String string0 = "oq| ;mQoV4$'z";
      Utility.getSignature("oq| ;mQoV4$'z");
      try { 
        Utility.decode("oq| ;mQoV4$'z", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-85);
      byteArray0[1] = (byte) (-95);
      byteArray0[2] = (byte) (-85);
      byteArray0[3] = (byte)30;
      byteArray0[4] = (byte)58;
      byteArray0[5] = (byte) (-89);
      byteArray0[6] = (byte) (-28);
      byteArray0[7] = (byte) (-122);
      byteArray0[8] = (byte)83;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 185, 173);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      boolean boolean0 = false;
      byte[] byteArray0 = Utility.decode("fcmpl", false);
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 1763, 42);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ":17(NyQD9|*=ZhsWA@");
      Utility.clearBit((-2371), (-2371));
      try { 
        Utility.typeOfSignature("!\"(zYqun(R.6 YA'Q'w");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: \"(zYqun(R.6 YA'Q'w
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-66);
      byteArray0[1] = (byte) (-43);
      byteArray0[2] = (byte) (-5);
      byteArray0[3] = (byte)87;
      byteArray0[4] = (byte) (-124);
      byteArray0[5] = (byte)77;
      Utility.equals(byteArray0, byteArray0);
      Utility.classOrInterface((byte)77);
      Utility.accessToString(34);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 199, (int) (byte) (-43));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Utility.getSignature("Illegal type for StackMapType: ");
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-98);
      byteArray0[1] = (byte)50;
      byteArray0[2] = (byte)93;
      byteArray0[3] = (byte)45;
      Utility.codeToString(byteArray0, (ConstantPool) null, (-1), 14, false);
      Utility.fillup("0:    ifle\t\t#12893\n3:    aload_3\n", (byte)45, false, '`');
      // Undeclared exception!
      try { 
        Utility.signatureToString("````````````0:    ifle\t\t#12893\n3:    aload_3\n", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `````````````0:    ifle\t\t#12893
         // 3:    aload_3
         // '
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Utility.compactClassName("int");
      byte[] byteArray0 = new byte[6];
      boolean boolean0 = false;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      byteArray0[0] = (byte)85;
      byteArray0[1] = (byte)72;
      byteArray0[2] = (byte)52;
      byteArray0[3] = (byte)85;
      byteArray0[4] = (byte)79;
      byteArray0[5] = (byte) (-125);
      Utility.encode(byteArray0, true);
      Utility.encode(byteArray0, true);
      Utility.decode("int", false);
      byte[] byteArray1 = Utility.decode("int", false);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Utility.setBit(754, 754);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.markSupported();
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      Utility.convertString("$l$8b$I$A$A$A$A$A$A$A");
      Utility.encode(byteArray0, false);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray1);
      try { 
        Utility.methodSignatureArgumentTypes("BootstrapMethods");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: BootstrapMethods
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-95);
      byteArray0[1] = (byte) (-7);
      byteArray0[2] = (byte)67;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[1];
      ConstantString constantString0 = new ConstantString((byte) (-7));
      constantArray0[0] = (Constant) constantString0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      String string0 = Utility.codeToString(byteSequence0, constantPool1, false);
      String string1 = Utility.compactClassName("if_icmplt\t\t#-1725", true);
      assertTrue(string1.equals((Object)string0));
      
      int int0 = Utility.setBit(127, 1717);
      assertEquals(2097279, int0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Utility.getSignature("unreachable default case reached!");
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)63;
      byteArray0[1] = (byte)7;
      byteArray0[2] = (byte)10;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("lstore_0", string0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-29);
      byteArray0[1] = (byte) (-29);
      byte byte0 = (byte) (-91);
      byteArray0[2] = (byte) (-91);
      byteArray0[3] = (byte)79;
      byteArray0[4] = (byte) (-103);
      byteArray0[5] = (byte)79;
      byteArray0[6] = (byte) (-107);
      byteArray0[7] = (byte) (-108);
      byteArray0[8] = (byte)74;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 283, 283, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      Utility.typeOfSignature("Code");
      try { 
        Utility.methodSignatureArgumentTypes("Code");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Code
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Utility.typeOfSignature("S'G0q\"kV`#RS");
      Utility.compactClassName("1`&L)#ded`");
      String string0 = "Qdu%bb)L,";
      String string1 = "^}eD0@";
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("Qdu%bb)L,", "^}eD0@", "Qdu%bb)L,", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Qdu%bb)L,
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      String string0 = "Ve#c:T}AE]J:&>ntC~0";
      Utility.typeOfSignature("Ve#c:T}AE]J:&>ntC~0");
      String string1 = " >8tOJY{^/ofC0OB;;";
      String string2 = null;
      boolean boolean0 = true;
      int int0 = (-297);
      int int1 = 1770;
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)12;
      byteArray0[1] = (byte)12;
      byteArray0[2] = (byte)12;
      byteArray0[3] = (byte)12;
      byteArray0[4] = (byte)12;
      byteArray0[5] = (byte)12;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[9];
      ConstantFieldref constantFieldref0 = new ConstantFieldref(byteSequence0);
      constantArray0[0] = (Constant) constantFieldref0;
      ConstantFloat constantFloat0 = new ConstantFloat(0.0F);
      constantArray0[1] = (Constant) constantFloat0;
      ConstantString constantString0 = null;
      try {
        constantString0 = new ConstantString((ConstantString) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantString", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      String[] stringArray0 = new String[0];
      Utility.methodTypeToSignature("]<#>dK", stringArray0);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-126);
      byteArray0[1] = (byte) (-42);
      Utility.toHexString(byteArray0);
      Constant[] constantArray0 = new Constant[1];
      ConstantMethodType constantMethodType0 = new ConstantMethodType((byte) (-126));
      ConstantMethodType constantMethodType1 = new ConstantMethodType(constantMethodType0);
      constantArray0[0] = (Constant) constantMethodType1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantMethodType0.setDescriptorIndex((byte) (-126));
      constantMethodType1.toString();
      Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-42), 1584, false);
      try { 
        Utility.typeOfMethodSignature("?>...");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ?>...
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      boolean boolean0 = false;
      char char0 = '\\';
      Utility.fillup("Zy~[1vfbHQPWEB qxWk", (-246), false, '\\');
      Utility.typeOfSignature("Zy~[1vfbHQPWEB qxWk");
      try { 
        Utility.typeOfSignature("newarray");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: newarray
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "byte");
      try { 
        Utility.typeOfSignature("7/YdY");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 7/YdY
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-80);
      byteArray0[1] = (byte)15;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.setConstantPool(constantArray0);
      Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-80), (int) (byte) (-80));
      Utility.accessToString(4252, true);
      // Undeclared exception!
      try { 
        Utility.signatureToString("\t\t%");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `\t\t%'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "org.apache.commons.io.filefilter.SizeFileFilter");
      String string0 = "7z'A\"Z";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "7z'A\"Z");
      try { 
        Utility.typeOfSignature("5%W'|3");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 5%W'|3
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-29);
      byteArray0[1] = (byte)39;
      byte byte0 = (byte) (-91);
      byteArray0[2] = (byte) (-91);
      byteArray0[3] = (byte)79;
      byteArray0[4] = (byte) (-103);
      byteArray0[5] = (byte)11;
      byteArray0[6] = (byte) (-107);
      byte byte1 = (byte) (-108);
      byteArray0[7] = (byte) (-108);
      byteArray0[8] = (byte)74;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 283, 283, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-20);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-35);
      Constant[] constantArray0 = new Constant[1];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(byteSequence0);
      constantArray0[0] = (Constant) constantMethodHandle0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      Utility.codeToString(byteArray0, constantPool0, (-1457), (int) (byte)0, false);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Utility.accessToString(171);
      try { 
        Utility.typeOfSignature("#asF6OG=&Y.D5");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: #asF6OG=&Y.D5
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Utility.compactClassName("sDB");
      String[] stringArray0 = new String[4];
      stringArray0[0] = "sDB";
      stringArray0[1] = "sDB";
      stringArray0[2] = "sDB";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "sDB");
      stringArray0[3] = "sDB";
      Utility.methodTypeToSignature("sDB", stringArray0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)75;
      byteArray0[1] = (byte)28;
      byteArray0[2] = (byte) (-67);
      byteArray0[3] = (byte)3;
      byteArray0[4] = (byte) (-14);
      byteArray0[5] = (byte)4;
      byteArray0[6] = (byte)66;
      byteArray0[7] = (byte) (-57);
      byteArray0[8] = (byte)125;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 55, (int) (byte)75);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-96);
      byteArray0[1] = (byte) (-44);
      byteArray0[2] = (byte)66;
      byteArray0[3] = (byte) (-88);
      byteArray0[4] = (byte)77;
      byteArray0[5] = (byte)9;
      byteArray0[6] = (byte) (-99);
      byteArray0[7] = (byte)91;
      byteArray0[8] = (byte)34;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals("if_icmpne\t\t#-11198", string0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      objectArray0[0] = object0;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Utility.printArray(objectArray0, false, true);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      try { 
        Utility.typeOfSignature("\"java.lang.Object@562917c7\"");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: \"java.lang.Object@562917c7\"
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      String string0 = "CVzUST>IQZg7!ZS^";
      String[] stringArray0 = new String[2];
      stringArray0[0] = "CVzUST>IQZg7!ZS^";
      stringArray0[1] = "CVzUST>IQZg7!ZS^";
      Utility.methodTypeToSignature("CVzUST>IQZg7!ZS^", stringArray0);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-83);
      byteArray0[2] = (byte) (-49);
      ConstantPool constantPool0 = null;
      boolean boolean0 = true;
      Utility.codeToString(byteArray0, (ConstantPool) null, (-1577), (-3021), true);
      String string1 = "short";
      int int0 = 19;
      MockRandomAccessFile mockRandomAccessFile0 = null;
      try {
        mockRandomAccessFile0 = new MockRandomAccessFile("(LCVzUST>IQZg7!ZS^;LCVzUST>IQZg7!ZS^;)LCVzUST>IQZg7!ZS^;", "getfield");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal mode \"getfield\" must be one of \"r\", \"rw\", \"rws\", or \"rwd\"
         //
         verifyException("java.io.RandomAccessFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, " (");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)106;
      byteArray0[1] = (byte) (-73);
      byteArray0[2] = (byte) (-82);
      byteArray0[3] = (byte)19;
      byteArray0[4] = (byte)25;
      byteArray0[5] = (byte)20;
      byteArray0[6] = (byte)67;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 2, (int) (byte)25);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      String string0 = "&CY}hs D";
      Utility.replace("&CY}hs D", "&CY}hs D", "&CY}hs D");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-104);
      byte byte0 = (byte)5;
      byteArray0[1] = (byte)5;
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)5, (int) (byte) (-104));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "return");
      Utility.isJavaIdentifierPart('W');
      byte[] byteArray0 = new byte[0];
      Utility.encode(byteArray0, true);
      String[] stringArray0 = new String[0];
      Utility.methodTypeToSignature("return", stringArray0);
      Utility.toHexString(byteArray0);
      Utility.compactClassName("<illegal opcode>", "YR", false);
      Utility.methodSignatureToString("()Lreturn;", "()Lreturn;", " ", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[6];
      int int0 = 711;
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic(711, 711);
      ConstantInvokeDynamic constantInvokeDynamic1 = new ConstantInvokeDynamic(constantInvokeDynamic0);
      constantArray0[0] = (Constant) constantInvokeDynamic1;
      ConstantUtf8 constantUtf8_0 = null;
      try {
        constantUtf8_0 = new ConstantUtf8(byteSequence0);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      String string0 = "Y?kyn`+HK9`+LTH";
      try { 
        Utility.typeOfSignature("Y?kyn`+HK9`+LTH");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Y?kyn`+HK9`+LTH
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      String string0 = Utility.getSignature(">~>*h");
      assertEquals("L>~>*h;", string0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-60);
      byteArray0[1] = (byte) (-76);
      byteArray0[2] = (byte) (-85);
      byteArray0[3] = (byte)94;
      byteArray0[4] = (byte) (-61);
      byteArray0[5] = (byte) (-84);
      byteArray0[6] = (byte)70;
      byteArray0[7] = (byte) (-3);
      byteArray0[8] = (byte) (-86);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string1 = Utility.codeToString(byteSequence0, constantPool0);
      assertEquals("wide\t(wide)", string1);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)104;
      byteArray0[1] = (byte)5;
      byteArray0[2] = (byte)1;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[1];
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic((byte)1, 8);
      ConstantInvokeDynamic constantInvokeDynamic1 = new ConstantInvokeDynamic(constantInvokeDynamic0);
      constantArray0[0] = (Constant) constantInvokeDynamic1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      String string0 = Utility.codeToString(byteSequence0, constantPool1);
      assertEquals("imul", string0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)55;
      byteArray0[1] = (byte)55;
      byteArray0[2] = (byte)60;
      byteArray0[3] = (byte)60;
      byteArray0[4] = (byte)12;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)55, (int) (byte)12);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Utility.accessToString(248);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-27);
      byteArray0[1] = (byte)50;
      byteArray0[2] = (byte) (-98);
      byteArray0[3] = (byte)117;
      byteArray0[4] = (byte) (-30);
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte) (-87);
      boolean boolean0 = true;
      Utility.encode(byteArray0, true);
      try { 
        Utility.decode("$l$8b$I$A$A$A$A$A$A$A", true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // Unexpected end of ZLIB input stream
         //
         verifyException("java.util.zip.InflaterInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)118;
      byteArray0[1] = (byte)106;
      byteArray0[2] = (byte)40;
      byteArray0[3] = (byte) (-84);
      byteArray0[4] = (byte) (-63);
      byte byte0 = (byte)39;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      byteArray0[5] = (byte)39;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readBoolean();
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      boolean boolean0 = true;
      byteSequence0.read(byteArray0);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("fmul", "fmul", "fmul", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: fmul
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)118;
      byteArray0[1] = (byte) (-46);
      Constant[] constantArray0 = new Constant[1];
      ConstantFieldref constantFieldref0 = new ConstantFieldref((byte)118, (byte) (-46));
      constantArray0[0] = (Constant) constantFieldref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, (int) (byte)118, 385);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)126;
      byteArray0[1] = (byte) (-72);
      byteArray0[2] = (byte) (-86);
      byte byte0 = (byte)113;
      byteArray0[3] = (byte)113;
      FileSystemHandling.shouldAllThrowIOExceptions();
      byteArray0[4] = (byte)98;
      byteArray0[5] = (byte) (-96);
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte)126;
      byteArray1[1] = (byte) (-96);
      byteArray1[2] = (byte)113;
      byteArray1[3] = (byte)14;
      byteArray1[4] = (byte)98;
      byteArray1[5] = (byte) (-96);
      byteArray1[6] = (byte)126;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray1);
      byteArray0[6] = (byte) (-5);
      boolean boolean0 = false;
      Utility.encode(byteArray0, false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.markSupported();
      byteSequence0.readByte();
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("y)Rf{I497eKsKq");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Rf{I497eKsKq'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      objectArray0[0] = object0;
      String string0 = Utility.printArray(objectArray0);
      assertNotNull(string0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)117;
      byteArray0[1] = (byte) (-87);
      byteArray0[2] = (byte)40;
      byteArray0[3] = (byte)90;
      byteArray0[4] = (byte)70;
      byteArray0[5] = (byte) (-28);
      byteArray0[6] = (byte)83;
      byteArray0[7] = (byte) (-57);
      byteArray0[8] = (byte) (-64);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readUnsignedByte();
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      String string1 = Utility.toHexString(byteArray0);
      assertEquals("75 a9 28 5a 46 e4 53 c7 c0", string1);
      
      String string2 = Utility.encode(byteArray0, true);
      assertEquals("$l$8b$I$A$A$A$A$A$A$A", string2);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Utility.signatureToString("Visiting non-standard PMGClass object", true);
      int int0 = Utility.clearBit(1834, 3963);
      assertEquals(1834, int0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)14;
      byteArray0[1] = (byte)124;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Visiting non-standard PMGClass object");
      byteArray0[2] = (byte) (-100);
      byteArray0[3] = (byte) (-82);
      byteArray0[4] = (byte)68;
      byteArray0[5] = (byte) (-102);
      byteArray0[6] = (byte)101;
      byteArray0[7] = (byte)57;
      byteArray0[8] = (byte) (-56);
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte)79;
      boolean boolean0 = Utility.equals(byteArray0, byteArray1);
      assertFalse(boolean0);
      
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) (byte) (-100);
      objectArray0[1] = (Object) (byte)14;
      objectArray0[2] = (Object) (byte)14;
      objectArray0[3] = (Object) (byte)68;
      String string0 = Utility.printArray(objectArray0);
      assertEquals("{-100, 14, 14, 68}", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte) (-10);
      byteArray0[2] = (byte) (-38);
      byteArray0[3] = (byte)11;
      byteArray0[4] = (byte)16;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      byteArray0[5] = (byte)0;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)16, (int) (byte)11);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)89;
      byteArray0[1] = (byte)51;
      byteArray0[2] = (byte) (-114);
      byteArray0[3] = (byte) (-81);
      byteArray0[4] = (byte) (-71);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 37, (int) (byte) (-114), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      String string0 = "Unreachable default case reached!";
      try { 
        Utility.typeOfSignature("Unreachable default case reached!");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Unreachable default case reached!
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Utility.typeOfSignature("TRn~Z9_c#-%VNWt");
      String[] stringArray0 = new String[6];
      stringArray0[0] = null;
      stringArray0[1] = "TRn~Z9_c#-%VNWt";
      stringArray0[2] = null;
      stringArray0[3] = null;
      stringArray0[4] = null;
      stringArray0[5] = "TRn~Z9_c#-%VNWt";
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature((String) null, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)127;
      byteArray0[1] = (byte) (-88);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      boolean boolean0 = true;
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 111, 80, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-32);
      byteArray0[1] = (byte) (-57);
      byteArray0[2] = (byte) (-57);
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte) (-120);
      byteArray0[5] = (byte) (-57);
      byteArray0[6] = (byte) (-87);
      byteArray0[7] = (byte) (-24);
      byteArray0[8] = (byte)68;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readShort();
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      byteSequence0.markSupported();
      byteSequence0.markSupported();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "The wildcard list must not be null");
      try { 
        Utility.methodSignatureArgumentTypes("ifnonnull\t\t#394", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ifnonnull\t\t#394
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Utility.compactClassName("null", "[]", true);
      Utility.getSignature("L:%@+VNixbGKgNk~x");
      try { 
        Utility.typeOfSignature("? extends ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ? extends 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)121;
      byteArray0[1] = (byte)41;
      byteArray0[2] = (byte)45;
      byteArray0[3] = (byte)44;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)45, (int) (byte)44);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-32);
      byteArray0[1] = (byte) (-57);
      byteArray0[2] = (byte)40;
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte) (-120);
      byteArray0[5] = (byte)2;
      byteArray0[6] = (byte) (-87);
      byteArray0[7] = (byte) (-24);
      byteArray0[8] = (byte)68;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readShort();
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      byteSequence0.markSupported();
      byteSequence0.markSupported();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "The wildcard list must not be null");
      try { 
        Utility.methodSignatureArgumentTypes("dload_2", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: dload_2
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte)87;
      byteArray0[2] = (byte)87;
      byteArray0[3] = (byte)90;
      byteArray0[4] = (byte) (-94);
      byteArray0[5] = (byte)88;
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 3173, (int) (byte)90, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      int int0 = 2559;
      boolean boolean0 = false;
      String string0 = Utility.format(2559, 2559, false, 'W');
      try { 
        Utility.methodSignatureReturnType(string0, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Utility.fillup("]6=", 84, true, 'm');
      byte[] byteArray0 = Utility.decode("]6=", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.markSupported();
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byteSequence0.markSupported();
      Utility.codeToString(byteSequence0, constantPool0, true);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 97, 173);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Object[] objectArray0 = new Object[8];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      Object object5 = new Object();
      objectArray0[5] = object5;
      Object object6 = new Object();
      objectArray0[6] = object6;
      Object object7 = new Object();
      objectArray0[7] = object7;
      Utility.printArray(objectArray0);
      try { 
        Utility.typeOfSignature("A");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: A
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Utility.convertString("'CM)o#m");
      Utility.compactClassName("qKn[-i", true);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-15);
      byteArray0[1] = (byte)62;
      byteArray0[2] = (byte) (-88);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte)74;
      byteArray1[1] = (byte) (-128);
      byteArray1[2] = (byte)103;
      byteArray1[3] = (byte)22;
      byteArray1[4] = (byte)83;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.setConstantPool(constantArray0);
      constantPool0.setConstantPool(constantArray0);
      Utility.codeToString(byteArray1, constantPool0, (-2042), (-2042), false);
      Utility.clearBit(191, (byte) (-128));
      Utility.encode(byteArray1, true);
      Utility.equals(byteArray1, byteArray1);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, constantPool0, (int) (byte)62, 1024, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Utility.compactClassName(">J*}QFal\"#{", true);
      Utility.isSet(62, (-2224));
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)71;
      byteArray0[1] = (byte)97;
      byteArray0[2] = (byte)0;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) byteSequence0;
      objectArray0[2] = (Object) (byte)97;
      objectArray0[3] = (Object) (byte)97;
      Utility.printArray(objectArray0, true);
      Utility.decode("{null, org.apache.bcel.util.ByteSequence@17e474ac, 97, 97}", false);
      try { 
        Utility.typeOfSignature(">J*}QFal\"#{");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: >J*}QFal\"#{
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("[]");
      assertEquals((byte)13, byte0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte) (-121);
      byteArray0[0] = (byte) (-121);
      byteArray0[1] = (byte)32;
      Utility.equals(byteArray0, byteArray0);
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)32, (int) (byte) (-121), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)122;
      byteArray0[1] = (byte) (-74);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)67;
      byteArray0[4] = (byte)119;
      Constant[] constantArray0 = new Constant[1];
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType((byte)122, (byte)122);
      constantNameAndType0.copy();
      ConstantNameAndType constantNameAndType1 = new ConstantNameAndType(constantNameAndType0);
      constantArray0[0] = (Constant) constantNameAndType1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)122, 81);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 67. Constant pool size is: 1
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      String string0 = "XQ}qp&5|D/q_";
      try { 
        Utility.typeOfSignature("XQ}qp&5|D/q_");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: XQ}qp&5|D/q_
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Utility.typeOfSignature("I;[dPG:Qb/");
      // Undeclared exception!
      try { 
        Utility.signatureToString("bML", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `bML'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)103;
      byteArray0[1] = (byte) (-91);
      byteArray0[2] = (byte) (-91);
      byteArray0[3] = (byte) (-52);
      byteArray0[4] = (byte)78;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 177, 185);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)12;
      byteArray0[1] = (byte) (-115);
      byteArray0[2] = (byte) (-12);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-115), (int) (byte) (-12));
      assertEquals("0:    fconst_1\n1:    f2d\n2:    <illegal opcode>\n", string0);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-75);
      byteArray0[1] = (byte) (-61);
      byteArray0[2] = (byte) (-98);
      byteArray0[3] = (byte) (-50);
      byteArray0[4] = (byte) (-95);
      byteArray0[5] = (byte)36;
      byteArray0[6] = (byte)103;
      byteArray0[7] = (byte)53;
      byteArray0[8] = (byte)46;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-95), (int) (byte)103);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-90);
      int int0 = 164;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 164, (-1139), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-35);
      byteArray0[1] = (byte)95;
      byteArray0[2] = (byte) (-70);
      byteArray0[3] = (byte) (-101);
      byteArray0[4] = (byte)43;
      byteArray0[5] = (byte)122;
      byteArray0[6] = (byte) (-118);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[3];
      ConstantFloat constantFloat0 = new ConstantFloat(2374.0F);
      constantArray0[0] = (Constant) constantFloat0;
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("A");
      constantArray0[1] = (Constant) constantUtf8_0;
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref(byteSequence0);
      constantArray0[2] = (Constant) constantInterfaceMethodref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("aload_1", string0);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-26);
      byte byte0 = (byte)102;
      byteArray0[1] = (byte)102;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ConstantPool constantPool0 = null;
      int int0 = 68;
      Utility.codeToString(byteArray0, (ConstantPool) null, (-1534), 68);
      Utility.compactClassName("0:    <illegal opcode>\n1:    fsub\n");
      Utility.isJavaIdentifierPart('O');
      String string0 = "java.lang.";
      String string1 = null;
      LocalVariable[] localVariableArray0 = new LocalVariable[9];
      File file0 = MockFile.createTempFile("eG^r!V", "");
      MockRandomAccessFile mockRandomAccessFile0 = null;
      try {
        mockRandomAccessFile0 = new MockRandomAccessFile(file0, "H}1(st0UPSk MXw7");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal mode \"H}1(st0UPSk MXw7\" must be one of \"r\", \"rw\", \"rws\", or \"rwd\"
         //
         verifyException("java.io.RandomAccessFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Utility.compactClassName("filename\t\t");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-22);
      byteArray0[1] = (byte)77;
      byteArray0[2] = (byte)15;
      byteArray0[3] = (byte)79;
      byteArray0[4] = (byte) (-127);
      byteArray0[5] = (byte) (-57);
      byteArray0[6] = (byte)4;
      byteArray0[7] = (byte)37;
      byteArray0[8] = (byte) (-55);
      Utility.toHexString(byteArray0);
      byte[] byteArray1 = Utility.decode("<Unknown>", false);
      Utility.isSet((byte) (-57), (-1367));
      Utility.equals(byteArray1, byteArray0);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("char", "char", "ea 4d 0f 4f 81 c7 04 25 c9", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: char
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)76;
      byteArray0[1] = (byte) (-74);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)76, 51);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Utility.compactClassName("invokespecial");
      String string0 = Utility.compactClassName("invokespecial");
      assertEquals("invokespecial", string0);
      
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Utility.compactClassName("invokespecial", "org.apache.bcel.classfile.StackMap", true);
      int int0 = Utility.clearBit(3419, 51);
      assertEquals(3419, int0);
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) "invokespecial";
      String string1 = Utility.printArray(objectArray0);
      assertNotNull(string1);
      assertEquals("{null, null, invokespecial}", string1);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-58);
      byteArray0[1] = (byte) (-115);
      byteArray0[2] = (byte)26;
      byteArray0[3] = (byte) (-10);
      byteArray0[4] = (byte) (-11);
      byteArray0[5] = (byte)87;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string2 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("ifnull\t\t#-29414", string2);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Utility.isJavaIdentifierPart('y');
      try { 
        Utility.typeOfSignature("Qw");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Qw
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.getSignature("&[Tt,.QZ[{");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegally nested brackets:[Tt,.QZ[{
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-93);
      byteArray0[1] = (byte) (-3);
      byteArray0[2] = (byte) (-74);
      byteArray0[3] = (byte)94;
      byteArray0[4] = (byte)88;
      byteArray0[5] = (byte)102;
      byteArray0[6] = (byte) (-120);
      byteArray0[7] = (byte)89;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals("if_icmpgt\t\t#-586", string0);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)5;
      byteArray0[1] = (byte) (-5);
      byteArray0[2] = (byte)3;
      byteArray0[3] = (byte) (-30);
      byteArray0[4] = (byte)77;
      byteArray0[5] = (byte)39;
      byteArray0[6] = (byte)58;
      byteArray0[7] = (byte) (-31);
      byteArray0[8] = (byte)86;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)77, 97, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-123);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (-438), 60);
      assertEquals("0:    i2l\n", string0);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      String string0 = Utility.accessToString(3570);
      assertEquals("private final synchronized volatile transient native abstract strictfp", string0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-111);
      byteArray0[1] = (byte) (-69);
      byteArray0[2] = (byte)32;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)55;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[2];
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(92, 3150);
      ConstantMethodHandle constantMethodHandle1 = new ConstantMethodHandle(constantMethodHandle0);
      constantArray0[0] = (Constant) constantMethodHandle1;
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getCachedInstance("8G1YI^Kw6{|]7jov");
      constantArray0[1] = (Constant) constantUtf8_0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      String string1 = Utility.codeToString(byteSequence0, constantPool1);
      assertEquals("i2b", string1);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Utility.getSignature("invokedynamic");
      Utility.setBit((-1657), (-3472));
      try { 
        Utility.typeOfSignature("%z:G-3xD01`");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: %z:G-3xD01`
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)65;
      byteArray0[1] = (byte)34;
      byteArray0[2] = (byte)42;
      byteArray0[3] = (byte)83;
      byteArray0[4] = (byte)12;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)34, (int) (byte)12);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      String string0 = Utility.methodSignatureReturnType("Zh%hT5t@&yFdY&hK2");
      assertEquals("boolean", string0);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      String string0 = "=Ibjnnt?bDs";
      Utility.convertString("=Ibjnnt?bDs");
      Utility.isSet(36, 36);
      Utility.compactClassName("=Ibjnnt?bDs");
      Utility.compactClassName("=Ibjnnt?bDs", false);
      String string1 = "$3!,,z=f6$ZV64M$";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "boolean");
      try { 
        Utility.typeOfSignature("$3!,,z=f6$ZV64M$");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: $3!,,z=f6$ZV64M$
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)8;
      byteArray0[2] = (byte) (-63);
      byteArray0[3] = (byte)89;
      byteArray0[4] = (byte)86;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)89, 32, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Utility.setBit((-1596), 5);
      try { 
        Utility.methodSignatureArgumentTypes("(", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: (
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Utility.replace("The array of names must not be null", "kK!1i;&mRgF}.,{l", (String) null);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)74;
      byteArray0[1] = (byte)20;
      byteArray0[2] = (byte)68;
      byteArray0[3] = (byte)33;
      byteArray0[4] = (byte)68;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 79, 89);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Utility.getSignature("\t\t#");
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-75);
      byte byte0 = (byte) (-120);
      byteArray0[1] = (byte) (-120);
      byteArray0[2] = (byte)74;
      byteArray0[3] = (byte) (-54);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[3];
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool(byteSequence0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid byte tag in constant pool: 74
         //
         verifyException("org.apache.bcel.classfile.Constant", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("NAz;[I<");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `NAz;[I<'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Utility.isJavaIdentifierPart('0');
      String string0 = "S(Gnzd86";
      boolean boolean0 = false;
      Utility.signatureToString("S(Gnzd86", false);
      String string1 = null;
      // Undeclared exception!
      try { 
        Utility.getSignature((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Utility.searchOpcode("?");
      String[] stringArray0 = new String[7];
      stringArray0[0] = "void";
      stringArray0[1] = "?";
      stringArray0[2] = "?";
      stringArray0[3] = "?";
      stringArray0[4] = "V";
      stringArray0[5] = "?";
      stringArray0[6] = "?";
      try { 
        Utility.methodTypeToSignature("?", stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid type: void
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      String string0 = "QYf7~'.'\"w2. L^fQDv";
      // Undeclared exception!
      try { 
        Utility.signatureToString("QYf7~'.'\"w2. L^fQDv");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `QYf7~'.'\"w2. L^fQDv'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Utility.isSet(198, 91);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-71);
      byteArray0[1] = (byte)0;
      Constant[] constantArray0 = new Constant[2];
      ConstantClass constantClass0 = new ConstantClass(1);
      constantArray0[0] = (Constant) constantClass0;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      constantClass0.setNameIndex((-3400));
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref(15, (-916));
      constantArray0[1] = (Constant) constantInterfaceMethodref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      int int0 = (-279);
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 15, (-279), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Utility.getSignature("Mxp$");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)31;
      byte byte0 = (byte)22;
      byteArray0[2] = (byte) (-69);
      byteArray0[3] = (byte)13;
      byteArray0[4] = (byte)92;
      byteArray0[5] = (byte)37;
      byte byte1 = (byte)32;
      byteArray0[6] = (byte)32;
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 222, (int) (byte)22);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      try { 
        Utility.typeOfSignature("+EzcC,MK-[e]=8O");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: EzcC,MK-[e]=8O
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)65;
      byteArray0[1] = (byte)34;
      byteArray0[2] = (byte)42;
      byteArray0[3] = (byte)91;
      byteArray0[4] = (byte)12;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)34, (int) (byte)12);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-99);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      byteArray0[1] = (byte)51;
      byteArray0[2] = (byte) (-105);
      byteArray0[3] = (byte)114;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-99), 357, true);
      assertEquals("0:    ifgt\t\t#13207\n3:    frem\n", string0);
      
      short short0 = Utility.searchOpcode("0:    ifgt\t\t#13207\n3:    frem\n");
      assertEquals((short) (-1), short0);
      
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("0:    ifgt\t\t#13207\n3:    frem\n");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, true);
      PrintStream printStream0 = mockPrintStream0.append('=');
      Utility.printArray(printStream0, (Object[]) constantArray0);
      String string1 = Utility.classOrInterface(197);
      assertEquals("class", string1);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      short short0 = Utility.searchOpcode("9}:|:UJx9");
      assertEquals((short) (-1), short0);
      
      String string0 = Utility.methodSignatureReturnType("Fq#De");
      assertEquals("float", string0);
      
      boolean boolean0 = Utility.isSet((short) (-1), 170);
      assertTrue(boolean0);
      
      String string1 = Utility.getSignature("Fq#De");
      assertEquals("LFq#De;", string1);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("T8!kL1\"3L-");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: T8!kL1\"3L-
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)56;
      byte byte0 = (byte)6;
      byteArray0[1] = (byte)6;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byteArray0[2] = (byte)36;
      byteArray0[3] = (byte) (-1);
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)56, 649, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Utility.getSignature("");
      Utility.setBit(1400, 3);
      Utility.typeOfSignature("L;");
      Utility.accessToString(2422, false);
      Utility.format(1469, (-927), false, '(');
      Utility.setBit(5848, 791);
      try { 
        Utility.typeOfMethodSignature("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      String string0 = "G,-R5```h;xq@ginyys";
      try { 
        Utility.methodSignatureReturnType("G,-R5```h;xq@ginyys", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `G,-R5```h;xq@ginyys'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("405kGV}%CcQapuu)Ey");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Ey'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byte byte0 = (byte) (-110);
      byteArray0[0] = (byte) (-110);
      byteArray0[1] = (byte)39;
      byteArray0[2] = (byte) (-76);
      int int0 = 2995;
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 2995, (int) (byte) (-110), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("short", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("drem", string0);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-66);
      byteArray0[1] = (byte) (-31);
      byteArray0[2] = (byte) (-13);
      byteArray0[3] = (byte)40;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string0 = Utility.codeToString(byteSequence0, constantPool0);
      assertEquals("arraylength", string0);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      short short0 = Utility.searchOpcode("D");
      assertEquals((short) (-1), short0);
      
      boolean boolean0 = Utility.isSet((short) (-1), 2073);
      assertTrue(boolean0);
      
      byte byte0 = Utility.typeOfSignature("D");
      assertEquals((byte)7, byte0);
      
      String string0 = Utility.replace("D", "putstatic", "putstatic");
      assertEquals("D", string0);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      Utility.isJavaIdentifierPart('j');
      // Undeclared exception!
      try { 
        Utility.signatureToString("P");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `P'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      Utility.printArray(objectArray0, true, true);
      String string0 = "=Hyh";
      try { 
        Utility.typeOfSignature("=Hyh");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: =Hyh
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-106);
      byteArray0[1] = (byte)66;
      byteArray0[2] = (byte)52;
      byteArray0[3] = (byte)18;
      byteArray0[4] = (byte)0;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-106), 48);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      Utility.isSet(42, 82);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)52;
      byteArray0[1] = (byte) (-70);
      byteArray0[2] = (byte)79;
      byteArray0[3] = (byte)8;
      byteArray0[4] = (byte)63;
      byteArray0[5] = (byte) (-128);
      byteArray0[6] = (byte)5;
      byteArray0[7] = (byte)97;
      byteArray0[8] = (byte)72;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, 7, 1188);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 20232. Constant pool size is: 0
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      Utility.classOrInterface(2049);
      Utility.format(2049, 2049, false, 'D');
      Utility.setBit(2049, 2049);
      try { 
        Utility.typeOfSignature("<illegal opcode>");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: <illegal opcode>
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      String string0 = "Y)/G}se:zFxW/V";
      // Undeclared exception!
      try { 
        Utility.signatureToString("Y)/G}se:zFxW/V", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Y)/G}se:zFxW/V'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "org.apache.bcel.classfile.BootstrapMethod");
      Utility.replace("org.apache.bcel.classfile.BootstrapMethod", "U>2>N?gxtNfB>Nkwx_w", "multianewarray");
      try { 
        Utility.methodSignatureReturnType("U>2>N?gxtNfB>Nkwx_w");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `U>2>N?gxtNfB>Nkwx_w'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Utility.printArray(objectArray0, false);
      Utility.classOrInterface(171);
      Utility.format(92, 171, false, '7');
      Object[] objectArray1 = new Object[4];
      objectArray1[0] = (Object) "class";
      objectArray1[1] = (Object) "java.lang.Object@7bbe8dbf";
      objectArray1[2] = (Object) "java.lang.Object@7bbe8dbf";
      objectArray1[3] = (Object) "777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777792";
      Utility.printArray(objectArray1, false, true);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-125);
      byteArray0[1] = (byte) (-78);
      byteArray0[2] = (byte)115;
      byteArray0[3] = (byte) (-65);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-65), 92, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      String string0 = "MM6R5";
      // Undeclared exception!
      try { 
        Utility.signatureToString("MM6R5");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `MM6R5'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)24;
      byteArray0[1] = (byte) (-5);
      byteArray0[2] = (byte)80;
      byteArray0[3] = (byte)5;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      String string0 = Utility.codeToString(byteSequence0, constantPool1, false);
      assertEquals("dload\t\t%251", string0);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      String string0 = "ireturn";
      boolean boolean0 = true;
      Utility.compactClassName("ireturn", true);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-44);
      byteArray0[1] = (byte) (-19);
      byteArray0[2] = (byte)59;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 2103, (int) (byte) (-19), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)103;
      byteArray0[1] = (byte) (-55);
      byteArray0[2] = (byte)7;
      byteArray0[3] = (byte) (-115);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)95;
      byteArray0[6] = (byte) (-85);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Utility.accessToString(97);
      Utility.encode(byteArray0, false);
      Utility.searchOpcode("g$c9$H$8d$A_$ab");
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 202, 80);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)88;
      byteArray0[1] = (byte)38;
      byteArray0[2] = (byte)0;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)38, (int) (byte)88, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)22;
      byteArray0[1] = (byte)83;
      byteArray0[2] = (byte)29;
      byteArray0[3] = (byte)18;
      byteArray0[4] = (byte)34;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Utility.format(698, 22, true, 'm');
      Constant[] constantArray0 = null;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 22, (-538), false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      String string0 = Utility.convertString("g`q\"[q*i8");
      assertEquals("g`q\\\"[q*i8", string0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)95;
      byteArray0[1] = (byte)64;
      byteArray0[2] = (byte) (-2);
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte)64;
      byteArray1[1] = (byte)95;
      byteArray1[2] = (byte) (-2);
      byteArray1[3] = (byte)95;
      boolean boolean0 = Utility.equals(byteArray0, byteArray1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      Utility.convertString("wide");
      Utility.getSignature("wide");
      // Undeclared exception!
      try { 
        Utility.signatureToString("XOD;Xn2hXzRG-");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `XOD;Xn2hXzRG-'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("KM:1?h_\"~L", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `KM:1?h_\"~L'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      int int0 = 90;
      Utility.classOrInterface(90);
      // Undeclared exception!
      try { 
        Utility.encode((byte[]) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      Utility.replace("invokevirtual", "'J>SPHZ5^t;y#", "'J>SPHZ5^t;y#");
      Utility.format(753, 753, true, 'P');
      Utility.convertString("'J>SPHZ5^t;y#");
      Utility.searchOpcode
      ByteSequence byteSequence0 = null;
      try {
        byteSequence0 = new ByteSequence((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      String string0 = Utility.accessToString(616, false);
      assertEquals("static synchronized volatile interface", string0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)47;
      byteArray0[1] = (byte)46;
      byteArray0[2] = (byte)18;
      byteArray0[3] = (byte)64;
      byteArray0[4] = (byte) (-23);
      byteArray0[5] = (byte) (-115);
      byteArray0[6] = (byte) (-127);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[7];
      ConstantFieldref constantFieldref0 = new ConstantFieldref((byte) (-127), (byte) (-127));
      constantArray0[0] = (Constant) constantFieldref0;
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(byteSequence0);
      ConstantMethodHandle constantMethodHandle1 = new ConstantMethodHandle(constantMethodHandle0);
      constantArray0[1] = (Constant) constantMethodHandle1;
      ConstantMethodType constantMethodType0 = new ConstantMethodType(171);
      constantArray0[2] = (Constant) constantMethodType0;
      ConstantString constantString0 = new ConstantString((byte) (-115));
      constantArray0[3] = (Constant) constantString0;
      ConstantFloat constantFloat0 = new ConstantFloat((-1560.5605F));
      constantArray0[4] = (Constant) constantFloat0;
      ConstantMethodType constantMethodType1 = new ConstantMethodType(2);
      constantArray0[5] = (Constant) constantMethodType1;
      ConstantInteger constantInteger0 = new ConstantInteger(224);
      constantArray0[6] = (Constant) constantInteger0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string1 = Utility.codeToString(byteSequence0, constantPool0);
      assertEquals("lstore_1", string1);
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      String[] stringArray0 = new String[0];
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature("Y[k6R}", stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegally nested brackets:[k6R}
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      int int0 = (-265);
      Utility.clearBit(2048, (-265));
      Utility.accessToString(2048);
      Utility.clearBit((-17), (-17));
      String string0 = "(";
      try { 
        Utility.typeOfSignature("(");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: (
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "Illegal type: ";
      stringArray0[1] = "Illegal type: ";
      stringArray0[2] = "Illegal type: ";
      stringArray0[3] = "Illegal type: ";
      stringArray0[4] = "[-km6Y{%InQl~w";
      stringArray0[5] = "Illegal type: ";
      stringArray0[6] = "Illegal type: ";
      stringArray0[7] = "Illegal type: ";
      stringArray0[8] = ")O:zWccIel1+Z;FC R";
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature("Illegal type: ", stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal type: [-km6Y{%InQl~w
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.signatureToString("Oy~.6mO{J %", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Oy~.6mO{J %'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      Utility.getSignature("Mxp$");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)31;
      byteArray0[1] = (byte)22;
      byteArray0[2] = (byte) (-69);
      byteArray0[3] = (byte)13;
      byteArray0[4] = (byte)92;
      byteArray0[5] = (byte)37;
      byteArray0[6] = (byte)32;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 222, (int) (byte)22);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      Utility.signatureToString("J");
      Utility.convertString("static");
      Utility.fillup("athrow", 1437, false, '8');
      Object[] objectArray0 = new Object[0];
      Utility.printArray(objectArray0, false);
      // Undeclared exception!
      try { 
        Utility.signatureToString("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)44;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-59);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (-713), (int) (byte) (-59));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    aload_2
         // 1:    nop
         // 2:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      byte[] byteArray0 = null;
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.encode((byte[]) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      boolean boolean0 = true;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      Utility.isJavaIdentifierPart('W');
      // Undeclared exception!
      try { 
        Utility.signatureToString("[7`@mWE8I.VH", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `7`@mWE8I.VH'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      boolean boolean0 = Utility.isJavaIdentifierPart('n');
      assertTrue(boolean0);
      
      String string0 = Utility.replace("jsr_w", "}WAt/!", ":W8");
      assertEquals("jsr_w", string0);
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      String string0 = "+_1Yst$Ipc0XY";
      try { 
        Utility.decode("+_1Yst$Ipc0XY", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      Utility.accessToString((-1202));
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("private protected static volatile native interface strictfp synthetic annotation enum", "private protected static volatile native interface strictfp synthetic annotation enum", "private protected static volatile native interface strictfp synthetic annotation enum");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: private protected static volatile native interface strictfp synthetic annotation enum
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      Utility.typeOfSignature("BU88Q");
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)8;
      byte byte0 = (byte)27;
      byteArray0[1] = (byte)27;
      byteArray0[2] = (byte)8;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[6];
      int int0 = 1080;
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic(16, 1080);
      constantArray0[0] = (Constant) constantInvokeDynamic0;
      ConstantMethodType constantMethodType0 = new ConstantMethodType(byteSequence0);
      constantArray0[1] = (Constant) constantMethodType0;
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool(byteSequence0);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      char char0 = ',';
      Utility.format(256, 256, true, ',');
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      Utility.searchOpcode("256,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,");
      try { 
        Utility.typeOfSignature("256,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 256,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      String string0 = "H>GHRvqX";
      try { 
        Utility.methodSignatureReturnType("H>GHRvqX");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `H>GHRvqX'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      String string0 = "1J#iaOo'>#0gX1.DF";
      boolean boolean0 = false;
      Utility.compactClassName("1J#iaOo'>#0gX1.DF", false);
      String string1 = ", low = ";
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      try { 
        Utility.typeOfSignature(", low = ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: , low = 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      Utility.typeOfSignature("J3XB?EL^]v[;!&.E");
      // Undeclared exception!
      try { 
        Utility.signatureToString("aconst_null");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `aconst_null'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      Utility.searchOpcode(" N&z");
      String[] stringArray0 = new String[7];
      stringArray0[0] = " N&z";
      stringArray0[1] = "org.apache.bcel.classfile.Utility";
      stringArray0[2] = " N&z";
      stringArray0[3] = " N&z";
      stringArray0[4] = " N&z";
      stringArray0[5] = " N&z";
      stringArray0[6] = " N&z";
      Utility.methodTypeToSignature(" N&z", stringArray0);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString(" N&z", "a5\"FGXBQ~X!w3f^M>6", "fv@h=xPPD@Zs]", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature:  N&z
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Utility.fillup("]6=", 84, true, 'm');
      byte[] byteArray0 = Utility.decode("]6=", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.markSupported();
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byteSequence0.markSupported();
      String string0 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals("dup2_x1", string0);
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("LocalVariableTable");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: LocalVariableTable
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Utility.equals(byteArray0, byteArray0);
      Utility.searchOpcode("\"");
      Utility.accessToString((int) (short) (-1), true);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "public private protected static final volatile transient native abstract strictfp synthetic annotation enum");
      boolean boolean0 = false;
      try { 
        Utility.methodSignatureReturnType("`Bi$E!02_cQ+8Y=", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: ``Bi$E!02_cQ+8Y='
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      Utility.compactClassName("&F]s", "&F]s", true);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-8);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.read();
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool(byteSequence0);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      Utility.signatureToString("DY^S|", false);
      String string0 = "tableswitch";
      try { 
        Utility.decode("tableswitch", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) null;
      objectArray0[3] = (Object) null;
      objectArray0[4] = (Object) null;
      objectArray0[5] = (Object) null;
      objectArray0[6] = (Object) null;
      objectArray0[7] = (Object) null;
      Utility.printArray(objectArray0);
      int int0 = 32;
      Utility.setBit(32, 32);
      // Undeclared exception!
      try { 
        Utility.signatureToString("{null, null, null, null, null, null, null, null}", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `{null, null, null, null, null, null, null, null}'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      int int0 = (-714);
      Utility.classOrInterface((-714));
      Utility.compactClassName("class", true);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "class";
      // Undeclared exception!
      try { 
        Utility.printArray((PrintWriter) null, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      boolean boolean0 = true;
      Utility.fillup("if_icmple", (-1224), true, '?');
      Utility.format(2103, 2103, false, '?');
      Utility.compactClassName("if_icmple");
      try { 
        Utility.typeOfSignature("if_icmple");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: if_icmple
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Invalid type: ");
      Utility.isSet(170, 170);
      // Undeclared exception!
      try { 
        Utility.signatureToString("ishl");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `ishl'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byte byte0 = (byte)51;
      byteArray0[0] = (byte)51;
      byteArray0[1] = (byte)58;
      byteArray0[2] = (byte)13;
      boolean boolean0 = true;
      Utility.encode(byteArray0, true);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool(byteSequence0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid byte tag in constant pool: 13
         //
         verifyException("org.apache.bcel.classfile.Constant", e);
      }
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      Utility.searchOpcode(":1tIoxA4!Q");
      String string0 = Utility.fillup(")a+@", (short) (-1), false, ' ');
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) ")a+@";
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) ")a+@";
      Object object1 = new Object();
      objectArray0[3] = object1;
      objectArray0[4] = (Object) ":1tIoxA4!Q";
      objectArray0[5] = (Object) ")a+@";
      objectArray0[6] = (Object) ":1tIoxA4!Q";
      objectArray0[7] = (Object) ")a+@";
      objectArray0[8] = (Object) ")a+@";
      String string1 = Utility.printArray(objectArray0);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-70);
      byteArray0[1] = (byte) (-39);
      byteArray0[2] = (byte)79;
      byteArray0[3] = (byte) (-102);
      byteArray0[4] = (byte) (-33);
      byteArray0[5] = (byte) (-38);
      byte byte0 = (byte) (-101);
      byteArray0[6] = (byte) (-101);
      byteArray0[7] = (byte)57;
      byteArray0[8] = (byte)27;
      Utility.toHexString(byteArray0);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "ba d9 4f 9a df da 9b 39 1b";
      stringArray0[1] = "eb~0ZP'okH";
      stringArray0[2] = "qjzWWi7X08$%";
      stringArray0[3] = "int";
      Utility.methodTypeToSignature("qjzWWi7X08$%", stringArray0);
      String string0 = "?M6";
      Utility.compactClassName("?M6", false);
      try { 
        Utility.methodSignatureReturnType("dup2_x1");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `dup2_x1'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "short";
      stringArray0[1] = "short";
      Utility.methodTypeToSignature("short", stringArray0);
      Utility.searchOpcode("L{3`_u.J;yD5");
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte) (-20);
      byteArray0[2] = (byte) (-54);
      byteArray0[3] = (byte) (-25);
      Utility.toHexString(byteArray0);
      Utility.printArray((Object[]) stringArray0);
      boolean boolean0 = true;
      Utility.compactClassName("{short, short}", "idiv", true);
      Utility.setBit(2789, (byte) (-54));
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("org.apache.commons.io.filefilter.SizeFileFilter", "01 ec ca e7", "\t<");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: org.apache.commons.io.filefilter.SizeFileFilter
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      String string0 = Utility.convertString("jS }x,W");
      assertEquals("jS }x,W", string0);
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      String string0 = Utility.format(2801, 2801, true, 'l');
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      Utility.isJavaIdentifierPart('}');
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("\t\t", "\t\t", "\t\t", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: \t\t
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String string0 = "-";
      Utility.methodTypeToSignature("-", (String[]) null);
      Utility.signatureToString("Byte code error: ");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-30);
      byte byte0 = (byte) (-128);
      byteArray0[1] = (byte) (-128);
      byte byte1 = (byte)14;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "byte");
      byteArray0[2] = (byte)14;
      byte byte2 = (byte)34;
      byteArray0[3] = (byte)34;
      byte byte3 = (byte) (-105);
      byteArray0[4] = (byte) (-105);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readBoolean();
      byteSequence0.readUnsignedShort();
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool(byteSequence0);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      String string0 = "Invalid signature: `";
      Utility.methodSignatureReturnType("Invalid signature: `");
      String string1 = "Invalid signature: ";
      try { 
        Utility.decode("Invalid signature: ", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      Utility.accessToString((-200));
      byte[] byteArray0 = new byte[9];
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byteArray0[0] = (byte)88;
      byteArray0[1] = (byte) (-18);
      byteArray0[2] = (byte) (-89);
      byteArray0[3] = (byte)40;
      byteArray0[4] = (byte) (-37);
      byteArray0[5] = (byte) (-64);
      byteArray0[6] = (byte)125;
      byteArray0[7] = (byte)70;
      byte byte0 = (byte) (-95);
      byteArray0[8] = (byte) (-95);
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte)40;
      Utility.equals(byteArray0, byteArray1);
      Utility.decode("E>_pXy", false);
      MockFile mockFile0 = new MockFile("E>_pXy", "E>_pXy");
      MockRandomAccessFile mockRandomAccessFile0 = null;
      try {
        mockRandomAccessFile0 = new MockRandomAccessFile(mockFile0, "TX/}F");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal mode \"TX/}F\" must be one of \"r\", \"rw\", \"rws\", or \"rwd\"
         //
         verifyException("java.io.RandomAccessFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      String string0 = "ClCG_[";
      boolean boolean0 = false;
      Utility.methodSignatureReturnType("ClCG_[", false);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) "char";
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) "char";
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Utility.printArray(objectArray0);
      Utility.searchOpcode("lshr");
      try { 
        Utility.methodSignatureArgumentTypes("{char, java.lang.Object@262335aa, char}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: {char, java.lang.Object@262335aa, char}
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      String string0 = "multianewarray";
      byte[] byteArray0 = null;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      boolean boolean0 = false;
      try { 
        Utility.methodSignatureArgumentTypes("multianewarray", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: multianewarray
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("arraylength");
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) mockPrintStream0;
      objectArray0[1] = (Object) "arraylength";
      objectArray0[2] = (Object) "arraylength";
      objectArray0[3] = (Object) "arraylength";
      objectArray0[4] = (Object) mockPrintStream0;
      objectArray0[5] = (Object) mockPrintStream0;
      objectArray0[6] = (Object) mockPrintStream0;
      objectArray0[7] = (Object) mockPrintStream0;
      Utility.printArray((PrintStream) mockPrintStream0, objectArray0);
      assertEquals(8, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      Utility.clearBit(169, (-1));
      Utility.accessToString(125, true);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "public protected static final volatile";
      objectArray0[1] = (Object) "public protected static final volatile";
      objectArray0[2] = (Object) "public protected static final volatile";
      objectArray0[3] = (Object) "public protected static final volatile";
      objectArray0[4] = (Object) "public protected static final volatile";
      objectArray0[5] = (Object) "public protected static final volatile";
      Utility.printArray(objectArray0);
      Utility.classOrInterface(125);
      // Undeclared exception!
      try { 
        Utility.methodSignatureArgumentTypes((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      Utility.clearBit(70, 70);
      String string0 = "c2}Hn~FT'";
      try { 
        Utility.methodSignatureReturnType("c2}Hn~FT'");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `c2}Hn~FT''
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      int int0 = Utility.setBit(140, 140);
      assertEquals(4236, int0);
      
      String string0 = Utility.compactClassName("=", false);
      assertEquals("=", string0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-77);
      byteArray0[1] = (byte) (-95);
      byteArray0[2] = (byte)112;
      byteArray0[3] = (byte)16;
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean0);
      
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "=";
      objectArray0[1] = (Object) (byte)16;
      objectArray0[2] = (Object) "=";
      objectArray0[3] = (Object) "=";
      String string1 = Utility.printArray(objectArray0, true, false);
      assertEquals("{=, 16, =, =}", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      Object object5 = new Object();
      objectArray0[5] = object5;
      Object object6 = new Object();
      objectArray0[6] = object6;
      Object object7 = new Object();
      objectArray0[7] = object7;
      Object object8 = new Object();
      objectArray0[8] = object8;
      String string0 = Utility.printArray(objectArray0, true, true);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      Utility.searchOpcode("impdep1");
      Utility.isJavaIdentifierPart('D');
      Utility.accessToString(214, false);
      String string0 = "jZW";
      Utility.convertString("jZW");
      int int0 = 7;
      Utility.classOrInterface(7);
      String string1 = "";
      try { 
        Utility.methodSignatureArgumentTypes("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Utility.isJavaIdentifierPart('0');
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Utility.setBit(2003, 222);
      String string0 = "goto";
      try { 
        Utility.typeOfMethodSignature("goto");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: goto
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = ")jS0U+;f4=Xw$JT";
      stringArray0[1] = ")jS0U+;f4=Xw$JT";
      stringArray0[2] = ")jS0U+;f4=Xw$JT";
      stringArray0[3] = ")jS0U+;f4=Xw$JT";
      stringArray0[4] = ")jS0U+;f4=Xw$JT";
      stringArray0[5] = ";Z:>wHmd";
      stringArray0[6] = ")jS0U+;f4=Xw$JT";
      Utility.methodTypeToSignature(")jS0U+;f4=Xw$JT", stringArray0);
      String string0 = Utility.methodTypeToSignature(")jS0U+;f4=Xw$JT", stringArray0);
      assertEquals("(L)jS0U+;f4=Xw$JT;L)jS0U+;f4=Xw$JT;L)jS0U+;f4=Xw$JT;L)jS0U+;f4=Xw$JT;L)jS0U+;f4=Xw$JT;L;Z:>wHmd;L)jS0U+;f4=Xw$JT;)L)jS0U+;f4=Xw$JT;", string0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)51;
      byteArray0[2] = (byte)55;
      byteArray0[3] = (byte)74;
      byteArray0[4] = (byte) (-90);
      byteArray0[5] = (byte) (-92);
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte) (-37);
      String string1 = Utility.toHexString(byteArray0);
      assertEquals("00 33 37 4a a6 a4 00 db", string1);
      
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) (byte) (-37);
      objectArray0[1] = (Object) (byte) (-92);
      objectArray0[2] = (Object) (byte) (-37);
      objectArray0[3] = (Object) ")jS0U+;f4=Xw$JT";
      String string2 = Utility.printArray(objectArray0, true);
      assertEquals("{-37, -92, -37, )jS0U+;f4=Xw$JT}", string2);
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      int int0 = (-5);
      Utility.isSet((-5), (-5));
      Utility.compactClassName("Bogus", true);
      String[] stringArray0 = new String[0];
      Utility.methodTypeToSignature("", stringArray0);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)96;
      byte byte0 = (byte) (-5);
      byteArray0[1] = (byte) (-5);
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool((DataInput) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      String string0 = "C9J/3~";
      try { 
        Utility.typeOfMethodSignature("C9J/3~");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: C9J/3~
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      Utility.classOrInterface(0);
      Utility.replace("class", "Invalid frame type found while parsing stack map table: ", "class");
      Utility.fillup("class", 0, true, '&');
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-63);
      byteArray0[1] = (byte)67;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.read();
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool(byteSequence0);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "}P-4piJ_R0");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      String string0 = Utility.accessToString((-4516));
      assertEquals("protected static final volatile interface abstract strictfp annotation enum", string0);
      
      String string1 = Utility.replace("protected static final volatile interface abstract strictfp annotation enum", "protected static final volatile interface abstract strictfp annotation enum", "]$");
      assertEquals("]$", string1);
      
      String string2 = Utility.getSignature("!9L!2khuzY#vcN9");
      assertEquals("L!9L!2khuzY#vcN9;", string2);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-84);
      byteArray0[1] = (byte) (-71);
      byteArray0[2] = (byte) (-18);
      byteArray0[3] = (byte) (-83);
      byteArray0[4] = (byte) (-61);
      byteArray0[5] = (byte)83;
      byteArray0[6] = (byte) (-55);
      byteArray0[7] = (byte)31;
      byteArray0[8] = (byte)1;
      String string3 = Utility.encode(byteArray0, false);
      assertEquals("$ac$b9$ee$ad$c3S$c9$l$B", string3);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) (byte) (-84);
      objectArray0[1] = (Object) "protected static final volatile interface abstract strictfp annotation enum";
      String string4 = Utility.printArray(objectArray0, false, false);
      assertEquals("-84, protected static final volatile interface abstract strictfp annotation enum", string4);
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-86);
      byteArray0[1] = (byte)47;
      byteArray0[2] = (byte) (-17);
      byteArray0[3] = (byte)78;
      byteArray0[4] = (byte) (-73);
      byteArray0[5] = (byte) (-99);
      byteArray0[6] = (byte)36;
      Utility.toHexString(byteArray0);
      try { 
        Utility.methodSignatureReturnType("aa 2f ef 4e b7 9d 24");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `aa 2f ef 4e b7 9d 24'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)75;
      byteArray0[1] = (byte)82;
      byteArray0[2] = (byte)66;
      byteArray0[3] = (byte)90;
      byteArray0[4] = (byte) (-94);
      byteArray0[5] = (byte)88;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 3173, (int) (byte)90, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      Object[] objectArray0 = null;
      boolean boolean0 = false;
      Utility.printArray((Object[]) null, false);
      Utility.compactClassName("");
      Utility.replace("6|+}", "ifnonnull", "");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-35);
      byteArray0[1] = (byte)33;
      byteArray0[2] = (byte)15;
      byteArray0[3] = (byte)53;
      byteArray0[4] = (byte)21;
      byteArray0[5] = (byte) (-68);
      byteArray0[6] = (byte) (-39);
      byteArray0[7] = (byte) (-92);
      byteArray0[8] = (byte)53;
      Constant[] constantArray0 = new Constant[1];
      ConstantInteger constantInteger0 = new ConstantInteger((byte)53);
      constantArray0[0] = (Constant) constantInteger0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      int int0 = (-1102);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (-1102), (int) (byte) (-35));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    <illegal opcode>
         // 1:    lload_3
         // 2:    dconst_1
         // 3:    saload
         // 4:    iload\t\t%188
         // 6:    <illegal opcode>
         // 7:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ", high = ");
      String string0 = Utility.accessToString(191);
      assertEquals("public private protected static final synchronized transient", string0);
      
      Utility.searchOpcode("D.p4TSU)kj9s5F");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-8);
      byteArray0[1] = (byte) (-79);
      byteArray0[2] = (byte) (-40);
      byteArray0[3] = (byte)61;
      byteArray0[4] = (byte)11;
      String string1 = Utility.codeToString(byteArray0, (ConstantPool) null, 0, 218, true);
      assertEquals("0:    <illegal opcode>\n1:    return\n2:    <illegal opcode>\n3:    istore_2\n4:    fconst_0\n", string1);
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      String string0 = Utility.getSignature("22@:");
      assertEquals("L22@:;", string0);
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      Utility.convertString("nQ$L>t}");
      String string0 = "";
      try { 
        Utility.methodSignatureReturnType("", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-91);
      byteArray0[1] = (byte) (-122);
      byteArray0[2] = (byte)2;
      Utility.encode(byteArray0, false);
      int int0 = 186;
      Utility.setBit(186, (byte)2);
      MockRandomAccessFile mockRandomAccessFile0 = null;
      try {
        mockRandomAccessFile0 = new MockRandomAccessFile(".#2KBxJFkK.C", "$a5$86$C");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal mode \"$a5$86$C\" must be one of \"r\", \"rw\", \"rws\", or \"rwd\"
         //
         verifyException("java.io.RandomAccessFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ";[~+BC7Z5^z4Pp#eQ");
      try { 
        Utility.typeOfSignature("OUM");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: OUM
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      Utility.classOrInterface((-2476));
      byte[] byteArray0 = Utility.decode("interface", false);
      Utility.getSignature("interface");
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.toString();
      Utility.compactClassName("Linterface;", "", false);
      Utility.signatureToString("Linterface;");
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, constantPool0);
      Utility.printArray((Object[]) constantArray0, false);
      Utility.codeToString(byteSequence0, constantPool0);
      // Undeclared exception!
      try { 
        Utility.signatureToString("i7N5", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `i7N5'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }
}
