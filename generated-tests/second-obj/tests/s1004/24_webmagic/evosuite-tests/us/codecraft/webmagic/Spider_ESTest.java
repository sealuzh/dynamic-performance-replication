/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 06 18:12:34 GMT 2018
 */

package us.codecraft.webmagic;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.PipedInputStream;
import java.util.Collection;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.concurrent.BlockingQueue;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.ForkJoinPool;
import java.util.concurrent.ForkJoinTask;
import java.util.concurrent.LinkedBlockingDeque;
import java.util.concurrent.LinkedTransferQueue;
import java.util.concurrent.PriorityBlockingQueue;
import java.util.concurrent.ScheduledThreadPoolExecutor;
import java.util.concurrent.ThreadFactory;
import java.util.concurrent.ThreadPoolExecutor;
import java.util.concurrent.TimeUnit;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import us.codecraft.webmagic.Page;
import us.codecraft.webmagic.Request;
import us.codecraft.webmagic.Site;
import us.codecraft.webmagic.Spider;
import us.codecraft.webmagic.SpiderListener;
import us.codecraft.webmagic.downloader.Downloader;
import us.codecraft.webmagic.downloader.PhantomJSDownloader;
import us.codecraft.webmagic.monitor.SpiderMonitor;
import us.codecraft.webmagic.pipeline.CollectorPipeline;
import us.codecraft.webmagic.pipeline.FilePipeline;
import us.codecraft.webmagic.pipeline.JsonFilePipeline;
import us.codecraft.webmagic.pipeline.Pipeline;
import us.codecraft.webmagic.processor.SimplePageProcessor;
import us.codecraft.webmagic.scheduler.DuplicateRemovedScheduler;
import us.codecraft.webmagic.scheduler.FileCacheQueueScheduler;
import us.codecraft.webmagic.scheduler.PriorityScheduler;
import us.codecraft.webmagic.scheduler.QueueScheduler;
import us.codecraft.webmagic.scheduler.Scheduler;
import us.codecraft.webmagic.scheduler.component.DuplicateRemover;
import us.codecraft.webmagic.selector.Json;
import us.codecraft.webmagic.selector.SmartContentSelector;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Spider_ESTest extends Spider_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = new Spider(simplePageProcessor0);
      Spider spider1 = spider0.setUUID("");
      boolean boolean0 = true;
      Spider spider2 = spider1.setSpawnUrl(true);
      Request[] requestArray0 = new Request[0];
      spider2.addRequest(requestArray0);
      SmartContentSelector smartContentSelector0 = new SmartContentSelector();
      // Undeclared exception!
      try { 
        smartContentSelector0.selectList("");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.selector.SmartContentSelector", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("Thread interrupted when sleep");
      Spider spider0 = new Spider(simplePageProcessor0);
      FilePipeline filePipeline0 = new FilePipeline();
      spider0.addPipeline(filePipeline0);
      Spider spider1 = spider0.setExitWhenComplete(true);
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider1.isSpawnUrl());
      assertTrue(spider0.isExitWhenComplete());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("9c");
      Spider spider0 = Spider.create(simplePageProcessor0);
      QueueScheduler queueScheduler0 = new QueueScheduler();
      Spider spider1 = spider0.setScheduler(queueScheduler0);
      String string0 = spider1.getUUID();
      assertNull(string0);
      
      long long0 = spider1.getPageCount();
      assertEquals(0L, long0);
      assertTrue(spider1.isExitWhenComplete());
      assertTrue(spider1.isSpawnUrl());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("<5SX`L6dm8<>ikP}Ci");
      Spider spider0 = Spider.create(simplePageProcessor0);
      CollectorPipeline collectorPipeline0 = spider0.getCollectorPipeline();
      Spider spider1 = spider0.pipeline(collectorPipeline0);
      spider1.getSpiderListeners();
      Spider spider2 = spider1.setSpiderListeners((List<SpiderListener>) null);
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      priorityScheduler0.poll(spider2);
      // Undeclared exception!
      try { 
        spider2.onSuccess((Request) null);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/collections/CollectionUtils
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("page status code error, page {} , code: {}");
      Spider spider0 = Spider.create(simplePageProcessor0);
      QueueScheduler queueScheduler0 = new QueueScheduler();
      Spider spider1 = spider0.setScheduler(queueScheduler0);
      Spider spider2 = spider1.setUUID("K*&");
      Spider spider3 = spider2.setExitWhenComplete(true);
      Spider spider4 = spider3.thread(704);
      boolean boolean0 = spider4.isSpawnUrl();
      assertTrue(boolean0);
      assertEquals(0L, spider4.getPageCount());
      assertTrue(spider2.isExitWhenComplete());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("-");
      Spider spider0 = Spider.create(simplePageProcessor0);
      spider0.clearPipeline();
      LinkedList<SpiderListener> linkedList0 = new LinkedList<SpiderListener>();
      Locale.forLanguageTag("Stopped");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      spider0.setEmptySleepTime(1000);
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isSpawnUrl());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("H4}");
      Spider spider0 = Spider.create(simplePageProcessor0);
      LinkedList<Request> linkedList0 = new LinkedList<Request>();
      Spider spider1 = spider0.startRequest(linkedList0);
      Spider spider2 = spider0.clearPipeline();
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("H4}", "process request ");
      Page page0 = Page.fail();
      page0.setRawText("H4}");
      page0.getHeaders();
      Spider spider3 = spider2.setDownloader(phantomJSDownloader0);
      ForkJoinPool.commonPool();
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      spider1.getScheduler();
      String[] stringArray0 = new String[0];
      spider3.test(stringArray0);
      boolean boolean0 = spider0.isExitWhenComplete();
      assertTrue(boolean0);
      
      List<SpiderListener> list0 = spider1.getSpiderListeners();
      assertNull(list0);
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider1.isSpawnUrl());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("H4}");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Spider spider1 = spider0.setUUID("H4}");
      LinkedList<SpiderListener> linkedList0 = new LinkedList<SpiderListener>();
      Spider spider2 = spider1.setSpiderListeners(linkedList0);
      Spider spider3 = spider2.clearPipeline();
      spider3.getUUID();
      Spider.Status.values();
      spider3.thread(2873);
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      Request request0 = new Request();
      request0.setUrl("Smart content can not apply to plain text. Please check whether you use a previous xpath with attribute select (/@href etc).");
      String string0 = "";
      PhantomJSDownloader phantomJSDownloader0 = null;
      try {
        phantomJSDownloader0 = new PhantomJSDownloader();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("2Qlus");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "2Qlus");
      Spider spider0 = new Spider(simplePageProcessor0);
      TimeUnit timeUnit0 = TimeUnit.MINUTES;
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(3241);
      BlockingQueue<Runnable> blockingQueue0 = scheduledThreadPoolExecutor0.getQueue();
      ThreadFactory threadFactory0 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer());
      ThreadPoolExecutor threadPoolExecutor0 = new ThreadPoolExecutor(3241, 3241, 3241, timeUnit0, blockingQueue0, threadFactory0);
      // Undeclared exception!
      try { 
        spider0.thread((ExecutorService) threadPoolExecutor0, (-469));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // threadNum should be more than one!
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("I7,i'VtEYV&O6~.DUO");
      Spider spider0 = Spider.create(simplePageProcessor0);
      spider0.isSpawnUrl();
      spider0.setExitWhenComplete(true);
      spider0.start();
      QueueScheduler queueScheduler0 = new QueueScheduler();
      spider0.scheduler(queueScheduler0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = Spider.create(simplePageProcessor0);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      // Undeclared exception!
      try { 
        spider0.test(stringArray0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/http/protocol/HttpContext
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("[DXToqFz@h");
      Spider spider0 = Spider.create(simplePageProcessor0);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "[DXToqFz@h";
      stringArray0[1] = "[DXToqFz@h";
      stringArray0[2] = "{^!o66";
      stringArray0[3] = "[DXToqFz@h";
      // Undeclared exception!
      try { 
        spider0.addUrl(stringArray0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      String string0 = "w;+^b'<!}R2";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("w;+^b'<!}R2");
      Spider spider0 = new Spider(simplePageProcessor0);
      Spider spider1 = spider0.setExitWhenComplete(true);
      Request[] requestArray0 = new Request[1];
      Request request0 = new Request("w;+^b'<!}R2");
      // Undeclared exception!
      try { 
        spider1.addRequest(requestArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.scheduler.DuplicateRemovedScheduler", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor(" stop fail!");
      Spider spider0 = new Spider(simplePageProcessor0);
      // Undeclared exception!
      try { 
        spider0.thread((-2349));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // threadNum should be more than one!
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("!eJ>{AXTqb=BGDo* 1");
      Spider spider0 = new Spider(simplePageProcessor0);
      ForkJoinPool forkJoinPool0 = ForkJoinPool.commonPool();
      Spider spider1 = spider0.setExecutorService(forkJoinPool0);
      // Undeclared exception!
      try { 
        spider1.initComponent();
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/http/protocol/HttpContext
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("<Ua0]&/E");
      Spider spider0 = new Spider(simplePageProcessor0);
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("=h),9Ko5");
      spider0.sleep(18);
      assertTrue(spider0.isSpawnUrl());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(0L, spider0.getPageCount());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("<Ua,0/E");
      Spider spider0 = new Spider(simplePageProcessor0);
      LinkedTransferQueue<String> linkedTransferQueue0 = new LinkedTransferQueue<String>();
      // Undeclared exception!
      try { 
        spider0.getAll((Collection<String>) linkedTransferQueue0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/http/protocol/HttpContext
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("|3Bk4 L]XGp', Be,]");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Page page0 = Page.fail();
      // Undeclared exception!
      try { 
        spider0.extractAndAddRequests(page0, true);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/collections/CollectionUtils
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("H4}");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Spider spider1 = spider0.setPipelines((List<Pipeline>) null);
      LinkedList<SpiderListener> linkedList0 = new LinkedList<SpiderListener>();
      spider1.setSpiderListeners(linkedList0);
      Spider spider2 = spider1.setUUID("H4}");
      Spider.Status.values();
      int int0 = 2873;
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      Page page0 = new Page();
      // Undeclared exception!
      try { 
        spider2.get((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ConcurrentHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("_plus");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "_plus");
      Spider spider0 = new Spider(simplePageProcessor0);
      spider0.clearPipeline();
      spider0.getUUID();
      Spider.Status.values();
      spider0.thread(2873);
      Request request0 = new Request();
      spider0.stop();
      request0.setUrl((String) null);
      request0.setBinaryContent(true);
      request0.setMethod("a");
      Page page0 = new Page();
      assertNull(page0.getCharset());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = Spider.create(simplePageProcessor0);
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("");
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      locale0.getUnicodeLocaleAttributes();
      List<SpiderMonitor.MonitorSpiderListener> list0 = new LinkedList<SpiderMonitor.MonitorSpiderListener>();
      Spider spider1 = spider0.clearPipeline();
      Spider spider2 = spider1.setScheduler(fileCacheQueueScheduler0);
      assertTrue(spider2.isExitWhenComplete());
      assertEquals(0L, spider2.getPageCount());
      assertTrue(spider2.isSpawnUrl());
      
      Spider.Status spider_Status0 = Spider.Status.Stopped;
      int int0 = spider_Status0.getValue();
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor(" ");
      Spider spider0 = Spider.create(simplePageProcessor0);
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      spider0.scheduler(priorityScheduler0);
      Page.fail();
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("", "");
      Page page0 = new Page();
      page0.getHeaders();
      LinkedList<SpiderListener> linkedList0 = new LinkedList<SpiderListener>();
      spider0.getThreadAlive();
      Integer integer0 = new Integer(5);
      spider0.stop();
      Spider.Status spider_Status0 = Spider.Status.fromValue(1045);
      assertEquals(Spider.Status.Init, spider_Status0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "I7,i'VtEYV&O6~.DUO");
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("I7,i'VtEYV&O6~.DUO");
      Spider spider0 = Spider.create(simplePageProcessor0);
      spider0.isSpawnUrl();
      assertTrue(spider0.isExitWhenComplete());
      
      Spider spider1 = spider0.setExitWhenComplete(false);
      Spider spider2 = spider1.clearPipeline();
      spider2.start();
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("invalid regex ");
      DuplicateRemover duplicateRemover0 = fileCacheQueueScheduler0.getDuplicateRemover();
      DuplicateRemovedScheduler duplicateRemovedScheduler0 = fileCacheQueueScheduler0.setDuplicateRemover(duplicateRemover0);
      // Undeclared exception!
      try { 
        spider1.scheduler(duplicateRemovedScheduler0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Spider is already running!
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = Spider.create(simplePageProcessor0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Spider spider1 = spider0.clearPipeline();
      LinkedList<SpiderListener> linkedList0 = new LinkedList<SpiderListener>();
      Spider.Status.values();
      Page.fail();
      Spider spider2 = spider1.thread(1332);
      Page.fail();
      Request request0 = new Request();
      ForkJoinTask.getPool();
      spider2.thread((ExecutorService) null, 1332);
      Request request1 = request0.setPriority(17L);
      // Undeclared exception!
      try { 
        spider1.onError(request1);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/collections/CollectionUtils
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-107);
      byteArray0[1] = (byte)9;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Spider.Status.fromValue(0);
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("!Mo'T3.5^VoJp.");
      Spider spider0 = new Spider(simplePageProcessor0);
      // Undeclared exception!
      try { 
        spider0.initComponent();
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/http/protocol/HttpContext
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("H4}");
      Spider spider0 = Spider.create(simplePageProcessor0);
      LinkedList<SpiderListener> linkedList0 = new LinkedList<SpiderListener>();
      Spider.Status.values();
      Spider spider1 = spider0.thread(179);
      Request request0 = new Request();
      request0.setCharset("y)b,qYSP");
      request0.setUrl("jio~PY?NpaEh.xv");
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      spider1.setScheduler(priorityScheduler0);
      SimplePageProcessor simplePageProcessor1 = new SimplePageProcessor("jio~PY?NpaEh.xv");
      LinkedList<Pipeline> linkedList1 = new LinkedList<Pipeline>();
      Spider.Status.values();
      Page page0 = new Page();
      spider1.getStatus();
      assertTrue(spider1.isExitWhenComplete());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("6h<}fH");
      FileSystemHandling.shouldAllThrowIOExceptions();
      Spider spider0 = Spider.create(simplePageProcessor0);
      LinkedList<Request> linkedList0 = new LinkedList<Request>();
      Spider spider1 = spider0.startRequest(linkedList0);
      spider1.setUUID("6h<}fH");
      Page page0 = Page.fail();
      Page page1 = new Page();
      spider0.checkIfRunning();
      page0.getHeaders();
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      // Undeclared exception!
      try { 
        spider0.getAll((Collection<String>) linkedBlockingDeque0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/http/protocol/HttpContext
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = new Spider(simplePageProcessor0);
      ThreadFactory threadFactory0 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer());
      ThreadPoolExecutor.AbortPolicy threadPoolExecutor_AbortPolicy0 = new ThreadPoolExecutor.AbortPolicy();
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(333, threadFactory0, threadPoolExecutor_AbortPolicy0);
      Spider spider1 = spider0.thread((ExecutorService) scheduledThreadPoolExecutor0, 333);
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      Spider spider2 = spider1.setScheduler(priorityScheduler0);
      assertTrue(spider2.isExitWhenComplete());
      
      Spider spider3 = spider2.setExitWhenComplete(false);
      SpiderMonitor spiderMonitor0 = SpiderMonitor.instance();
      SpiderMonitor.MonitorSpiderListener spiderMonitor_MonitorSpiderListener0 = spiderMonitor0.new MonitorSpiderListener();
      List<String> list0 = spiderMonitor_MonitorSpiderListener0.getErrorUrls();
      Spider spider4 = spider3.startUrls(list0);
      spider4.getSpiderListeners();
      Spider spider5 = spider4.setSpiderListeners((List<SpiderListener>) null);
      String[] stringArray0 = new String[0];
      spider5.addUrl(stringArray0);
      assertFalse(spider0.isExitWhenComplete());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      String string0 = "_plus";
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("_plus");
      Spider spider0 = new Spider(simplePageProcessor0);
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("_plus");
      spider0.scheduler = (Scheduler) fileCacheQueueScheduler0;
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      // Undeclared exception!
      try { 
        spider0.close();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.scheduler.FileCacheQueueScheduler", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      LinkedList<Request> linkedList0 = new LinkedList<Request>();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Page page0 = Page.fail();
      Page.fail();
      page0.getHeaders();
      page0.setHeaders((Map<String, List<String>>) null);
      ForkJoinPool forkJoinPool0 = ForkJoinPool.commonPool();
      LinkedList<Pipeline> linkedList1 = new LinkedList<Pipeline>();
      JsonFilePipeline jsonFilePipeline0 = new JsonFilePipeline("Vh<");
      String[] stringArray0 = new String[1];
      stringArray0[0] = "/";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = new Spider(simplePageProcessor0);
      Spider spider1 = spider0.setExecutorService(forkJoinPool0);
      spider1.getStartTime();
      assertTrue(spider1.isExitWhenComplete());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("2Qlus");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "2Qlus");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Spider spider1 = spider0.setDownloader((Downloader) null);
      Spider spider2 = spider1.setScheduler((Scheduler) null);
      LinkedList<Pipeline> linkedList0 = new LinkedList<Pipeline>();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      Json json0 = new Json(linkedList1);
      Spider.Status.values();
      spider2.getThreadAlive();
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("Running");
      DuplicateRemover duplicateRemover0 = fileCacheQueueScheduler0.getDuplicateRemover();
      FileCacheQueueScheduler fileCacheQueueScheduler1 = new FileCacheQueueScheduler("Running");
      fileCacheQueueScheduler1.setDuplicateRemover(duplicateRemover0);
      spider2.setScheduler(fileCacheQueueScheduler1);
      spider1.getPageCount();
      // Undeclared exception!
      try { 
        spider2.get("2Qlus");
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("#");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Spider spider1 = spider0.clearPipeline();
      LinkedList<SpiderListener> linkedList0 = new LinkedList<SpiderListener>();
      Locale locale0 = Locale.forLanguageTag("Stoppe");
      locale0.getUnicodeLocaleKeys();
      LinkedList<SpiderListener> linkedList1 = new LinkedList<SpiderListener>();
      Spider.Status.values();
      Spider spider2 = spider0.thread(1);
      Page.fail();
      Spider.Status.values();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      spider2.setExitWhenComplete(false);
      Page.fail();
      Request request0 = new Request();
      Request request1 = request0.setPriority(1329);
      Request request2 = request0.setCharset("_cycle_tried_times");
      request2.setUrl("_cycle_tried_times");
      QueueScheduler queueScheduler0 = new QueueScheduler();
      Site site0 = spider0.getSite();
      site0.toTask();
      Request request3 = request2.setPriority((-1053L));
      request3.setMethod("_cycle_tried_times");
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      priorityScheduler0.pushWhenNoDuplicate(request1, spider2);
      Page page0 = new Page();
      // Undeclared exception!
      try { 
        spider1.get("h{U [Ejox0Mt3FZ");
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor(" ");
      Spider spider0 = Spider.create(simplePageProcessor0);
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      Spider spider1 = spider0.scheduler(priorityScheduler0);
      Page page0 = Page.fail();
      List<Request> list0 = page0.getTargetRequests();
      Spider spider2 = spider1.startRequest(list0);
      Spider spider3 = spider2.clearPipeline();
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("", "");
      Page page1 = new Page();
      page1.getHeaders();
      page0.setHeaders((Map<String, List<String>>) null);
      Spider spider4 = spider3.setDownloader(phantomJSDownloader0);
      ForkJoinPool forkJoinPool0 = ForkJoinPool.commonPool();
      spider4.setExecutorService(forkJoinPool0);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "";
      // Undeclared exception!
      try { 
        spider3.test(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Spider spider1 = spider0.thread(3);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("Stopped", "Stopped");
      Spider spider2 = spider1.downloader(phantomJSDownloader0);
      PriorityBlockingQueue<String> priorityBlockingQueue0 = new PriorityBlockingQueue<String>();
      List<Request> list0 = spider0.getAll((Collection<String>) priorityBlockingQueue0);
      Spider spider3 = spider2.startRequest(list0);
      spider3.close();
      assertTrue(spider3.isSpawnUrl());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("H4}");
      Spider spider0 = Spider.create(simplePageProcessor0);
      LinkedList<Request> linkedList0 = new LinkedList<Request>();
      Spider spider1 = spider0.setUUID("H4}");
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("H4}", "H4}");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Page page0 = Page.fail();
      Page page1 = Page.fail();
      page0.getHeaders();
      Spider spider2 = spider1.clearPipeline();
      ForkJoinPool.commonPool();
      PhantomJSDownloader phantomJSDownloader1 = new PhantomJSDownloader("", "us.codecraft.webmagic.Spider$Status");
      Page page2 = Page.fail();
      page2.setRawText("H4}");
      spider2.checkIfRunning();
      page0.getHeaders();
      page1.setHeaders((Map<String, List<String>>) null);
      spider2.setDownloader(phantomJSDownloader1);
      ForkJoinPool.commonPool();
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      spider0.setSpawnUrl(false);
      assertFalse(spider0.isSpawnUrl());
      
      spider1.getAll((Collection<String>) linkedBlockingDeque0);
      spider0.getThreadAlive();
      assertTrue(spider0.isSpawnUrl());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("Hbob4");
      Spider spider0 = Spider.create(simplePageProcessor0);
      LinkedList<Request> linkedList0 = new LinkedList<Request>();
      Spider spider1 = spider0.startRequest(linkedList0);
      Spider spider2 = spider1.clearPipeline();
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("Hbob4", "");
      Page page0 = Page.fail();
      page0.setRawText("Hbob4");
      Spider spider3 = spider2.setDownloader(phantomJSDownloader0);
      ForkJoinPool.commonPool();
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      LinkedList<Pipeline> linkedList1 = new LinkedList<Pipeline>();
      spider1.clearPipeline();
      spider3.thread(1236);
      spider1.initComponent();
      // Undeclared exception!
      try { 
        spider3.test((String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("}[`[\"Cj4qlgWXV");
      Spider spider0 = new Spider(simplePageProcessor0);
      LinkedList<SpiderListener> linkedList0 = new LinkedList<SpiderListener>();
      Spider spider1 = spider0.setSpiderListeners(linkedList0);
      spider1.start();
      spider1.isExitWhenComplete();
      // Undeclared exception!
      try { 
        spider1.initComponent();
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/http/protocol/HttpContext
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("H4}");
      Spider spider0 = Spider.create(simplePageProcessor0);
      LinkedList<Request> linkedList0 = new LinkedList<Request>();
      Spider spider1 = spider0.startRequest(linkedList0);
      Spider spider2 = spider1.clearPipeline();
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("H4}", "H4}");
      spider2.runAsync();
      Page page0 = Page.fail();
      Page.fail();
      page0.getHeaders();
      page0.setHeaders((Map<String, List<String>>) null);
      spider2.setDownloader(phantomJSDownloader0);
      ForkJoinPool.commonPool();
      LinkedList<Pipeline> linkedList1 = new LinkedList<Pipeline>();
      spider1.clearPipeline();
      JsonFilePipeline jsonFilePipeline0 = new JsonFilePipeline("Vh<");
      // Undeclared exception!
      try { 
        spider1.pipeline(jsonFilePipeline0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Spider is already running!
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("H4}");
      Spider spider0 = Spider.create(simplePageProcessor0);
      LinkedList<Request> linkedList0 = new LinkedList<Request>();
      Spider spider1 = spider0.startRequest(linkedList0);
      Spider spider2 = spider1.clearPipeline();
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("H4}", "H4}");
      Page page0 = Page.fail();
      page0.setRawText("");
      Spider spider3 = spider2.setDownloader(phantomJSDownloader0);
      ForkJoinPool.commonPool();
      LinkedList<Pipeline> linkedList1 = new LinkedList<Pipeline>();
      Spider spider4 = spider1.clearPipeline();
      JsonFilePipeline jsonFilePipeline0 = new JsonFilePipeline("H4}");
      spider4.clearPipeline();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(29);
      Spider spider5 = spider3.setUUID("/");
      Spider spider6 = spider5.setExecutorService(scheduledThreadPoolExecutor0);
      spider2.clearPipeline();
      Spider spider7 = spider3.pipeline(jsonFilePipeline0);
      page0.setRawText("/");
      spider7.setUUID("Running");
      spider6.setUUID("/");
      Spider spider8 = spider7.clearPipeline();
      spider7.initComponent();
      spider6.close();
      spider8.getCollectorPipeline();
      // Undeclared exception!
      try { 
        spider4.test((String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("H4}");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Spider spider1 = Spider.create(simplePageProcessor0);
      LinkedList<Request> linkedList0 = new LinkedList<Request>();
      Spider spider2 = spider1.startRequest(linkedList0);
      spider2.clearPipeline();
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("H4}", "H4}");
      Page page0 = Page.fail();
      page0.setRawText("");
      Spider spider3 = spider2.setDownloader(phantomJSDownloader0);
      ForkJoinPool forkJoinPool0 = ForkJoinPool.commonPool();
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      List<Pipeline> list0 = spider3.getAll((Collection<String>) linkedBlockingDeque0);
      SimplePageProcessor simplePageProcessor1 = new SimplePageProcessor("H4}");
      Spider spider4 = spider2.setPipelines(list0);
      spider4.thread((ExecutorService) forkJoinPool0, 2);
      spider1.setPipelines(list0);
      Spider.Status.values();
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("H4}");
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      CollectorPipeline collectorPipeline0 = spider0.getCollectorPipeline();
      Spider spider5 = spider0.pipeline(collectorPipeline0);
      spider5.stop();
      Spider spider6 = spider2.setUUID((String) null);
      spider4.start();
      spider1.scheduler(fileCacheQueueScheduler0);
      spider5.getUUID();
      // Undeclared exception!
      try { 
        spider6.setPipelines(list0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Spider is already running!
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("H4}");
      Spider spider0 = Spider.create(simplePageProcessor0);
      LinkedList<Request> linkedList0 = new LinkedList<Request>();
      Spider spider1 = spider0.startRequest(linkedList0);
      Spider spider2 = spider1.clearPipeline();
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("H4}", "H4}");
      Page page0 = Page.fail();
      page0.setRawText("");
      Spider spider3 = spider2.setDownloader(phantomJSDownloader0);
      LinkedList<Pipeline> linkedList1 = new LinkedList<Pipeline>();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)15;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Spider spider4 = spider1.clearPipeline();
      JsonFilePipeline jsonFilePipeline0 = new JsonFilePipeline("H4}");
      Spider spider5 = spider4.clearPipeline();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(29);
      spider3.setUUID("/");
      spider2.run();
      spider2.clearPipeline();
      Spider spider6 = spider3.pipeline(jsonFilePipeline0);
      page0.setRawText("/");
      spider6.setUUID("Running");
      spider5.setUUID("/");
      Spider spider7 = spider6.clearPipeline();
      spider6.initComponent();
      spider1.close();
      spider6.runAsync();
      spider7.getCollectorPipeline();
      // Undeclared exception!
      try { 
        spider4.test((String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }
}
