/*
 * This file was automatically generated by EvoSuite
 * Mon Jul 16 15:46:27 GMT 2018
 */

package org.apache.commons.imaging.formats.tiff;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.PrintWriter;
import java.net.URI;
import java.net.URISyntaxException;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;
import java.nio.CharBuffer;
import java.nio.charset.Charset;
import java.time.Clock;
import org.apache.commons.imaging.formats.tiff.TiffElement;
import org.apache.commons.imaging.formats.tiff.TiffField;
import org.apache.commons.imaging.formats.tiff.fieldtypes.FieldType;
import org.apache.commons.imaging.formats.tiff.fieldtypes.FieldTypeAscii;
import org.apache.commons.imaging.formats.tiff.fieldtypes.FieldTypeByte;
import org.apache.commons.imaging.formats.tiff.fieldtypes.FieldTypeDouble;
import org.apache.commons.imaging.formats.tiff.fieldtypes.FieldTypeFloat;
import org.apache.commons.imaging.formats.tiff.fieldtypes.FieldTypeLong;
import org.apache.commons.imaging.formats.tiff.fieldtypes.FieldTypeRational;
import org.apache.commons.imaging.formats.tiff.fieldtypes.FieldTypeShort;
import org.apache.commons.imaging.formats.tiff.taginfos.TagInfo;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.mock.java.time.chrono.MockHijrahDate;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TiffField_ESTest extends TiffField_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      FieldTypeLong fieldTypeLong0 = FieldType.SLONG;
      byte[] byteArray0 = new byte[7];
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      TiffField tiffField0 = new TiffField((byte)0, (byte)0, fieldTypeLong0, (byte)0, 40L, byteArray0, byteOrder0, (byte)0);
      tiffField0.getIntArrayValue();
      assertEquals(40, tiffField0.getOffset());
      assertEquals(0, tiffField0.getSortHint());
      assertEquals(0, tiffField0.getTag());
      assertEquals(0, tiffField0.getDirectoryType());
      assertEquals(0, tiffField0.getBytesLength());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      FieldTypeAscii fieldTypeAscii0 = FieldType.ASCII;
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)9;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)10;
      byteArray0[3] = (byte) (-42);
      byteArray0[4] = (byte)44;
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      ByteOrder.nativeOrder();
      TiffField tiffField0 = new TiffField((-854), (-854), fieldTypeAscii0, 846L, 846L, byteArray0, byteOrder0, (-854));
      tiffField0.getCount();
      ByteOrder.nativeOrder();
      try { 
        tiffField0.getIntArrayValue();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unknown value: [Ljava.lang.String;@34c819a5 for: -1 (0xffffffff: Unknown Tag): 
         //
         verifyException("org.apache.commons.imaging.formats.tiff.TiffField", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      FieldTypeFloat fieldTypeFloat0 = FieldType.FLOAT;
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      byte[] byteArray0 = new byte[0];
      FieldTypeAscii fieldTypeAscii0 = FieldType.ASCII;
      TiffField tiffField0 = new TiffField(42112, 1901, fieldTypeAscii0, 848L, (-62L), byteArray0, byteOrder0, (byte)80);
      String string0 = tiffField0.getStringValue();
      assertEquals(848, tiffField0.getBytesLength());
      assertEquals(1901, tiffField0.getDirectoryType());
      assertEquals(80, tiffField0.getSortHint());
      assertEquals((-62), tiffField0.getOffset());
      assertEquals(42112, tiffField0.getTag());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      FieldTypeLong fieldTypeLong0 = FieldType.IFD;
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-93);
      byteArray0[2] = (byte) (-110);
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      TiffField tiffField0 = new TiffField(65535, 65535, fieldTypeLong0, 65535, 434L, byteArray0, byteOrder0, (byte) (-93));
      try { 
        tiffField0.getStringValue();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Expected String value(-1 (0xffffffff: Unknown Tag): ): [I@142da78d
         //
         verifyException("org.apache.commons.imaging.formats.tiff.TiffField", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      FieldTypeShort fieldTypeShort0 = FieldType.SSHORT;
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte)14;
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      TiffField tiffField0 = new TiffField(1156, (-642), fieldTypeShort0, 30, 1156, byteArray0, byteOrder0, 0);
      double[] doubleArray0 = tiffField0.getDoubleArrayValue();
      assertEquals(60, tiffField0.getBytesLength());
      assertEquals(1156, tiffField0.getOffset());
      assertEquals(30L, tiffField0.getCount());
      assertArrayEquals(new double[] {14.0}, doubleArray0, 0.01);
      assertEquals(1156, tiffField0.getTag());
      assertEquals((-642), tiffField0.getDirectoryType());
      assertEquals(0, tiffField0.getSortHint());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      FieldTypeShort fieldTypeShort0 = new FieldTypeShort(30, "");
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)14;
      byteArray0[2] = (byte)0;
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      TiffField tiffField0 = new TiffField(1156, (-642), fieldTypeShort0, 30, 1156, byteArray0, byteOrder0, 0);
      double[] doubleArray0 = tiffField0.getDoubleArrayValue();
      assertEquals(60, tiffField0.getBytesLength());
      assertArrayEquals(new double[] {270.0}, doubleArray0, 0.01);
      assertEquals(1156, tiffField0.getOffset());
      assertEquals(1156, tiffField0.getTag());
      assertEquals(0, tiffField0.getSortHint());
      assertEquals((-642), tiffField0.getDirectoryType());
      assertEquals(30L, tiffField0.getCount());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      FieldTypeFloat fieldTypeFloat0 = FieldType.FLOAT;
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      byte[] byteArray0 = new byte[1];
      TiffField tiffField0 = new TiffField((byte)8, (byte)8, fieldTypeFloat0, (byte)8, (byte)8, byteArray0, byteOrder0, (byte)8);
      tiffField0.getDoubleArrayValue();
      assertEquals(32, tiffField0.getBytesLength());
      assertEquals(8, tiffField0.getDirectoryType());
      assertEquals(8L, tiffField0.getCount());
      assertEquals(8, tiffField0.getTag());
      assertEquals(8, tiffField0.getSortHint());
      assertEquals(8, tiffField0.getOffset());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      FieldTypeFloat fieldTypeFloat0 = FieldType.FLOAT;
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      byte[] byteArray0 = new byte[5];
      TiffField tiffField0 = new TiffField((byte)31, (byte)31, fieldTypeFloat0, (byte)31, (byte)31, byteArray0, byteOrder0, (byte)31);
      // Undeclared exception!
      try { 
        tiffField0.dump((PrintWriter) null, "y");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.formats.tiff.TiffField", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      ByteOrder.nativeOrder();
      ByteOrder.nativeOrder();
      ByteOrder.nativeOrder();
      ByteOrder.nativeOrder();
      ByteOrder.nativeOrder();
      TiffField tiffField0 = new TiffField((-2366), 65535, (FieldType) null, 27L, (-2315L), byteArray0, byteOrder0, (-2366));
      tiffField0.getDescriptionWithoutValue();
      ByteOrder.nativeOrder();
      // Undeclared exception!
      try { 
        tiffField0.getIntValue();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.formats.tiff.taginfos.TagInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      FieldTypeLong fieldTypeLong0 = FieldType.SLONG;
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-115);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-6);
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte) (-122);
      TiffField tiffField0 = new TiffField(2569, 1571, fieldTypeLong0, 0L, 639L, byteArray0, (ByteOrder) null, (-328));
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(":M RhdsAK=");
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) byteArray0;
      objectArray0[2] = (Object) ":M RhdsAK=";
      objectArray0[3] = (Object) mockPrintWriter0;
      PrintWriter printWriter0 = mockPrintWriter0.format("", objectArray0);
      mockPrintWriter0.println('0');
      tiffField0.dump(printWriter0, (String) null);
      try { 
        tiffField0.getStringValue();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Expected String value(-1 (0xffffffff: Unknown Tag): ): [I@45917ebd
         //
         verifyException("org.apache.commons.imaging.formats.tiff.TiffField", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      FieldTypeRational fieldTypeRational0 = FieldType.SRATIONAL;
      byte[] byteArray0 = new byte[0];
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      TiffField tiffField0 = new TiffField(336, 336, fieldTypeRational0, (-1L), 1L, byteArray0, byteOrder0, 336);
      ByteOrder.nativeOrder();
      tiffField0.getTagName();
      // Undeclared exception!
      try { 
        tiffField0.getByteArrayValue();
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.common.BinaryFunctions", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      FieldTypeLong fieldTypeLong0 = FieldType.IFD;
      byte[] byteArray0 = new byte[2];
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      TiffField tiffField0 = new TiffField((byte)0, (byte)0, fieldTypeLong0.DOUBLE, (byte)0, (-5641L), byteArray0, byteOrder0, (byte)0);
      String string0 = tiffField0.getTagName();
      assertEquals((-5641), tiffField0.getOffset());
      assertEquals(0, tiffField0.getSortHint());
      assertEquals("Unknown Tag (0x0)", string0);
      assertEquals(0, tiffField0.getDirectoryType());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      FieldTypeDouble fieldTypeDouble0 = new FieldTypeDouble((-3197), "|`)BBhx");
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      TiffField tiffField0 = new TiffField(1202, 1202, fieldTypeDouble0, (-3197), 1202, (byte[]) null, byteOrder0, 1087);
      tiffField0.getFieldTypeName();
      assertEquals(1087, tiffField0.getSortHint());
      assertEquals(1202, tiffField0.getDirectoryType());
      assertEquals(1202, tiffField0.getTag());
      assertEquals(1202, tiffField0.getOffset());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      FieldTypeByte fieldTypeByte0 = FieldType.SBYTE;
      byte[] byteArray0 = new byte[4];
      TiffField tiffField0 = new TiffField((-1071), 65101, fieldTypeByte0, 34856, (-1149L), byteArray0, (ByteOrder) null, (-1046));
      fieldTypeByte0.getValue(tiffField0);
      assertEquals(65101, tiffField0.getDirectoryType());
      assertEquals((-1149), tiffField0.getOffset());
      assertEquals((-1071), tiffField0.getTag());
      
      byteArray0[0] = (byte)8;
      byteArray0[1] = (byte) (-26);
      byteArray0[2] = (byte)82;
      byteArray0[3] = (byte)50;
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      TiffField tiffField1 = new TiffField(34856, 34856, fieldTypeByte0, 4L, 4L, byteArray0, byteOrder0, (byte)82);
      ByteOrder.nativeOrder();
      String string0 = tiffField1.toString();
      assertEquals("34856 (0x8828: Opto - Electric Conv Factor): 8, -26, 82, 50 (4 SByte)", string0);
      
      int int0 = tiffField1.getBytesLength();
      assertEquals(82, tiffField1.getSortHint());
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      FieldTypeFloat fieldTypeFloat0 = FieldType.FLOAT;
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      FieldTypeByte fieldTypeByte0 = FieldType.UNDEFINED;
      byte[] byteArray0 = new byte[1];
      TiffField tiffField0 = new TiffField((byte)76, (byte)76, fieldTypeByte0, (byte)76, (byte)76, byteArray0, byteOrder0, (byte)0);
      String string0 = tiffField0.getValueDescription();
      assertEquals(0, tiffField0.getSortHint());
      assertEquals(76, tiffField0.getOffset());
      assertEquals(76, tiffField0.getDirectoryType());
      assertEquals(76, tiffField0.getTag());
      assertEquals(76, tiffField0.getBytesLength());
      assertNotNull(string0);
      assertEquals(76L, tiffField0.getCount());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      byte[] byteArray0 = new byte[5];
      FieldTypeRational fieldTypeRational0 = new FieldTypeRational(253, "ExifVersion");
      TiffField tiffField0 = new TiffField(0, 1433, fieldTypeRational0, 253, 253, byteArray0, byteOrder0, 0);
      tiffField0.getDoubleArrayValue();
      assertEquals(253, tiffField0.getOffset());
      assertEquals(2024, tiffField0.getBytesLength());
      assertEquals(1433, tiffField0.getDirectoryType());
      assertEquals(253L, tiffField0.getCount());
      assertEquals(0, tiffField0.getSortHint());
      assertEquals(0, tiffField0.getTag());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      FieldTypeRational fieldTypeRational0 = FieldType.SRATIONAL;
      byte[] byteArray0 = new byte[2];
      FieldType.getFieldType(1);
      byteArray0[0] = (byte)106;
      byteArray0[1] = (byte) (-1);
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      ByteOrder.nativeOrder();
      ByteOrder.nativeOrder();
      ByteOrder.nativeOrder();
      ByteOrder.nativeOrder();
      ByteOrder.nativeOrder();
      ByteOrder.nativeOrder();
      ByteOrder.nativeOrder();
      TiffField tiffField0 = new TiffField(686, 686, fieldTypeRational0, 0L, 686, byteArray0, byteOrder0, (-35));
      tiffField0.getValue();
      tiffField0.getTagInfo();
      tiffField0.getByteOrder();
      tiffField0.getTagName();
      tiffField0.getDoubleArrayValue();
      tiffField0.getCount();
      tiffField0.isLocalValue();
      String string0 = "f2l4>H";
      try { 
        MockURI.URI((String) null, "Unknown Tag", "f2l4>H", "The FileFilter must not be null");
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Illegal character in authority at index 2: //Unknown Tagf2l4%3EH#The%20FileFilter%20must%20not%20be%20null
         //
         verifyException("java.net.URI$Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      FieldTypeFloat fieldTypeFloat0 = FieldType.FLOAT;
      Charset charset0 = Charset.defaultCharset();
      ByteBuffer byteBuffer0 = charset0.encode("-X33vCnz]Q/Npn");
      CharBuffer charBuffer0 = charset0.decode(byteBuffer0);
      ByteOrder byteOrder0 = charBuffer0.order();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-6);
      byteArray0[1] = (byte)36;
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte) (-1);
      TiffField tiffField0 = new TiffField((byte) (-1), (byte)36, fieldTypeFloat0, 3120L, 3120L, byteArray0, byteOrder0, (byte)36);
      String string0 = tiffField0.getValueDescription();
      assertEquals(3120, tiffField0.getOffset());
      assertEquals((-1), tiffField0.getTag());
      assertEquals(36, tiffField0.getSortHint());
      assertNotNull(string0);
      assertEquals(12480, tiffField0.getBytesLength());
      assertEquals(3120L, tiffField0.getCount());
      assertEquals(36, tiffField0.getDirectoryType());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      FieldTypeFloat fieldTypeFloat0 = FieldType.FLOAT;
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      byte[] byteArray0 = new byte[6];
      TiffField tiffField0 = new TiffField((-3083), (byte)21, fieldTypeFloat0, (byte)21, (-3083), byteArray0, byteOrder0, (byte)21);
      String string0 = tiffField0.getValueDescription();
      assertEquals(21, tiffField0.getDirectoryType());
      assertEquals(21, tiffField0.getSortHint());
      assertEquals((-3083), tiffField0.getOffset());
      assertNotNull(string0);
      assertEquals((-3083), tiffField0.getTag());
      assertEquals(84, tiffField0.getBytesLength());
      assertEquals(21L, tiffField0.getCount());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      FieldTypeShort fieldTypeShort0 = FieldType.SHORT;
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte) (-117);
      TiffField tiffField0 = new TiffField((byte) (-117), 194, fieldTypeShort0, 0L, 0L, byteArray0, byteOrder0, 0);
      int int0 = tiffField0.getIntValueOrArraySum();
      assertEquals(0, tiffField0.getSortHint());
      assertEquals(194, tiffField0.getDirectoryType());
      assertEquals(0, int0);
      assertEquals((-117), tiffField0.getTag());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      FieldTypeShort fieldTypeShort0 = FieldType.SHORT;
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)103;
      byteArray0[1] = (byte) (-117);
      byteArray0[2] = (byte)102;
      TiffField tiffField0 = new TiffField(2, 194, fieldTypeShort0, 0L, (-1433L), byteArray0, byteOrder0, 0);
      int int0 = tiffField0.getIntValueOrArraySum();
      assertEquals(194, tiffField0.getDirectoryType());
      assertEquals(2, tiffField0.getTag());
      assertEquals(0, tiffField0.getSortHint());
      assertEquals((-1433), tiffField0.getOffset());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)25;
      FieldTypeDouble fieldTypeDouble0 = new FieldTypeDouble((byte)25, " ");
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      TiffField tiffField0 = new TiffField(3520, 292, fieldTypeDouble0, 588L, (byte)25, byteArray0, byteOrder0, (-1789));
      tiffField0.getDoubleArrayValue();
      assertEquals(588L, tiffField0.getCount());
      assertEquals(292, tiffField0.getDirectoryType());
      assertEquals(25, tiffField0.getOffset());
      assertEquals(4704, tiffField0.getBytesLength());
      assertEquals((-1789), tiffField0.getSortHint());
      assertEquals(3520, tiffField0.getTag());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      FieldTypeByte fieldTypeByte0 = FieldType.SBYTE;
      byte[] byteArray0 = new byte[4];
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      TiffField tiffField0 = new TiffField((byte) (-84), (byte)50, fieldTypeByte0, 0L, (byte)1, byteArray0, byteOrder0, 0);
      try { 
        tiffField0.getDoubleArrayValue();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unknown value: [B@4eee35ed for: -1 (0xffffffff: Unknown Tag): 
         //
         verifyException("org.apache.commons.imaging.formats.tiff.TiffField", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      FieldTypeLong fieldTypeLong0 = FieldType.IFD;
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-93);
      byteArray0[2] = (byte) (-93);
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      TiffField tiffField0 = new TiffField(65522, 65522, fieldTypeLong0, 65522, 65522, byteArray0, byteOrder0, (byte) (-93));
      byteOrder0.toString();
      tiffField0.getByteOrder();
      int int0 = Double.BYTES;
      tiffField0.getValueDescription();
      tiffField0.getDirectoryType();
      tiffField0.getBytesLength();
      tiffField0.getSortHint();
      // Undeclared exception!
      try { 
        tiffField0.getDoubleValue();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // [I cannot be cast to java.lang.Number
         //
         verifyException("org.apache.commons.imaging.formats.tiff.TiffField", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      FieldTypeRational fieldTypeRational0 = new FieldTypeRational(0, "[long[]: ");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)5;
      byteArray0[1] = (byte)74;
      byteArray0[2] = (byte) (-112);
      byteArray0[3] = (byte)50;
      byteArray0[4] = (byte) (-84);
      byteArray0[5] = (byte)10;
      byteArray0[6] = (byte) (-1);
      byteArray0[7] = (byte)31;
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      TiffField tiffField0 = new TiffField(0, (-2044), fieldTypeRational0, 0L, 4338L, byteArray0, byteOrder0, (byte)50);
      TiffElement tiffElement0 = tiffField0.getOversizeValueElement();
      assertNull(tiffElement0);
      
      int[] intArray0 = tiffField0.getIntArrayValue();
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(4338, tiffField0.getOffset());
      assertEquals(50, tiffField0.getSortHint());
      assertEquals(0, tiffField0.getTag());
      assertEquals((-2044), tiffField0.getDirectoryType());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      FieldTypeLong fieldTypeLong0 = FieldType.IFD;
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[2] = (byte) (-110);
      ByteOrder.nativeOrder();
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      FieldTypeLong fieldTypeLong1 = FieldType.IFD;
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte)10;
      byteArray1[1] = (byte)10;
      ByteOrder.nativeOrder();
      TiffField tiffField0 = new TiffField((byte) (-110), 50735, fieldTypeLong1, 50735, (byte) (-1), byteArray1, byteOrder0, (-3125));
      tiffField0.getOversizeValueElement();
      // Undeclared exception!
      try { 
        tiffField0.getIntValue();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // [I cannot be cast to java.lang.Number
         //
         verifyException("org.apache.commons.imaging.formats.tiff.TiffField", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      FieldTypeLong fieldTypeLong0 = FieldType.LONG;
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-6);
      byteArray0[2] = (byte) (-1);
      Charset charset0 = Charset.defaultCharset();
      ByteBuffer byteBuffer0 = charset0.encode("");
      CharBuffer charBuffer0 = charset0.decode(byteBuffer0);
      ByteOrder byteOrder0 = charBuffer0.order();
      TiffField tiffField0 = new TiffField(50735, (-3080), fieldTypeLong0, 3120L, 0L, byteArray0, byteOrder0, 50735);
      String string0 = tiffField0.getValueDescription();
      assertNotNull(string0);
      
      tiffField0.getDoubleArrayValue();
      assertEquals(12480, tiffField0.getBytesLength());
      assertEquals(50735, tiffField0.getSortHint());
      assertEquals(50735, tiffField0.getTag());
      assertEquals(3120L, tiffField0.getCount());
      assertEquals((-3080), tiffField0.getDirectoryType());
      assertEquals(0, tiffField0.getOffset());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "R}w[_cptlMvt");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      FieldTypeShort fieldTypeShort0 = FieldType.SHORT;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)42;
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      ByteOrder.nativeOrder();
      ByteOrder.nativeOrder();
      TiffField tiffField0 = new TiffField(65535, 3690, fieldTypeShort0, 3690, (-4528L), byteArray0, byteOrder0, (byte)42);
      tiffField0.getByteArrayValue();
      tiffField0.getByteArrayValue();
      ByteOrder.nativeOrder();
      tiffField0.getByteOrder();
      tiffField0.dump();
      tiffField0.getTagInfo();
      assertEquals(42, tiffField0.getSortHint());
      assertEquals(3690, tiffField0.getDirectoryType());
      assertEquals(7380, tiffField0.getBytesLength());
      assertEquals(65535, tiffField0.getTag());
      assertEquals((-4528), tiffField0.getOffset());
      assertEquals(3690L, tiffField0.getCount());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      FieldTypeLong fieldTypeLong0 = FieldType.SLONG;
      byte[] byteArray0 = new byte[3];
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      FieldTypeShort fieldTypeShort0 = FieldType.SHORT;
      TiffField tiffField0 = new TiffField(37378, 37378, fieldTypeShort0, 37378, 37378, byteArray0, byteOrder0, 37378);
      String string0 = tiffField0.getValueDescription();
      assertNotNull(string0);
      
      TiffElement tiffElement0 = tiffField0.getOversizeValueElement();
      assertEquals(74756, tiffField0.getBytesLength());
      assertEquals(37378, tiffField0.getDirectoryType());
      assertEquals(37378, tiffField0.getSortHint());
      assertEquals(37378, tiffField0.getTag());
      assertEquals(37378L, tiffElement0.offset);
      assertEquals(37378L, tiffField0.getCount());
      assertNotNull(tiffElement0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      FieldTypeLong fieldTypeLong0 = FieldType.IFD;
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-93);
      byteArray0[2] = (byte) (-110);
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      TiffField tiffField0 = new TiffField(65535, 65535, fieldTypeLong0, 65535, 434L, byteArray0, byteOrder0, (byte) (-93));
      tiffField0.toString();
      ByteOrder byteOrder1 = ByteOrder.BIG_ENDIAN;
      tiffField0.getIntValueOrArraySum();
      tiffField0.getValueDescription();
      tiffField0.getDirectoryType();
      TiffField tiffField1 = new TiffField(0, (-748), fieldTypeLong0, (-4528L), (-602L), byteArray0, byteOrder1, 65535);
      // Undeclared exception!
      try { 
        tiffField1.getIntArrayValue();
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.common.BinaryFunctions", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      FieldTypeFloat fieldTypeFloat0 = FieldType.FLOAT;
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)36;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)50;
      byteArray0[6] = (byte)36;
      byteArray0[7] = (byte)50;
      byteArray0[8] = (byte)0;
      TiffField tiffField0 = new TiffField(1030, 2277, fieldTypeFloat0, 255L, (-1L), byteArray0, byteOrder0, (byte)0);
      try { 
        tiffField0.getIntValueOrArraySum();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unknown value: [F@2e30279 for: -1 (0xffffffff: Unknown Tag): 
         //
         verifyException("org.apache.commons.imaging.formats.tiff.TiffField", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      FieldTypeByte fieldTypeByte0 = FieldType.SBYTE;
      byte[] byteArray0 = new byte[0];
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      TiffField tiffField0 = new TiffField((-779), 1518, fieldTypeByte0, (-779), 1518, byteArray0, byteOrder0, (-2147009902));
      TiffField.OversizeValueElement tiffField_OversizeValueElement0 = tiffField0.new OversizeValueElement(4, 1518);
      String string0 = tiffField_OversizeValueElement0.getElementDescription(false);
      assertEquals("OversizeValueElement, tag: Unknown Tag, fieldType: SByte", string0);
      assertEquals((-779), tiffField0.getTag());
      assertEquals((-2147009902), tiffField0.getSortHint());
      assertEquals(1518, tiffField0.getDirectoryType());
      assertEquals(1518, tiffField0.getOffset());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      FieldTypeFloat fieldTypeFloat0 = FieldType.FLOAT;
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      byte[] byteArray0 = new byte[1];
      TiffField tiffField0 = new TiffField(8, 8, fieldTypeFloat0, 8, 8, byteArray0, byteOrder0, 8);
      TiffField.OversizeValueElement tiffField_OversizeValueElement0 = tiffField0.new OversizeValueElement(8, 8);
      String string0 = tiffField_OversizeValueElement0.getElementDescription(true);
      assertEquals(8, tiffField0.getOffset());
      assertEquals(8, tiffField0.getTag());
      assertEquals(8, tiffField0.getSortHint());
      assertEquals(8, tiffField0.getDirectoryType());
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      FieldTypeLong fieldTypeLong0 = FieldType.IFD;
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte) (-93);
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      TiffField tiffField0 = new TiffField(526, 50, fieldTypeLong0, 648L, 2060L, byteArray0, byteOrder0, 479);
      assertEquals(526, tiffField0.getTag());
      assertEquals(2592, tiffField0.getBytesLength());
      assertEquals(50, tiffField0.getDirectoryType());
      assertEquals(2060, tiffField0.getOffset());
      
      FieldTypeAscii fieldTypeAscii0 = new FieldTypeAscii((byte) (-93), "`HAgc1U8L@rHlUh");
      TiffField tiffField1 = new TiffField(50, 50, fieldTypeAscii0, 648L, 648L, byteArray0, byteOrder0, (byte) (-93));
      String string0 = tiffField1.getValueDescription();
      assertNotNull(string0);
      
      tiffField1.dump();
      tiffField1.getByteOrder();
      int int0 = tiffField1.getDirectoryType();
      assertEquals(648L, tiffField1.getCount());
      assertEquals((-93), tiffField1.getSortHint());
      assertEquals(50, int0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      FieldTypeLong fieldTypeLong0 = FieldType.IFD;
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-93);
      byteArray0[1] = (byte) (-93);
      byteArray0[2] = (byte)41;
      byteArray0[3] = (byte) (-93);
      byteArray0[4] = (byte) (-93);
      byteArray0[5] = (byte) (-93);
      TiffField tiffField0 = new TiffField(2, 0, fieldTypeLong0, 0, 0, byteArray0, byteOrder0, 50);
      fieldTypeLong0.getValue(tiffField0);
      byteArray0[6] = (byte) (-93);
      byteArray0[7] = (byte) (-93);
      byteArray0[8] = (byte) (-93);
      TiffField tiffField1 = new TiffField(50, 2, fieldTypeLong0, 50, 50, byteArray0, byteOrder0, 6);
      assertEquals(2, tiffField1.getDirectoryType());
      assertEquals(6, tiffField1.getSortHint());
      
      FieldTypeRational fieldTypeRational0 = FieldType.SRATIONAL;
      TiffField tiffField2 = new TiffField((byte) (-93), 50, fieldTypeRational0, (byte)41, (-2990L), byteArray0, byteOrder0, 50);
      int int0 = tiffField2.getIntValueOrArraySum();
      assertEquals(41L, tiffField2.getCount());
      assertEquals((-2990), tiffField2.getOffset());
      assertEquals((-93), tiffField2.getTag());
      assertEquals(1, int0);
      assertEquals(328, tiffField2.getBytesLength());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      FieldTypeLong fieldTypeLong0 = FieldType.LONG;
      byte[] byteArray0 = new byte[4];
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      TiffField tiffField0 = new TiffField(4, 4, fieldTypeLong0, 4, 4, byteArray0, byteOrder0, 4);
      String string0 = tiffField0.getValueDescription();
      assertEquals(4, tiffField0.getSortHint());
      assertEquals(4, tiffField0.getDirectoryType());
      assertEquals(4, tiffField0.getTag());
      assertNotNull(string0);
      assertEquals(16, tiffField0.getBytesLength());
      assertEquals(4, tiffField0.getOffset());
      assertEquals(4L, tiffField0.getCount());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      FieldTypeLong fieldTypeLong0 = FieldType.IFD;
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte) (-93);
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      TiffField tiffField0 = new TiffField((-637), 597, fieldTypeLong0, 597, (-2531L), byteArray0, byteOrder0, 33448);
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte)1;
      byteArray1[1] = (byte) (-93);
      byteArray1[2] = (byte) (-93);
      byteArray1[3] = (byte) (-93);
      byteArray1[4] = (byte) (-93);
      byteArray1[5] = (byte) (-93);
      byteArray1[6] = (byte) (-93);
      TiffField tiffField1 = new TiffField(3, (-371), fieldTypeLong0, 526, 1857L, byteArray1, byteOrder0, (byte)1);
      String string0 = tiffField1.getValueDescription();
      assertEquals(1857, tiffField1.getOffset());
      assertEquals(526L, tiffField1.getCount());
      assertNotNull(string0);
      assertEquals((-371), tiffField1.getDirectoryType());
      assertEquals(1, tiffField1.getSortHint());
      assertEquals(3, tiffField1.getTag());
      assertEquals(2104, tiffField1.getBytesLength());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      FieldTypeDouble fieldTypeDouble0 = new FieldTypeDouble(7, "]V");
      FieldTypeAscii fieldTypeAscii0 = new FieldTypeAscii(4520, "]V");
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      FieldTypeShort fieldTypeShort0 = FieldType.SHORT;
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)3;
      byteArray0[1] = (byte) (-94);
      byteArray0[2] = (byte)71;
      byteArray0[3] = (byte)112;
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte)35;
      byteArray0[6] = (byte) (-14);
      byteArray0[7] = (byte) (-17);
      byteArray0[8] = (byte)122;
      TiffField tiffField0 = new TiffField(65535, 271, fieldTypeShort0, 271, 65535, byteArray0, byteOrder0, 5939);
      int[] intArray0 = tiffField0.getIntArrayValue();
      assertEquals(271L, tiffField0.getCount());
      assertEquals(65535, tiffField0.getOffset());
      assertArrayEquals(new int[] {41475, 28743, 9215, 61426}, intArray0);
      assertEquals(5939, tiffField0.getSortHint());
      assertEquals(65535, tiffField0.getTag());
      assertEquals(542, tiffField0.getBytesLength());
      assertEquals(271, tiffField0.getDirectoryType());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      FieldTypeLong fieldTypeLong0 = FieldType.LONG;
      byte[] byteArray0 = new byte[2];
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      TiffField tiffField0 = new TiffField((byte)0, (byte)0, fieldTypeLong0.DOUBLE, (byte)0, (-5641L), byteArray0, byteOrder0, (byte)0);
      assertEquals((-5641), tiffField0.getOffset());
      
      FieldTypeAscii fieldTypeAscii0 = new FieldTypeAscii((-3259), "O@m*J)V");
      TiffField tiffField1 = new TiffField((byte)0, 2145758761, fieldTypeAscii0, (byte)0, 0L, byteArray0, byteOrder0, 846);
      String string0 = tiffField1.getStringValue();
      assertEquals(846, tiffField1.getSortHint());
      assertNotNull(string0);
      assertEquals(2145758761, tiffField1.getDirectoryType());
      assertEquals(0, tiffField1.getBytesLength());
      assertEquals(0, tiffField1.getTag());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      FieldTypeFloat fieldTypeFloat0 = FieldType.FLOAT;
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      FieldTypeDouble fieldTypeDouble0 = new FieldTypeDouble(32771, "");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte) (-34);
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte)0;
      TiffField tiffField0 = new TiffField((byte)0, 32771, fieldTypeDouble0, (-8588887672L), (-8588887672L), byteArray0, byteOrder0, (byte)0);
      String string0 = tiffField0.getValueDescription();
      assertEquals(0, tiffField0.getSortHint());
      assertEquals(0, tiffField0.getTag());
      assertNotNull(string0);
      assertEquals(1046920, tiffField0.getOffset());
      assertEquals(32771, tiffField0.getDirectoryType());
      assertEquals((-8588887672L), tiffField0.getCount());
      assertEquals(8375360, tiffField0.getBytesLength());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      FieldTypeFloat fieldTypeFloat0 = FieldType.FLOAT;
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      byte[] byteArray0 = new byte[9];
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte) (-34);
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte)0;
      TiffField tiffField0 = new TiffField((byte)0, (byte)0, fieldTypeFloat0.DOUBLE, (-8588887672L), (-8588887672L), byteArray0, byteOrder0, (byte)0);
      String string0 = tiffField0.getValueDescription();
      assertEquals(8375360, tiffField0.getBytesLength());
      assertEquals(0, tiffField0.getTag());
      assertNotNull(string0);
      assertEquals(1046920, tiffField0.getOffset());
      assertEquals(0, tiffField0.getDirectoryType());
      assertEquals(0, tiffField0.getSortHint());
      assertEquals((-8588887672L), tiffField0.getCount());
  }
}
