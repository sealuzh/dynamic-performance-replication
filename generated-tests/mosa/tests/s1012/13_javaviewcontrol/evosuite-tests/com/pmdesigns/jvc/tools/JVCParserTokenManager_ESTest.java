/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 03:33:08 GMT 2018
 */

package com.pmdesigns.jvc.tools;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.pmdesigns.jvc.tools.JVCParserTokenManager;
import com.pmdesigns.jvc.tools.SimpleCharStream;
import com.pmdesigns.jvc.tools.Token;
import java.io.ByteArrayInputStream;
import java.io.CharArrayReader;
import java.io.PipedInputStream;
import java.io.PipedReader;
import java.io.PrintStream;
import java.io.Reader;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JVCParserTokenManager_ESTest extends JVCParserTokenManager_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JVCParserTokenManager jVCParserTokenManager0 = null;
      try {
        jVCParserTokenManager0 = new JVCParserTokenManager((SimpleCharStream) null, (byte)112);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 112. State unchanged.
         //
         verifyException("com.pmdesigns.jvc.tools.JVCParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JVCParserTokenManager jVCParserTokenManager0 = null;
      try {
        jVCParserTokenManager0 = new JVCParserTokenManager((SimpleCharStream) null, (-1993));
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : -1993. State unchanged.
         //
         verifyException("com.pmdesigns.jvc.tools.JVCParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager((SimpleCharStream) null);
      // Undeclared exception!
      try { 
        jVCParserTokenManager0.ReInit((SimpleCharStream) null, 12);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 12. State unchanged.
         //
         verifyException("com.pmdesigns.jvc.tools.JVCParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager((SimpleCharStream) null);
      jVCParserTokenManager0.setDebugStream(jVCParserTokenManager0.debugStream);
      jVCParserTokenManager0.ReInit((SimpleCharStream) null);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(pipedInputStream0, 22, 22);
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0);
      jVCParserTokenManager0.getNextToken();
      jVCParserTokenManager0.ReInit(simpleCharStream0, 0);
      assertEquals(0, simpleCharStream0.getLine());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-89);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(byteArrayInputStream0, (byte) (-89), (byte) (-89), (byte)112);
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0);
      Token token0 = jVCParserTokenManager0.getNextToken();
      assertEquals(0, simpleCharStream0.bufpos);
      assertEquals((-89), token0.endColumn);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(pipedReader0);
      simpleCharStream0.inBuf = 603;
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0);
      jVCParserTokenManager0.input_stream = simpleCharStream0;
      Token token0 = jVCParserTokenManager0.getNextToken();
      assertEquals(16, token0.kind);
      
      jVCParserTokenManager0.ReInit(simpleCharStream0, 0);
      Token token1 = jVCParserTokenManager0.getNextToken();
      assertEquals("\u0000", token1.toString());
      assertEquals(0, token1.endColumn);
      assertEquals(0, token1.endLine);
      assertEquals(16, token1.kind);
      assertEquals(0, token1.beginLine);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[2] = (byte)64;
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte)64;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray1);
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(byteArrayInputStream0, (byte)0, (byte)0, (byte)64);
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0);
      jVCParserTokenManager0.getNextToken();
      Token token0 = jVCParserTokenManager0.jjFillToken();
      assertEquals(0, simpleCharStream0.bufpos);
      assertEquals("@", token0.toString());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader(1764);
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(pipedReader0);
      simpleCharStream0.inBuf = 1764;
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0);
      jVCParserTokenManager0.defaultLexState = (-1);
      jVCParserTokenManager0.ReInit(simpleCharStream0, 2);
      Token token0 = jVCParserTokenManager0.getNextToken();
      assertEquals(0, token0.endLine);
      assertEquals(16, token0.kind);
      assertEquals(0, token0.beginLine);
      assertEquals(0, token0.beginColumn);
      assertEquals(0, token0.endColumn);
      assertEquals("\u0000", token0.toString());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[1] = (byte)15;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(byteArrayInputStream0, (byte)15, (byte)15);
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0);
      jVCParserTokenManager0.ReInit(simpleCharStream0, 4);
      Token token0 = jVCParserTokenManager0.getNextToken();
      assertEquals(0, simpleCharStream0.bufpos);
      assertEquals(15, token0.beginColumn);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-89);
      byteArray0[1] = (byte)15;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-89), (byte)15, (byte)0, (byte)0}, byteArray0);
      assertEquals(4, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(byteArrayInputStream0, (-1497), (byte)15);
      assertArrayEquals(new byte[] {(byte) (-89), (byte)15, (byte)0, (byte)0}, byteArray0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(4, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertNotNull(simpleCharStream0);
      
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0);
      assertArrayEquals(new byte[] {(byte) (-89), (byte)15, (byte)0, (byte)0}, byteArray0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(4, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertNotNull(jVCParserTokenManager0);
      
      jVCParserTokenManager0.ReInit(simpleCharStream0, 4);
      assertArrayEquals(new byte[] {(byte) (-89), (byte)15, (byte)0, (byte)0}, byteArray0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(4, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      
      jVCParserTokenManager0.ReInit(simpleCharStream0, 4);
      assertArrayEquals(new byte[] {(byte) (-89), (byte)15, (byte)0, (byte)0}, byteArray0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(4, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      
      Token token0 = jVCParserTokenManager0.getNextToken();
      assertArrayEquals(new byte[] {(byte) (-89), (byte)15, (byte)0, (byte)0}, byteArray0);
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(15, token0.beginColumn);
      assertEquals(15, token0.endColumn);
      assertEquals((-1497), token0.endLine);
      assertEquals((-1497), token0.beginLine);
      assertEquals(16, token0.kind);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(15, simpleCharStream0.getBeginColumn());
      assertEquals((-1497), simpleCharStream0.getLine());
      assertEquals((-1497), simpleCharStream0.getEndLine());
      assertEquals(15, simpleCharStream0.getColumn());
      assertEquals(15, simpleCharStream0.getEndColumn());
      assertEquals((-1497), simpleCharStream0.getBeginLine());
      assertEquals("\uFFFD", token0.toString());
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte)15;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)15, (byte)0, (byte)0}, byteArray0);
      assertEquals(4, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(byteArrayInputStream0, (byte)15, (byte)15, 2904);
      assertArrayEquals(new byte[] {(byte)0, (byte)15, (byte)0, (byte)0}, byteArray0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertEquals(4, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertNotNull(simpleCharStream0);
      
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0);
      assertArrayEquals(new byte[] {(byte)0, (byte)15, (byte)0, (byte)0}, byteArray0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertEquals(4, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertNotNull(jVCParserTokenManager0);
      
      JVCParserTokenManager jVCParserTokenManager1 = new JVCParserTokenManager(simpleCharStream0);
      assertArrayEquals(new byte[] {(byte)0, (byte)15, (byte)0, (byte)0}, byteArray0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertEquals(4, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertFalse(jVCParserTokenManager1.equals((Object)jVCParserTokenManager0));
      assertNotNull(jVCParserTokenManager1);
      
      JVCParserTokenManager jVCParserTokenManager2 = new JVCParserTokenManager(simpleCharStream0, 3);
      assertArrayEquals(new byte[] {(byte)0, (byte)15, (byte)0, (byte)0}, byteArray0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertEquals(4, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertFalse(jVCParserTokenManager2.equals((Object)jVCParserTokenManager1));
      assertFalse(jVCParserTokenManager2.equals((Object)jVCParserTokenManager0));
      assertNotNull(jVCParserTokenManager2);
      
      Token token0 = jVCParserTokenManager2.getNextToken();
      assertArrayEquals(new byte[] {(byte)0, (byte)15, (byte)0, (byte)0}, byteArray0);
      assertNotSame(jVCParserTokenManager2, jVCParserTokenManager1);
      assertNotSame(jVCParserTokenManager2, jVCParserTokenManager0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.bufpos);
      assertEquals(15, token0.endLine);
      assertEquals(16, token0.kind);
      assertEquals(15, token0.beginLine);
      assertEquals(15, token0.beginColumn);
      assertEquals(15, token0.endColumn);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(15, simpleCharStream0.getColumn());
      assertEquals(15, simpleCharStream0.getBeginLine());
      assertEquals(15, simpleCharStream0.getEndLine());
      assertEquals(15, simpleCharStream0.getEndColumn());
      assertEquals(15, simpleCharStream0.getLine());
      assertEquals(15, simpleCharStream0.getBeginColumn());
      assertEquals("\u0000", token0.toString());
      assertFalse(jVCParserTokenManager2.equals((Object)jVCParserTokenManager1));
      assertFalse(jVCParserTokenManager2.equals((Object)jVCParserTokenManager0));
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-89);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-89), (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(4, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(byteArrayInputStream0, (byte)12, (byte)12, (byte)12);
      assertArrayEquals(new byte[] {(byte) (-89), (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertEquals(4, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertNotNull(simpleCharStream0);
      
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0);
      assertArrayEquals(new byte[] {(byte) (-89), (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertEquals(4, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertNotNull(jVCParserTokenManager0);
      
      JVCParserTokenManager jVCParserTokenManager1 = new JVCParserTokenManager(simpleCharStream0, 3);
      assertArrayEquals(new byte[] {(byte) (-89), (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertEquals(4, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(jVCParserTokenManager1.equals((Object)jVCParserTokenManager0));
      assertNotNull(jVCParserTokenManager1);
      
      Token token0 = jVCParserTokenManager1.getNextToken();
      assertArrayEquals(new byte[] {(byte) (-89), (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotSame(jVCParserTokenManager1, jVCParserTokenManager0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.bufpos);
      assertEquals(12, token0.beginLine);
      assertEquals(12, token0.beginColumn);
      assertEquals(16, token0.kind);
      assertEquals(12, token0.endLine);
      assertEquals(12, token0.endColumn);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(12, simpleCharStream0.getEndLine());
      assertEquals(12, simpleCharStream0.getBeginLine());
      assertEquals(12, simpleCharStream0.getLine());
      assertEquals(12, simpleCharStream0.getBeginColumn());
      assertEquals(12, simpleCharStream0.getColumn());
      assertEquals(12, simpleCharStream0.getEndColumn());
      assertEquals("\uFFFD", token0.toString());
      assertFalse(jVCParserTokenManager1.equals((Object)jVCParserTokenManager0));
      assertNotNull(token0);
      
      jVCParserTokenManager0.SwitchTo((byte)0);
      assertArrayEquals(new byte[] {(byte) (-89), (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotSame(jVCParserTokenManager0, jVCParserTokenManager1);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.bufpos);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(12, simpleCharStream0.getEndLine());
      assertEquals(12, simpleCharStream0.getBeginLine());
      assertEquals(12, simpleCharStream0.getLine());
      assertEquals(12, simpleCharStream0.getBeginColumn());
      assertEquals(12, simpleCharStream0.getColumn());
      assertEquals(12, simpleCharStream0.getEndColumn());
      assertFalse(jVCParserTokenManager0.equals((Object)jVCParserTokenManager1));
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-89);
      byteArray0[1] = (byte) (-89);
      byteArray0[2] = (byte)64;
      byteArray0[3] = (byte)112;
      byte[] byteArray1 = new byte[9];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte)64;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray1);
      assertArrayEquals(new byte[] {(byte)64, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray1);
      assertEquals(9, byteArrayInputStream0.available());
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArrayInputStream0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(byteArrayInputStream0, (-60), (byte)112, (byte)64);
      assertArrayEquals(new byte[] {(byte)64, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray1);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertEquals(9, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(simpleCharStream0);
      
      String string0 = simpleCharStream0.GetImage();
      assertArrayEquals(new byte[] {(byte)64, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray1);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string0);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertEquals(9, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(string0);
      
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0);
      assertArrayEquals(new byte[] {(byte)64, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray1);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertEquals(9, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(jVCParserTokenManager0);
      
      jVCParserTokenManager0.ReInit(simpleCharStream0, 3);
      assertArrayEquals(new byte[] {(byte)64, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertEquals(9, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      Token token0 = jVCParserTokenManager0.getNextToken();
      assertArrayEquals(new byte[] {(byte)64, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.bufpos);
      assertEquals(112, token0.endColumn);
      assertEquals(16, token0.kind);
      assertEquals(112, token0.beginColumn);
      assertEquals((-60), token0.beginLine);
      assertEquals((-60), token0.endLine);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals((-60), simpleCharStream0.getBeginLine());
      assertEquals((-60), simpleCharStream0.getLine());
      assertEquals(112, simpleCharStream0.getColumn());
      assertEquals(112, simpleCharStream0.getBeginColumn());
      assertEquals(112, simpleCharStream0.getEndColumn());
      assertEquals((-60), simpleCharStream0.getEndLine());
      assertEquals("@", token0.toString());
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-89);
      byteArray0[1] = (byte) (-89);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-89), (byte) (-89), (byte)0, (byte)0}, byteArray0);
      assertEquals(4, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(byteArrayInputStream0, (byte) (-89), 770, 2904);
      assertArrayEquals(new byte[] {(byte) (-89), (byte) (-89), (byte)0, (byte)0}, byteArray0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(4, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertNotNull(simpleCharStream0);
      
      simpleCharStream0.column = 1041;
      assertEquals(4, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0);
      assertArrayEquals(new byte[] {(byte) (-89), (byte) (-89), (byte)0, (byte)0}, byteArray0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(4, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertNotNull(jVCParserTokenManager0);
      
      jVCParserTokenManager0.curLexState = 1041;
      assertEquals(4, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      
      Token token0 = jVCParserTokenManager0.getNextToken();
      assertArrayEquals(new byte[] {(byte) (-89), (byte) (-89), (byte)0, (byte)0}, byteArray0);
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1042, token0.endColumn);
      assertEquals((-89), token0.endLine);
      assertEquals(0, token0.kind);
      assertEquals(1042, token0.beginColumn);
      assertEquals((-89), token0.beginLine);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals((-89), simpleCharStream0.getLine());
      assertEquals((-89), simpleCharStream0.getBeginLine());
      assertEquals((-89), simpleCharStream0.getEndLine());
      assertEquals(1042, simpleCharStream0.getEndColumn());
      assertEquals(1042, simpleCharStream0.getBeginColumn());
      assertEquals(1042, simpleCharStream0.getColumn());
      assertEquals("", token0.toString());
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-89);
      byteArray0[1] = (byte)15;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-89), (byte)15, (byte)0, (byte)0}, byteArray0);
      assertEquals(4, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(byteArrayInputStream0, (byte)15, 770, 2904);
      assertArrayEquals(new byte[] {(byte) (-89), (byte)15, (byte)0, (byte)0}, byteArray0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(4, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertNotNull(simpleCharStream0);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      simpleCharStream0.column = 1041;
      assertEquals(4, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0);
      assertArrayEquals(new byte[] {(byte) (-89), (byte)15, (byte)0, (byte)0}, byteArray0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(4, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertNotNull(jVCParserTokenManager0);
      
      jVCParserTokenManager0.ReInit(simpleCharStream0, 0);
      assertArrayEquals(new byte[] {(byte) (-89), (byte)15, (byte)0, (byte)0}, byteArray0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(4, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      
      Token token0 = jVCParserTokenManager0.getNextToken();
      assertArrayEquals(new byte[] {(byte) (-89), (byte)15, (byte)0, (byte)0}, byteArray0);
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1042, token0.beginColumn);
      assertEquals(16, token0.kind);
      assertEquals(15, token0.beginLine);
      assertEquals(1042, token0.endColumn);
      assertEquals(15, token0.endLine);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(1042, simpleCharStream0.getEndColumn());
      assertEquals(15, simpleCharStream0.getLine());
      assertEquals(1042, simpleCharStream0.getColumn());
      assertEquals(15, simpleCharStream0.getBeginLine());
      assertEquals(15, simpleCharStream0.getEndLine());
      assertEquals(1042, simpleCharStream0.getBeginColumn());
      assertEquals("\uFFFD", token0.toString());
      assertNotNull(token0);
      
      Token token1 = jVCParserTokenManager0.getNextToken();
      assertArrayEquals(new byte[] {(byte) (-89), (byte)15, (byte)0, (byte)0}, byteArray0);
      assertNotSame(token1, token0);
      assertEquals(1, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1043, token1.endColumn);
      assertEquals(15, token1.beginLine);
      assertEquals(1043, token1.beginColumn);
      assertEquals(15, token1.endLine);
      assertEquals(16, token1.kind);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(1043, simpleCharStream0.getEndColumn());
      assertEquals(15, simpleCharStream0.getLine());
      assertEquals(15, simpleCharStream0.getBeginLine());
      assertEquals(1043, simpleCharStream0.getBeginColumn());
      assertEquals(15, simpleCharStream0.getEndLine());
      assertEquals(1043, simpleCharStream0.getColumn());
      assertEquals("\u000F", token1.toString());
      assertFalse(token1.equals((Object)token0));
      assertNotNull(token1);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte)15;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)15, (byte)0, (byte)0}, byteArray0);
      assertEquals(4, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      
      byteArrayInputStream0.close();
      assertArrayEquals(new byte[] {(byte)0, (byte)15, (byte)0, (byte)0}, byteArray0);
      assertEquals(4, byteArrayInputStream0.available());
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(byteArrayInputStream0, (byte)15, 770, 2904);
      assertArrayEquals(new byte[] {(byte)0, (byte)15, (byte)0, (byte)0}, byteArray0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(4, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertNotNull(simpleCharStream0);
      
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0);
      assertArrayEquals(new byte[] {(byte)0, (byte)15, (byte)0, (byte)0}, byteArray0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(4, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertNotNull(jVCParserTokenManager0);
      
      char char0 = simpleCharStream0.readChar();
      assertArrayEquals(new byte[] {(byte)0, (byte)15, (byte)0, (byte)0}, byteArray0);
      assertEquals('\u0000', char0);
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(15, simpleCharStream0.getLine());
      assertEquals(770, simpleCharStream0.getEndColumn());
      assertEquals(15, simpleCharStream0.getBeginLine());
      assertEquals(15, simpleCharStream0.getEndLine());
      assertEquals(770, simpleCharStream0.getBeginColumn());
      assertEquals(770, simpleCharStream0.getColumn());
      
      jVCParserTokenManager0.ReInit(simpleCharStream0, 1);
      assertArrayEquals(new byte[] {(byte)0, (byte)15, (byte)0, (byte)0}, byteArray0);
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(15, simpleCharStream0.getLine());
      assertEquals(770, simpleCharStream0.getEndColumn());
      assertEquals(15, simpleCharStream0.getBeginLine());
      assertEquals(15, simpleCharStream0.getEndLine());
      assertEquals(770, simpleCharStream0.getBeginColumn());
      assertEquals(770, simpleCharStream0.getColumn());
      
      Token token0 = jVCParserTokenManager0.getNextToken();
      assertArrayEquals(new byte[] {(byte)0, (byte)15, (byte)0, (byte)0}, byteArray0);
      assertEquals(1, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(771, token0.beginColumn);
      assertEquals(16, token0.kind);
      assertEquals(15, token0.beginLine);
      assertEquals(771, token0.endColumn);
      assertEquals(15, token0.endLine);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(15, simpleCharStream0.getLine());
      assertEquals(15, simpleCharStream0.getBeginLine());
      assertEquals(15, simpleCharStream0.getEndLine());
      assertEquals(771, simpleCharStream0.getBeginColumn());
      assertEquals(771, simpleCharStream0.getColumn());
      assertEquals(771, simpleCharStream0.getEndColumn());
      assertEquals("\u000F", token0.toString());
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-89);
      byteArray0[1] = (byte) (-89);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-89), (byte) (-89), (byte)0, (byte)0}, byteArray0);
      assertEquals(4, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(byteArrayInputStream0, (byte)15, 770, 2904);
      assertArrayEquals(new byte[] {(byte) (-89), (byte) (-89), (byte)0, (byte)0}, byteArray0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(4, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertNotNull(simpleCharStream0);
      
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0);
      assertArrayEquals(new byte[] {(byte) (-89), (byte) (-89), (byte)0, (byte)0}, byteArray0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(4, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertNotNull(jVCParserTokenManager0);
      
      char char0 = simpleCharStream0.readChar();
      assertArrayEquals(new byte[] {(byte) (-89), (byte) (-89), (byte)0, (byte)0}, byteArray0);
      assertEquals('\uFFFD', char0);
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(770, simpleCharStream0.getEndColumn());
      assertEquals(15, simpleCharStream0.getLine());
      assertEquals(15, simpleCharStream0.getEndLine());
      assertEquals(15, simpleCharStream0.getBeginLine());
      assertEquals(770, simpleCharStream0.getColumn());
      assertEquals(770, simpleCharStream0.getBeginColumn());
      
      JVCParserTokenManager jVCParserTokenManager1 = new JVCParserTokenManager(simpleCharStream0, 1);
      assertArrayEquals(new byte[] {(byte) (-89), (byte) (-89), (byte)0, (byte)0}, byteArray0);
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(770, simpleCharStream0.getEndColumn());
      assertEquals(15, simpleCharStream0.getLine());
      assertEquals(15, simpleCharStream0.getEndLine());
      assertEquals(15, simpleCharStream0.getBeginLine());
      assertEquals(770, simpleCharStream0.getColumn());
      assertEquals(770, simpleCharStream0.getBeginColumn());
      assertFalse(jVCParserTokenManager1.equals((Object)jVCParserTokenManager0));
      assertNotNull(jVCParserTokenManager1);
      
      Token token0 = jVCParserTokenManager1.getNextToken();
      assertArrayEquals(new byte[] {(byte) (-89), (byte) (-89), (byte)0, (byte)0}, byteArray0);
      assertNotSame(jVCParserTokenManager1, jVCParserTokenManager0);
      assertEquals(1, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(771, token0.beginColumn);
      assertEquals(15, token0.endLine);
      assertEquals(16, token0.kind);
      assertEquals(771, token0.endColumn);
      assertEquals(15, token0.beginLine);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(771, simpleCharStream0.getBeginColumn());
      assertEquals(771, simpleCharStream0.getEndColumn());
      assertEquals(15, simpleCharStream0.getLine());
      assertEquals(15, simpleCharStream0.getEndLine());
      assertEquals(15, simpleCharStream0.getBeginLine());
      assertEquals(771, simpleCharStream0.getColumn());
      assertEquals("\uFFFD", token0.toString());
      assertFalse(jVCParserTokenManager1.equals((Object)jVCParserTokenManager0));
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-89);
      byteArray0[1] = (byte) (-89);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-89), (byte) (-89), (byte)0, (byte)0}, byteArray0);
      assertEquals(4, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(byteArrayInputStream0, (byte) (-89), 760, 2904);
      assertArrayEquals(new byte[] {(byte) (-89), (byte) (-89), (byte)0, (byte)0}, byteArray0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(4, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertNotNull(simpleCharStream0);
      
      simpleCharStream0.bufpos = 1041;
      assertEquals(4, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getColumn());
      assertEquals(0, simpleCharStream0.getLine());
      assertEquals(0, simpleCharStream0.getEndLine());
      assertEquals(0, simpleCharStream0.getEndColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0);
      assertArrayEquals(new byte[] {(byte) (-89), (byte) (-89), (byte)0, (byte)0}, byteArray0);
      assertEquals(1041, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(4, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getColumn());
      assertEquals(0, simpleCharStream0.getLine());
      assertEquals(0, simpleCharStream0.getEndLine());
      assertEquals(0, simpleCharStream0.getEndColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertNotNull(jVCParserTokenManager0);
      
      jVCParserTokenManager0.curLexState = 759;
      assertEquals(4, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getColumn());
      assertEquals(0, simpleCharStream0.getLine());
      assertEquals(0, simpleCharStream0.getEndLine());
      assertEquals(0, simpleCharStream0.getEndColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      
      Token token0 = jVCParserTokenManager0.getNextToken();
      assertArrayEquals(new byte[] {(byte) (-89), (byte) (-89), (byte)0, (byte)0}, byteArray0);
      assertEquals(1042, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(760, token0.endColumn);
      assertEquals((-89), token0.endLine);
      assertEquals(0, token0.kind);
      assertEquals(760, token0.beginColumn);
      assertEquals((-89), token0.beginLine);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(760, simpleCharStream0.getEndColumn());
      assertEquals(760, simpleCharStream0.getBeginColumn());
      assertEquals((-89), simpleCharStream0.getBeginLine());
      assertEquals((-89), simpleCharStream0.getEndLine());
      assertEquals(760, simpleCharStream0.getColumn());
      assertEquals((-89), simpleCharStream0.getLine());
      assertEquals("", token0.toString());
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[2] = (byte)2;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)2, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(7, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(byteArrayInputStream0, (byte)2, 770, 2904);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)2, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(7, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertNotNull(simpleCharStream0);
      
      simpleCharStream0.column = (-1);
      assertEquals(7, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      
      char[] charArray0 = new char[6];
      charArray0[0] = 'J';
      charArray0[1] = 'J';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'J', 'J', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(charArrayReader0);
      
      charArrayReader0.mark(3);
      assertArrayEquals(new char[] {'J', 'J', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      simpleCharStream0.ReInit((Reader) charArrayReader0, (-216), 3);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)2, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new char[] {'J', 'J', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(7, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      
      byteArrayInputStream0.close();
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)2, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(7, byteArrayInputStream0.available());
      
      char char0 = simpleCharStream0.readChar();
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)2, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals('J', char0);
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(7, byteArrayInputStream0.available());
      assertEquals(3, simpleCharStream0.getBeginColumn());
      assertEquals((-216), simpleCharStream0.getBeginLine());
      assertEquals((-216), simpleCharStream0.getLine());
      assertEquals(3, simpleCharStream0.getColumn());
      assertEquals((-216), simpleCharStream0.getEndLine());
      assertEquals(3, simpleCharStream0.getEndColumn());
      
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0, (byte)2);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)2, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(7, byteArrayInputStream0.available());
      assertEquals(3, simpleCharStream0.getBeginColumn());
      assertEquals((-216), simpleCharStream0.getBeginLine());
      assertEquals((-216), simpleCharStream0.getLine());
      assertEquals(3, simpleCharStream0.getColumn());
      assertEquals((-216), simpleCharStream0.getEndLine());
      assertEquals(3, simpleCharStream0.getEndColumn());
      assertNotNull(jVCParserTokenManager0);
      
      Token token0 = jVCParserTokenManager0.jjFillToken();
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)2, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(3, token0.beginColumn);
      assertEquals(0, token0.kind);
      assertEquals(3, token0.endColumn);
      assertEquals((-216), token0.beginLine);
      assertEquals((-216), token0.endLine);
      assertEquals(7, byteArrayInputStream0.available());
      assertEquals(3, simpleCharStream0.getBeginColumn());
      assertEquals((-216), simpleCharStream0.getBeginLine());
      assertEquals((-216), simpleCharStream0.getLine());
      assertEquals(3, simpleCharStream0.getColumn());
      assertEquals((-216), simpleCharStream0.getEndLine());
      assertEquals(3, simpleCharStream0.getEndColumn());
      assertEquals("", token0.toString());
      assertNotNull(token0);
      
      Token token1 = jVCParserTokenManager0.jjFillToken();
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)2, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotSame(token1, token0);
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(3, token1.beginColumn);
      assertEquals((-216), token1.endLine);
      assertEquals(0, token1.kind);
      assertEquals(3, token1.endColumn);
      assertEquals((-216), token1.beginLine);
      assertEquals(7, byteArrayInputStream0.available());
      assertEquals(3, simpleCharStream0.getBeginColumn());
      assertEquals((-216), simpleCharStream0.getBeginLine());
      assertEquals((-216), simpleCharStream0.getLine());
      assertEquals(3, simpleCharStream0.getColumn());
      assertEquals((-216), simpleCharStream0.getEndLine());
      assertEquals(3, simpleCharStream0.getEndColumn());
      assertEquals("", token1.toString());
      assertFalse(token1.equals((Object)token0));
      assertNotNull(token1);
      
      Token token2 = jVCParserTokenManager0.getNextToken();
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)2, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotSame(token2, token1);
      assertNotSame(token2, token0);
      assertEquals((-216), token2.endLine);
      assertEquals(16, token2.kind);
      assertEquals(4, token2.beginColumn);
      assertEquals(4, token2.endColumn);
      assertEquals((-216), token2.beginLine);
      assertEquals(1, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals("J", token2.toString());
      assertEquals(7, byteArrayInputStream0.available());
      assertEquals(4, simpleCharStream0.getBeginColumn());
      assertEquals((-216), simpleCharStream0.getBeginLine());
      assertEquals((-216), simpleCharStream0.getLine());
      assertEquals(4, simpleCharStream0.getColumn());
      assertEquals((-216), simpleCharStream0.getEndLine());
      assertEquals(4, simpleCharStream0.getEndColumn());
      assertFalse(token2.equals((Object)token1));
      assertFalse(token2.equals((Object)token0));
      assertNotNull(token2);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(4, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(byteArrayInputStream0, 126, 126);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(4, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertNotNull(simpleCharStream0);
      
      char[] charArray0 = new char[7];
      charArray0[0] = '>';
      charArray0[1] = '|';
      charArray0[2] = '|';
      charArray0[3] = '>';
      charArray0[4] = '|';
      charArray0[5] = 'G';
      charArray0[6] = '>';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'>', '|', '|', '>', '|', 'G', '>'}, charArray0);
      assertNotNull(charArrayReader0);
      
      charArrayReader0.mark(126);
      assertArrayEquals(new char[] {'>', '|', '|', '>', '|', 'G', '>'}, charArray0);
      
      simpleCharStream0.ReInit((Reader) charArrayReader0, 126, (-5365));
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new char[] {'>', '|', '|', '>', '|', 'G', '>'}, charArray0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(4, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      
      byteArrayInputStream0.close();
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(4, byteArrayInputStream0.available());
      
      char char0 = simpleCharStream0.readChar();
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals('>', char0);
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(4, byteArrayInputStream0.available());
      assertEquals(126, simpleCharStream0.getBeginLine());
      assertEquals(126, simpleCharStream0.getLine());
      assertEquals((-5365), simpleCharStream0.getColumn());
      assertEquals(126, simpleCharStream0.getEndLine());
      assertEquals((-5365), simpleCharStream0.getEndColumn());
      assertEquals((-5365), simpleCharStream0.getBeginColumn());
      
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0, 0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(4, byteArrayInputStream0.available());
      assertEquals(126, simpleCharStream0.getBeginLine());
      assertEquals(126, simpleCharStream0.getLine());
      assertEquals((-5365), simpleCharStream0.getColumn());
      assertEquals(126, simpleCharStream0.getEndLine());
      assertEquals((-5365), simpleCharStream0.getEndColumn());
      assertEquals((-5365), simpleCharStream0.getBeginColumn());
      assertNotNull(jVCParserTokenManager0);
      
      Token token0 = jVCParserTokenManager0.jjFillToken();
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(126, token0.beginLine);
      assertEquals(0, token0.kind);
      assertEquals((-5365), token0.beginColumn);
      assertEquals((-5365), token0.endColumn);
      assertEquals(126, token0.endLine);
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals("", token0.toString());
      assertEquals(4, byteArrayInputStream0.available());
      assertEquals(126, simpleCharStream0.getBeginLine());
      assertEquals(126, simpleCharStream0.getLine());
      assertEquals((-5365), simpleCharStream0.getColumn());
      assertEquals(126, simpleCharStream0.getEndLine());
      assertEquals((-5365), simpleCharStream0.getEndColumn());
      assertEquals((-5365), simpleCharStream0.getBeginColumn());
      assertNotNull(token0);
      
      Token token1 = jVCParserTokenManager0.getNextToken();
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotSame(token1, token0);
      assertEquals(16, token1.kind);
      assertEquals(126, token1.endLine);
      assertEquals((-5364), token1.endColumn);
      assertEquals(126, token1.beginLine);
      assertEquals((-5364), token1.beginColumn);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, simpleCharStream0.bufpos);
      assertEquals(4, byteArrayInputStream0.available());
      assertEquals("|", token1.toString());
      assertEquals(126, simpleCharStream0.getBeginLine());
      assertEquals(126, simpleCharStream0.getLine());
      assertEquals((-5364), simpleCharStream0.getColumn());
      assertEquals((-5364), simpleCharStream0.getBeginColumn());
      assertEquals(126, simpleCharStream0.getEndLine());
      assertEquals((-5364), simpleCharStream0.getEndColumn());
      assertFalse(token1.equals((Object)token0));
      assertNotNull(token1);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = 'g';
      charArray0[1] = '9';
      charArray0[3] = '[';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'g', '9', '\u0000', '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(charArrayReader0);
      
      charArrayReader0.mark((byte)15);
      assertArrayEquals(new char[] {'g', '9', '\u0000', '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Du~");
      assertFalse(boolean0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(charArrayReader0, (-5365), (-83), 3);
      assertArrayEquals(new char[] {'g', '9', '\u0000', '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertNotNull(simpleCharStream0);
      
      simpleCharStream0.ReInit((Reader) charArrayReader0, 3, 1);
      assertArrayEquals(new char[] {'g', '9', '\u0000', '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0, 1);
      assertArrayEquals(new char[] {'g', '9', '\u0000', '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertNotNull(jVCParserTokenManager0);
      
      Token token0 = jVCParserTokenManager0.getNextToken();
      assertArrayEquals(new char[] {'g', '9', '\u0000', '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.bufpos);
      assertEquals(3, token0.beginLine);
      assertEquals(1, token0.endColumn);
      assertEquals(3, token0.endLine);
      assertEquals(16, token0.kind);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, simpleCharStream0.getColumn());
      assertEquals(3, simpleCharStream0.getBeginLine());
      assertEquals(3, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getEndColumn());
      assertEquals(3, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals("g", token0.toString());
      assertNotNull(token0);
      
      Token token1 = jVCParserTokenManager0.getNextToken();
      assertArrayEquals(new char[] {'g', '9', '\u0000', '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotSame(token1, token0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, simpleCharStream0.bufpos);
      assertEquals(16, token1.kind);
      assertEquals(2, token1.beginColumn);
      assertEquals(2, token1.endColumn);
      assertEquals(3, token1.endLine);
      assertEquals(3, token1.beginLine);
      assertEquals(3, simpleCharStream0.getBeginLine());
      assertEquals(3, simpleCharStream0.getLine());
      assertEquals(2, simpleCharStream0.getEndColumn());
      assertEquals(3, simpleCharStream0.getEndLine());
      assertEquals(2, simpleCharStream0.getColumn());
      assertEquals(2, simpleCharStream0.getBeginColumn());
      assertEquals("9", token1.toString());
      assertFalse(token1.equals((Object)token0));
      assertNotNull(token1);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = 'V';
      charArray0[1] = '9';
      charArray0[3] = '[';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'V', '9', '\u0000', '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(charArrayReader0);
      
      charArrayReader0.mark((byte)15);
      assertArrayEquals(new char[] {'V', '9', '\u0000', '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Du~");
      assertFalse(boolean0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(charArrayReader0, (-5365), (-99), '[');
      assertArrayEquals(new char[] {'V', '9', '\u0000', '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertNotNull(simpleCharStream0);
      
      simpleCharStream0.ReInit((Reader) charArrayReader0, (-5365), 1);
      assertArrayEquals(new char[] {'V', '9', '\u0000', '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0, 1);
      assertArrayEquals(new char[] {'V', '9', '\u0000', '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertNotNull(jVCParserTokenManager0);
      
      Token token0 = jVCParserTokenManager0.getNextToken();
      assertArrayEquals(new char[] {'V', '9', '\u0000', '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.bufpos);
      assertEquals(1, token0.endColumn);
      assertEquals((-5365), token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(16, token0.kind);
      assertEquals((-5365), token0.endLine);
      assertEquals(1, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getColumn());
      assertEquals((-5365), simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals((-5365), simpleCharStream0.getEndLine());
      assertEquals((-5365), simpleCharStream0.getLine());
      assertEquals("V", token0.toString());
      assertNotNull(token0);
      
      Token token1 = jVCParserTokenManager0.getNextToken();
      assertArrayEquals(new char[] {'V', '9', '\u0000', '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotSame(token1, token0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, simpleCharStream0.bufpos);
      assertEquals(2, token1.endColumn);
      assertEquals(2, token1.beginColumn);
      assertEquals((-5365), token1.beginLine);
      assertEquals((-5365), token1.endLine);
      assertEquals(16, token1.kind);
      assertEquals(2, simpleCharStream0.getBeginColumn());
      assertEquals(2, simpleCharStream0.getEndColumn());
      assertEquals(2, simpleCharStream0.getColumn());
      assertEquals((-5365), simpleCharStream0.getBeginLine());
      assertEquals((-5365), simpleCharStream0.getEndLine());
      assertEquals((-5365), simpleCharStream0.getLine());
      assertEquals("9", token1.toString());
      assertFalse(token1.equals((Object)token0));
      assertNotNull(token1);
      
      Token token2 = jVCParserTokenManager0.getNextToken();
      assertArrayEquals(new char[] {'V', '9', '\u0000', '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotSame(token2, token0);
      assertNotSame(token2, token1);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(2, simpleCharStream0.bufpos);
      assertEquals((-5365), token2.endLine);
      assertEquals(3, token2.beginColumn);
      assertEquals((-5365), token2.beginLine);
      assertEquals(3, token2.endColumn);
      assertEquals(16, token2.kind);
      assertEquals(3, simpleCharStream0.getEndColumn());
      assertEquals(3, simpleCharStream0.getBeginColumn());
      assertEquals((-5365), simpleCharStream0.getBeginLine());
      assertEquals((-5365), simpleCharStream0.getEndLine());
      assertEquals(3, simpleCharStream0.getColumn());
      assertEquals((-5365), simpleCharStream0.getLine());
      assertEquals("\u0000", token2.toString());
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
      assertNotNull(token2);
      
      Token token3 = jVCParserTokenManager0.getNextToken();
      assertArrayEquals(new char[] {'V', '9', '\u0000', '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotSame(token3, token0);
      assertNotSame(token3, token1);
      assertNotSame(token3, token2);
      assertEquals(3, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-5365), token3.endLine);
      assertEquals(4, token3.beginColumn);
      assertEquals((-5365), token3.beginLine);
      assertEquals(4, token3.endColumn);
      assertEquals(16, token3.kind);
      assertEquals(4, simpleCharStream0.getBeginColumn());
      assertEquals(4, simpleCharStream0.getEndColumn());
      assertEquals((-5365), simpleCharStream0.getBeginLine());
      assertEquals((-5365), simpleCharStream0.getEndLine());
      assertEquals(4, simpleCharStream0.getColumn());
      assertEquals((-5365), simpleCharStream0.getLine());
      assertEquals("[", token3.toString());
      assertFalse(token3.equals((Object)token0));
      assertFalse(token3.equals((Object)token1));
      assertFalse(token3.equals((Object)token2));
      assertNotNull(token3);
      
      jVCParserTokenManager0.ReInit(simpleCharStream0);
      assertArrayEquals(new char[] {'V', '9', '\u0000', '[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(3, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(4, simpleCharStream0.getBeginColumn());
      assertEquals(4, simpleCharStream0.getEndColumn());
      assertEquals((-5365), simpleCharStream0.getBeginLine());
      assertEquals((-5365), simpleCharStream0.getEndLine());
      assertEquals(4, simpleCharStream0.getColumn());
      assertEquals((-5365), simpleCharStream0.getLine());
  }
}
