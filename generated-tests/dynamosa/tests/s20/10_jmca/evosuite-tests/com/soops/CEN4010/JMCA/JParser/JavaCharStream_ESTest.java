/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 23 07:41:21 GMT 2019
 */

package com.soops.CEN4010.JMCA.JParser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.soops.CEN4010.JMCA.JParser.JavaCharStream;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.File;
import java.io.FileDescriptor;
import java.io.FilterInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PushbackInputStream;
import java.io.Reader;
import java.io.SequenceInputStream;
import java.io.StringReader;
import java.nio.CharBuffer;
import java.util.Enumeration;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JavaCharStream_ESTest extends JavaCharStream_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      StringReader stringReader0 = new StringReader(">s=uLo 0\"{NxrfM#Q");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      javaCharStream0.FillBuff();
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      char[] charArray0 = new char[4];
      charArray0[0] = '#';
      charArray0[1] = '#';
      charArray0[2] = '#';
      charArray0[3] = '#';
      int int0 = stringReader0.read(charArray0);
      assertEquals(4, charArray0.length);
      assertArrayEquals(new char[] {'#', '#', '#', '#'}, charArray0);
      assertEquals((-1), int0);
      
      javaCharStream0.adjustBeginLineColumn((-1037), (-1));
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.getBeginColumn());
      assertEquals((-1036), javaCharStream0.getBeginLine());
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      int int1 = javaCharStream0.getBeginColumn();
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      assertEquals((-1), javaCharStream0.getBeginColumn());
      assertEquals((-1036), javaCharStream0.getBeginLine());
      
      // Undeclared exception!
      try { 
        javaCharStream0.ExpandBuff(true);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      StringReader stringReader0 = new StringReader("f9CRM\"KfXH5^>/YNTq");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      javaCharStream0.FillBuff();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      StringReader stringReader1 = new StringReader("f9CRM\"KfXH5^>/YNTq");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      javaCharStream0.ReInit((Reader) stringReader0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotSame(stringReader0, stringReader1);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      javaCharStream0.backup(84);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(4011, javaCharStream0.bufpos);
      assertNotSame(stringReader0, stringReader1);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getColumn());
      
      char char0 = javaCharStream0.readChar();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(4012, javaCharStream0.bufpos);
      assertNotSame(stringReader0, stringReader1);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertEquals('\u0000', char0);
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getColumn());
      
      String string0 = javaCharStream0.GetImage();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(4012, javaCharStream0.bufpos);
      assertNotNull(string0);
      assertNotSame(stringReader0, stringReader1);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getColumn());
      
      char[] charArray0 = new char[0];
      javaCharStream0.nextCharBuf = charArray0;
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getColumn());
      
      // Undeclared exception!
      try { 
        javaCharStream0.FillBuff();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      StringReader stringReader0 = new StringReader(">s=uLo 0\"{NxrfM#Q");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-1412), 0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      char[] charArray0 = new char[5];
      charArray0[2] = '';
      charArray0[3] = '\u0000';
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)92;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)64;
      byteArray0[3] = (byte)16;
      byteArray0[4] = (byte)100;
      byteArray0[5] = (byte)86;
      byteArray0[6] = (byte) (-50);
      byteArray0[7] = (byte)123;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(8, byteArray0.length);
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)92, (byte)1, (byte)64, (byte)16, (byte)100, (byte)86, (byte) (-50), (byte)123}, byteArray0);
      assertEquals(8, byteArrayInputStream0.available());
      
      JavaCharStream javaCharStream1 = new JavaCharStream(byteArrayInputStream0, (byte)64, (-606));
      assertEquals(8, byteArray0.length);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertNotNull(javaCharStream1);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertArrayEquals(new byte[] {(byte)92, (byte)1, (byte)64, (byte)16, (byte)100, (byte)86, (byte) (-50), (byte)123}, byteArray0);
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      
      javaCharStream0.backup(10);
      assertEquals(4085, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getColumn());
      
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0);
      assertEquals(8, byteArray0.length);
      assertNotNull(pushbackInputStream0);
      assertArrayEquals(new byte[] {(byte)92, (byte)1, (byte)64, (byte)16, (byte)100, (byte)86, (byte) (-50), (byte)123}, byteArray0);
      assertEquals(8, byteArrayInputStream0.available());
      
      JavaCharStream javaCharStream2 = new JavaCharStream(pushbackInputStream0, (byte)100, (-475), (byte)86);
      assertEquals(8, byteArray0.length);
      assertEquals((-1), javaCharStream2.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream2);
      assertFalse(javaCharStream2.equals((Object)javaCharStream0));
      assertFalse(javaCharStream2.equals((Object)javaCharStream1));
      assertArrayEquals(new byte[] {(byte)92, (byte)1, (byte)64, (byte)16, (byte)100, (byte)86, (byte) (-50), (byte)123}, byteArray0);
      assertEquals(0, javaCharStream2.getBeginColumn());
      assertEquals(0, javaCharStream2.getBeginLine());
      assertEquals(8, byteArrayInputStream0.available());
      
      char char0 = javaCharStream2.readChar();
      assertEquals(8, byteArray0.length);
      assertEquals(0, javaCharStream2.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotSame(javaCharStream2, javaCharStream0);
      assertNotSame(javaCharStream2, javaCharStream1);
      assertFalse(javaCharStream2.equals((Object)javaCharStream0));
      assertFalse(javaCharStream2.equals((Object)javaCharStream1));
      assertArrayEquals(new byte[] {(byte)92, (byte)1, (byte)64, (byte)16, (byte)100, (byte)86, (byte) (-50), (byte)123}, byteArray0);
      assertEquals('\\', char0);
      assertEquals(100, javaCharStream2.getLine());
      assertEquals((-475), javaCharStream2.getEndColumn());
      assertEquals(100, javaCharStream2.getBeginLine());
      assertEquals((-475), javaCharStream2.getBeginColumn());
      assertEquals(100, javaCharStream2.getEndLine());
      assertEquals((-475), javaCharStream2.getColumn());
      assertEquals(0, byteArrayInputStream0.available());
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      StringReader stringReader0 = new StringReader("f9CRM\"KfXH5^>/YNTq");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      javaCharStream0.bufpos = 0;
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getLine());
      
      javaCharStream0.FillBuff();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getLine());
      
      char[] charArray0 = new char[4];
      javaCharStream0.maxNextCharInd = (-1);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getLine());
      
      charArray0[3] = '#';
      int int0 = stringReader0.read(charArray0);
      assertEquals(4, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '#'}, charArray0);
      assertEquals((-1), int0);
      
      javaCharStream0.adjustBeginLineColumn(1797, 0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(1797, javaCharStream0.getLine());
      assertEquals(1797, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(1797, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getColumn());
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      int int1 = javaCharStream0.getBeginColumn();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      assertEquals(1797, javaCharStream0.getLine());
      assertEquals(1797, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(1797, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getColumn());
      
      stringReader0.reset();
      javaCharStream0.AdjustBuffSize();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(1797, javaCharStream0.getLine());
      assertEquals(1797, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(1797, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getColumn());
      
      String string0 = javaCharStream0.GetImage();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertNotNull(string0);
      assertEquals("\u0000", string0);
      assertEquals(1797, javaCharStream0.getLine());
      assertEquals(1797, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(1797, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getColumn());
      
      javaCharStream0.backup(0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(1797, javaCharStream0.getLine());
      assertEquals(1797, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(1797, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getColumn());
      
      stringReader0.reset();
      // Undeclared exception!
      try { 
        javaCharStream0.readChar();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      int int0 = 1;
      Reader reader0 = null;
      int int1 = 745;
      int int2 = 9;
      JavaCharStream javaCharStream0 = new JavaCharStream((Reader) null, 9, 745, 1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      javaCharStream0.bufpos = 9;
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      javaCharStream0.backup(1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(8, javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      // Undeclared exception!
      try { 
        javaCharStream0.readChar();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 9
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      char char0 = '^';
      try { 
        JavaCharStream.hexval('^');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      try { 
        JavaCharStream.hexval('U');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      StringReader stringReader0 = new StringReader(">s=uLo 0\"{NxrfM#Q");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-1412), 0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      char[] charArray0 = new char[5];
      charArray0[2] = '';
      boolean boolean0 = javaCharStream0.prevCharIsLF;
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[18];
      byteArray0[0] = (byte)92;
      byteArray0[1] = (byte)92;
      byteArray0[2] = (byte) (-6);
      byteArray0[3] = (byte)92;
      byteArray0[4] = (byte)92;
      byteArray0[5] = (byte) (-6);
      byteArray0[6] = (byte)87;
      byteArray0[7] = (byte)92;
      byteArray0[8] = (byte)92;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(18, byteArray0.length);
      assertNotNull(byteArrayInputStream0);
      assertEquals(18, byteArrayInputStream0.available());
      
      JavaCharStream javaCharStream1 = new JavaCharStream(byteArrayInputStream0, 1829, 94);
      assertEquals(18, byteArray0.length);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream1);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(18, byteArrayInputStream0.available());
      
      javaCharStream1.backup((-3694));
      assertEquals(18, byteArray0.length);
      assertEquals(3693, javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getColumn());
      assertEquals(0, javaCharStream1.getLine());
      assertEquals(0, javaCharStream1.getEndColumn());
      assertEquals(0, javaCharStream1.getEndLine());
      assertEquals(18, byteArrayInputStream0.available());
      
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0);
      assertEquals(18, byteArray0.length);
      assertNotNull(pushbackInputStream0);
      assertEquals(18, byteArrayInputStream0.available());
      
      String string0 = javaCharStream0.GetImage();
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(string0);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      javaCharStream0.backup((byte)92);
      assertEquals(4003, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getEndLine());
      
      char char0 = javaCharStream1.readChar();
      assertEquals(18, byteArray0.length);
      assertEquals(3694, javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals('\\', char0);
      assertEquals(1829, javaCharStream1.getLine());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(94, javaCharStream1.getColumn());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(94, javaCharStream1.getEndColumn());
      assertEquals(1829, javaCharStream1.getEndLine());
      assertEquals(0, byteArrayInputStream0.available());
      
      javaCharStream1.ReInit((InputStream) pushbackInputStream0, (int) (byte)87, (int) (byte)92);
      assertEquals(18, byteArray0.length);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, byteArrayInputStream0.available());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      StringReader stringReader0 = new StringReader("f9CRM\"KfXH5^>/YNTq");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      javaCharStream0.bufpos = 0;
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getEndLine());
      
      javaCharStream0.FillBuff();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getEndLine());
      
      char[] charArray0 = new char[4];
      charArray0[2] = '9';
      charArray0[1] = '9';
      charArray0[2] = '9';
      charArray0[3] = '#';
      int int0 = JavaCharStream.hexval('9');
      assertEquals(9, int0);
      
      javaCharStream0.UpdateLineColumn('9');
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)78;
      byteArray0[1] = (byte)89;
      byteArray0[2] = (byte)78;
      byteArray0[3] = (byte)89;
      byteArray0[4] = (byte)89;
      byteArray0[5] = (byte) (-1);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(6, byteArray0.length);
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)78, (byte)89, (byte)78, (byte)89, (byte)89, (byte) (-1)}, byteArray0);
      assertEquals(6, byteArrayInputStream0.available());
      
      JavaCharStream javaCharStream1 = new JavaCharStream(byteArrayInputStream0, (-758), 1264);
      assertEquals(6, byteArray0.length);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream1);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertArrayEquals(new byte[] {(byte)78, (byte)89, (byte)78, (byte)89, (byte)89, (byte) (-1)}, byteArray0);
      assertEquals(6, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      
      javaCharStream1.backup((byte) (-1));
      assertEquals(6, byteArray0.length);
      assertEquals(0, javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertArrayEquals(new byte[] {(byte)78, (byte)89, (byte)78, (byte)89, (byte)89, (byte) (-1)}, byteArray0);
      assertEquals(6, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getLine());
      assertEquals(0, javaCharStream1.getEndColumn());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getColumn());
      assertEquals(0, javaCharStream1.getEndLine());
      
      char char0 = javaCharStream0.readChar();
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertEquals('f', char0);
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      byte byte0 = (byte) (-114);
      int int0 = 91;
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      try { 
        JavaCharStream.hexval('O');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      StringReader stringReader0 = new StringReader("<-PD?G9");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      javaCharStream0.FillBuff();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      javaCharStream0.adjustBeginLineColumn(476, 1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(477, javaCharStream0.getBeginLine());
      
      stringReader0.reset();
      javaCharStream0.backup(476);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(3619, javaCharStream0.bufpos);
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(476, javaCharStream0.getEndLine());
      assertEquals(476, javaCharStream0.getLine());
      assertEquals(477, javaCharStream0.getBeginLine());
      
      char char0 = javaCharStream0.BeginToken();
      assertEquals(3620, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals('\u0000', char0);
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(476, javaCharStream0.getEndLine());
      assertEquals(476, javaCharStream0.getBeginLine());
      assertEquals(476, javaCharStream0.getLine());
      
      int int0 = javaCharStream0.getBeginLine();
      assertEquals(3620, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(476, int0);
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(476, javaCharStream0.getEndLine());
      assertEquals(476, javaCharStream0.getBeginLine());
      assertEquals(476, javaCharStream0.getLine());
      
      char[] charArray0 = new char[8];
      charArray0[0] = '\u0000';
      charArray0[1] = 'X';
      charArray0[2] = '\u0000';
      charArray0[3] = '\u0000';
      charArray0[4] = '\u0000';
      charArray0[5] = '\u0000';
      String string0 = javaCharStream0.GetImage();
      assertEquals(3620, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(string0);
      assertEquals("\u0000", string0);
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(476, javaCharStream0.getEndLine());
      assertEquals(476, javaCharStream0.getBeginLine());
      assertEquals(476, javaCharStream0.getLine());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      int int0 = JavaCharStream.hexval('c');
      assertEquals(12, int0);
      
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      char[] charArray0 = javaCharStream0.GetSuffix(12);
      assertEquals(12, charArray0.length);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(charArray0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      try { 
        javaCharStream0.ReadByte();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      StringReader stringReader0 = new StringReader(">s=uLo 0\"{NxrfM#Q");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      try { 
        JavaCharStream.hexval('M');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      StringReader stringReader0 = new StringReader("f9CRM\"KfXH5^>/YNTq");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      javaCharStream0.bufpos = 0;
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getColumn());
      
      javaCharStream0.FillBuff();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getColumn());
      
      char[] charArray0 = new char[4];
      charArray0[3] = '#';
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      javaCharStream0.ReInit((InputStream) pipedInputStream0, 0, (-1));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, pipedInputStream0.available());
      
      int int0 = stringReader0.read(charArray0);
      assertEquals(4, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '#'}, charArray0);
      assertEquals((-1), int0);
      
      javaCharStream0.adjustBeginLineColumn(1797, 0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(1798, javaCharStream0.getBeginLine());
      
      try { 
        javaCharStream0.BeginToken();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      StringReader stringReader0 = new StringReader("f9CRM\"KXH^>/YNq");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      javaCharStream0.FillBuff();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      javaCharStream0.ReInit((Reader) stringReader0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "f9CRM\"KXH^>/YNq", 1, 1);
      assertNotNull(charBuffer0);
      assertTrue(charBuffer0.isReadOnly());
      assertEquals(1, charBuffer0.position());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals(1, charBuffer0.limit());
      assertEquals(15, charBuffer0.capacity());
      assertFalse(charBuffer0.isDirect());
      assertFalse(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.length());
      assertEquals("", charBuffer0.toString());
      assertEquals(0, charBuffer0.remaining());
      
      try { 
        JavaCharStream.hexval('=');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      StringReader stringReader0 = new StringReader("com.soops.CEN4010.JMCA.JParser.JavaCharStream");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (byte)81, (byte)81, (byte)81);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      boolean boolean0 = javaCharStream0.prevCharIsLF;
      assertFalse(boolean0);
      
      StringReader stringReader1 = new StringReader("com.soops.CEN4010.JMCA.JParser.JavaCharStream");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      char char0 = javaCharStream0.BeginToken();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotSame(stringReader0, stringReader1);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertEquals('c', char0);
      assertEquals(81, javaCharStream0.getBeginLine());
      assertEquals(81, javaCharStream0.getLine());
      assertEquals(81, javaCharStream0.getBeginColumn());
      assertEquals(81, javaCharStream0.getColumn());
      assertEquals(81, javaCharStream0.getEndColumn());
      assertEquals(81, javaCharStream0.getEndLine());
      
      javaCharStream0.adjustBeginLineColumn((byte)81, (byte)81);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotSame(stringReader0, stringReader1);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertEquals(81, javaCharStream0.getBeginLine());
      assertEquals(81, javaCharStream0.getLine());
      assertEquals(81, javaCharStream0.getBeginColumn());
      assertEquals(81, javaCharStream0.getColumn());
      assertEquals(81, javaCharStream0.getEndColumn());
      assertEquals(81, javaCharStream0.getEndLine());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      StringReader stringReader0 = new StringReader("~");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 89, 89);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      javaCharStream0.inBuf = 89;
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      char char0 = javaCharStream0.readChar();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals('\u0000', char0);
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      char char1 = javaCharStream0.BeginToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertTrue(char1 == char0);
      assertEquals('\u0000', char1);
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      try { 
        JavaCharStream.hexval('`');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      StringReader stringReader0 = new StringReader("?c4lEu9a*q+SB&");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      javaCharStream0.AdjustBuffSize();
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      StringReader stringReader0 = new StringReader("^y9Fo*YLbf;dul4Ms");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 3277, (-1542));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      javaCharStream0.ReInit((Reader) stringReader0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      javaCharStream0.Done();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      // Undeclared exception!
      try { 
        javaCharStream0.BeginToken();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      int int0 = JavaCharStream.hexval('F');
      assertEquals(15, int0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      StringReader stringReader0 = new StringReader("f9CRM\"KfXH5^>/YNTq");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      javaCharStream0.bufpos = 0;
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getColumn());
      
      javaCharStream0.FillBuff();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getColumn());
      
      char[] charArray0 = new char[4];
      charArray0[3] = '#';
      int int0 = stringReader0.read(charArray0);
      assertEquals(4, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '#'}, charArray0);
      assertEquals((-1), int0);
      
      javaCharStream0.adjustBeginLineColumn(1797, 0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1797, javaCharStream0.getBeginLine());
      assertEquals(1797, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(1797, javaCharStream0.getLine());
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      int int1 = javaCharStream0.getBeginColumn();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      assertEquals(1797, javaCharStream0.getBeginLine());
      assertEquals(1797, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(1797, javaCharStream0.getLine());
      
      javaCharStream0.ExpandBuff(true);
      assertEquals(4096, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1797, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getColumn());
      
      javaCharStream0.UpdateLineColumn('0');
      assertEquals(4096, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1797, javaCharStream0.getBeginLine());
      assertEquals(1797, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1797, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getColumn());
      
      char char0 = javaCharStream0.BeginToken();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals('f', char0);
      assertEquals(1797, javaCharStream0.getBeginLine());
      assertEquals(1797, javaCharStream0.getEndLine());
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(1797, javaCharStream0.getLine());
      assertEquals(2, javaCharStream0.getColumn());
      
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(sequenceInputStream0);
      BufferedInputStream bufferedInputStream1 = new BufferedInputStream(bufferedInputStream0, 1797);
      javaCharStream0.ReInit((InputStream) bufferedInputStream1, (-1478), (-1));
      assertEquals((-1), javaCharStream0.bufpos);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      StringReader stringReader0 = new StringReader("<-IPD?G9");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      int int0 = JavaCharStream.hexval('B');
      assertEquals(11, int0);
      
      // Undeclared exception!
      try { 
        javaCharStream0.getColumn();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      try { 
        JavaCharStream.hexval('J');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 2193, 2193, 2217);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      long long0 = stringReader0.skip((-16L));
      assertEquals(0L, long0);
      
      int int0 = 1;
      javaCharStream0.ReInit((Reader) stringReader0, 1, 1, 2217);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      try { 
        javaCharStream0.FillBuff();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      StringReader stringReader0 = new StringReader("f9CRM\"KfXH5^>/YNTq");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)87;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(1, byteArray0.length);
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)87}, byteArray0);
      assertEquals(1, byteArrayInputStream0.available());
      
      JavaCharStream javaCharStream1 = new JavaCharStream(byteArrayInputStream0, 1, (byte)87);
      assertEquals(1, byteArray0.length);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream1);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertArrayEquals(new byte[] {(byte)87}, byteArray0);
      assertEquals(1, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      
      javaCharStream0.backup(0);
      assertEquals(4095, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getEndColumn());
      
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0);
      assertEquals(1, byteArray0.length);
      assertNotNull(pushbackInputStream0);
      assertArrayEquals(new byte[] {(byte)87}, byteArray0);
      assertEquals(1, byteArrayInputStream0.available());
      
      javaCharStream1.AdjustBuffSize();
      assertEquals(1, byteArray0.length);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertArrayEquals(new byte[] {(byte)87}, byteArray0);
      assertEquals(1, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      
      String string0 = javaCharStream1.GetImage();
      assertEquals(1, byteArray0.length);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(string0);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertArrayEquals(new byte[] {(byte)87}, byteArray0);
      assertEquals(1, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      
      JavaCharStream javaCharStream2 = new JavaCharStream(pushbackInputStream0, 1829, (-4546));
      assertEquals(1, byteArray0.length);
      assertEquals((-1), javaCharStream2.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream2);
      assertFalse(javaCharStream2.equals((Object)javaCharStream1));
      assertFalse(javaCharStream2.equals((Object)javaCharStream0));
      assertArrayEquals(new byte[] {(byte)87}, byteArray0);
      assertEquals(1, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream2.getBeginLine());
      assertEquals(0, javaCharStream2.getBeginColumn());
      
      javaCharStream2.backup(3010);
      assertEquals(1, byteArray0.length);
      assertEquals(1085, javaCharStream2.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotSame(javaCharStream2, javaCharStream1);
      assertNotSame(javaCharStream2, javaCharStream0);
      assertFalse(javaCharStream2.equals((Object)javaCharStream1));
      assertFalse(javaCharStream2.equals((Object)javaCharStream0));
      assertArrayEquals(new byte[] {(byte)87}, byteArray0);
      assertEquals(1, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream2.getLine());
      assertEquals(0, javaCharStream2.getEndColumn());
      assertEquals(0, javaCharStream2.getBeginLine());
      assertEquals(0, javaCharStream2.getBeginColumn());
      assertEquals(0, javaCharStream2.getColumn());
      assertEquals(0, javaCharStream2.getEndLine());
      
      char char0 = javaCharStream1.readChar();
      assertEquals(1, byteArray0.length);
      assertEquals(0, javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotSame(javaCharStream1, javaCharStream2);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertFalse(javaCharStream1.equals((Object)javaCharStream2));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertArrayEquals(new byte[] {(byte)87}, byteArray0);
      assertEquals('W', char0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(1, javaCharStream1.getBeginLine());
      assertEquals(87, javaCharStream1.getColumn());
      assertEquals(87, javaCharStream1.getBeginColumn());
      assertEquals(1, javaCharStream1.getLine());
      assertEquals(1, javaCharStream1.getEndLine());
      assertEquals(87, javaCharStream1.getEndColumn());
      
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray0, (byte)87, 3581);
      assertEquals(1, byteArray0.length);
      assertNotNull(byteArrayInputStream1);
      assertFalse(byteArrayInputStream1.equals((Object)byteArrayInputStream0));
      assertArrayEquals(new byte[] {(byte)87}, byteArray0);
      assertEquals((-86), byteArrayInputStream1.available());
      
      javaCharStream0.ReInit((InputStream) byteArrayInputStream1, 94, 0);
      assertEquals(1, byteArray0.length);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotSame(javaCharStream0, javaCharStream2);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(byteArrayInputStream1, byteArrayInputStream0);
      assertFalse(javaCharStream0.equals((Object)javaCharStream2));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(byteArrayInputStream1.equals((Object)byteArrayInputStream0));
      assertArrayEquals(new byte[] {(byte)87}, byteArray0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-86), byteArrayInputStream1.available());
      
      try { 
        javaCharStream0.ReadByte();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = '!';
      charArray0[1] = '.';
      charArray0[2] = ' ';
      int int0 = stringReader0.read(charArray0);
      assertEquals(3, charArray0.length);
      assertArrayEquals(new char[] {'!', '.', ' '}, charArray0);
      assertEquals((-1), int0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 0, (-1513));
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      int[] intArray0 = new int[2];
      intArray0[0] = (-1513);
      intArray0[1] = (-1513);
      javaCharStream0.bufcolumn = intArray0;
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1513), javaCharStream0.getBeginColumn());
      
      int int1 = javaCharStream0.getBeginLine();
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1513), javaCharStream0.getBeginColumn());
      
      StringReader stringReader1 = new StringReader("N%r+/rC?JxU^HeF3@");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      javaCharStream0.column = 1;
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1513), javaCharStream0.getBeginColumn());
      
      boolean boolean0 = stringReader1.markSupported();
      assertNotSame(stringReader1, stringReader0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        javaCharStream0.ReInit((Reader) stringReader1, 754, 0, (-2210));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      int int0 = JavaCharStream.hexval('E');
      assertEquals(14, int0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(pipedInputStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      javaCharStream0.buffer = null;
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      // Undeclared exception!
      try { 
        javaCharStream0.AdjustBuffSize();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      int int0 = JavaCharStream.hexval('3');
      assertEquals(3, int0);
      
      char char0 = '@';
      try { 
        JavaCharStream.hexval('@');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      StringReader stringReader0 = new StringReader("f9CRM\"KfXH5^>/YNTq");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      javaCharStream0.bufpos = 0;
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getColumn());
      
      javaCharStream0.FillBuff();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getColumn());
      
      char[] charArray0 = new char[4];
      charArray0[2] = '2';
      charArray0[1] = '2';
      charArray0[2] = '2';
      charArray0[3] = '#';
      int int0 = JavaCharStream.hexval('2');
      assertEquals(2, int0);
      
      javaCharStream0.UpdateLineColumn('2');
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getColumn());
      
      javaCharStream0.adjustBeginLineColumn(0, (-76));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-76), javaCharStream0.getColumn());
      assertEquals((-76), javaCharStream0.getEndColumn());
      assertEquals((-76), javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getEndLine());
      
      javaCharStream0.ReInit((Reader) stringReader0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-76), javaCharStream0.getBeginColumn());
      
      javaCharStream0.ReInit((Reader) stringReader0, (-1548), 13);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-76), javaCharStream0.getBeginColumn());
      
      javaCharStream0.ReInit((Reader) stringReader0, (-1548), (-76));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-76), javaCharStream0.getBeginColumn());
      
      javaCharStream0.AdjustBuffSize();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-76), javaCharStream0.getBeginColumn());
      
      // Undeclared exception!
      try { 
        javaCharStream0.getEndLine();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      StringReader stringReader0 = new StringReader("4#U:=%riY *2sx.QQAX");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      boolean boolean0 = stringReader0.ready();
      assertTrue(boolean0);
      
      javaCharStream0.prevCharIsCR = false;
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      javaCharStream0.ExpandBuff(false);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      PipedInputStream pipedInputStream0 = null;
      try {
        pipedInputStream0 = new PipedInputStream((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pipe Size <= 0
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      StringReader stringReader0 = new StringReader("f9CRM\"KfXH5^>/YNTq");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      javaCharStream0.FillBuff();
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      try { 
        JavaCharStream.hexval('P');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      int int0 = 0;
      pipedInputStream0.mark(0);
      assertEquals(0, pipedInputStream0.available());
      
      int int1 = 0;
      JavaCharStream javaCharStream0 = new JavaCharStream(pipedInputStream0, 0, 0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      char char0 = 'L';
      try { 
        pipedInputStream0.reset();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // mark/reset not supported
         //
         verifyException("java.io.InputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      StringReader stringReader0 = new StringReader("com.soops.CEN4010.JMCA.JParser.JavaCharStream");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader("h+-675");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      assertNotNull(sequenceInputStream0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(sequenceInputStream0, 4185, (-1));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      // Undeclared exception!
      try { 
        javaCharStream0.GetSuffix(4185);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      StringReader stringReader0 = new StringReader("f9CRM\"KfXH5^>/YNTq");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      javaCharStream0.bufpos = 2;
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      javaCharStream0.FillBuff();
      assertEquals(2, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      char[] charArray0 = new char[4];
      charArray0[3] = '#';
      int int0 = stringReader0.read(charArray0);
      assertEquals(4, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '#'}, charArray0);
      assertEquals((-1), int0);
      
      javaCharStream0.prevCharIsCR = true;
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      javaCharStream0.adjustBeginLineColumn(1797, 0);
      assertEquals(2, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1797, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(1797, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(1797, javaCharStream0.getEndLine());
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      int int1 = javaCharStream0.getBeginColumn();
      assertEquals(2, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      assertEquals(1797, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(1797, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(1797, javaCharStream0.getEndLine());
      
      javaCharStream0.backup(3);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(4095, javaCharStream0.bufpos);
      assertEquals(1797, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      char char0 = javaCharStream0.readChar();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals('\u0000', char0);
      assertEquals(1797, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(1797, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(1797, javaCharStream0.getEndLine());
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      StringReader stringReader0 = new StringReader("<-PD?G9");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte)11;
      byteArray0[0] = (byte)11;
      byteArray0[1] = (byte)1;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(2, byteArray0.length);
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)11, (byte)1}, byteArray0);
      assertEquals(2, byteArrayInputStream0.available());
      
      try { 
        JavaCharStream.hexval('_');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Reader reader0 = null;
      JavaCharStream javaCharStream0 = new JavaCharStream((Reader) null);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      javaCharStream0.bufsize = 0;
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      int int0 = 0;
      javaCharStream0.maxNextCharInd = 0;
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      int[] intArray0 = new int[1];
      javaCharStream0.bufcolumn = intArray0;
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      intArray0[0] = (-1);
      javaCharStream0.bufcolumn = intArray0;
      assertEquals((-1), javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      char char0 = 'Z';
      // Undeclared exception!
      try { 
        javaCharStream0.UpdateLineColumn('Z');
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      StringReader stringReader0 = new StringReader("f9CRM\"KfXH5^>/YNTq");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      javaCharStream0.bufpos = 0;
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      javaCharStream0.FillBuff();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      char[] charArray0 = new char[4];
      charArray0[0] = '2';
      charArray0[1] = '2';
      charArray0[2] = '2';
      charArray0[3] = '#';
      int int0 = stringReader0.read(charArray0);
      assertEquals(4, charArray0.length);
      assertArrayEquals(new char[] {'2', '2', '2', '#'}, charArray0);
      assertEquals((-1), int0);
      
      javaCharStream0.UpdateLineColumn('2');
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      
      int int1 = 0;
      javaCharStream0.adjustBeginLineColumn(1797, 0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(1797, javaCharStream0.getEndLine());
      assertEquals(1797, javaCharStream0.getBeginLine());
      assertEquals(1797, javaCharStream0.getLine());
      
      javaCharStream0.ReInit((Reader) stringReader0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(1797, javaCharStream0.getBeginLine());
      
      javaCharStream0.ReInit((Reader) stringReader0, 0, 1797);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(1797, javaCharStream0.getBeginLine());
      
      javaCharStream0.ReInit((Reader) stringReader0, 1797, 4096);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(1797, javaCharStream0.getBeginLine());
      
      javaCharStream0.AdjustBuffSize();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(1797, javaCharStream0.getBeginLine());
      
      // Undeclared exception!
      try { 
        javaCharStream0.getEndLine();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      int int0 = JavaCharStream.hexval('1');
      assertEquals(1, int0);
      
      PipedInputStream pipedInputStream1 = new PipedInputStream();
      assertNotNull(pipedInputStream1);
      assertFalse(pipedInputStream1.equals((Object)pipedInputStream0));
      assertEquals(0, pipedInputStream1.available());
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      int int0 = 63;
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 63, 63);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      javaCharStream0.ReInit((Reader) stringReader0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      javaCharStream0.ReInit((Reader) stringReader0, 1, (-1840));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      javaCharStream0.ReInit((Reader) stringReader0, 184, 89);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      javaCharStream0.AdjustBuffSize();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      // Undeclared exception!
      try { 
        javaCharStream0.getEndLine();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      StringReader stringReader0 = new StringReader("7sPm'l>B zx9");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-128), (-128), 1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      File file0 = MockFile.createTempFile("7sPm'l>B zx9", "7sPm'l>B zx9");
      assertNotNull(file0);
      assertEquals("/tmp/7sPm'l>B zx907sPm'l>B zx9", file0.toString());
      assertTrue(file0.canWrite());
      assertTrue(file0.canExecute());
      assertTrue(file0.isFile());
      assertTrue(file0.canRead());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("7sPm'l>B zx907sPm'l>B zx9", file0.getName());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertFalse(file0.isDirectory());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      assertNotNull(mockFileInputStream0);
      
      javaCharStream0.ReInit((InputStream) mockFileInputStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals("/tmp/7sPm'l>B zx907sPm'l>B zx9", file0.toString());
      assertTrue(file0.canWrite());
      assertTrue(file0.canExecute());
      assertTrue(file0.isFile());
      assertTrue(file0.canRead());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("7sPm'l>B zx907sPm'l>B zx9", file0.getName());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertFalse(file0.isDirectory());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertEquals(0, mockFileInputStream0.available());
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      StringReader stringReader0 = new StringReader("f9CRM\"KfXH5^>/YNTq");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      javaCharStream0.bufpos = 0;
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      javaCharStream0.FillBuff();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      StringReader stringReader1 = new StringReader("f9CRM\"KfXH5^>/YNTq");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      javaCharStream0.ReInit((Reader) stringReader1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(stringReader1, stringReader0);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      char char0 = javaCharStream0.readChar();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertNotSame(stringReader0, stringReader1);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertEquals('f', char0);
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      
      String string0 = javaCharStream0.GetImage();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertNotNull(string0);
      assertNotSame(stringReader0, stringReader1);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertEquals("f", string0);
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      
      Reader reader0 = null;
      BufferedInputStream bufferedInputStream0 = null;
      try {
        bufferedInputStream0 = new BufferedInputStream((InputStream) null, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Buffer size <= 0
         //
         verifyException("java.io.BufferedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      StringReader stringReader0 = new StringReader(">s=uLo 0\"{NxrfM#Q");
      assertNotNull(stringReader0);
      
      stringReader0.reset();
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-1412), 0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      char[] charArray0 = new char[5];
      charArray0[2] = '';
      charArray0[3] = '\u0000';
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)92;
      byteArray0[1] = (byte)1;
      byteArray0[3] = (byte)16;
      byteArray0[4] = (byte)100;
      byteArray0[5] = (byte)86;
      byteArray0[6] = (byte) (-50);
      byteArray0[7] = (byte)123;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(8, byteArray0.length);
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)92, (byte)1, (byte)0, (byte)16, (byte)100, (byte)86, (byte) (-50), (byte)123}, byteArray0);
      assertEquals(8, byteArrayInputStream0.available());
      
      JavaCharStream javaCharStream1 = new JavaCharStream(byteArrayInputStream0, (-1412), (byte)92);
      assertEquals(8, byteArray0.length);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertNotNull(javaCharStream1);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertArrayEquals(new byte[] {(byte)92, (byte)1, (byte)0, (byte)16, (byte)100, (byte)86, (byte) (-50), (byte)123}, byteArray0);
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      
      javaCharStream1.backup((-3136));
      assertEquals(8, byteArray0.length);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(3135, javaCharStream1.bufpos);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertArrayEquals(new byte[] {(byte)92, (byte)1, (byte)0, (byte)16, (byte)100, (byte)86, (byte) (-50), (byte)123}, byteArray0);
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream1.getEndLine());
      assertEquals(0, javaCharStream1.getColumn());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getLine());
      assertEquals(0, javaCharStream1.getEndColumn());
      
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0);
      assertEquals(8, byteArray0.length);
      assertNotNull(pushbackInputStream0);
      assertArrayEquals(new byte[] {(byte)92, (byte)1, (byte)0, (byte)16, (byte)100, (byte)86, (byte) (-50), (byte)123}, byteArray0);
      assertEquals(8, byteArrayInputStream0.available());
      
      int int0 = javaCharStream1.getEndLine();
      assertEquals(8, byteArray0.length);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(3135, javaCharStream1.bufpos);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertArrayEquals(new byte[] {(byte)92, (byte)1, (byte)0, (byte)16, (byte)100, (byte)86, (byte) (-50), (byte)123}, byteArray0);
      assertEquals(0, int0);
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream1.getEndLine());
      assertEquals(0, javaCharStream1.getColumn());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getLine());
      assertEquals(0, javaCharStream1.getEndColumn());
      
      char char0 = javaCharStream1.BeginToken();
      assertEquals(8, byteArray0.length);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream1.bufpos);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertArrayEquals(new byte[] {(byte)92, (byte)1, (byte)0, (byte)16, (byte)100, (byte)86, (byte) (-50), (byte)123}, byteArray0);
      assertEquals('\\', char0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals((-1412), javaCharStream1.getBeginLine());
      assertEquals((-1412), javaCharStream1.getEndLine());
      assertEquals(92, javaCharStream1.getBeginColumn());
      assertEquals((-1412), javaCharStream1.getLine());
      assertEquals(92, javaCharStream1.getColumn());
      assertEquals(92, javaCharStream1.getEndColumn());
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      char char0 = 'K';
      try { 
        JavaCharStream.hexval('K');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      StringReader stringReader0 = new StringReader("f9CRM\"KfXH5^>/YNTq");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      javaCharStream0.bufpos = 2;
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getColumn());
      
      char[] charArray0 = new char[4];
      int int0 = stringReader0.read(charArray0);
      assertEquals(4, charArray0.length);
      assertArrayEquals(new char[] {'f', '9', 'C', 'R'}, charArray0);
      assertEquals(4, int0);
      
      javaCharStream0.prevCharIsCR = true;
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getColumn());
      
      int int1 = javaCharStream0.getBeginColumn();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, javaCharStream0.bufpos);
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getColumn());
      
      char char0 = javaCharStream0.BeginToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals('M', char0);
      assertEquals(2, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(2, javaCharStream0.getEndLine());
      assertEquals(2, javaCharStream0.getBeginLine());
      
      char char1 = javaCharStream0.readChar();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(char1 == char0);
      assertEquals('\"', char1);
      assertEquals(2, javaCharStream0.getLine());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(2, javaCharStream0.getEndLine());
      assertEquals(2, javaCharStream0.getBeginLine());
      
      javaCharStream0.UpdateLineColumn('M');
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(2, javaCharStream0.getLine());
      assertEquals(3, javaCharStream0.getColumn());
      assertEquals(3, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(2, javaCharStream0.getEndLine());
      assertEquals(2, javaCharStream0.getBeginLine());
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      boolean boolean0 = true;
      StringReader stringReader1 = new StringReader(" column ");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader1);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      char char0 = javaCharStream0.readChar();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotSame(stringReader1, stringReader0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertEquals(' ', char0);
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndLine());
      
      String string0 = javaCharStream0.GetImage();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(string0);
      assertNotSame(stringReader1, stringReader0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertEquals(" ", string0);
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndLine());
      
      javaCharStream0.ReInit((Reader) null);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotSame(stringReader1, stringReader0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      
      // Undeclared exception!
      try { 
        javaCharStream0.ReadByte();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      int int0 = JavaCharStream.hexval('C');
      assertEquals(12, int0);
      
      char char0 = '@';
      try { 
        JavaCharStream.hexval('@');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      StringReader stringReader0 = new StringReader(">s=uLo 0\"{NxrfM#Q");
      assertNotNull(stringReader0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'x';
      charArray0[1] = 'q';
      charArray0[2] = '';
      charArray0[3] = 'X';
      charArray0[4] = '0';
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-87);
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte) (-114);
      byteArray0[3] = (byte) (-114);
      byteArray0[4] = (byte)91;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte) (-53);
      byteArray0[7] = (byte)89;
      byteArray0[8] = (byte)78;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(9, byteArray0.length);
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte) (-87), (byte)1, (byte) (-114), (byte) (-114), (byte)91, (byte)0, (byte) (-53), (byte)89, (byte)78}, byteArray0);
      assertEquals(9, byteArrayInputStream0.available());
      
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, (byte) (-114), (-2265));
      assertEquals(9, byteArray0.length);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      assertArrayEquals(new byte[] {(byte) (-87), (byte)1, (byte) (-114), (byte) (-114), (byte)91, (byte)0, (byte) (-53), (byte)89, (byte)78}, byteArray0);
      assertEquals(9, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      javaCharStream0.backup(10);
      assertEquals(9, byteArray0.length);
      assertEquals(4085, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertArrayEquals(new byte[] {(byte) (-87), (byte)1, (byte) (-114), (byte) (-114), (byte)91, (byte)0, (byte) (-53), (byte)89, (byte)78}, byteArray0);
      assertEquals(9, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      char char0 = javaCharStream0.readChar();
      assertEquals(9, byteArray0.length);
      assertEquals(4086, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertArrayEquals(new byte[] {(byte) (-87), (byte)1, (byte) (-114), (byte) (-114), (byte)91, (byte)0, (byte) (-53), (byte)89, (byte)78}, byteArray0);
      assertEquals('\u0000', char0);
      assertEquals(9, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      int int0 = javaCharStream0.getLine();
      assertEquals(9, byteArray0.length);
      assertEquals(4086, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertArrayEquals(new byte[] {(byte) (-87), (byte)1, (byte) (-114), (byte) (-114), (byte)91, (byte)0, (byte) (-53), (byte)89, (byte)78}, byteArray0);
      assertEquals(0, int0);
      assertEquals(9, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      javaCharStream0.FillBuff();
      assertEquals(9, byteArray0.length);
      assertEquals(4086, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertArrayEquals(new byte[] {(byte) (-87), (byte)1, (byte) (-114), (byte) (-114), (byte)91, (byte)0, (byte) (-53), (byte)89, (byte)78}, byteArray0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      JavaCharStream javaCharStream0 = null;
      try {
        javaCharStream0 = new JavaCharStream((InputStream) null, 96, (-1534), 609);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Reader", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      StringReader stringReader0 = new StringReader("f9CRM\"KfXH5^>/YNTq");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      javaCharStream0.bufpos = 0;
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getLine());
      
      javaCharStream0.FillBuff();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getLine());
      
      char[] charArray0 = new char[4];
      charArray0[0] = '2';
      charArray0[1] = '2';
      charArray0[2] = '2';
      charArray0[3] = '#';
      int int0 = stringReader0.read(charArray0);
      assertEquals(4, charArray0.length);
      assertArrayEquals(new char[] {'2', '2', '2', '#'}, charArray0);
      assertEquals((-1), int0);
      
      javaCharStream0.UpdateLineColumn('2');
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      assertNotNull(sequenceInputStream0);
      
      int int1 = 61;
      javaCharStream0.ReInit((InputStream) sequenceInputStream0, 0, 61);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      
      boolean boolean0 = stringReader0.markSupported();
      assertTrue(boolean0);
      
      javaCharStream0.adjustBeginLineColumn(851, 11);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(853, javaCharStream0.getBeginLine());
      assertEquals(11, javaCharStream0.getBeginColumn());
      
      JavaCharStream javaCharStream1 = new JavaCharStream(sequenceInputStream0);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream1);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      
      try { 
        javaCharStream0.BeginToken();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      StringReader stringReader0 = new StringReader("f9CRM\"KfXH5^>/YNTq");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      javaCharStream0.bufpos = 2;
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      char[] charArray0 = new char[4];
      int int0 = stringReader0.read(charArray0);
      assertEquals(4, charArray0.length);
      assertArrayEquals(new char[] {'f', '9', 'C', 'R'}, charArray0);
      assertEquals(4, int0);
      
      javaCharStream0.prevCharIsCR = false;
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      int int1 = javaCharStream0.getBeginColumn();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, javaCharStream0.bufpos);
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      javaCharStream0.backup(3);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(4095, javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      char char0 = javaCharStream0.BeginToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals('\u0000', char0);
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      char char1 = javaCharStream0.readChar();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertTrue(char1 == char0);
      assertEquals('\u0000', char1);
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      javaCharStream0.UpdateLineColumn('\u0000');
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      int int0 = 117;
      JavaCharStream javaCharStream0 = null;
      try {
        javaCharStream0 = new JavaCharStream((InputStream) null, 117, 117);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Reader", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      try { 
        JavaCharStream.hexval(';');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      String string0 = javaCharStream0.GetImage();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(string0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      javaCharStream0.adjustBeginLineColumn((-1415), 0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals((-1414), javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      try { 
        JavaCharStream.hexval(']');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      StringReader stringReader0 = new StringReader(">s=uLo 0\"{NxrfM#{Q");
      assertNotNull(stringReader0);
      
      char[] charArray0 = new char[5];
      charArray0[2] = '';
      charArray0[3] = '\u0000';
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)92;
      byteArray0[1] = (byte)1;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(8, byteArray0.length);
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)92, (byte)1, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(8, byteArrayInputStream0.available());
      
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, (byte) (-114), 95);
      assertEquals(8, byteArray0.length);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      assertArrayEquals(new byte[] {(byte)92, (byte)1, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      JavaCharStream javaCharStream1 = new JavaCharStream(byteArrayInputStream0);
      assertEquals(8, byteArray0.length);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream1);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertArrayEquals(new byte[] {(byte)92, (byte)1, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      
      javaCharStream1.ReInit((Reader) stringReader0);
      assertEquals(8, byteArray0.length);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertArrayEquals(new byte[] {(byte)92, (byte)1, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      
      char char0 = javaCharStream1.BeginToken();
      assertEquals(8, byteArray0.length);
      assertEquals(0, javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertArrayEquals(new byte[] {(byte)92, (byte)1, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals('>', char0);
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(1, javaCharStream1.getBeginColumn());
      assertEquals(1, javaCharStream1.getBeginLine());
      assertEquals(1, javaCharStream1.getEndColumn());
      assertEquals(1, javaCharStream1.getLine());
      assertEquals(1, javaCharStream1.getEndLine());
      assertEquals(1, javaCharStream1.getColumn());
      
      javaCharStream1.backup(8);
      assertEquals(8, byteArray0.length);
      assertEquals(4088, javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertArrayEquals(new byte[] {(byte)92, (byte)1, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(1, javaCharStream1.getBeginColumn());
      assertEquals(1, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getLine());
      assertEquals(0, javaCharStream1.getEndColumn());
      assertEquals(0, javaCharStream1.getEndLine());
      assertEquals(0, javaCharStream1.getColumn());
      
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0);
      assertEquals(8, byteArray0.length);
      assertNotNull(pushbackInputStream0);
      assertArrayEquals(new byte[] {(byte)92, (byte)1, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(8, byteArrayInputStream0.available());
      
      char char1 = javaCharStream1.readChar();
      assertEquals(8, byteArray0.length);
      assertEquals(4089, javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(char1 == char0);
      assertArrayEquals(new byte[] {(byte)92, (byte)1, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals('\u0000', char1);
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(1, javaCharStream1.getBeginColumn());
      assertEquals(1, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getLine());
      assertEquals(0, javaCharStream1.getEndColumn());
      assertEquals(0, javaCharStream1.getEndLine());
      assertEquals(0, javaCharStream1.getColumn());
      
      String string0 = javaCharStream0.GetImage();
      assertEquals(8, byteArray0.length);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(string0);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertArrayEquals(new byte[] {(byte)92, (byte)1, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      String string1 = javaCharStream1.GetImage();
      assertEquals(8, byteArray0.length);
      assertEquals(4089, javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(string1);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertArrayEquals(new byte[] {(byte)92, (byte)1, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(1, javaCharStream1.getBeginColumn());
      assertEquals(1, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getLine());
      assertEquals(0, javaCharStream1.getEndColumn());
      assertEquals(0, javaCharStream1.getEndLine());
      assertEquals(0, javaCharStream1.getColumn());
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      StringReader stringReader0 = new StringReader(">s=uLo 0\"{NxrfM#Q");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-1412), 0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      char[] charArray0 = new char[5];
      charArray0[2] = '';
      boolean boolean0 = javaCharStream0.prevCharIsLF;
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)92;
      byteArray0[1] = (byte)92;
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte)92;
      byteArray0[4] = (byte)92;
      byteArray0[5] = (byte)1;
      byteArray0[6] = (byte)87;
      byteArray0[7] = (byte)92;
      byteArray0[8] = (byte)92;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(9, byteArray0.length);
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)92, (byte)92, (byte)1, (byte)92, (byte)92, (byte)1, (byte)87, (byte)92, (byte)92}, byteArray0);
      assertEquals(9, byteArrayInputStream0.available());
      
      JavaCharStream javaCharStream1 = new JavaCharStream(byteArrayInputStream0, 1829, 94);
      assertEquals(9, byteArray0.length);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertNotNull(javaCharStream1);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertArrayEquals(new byte[] {(byte)92, (byte)92, (byte)1, (byte)92, (byte)92, (byte)1, (byte)87, (byte)92, (byte)92}, byteArray0);
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(9, byteArrayInputStream0.available());
      
      javaCharStream1.backup((-3694));
      assertEquals(9, byteArray0.length);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(3693, javaCharStream1.bufpos);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertArrayEquals(new byte[] {(byte)92, (byte)92, (byte)1, (byte)92, (byte)92, (byte)1, (byte)87, (byte)92, (byte)92}, byteArray0);
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getEndLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getEndColumn());
      assertEquals(0, javaCharStream1.getLine());
      assertEquals(0, javaCharStream1.getColumn());
      assertEquals(9, byteArrayInputStream0.available());
      
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0);
      assertEquals(9, byteArray0.length);
      assertNotNull(pushbackInputStream0);
      assertArrayEquals(new byte[] {(byte)92, (byte)92, (byte)1, (byte)92, (byte)92, (byte)1, (byte)87, (byte)92, (byte)92}, byteArray0);
      assertEquals(9, byteArrayInputStream0.available());
      
      String string0 = javaCharStream0.GetImage();
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(string0);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      javaCharStream0.backup((byte)92);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(4003, javaCharStream0.bufpos);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getColumn());
      
      char char0 = javaCharStream1.readChar();
      assertEquals(9, byteArray0.length);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(3694, javaCharStream1.bufpos);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertArrayEquals(new byte[] {(byte)92, (byte)92, (byte)1, (byte)92, (byte)92, (byte)1, (byte)87, (byte)92, (byte)92}, byteArray0);
      assertEquals('\\', char0);
      assertEquals(1829, javaCharStream1.getLine());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(1829, javaCharStream1.getEndLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(94, javaCharStream1.getEndColumn());
      assertEquals(94, javaCharStream1.getColumn());
      assertEquals(0, byteArrayInputStream0.available());
      
      char[] charArray1 = javaCharStream1.GetSuffix((byte)92);
      assertEquals(9, byteArray0.length);
      assertEquals(92, charArray1.length);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(3694, javaCharStream1.bufpos);
      assertNotNull(charArray1);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertNotSame(charArray1, charArray0);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new byte[] {(byte)92, (byte)92, (byte)1, (byte)92, (byte)92, (byte)1, (byte)87, (byte)92, (byte)92}, byteArray0);
      assertEquals(1829, javaCharStream1.getLine());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(1829, javaCharStream1.getEndLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(94, javaCharStream1.getEndColumn());
      assertEquals(94, javaCharStream1.getColumn());
      assertEquals(0, byteArrayInputStream0.available());
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      int int0 = JavaCharStream.hexval('7');
      assertEquals(7, int0);
      
      int int1 = JavaCharStream.hexval('7');
      assertTrue(int1 == int0);
      assertEquals(7, int1);
      
      try { 
        JavaCharStream.hexval(')');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      StringReader stringReader0 = new StringReader("f9CRM\"KfXH5^>/YNTq");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      javaCharStream0.bufpos = 0;
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      javaCharStream0.FillBuff();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'y';
      charArray0[1] = 'g';
      charArray0[2] = 'y';
      charArray0[3] = 'M';
      int int0 = stringReader0.read(charArray0);
      assertEquals(4, charArray0.length);
      assertArrayEquals(new char[] {'y', 'g', 'y', 'M'}, charArray0);
      assertEquals((-1), int0);
      
      javaCharStream0.adjustBeginLineColumn(0, (-1));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals((-1), javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals((-1), javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      char char0 = javaCharStream0.BeginToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals('f', char0);
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream1);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      
      PipedInputStream pipedInputStream0 = new PipedInputStream(6);
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      JavaCharStream javaCharStream2 = new JavaCharStream(pipedInputStream0, (byte)92, (-1), 4080);
      assertEquals((-1), javaCharStream2.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream2);
      assertFalse(javaCharStream2.equals((Object)javaCharStream0));
      assertFalse(javaCharStream2.equals((Object)javaCharStream1));
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, javaCharStream2.getBeginColumn());
      assertEquals(0, javaCharStream2.getBeginLine());
      
      char[] charArray1 = javaCharStream0.GetSuffix(4081);
      assertEquals(4081, charArray1.length);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertNotNull(charArray1);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(javaCharStream0, javaCharStream2);
      assertNotSame(charArray1, charArray0);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(javaCharStream0.equals((Object)javaCharStream2));
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      StringReader stringReader0 = new StringReader(">s=uLo 0\"{NxrfM#Q");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-1412), 0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      char[] charArray0 = new char[5];
      charArray0[2] = '';
      charArray0[3] = '\u0000';
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)92;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)64;
      byteArray0[3] = (byte)16;
      byteArray0[4] = (byte)100;
      byteArray0[5] = (byte)86;
      byteArray0[6] = (byte) (-50);
      byteArray0[7] = (byte)123;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(8, byteArray0.length);
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)92, (byte)1, (byte)64, (byte)16, (byte)100, (byte)86, (byte) (-50), (byte)123}, byteArray0);
      assertEquals(8, byteArrayInputStream0.available());
      
      JavaCharStream javaCharStream1 = new JavaCharStream(byteArrayInputStream0, (byte)64, (-606));
      assertEquals(8, byteArray0.length);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream1);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertArrayEquals(new byte[] {(byte)92, (byte)1, (byte)64, (byte)16, (byte)100, (byte)86, (byte) (-50), (byte)123}, byteArray0);
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      
      javaCharStream0.backup(10);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(4085, javaCharStream0.bufpos);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getLine());
      
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0);
      assertEquals(8, byteArray0.length);
      assertNotNull(pushbackInputStream0);
      assertArrayEquals(new byte[] {(byte)92, (byte)1, (byte)64, (byte)16, (byte)100, (byte)86, (byte) (-50), (byte)123}, byteArray0);
      assertEquals(8, byteArrayInputStream0.available());
      
      int int0 = javaCharStream0.getEndLine();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(4085, javaCharStream0.bufpos);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertEquals(0, int0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getLine());
      
      char char0 = javaCharStream0.BeginToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(4086, javaCharStream0.bufpos);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertEquals('\u0000', char0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getLine());
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      StringReader stringReader0 = new StringReader("<-PD?G9");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      int int0 = JavaCharStream.hexval('F');
      assertEquals(15, int0);
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      assertNotNull(pipedOutputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      PipedInputStream pipedInputStream1 = null;
      try {
        pipedInputStream1 = new PipedInputStream(pipedOutputStream0, (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pipe Size <= 0
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      StringReader stringReader0 = new StringReader("f9CRM\"KfXH5^>/YNTq");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      javaCharStream0.bufpos = 2;
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getLine());
      
      int int0 = stringReader0.read();
      assertEquals(102, int0);
      
      javaCharStream0.FillBuff();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getLine());
      
      char[] charArray0 = new char[4];
      charArray0[3] = '#';
      int int1 = stringReader0.read(charArray0);
      assertEquals(4, charArray0.length);
      assertFalse(int1 == int0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '#'}, charArray0);
      assertEquals((-1), int1);
      
      javaCharStream0.prevCharIsCR = true;
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getLine());
      
      javaCharStream0.adjustBeginLineColumn(1797, 0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(1797, javaCharStream0.getBeginLine());
      assertEquals(1797, javaCharStream0.getLine());
      assertEquals(1797, javaCharStream0.getEndLine());
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      char char0 = javaCharStream0.ReadByte();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, javaCharStream0.bufpos);
      assertEquals('9', char0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(1797, javaCharStream0.getBeginLine());
      assertEquals(1797, javaCharStream0.getLine());
      assertEquals(1797, javaCharStream0.getEndLine());
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      StringReader stringReader0 = new StringReader("<-PD?G9");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      try { 
        JavaCharStream.hexval('Q');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)87;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)87;
      byteArray0[3] = (byte) (-100);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(4, byteArray0.length);
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)87, (byte)1, (byte)87, (byte) (-100)}, byteArray0);
      assertEquals(4, byteArrayInputStream0.available());
      
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, (byte)1, 0);
      assertEquals(4, byteArray0.length);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      assertArrayEquals(new byte[] {(byte)87, (byte)1, (byte)87, (byte) (-100)}, byteArray0);
      assertEquals(4, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      javaCharStream0.backup((byte)87);
      assertEquals(4, byteArray0.length);
      assertEquals(4008, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertArrayEquals(new byte[] {(byte)87, (byte)1, (byte)87, (byte) (-100)}, byteArray0);
      assertEquals(4, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getEndLine());
      
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0);
      assertEquals(4, byteArray0.length);
      assertNotNull(pushbackInputStream0);
      assertArrayEquals(new byte[] {(byte)87, (byte)1, (byte)87, (byte) (-100)}, byteArray0);
      assertEquals(4, byteArrayInputStream0.available());
      
      javaCharStream0.AdjustBuffSize();
      assertEquals(4, byteArray0.length);
      assertEquals(4008, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertArrayEquals(new byte[] {(byte)87, (byte)1, (byte)87, (byte) (-100)}, byteArray0);
      assertEquals(4, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getEndLine());
      
      JavaCharStream javaCharStream1 = new JavaCharStream((Reader) null, 102, 102, 0);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream1);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      
      // Undeclared exception!
      try { 
        javaCharStream1.getBeginLine();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      boolean boolean0 = stringReader0.markSupported();
      assertTrue(boolean0);
      
      int int0 = stringReader0.read();
      assertEquals((-1), int0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      stringReader0.reset();
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      long long0 = stringReader0.skip(0);
      assertEquals(0L, long0);
      
      boolean boolean2 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 0, 0, 707);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      boolean boolean3 = stringReader0.markSupported();
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3);
      
      javaCharStream0.line = 17;
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      stringReader0.mark(707);
      int int1 = JavaCharStream.hexval('6');
      assertFalse(int1 == int0);
      assertEquals(6, int1);
      
      // Undeclared exception!
      try { 
        javaCharStream0.getEndColumn();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      int int0 = JavaCharStream.hexval('A');
      assertEquals(10, int0);
      
      int int1 = JavaCharStream.hexval('A');
      assertTrue(int1 == int0);
      assertEquals(10, int1);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      try { 
        JavaCharStream.hexval('$');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      StringReader stringReader0 = new StringReader("f9RM\"KfXH5^>YNTq");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      javaCharStream0.bufpos = 0;
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      javaCharStream0.FillBuff();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      char[] charArray0 = new char[4];
      charArray0[3] = '#';
      int int0 = stringReader0.read(charArray0);
      assertEquals(4, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '#'}, charArray0);
      assertEquals((-1), int0);
      
      int int1 = stringReader0.read(charArray0);
      assertEquals(4, charArray0.length);
      assertTrue(int1 == int0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '#'}, charArray0);
      assertEquals((-1), int1);
      
      javaCharStream0.adjustBeginLineColumn((-2115), (-1));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals((-2115), javaCharStream0.getEndLine());
      assertEquals((-1), javaCharStream0.getColumn());
      assertEquals((-2115), javaCharStream0.getLine());
      assertEquals((-1), javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.getEndColumn());
      assertEquals((-2115), javaCharStream0.getBeginLine());
      
      char char0 = javaCharStream0.BeginToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals('f', char0);
      assertEquals((-2115), javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals((-2115), javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-2115), javaCharStream0.getBeginLine());
      
      StringReader stringReader1 = new StringReader("f9RM\"KfXH5^>YNTq");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertNotNull(javaCharStream1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      
      PipedInputStream pipedInputStream0 = new PipedInputStream(5);
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      JavaCharStream javaCharStream2 = new JavaCharStream(pipedInputStream0, (-1), (-1), 2096);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream2.bufpos);
      assertNotNull(javaCharStream2);
      assertFalse(javaCharStream2.equals((Object)javaCharStream0));
      assertFalse(javaCharStream2.equals((Object)javaCharStream1));
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, javaCharStream2.getBeginColumn());
      assertEquals(0, javaCharStream2.getBeginLine());
      
      char[] charArray1 = javaCharStream1.GetSuffix(0);
      assertEquals(0, charArray1.length);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertNotNull(charArray1);
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(javaCharStream1, javaCharStream2);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertNotSame(charArray1, charArray0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream2));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {}, charArray1);
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      
      char char1 = javaCharStream0.readChar();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(javaCharStream0, javaCharStream2);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(javaCharStream0.equals((Object)javaCharStream2));
      assertFalse(char1 == char0);
      assertEquals('9', char1);
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals((-2115), javaCharStream0.getEndLine());
      assertEquals((-2115), javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals((-2115), javaCharStream0.getBeginLine());
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      StringReader stringReader0 = new StringReader("f9CRM\"KfXH5^>/YNTq");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      int int0 = JavaCharStream.hexval('e');
      assertEquals(14, int0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      StringReader stringReader0 = new StringReader("btM$e:5W;\"|$(`c<z");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      char char0 = javaCharStream0.readChar();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals('b', char0);
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getColumn());
      
      String string0 = javaCharStream0.GetImage();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertNotNull(string0);
      assertEquals("b", string0);
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getColumn());
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      javaCharStream0.ReInit((InputStream) pipedInputStream0, (-922), (-922), (-922));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(0, pipedInputStream0.available());
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      String string0 = ">s=uLo 0\"{NxrfM#Q";
      StringReader stringReader0 = new StringReader(">s=uLo 0\"{NxrfM#Q");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      try { 
        JavaCharStream.hexval('G');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      int int0 = stringReader0.read();
      assertEquals((-1), int0);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 0, 0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      javaCharStream0.Done();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      long long0 = stringReader0.skip((-553L));
      assertEquals(0L, long0);
      
      // Undeclared exception!
      try { 
        javaCharStream0.UpdateLineColumn('_');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      StringReader stringReader0 = new StringReader("com.soops.CEN4010.JMCA.JParser.JavaCharStream");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (byte)81, (byte)81, (byte)81);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      javaCharStream0.nextCharInd = (-870);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      boolean boolean0 = javaCharStream0.prevCharIsLF;
      assertFalse(boolean0);
      
      StringReader stringReader1 = new StringReader("com.soops.CEN4010.JMCA.JParser.JavaCharStream");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      // Undeclared exception!
      try { 
        javaCharStream0.BeginToken();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -869
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      StringReader stringReader0 = new StringReader("<-PD?G9");
      assertNotNull(stringReader0);
      
      try { 
        JavaCharStream.hexval('I');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      StringReader stringReader0 = new StringReader("dN(OR~");
      assertNotNull(stringReader0);
      
      int int0 = 1634;
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 1634, 1634, 1634);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      int int1 = stringReader0.read();
      assertFalse(int1 == int0);
      assertEquals(100, int1);
      
      javaCharStream0.backup(1427);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(206, javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getEndColumn());
      
      javaCharStream0.backup((-1908));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2114, javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      // Undeclared exception!
      try { 
        javaCharStream0.UpdateLineColumn('[');
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2114
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      try { 
        JavaCharStream.hexval('\\');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 873, 873, 873);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      String string0 = javaCharStream0.GetImage();
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(string0);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-99);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) (-99), 0);
      assertEquals(1, byteArray0.length);
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte) (-99)}, byteArray0);
      assertEquals(0, byteArrayInputStream0.available());
      
      int int0 = 0;
      PushbackInputStream pushbackInputStream0 = null;
      try {
        pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // size <= 0
         //
         verifyException("java.io.PushbackInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      try { 
        JavaCharStream.hexval('G');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      StringReader stringReader0 = new StringReader("<-PD?G9");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      javaCharStream0.FillBuff();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream1);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      
      int int0 = JavaCharStream.hexval('5');
      assertEquals(5, int0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      StringReader stringReader0 = new StringReader("f9CRM\"KfXH5^>/YNTq");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      javaCharStream0.bufpos = 2;
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      char[] charArray0 = new char[4];
      int int0 = stringReader0.read(charArray0);
      assertEquals(4, charArray0.length);
      assertArrayEquals(new char[] {'f', '9', 'C', 'R'}, charArray0);
      assertEquals(4, int0);
      
      javaCharStream0.backup(4);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(4094, javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      char char0 = javaCharStream0.BeginToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(4095, javaCharStream0.bufpos);
      assertEquals('\u0000', char0);
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      char char1 = javaCharStream0.readChar();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertTrue(char1 == char0);
      assertEquals('\u0000', char1);
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      StringReader stringReader0 = new StringReader(")S@*4W1jh0Q,R/Tl&rk");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      javaCharStream0.backup((-1));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      char char0 = javaCharStream0.ReadByte();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(')', char0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      char char1 = javaCharStream0.readChar();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(char1 == char0);
      assertEquals('S', char1);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      StringReader stringReader0 = new StringReader("f9CRM\"KfXH5^>/YNTq");
      assertNotNull(stringReader0);
      
      try { 
        JavaCharStream.hexval(';');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      int int0 = JavaCharStream.hexval('3');
      assertEquals(3, int0);
      
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(0, byteArray0.length);
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArrayInputStream0.available());
      
      StringReader stringReader0 = new StringReader(":ftFb");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      try { 
        JavaCharStream.hexval('H');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      StringReader stringReader0 = new StringReader(">s=uLo 0\"{NxrfM#Q");
      assertNotNull(stringReader0);
      
      long long0 = stringReader0.skip((-1412));
      assertEquals(0L, long0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-1412), (-1412));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      javaCharStream0.Done();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      // Undeclared exception!
      try { 
        javaCharStream0.ReInit((Reader) stringReader0, 1896, 1, (-2065));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      int int0 = JavaCharStream.hexval('1');
      assertEquals(1, int0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      JavaCharStream javaCharStream0 = new JavaCharStream(pipedInputStream0, 1, '1');
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      StringReader stringReader0 = new StringReader("<p_D?79");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      try { 
        JavaCharStream.hexval('Y');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      stringReader0.mark(74);
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      int int0 = JavaCharStream.hexval('4');
      assertEquals(4, int0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      assertNotNull(pipedOutputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      PipedOutputStream pipedOutputStream1 = null;
      try {
        pipedOutputStream1 = new PipedOutputStream(pipedInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Already connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      StringReader stringReader0 = new StringReader("f9CRM\"KfXH5^>/YNTq");
      assertNotNull(stringReader0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-44);
      byteArray0[1] = (byte) (-44);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(2, byteArray0.length);
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte) (-44), (byte) (-44)}, byteArray0);
      assertEquals(2, byteArrayInputStream0.available());
      
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, (byte) (-44), 1459);
      assertEquals(2, byteArray0.length);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      assertArrayEquals(new byte[] {(byte) (-44), (byte) (-44)}, byteArray0);
      assertEquals(2, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      javaCharStream0.backup(126);
      assertEquals(2, byteArray0.length);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(3969, javaCharStream0.bufpos);
      assertArrayEquals(new byte[] {(byte) (-44), (byte) (-44)}, byteArray0);
      assertEquals(2, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0);
      assertEquals(2, byteArray0.length);
      assertNotNull(pushbackInputStream0);
      assertArrayEquals(new byte[] {(byte) (-44), (byte) (-44)}, byteArray0);
      assertEquals(2, byteArrayInputStream0.available());
      
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertNotNull(javaCharStream1);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      
      String string0 = javaCharStream1.GetImage();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertNotNull(string0);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      
      javaCharStream1.backup(915);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(3180, javaCharStream1.bufpos);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(0, javaCharStream1.getEndColumn());
      assertEquals(0, javaCharStream1.getLine());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getColumn());
      assertEquals(0, javaCharStream1.getEndLine());
      
      char char0 = javaCharStream1.readChar();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(3181, javaCharStream1.bufpos);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals('\u0000', char0);
      assertEquals(0, javaCharStream1.getEndColumn());
      assertEquals(0, javaCharStream1.getLine());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getColumn());
      assertEquals(0, javaCharStream1.getEndLine());
      
      javaCharStream1.ReInit((InputStream) byteArrayInputStream0, 126, (int) (byte) (-44));
      assertEquals(2, byteArray0.length);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertArrayEquals(new byte[] {(byte) (-44), (byte) (-44)}, byteArray0);
      assertEquals(2, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      
      StringReader stringReader1 = new StringReader(";631i5");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      StringReader stringReader2 = new StringReader("`");
      assertNotNull(stringReader2);
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertFalse(stringReader2.equals((Object)stringReader0));
      
      javaCharStream0.ReInit((Reader) stringReader2);
      assertEquals(2, byteArray0.length);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(stringReader2, stringReader1);
      assertNotSame(stringReader2, stringReader0);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertArrayEquals(new byte[] {(byte) (-44), (byte) (-44)}, byteArray0);
      assertEquals(2, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      int int0 = javaCharStream1.getBeginLine();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(stringReader0, stringReader2);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(stringReader0.equals((Object)stringReader2));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(0, int0);
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      
      char char1 = javaCharStream0.BeginToken();
      assertEquals(2, byteArray0.length);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertFalse(char1 == char0);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertArrayEquals(new byte[] {(byte) (-44), (byte) (-44)}, byteArray0);
      assertEquals('`', char1);
      assertEquals(2, byteArrayInputStream0.available());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      
      int int1 = JavaCharStream.hexval('d');
      assertFalse(int1 == int0);
      assertEquals(13, int1);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      StringReader stringReader0 = new StringReader(">s=uLo 0\"{NxrfM#Q");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-1412), (-1412));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'v';
      charArray0[1] = 'q';
      charArray0[2] = '';
      charArray0[3] = 'X';
      charArray0[4] = '0';
      javaCharStream0.buffer = charArray0;
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      char char0 = javaCharStream0.BeginToken();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals('>', char0);
      assertEquals((-1412), javaCharStream0.getBeginColumn());
      assertEquals((-1412), javaCharStream0.getEndLine());
      assertEquals((-1412), javaCharStream0.getColumn());
      assertEquals((-1412), javaCharStream0.getLine());
      assertEquals((-1412), javaCharStream0.getBeginLine());
      assertEquals((-1412), javaCharStream0.getEndColumn());
      
      int int0 = javaCharStream0.getEndLine();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1412), int0);
      assertEquals((-1412), javaCharStream0.getBeginColumn());
      assertEquals((-1412), javaCharStream0.getEndLine());
      assertEquals((-1412), javaCharStream0.getColumn());
      assertEquals((-1412), javaCharStream0.getLine());
      assertEquals((-1412), javaCharStream0.getBeginLine());
      assertEquals((-1412), javaCharStream0.getEndColumn());
      
      javaCharStream0.ReInit((Reader) stringReader0, 91, (-1412));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      // Undeclared exception!
      try { 
        javaCharStream0.getColumn();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      javaCharStream0.ReInit((Reader) stringReader0, (-2210), 12);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      String string0 = javaCharStream0.GetImage();
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(string0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      StringReader stringReader0 = new StringReader(">s=uLo 0\"{NxrfM#Q");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-1412), (-1412));
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      boolean boolean0 = javaCharStream0.prevCharIsLF;
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[18];
      byteArray0[1] = (byte)92;
      byteArray0[2] = (byte)9;
      byteArray0[3] = (byte)92;
      byteArray0[9] = (byte)92;
      byteArray0[8] = (byte)92;
      int[] intArray0 = new int[4];
      intArray0[2] = (int) (byte)0;
      intArray0[3] = (int) (byte)92;
      javaCharStream0.bufcolumn = intArray0;
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(18, byteArray0.length);
      assertNotNull(byteArrayInputStream0);
      assertEquals(18, byteArrayInputStream0.available());
      
      JavaCharStream javaCharStream1 = new JavaCharStream(byteArrayInputStream0, 1829, 94);
      assertEquals(18, byteArray0.length);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertNotNull(javaCharStream1);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(18, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      
      javaCharStream1.backup((-3694));
      assertEquals(18, byteArray0.length);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(3693, javaCharStream1.bufpos);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(18, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream1.getEndLine());
      assertEquals(0, javaCharStream1.getLine());
      assertEquals(0, javaCharStream1.getColumn());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getEndColumn());
      
      char char0 = javaCharStream1.readChar();
      assertEquals(18, byteArray0.length);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(3694, javaCharStream1.bufpos);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals('\u0000', char0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(1829, javaCharStream1.getLine());
      assertEquals(94, javaCharStream1.getColumn());
      assertEquals(94, javaCharStream1.getEndColumn());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(1829, javaCharStream1.getEndLine());
      
      String string0 = javaCharStream1.GetImage();
      assertEquals(18, byteArray0.length);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(3694, javaCharStream1.bufpos);
      assertNotNull(string0);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(1829, javaCharStream1.getLine());
      assertEquals(94, javaCharStream1.getColumn());
      assertEquals(94, javaCharStream1.getEndColumn());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(1829, javaCharStream1.getEndLine());
      
      javaCharStream0.backup((byte)92);
      assertEquals(4003, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getEndLine());
      
      char char1 = javaCharStream1.readChar();
      assertEquals(18, byteArray0.length);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(3695, javaCharStream1.bufpos);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertFalse(char1 == char0);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals('\\', char1);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(1829, javaCharStream1.getLine());
      assertEquals(95, javaCharStream1.getColumn());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(1829, javaCharStream1.getEndLine());
      assertEquals(95, javaCharStream1.getEndColumn());
      
      char char2 = javaCharStream1.readChar();
      assertEquals(18, byteArray0.length);
      assertEquals(3696, javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertTrue(char2 == char1);
      assertFalse(char2 == char0);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals('\\', char2);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(97, javaCharStream1.getEndColumn());
      assertEquals(1829, javaCharStream1.getLine());
      assertEquals(97, javaCharStream1.getColumn());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(1829, javaCharStream1.getEndLine());
      
      javaCharStream1.UpdateLineColumn('0');
      assertEquals(18, byteArray0.length);
      assertEquals(3696, javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(99, javaCharStream1.getColumn());
      assertEquals(99, javaCharStream1.getEndColumn());
      assertEquals(1829, javaCharStream1.getLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(1829, javaCharStream1.getEndLine());
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      int int0 = JavaCharStream.hexval('D');
      assertEquals(13, int0);
      
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      assertNotNull(sequenceInputStream0);
      
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(sequenceInputStream0, 13);
      assertNotNull(pushbackInputStream0);
      
      PushbackInputStream pushbackInputStream1 = new PushbackInputStream(pushbackInputStream0);
      assertNotNull(pushbackInputStream1);
      assertFalse(pushbackInputStream1.equals((Object)pushbackInputStream0));
      
      JavaCharStream javaCharStream0 = new JavaCharStream(pushbackInputStream1, 13, 2777);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      assertFalse(pushbackInputStream0.equals((Object)pushbackInputStream1));
      assertFalse(pushbackInputStream1.equals((Object)pushbackInputStream0));
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      try { 
        javaCharStream0.BeginToken();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      StringReader stringReader0 = new StringReader("<7PD?G9");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      try { 
        JavaCharStream.hexval('<');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      StringReader stringReader0 = new StringReader("f9CRM\"KfXH5^>/YNTq");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      javaCharStream0.bufpos = 2;
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      javaCharStream0.FillBuff();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      char[] charArray0 = new char[4];
      charArray0[3] = '#';
      int int0 = stringReader0.read(charArray0);
      assertEquals(4, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '#'}, charArray0);
      assertEquals((-1), int0);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      javaCharStream0.prevCharIsCR = true;
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      javaCharStream0.adjustBeginLineColumn(1797, 0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, javaCharStream0.bufpos);
      assertEquals(1797, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(1797, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(1797, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getEndColumn());
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      int int1 = javaCharStream0.getBeginColumn();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, javaCharStream0.bufpos);
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      assertEquals(1797, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(1797, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(1797, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getEndColumn());
      
      javaCharStream0.backup(3);
      assertEquals(4095, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1797, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getEndColumn());
      
      char char0 = javaCharStream0.BeginToken();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals('\u0000', char0);
      assertEquals(1797, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(1797, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(1797, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getEndColumn());
      
      char char1 = javaCharStream0.readChar();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertTrue(char1 == char0);
      assertEquals('\u0000', char1);
      assertEquals(1797, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(1797, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(1797, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getEndColumn());
      
      javaCharStream0.UpdateLineColumn('\u0000');
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(1797, javaCharStream0.getBeginLine());
      assertEquals(1798, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(1798, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndColumn());
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      StringReader stringReader0 = new StringReader("{V\",)W");
      assertNotNull(stringReader0);
      
      stringReader0.mark(3221);
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 3221, 3221);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      javaCharStream0.ExpandBuff(false);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      char[] charArray0 = new char[7];
      charArray0[0] = ')';
      charArray0[1] = 'P';
      charArray0[2] = '!';
      charArray0[3] = '_';
      charArray0[4] = '#';
      charArray0[5] = 'v';
      charArray0[6] = '&';
      javaCharStream0.nextCharBuf = charArray0;
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      javaCharStream0.adjustBeginLineColumn(86, 86);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(87, javaCharStream0.getBeginLine());
      assertEquals(86, javaCharStream0.getBeginColumn());
      
      // Undeclared exception!
      try { 
        javaCharStream0.ReInit((InputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Reader", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      StringReader stringReader0 = new StringReader(">s=uLo 0\"{NxrfM#Q");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-1412), 0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      char[] charArray0 = new char[5];
      charArray0[2] = '';
      charArray0[3] = '\u0000';
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)92;
      int int0 = stringReader0.read(charArray0);
      assertEquals(5, charArray0.length);
      assertArrayEquals(new char[] {'>', 's', '=', 'u', 'L'}, charArray0);
      assertEquals(5, int0);
      
      javaCharStream0.adjustBeginLineColumn((-2115), (-408));
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-2114), javaCharStream0.getBeginLine());
      assertEquals((-408), javaCharStream0.getBeginColumn());
      
      char char0 = javaCharStream0.BeginToken();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals('o', char0);
      assertEquals((-407), javaCharStream0.getEndColumn());
      assertEquals((-2114), javaCharStream0.getLine());
      assertEquals((-407), javaCharStream0.getColumn());
      assertEquals((-2114), javaCharStream0.getEndLine());
      assertEquals((-2114), javaCharStream0.getBeginLine());
      assertEquals((-407), javaCharStream0.getBeginColumn());
      
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream1);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      
      PipedInputStream pipedInputStream0 = new PipedInputStream(5);
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      JavaCharStream javaCharStream2 = new JavaCharStream(pipedInputStream0, (-408), 2096, (byte)1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream2.bufpos);
      assertNotNull(javaCharStream2);
      assertFalse(javaCharStream2.equals((Object)javaCharStream0));
      assertFalse(javaCharStream2.equals((Object)javaCharStream1));
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, javaCharStream2.getBeginLine());
      assertEquals(0, javaCharStream2.getBeginColumn());
      
      char[] charArray1 = javaCharStream2.GetSuffix(0);
      assertEquals(0, charArray1.length);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream2.bufpos);
      assertNotNull(charArray1);
      assertNotSame(javaCharStream2, javaCharStream0);
      assertNotSame(javaCharStream2, javaCharStream1);
      assertNotSame(charArray1, charArray0);
      assertFalse(javaCharStream2.equals((Object)javaCharStream0));
      assertFalse(javaCharStream2.equals((Object)javaCharStream1));
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {}, charArray1);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, javaCharStream2.getBeginLine());
      assertEquals(0, javaCharStream2.getBeginColumn());
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      StringReader stringReader0 = new StringReader("<-PD?G9");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)11;
      byteArray0[1] = (byte)1;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(2, byteArray0.length);
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)11, (byte)1}, byteArray0);
      assertEquals(2, byteArrayInputStream0.available());
      
      JavaCharStream javaCharStream1 = new JavaCharStream(byteArrayInputStream0, (byte)11, 550);
      assertEquals(2, byteArray0.length);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream1);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertArrayEquals(new byte[] {(byte)11, (byte)1}, byteArray0);
      assertEquals(2, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      
      JavaCharStream javaCharStream2 = new JavaCharStream(byteArrayInputStream0, 94, (-1));
      assertEquals(2, byteArray0.length);
      assertEquals((-1), javaCharStream2.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream2);
      assertFalse(javaCharStream2.equals((Object)javaCharStream1));
      assertFalse(javaCharStream2.equals((Object)javaCharStream0));
      assertArrayEquals(new byte[] {(byte)11, (byte)1}, byteArray0);
      assertEquals(2, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream2.getBeginLine());
      assertEquals(0, javaCharStream2.getBeginColumn());
      
      javaCharStream2.backup((-3694));
      assertEquals(2, byteArray0.length);
      assertEquals(3693, javaCharStream2.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotSame(javaCharStream2, javaCharStream1);
      assertNotSame(javaCharStream2, javaCharStream0);
      assertFalse(javaCharStream2.equals((Object)javaCharStream1));
      assertFalse(javaCharStream2.equals((Object)javaCharStream0));
      assertArrayEquals(new byte[] {(byte)11, (byte)1}, byteArray0);
      assertEquals(2, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream2.getBeginLine());
      assertEquals(0, javaCharStream2.getColumn());
      assertEquals(0, javaCharStream2.getEndColumn());
      assertEquals(0, javaCharStream2.getBeginColumn());
      assertEquals(0, javaCharStream2.getLine());
      assertEquals(0, javaCharStream2.getEndLine());
      
      byte[] byteArray1 = new byte[2];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte)1;
      byteArray1[1] = (byte)11;
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray1);
      assertEquals(2, byteArray1.length);
      assertNotNull(byteArrayInputStream1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArrayInputStream1.equals((Object)byteArrayInputStream0));
      assertArrayEquals(new byte[] {(byte)1, (byte)11}, byteArray1);
      assertEquals(2, byteArrayInputStream1.available());
      
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream1);
      assertEquals(2, byteArray1.length);
      assertNotNull(pushbackInputStream0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArrayInputStream1.equals((Object)byteArrayInputStream0));
      assertArrayEquals(new byte[] {(byte)1, (byte)11}, byteArray1);
      assertEquals(2, byteArrayInputStream1.available());
      
      String string0 = javaCharStream1.GetImage();
      assertEquals(2, byteArray0.length);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(string0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArrayInputStream0, byteArrayInputStream1);
      assertNotSame(javaCharStream1, javaCharStream2);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArrayInputStream0.equals((Object)byteArrayInputStream1));
      assertFalse(javaCharStream1.equals((Object)javaCharStream2));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertArrayEquals(new byte[] {(byte)11, (byte)1}, byteArray0);
      assertEquals(2, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      
      javaCharStream1.backup((-2849));
      assertEquals(2, byteArray0.length);
      assertEquals(2848, javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArrayInputStream0, byteArrayInputStream1);
      assertNotSame(javaCharStream1, javaCharStream2);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArrayInputStream0.equals((Object)byteArrayInputStream1));
      assertFalse(javaCharStream1.equals((Object)javaCharStream2));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertArrayEquals(new byte[] {(byte)11, (byte)1}, byteArray0);
      assertEquals(2, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream1.getEndColumn());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getColumn());
      assertEquals(0, javaCharStream1.getEndLine());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getLine());
      
      char char0 = javaCharStream1.BeginToken();
      assertEquals(2, byteArray0.length);
      assertEquals(0, javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArrayInputStream0, byteArrayInputStream1);
      assertNotSame(javaCharStream1, javaCharStream2);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArrayInputStream0.equals((Object)byteArrayInputStream1));
      assertFalse(javaCharStream1.equals((Object)javaCharStream2));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertArrayEquals(new byte[] {(byte)11, (byte)1}, byteArray0);
      assertEquals('\u000B', char0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(11, javaCharStream1.getBeginLine());
      assertEquals(550, javaCharStream1.getColumn());
      assertEquals(11, javaCharStream1.getLine());
      assertEquals(550, javaCharStream1.getEndColumn());
      assertEquals(550, javaCharStream1.getBeginColumn());
      assertEquals(11, javaCharStream1.getEndLine());
      
      int int0 = javaCharStream2.getBeginLine();
      assertEquals(2, byteArray0.length);
      assertEquals(3693, javaCharStream2.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArrayInputStream0, byteArrayInputStream1);
      assertNotSame(javaCharStream2, javaCharStream1);
      assertNotSame(javaCharStream2, javaCharStream0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArrayInputStream0.equals((Object)byteArrayInputStream1));
      assertFalse(javaCharStream2.equals((Object)javaCharStream1));
      assertFalse(javaCharStream2.equals((Object)javaCharStream0));
      assertArrayEquals(new byte[] {(byte)11, (byte)1}, byteArray0);
      assertEquals(0, int0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream2.getBeginLine());
      assertEquals(0, javaCharStream2.getColumn());
      assertEquals(0, javaCharStream2.getEndColumn());
      assertEquals(0, javaCharStream2.getBeginColumn());
      assertEquals(0, javaCharStream2.getLine());
      assertEquals(0, javaCharStream2.getEndLine());
      
      javaCharStream1.ReInit((InputStream) byteArrayInputStream1, 96, 3693, 55);
      assertEquals(2, byteArray0.length);
      assertEquals(2, byteArray1.length);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArrayInputStream0, byteArrayInputStream1);
      assertNotSame(javaCharStream1, javaCharStream2);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArrayInputStream1, byteArrayInputStream0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArrayInputStream0.equals((Object)byteArrayInputStream1));
      assertFalse(javaCharStream1.equals((Object)javaCharStream2));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArrayInputStream1.equals((Object)byteArrayInputStream0));
      assertArrayEquals(new byte[] {(byte)11, (byte)1}, byteArray0);
      assertArrayEquals(new byte[] {(byte)1, (byte)11}, byteArray1);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(11, javaCharStream1.getBeginLine());
      assertEquals(550, javaCharStream1.getBeginColumn());
      assertEquals(2, byteArrayInputStream1.available());
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      try { 
        JavaCharStream.hexval('X');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      JavaCharStream javaCharStream0 = new JavaCharStream((Reader) null, 9, 745, 1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      javaCharStream0.ReInit((Reader) null);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      javaCharStream0.adjustBeginLineColumn(745, 745);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(746, javaCharStream0.getBeginLine());
      assertEquals(745, javaCharStream0.getBeginColumn());
      
      javaCharStream0.adjustBeginLineColumn(9, 745);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(11, javaCharStream0.getBeginLine());
      assertEquals(745, javaCharStream0.getBeginColumn());
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      int int0 = JavaCharStream.hexval('a');
      assertEquals(10, int0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      StringReader stringReader0 = new StringReader(">s=uLo 0\"{NxrfM#Q");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-1412), 0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      int int0 = JavaCharStream.hexval('d');
      assertEquals(13, int0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      JavaCharStream javaCharStream0 = new JavaCharStream((Reader) null, (-5534), (-5534));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      // Undeclared exception!
      try { 
        javaCharStream0.FillBuff();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      StringReader stringReader0 = new StringReader("f9CRM\"KfXH5^>/YNTq");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      javaCharStream0.bufpos = 0;
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getEndColumn());
      
      javaCharStream0.FillBuff();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getEndColumn());
      
      char[] charArray0 = new char[4];
      charArray0[2] = '2';
      charArray0[1] = '2';
      charArray0[2] = '2';
      charArray0[3] = '#';
      int int0 = JavaCharStream.hexval('2');
      assertEquals(2, int0);
      
      javaCharStream0.UpdateLineColumn('2');
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      
      int int1 = 0;
      javaCharStream0.adjustBeginLineColumn(94, 0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(94, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(94, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(94, javaCharStream0.getBeginLine());
      
      javaCharStream0.ReInit((Reader) stringReader0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(94, javaCharStream0.getBeginLine());
      
      javaCharStream0.ReInit((Reader) stringReader0, 0, 94);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(94, javaCharStream0.getBeginLine());
      
      javaCharStream0.ReInit((Reader) stringReader0, 94, 4096);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(94, javaCharStream0.getBeginLine());
      
      javaCharStream0.AdjustBuffSize();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(94, javaCharStream0.getBeginLine());
      
      // Undeclared exception!
      try { 
        javaCharStream0.getEndLine();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      JavaCharStream javaCharStream0 = new JavaCharStream((Reader) null, 9, 745, 0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      
      // Undeclared exception!
      try { 
        javaCharStream0.adjustBeginLineColumn(745, 745);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      StringReader stringReader0 = new StringReader("<-PD?G9");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)46;
      byteArray0[3] = (byte)46;
      byteArray0[4] = (byte) (-87);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(5, byteArray0.length);
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)1, (byte)0, (byte)46, (byte)46, (byte) (-87)}, byteArray0);
      assertEquals(5, byteArrayInputStream0.available());
      
      JavaCharStream javaCharStream1 = new JavaCharStream(byteArrayInputStream0, (byte) (-87), (byte)1);
      assertEquals(5, byteArray0.length);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertNotNull(javaCharStream1);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertArrayEquals(new byte[] {(byte)1, (byte)0, (byte)46, (byte)46, (byte) (-87)}, byteArray0);
      assertEquals(5, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      
      javaCharStream0.backup((byte)0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(4095, javaCharStream0.bufpos);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getColumn());
      
      char char0 = javaCharStream0.readChar();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(4096, javaCharStream0.bufpos);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertEquals('<', char0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getColumn());
      
      javaCharStream0.getLine();
      // Undeclared exception!
      try { 
        javaCharStream1.getColumn();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      int int0 = JavaCharStream.hexval('2');
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      JavaCharStream javaCharStream0 = new JavaCharStream((Reader) null);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      javaCharStream0.nextCharInd = 1;
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      char[] charArray0 = javaCharStream0.GetSuffix(1);
      assertEquals(1, charArray0.length);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      // Undeclared exception!
      try { 
        javaCharStream0.readChar();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      pipedInputStream0.mark(3672);
      assertEquals(0, pipedInputStream0.available());
      
      try { 
        JavaCharStream.hexval('R');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      StringReader stringReader0 = new StringReader("f9CRM\"KfXH5^>/YNTq");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      javaCharStream0.bufpos = 0;
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      javaCharStream0.FillBuff();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      char[] charArray0 = new char[4];
      charArray0[0] = '2';
      charArray0[1] = '2';
      charArray0[2] = '2';
      charArray0[3] = '#';
      int int0 = stringReader0.read(charArray0);
      assertEquals(4, charArray0.length);
      assertArrayEquals(new char[] {'2', '2', '2', '#'}, charArray0);
      assertEquals((-1), int0);
      
      javaCharStream0.UpdateLineColumn('2');
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      
      javaCharStream0.adjustBeginLineColumn(1797, 0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(1797, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(1797, javaCharStream0.getEndLine());
      assertEquals(1797, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getEndColumn());
      
      javaCharStream0.ReInit((Reader) stringReader0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(1797, javaCharStream0.getBeginLine());
      
      javaCharStream0.ReInit((Reader) stringReader0, 0, 1797);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(1797, javaCharStream0.getBeginLine());
      
      javaCharStream0.ReInit((Reader) stringReader0, 1797, 4096);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(1797, javaCharStream0.getBeginLine());
      
      StringReader stringReader1 = new StringReader("f9CRM\"KfXH5^>/YNTq");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      StringReader stringReader2 = new StringReader(".");
      assertNotNull(stringReader2);
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertFalse(stringReader2.equals((Object)stringReader0));
      
      javaCharStream0.ReInit((Reader) stringReader2, (-170), (-170), 0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotSame(stringReader2, stringReader1);
      assertNotSame(stringReader2, stringReader0);
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(stringReader0, stringReader2);
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(stringReader0.equals((Object)stringReader2));
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      int int0 = JavaCharStream.hexval('E');
      assertEquals(14, int0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      StringReader stringReader0 = new StringReader("<-PD?G9");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      try { 
        JavaCharStream.hexval('<');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      try { 
        javaCharStream0.readChar();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      pipedInputStream0.close();
      assertEquals(0, pipedInputStream0.available());
      
      JavaCharStream javaCharStream0 = new JavaCharStream(pipedInputStream0, 0, (-1), 0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      // Undeclared exception!
      try { 
        javaCharStream0.getColumn();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 208, 208, 0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      
      // Undeclared exception!
      try { 
        javaCharStream0.getBeginColumn();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      StringReader stringReader0 = new StringReader("f9CRM\"KfXH5^>/YNTq");
      assertNotNull(stringReader0);
      
      char char0 = 'N';
      try { 
        JavaCharStream.hexval('N');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      StringReader stringReader0 = new StringReader("f9CRM\"KfXH5^>/YNTq");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      javaCharStream0.bufpos = 0;
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getColumn());
      
      javaCharStream0.FillBuff();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getColumn());
      
      char[] charArray0 = new char[4];
      charArray0[3] = '#';
      int int0 = stringReader0.read(charArray0);
      assertEquals(4, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '#'}, charArray0);
      assertEquals((-1), int0);
      
      javaCharStream0.adjustBeginLineColumn(1797, 31);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(31, javaCharStream0.getBeginColumn());
      assertEquals(31, javaCharStream0.getEndColumn());
      assertEquals(1797, javaCharStream0.getEndLine());
      assertEquals(1797, javaCharStream0.getLine());
      assertEquals(31, javaCharStream0.getColumn());
      assertEquals(1797, javaCharStream0.getBeginLine());
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      int int1 = javaCharStream0.getBeginColumn();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(int1 == int0);
      assertEquals(31, int1);
      assertEquals(31, javaCharStream0.getBeginColumn());
      assertEquals(31, javaCharStream0.getEndColumn());
      assertEquals(1797, javaCharStream0.getEndLine());
      assertEquals(1797, javaCharStream0.getLine());
      assertEquals(31, javaCharStream0.getColumn());
      assertEquals(1797, javaCharStream0.getBeginLine());
      
      char char0 = javaCharStream0.BeginToken();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals('f', char0);
      assertEquals(1797, javaCharStream0.getEndLine());
      assertEquals(32, javaCharStream0.getBeginColumn());
      assertEquals(32, javaCharStream0.getEndColumn());
      assertEquals(1797, javaCharStream0.getLine());
      assertEquals(32, javaCharStream0.getColumn());
      assertEquals(1797, javaCharStream0.getBeginLine());
      
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null, 31);
      assertNotNull(bufferedInputStream0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      int int0 = JavaCharStream.hexval('9');
      assertEquals(9, int0);
      
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(0, byteArray0.length);
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArrayInputStream0.available());
      
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0);
      assertEquals(0, byteArray0.length);
      assertNotNull(pushbackInputStream0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArrayInputStream0.available());
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      assertFalse(boolean0);
      
      Enumeration<FilterInputStream> enumeration0 = (Enumeration<FilterInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      assertNotNull(sequenceInputStream0);
      
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(sequenceInputStream0);
      assertNotNull(bufferedInputStream0);
      
      DataInputStream dataInputStream0 = new DataInputStream(bufferedInputStream0);
      assertNotNull(dataInputStream0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(dataInputStream0, (-1), (-1));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      // Undeclared exception!
      try { 
        javaCharStream0.getLine();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      StringReader stringReader0 = new StringReader("f9CRM\"KfXH5^>/YNTq");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      javaCharStream0.bufpos = 0;
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getLine());
      
      javaCharStream0.FillBuff();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getLine());
      
      char[] charArray0 = new char[4];
      charArray0[3] = '#';
      int int0 = stringReader0.read(charArray0);
      assertEquals(4, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '#'}, charArray0);
      assertEquals((-1), int0);
      
      int int1 = 0;
      javaCharStream0.adjustBeginLineColumn(1797, 0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(1797, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(1797, javaCharStream0.getLine());
      assertEquals(1797, javaCharStream0.getEndLine());
      
      javaCharStream0.ReInit((Reader) stringReader0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(1797, javaCharStream0.getBeginLine());
      
      javaCharStream0.ReInit((Reader) stringReader0, 0, 1797);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(1797, javaCharStream0.getBeginLine());
      
      javaCharStream0.ReInit((Reader) stringReader0, 1797, 4096);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(1797, javaCharStream0.getBeginLine());
      
      javaCharStream0.AdjustBuffSize();
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(1797, javaCharStream0.getBeginLine());
      
      // Undeclared exception!
      try { 
        javaCharStream0.getEndLine();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      StringReader stringReader0 = new StringReader("f9CRM\"KfXH5^>/YNTq");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      javaCharStream0.bufpos = 0;
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getLine());
      
      javaCharStream0.FillBuff();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getLine());
      
      char[] charArray0 = new char[4];
      charArray0[0] = '2';
      charArray0[1] = '2';
      charArray0[2] = '2';
      charArray0[3] = '#';
      int int0 = stringReader0.read(charArray0);
      assertEquals(4, charArray0.length);
      assertArrayEquals(new char[] {'2', '2', '2', '#'}, charArray0);
      assertEquals((-1), int0);
      
      javaCharStream0.UpdateLineColumn('2');
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      
      char char0 = javaCharStream0.readChar();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals('f', char0);
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      
      int int1 = 72;
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0, 72, 0, 1);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream1);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      
      try { 
        javaCharStream1.ReadByte();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      try { 
        JavaCharStream.hexval(':');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      JavaCharStream javaCharStream0 = new JavaCharStream(pipedInputStream0, 478, 478);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      javaCharStream0.adjustBeginLineColumn(478, 314);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(314, javaCharStream0.getBeginColumn());
      assertEquals(479, javaCharStream0.getBeginLine());
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      int int0 = JavaCharStream.hexval('3');
      assertEquals(3, int0);
      
      try { 
        JavaCharStream.hexval('@');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      StringReader stringReader0 = new StringReader("f9CRM\"KfXH5^>/YNTq");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      try { 
        JavaCharStream.hexval('V');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      try { 
        JavaCharStream.hexval('O');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      try { 
        JavaCharStream.hexval('H');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      StringReader stringReader0 = new StringReader("f9CRM\"KfXH5^>/YNTq");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      javaCharStream0.bufpos = 2;
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      javaCharStream0.FillBuff();
      assertEquals(2, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      char[] charArray0 = new char[4];
      charArray0[3] = '#';
      int int0 = stringReader0.read(charArray0);
      assertEquals(4, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '#'}, charArray0);
      assertEquals((-1), int0);
      
      javaCharStream0.prevCharIsCR = true;
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      javaCharStream0.adjustBeginLineColumn(1797, 0);
      assertEquals(2, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1797, javaCharStream0.getEndLine());
      assertEquals(1797, javaCharStream0.getLine());
      assertEquals(1797, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      int int1 = javaCharStream0.getBeginColumn();
      assertEquals(2, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      assertEquals(1797, javaCharStream0.getEndLine());
      assertEquals(1797, javaCharStream0.getLine());
      assertEquals(1797, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      javaCharStream0.backup(3);
      assertEquals(4095, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1797, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      char char0 = javaCharStream0.BeginToken();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals('\u0000', char0);
      assertEquals(1797, javaCharStream0.getEndLine());
      assertEquals(1797, javaCharStream0.getLine());
      assertEquals(1797, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      char char1 = javaCharStream0.readChar();
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertTrue(char1 == char0);
      assertEquals('\u0000', char1);
      assertEquals(1797, javaCharStream0.getEndLine());
      assertEquals(1797, javaCharStream0.getLine());
      assertEquals(1797, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getBeginColumn());
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      StringReader stringReader0 = new StringReader(">s=uLo 0\"{NxrfM#Q");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-1412), 0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'x';
      charArray0[1] = 'q';
      charArray0[2] = '';
      charArray0[3] = 'X';
      charArray0[4] = '0';
      javaCharStream0.buffer = charArray0;
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      char char0 = javaCharStream0.BeginToken();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals('>', char0);
      assertEquals((-1412), javaCharStream0.getBeginLine());
      assertEquals((-1412), javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1412), javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getColumn());
      
      int int0 = javaCharStream0.getColumn();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, int0);
      assertEquals((-1412), javaCharStream0.getBeginLine());
      assertEquals((-1412), javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1412), javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getColumn());
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      StringReader stringReader0 = new StringReader("g/_r");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-2033), (-72));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      char char0 = javaCharStream0.BeginToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals('g', char0);
      assertEquals((-2033), javaCharStream0.getBeginLine());
      assertEquals((-72), javaCharStream0.getBeginColumn());
      assertEquals((-72), javaCharStream0.getColumn());
      assertEquals((-2033), javaCharStream0.getLine());
      assertEquals((-2033), javaCharStream0.getEndLine());
      assertEquals((-72), javaCharStream0.getEndColumn());
      
      JavaCharStream javaCharStream1 = null;
      try {
        javaCharStream1 = new JavaCharStream((InputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Reader", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      StringReader stringReader0 = new StringReader("f9CRM\"KfXH5^>/YNTq");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      javaCharStream0.bufpos = 0;
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      javaCharStream0.FillBuff();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      char[] charArray0 = new char[4];
      charArray0[3] = '#';
      int int0 = stringReader0.read(charArray0);
      assertEquals(4, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '#'}, charArray0);
      assertEquals((-1), int0);
      
      javaCharStream0.adjustBeginLineColumn(1797, 0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(1797, javaCharStream0.getLine());
      assertEquals(1797, javaCharStream0.getBeginLine());
      assertEquals(1797, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      char char0 = javaCharStream0.BeginToken();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals('f', char0);
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1797, javaCharStream0.getLine());
      assertEquals(1797, javaCharStream0.getBeginLine());
      assertEquals(1797, javaCharStream0.getEndLine());
      
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertNotNull(javaCharStream1);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      
      char[] charArray1 = javaCharStream1.GetSuffix(3246);
      assertEquals(3246, charArray1.length);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertNotNull(charArray1);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertNotSame(charArray1, charArray0);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      StringReader stringReader0 = new StringReader("f9CRM\"KfXH5^>/YNTq");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      javaCharStream0.bufpos = (-10);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      try { 
        JavaCharStream.hexval('R');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      StringReader stringReader0 = new StringReader("!aLI#122n7pz");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      char char0 = javaCharStream0.BeginToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals('!', char0);
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      
      char char1 = javaCharStream0.readChar();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(char1 == char0);
      assertEquals('a', char1);
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(2, javaCharStream0.getEndColumn());
      
      // Undeclared exception!
      try { 
        javaCharStream0.GetSuffix((-1696));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      boolean boolean0 = stringReader0.markSupported();
      assertTrue(boolean0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      try { 
        javaCharStream0.FillBuff();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      StringReader stringReader0 = new StringReader("f9CRM\"KfXH5^>/YNTq");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      javaCharStream0.bufpos = 0;
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getColumn());
      
      javaCharStream0.FillBuff();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getColumn());
      
      byte[] byteArray0 = new byte[3];
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      byteArray0[0] = (byte)16;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(3, byteArray0.length);
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)16, (byte)0, (byte)0}, byteArray0);
      assertEquals(3, byteArrayInputStream0.available());
      
      JavaCharStream javaCharStream1 = new JavaCharStream(byteArrayInputStream0, 0, 0);
      assertEquals(3, byteArray0.length);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertNotNull(javaCharStream1);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertArrayEquals(new byte[] {(byte)16, (byte)0, (byte)0}, byteArray0);
      assertEquals(3, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      
      javaCharStream0.backup(0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getColumn());
      
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0);
      assertEquals(3, byteArray0.length);
      assertNotNull(pushbackInputStream0);
      assertArrayEquals(new byte[] {(byte)16, (byte)0, (byte)0}, byteArray0);
      assertEquals(3, byteArrayInputStream0.available());
      
      String string0 = javaCharStream1.GetImage();
      assertEquals(3, byteArray0.length);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertNotNull(string0);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertArrayEquals(new byte[] {(byte)16, (byte)0, (byte)0}, byteArray0);
      assertEquals(3, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      
      javaCharStream0.backup((byte)0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getColumn());
      
      char char0 = javaCharStream1.readChar();
      assertEquals(3, byteArray0.length);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream1.bufpos);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertArrayEquals(new byte[] {(byte)16, (byte)0, (byte)0}, byteArray0);
      assertEquals('\u0010', char0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getColumn());
      assertEquals(0, javaCharStream1.getEndLine());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getEndColumn());
      assertEquals(0, javaCharStream1.getLine());
      
      int int0 = javaCharStream1.getEndColumn();
      assertEquals(3, byteArray0.length);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream1.bufpos);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertArrayEquals(new byte[] {(byte)16, (byte)0, (byte)0}, byteArray0);
      assertEquals(0, int0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getColumn());
      assertEquals(0, javaCharStream1.getEndLine());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getEndColumn());
      assertEquals(0, javaCharStream1.getLine());
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      StringReader stringReader0 = new StringReader("<-PD?G9");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)46;
      byteArray0[3] = (byte)46;
      byteArray0[4] = (byte) (-87);
      JavaCharStream javaCharStream1 = new JavaCharStream(pipedInputStream0, (byte)0, (byte)0);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream1);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      
      javaCharStream0.backup((-606));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(605, javaCharStream0.bufpos);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getColumn());
      
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(pipedInputStream0);
      assertNotNull(pushbackInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      JavaCharStream javaCharStream2 = new JavaCharStream(pipedInputStream0, (-582), 95, (byte) (-87));
      assertEquals((-1), javaCharStream2.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream2);
      assertFalse(javaCharStream2.equals((Object)javaCharStream1));
      assertFalse(javaCharStream2.equals((Object)javaCharStream0));
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, javaCharStream2.getBeginColumn());
      assertEquals(0, javaCharStream2.getBeginLine());
      
      javaCharStream2.backup((byte)0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(4095, javaCharStream2.bufpos);
      assertNotSame(javaCharStream2, javaCharStream1);
      assertNotSame(javaCharStream2, javaCharStream0);
      assertFalse(javaCharStream2.equals((Object)javaCharStream1));
      assertFalse(javaCharStream2.equals((Object)javaCharStream0));
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, javaCharStream2.getBeginColumn());
      assertEquals(0, javaCharStream2.getColumn());
      assertEquals(0, javaCharStream2.getLine());
      assertEquals(0, javaCharStream2.getEndColumn());
      assertEquals(0, javaCharStream2.getEndLine());
      assertEquals(0, javaCharStream2.getBeginLine());
      
      char char0 = javaCharStream0.readChar();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(606, javaCharStream0.bufpos);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(javaCharStream0, javaCharStream2);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(javaCharStream0.equals((Object)javaCharStream2));
      assertEquals('<', char0);
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getColumn());
      
      javaCharStream2.ReInit((Reader) stringReader0);
      assertEquals((-1), javaCharStream2.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotSame(javaCharStream2, javaCharStream1);
      assertNotSame(javaCharStream2, javaCharStream0);
      assertFalse(javaCharStream2.equals((Object)javaCharStream1));
      assertFalse(javaCharStream2.equals((Object)javaCharStream0));
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, javaCharStream2.getBeginColumn());
      assertEquals(0, javaCharStream2.getBeginLine());
      
      String string0 = javaCharStream1.GetImage();
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(string0);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertNotSame(javaCharStream1, javaCharStream2);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream2));
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      JavaCharStream javaCharStream0 = new JavaCharStream((Reader) null, 9, 1, 1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      javaCharStream0.backup(1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      char char0 = javaCharStream0.readChar();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals('\u0000', char0);
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      char char0 = 'N';
      try { 
        JavaCharStream.hexval('N');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      StringReader stringReader0 = new StringReader(">s=uLo 0\"{NxrfM#Q");
      int int0 = 0;
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-1412), 0);
      char[] charArray0 = new char[5];
      charArray0[2] = '';
      charArray0[3] = '\u0000';
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)92;
      int int1 = 0;
      javaCharStream0.adjustBeginLineColumn(0, 4076);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      javaCharStream0.getBeginColumn();
      // Undeclared exception!
      try { 
        javaCharStream0.ExpandBuff(true);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      StringReader stringReader0 = new StringReader(">s=uLo 0\"{NxrfM#Q");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-1412), (-1412));
      boolean boolean0 = javaCharStream0.prevCharIsLF;
      byte[] byteArray0 = new byte[18];
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte)92;
      byteArray0[4] = (byte)92;
      byteArray0[8] = (byte)92;
      int[] intArray0 = new int[4];
      intArray0[1] = (int) (byte)92;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "AE#]i ]m^");
      intArray0[2] = (int) (byte)0;
      intArray0[3] = (int) (byte)0;
      javaCharStream0.bufcolumn = intArray0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      JavaCharStream javaCharStream1 = new JavaCharStream(byteArrayInputStream0, 1829, 94);
      javaCharStream1.backup((-3694));
      javaCharStream1.readChar();
      javaCharStream1.GetImage();
      javaCharStream0.backup((byte)0);
      // Undeclared exception!
      try { 
        javaCharStream0.readChar();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      StringReader stringReader0 = new StringReader("f9CRM\"KfXH5^>/YNTq");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      javaCharStream0.bufpos = (-14);
      char[] charArray0 = new char[4];
      stringReader0.markSupported();
      javaCharStream0.Done();
      stringReader0.read(charArray0);
      javaCharStream0.prevCharIsCR = true;
      // Undeclared exception!
      try { 
        javaCharStream0.getBeginColumn();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[2] = '\u0089';
      byte[] byteArray0 = new byte[18];
      byteArray0[0] = (byte)92;
      byteArray0[1] = (byte)92;
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte)92;
      byteArray0[4] = (byte)92;
      byteArray0[6] = (byte)87;
      byteArray0[7] = (byte)92;
      byteArray0[8] = (byte)92;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, 1829, 94);
      javaCharStream0.bufsize = 1829;
      javaCharStream0.backup((-3694));
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0);
      javaCharStream0.AdjustBuffSize();
      javaCharStream0.readChar();
      javaCharStream0.ReInit((InputStream) pushbackInputStream0, (int) (byte)87, (int) (byte)92);
      assertEquals(0, byteArrayInputStream0.available());
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      StringReader stringReader0 = new StringReader("f9CRM\"KfXH5^>/YNTq");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      javaCharStream0.bufpos = 0;
      javaCharStream0.FillBuff();
      char[] charArray0 = new char[4];
      charArray0[3] = '#';
      stringReader0.read(charArray0);
      javaCharStream0.adjustBeginLineColumn(1797, 0);
      javaCharStream0.maxNextCharInd = (-1);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      javaCharStream0.getBeginColumn();
      javaCharStream0.ExpandBuff(true);
      javaCharStream0.UpdateLineColumn('0');
      // Undeclared exception!
      try { 
        javaCharStream0.BeginToken();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      StringReader stringReader0 = new StringReader("l'r{");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-1), (-1));
      javaCharStream0.maxNextCharInd = (-1);
      // Undeclared exception!
      try { 
        javaCharStream0.BeginToken();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      int int0 = JavaCharStream.hexval('b');
      assertEquals(11, int0);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      StringReader stringReader0 = new StringReader(">s=uLo 0\"{NxrfM#Q");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-1412), 0);
      char[] charArray0 = new char[5];
      charArray0[2] = '';
      boolean boolean0 = javaCharStream0.prevCharIsLF;
      byte[] byteArray0 = new byte[18];
      byteArray0[16] = (byte)92;
      byteArray0[3] = (byte)92;
      byteArray0[12] = (byte)92;
      byteArray0[7] = (byte)92;
      byteArray0[8] = (byte)92;
      int[] intArray0 = new int[4];
      intArray0[1] = (int) (byte)92;
      intArray0[2] = (int) (byte)0;
      intArray0[3] = (int) (byte)0;
      javaCharStream0.bufcolumn = intArray0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      // Undeclared exception!
      try { 
        javaCharStream0.adjustBeginLineColumn(3410, 2045);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      StringReader stringReader0 = new StringReader("P><-PD?G9");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      javaCharStream0.FillBuff();
      try { 
        JavaCharStream.hexval('_');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      JavaCharStream javaCharStream0 = null;
      try {
        javaCharStream0 = new JavaCharStream((InputStream) null, 5060, 5060);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Reader", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      StringReader stringReader0 = new StringReader("<-PD?G9");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      javaCharStream0.FillBuff();
      javaCharStream0.adjustBeginLineColumn(476, 1);
      stringReader0.reset();
      javaCharStream0.backup(476);
      javaCharStream0.BeginToken();
      InputStream inputStream0 = null;
      BufferedInputStream bufferedInputStream0 = null;
      try {
        bufferedInputStream0 = new BufferedInputStream(pipedInputStream0, (-920));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Buffer size <= 0
         //
         verifyException("java.io.BufferedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      try { 
        JavaCharStream.hexval('[');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      StringReader stringReader0 = new StringReader("<-PD?G9");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-44);
      Reader reader0 = null;
      JavaCharStream javaCharStream0 = new JavaCharStream((Reader) null, 1, 1402);
      try { 
        JavaCharStream.hexval('Y');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      JavaCharStream.hexval('1');
      JavaCharStream javaCharStream0 = new JavaCharStream(pipedInputStream0);
      javaCharStream0.getBeginColumn();
      javaCharStream0.ExpandBuff(false);
      // Undeclared exception!
      try { 
        javaCharStream0.UpdateLineColumn('z');
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      StringReader stringReader0 = new StringReader("<-PD?G9");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      javaCharStream0.FillBuff();
      char[] charArray0 = new char[3];
      charArray0[0] = '#';
      charArray0[1] = '#';
      stringReader0.read(charArray0);
      javaCharStream0.adjustBeginLineColumn(1, 1797);
      javaCharStream0.BeginToken();
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0);
      javaCharStream1.GetSuffix(3246);
      int int0 = javaCharStream0.getEndColumn();
      assertEquals(1798, javaCharStream0.getBeginColumn());
      assertEquals(1798, int0);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      StringReader stringReader0 = new StringReader("<-PD?G9");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      javaCharStream0.FillBuff();
      int int0 = (-3437);
      javaCharStream0.adjustBeginLineColumn(476, 1);
      stringReader0.reset();
      javaCharStream0.backup(476);
      // Undeclared exception!
      try { 
        javaCharStream0.ReInit((InputStream) null, 1, 1916);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Reader", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      InputStream inputStream0 = null;
      JavaCharStream javaCharStream0 = null;
      try {
        javaCharStream0 = new JavaCharStream((InputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Reader", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[2] = '';
      JavaCharStream.hexval('c');
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)85;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)85;
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte)85;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream0.close();
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      StringReader stringReader0 = new StringReader(">s=uLo 0\"{NxrfM#{Q");
      char[] charArray0 = new char[6];
      charArray0[2] = '';
      byte[] byteArray0 = new byte[8];
      byteArray0[4] = (byte)1;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, (byte)1, (byte)1);
      javaCharStream0.readChar();
      javaCharStream0.GetImage();
      javaCharStream0.getBeginLine();
      int int0 = javaCharStream0.getEndLine();
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      JavaCharStream javaCharStream0 = new JavaCharStream(pipedInputStream0, 478, 478);
      try { 
        javaCharStream0.BeginToken();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[2] = '9';
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "a");
      charArray0[1] = '9';
      charArray0[3] = '#';
      JavaCharStream.hexval('9');
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray0);
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream1, 9, '9');
      javaCharStream0.backup('#');
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream1);
      javaCharStream0.GetImage();
      javaCharStream0.backup(9);
      javaCharStream0.readChar();
      javaCharStream0.ReInit((InputStream) pushbackInputStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      StringReader stringReader0 = new StringReader("<-PD?G9");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)11;
      byteArray0[1] = (byte)1;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      JavaCharStream javaCharStream1 = new JavaCharStream(byteArrayInputStream0, (byte)11, 550);
      JavaCharStream javaCharStream2 = new JavaCharStream(byteArrayInputStream0, 94, (-1));
      javaCharStream2.backup((-3694));
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte)1;
      byteArray1[1] = (byte)11;
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray1);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream1);
      javaCharStream1.GetImage();
      javaCharStream1.backup((-2849));
      javaCharStream1.readChar();
      try { 
        JavaCharStream.hexval('X');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      JavaCharStream javaCharStream0 = new JavaCharStream((Reader) null, 9, 745, 1);
      javaCharStream0.Done();
      // Undeclared exception!
      try { 
        javaCharStream0.adjustBeginLineColumn(745, 745);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      StringReader stringReader0 = new StringReader("f9CRM\"KfXH5^>/YNTq");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      javaCharStream0.bufpos = 0;
      javaCharStream0.FillBuff();
      char[] charArray0 = new char[4];
      charArray0[0] = '2';
      charArray0[1] = '2';
      charArray0[2] = '2';
      charArray0[3] = '#';
      stringReader0.read(charArray0);
      javaCharStream0.UpdateLineColumn('2');
      int int0 = (-920);
      javaCharStream0.BeginToken();
      InputStream inputStream0 = null;
      BufferedInputStream bufferedInputStream0 = null;
      try {
        bufferedInputStream0 = new BufferedInputStream((InputStream) null, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Buffer size <= 0
         //
         verifyException("java.io.BufferedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      int int0 = (-1469);
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 63, (-1469));
      javaCharStream0.line = (-1469);
      try { 
        javaCharStream0.BeginToken();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      StringReader stringReader0 = new StringReader("<-PD?G9");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      javaCharStream0.FillBuff();
      stringReader0.read();
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0);
      javaCharStream1.backup(65);
      javaCharStream1.readChar();
      try { 
        JavaCharStream.hexval('U');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      StringReader stringReader0 = new StringReader("'ojd");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 77, 77, (byte)1);
      boolean boolean0 = javaCharStream0.prevCharIsLF;
      javaCharStream0.AdjustBuffSize();
      StringReader stringReader1 = new StringReader("'ojd");
      StringReader stringReader2 = new StringReader("h+-675");
      javaCharStream0.ReInit((Reader) stringReader2);
      try { 
        JavaCharStream.hexval('=');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      JavaCharStream javaCharStream0 = new JavaCharStream((Reader) null, 9, 745, 208);
      javaCharStream0.tokenBegin = 96;
      javaCharStream0.backup(208);
      javaCharStream0.readChar();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      javaCharStream0.ExpandBuff(true);
      javaCharStream0.ExpandBuff(true);
      javaCharStream0.getColumn();
      assertEquals(2368, javaCharStream0.bufpos);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      StringReader stringReader0 = new StringReader("f9CRM\"KXH^>/YNq");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      javaCharStream0.FillBuff();
      javaCharStream0.ReInit((Reader) stringReader0);
      javaCharStream0.backup(1);
      javaCharStream0.BeginToken();
      try { 
        javaCharStream0.readChar();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      JavaCharStream.hexval('A');
      StringReader stringReader0 = new StringReader("Invalid escape character at line ");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      // Undeclared exception!
      try { 
        javaCharStream0.getEndColumn();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      StringReader stringReader0 = new StringReader("<-PD?G9");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      JavaCharStream.hexval('B');
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      PipedInputStream pipedInputStream1 = null;
      try {
        pipedInputStream1 = new PipedInputStream(pipedOutputStream0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pipe Size <= 0
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      JavaCharStream javaCharStream0 = new JavaCharStream(pipedInputStream0, 478, 478);
      // Undeclared exception!
      try { 
        javaCharStream0.UpdateLineColumn('U');
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[2] = '';
      StringReader stringReader0 = new StringReader("'ojd");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 77, 77, (byte)1);
      boolean boolean0 = javaCharStream0.prevCharIsLF;
      StringReader stringReader1 = new StringReader("'ojd");
      StringReader stringReader2 = new StringReader("h+-675");
      javaCharStream0.readChar();
      InputStream inputStream0 = null;
      // Undeclared exception!
      try { 
        javaCharStream0.ReInit((InputStream) null, 4096, 4096, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Reader", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      JavaCharStream javaCharStream0 = new JavaCharStream((Reader) null, 9, 745, 1);
      javaCharStream0.adjustBeginLineColumn(745, 745);
      assertEquals(745, javaCharStream0.getBeginLine());
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      StringReader stringReader0 = new StringReader("<-PD?G9");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      javaCharStream0.FillBuff();
      javaCharStream0.adjustBeginLineColumn(476, 476);
      stringReader0.reset();
      javaCharStream0.backup(476);
      javaCharStream0.adjustBeginLineColumn(980, 476);
      javaCharStream0.BeginToken();
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0);
      char[] charArray0 = javaCharStream1.GetSuffix(1674);
      assertEquals(1674, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      JavaCharStream.hexval('7');
      try { 
        JavaCharStream.hexval('Z');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      StringReader stringReader0 = new StringReader("<p_D?79");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      javaCharStream0.FillBuff();
      javaCharStream0.AdjustBuffSize();
      char char0 = javaCharStream0.BeginToken();
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals('<', char0);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      JavaCharStream.hexval('3');
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      String string0 = ":ftFb";
      StringReader stringReader0 = new StringReader(":ftFb");
      try { 
        JavaCharStream.hexval(':');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      JavaCharStream javaCharStream0 = new JavaCharStream((Reader) null, 745, 1);
      javaCharStream0.backup(1);
      javaCharStream0.BeginToken();
      javaCharStream0.adjustBeginLineColumn(745, (-1));
      javaCharStream0.UpdateLineColumn('9');
      assertEquals(4095, javaCharStream0.bufpos);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      StringReader stringReader0 = new StringReader("l'r{");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-2962), (-2962));
      boolean boolean0 = javaCharStream0.prevCharIsLF;
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)9;
      byteArray0[1] = (byte)92;
      byteArray0[2] = (byte)92;
      byteArray0[3] = (byte)92;
      byteArray0[4] = (byte)92;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      JavaCharStream javaCharStream1 = new JavaCharStream(byteArrayInputStream0, (-319), 556);
      javaCharStream1.backup((-1022));
      javaCharStream0.readChar();
      javaCharStream0.GetImage();
      javaCharStream0.backup((-1794));
      javaCharStream1.readChar();
      javaCharStream0.readChar();
      javaCharStream1.UpdateLineColumn('l');
      javaCharStream1.GetImage();
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals((-319), javaCharStream1.getLine());
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      StringReader stringReader0 = new StringReader("XK");
      int int0 = 724;
      stringReader0.markSupported();
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 724, 724);
      javaCharStream0.ReInit((Reader) stringReader0);
      javaCharStream0.ReadByte();
      javaCharStream0.GetImage();
      javaCharStream0.AdjustBuffSize();
      javaCharStream0.getBeginColumn();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "XK");
      javaCharStream0.inputStream = (Reader) stringReader0;
      MockFileInputStream mockFileInputStream0 = null;
      try {
        mockFileInputStream0 = new MockFileInputStream((FileDescriptor) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.FileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      try { 
        javaCharStream0.FillBuff();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      try { 
        JavaCharStream.hexval('P');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      StringReader stringReader0 = new StringReader("f9CRM\"KfXH5^>/YNTq");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      javaCharStream0.backup(588);
      javaCharStream0.bufpos = 0;
      javaCharStream0.FillBuff();
      char[] charArray0 = new char[4];
      charArray0[2] = '2';
      charArray0[1] = '2';
      charArray0[2] = '2';
      charArray0[3] = '#';
      JavaCharStream.hexval('2');
      javaCharStream0.UpdateLineColumn('2');
      javaCharStream0.adjustBeginLineColumn(94, 0);
      javaCharStream0.ReInit((Reader) stringReader0);
      javaCharStream0.ReInit((Reader) stringReader0, 0, 94);
      JavaCharStream javaCharStream1 = null;
      try {
        javaCharStream1 = new JavaCharStream((InputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Reader", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      StringReader stringReader0 = new StringReader("<-PD?G9");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      javaCharStream0.adjustBeginLineColumn((-1), (-1));
      try { 
        JavaCharStream.hexval('S');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[2] = '9';
      charArray0[1] = '9';
      charArray0[3] = '#';
      JavaCharStream.hexval('9');
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, (-1603), 0);
      javaCharStream0.backup(0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0);
      javaCharStream0.GetImage();
      javaCharStream0.backup((-1));
      try { 
        javaCharStream0.readChar();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      StringReader stringReader0 = new StringReader("c~eK)-Yi>lL2=");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)11;
      byteArray0[1] = (byte) (-58);
      byteArray0[2] = (byte)87;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)96;
      byteArray0[5] = (byte)1;
      byteArray0[6] = (byte)87;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 2, 2, 92);
      javaCharStream0.readChar();
      javaCharStream0.getEndColumn();
      javaCharStream0.readChar();
      javaCharStream0.getColumn();
      javaCharStream0.adjustBeginLineColumn(3, 276);
      char char0 = javaCharStream0.readChar();
      assertEquals(2, javaCharStream0.bufpos);
      assertEquals('e', char0);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      String string0 = "f9CRM\"KfXH5^>/YNTq";
      StringReader stringReader0 = new StringReader("f9CRM\"KfXH5^>/YNTq");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      javaCharStream0.bufpos = 0;
      javaCharStream0.FillBuff();
      javaCharStream0.BeginToken();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null, 97);
      int int0 = 4096;
      JavaCharStream javaCharStream1 = new JavaCharStream(bufferedInputStream0, 6009, 0, 4096);
      javaCharStream0.getBeginLine();
      stringReader0.read();
      javaCharStream0.ExpandBuff(false);
      JavaCharStream javaCharStream2 = new JavaCharStream(bufferedInputStream0);
      try { 
        bufferedInputStream0.reset();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Resetting to invalid mark
         //
         verifyException("java.io.BufferedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "B3c5>@3?zj8%|");
      StringReader stringReader0 = new StringReader("");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      stringReader0.reset();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "B3c5>@3?zj8%|");
      stringReader0.markSupported();
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 68, 9, 98);
      javaCharStream0.Done();
      // Undeclared exception!
      try { 
        javaCharStream0.GetSuffix(2288);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      StringReader stringReader0 = new StringReader(">s=uLo 0\"{NxrfM#Q");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-1412), 0);
      char[] charArray0 = new char[5];
      charArray0[2] = '';
      boolean boolean0 = javaCharStream0.prevCharIsLF;
      byte[] byteArray0 = new byte[18];
      byteArray0[0] = (byte)92;
      byteArray0[1] = (byte)92;
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte)92;
      byteArray0[4] = (byte)92;
      byteArray0[6] = (byte)87;
      byteArray0[7] = (byte)92;
      byteArray0[8] = (byte)92;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      JavaCharStream javaCharStream1 = new JavaCharStream(byteArrayInputStream0, 1829, 94);
      javaCharStream1.bufsize = 1829;
      javaCharStream1.backup((-3694));
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0);
      javaCharStream1.AdjustBuffSize();
      javaCharStream0.GetImage();
      javaCharStream0.backup((byte)92);
      javaCharStream1.readChar();
      javaCharStream1.ReInit((InputStream) pushbackInputStream0, (int) (byte)87, (int) (byte)92);
      char char0 = javaCharStream0.ReadByte();
      assertEquals(4003, javaCharStream0.bufpos);
      assertEquals('>', char0);
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      StringReader stringReader0 = new StringReader(">s=uLo 0\"{NxrfM#Q");
      int int0 = 0;
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-1412), 0);
      char[] charArray0 = new char[5];
      charArray0[2] = '';
      boolean boolean0 = javaCharStream0.prevCharIsLF;
      byte[] byteArray0 = new byte[18];
      byteArray0[1] = (byte)92;
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte)92;
      byteArray0[7] = (byte)92;
      byteArray0[8] = (byte)92;
      int[] intArray0 = new int[4];
      intArray0[1] = (int) (byte)92;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      JavaCharStream javaCharStream1 = new JavaCharStream(byteArrayInputStream0, (-1412), 2447);
      javaCharStream1.ReInit((Reader) stringReader0, 92, 2447, 0);
      javaCharStream1.backup((byte)92);
      javaCharStream0.readChar();
      // Undeclared exception!
      try { 
        javaCharStream1.GetImage();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      JavaCharStream javaCharStream0 = new JavaCharStream((Reader) null, 9, 745, 1);
      javaCharStream0.backup(1);
      javaCharStream0.readChar();
      javaCharStream0.getBeginLine();
      // Undeclared exception!
      try { 
        javaCharStream0.readChar();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      StringReader stringReader0 = new StringReader(">s=uLo 0\"{NxrfM#Q");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      StringReader stringReader1 = new StringReader("btM$e:5W;\"|$(`c<z");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader1);
      int int0 = JavaCharStream.hexval('D');
      assertEquals(13, int0);
      
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null);
      javaCharStream0.ReInit((InputStream) bufferedInputStream0, 1880, 13, 1880);
      assertEquals((-1), javaCharStream0.bufpos);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      StringReader stringReader0 = new StringReader(">s=uLo 0\"{NxrfM#Q");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-1412), 0);
      JavaCharStream.hexval('E');
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-81);
      byteArray0[1] = (byte)8;
      byteArray0[2] = (byte) (-48);
      byteArray0[3] = (byte) (-77);
      byteArray0[4] = (byte)117;
      byteArray0[5] = (byte)89;
      byteArray0[6] = (byte) (-106);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      JavaCharStream javaCharStream1 = new JavaCharStream(byteArrayInputStream0, (byte) (-48), (byte)117);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0);
      // Undeclared exception!
      try { 
        javaCharStream0.UpdateLineColumn('>');
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      StringReader stringReader0 = new StringReader("f9CRM\"KXH^>/YNq");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      javaCharStream0.FillBuff();
      byte byte0 = (byte)87;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)87;
      byteArray0[1] = (byte) (-14);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      JavaCharStream javaCharStream1 = new JavaCharStream(byteArrayInputStream0, (-754), (byte) (-14));
      javaCharStream0.backup((-6946));
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0);
      javaCharStream1.readChar();
      // Undeclared exception!
      try { 
        javaCharStream0.GetImage();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      StringReader stringReader0 = new StringReader("f9CRM\"KfXH5^>/YNTq");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      javaCharStream0.bufpos = 0;
      javaCharStream0.FillBuff();
      char[] charArray0 = new char[4];
      charArray0[3] = '#';
      stringReader0.read(charArray0);
      int int0 = 0;
      javaCharStream0.adjustBeginLineColumn(0, 0);
      javaCharStream0.ReInit((Reader) stringReader0);
      javaCharStream0.ReInit((Reader) stringReader0, 0, 0);
      javaCharStream0.ReInit((Reader) stringReader0, 0, 4096);
      javaCharStream0.AdjustBuffSize();
      // Undeclared exception!
      try { 
        javaCharStream0.getEndLine();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      StringReader stringReader0 = new StringReader("<-PD?G9");
      int int0 = JavaCharStream.hexval('c');
      assertEquals(12, int0);
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      StringReader stringReader0 = new StringReader("<-PD?G9");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      javaCharStream0.FillBuff();
      javaCharStream0.adjustBeginLineColumn(476, 1);
      stringReader0.reset();
      javaCharStream0.backup(476);
      char[] charArray0 = new char[0];
      stringReader0.read(charArray0);
      javaCharStream0.UpdateLineColumn('p');
      javaCharStream0.ReInit((InputStream) pipedInputStream0);
      javaCharStream0.adjustBeginLineColumn((-2695), 4081);
      javaCharStream0.ReInit((Reader) stringReader0);
      javaCharStream0.ReInit((Reader) null, (-477), 985);
      javaCharStream0.backup(0);
      javaCharStream0.ReInit((Reader) stringReader0, 476, 4081);
      javaCharStream0.AdjustBuffSize();
      // Undeclared exception!
      try { 
        javaCharStream0.getEndLine();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      StringReader stringReader0 = new StringReader("f9CRM\"KfXH5^>/YNTq");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      javaCharStream0.bufpos = 2;
      char[] charArray0 = new char[4];
      stringReader0.read(charArray0);
      javaCharStream0.prevCharIsCR = true;
      javaCharStream0.getBeginColumn();
      javaCharStream0.backup(3);
      javaCharStream0.prevCharIsLF = true;
      javaCharStream0.BeginToken();
      javaCharStream0.readChar();
      javaCharStream0.UpdateLineColumn('\u0000');
      javaCharStream0.getEndColumn();
      char char0 = javaCharStream0.readChar();
      assertEquals(2, javaCharStream0.bufpos);
      assertEquals('\u0000', char0);
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      StringReader stringReader0 = new StringReader(".");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 1455, 1455);
      javaCharStream0.getBeginLine();
      assertEquals((-1), javaCharStream0.bufpos);
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      char char0 = '|';
      try { 
        JavaCharStream.hexval('|');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      try { 
        JavaCharStream.hexval('?');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      StringReader stringReader0 = new StringReader("f9CRM\"KfXH5^>/YNTq");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      int int0 = 0;
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0);
      try { 
        JavaCharStream.hexval('`');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      JavaCharStream javaCharStream0 = new JavaCharStream((Reader) null);
      PipedInputStream pipedInputStream0 = new PipedInputStream(1);
      javaCharStream0.ReInit((InputStream) pipedInputStream0, 2353, 2353);
      // Undeclared exception!
      try { 
        javaCharStream0.UpdateLineColumn('');
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[2] = 'M';
      byte[] byteArray0 = new byte[18];
      byteArray0[2] = (byte)1;
      byteArray0[6] = (byte)1;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, 1829, 94);
      javaCharStream0.bufsize = 1829;
      javaCharStream0.backup((-3715));
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0);
      javaCharStream0.AdjustBuffSize();
      javaCharStream0.getBeginLine();
      assertEquals(3714, javaCharStream0.bufpos);
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      try { 
        JavaCharStream.hexval('M');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      StringReader stringReader0 = new StringReader("f9CRM\"KfXH5^>/YNTq");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      javaCharStream0.bufpos = 0;
      javaCharStream0.FillBuff();
      char[] charArray0 = new char[4];
      charArray0[0] = '#';
      stringReader0.read(charArray0);
      javaCharStream0.adjustBeginLineColumn(1797, 0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      javaCharStream0.getBeginColumn();
      javaCharStream0.ExpandBuff(true);
      javaCharStream0.backup(1797);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream((InputStream) null);
      JavaCharStream javaCharStream1 = new JavaCharStream(pushbackInputStream0, (-3155), (-1), 0);
      javaCharStream0.readChar();
      javaCharStream0.ReInit((Reader) null, (-477), 4073, 4073);
      assertNotSame(javaCharStream0, javaCharStream1);
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      int int0 = 904;
      stringReader0.skip((-1L));
      stringReader0.skip(0L);
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 904, 904);
      javaCharStream0.GetImage();
      // Undeclared exception!
      try { 
        javaCharStream0.getColumn();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      StringReader stringReader0 = new StringReader("f9CRM\"KfXH5^>/YNTq");
      byte[] byteArray0 = new byte[5];
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)87;
      byteArray0[3] = (byte)87;
      byteArray0[4] = (byte)1;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, 1829, (byte)1);
      javaCharStream0.backup(1829);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0);
      javaCharStream0.AdjustBuffSize();
      javaCharStream0.getBeginLine();
      javaCharStream0.FillBuff();
      javaCharStream0.GetSuffix((byte)1);
      assertEquals(2266, javaCharStream0.bufpos);
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      StringReader stringReader0 = new StringReader(">s=uLo 0\"{NxrfM#Q");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      StringReader stringReader1 = new StringReader("btM$e:5W;\"|$(`c<z");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader1);
      javaCharStream0.inputStream = (Reader) stringReader1;
      try { 
        JavaCharStream.hexval('S');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      try { 
        JavaCharStream.hexval('I');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      StringReader stringReader0 = new StringReader("<-PD?G9");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      javaCharStream0.FillBuff();
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0);
      javaCharStream1.Done();
      try { 
        JavaCharStream.hexval('T');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      StringReader stringReader0 = new StringReader("<-PD?G9");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)11;
      byteArray0[1] = (byte)1;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      JavaCharStream javaCharStream1 = new JavaCharStream(byteArrayInputStream0, (byte)11, 550);
      JavaCharStream javaCharStream2 = new JavaCharStream(byteArrayInputStream0, 94, (-1));
      javaCharStream2.backup((-3694));
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte)1;
      byteArray1[1] = (byte)11;
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray1);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream1);
      javaCharStream1.GetImage();
      javaCharStream1.backup((-2849));
      javaCharStream1.readChar();
      javaCharStream2.ReInit((InputStream) pushbackInputStream0, (-115), 9);
      assertEquals(0, byteArrayInputStream0.available());
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      StringReader stringReader0 = new StringReader("<-PD?G9");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      byte[] byteArray0 = new byte[2];
      boolean boolean0 = javaCharStream0.prevCharIsLF;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      JavaCharStream javaCharStream1 = new JavaCharStream(byteArrayInputStream0, 1829, (-4592));
      JavaCharStream javaCharStream2 = new JavaCharStream(byteArrayInputStream0, 8, (-1));
      javaCharStream2.ReInit((Reader) stringReader0);
      javaCharStream2.backup((byte)92);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0);
      javaCharStream2.readChar();
      javaCharStream1.GetImage();
      javaCharStream0.backup(0);
      javaCharStream2.readChar();
      javaCharStream0.ReInit((InputStream) pushbackInputStream0, (int) (byte)92, (int) (byte)87);
      javaCharStream1.readChar();
      javaCharStream0.ReInit((InputStream) byteArrayInputStream0, (-1), 0, 0);
      javaCharStream2.getBeginColumn();
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(4005, javaCharStream2.bufpos);
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      StringReader stringReader0 = new StringReader("f9CRM\"KfXH5^>/YNTq");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      try { 
        JavaCharStream.hexval('Q');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      try { 
        JavaCharStream.hexval('\\');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      StringReader stringReader0 = new StringReader("<-PD?G9");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      JavaCharStream.hexval('f');
      // Undeclared exception!
      try { 
        javaCharStream0.UpdateLineColumn('C');
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      StringReader stringReader0 = new StringReader("f9CRM\"KfXH5^>/YNTq");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      javaCharStream0.bufpos = 8;
      javaCharStream0.FillBuff();
      StringReader stringReader1 = new StringReader("f9CRM\"KfXH5^>/YNTq");
      javaCharStream0.ReInit((Reader) stringReader1);
      javaCharStream0.readChar();
      javaCharStream0.GetImage();
      try { 
        javaCharStream0.FillBuff();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      int int0 = JavaCharStream.hexval('4');
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      StringReader stringReader0 = new StringReader(" column ");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      javaCharStream0.FillBuff();
      stringReader0.ready();
      javaCharStream0.backup(1);
      javaCharStream0.readChar();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      StringReader stringReader1 = new StringReader(" column ");
      // Undeclared exception!
      try { 
        javaCharStream0.ReInit((Reader) stringReader1, 1, (-130), (-130));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      JavaCharStream.hexval('3');
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte)87;
      byteArray1[1] = (byte)87;
      byteArray1[2] = (byte)78;
      byteArray1[3] = (byte) (-44);
      byteArray1[4] = (byte)87;
      byteArray1[5] = (byte)87;
      byteArray1[6] = (byte)87;
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray1);
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, 101, (-1));
      javaCharStream0.backup((-533));
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0);
      javaCharStream0.GetImage();
      javaCharStream0.backup((-1));
      try { 
        javaCharStream0.readChar();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      StringReader stringReader0 = new StringReader(">s=uLo 0\"{NxrfM#Q");
      int int0 = (-1412);
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-1412), 0);
      JavaCharStream.hexval('E');
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-81);
      char char0 = '>';
      try { 
        JavaCharStream.hexval('>');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      StringReader stringReader0 = new StringReader(">s=uLo 0\"{NxrfM#Q");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-1412), 0);
      char[] charArray0 = new char[6];
      charArray0[2] = '';
      charArray0[3] = '\u0000';
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)92;
      stringReader0.read(charArray0);
      javaCharStream0.adjustBeginLineColumn((-2115), (-408));
      javaCharStream0.BeginToken();
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0);
      StringReader stringReader1 = new StringReader("w.-L-V`$ne1");
      javaCharStream1.ReInit((Reader) stringReader1, (int) (byte)1, 15);
      javaCharStream1.readChar();
      javaCharStream0.getLine();
      assertEquals((-2114), javaCharStream0.getBeginLine());
      
      String string0 = javaCharStream1.GetImage();
      assertEquals("w", string0);
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      StringReader stringReader0 = new StringReader("R{ 6v6o?U~8");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 0, 0);
      int int0 = 390;
      javaCharStream0.ReInit((Reader) stringReader0, 0, (-1), 390);
      stringReader0.read();
      // Undeclared exception!
      try { 
        javaCharStream0.UpdateLineColumn('1');
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      StringReader stringReader0 = new StringReader("f9CRM\"KXH^>/YNq");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      javaCharStream0.FillBuff();
      javaCharStream0.ReInit((Reader) stringReader0);
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "f9CRM\"KXH^>/YNq", 1, 1);
      stringReader0.read(charBuffer0);
      javaCharStream0.backup(1);
      javaCharStream0.BeginToken();
      try { 
        javaCharStream0.readChar();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)89;
      byteArray0[1] = (byte) (-48);
      byteArray0[2] = (byte)3;
      byteArray0[3] = (byte) (-7);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)110;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte) (-1);
      byteArray0[8] = (byte) (-1);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-1022), 14);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0);
      JavaCharStream javaCharStream0 = new JavaCharStream(pushbackInputStream0);
      assertEquals((-1), javaCharStream0.bufpos);
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      StringReader stringReader0 = new StringReader("f9CRM\"KfXH5^>/YNTq");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-114);
      byteArray0[1] = (byte) (-114);
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte) (-114);
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte) (-114);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      JavaCharStream javaCharStream1 = new JavaCharStream(byteArrayInputStream0, (byte) (-114), (byte) (-114));
      javaCharStream0.ReInit((Reader) stringReader0);
      javaCharStream1.BeginToken();
      byteArrayInputStream0.reset();
      javaCharStream0.BeginToken();
      javaCharStream1.backup((-3450));
      javaCharStream1.readChar();
      javaCharStream1.GetImage();
      javaCharStream0.GetImage();
      javaCharStream1.BeginToken();
      int int0 = javaCharStream1.getBeginLine();
      assertEquals(0, javaCharStream1.bufpos);
      assertEquals((-114), int0);
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      JavaCharStream javaCharStream0 = new JavaCharStream(pipedInputStream0, 478, 478);
      javaCharStream0.getBeginLine();
      assertEquals((-1), javaCharStream0.bufpos);
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      int int0 = JavaCharStream.hexval('B');
      assertEquals(11, int0);
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      StringReader stringReader0 = new StringReader("<-PD?G9");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-44);
      byteArray0[1] = (byte) (-44);
      byteArray0[2] = (byte) (-44);
      byteArray0[3] = (byte) (-44);
      byteArray0[4] = (byte) (-44);
      byteArray0[5] = (byte) (-44);
      byteArray0[6] = (byte) (-44);
      byteArray0[7] = (byte) (-44);
      byteArray0[8] = (byte) (-44);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, 92, (byte) (-44));
      javaCharStream0.backup((byte) (-44));
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(pipedInputStream0);
      javaCharStream0.GetImage();
      javaCharStream0.backup(1661);
      javaCharStream0.readChar();
      javaCharStream0.ReInit((InputStream) pushbackInputStream0, 1, 639);
      StringReader stringReader1 = new StringReader("jn&:\"A_,>34~)Aby~");
      javaCharStream0.ReInit((Reader) stringReader1);
      javaCharStream0.getBeginLine();
      javaCharStream0.BeginToken();
      try { 
        JavaCharStream.hexval(']');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      String string0 = ">s=uLo 0\"{NxrfM#Q";
      StringReader stringReader0 = new StringReader(">s=uLo 0\"{NxrfM#Q");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JavaCharStream.hexval('e');
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)85;
      byteArray0[1] = (byte)85;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)85;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream0.reset();
      try { 
        JavaCharStream.hexval('n');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      JavaCharStream javaCharStream0 = null;
      try {
        javaCharStream0 = new JavaCharStream((Reader) null, (-1), (-1443), (-1443));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      StringReader stringReader0 = new StringReader("com.soops.CEN4010.JMCA.JParser.JavaCharStream");
      JavaCharStream.hexval('8');
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      javaCharStream0.adjustBeginLineColumn(8, (byte)81);
      assertEquals(81, javaCharStream0.getBeginColumn());
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      StringReader stringReader0 = new StringReader(">s=uLo 0\"{NxrfM#Q");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-1412), 0);
      char[] charArray0 = new char[5];
      charArray0[2] = '';
      charArray0[3] = '\u0000';
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)92;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)64;
      byteArray0[3] = (byte)16;
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte)86;
      javaCharStream0.BeginToken();
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0);
      PipedInputStream pipedInputStream0 = new PipedInputStream(6);
      JavaCharStream javaCharStream2 = new JavaCharStream(pipedInputStream0, 4072, (byte)92, (-151));
      // Undeclared exception!
      try { 
        javaCharStream2.GetSuffix((-1563));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      JavaCharStream javaCharStream0 = new JavaCharStream(pipedInputStream0, 717, 1, 1);
      javaCharStream0.GetImage();
      try { 
        javaCharStream0.ReadByte();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      StringReader stringReader0 = new StringReader(">s=uLo 0\"{NxrfM#Q");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-1412), 0);
      char[] charArray0 = new char[5];
      charArray0[2] = '';
      boolean boolean0 = javaCharStream0.prevCharIsLF;
      JavaCharStream.hexval('f');
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)1;
      byteArray0[3] = (byte)85;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream0.close();
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0);
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      StringReader stringReader0 = new StringReader("f9CRM\"KfXH5^>/YNTq");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      javaCharStream0.bufpos = 2;
      javaCharStream0.FillBuff();
      char[] charArray0 = new char[4];
      charArray0[3] = '#';
      stringReader0.read(charArray0);
      javaCharStream0.prevCharIsCR = true;
      javaCharStream0.adjustBeginLineColumn(1797, 0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      javaCharStream0.getBeginColumn();
      javaCharStream0.ExpandBuff(true);
      javaCharStream0.UpdateLineColumn('0');
      javaCharStream0.readChar();
      // Undeclared exception!
      try { 
        javaCharStream0.ReInit((InputStream) null, 0, 0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Reader", e);
      }
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      StringReader stringReader0 = new StringReader(">s=uLo 0\"{NxrfM#Q");
      char[] charArray0 = new char[5];
      charArray0[0] = 'x';
      charArray0[1] = 'q';
      charArray0[2] = '';
      charArray0[3] = 'X';
      charArray0[4] = '0';
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-87);
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte) (-114);
      byteArray0[3] = (byte) (-114);
      byteArray0[4] = (byte)91;
      byteArray0[5] = (byte)0;
      byteArray0[4] = (byte) (-53);
      byteArray0[7] = (byte)89;
      byteArray0[8] = (byte)78;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, (byte) (-114), (-2265));
      javaCharStream0.nextCharBuf = charArray0;
      javaCharStream0.backup(10);
      javaCharStream0.readChar();
      javaCharStream0.ReInit((InputStream) byteArrayInputStream0, (int) (byte) (-53), (int) (byte)0, (int) (byte)89);
      assertEquals((-1), javaCharStream0.bufpos);
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      StringReader stringReader0 = new StringReader("com.soops.CEN4010.JMCA.JParser.JavaCharStream");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (byte)81, (byte)81, (byte)81);
      StringReader stringReader1 = new StringReader("com.soops.CEN4010.JMCA.JParser.JavaCharStream");
      javaCharStream0.ExpandBuff(false);
      // Undeclared exception!
      try { 
        javaCharStream0.ExpandBuff(true);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      StringReader stringReader0 = new StringReader("f9RM\"KfXH5^>YNTq");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      javaCharStream0.bufpos = 0;
      javaCharStream0.FillBuff();
      char[] charArray0 = new char[4];
      charArray0[3] = '#';
      stringReader0.read(charArray0);
      stringReader0.read(charArray0);
      javaCharStream0.adjustBeginLineColumn((-2115), (-1));
      javaCharStream0.BeginToken();
      StringReader stringReader1 = new StringReader("f9RM\"KfXH5^>YNTq");
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader1);
      PipedInputStream pipedInputStream0 = new PipedInputStream(5);
      pipedInputStream0.close();
      JavaCharStream javaCharStream2 = new JavaCharStream(pipedInputStream0, (-1), (-1), 2096);
      javaCharStream2.available = 0;
      javaCharStream0.BeginToken();
      int int0 = javaCharStream0.getEndColumn();
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      StringReader stringReader0 = new StringReader("iw`2<d]M<");
      int int0 = (-1);
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-1), (-1));
      // Undeclared exception!
      try { 
        javaCharStream0.getLine();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      try { 
        JavaCharStream.hexval('W');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      StringReader stringReader0 = new StringReader("<-PD?G9");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)11;
      byteArray0[1] = (byte)1;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      JavaCharStream javaCharStream1 = new JavaCharStream(byteArrayInputStream0, (byte)11, 550);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      JavaCharStream javaCharStream2 = new JavaCharStream(byteArrayInputStream0, 82, 82);
      javaCharStream0.BeginToken();
      char char0 = javaCharStream2.readChar();
      assertEquals(0, javaCharStream2.bufpos);
      assertEquals('\u000B', char0);
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      JavaCharStream javaCharStream0 = new JavaCharStream((Reader) null, 745, 745, 745);
      javaCharStream0.backup(4093);
      // Undeclared exception!
      try { 
        javaCharStream0.readChar();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -3348
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 949, 949);
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        javaCharStream0.ExpandBuff(true);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      try { 
        JavaCharStream.hexval('L');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      JavaCharStream.hexval('9');
      JavaCharStream.hexval('2');
      try { 
        JavaCharStream.hexval('W');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      String string0 = javaCharStream0.GetImage();
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      StringReader stringReader0 = new StringReader(">s=uLo 0\"{NxrfM#{Q");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 1402, 1402);
      byte byte0 = (byte) (-87);
      try { 
        JavaCharStream.hexval('^');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      StringReader stringReader0 = new StringReader("<-PD?G9");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      try { 
        JavaCharStream.hexval('?');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[2] = '';
      byte byte0 = (byte) (-114);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-114);
      byteArray0[1] = (byte) (-114);
      byteArray0[2] = (byte)1;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, (-2337), (-2593));
      javaCharStream0.ReInit((Reader) null);
      int int0 = 8;
      // Undeclared exception!
      try { 
        javaCharStream0.BeginToken();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      StringReader stringReader0 = new StringReader(">s=uLo 0\"{NxrfM#Q");
      char[] charArray0 = new char[4];
      charArray0[0] = ']';
      charArray0[1] = '^';
      charArray0[2] = 'A';
      charArray0[3] = 'B';
      stringReader0.read(charArray0, 0, 0);
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-1412), 0);
      char[] charArray1 = new char[5];
      charArray1[0] = 'x';
      stringReader0.skip((-1));
      charArray1[2] = '';
      charArray1[3] = '\u0000';
      javaCharStream0.ReadByte();
      charArray1[4] = '0';
      javaCharStream0.BeginToken();
      try { 
        JavaCharStream.hexval('');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      StringReader stringReader0 = new StringReader(">s=uLo 0\"{NxrfM#Q");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-1412), 0);
      char[] charArray0 = new char[5];
      charArray0[2] = '';
      boolean boolean0 = javaCharStream0.prevCharIsLF;
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)92;
      byteArray0[1] = (byte)92;
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte)92;
      byteArray0[4] = (byte)92;
      byteArray0[5] = (byte)1;
      byteArray0[6] = (byte)87;
      byteArray0[7] = (byte)92;
      byteArray0[8] = (byte)92;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      JavaCharStream javaCharStream1 = new JavaCharStream(byteArrayInputStream0, 1829, 94);
      javaCharStream1.backup((-3694));
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0);
      javaCharStream0.GetImage();
      javaCharStream0.backup((byte)92);
      javaCharStream1.readChar();
      javaCharStream1.ReInit((InputStream) pushbackInputStream0, (int) (byte)87, (int) (byte)92);
      assertEquals(0, byteArrayInputStream0.available());
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      StringReader stringReader0 = new StringReader("<-PD?G9");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      stringReader0.mark(36);
      javaCharStream0.FillBuff();
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0);
      assertEquals((-1), javaCharStream1.bufpos);
      
      int int0 = JavaCharStream.hexval('a');
      assertEquals(10, int0);
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      try { 
        JavaCharStream.hexval('>');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }
}
