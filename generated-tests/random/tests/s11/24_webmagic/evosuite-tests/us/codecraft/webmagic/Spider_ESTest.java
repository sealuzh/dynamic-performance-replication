/*
 * This file was automatically generated by EvoSuite
 * Fri Mar 22 19:51:03 GMT 2019
 */

package us.codecraft.webmagic;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import ch.qos.logback.classic.Logger;
import java.util.Collection;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.concurrent.BlockingQueue;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.ForkJoinPool;
import java.util.concurrent.ForkJoinTask;
import java.util.concurrent.LinkedBlockingQueue;
import java.util.concurrent.ScheduledThreadPoolExecutor;
import java.util.concurrent.ThreadPoolExecutor;
import java.util.concurrent.TimeUnit;
import java.util.function.Predicate;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.lang.MockThread;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import us.codecraft.webmagic.Page;
import us.codecraft.webmagic.Request;
import us.codecraft.webmagic.ResultItems;
import us.codecraft.webmagic.Site;
import us.codecraft.webmagic.Spider;
import us.codecraft.webmagic.SpiderListener;
import us.codecraft.webmagic.Task;
import us.codecraft.webmagic.downloader.Downloader;
import us.codecraft.webmagic.downloader.PhantomJSDownloader;
import us.codecraft.webmagic.monitor.SpiderMonitor;
import us.codecraft.webmagic.pipeline.CollectorPipeline;
import us.codecraft.webmagic.pipeline.ConsolePipeline;
import us.codecraft.webmagic.pipeline.FilePipeline;
import us.codecraft.webmagic.pipeline.JsonFilePipeline;
import us.codecraft.webmagic.pipeline.Pipeline;
import us.codecraft.webmagic.pipeline.ResultItemsCollectorPipeline;
import us.codecraft.webmagic.processor.PageProcessor;
import us.codecraft.webmagic.processor.SimplePageProcessor;
import us.codecraft.webmagic.scheduler.DuplicateRemovedScheduler;
import us.codecraft.webmagic.scheduler.FileCacheQueueScheduler;
import us.codecraft.webmagic.scheduler.PriorityScheduler;
import us.codecraft.webmagic.scheduler.QueueScheduler;
import us.codecraft.webmagic.scheduler.Scheduler;
import us.codecraft.webmagic.scheduler.component.HashSetDuplicateRemover;
import us.codecraft.webmagic.selector.Json;
import us.codecraft.webmagic.selector.JsonPathSelector;
import us.codecraft.webmagic.selector.RegexSelector;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Spider_ESTest extends Spider_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      String string0 = "us.codecraft.webmagic.pipeline.ConsolePipeline";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("us.codecraft.webmagic.pipeline.ConsolePipeline");
      Spider spider0 = Spider.create(simplePageProcessor0);
      int int0 = 3703;
      Spider spider1 = spider0.thread(3703);
      boolean boolean0 = true;
      Spider spider2 = spider1.setExitWhenComplete(true);
      ForkJoinTask.getPool();
      Spider spider3 = spider2.thread((ExecutorService) null, 3703);
      Spider spider4 = spider3.clearPipeline();
      String string1 = "us.codecraft.webmagic.downloader.HttpClientDownloader";
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("us.codecraft.webmagic.pipeline.ConsolePipeline", "us.codecraft.webmagic.downloader.HttpClientDownloader");
      Spider spider5 = spider4.setDownloader(phantomJSDownloader0);
      spider5.thread(3703);
      spider0.isExitWhenComplete();
      spider3.run();
      String[] stringArray0 = new String[3];
      spider1.executorService = (ExecutorService) null;
      Request request0 = new Request();
      // Undeclared exception!
      try { 
        phantomJSDownloader0.download(request0, (Task) spider1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.downloader.PhantomJSDownloader", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("q~xroIm*tr");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "q~xroIm*tr");
      Spider spider0 = Spider.create(simplePageProcessor0);
      spider0.getStatus();
      Page page0 = Page.fail();
      // Undeclared exception!
      try { 
        spider0.extractAndAddRequests(page0, true);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/collections/CollectionUtils
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("J82 E`]3");
      Spider spider0 = Spider.create(simplePageProcessor0);
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      Spider spider1 = spider0.scheduler(priorityScheduler0);
      Spider spider2 = spider1.setSpawnUrl(false);
      Spider spider3 = spider2.thread(5);
      Locale locale0 = Locale.CHINA;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      locale0.getUnicodeLocaleKeys();
      spider3.start();
      spider1.start();
      spider1.uuid = "invalid regex";
      ForkJoinTask.getPool();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "J82 E`]3";
      stringArray0[1] = "2DT";
      Page page0 = Page.fail();
      spider0.extractAndAddRequests(page0, false);
      // Undeclared exception!
      try { 
        spider2.downloader((Downloader) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Spider is already running!
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Spider spider1 = spider0.setUUID(" stop fail!");
      ResultItemsCollectorPipeline resultItemsCollectorPipeline0 = new ResultItemsCollectorPipeline();
      Spider spider2 = spider1.pipeline(resultItemsCollectorPipeline0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Spider spider3 = spider2.scheduler((Scheduler) null);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader(" stop fail!", "[9\"fA4{X&O6_");
      PhantomJSDownloader phantomJSDownloader1 = phantomJSDownloader0.setRetryNum((-2115));
      spider3.setDownloader(phantomJSDownloader1);
      Page page0 = new Page();
      spider1.scheduler((Scheduler) null);
      // Undeclared exception!
      try { 
        simplePageProcessor0.process(page0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/jsoup/nodes/Node
         //
         verifyException("us.codecraft.webmagic.Page", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("crawl.js ");
      Spider spider0 = new Spider(simplePageProcessor0);
      Spider spider1 = spider0.clearPipeline();
      Spider spider2 = spider1.setExecutorService((ExecutorService) null);
      Spider spider3 = spider2.thread((ExecutorService) null, 200);
      LinkedList<SpiderListener> linkedList0 = new LinkedList<SpiderListener>();
      Spider spider4 = spider3.setSpiderListeners(linkedList0);
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      Spider spider5 = spider4.scheduler(priorityScheduler0);
      spider5.getStartTime();
      assertEquals(0L, spider5.getPageCount());
      assertTrue(spider5.isExitWhenComplete());
      assertTrue(spider5.isSpawnUrl());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Spider.Status.fromValue(39);
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("o~<g&H");
      Spider spider0 = new Spider(simplePageProcessor0);
      ConsolePipeline consolePipeline0 = new ConsolePipeline();
      Spider spider1 = spider0.pipeline(consolePipeline0);
      Spider spider2 = spider1.setExitWhenComplete(true);
      Spider spider3 = spider2.clearPipeline();
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("o~<g&H", "o~<g&H");
      PhantomJSDownloader phantomJSDownloader1 = phantomJSDownloader0.setRetryNum(2496);
      Spider spider4 = spider3.setDownloader(phantomJSDownloader1);
      LinkedList<Request> linkedList0 = new LinkedList<Request>();
      Spider spider5 = spider4.startRequest(linkedList0);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "o~<g&H";
      stringArray0[1] = "o~<g&H";
      stringArray0[2] = "o~<g&H";
      stringArray0[3] = "o~<g&H";
      stringArray0[4] = "o~<g&H";
      stringArray0[5] = "o~<g&H";
      stringArray0[6] = "t_V:C*!qK/[qoL=";
      // Undeclared exception!
      try { 
        spider5.test(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.downloader.PhantomJSDownloader", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("us.codecraft.webmagic.Spider$Status");
      Spider spider0 = Spider.create(simplePageProcessor0);
      ForkJoinTask.getPool();
      Spider spider1 = spider0.setExecutorService((ExecutorService) null);
      JsonFilePipeline jsonFilePipeline0 = new JsonFilePipeline("mZ(9ago6ne7H0&:s 4");
      Spider spider2 = spider1.addPipeline(jsonFilePipeline0);
      LinkedList<Pipeline> linkedList0 = new LinkedList<Pipeline>();
      Spider spider3 = spider2.setPipelines(linkedList0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("mZ(9ago6ne7H0&:s 4", "us.codecraft.webmagic.Spider$Status");
      Spider spider4 = spider3.setDownloader(phantomJSDownloader0);
      LinkedList<Request> linkedList1 = new LinkedList<Request>();
      Spider spider5 = spider4.startRequest(linkedList1);
      spider5.getSpiderListeners();
      LinkedList<String> linkedList2 = new LinkedList<String>();
      spider4.getAll((Collection<String>) linkedList2);
      assertEquals(Spider.Status.Stopped, spider1.getStatus());
      assertEquals(1, linkedList0.size());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String string0 = "f";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("f");
      Spider spider0 = Spider.create(simplePageProcessor0);
      SpiderMonitor spiderMonitor0 = SpiderMonitor.instance();
      SpiderMonitor.MonitorSpiderListener spiderMonitor_MonitorSpiderListener0 = spiderMonitor0.new MonitorSpiderListener();
      List<String> list0 = spiderMonitor_MonitorSpiderListener0.getErrorUrls();
      Site site0 = new Site();
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      Site site1 = site0.setAcceptStatCode(linkedHashSet0);
      Site site2 = site1.setCycleRetryTimes((-2529));
      String string1 = "";
      Site site3 = site2.setDomain("");
      Site site4 = site3.setTimeOut((-933));
      String string2 = "us.codecraft.webmagic.Spider$Status";
      String string3 = "";
      site3.addHeader("us.codecraft.webmagic.Spider$Status", "");
      Site site5 = site4.setDisableCookieManagement(false);
      spider0.site = site5;
      Spider spider1 = spider0.startUrls(list0);
      spider1.isSpawnUrl();
      spider0.getSpiderListeners();
      site2.setDisableCookieManagement(true);
      Spider spider2 = spider0.setSpiderListeners((List<SpiderListener>) null);
      spider2.clearPipeline();
      PhantomJSDownloader phantomJSDownloader0 = null;
      try {
        phantomJSDownloader0 = new PhantomJSDownloader();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = new Spider(simplePageProcessor0);
      spider0.setEmptySleepTime((-1658));
      FilePipeline filePipeline0 = new FilePipeline("i EO8BrE?7#)");
      Spider spider1 = spider0.pipeline(filePipeline0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      LinkedList<Request> linkedList0 = new LinkedList<Request>();
      Spider spider2 = spider1.startRequest(linkedList0);
      Spider spider3 = spider2.setUUID("i EO8BrE?7#)");
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("");
      Predicate<Request> predicate0 = Predicate.isEqual((Object) "i EO8BrE?7#)");
      linkedList0.removeIf(predicate0);
      HashSetDuplicateRemover hashSetDuplicateRemover0 = new HashSetDuplicateRemover();
      hashSetDuplicateRemover0.resetDuplicateCheck(spider0);
      DuplicateRemovedScheduler duplicateRemovedScheduler0 = fileCacheQueueScheduler0.setDuplicateRemover(hashSetDuplicateRemover0);
      Spider spider4 = spider3.setScheduler(duplicateRemovedScheduler0);
      Spider spider5 = Spider.create(simplePageProcessor0);
      fileCacheQueueScheduler0.poll(spider5);
      Spider spider6 = spider4.setExitWhenComplete(false);
      spider6.start();
      spider4.getThreadAlive();
      System.setCurrentTimeMillis(0);
      SimplePageProcessor simplePageProcessor1 = new SimplePageProcessor("_cycle_tried_times");
      Spider.create(simplePageProcessor1);
      spider6.getThreadAlive();
      Spider spider7 = spider3.setSpawnUrl(true);
      // Undeclared exception!
      try { 
        spider7.close();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("*s\"ME");
      Spider spider0 = Spider.create(simplePageProcessor0);
      spider0.checkIfRunning();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "*s\"ME");
      ThreadPoolExecutor.AbortPolicy threadPoolExecutor_AbortPolicy0 = new ThreadPoolExecutor.AbortPolicy();
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(3846, threadPoolExecutor_AbortPolicy0);
      Spider spider1 = spider0.thread((ExecutorService) scheduledThreadPoolExecutor0, 1998);
      Request[] requestArray0 = new Request[0];
      Spider spider2 = spider1.addRequest(requestArray0);
      spider2.start();
      spider0.start();
      scheduledThreadPoolExecutor0.setRejectedExecutionHandler(threadPoolExecutor_AbortPolicy0);
      spider2.getScheduler();
      spider2.clearPipeline();
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      Page page0 = Page.fail();
      spider1.extractAndAddRequests(page0, false);
      priorityScheduler0.poll(spider0);
      // Undeclared exception!
      try { 
        spider2.onSuccess((Request) null);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/collections/CollectionUtils
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("*");
      Spider spider0 = Spider.create(simplePageProcessor0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader(";wJv-x,", "*");
      Spider spider1 = spider0.setDownloader(phantomJSDownloader0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Json json0 = new Json(linkedList0);
      Class<SpiderListener> class0 = SpiderListener.class;
      json0.toList(class0);
      Spider spider2 = spider1.setSpiderListeners((List<SpiderListener>) null);
      Spider spider3 = spider2.setUUID(";wJv-x,");
      Class<Pipeline> class1 = Pipeline.class;
      json0.toList(class1);
      Spider spider4 = spider3.setPipelines((List<Pipeline>) null);
      Spider spider5 = spider4.setExitWhenComplete(true);
      boolean boolean0 = spider5.isExitWhenComplete();
      assertEquals(0L, spider5.getPageCount());
      assertTrue(spider5.isSpawnUrl());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("Init");
      Spider spider0 = Spider.create(simplePageProcessor0);
      FilePipeline filePipeline0 = new FilePipeline("Init");
      Spider spider1 = spider0.addPipeline(filePipeline0);
      Spider spider2 = spider1.thread(1780);
      Spider spider3 = spider2.downloader((Downloader) null);
      LinkedList<Request> linkedList0 = new LinkedList<Request>();
      spider3.startRequest(linkedList0);
      // Undeclared exception!
      try { 
        spider1.getAll((Collection<String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("Init");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Spider spider1 = spider0.setExitWhenComplete(true);
      spider1.getScheduler();
      spider1.setUUID("W+X");
      Page page0 = new Page();
      boolean boolean0 = false;
      Page page1 = page0.setSkip(false);
      Request request0 = new Request();
      Request request1 = request0.setPriority(10L);
      Request request2 = request1.addHeader("Init", (String) null);
      Request request3 = request2.setUrl((String) null);
      ResultItems resultItems0 = new ResultItems();
      ResultItems resultItems1 = resultItems0.put("Init", (ResultItemsCollectorPipeline) null);
      Map<String, Object> map0 = resultItems1.getAll();
      Request request4 = request3.setExtras(map0);
      page1.setRequest(request4);
      // Undeclared exception!
      try { 
        spider1.run();
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/http/protocol/HttpContext
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Spider.Status.fromValue(3703);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String string0 = "Le3p]6XF;G~h<";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("Le3p]6XF;G~h<");
      Spider spider0 = new Spider(simplePageProcessor0);
      ConsolePipeline consolePipeline0 = new ConsolePipeline();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Le3p]6XF;G~h<");
      spider0.pipeline(consolePipeline0);
      JsonPathSelector jsonPathSelector0 = null;
      try {
        jsonPathSelector0 = new JsonPathSelector("Le3p]6XF;G~h<");
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // com/jayway/jsonpath/Predicate
         //
         verifyException("us.codecraft.webmagic.selector.JsonPathSelector", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("6{7");
      Spider spider0 = Spider.create(simplePageProcessor0);
      ResultItemsCollectorPipeline resultItemsCollectorPipeline0 = new ResultItemsCollectorPipeline();
      Site site0 = spider0.getSite();
      spider0.site = site0;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)2;
      ResultItems resultItems0 = new ResultItems();
      Request request0 = new Request("6{7");
      Request request1 = request0.setUrl("6{7");
      Request request2 = request1.setCharset("6{7");
      ResultItems resultItems1 = resultItems0.setRequest(request2);
      resultItems1.setRequest(request1);
      resultItemsCollectorPipeline0.process(resultItems1, spider0);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Spider spider1 = spider0.addPipeline(resultItemsCollectorPipeline0);
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("6{7");
      Spider spider2 = spider1.scheduler(fileCacheQueueScheduler0);
      Spider spider3 = spider2.setScheduler(fileCacheQueueScheduler0);
      Request[] requestArray0 = new Request[1];
      Request request3 = new Request();
      requestArray0[0] = request3;
      Spider spider4 = spider3.addRequest(requestArray0);
      spider4.setExitWhenComplete(true);
      spider0.pipeline(resultItemsCollectorPipeline0);
      Locale locale0 = Locale.FRENCH;
      PhantomJSDownloader phantomJSDownloader0 = null;
      try {
        phantomJSDownloader0 = new PhantomJSDownloader();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("_");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Spider spider1 = spider0.setExecutorService((ExecutorService) null);
      spider1.sleep(777);
      // Undeclared exception!
      try { 
        spider0.close();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("&A\"Nz");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Spider spider1 = spider0.setUUID("&A\"Nz");
      Spider spider2 = spider1.thread(4);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("&A\"Nz", (String) null);
      PhantomJSDownloader phantomJSDownloader1 = phantomJSDownloader0.setRetryNum(4);
      Spider spider3 = spider2.downloader(phantomJSDownloader1);
      Request[] requestArray0 = new Request[2];
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      priorityScheduler0.poll(spider0);
      requestArray0[0] = null;
      Request request0 = new Request();
      spider2.exitWhenComplete = true;
      requestArray0[1] = request0;
      // Undeclared exception!
      try { 
        spider3.addRequest(requestArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.scheduler.DuplicateRemovedScheduler", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      String string0 = "us.codecraft.webmagic.scheduler.PriorityScheduler$1";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("us.codecraft.webmagic.scheduler.PriorityScheduler$1");
      Spider spider0 = Spider.create(simplePageProcessor0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      ForkJoinPool forkJoinPool0 = ForkJoinPool.commonPool();
      Spider spider1 = spider0.setExecutorService(forkJoinPool0);
      // Undeclared exception!
      try { 
        spider1.thread((ExecutorService) forkJoinPool0, (-547));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // threadNum should be more than one!
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      int int0 = 2;
      Spider.Status.fromValue(2);
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = new Spider(simplePageProcessor0);
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      Spider spider1 = spider0.setScheduler(priorityScheduler0);
      Spider spider2 = spider1.scheduler(priorityScheduler0);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "";
      // Undeclared exception!
      try { 
        spider2.addUrl(stringArray0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      String string0 = "76BST{;";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("76BST{;");
      Spider spider0 = new Spider(simplePageProcessor0);
      LinkedList<Request> linkedList0 = new LinkedList<Request>();
      Spider spider1 = spider0.startRequest(linkedList0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JsonFilePipeline jsonFilePipeline0 = new JsonFilePipeline("SE[Sf*7>jE}X<+X");
      Spider spider2 = spider1.pipeline(jsonFilePipeline0);
      linkedList0.removeFirstOccurrence(spider2);
      spider2.getThreadAlive();
      spider0.runAsync();
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      // Undeclared exception!
      try { 
        spider0.thread(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // threadNum should be more than one!
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      String string0 = "(*BI";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("(*BI");
      Spider spider0 = new Spider(simplePageProcessor0);
      spider0.getSpiderListeners();
      Spider spider1 = spider0.setSpiderListeners((List<SpiderListener>) null);
      Spider spider2 = spider1.thread(6);
      spider2.pipeline((Pipeline) null);
      Request[] requestArray0 = new Request[3];
      Request request0 = new Request();
      // Undeclared exception!
      try { 
        spider1.get("_cycle_tried_times");
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("yFKP@?_yA%vppi");
      Spider spider0 = new Spider(simplePageProcessor0);
      Spider spider1 = spider0.setSpawnUrl(true);
      Spider spider2 = spider1.setUUID("yFKP@?_yA%vppi");
      ForkJoinPool.ForkJoinWorkerThreadFactory forkJoinPool_ForkJoinWorkerThreadFactory0 = ForkJoinPool.defaultForkJoinWorkerThreadFactory;
      spider0.getUUID();
      MockThread mockThread0 = new MockThread(spider1, "V)bjB3N$bo:");
      Thread.UncaughtExceptionHandler thread_UncaughtExceptionHandler0 = mockThread0.getUncaughtExceptionHandler();
      ForkJoinPool forkJoinPool0 = new ForkJoinPool(2, forkJoinPool_ForkJoinWorkerThreadFactory0, thread_UncaughtExceptionHandler0, true);
      Spider spider3 = spider2.thread((ExecutorService) forkJoinPool0, 2);
      Page page0 = Page.fail();
      List<Request> list0 = page0.getTargetRequests();
      spider3.startRequest(list0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)57;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "V)bjB3N$bo:";
      stringArray0[1] = "yFKP@?_yA%vppi";
      stringArray0[2] = "yFKP@?_yA%vppi";
      stringArray0[3] = "V)bjB3N$bo:";
      // Undeclared exception!
      try { 
        spider2.addUrl(stringArray0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      String string0 = "C,^V=3+#F[<pV";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("C,^V=3+#F[<pV");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Request[] requestArray0 = new Request[0];
      spider0.addRequest(requestArray0);
      int int0 = 408;
      RegexSelector regexSelector0 = null;
      try {
        regexSelector0 = new RegexSelector("C,^V=3+#F[<pV", 408);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("us.codecraft.webmagic.selector.RegexSelector", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("v!G#");
      Spider spider0 = new Spider(simplePageProcessor0);
      Spider spider1 = spider0.clearPipeline();
      LinkedList<SpiderListener> linkedList0 = new LinkedList<SpiderListener>();
      Spider spider2 = spider1.setSpiderListeners(linkedList0);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "v!G#";
      stringArray0[1] = "v!G#";
      stringArray0[2] = "v!G#";
      stringArray0[3] = "v!G#";
      // Undeclared exception!
      try { 
        spider2.addUrl(stringArray0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      String string0 = "";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = new Spider(simplePageProcessor0);
      Request[] requestArray0 = new Request[6];
      Request request0 = new Request();
      Request request1 = request0.setUrl("");
      requestArray0[0] = request1;
      SpiderMonitor spiderMonitor0 = SpiderMonitor.instance();
      Spider[] spiderArray0 = new Spider[1];
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("");
      HashSetDuplicateRemover hashSetDuplicateRemover0 = new HashSetDuplicateRemover();
      DuplicateRemovedScheduler duplicateRemovedScheduler0 = fileCacheQueueScheduler0.setDuplicateRemover(hashSetDuplicateRemover0);
      Spider spider1 = spider0.scheduler(duplicateRemovedScheduler0);
      spiderArray0[0] = spider1;
      // Undeclared exception!
      try { 
        spiderMonitor0.register(spiderArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("us.codecraft.webmagic.Spider$1");
      Spider spider0 = new Spider(simplePageProcessor0);
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      Spider spider1 = spider0.setScheduler(priorityScheduler0);
      Spider spider2 = spider1.setUUID("us.codecraft.webmagic.Spider$1");
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Spider spider3 = spider2.startUrls(linkedList0);
      // Undeclared exception!
      try { 
        spider3.thread(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // threadNum should be more than one!
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("Spider is already running!");
      Spider spider0 = new Spider(simplePageProcessor0);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "Spider is already running!";
      stringArray0[1] = "Spider is already running!";
      stringArray0[2] = "Spider is already running!";
      stringArray0[3] = "Spider is already running!";
      stringArray0[4] = "Spider is already running!";
      stringArray0[5] = "Spider is already running!";
      stringArray0[6] = "Spider is already running!";
      stringArray0[7] = "Spider is already running!";
      // Undeclared exception!
      try { 
        spider0.addUrl(stringArray0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      // Undeclared exception!
      try { 
        Spider.create((PageProcessor) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Spider.Status.values();
      String string0 = "get a candidate url {}";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("get a candidate url {}");
      Spider spider0 = Spider.create(simplePageProcessor0);
      QueueScheduler queueScheduler0 = new QueueScheduler();
      Spider spider1 = spider0.setScheduler(queueScheduler0);
      Spider spider2 = spider1.setDownloader((Downloader) null);
      String[] stringArray0 = null;
      // Undeclared exception!
      try { 
        spider2.addUrl((String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      String string0 = "page status code error, page {} , code: {}";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("page status code error, page {} , code: {}");
      Spider spider0 = new Spider(simplePageProcessor0);
      // Undeclared exception!
      try { 
        spider0.addRequest((Request[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      String string0 = "";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = new Spider(simplePageProcessor0);
      int int0 = (-1215);
      TimeUnit timeUnit0 = TimeUnit.SECONDS;
      ThreadPoolExecutor threadPoolExecutor0 = null;
      try {
        threadPoolExecutor0 = new ThreadPoolExecutor((-1215), (-1215), (-1215), timeUnit0, (BlockingQueue<Runnable>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ThreadPoolExecutor", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = Spider.create(simplePageProcessor0);
      String[] stringArray0 = new String[0];
      Spider spider1 = spider0.addUrl(stringArray0);
      SpiderMonitor spiderMonitor0 = SpiderMonitor.instance();
      SpiderMonitor.MonitorSpiderListener spiderMonitor_MonitorSpiderListener0 = spiderMonitor0.new MonitorSpiderListener();
      List<String> list0 = spiderMonitor_MonitorSpiderListener0.getErrorUrls();
      Spider spider2 = spider1.startUrls(list0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("", "waitNewUrl - interrupted, error {}");
      Spider spider3 = spider2.setDownloader(phantomJSDownloader0);
      spider2.getThreadAlive();
      ConsolePipeline consolePipeline0 = new ConsolePipeline();
      Spider spider4 = spider3.pipeline(consolePipeline0);
      LinkedList<Pipeline> linkedList0 = new LinkedList<Pipeline>();
      Spider spider5 = spider4.setPipelines(linkedList0);
      spider5.getSpiderListeners();
      spider3.setUUID("oo!x");
      spider3.getPageCount();
      QueueScheduler queueScheduler0 = new QueueScheduler();
      Spider spider6 = spider5.scheduler(queueScheduler0);
      assertTrue(spider6.isSpawnUrl());
      
      spider4.setSpawnUrl(false);
      assertFalse(spider4.isSpawnUrl());
      assertFalse(spider0.isSpawnUrl());
      assertTrue(spider0.isExitWhenComplete());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("8m;YU");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Logger logger0 = (Logger)spider0.logger;
      spider0.logger = (org.slf4j.Logger) logger0;
      spider0.getStatus();
      assertTrue(spider0.isSpawnUrl());
      
      spider0.setSpawnUrl(false);
      Spider spider1 = spider0.setUUID("");
      spider1.setEmptySleepTime(2392);
      ForkJoinPool forkJoinPool0 = new ForkJoinPool(2392);
      spider0.setExecutorService(forkJoinPool0);
      assertFalse(spider0.isSpawnUrl());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      String string0 = "";
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-73);
      byteArray0[1] = (byte) (-116);
      byteArray0[2] = (byte) (-60);
      byteArray0[3] = (byte)58;
      byteArray0[4] = (byte) (-29);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = Spider.create(simplePageProcessor0);
      // Undeclared exception!
      try { 
        spider0.addUrl((String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor(" stop success!");
      Spider spider0 = new Spider(simplePageProcessor0);
      Spider spider1 = spider0.setExitWhenComplete(true);
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      Spider spider2 = spider1.setScheduler(priorityScheduler0);
      ForkJoinPool forkJoinPool0 = new ForkJoinPool();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      Spider spider3 = spider2.setExecutorService(forkJoinPool0);
      LinkedList<Pipeline> linkedList0 = new LinkedList<Pipeline>();
      spider3.setPipelines(linkedList0);
      Request[] requestArray0 = new Request[3];
      Request request0 = new Request();
      Request request1 = request0.setPriority(1L);
      Request request2 = request1.addCookie("", "LPKRS%P8l2;");
      requestArray0[0] = request2;
      // Undeclared exception!
      try { 
        spider1.test((String[]) null);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/http/protocol/HttpContext
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      String string0 = "";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = Spider.create(simplePageProcessor0);
      ForkJoinTask.getPool();
      spider0.setExecutorService((ExecutorService) null);
      PhantomJSDownloader phantomJSDownloader0 = null;
      try {
        phantomJSDownloader0 = new PhantomJSDownloader();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("&A\"Nz");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Spider spider1 = spider0.setUUID("&A\"Nz");
      Spider spider2 = spider1.thread(4);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("&A\"Nz", (String) null);
      PhantomJSDownloader phantomJSDownloader1 = phantomJSDownloader0.setRetryNum(4);
      Spider spider3 = spider2.downloader(phantomJSDownloader1);
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      priorityScheduler0.poll(spider0);
      Request request0 = new Request();
      spider2.exitWhenComplete = true;
      Spider spider4 = spider3.setExitWhenComplete(true);
      LinkedBlockingQueue<String> linkedBlockingQueue0 = new LinkedBlockingQueue<String>();
      List<String> list0 = spider3.getAll((Collection<String>) linkedBlockingQueue0);
      List<Request> list1 = spider3.getAll((Collection<String>) list0);
      Spider spider5 = spider1.startRequest(list1);
      CollectorPipeline collectorPipeline0 = spider5.getCollectorPipeline();
      spider2.addPipeline(collectorPipeline0);
      spider4.getUUID();
      Spider spider6 = Spider.create(simplePageProcessor0);
      spider6.setExitWhenComplete(true);
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("@(8<(");
      spider3.setScheduler(fileCacheQueueScheduler0);
      spider3.stop();
      assertEquals(Spider.Status.Stopped, spider1.getStatus());
      assertEquals(0L, spider0.getPageCount());
  }
}
