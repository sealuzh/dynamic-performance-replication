/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 05 03:24:39 GMT 2019
 */

package us.codecraft.webmagic.utils;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.HashMap;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import us.codecraft.webmagic.utils.DoubleKeyMap;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DoubleKeyMap_ESTest extends DoubleKeyMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Class<HashMap> class0 = HashMap.class;
      DoubleKeyMap<String, String, String> doubleKeyMap0 = new DoubleKeyMap<String, String, String>(class0);
      doubleKeyMap0.put("", "", "(,CePHt$.0g KPezu");
      String string0 = doubleKeyMap0.remove("", "");
      assertEquals("(,CePHt$.0g KPezu", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DoubleKeyMap<String, String, String> doubleKeyMap0 = new DoubleKeyMap<String, String, String>();
      doubleKeyMap0.put("b,%", "b,%", "b,%");
      String string0 = doubleKeyMap0.remove("b,%", (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      HashMap<HashMap<Object, Map<Integer, Object>>, Map<Map<Integer, Object>, Object>> hashMap0 = new HashMap<HashMap<Object, Map<Integer, Object>>, Map<Map<Integer, Object>, Object>>();
      DoubleKeyMap<HashMap<Object, Map<Integer, Object>>, Map<Integer, Object>, Object> doubleKeyMap0 = new DoubleKeyMap<HashMap<Object, Map<Integer, Object>>, Map<Integer, Object>, Object>(hashMap0);
      HashMap<Object, Map<Integer, Object>> hashMap1 = new HashMap<Object, Map<Integer, Object>>();
      HashMap<Map<Integer, Object>, Object> hashMap2 = new HashMap<Map<Integer, Object>, Object>();
      hashMap0.put(hashMap1, hashMap2);
      Map<Map<Integer, Object>, Object> map0 = doubleKeyMap0.remove(hashMap1);
      assertTrue(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      HashMap<Map<Object, String>, Map<String, HashMap<String, Object>>> hashMap0 = new HashMap<Map<Object, String>, Map<String, HashMap<String, Object>>>();
      HashMap<String, HashMap<String, Object>> hashMap1 = new HashMap<String, HashMap<String, Object>>();
      HashMap<String, Object> hashMap2 = new HashMap<String, Object>();
      hashMap1.put("", hashMap2);
      hashMap0.put((Map<Object, String>) null, hashMap1);
      DoubleKeyMap<Map<Object, String>, String, HashMap<String, Object>> doubleKeyMap0 = new DoubleKeyMap<Map<Object, String>, String, HashMap<String, Object>>(hashMap0);
      Map<String, HashMap<String, Object>> map0 = doubleKeyMap0.remove((Map<Object, String>) null);
      assertEquals(1, map0.size());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Class<HashMap> class0 = HashMap.class;
      DoubleKeyMap<String, String, String> doubleKeyMap0 = new DoubleKeyMap<String, String, String>(class0);
      doubleKeyMap0.put("b,%", "", "");
      String string0 = doubleKeyMap0.put("b,%", "", "");
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Class<HashMap> class0 = HashMap.class;
      DoubleKeyMap<Map<Integer, Object>, HashMap<Object, Map<Integer, Object>>, String> doubleKeyMap0 = new DoubleKeyMap<Map<Integer, Object>, HashMap<Object, Map<Integer, Object>>, String>();
      DoubleKeyMap<Map<Integer, Object>, Integer, String> doubleKeyMap1 = new DoubleKeyMap<Map<Integer, Object>, Integer, String>((Map<Map<Integer, Object>, Map<Integer, String>>) null, class0);
      Map<Integer, Object> map0 = doubleKeyMap1.newMap();
      HashMap<Object, Map<Integer, Object>> hashMap0 = new HashMap<Object, Map<Integer, Object>>();
      doubleKeyMap0.put(map0, hashMap0, "us.codecraft.webmagic.utils.MultiKeyMapBase");
      HashMap<Integer, Object> hashMap1 = new HashMap<Integer, Object>();
      Map<HashMap<Object, Map<Integer, Object>>, String> map1 = doubleKeyMap0.get((Map<Integer, Object>) hashMap1);
      assertEquals(1, map1.size());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DoubleKeyMap<String, String, String> doubleKeyMap0 = new DoubleKeyMap<String, String, String>();
      String string0 = doubleKeyMap0.remove("b,%", (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DoubleKeyMap<Integer, Object, Map<Map<Integer, Object>, Map<Integer, Object>>> doubleKeyMap0 = new DoubleKeyMap<Integer, Object, Map<Map<Integer, Object>, Map<Integer, Object>>>();
      Integer integer0 = new Integer(1);
      Object object0 = new Object();
      Map<Map<Integer, Object>, Map<Integer, Object>> map0 = doubleKeyMap0.remove(integer0, object0);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Class<HashMap> class0 = HashMap.class;
      DoubleKeyMap<String, String, Integer> doubleKeyMap0 = new DoubleKeyMap<String, String, Integer>(class0);
      Map<String, Integer> map0 = doubleKeyMap0.remove((String) null);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DoubleKeyMap<Object, Integer, String> doubleKeyMap0 = new DoubleKeyMap<Object, Integer, String>();
      DoubleKeyMap<Object, String, HashMap<String, Integer>> doubleKeyMap1 = new DoubleKeyMap<Object, String, HashMap<String, Integer>>();
      Map<String, HashMap<String, Integer>> map0 = doubleKeyMap1.remove((Object) doubleKeyMap0);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DoubleKeyMap<Map<Integer, Object>, Integer, Object> doubleKeyMap0 = new DoubleKeyMap<Map<Integer, Object>, Integer, Object>();
      DoubleKeyMap<String, Integer, Object> doubleKeyMap1 = new DoubleKeyMap<String, Integer, Object>();
      Object object0 = doubleKeyMap1.put("C!LcuF24G|7X+'KWr+Q", (Integer) null, (Object) doubleKeyMap0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      HashMap<String, Map<Object, HashMap<String, Object>>> hashMap0 = new HashMap<String, Map<Object, HashMap<String, Object>>>();
      DoubleKeyMap<String, Object, HashMap<String, Object>> doubleKeyMap0 = new DoubleKeyMap<String, Object, HashMap<String, Object>>(hashMap0);
      Map<String, Map<Object, String>> map0 = doubleKeyMap0.newMap();
      Class<Map> class0 = Map.class;
      DoubleKeyMap<String, Object, String> doubleKeyMap1 = new DoubleKeyMap<String, Object, String>(map0, class0);
      // Undeclared exception!
      try { 
        doubleKeyMap1.put("", (Object) doubleKeyMap0, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Class<HashMap> class0 = HashMap.class;
      DoubleKeyMap<String, String, String> doubleKeyMap0 = new DoubleKeyMap<String, String, String>(class0);
      String string0 = doubleKeyMap0.put((String) null, "", "BzPs}xE|=xAK");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DoubleKeyMap<Map<Integer, Object>, Integer, Object> doubleKeyMap0 = new DoubleKeyMap<Map<Integer, Object>, Integer, Object>();
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      Object object0 = doubleKeyMap0.get((Map<Integer, Object>) hashMap0, (Integer) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Class<HashMap> class0 = HashMap.class;
      DoubleKeyMap<String, String, Integer> doubleKeyMap0 = new DoubleKeyMap<String, String, Integer>(class0);
      Integer integer0 = doubleKeyMap0.get((String) null, "j0^");
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Class<HashMap> class0 = HashMap.class;
      DoubleKeyMap<String, HashMap<String, String>, String> doubleKeyMap0 = new DoubleKeyMap<String, HashMap<String, String>, String>(class0);
      Map<HashMap<String, String>, String> map0 = doubleKeyMap0.get((String) null);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      HashMap<Map<Object, String>, Map<String, HashMap<String, Object>>> hashMap0 = new HashMap<Map<Object, String>, Map<String, HashMap<String, Object>>>();
      DoubleKeyMap<Map<Object, String>, String, HashMap<String, Object>> doubleKeyMap0 = new DoubleKeyMap<Map<Object, String>, String, HashMap<String, Object>>(hashMap0);
      DoubleKeyMap<Integer, Object, String> doubleKeyMap1 = new DoubleKeyMap<Integer, Object, String>();
      Map<Object, Map<String, String>> map0 = doubleKeyMap1.newMap();
      Class<Map> class0 = Map.class;
      DoubleKeyMap<Object, String, String> doubleKeyMap2 = new DoubleKeyMap<Object, String, String>(map0, class0);
      Map<String, String> map1 = doubleKeyMap2.get((Object) doubleKeyMap0);
      assertNull(map1);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DoubleKeyMap<Object, Integer, String> doubleKeyMap0 = new DoubleKeyMap<Object, Integer, String>();
      HashMap<Object, Map<HashMap<Object, Object>, Object>> hashMap0 = new HashMap<Object, Map<HashMap<Object, Object>, Object>>();
      Class<Map> class0 = Map.class;
      DoubleKeyMap<Object, HashMap<Object, Object>, Object> doubleKeyMap1 = new DoubleKeyMap<Object, HashMap<Object, Object>, Object>(hashMap0, class0);
      HashMap<Object, Object> hashMap1 = new HashMap<Object, Object>();
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        doubleKeyMap1.put((Object) doubleKeyMap0, hashMap1, object0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Class<Map> class0 = Map.class;
      DoubleKeyMap<HashMap<String, Object>, Map<Integer, Object>, String> doubleKeyMap0 = null;
      try {
        doubleKeyMap0 = new DoubleKeyMap<HashMap<String, Object>, Map<Integer, Object>, String>((Map<HashMap<String, Object>, Map<Map<Integer, Object>, String>>) null, class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DoubleKeyMap<String, String, String> doubleKeyMap0 = null;
      try {
        doubleKeyMap0 = new DoubleKeyMap<String, String, String>((Class<? extends Map>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Class<Map> class0 = Map.class;
      DoubleKeyMap<Object, Map<Object, Integer>, Object> doubleKeyMap0 = null;
      try {
        doubleKeyMap0 = new DoubleKeyMap<Object, Map<Object, Integer>, Object>(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DoubleKeyMap<Object, Integer, String> doubleKeyMap0 = new DoubleKeyMap<Object, Integer, String>();
      HashMap<String, Map<Object, HashMap<Integer, String>>> hashMap0 = new HashMap<String, Map<Object, HashMap<Integer, String>>>();
      Class<Map> class0 = Map.class;
      DoubleKeyMap<String, Object, HashMap<Integer, String>> doubleKeyMap1 = new DoubleKeyMap<String, Object, HashMap<Integer, String>>(hashMap0, class0);
      HashMap<Integer, String> hashMap1 = doubleKeyMap1.get("p'pwht\tC]X5<Th3:", (Object) doubleKeyMap0);
      assertNull(hashMap1);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      HashMap<HashMap<Object, Map<Integer, Object>>, Map<Map<Integer, Object>, Object>> hashMap0 = new HashMap<HashMap<Object, Map<Integer, Object>>, Map<Map<Integer, Object>, Object>>();
      DoubleKeyMap<HashMap<Object, Map<Integer, Object>>, Map<Integer, Object>, Object> doubleKeyMap0 = new DoubleKeyMap<HashMap<Object, Map<Integer, Object>>, Map<Integer, Object>, Object>(hashMap0);
      HashMap<Object, Map<Integer, Object>> hashMap1 = new HashMap<Object, Map<Integer, Object>>();
      HashMap<Map<Integer, Object>, Object> hashMap2 = new HashMap<Map<Integer, Object>, Object>();
      hashMap0.put(hashMap1, hashMap2);
      HashMap<Integer, Object> hashMap3 = new HashMap<Integer, Object>();
      Object object0 = doubleKeyMap0.get(hashMap1, (Map<Integer, Object>) hashMap3);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Class<HashMap> class0 = HashMap.class;
      DoubleKeyMap<String, String, String> doubleKeyMap0 = new DoubleKeyMap<String, String, String>(class0);
      String string0 = doubleKeyMap0.remove((String) null, "");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      DoubleKeyMap<String, String, String> doubleKeyMap0 = new DoubleKeyMap<String, String, String>((Map<String, Map<String, String>>) null);
      String string0 = doubleKeyMap0.put((String) null, (String) null, (String) null);
      assertNull(string0);
  }
}
