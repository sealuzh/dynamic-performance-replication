/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 04:35:07 GMT 2018
 */

package okio;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectStreamConstants;
import java.io.OutputStream;
import java.io.UnsupportedEncodingException;
import java.nio.charset.Charset;
import java.nio.charset.IllegalCharsetNameException;
import okio.Buffer;
import okio.ByteString;
import okio.Options;
import okio.RealBufferedSink;
import okio.RealBufferedSource;
import okio.Segment;
import okio.SegmentedByteString;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SegmentedByteString_ESTest extends SegmentedByteString_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 0);
      // Undeclared exception!
      try { 
        segmentedByteString0.asByteBuffer();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("okio.SegmentedByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 0);
      // Undeclared exception!
      try { 
        segmentedByteString0.internalArray();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("okio.SegmentedByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Buffer buffer1 = realBufferedSource0.buffer;
      buffer1.readAndWriteUnsafe();
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer1, 0);
      segmentedByteString0.hashCode();
      Charset.defaultCharset();
      segmentedByteString0.rangeEquals((-3174), (byte[]) null, 1954, (-1));
      // Undeclared exception!
      try { 
        segmentedByteString0.getByte((-781));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("okio.SegmentedByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Charset.defaultCharset();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      buffer0.write(realBufferedSource0.buffer, (long) 0);
      realBufferedSource0.buffer();
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(realBufferedSource0.buffer, 0);
      segmentedByteString0.hashCode();
      Charset charset0 = Charset.defaultCharset();
      // Undeclared exception!
      try { 
        segmentedByteString0.string(charset0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("okio.SegmentedByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      buffer_UnsafeCursor0.seek(0L);
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(realBufferedSource0.buffer, 0);
      ByteString byteString0 = realBufferedSource0.readByteString();
      segmentedByteString0.rangeEquals((-1), byteString0, 0, (-1));
      // Undeclared exception!
      try { 
        segmentedByteString0.rangeEquals(0, (byte[]) null, (-3753), (-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 0);
      // Undeclared exception!
      try { 
        segmentedByteString0.sha1();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("okio.SegmentedByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      int int0 = 0;
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 0);
      // Undeclared exception!
      try { 
        segmentedByteString0.base64();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("okio.SegmentedByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Buffer buffer1 = realBufferedSource0.buffer;
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 0);
      segmentedByteString0.hashCode();
      segmentedByteString0.hashCode();
      Charset.defaultCharset();
      // Undeclared exception!
      try { 
        segmentedByteString0.getByte((-1264));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("okio.SegmentedByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 0);
      // Undeclared exception!
      try { 
        segmentedByteString0.substring(0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("okio.SegmentedByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Buffer buffer1 = realBufferedSource0.buffer;
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer1.readAndWriteUnsafe();
      buffer1.writeIntLe((-1));
      buffer_UnsafeCursor0.offset = 1469L;
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer_UnsafeCursor0.buffer, 2);
      // Undeclared exception!
      try { 
        segmentedByteString0.indexOf((byte[]) null, 2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Charset.defaultCharset();
      FileSystemHandling.shouldAllThrowIOExceptions();
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 0);
      // Undeclared exception!
      try { 
        segmentedByteString0.toString();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("okio.SegmentedByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 0);
      Integer integer0 = new Integer((-16777216));
      segmentedByteString0.equals(integer0);
      // Undeclared exception!
      try { 
        segmentedByteString0.base64Url();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("okio.SegmentedByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 0);
      // Undeclared exception!
      try { 
        segmentedByteString0.utf8();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("okio.SegmentedByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Charset.defaultCharset();
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 0);
      int int0 = ObjectStreamConstants.baseWireHandle;
      // Undeclared exception!
      try { 
        segmentedByteString0.substring(0, 8257536);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("okio.SegmentedByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Buffer buffer1 = realBufferedSource0.buffer;
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = realBufferedSource0.buffer.readAndWriteUnsafe();
      Buffer buffer2 = buffer1.writeIntLe((-1));
      buffer_UnsafeCursor0.end = (-1);
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer_UnsafeCursor0.buffer, 4);
      buffer1.readShortLe();
      ByteString byteString0 = segmentedByteString0.toAsciiLowercase();
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(buffer2);
      realBufferedSource0.readByteString();
      segmentedByteString0.rangeEquals(2441, byteString0, 112, 18);
      assertEquals(4, segmentedByteString0.size());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(realBufferedSource0.buffer, 0);
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      Charset.defaultCharset();
      realBufferedSource0.buffer.readAndWriteUnsafe();
      realBufferedSource0.buffer();
      Object object0 = new Object();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      segmentedByteString0.equals(segmentedByteString0);
      // Undeclared exception!
      try { 
        segmentedByteString0.indexOf((byte[]) null, (-294));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("okio.SegmentedByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      Buffer buffer1 = realBufferedSource0.buffer.writeIntLe((-1));
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer1, 2);
      segmentedByteString0.toAsciiUppercase();
      Charset.defaultCharset();
      segmentedByteString0.write(buffer_UnsafeCursor0.buffer);
      Object object0 = new Object();
      segmentedByteString0.equals(object0);
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream(" < ", " < ");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         //  < 
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.readUnsafe();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(realBufferedSource0.buffer, 0);
      ByteString byteString0 = realBufferedSource0.readByteString();
      segmentedByteString0.rangeEquals((-1), byteString0, 0, (-1));
      // Undeclared exception!
      try { 
        segmentedByteString0.hmacSha1(byteString0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("okio.SegmentedByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      realBufferedSource0.buffer.readAndWriteUnsafe();
      Buffer buffer1 = realBufferedSource0.buffer.writeIntLe((-1));
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer1, 2);
      Charset.defaultCharset();
      byte[] byteArray0 = new byte[2];
      segmentedByteString0.hashCode();
      segmentedByteString0.rangeEquals(2, byteArray0, 550, 550);
      // Undeclared exception!
      try { 
        ByteString.of((byte[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // data == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      int int0 = 0;
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 0);
      // Undeclared exception!
      try { 
        segmentedByteString0.hmacSha256(segmentedByteString0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("okio.SegmentedByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Buffer buffer0 = new Buffer();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      realBufferedSource0.buffer.readAndWriteUnsafe();
      Buffer buffer1 = realBufferedSource0.buffer.writeIntLe((-1));
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer1, 2);
      realBufferedSource0.indexOf((ByteString) segmentedByteString0);
      realBufferedSource0.inputStream();
      realBufferedSource0.readShortLe();
      segmentedByteString0.toAsciiUppercase();
      Object object0 = new Object();
      segmentedByteString0.hashCode();
      assertEquals(2, segmentedByteString0.size());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = realBufferedSource0.buffer.readAndWriteUnsafe();
      realBufferedSource0.buffer.writeIntLe((-1));
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer_UnsafeCursor0.buffer, 2);
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      Charset charset0 = Charset.defaultCharset();
      ByteString byteString0 = ByteString.encodeString("", charset0);
      realBufferedSource0.buffer.readAndWriteUnsafe();
      realBufferedSource0.buffer();
      Object object0 = new Object();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      boolean boolean0 = segmentedByteString0.equals(byteString0);
      assertFalse(boolean0);
      
      segmentedByteString0.rangeEquals((-1), (byte[]) null, 105, (-626));
      assertEquals(2, segmentedByteString0.size());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = realBufferedSource0.buffer.readUnsafe();
      Buffer buffer1 = realBufferedSource0.buffer.writeIntLe((-1));
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer_UnsafeCursor0.buffer, 2);
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      SegmentedByteString segmentedByteString1 = new SegmentedByteString(buffer1, 2);
      segmentedByteString0.equals(segmentedByteString1);
      // Undeclared exception!
      try { 
        segmentedByteString0.lastIndexOf((byte[]) null, (int) (byte)14);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Buffer buffer1 = realBufferedSource0.buffer;
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer1.readAndWriteUnsafe();
      Buffer buffer2 = buffer1.writeIntLe((-1));
      buffer_UnsafeCursor0.offset = 1469L;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer_UnsafeCursor0.buffer, 2);
      ByteString[] byteStringArray0 = new ByteString[4];
      buffer2.readByteString();
      byteStringArray0[0] = (ByteString) segmentedByteString0;
      segmentedByteString0.startsWith(byteStringArray0[0]);
      Options.of(byteStringArray0);
      segmentedByteString0.sha256();
      int int0 = buffer_UnsafeCursor0.end;
      Charset.defaultCharset();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      segmentedByteString0.write(buffer0);
      segmentedByteString0.hashCode();
      Charset.defaultCharset();
      segmentedByteString0.rangeEquals(2, (byte[]) null, (-1038), (-1038));
      assertFalse(buffer0.exhausted());
      assertEquals(2L, buffer0.completeSegmentByteCount());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      realBufferedSource0.buffer.readAndWriteUnsafe();
      Buffer buffer1 = realBufferedSource0.buffer.writeIntLe((-1));
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer1, 2);
      ByteString byteString0 = segmentedByteString0.toAsciiUppercase();
      Object object0 = new Object();
      segmentedByteString0.hashCode();
      buffer0.indexOfElement(byteString0);
      segmentedByteString0.rangeEquals(70, byteString0, 70, (-2211));
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      segmentedByteString0.write(byteArrayOutputStream0);
      assertEquals(2, byteArrayOutputStream0.size());
      assertEquals("\uFFFD\uFFFD", byteArrayOutputStream0.toString());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      Buffer buffer1 = buffer0.writeIntLe((-1));
      buffer_UnsafeCursor0.offset = (long) (-1);
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer_UnsafeCursor0.buffer, 4);
      ByteString[] byteStringArray0 = new ByteString[4];
      byteStringArray0[0] = (ByteString) segmentedByteString0;
      byteStringArray0[1] = (ByteString) segmentedByteString0;
      segmentedByteString0.startsWith(byteStringArray0[0]);
      byteStringArray0[3] = (ByteString) segmentedByteString0;
      Options.of(byteStringArray0);
      buffer_UnsafeCursor0.offset = (long) 4;
      int int0 = buffer_UnsafeCursor0.end;
      int int1 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      SegmentedByteString segmentedByteString1 = new SegmentedByteString(buffer1, 2);
      // Undeclared exception!
      try { 
        segmentedByteString0.write((OutputStream) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // out == null
         //
         verifyException("okio.SegmentedByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Buffer buffer1 = realBufferedSource0.buffer;
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer1.readAndWriteUnsafe();
      Buffer buffer2 = buffer1.writeIntLe((-1));
      buffer_UnsafeCursor0.end = (-1);
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer_UnsafeCursor0.buffer, 4);
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      SegmentedByteString segmentedByteString1 = new SegmentedByteString(buffer2, 1);
      ByteString byteString0 = segmentedByteString1.md5();
      byte[] byteArray0 = buffer1.readByteArray();
      FileSystemHandling.shouldAllThrowIOExceptions();
      buffer1.writeUtf8CodePoint((-1));
      int int1 = buffer_UnsafeCursor0.end;
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer1);
      segmentedByteString0.write(realBufferedSource0.buffer);
      SegmentedByteString segmentedByteString2 = new SegmentedByteString(buffer1, 4);
      segmentedByteString2.endsWith(byteArray0);
      Integer integer0 = new Integer(4);
      segmentedByteString2.hmacSha512(byteString0);
      // Undeclared exception!
      try { 
        segmentedByteString2.lastIndexOf((byte[]) null, 38);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = realBufferedSource0.buffer.readAndWriteUnsafe();
      realBufferedSource0.buffer.writeIntLe((-1));
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer_UnsafeCursor0.buffer, 2);
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      int int1 = ObjectStreamConstants.baseWireHandle;
      Charset.defaultCharset();
      segmentedByteString0.equals(segmentedByteString0);
      SegmentedByteString segmentedByteString1 = new SegmentedByteString(buffer_UnsafeCursor0.buffer, 2);
      realBufferedSource0.readByteString((long) 2);
      segmentedByteString0.hmacSha1(segmentedByteString0);
      segmentedByteString0.write(realBufferedSource0.buffer);
      FileSystemHandling.shouldAllThrowIOExceptions();
      realBufferedSource0.readUtf8CodePoint();
      MockFile mockFile0 = new MockFile("6#2'jj.n$'nluhp}qS", "6#2'jj.n$'nluhp}qS");
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer_UnsafeCursor0.buffer);
      SegmentedByteString segmentedByteString2 = new SegmentedByteString(buffer_UnsafeCursor0.buffer, 2);
      segmentedByteString2.compareTo((ByteString) segmentedByteString0);
      // Undeclared exception!
      try { 
        segmentedByteString0.lastIndexOf((byte[]) null, (-2299));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      Buffer buffer1 = buffer0.writeIntLe((-1));
      buffer_UnsafeCursor0.end = (-1);
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer_UnsafeCursor0.buffer, 4);
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      SegmentedByteString segmentedByteString1 = new SegmentedByteString(buffer1, 1);
      ByteString byteString0 = segmentedByteString1.md5();
      FileSystemHandling.shouldAllThrowIOExceptions();
      int int1 = buffer_UnsafeCursor0.end;
      byteString0.startsWith((ByteString) segmentedByteString0);
      MockFile mockFile0 = new MockFile("6#2'jj.n$'nluhp}qS", "6#2'jj.n$'nluhp}qS");
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer1);
      Buffer buffer2 = buffer_UnsafeCursor0.buffer;
      SegmentedByteString segmentedByteString2 = null;
      try {
        segmentedByteString2 = new SegmentedByteString(buffer2, 762);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=4 offset=0 byteCount=762
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = realBufferedSource0.buffer.readUnsafe();
      Buffer buffer1 = realBufferedSource0.buffer.writeIntLe((-1));
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer1, 2);
      ByteString byteString0 = realBufferedSource0.readByteString((long) 2);
      segmentedByteString0.write(realBufferedSource0.buffer);
      realBufferedSource0.readUtf8CodePoint();
      byteString0.write(buffer_UnsafeCursor0.buffer);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer_UnsafeCursor0.buffer);
      SegmentedByteString segmentedByteString1 = new SegmentedByteString(buffer_UnsafeCursor0.buffer, 2);
      Charset.defaultCharset();
      segmentedByteString1.hex();
      segmentedByteString1.startsWith(byteString0);
      Integer integer0 = new Integer(2);
      Charset.defaultCharset();
      // Undeclared exception!
      try { 
        Charset.forName("");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // 
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = realBufferedSource0.buffer.readAndWriteUnsafe();
      Buffer buffer1 = realBufferedSource0.buffer.writeIntLe((-1));
      buffer1.writeHexadecimalUnsignedLong((-1337L));
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer1, 2);
      realBufferedSource0.readByteString((long) 2);
      segmentedByteString0.write(realBufferedSource0.buffer);
      FileSystemHandling.shouldAllThrowIOExceptions();
      realBufferedSource0.readUtf8CodePoint();
      ByteString byteString0 = buffer1.sha512();
      MockFile mockFile0 = new MockFile("6#2'jj.n$'nluhp}qS", "6#2'jj.n$'nluhp}qS");
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer2 = realBufferedSink0.buffer;
      SegmentedByteString segmentedByteString1 = new SegmentedByteString(buffer_UnsafeCursor0.buffer, 2);
      buffer2.rangeEquals((-1337L), byteString0);
      segmentedByteString1.endsWith((ByteString) segmentedByteString0);
      segmentedByteString0.write(buffer2);
      SegmentedByteString segmentedByteString2 = null;
      try {
        segmentedByteString2 = new SegmentedByteString(buffer_UnsafeCursor0.buffer, 1957);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=19 offset=0 byteCount=1957
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      realBufferedSource0.buffer.readAndWriteUnsafe();
      Buffer buffer1 = realBufferedSource0.buffer.writeIntLe((-1));
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer1, 2);
      byte[] byteArray0 = new byte[2];
      segmentedByteString0.rangeEquals(2, byteArray0, 583, (-381));
      // Undeclared exception!
      try { 
        ByteString.of((byte[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // data == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Buffer buffer1 = realBufferedSource0.buffer;
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer1.readAndWriteUnsafe();
      Buffer buffer2 = buffer1.writeIntLe((-1));
      buffer_UnsafeCursor0.offset = 1469L;
      int int0 = 2;
      Segment segment0 = new Segment((byte[]) null, 2, 2, true, true);
      buffer2.head = segment0;
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      SegmentedByteString segmentedByteString0 = null;
      try {
        segmentedByteString0 = new SegmentedByteString(buffer_UnsafeCursor0.buffer, 2);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // s.limit == s.pos
         //
      }
  }
}
